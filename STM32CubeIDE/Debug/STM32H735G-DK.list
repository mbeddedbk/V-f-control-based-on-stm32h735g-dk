
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d178  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b30  0801d448  0801d448  0002d448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001192  08020f78  08020f78  00030f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000002c  0802210c  0802210c  0003210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000160  08022138  08022138  00032138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08022298  08022298  000d3d38  2**0
                  CONTENTS
  7 .ARM          00000000  08022298  08022298  000d3d38  2**0
                  CONTENTS
  8 .preinit_array 00000000  08022298  08022298  000d3d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08022298  08022298  00032298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080222ac  080222ac  000322ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  24000000  080222b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007210  24000140  080223f4  00040140  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24007350  080223f4  00047350  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000d3d38  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00083d38  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000f8d65  00000000  00000000  000d3d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017db8  00000000  00000000  001ccacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003218  00000000  00000000  001e4888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00006388  00000000  00000000  001e7aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00044804  00000000  00000000  001ede28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005b2be  00000000  00000000  0023262c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0018076d  00000000  00000000  0028d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0040e057  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009350  00000000  00000000  0040e12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00036e68  00000000  00000000  0041747c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d430 	.word	0x0801d430

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	0801d430 	.word	0x0801d430

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	; (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00b baa0 	b.w	800bc70 <vTaskSetApplicationTaskTag>
 8000730:	080021f1 	.word	0x080021f1

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f009 fe49 	bl	800a3ce <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <SystemClock_Config>:
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	224c      	movs	r2, #76	; 0x4c
 8000746:	2100      	movs	r1, #0
 8000748:	a809      	add	r0, sp, #36	; 0x24
 800074a:	f01b fe83 	bl	801c454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	a801      	add	r0, sp, #4
 8000754:	f01b fe7e 	bl	801c454 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000758:	2004      	movs	r0, #4
 800075a:	f007 fda7 	bl	80082ac <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <SystemClock_Config+0x9c>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	0491      	lsls	r1, r2, #18
 800077a:	d5fc      	bpl.n	8000776 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000780:	2130      	movs	r1, #48	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000784:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000786:	f023 0303 	bic.w	r3, r3, #3
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a8:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007aa:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ae:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f007 fdb9 	bl	8008328 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2103      	movs	r1, #3
 80007b8:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007bc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d4:	f008 f8a6 	bl	8008924 <HAL_RCC_ClockConfig>
}
 80007d8:	b01c      	add	sp, #112	; 0x70
 80007da:	bd10      	pop	{r4, pc}
 80007dc:	58024800 	.word	0x58024800
 80007e0:	58024400 	.word	0x58024400

080007e4 <PeriphCommonClock_Config>:
{
 80007e4:	b500      	push	{lr}
 80007e6:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	2290      	movs	r2, #144	; 0x90
 80007ea:	2100      	movs	r1, #0
 80007ec:	a80a      	add	r0, sp, #40	; 0x28
 80007ee:	f01b fe31 	bl	801c454 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007f6:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007f8:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007fa:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000806:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800080a:	2300      	movs	r3, #0
 800080c:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000810:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000812:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000816:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000818:	f008 fb0a 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
}
 800081c:	b02f      	add	sp, #188	; 0xbc
 800081e:	f85d fb04 	ldr.w	pc, [sp], #4

08000822 <movingAvg>:
{
 8000822:	b570      	push	{r4, r5, r6, lr}
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000824:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8000828:	680c      	ldr	r4, [r1, #0]
{
 800082a:	9d04      	ldr	r5, [sp, #16]
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 800082c:	1ba4      	subs	r4, r4, r6
 800082e:	442c      	add	r4, r5
 8000830:	600c      	str	r4, [r1, #0]
  ptrArrNumbers[pos] = nextNum;
 8000832:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
}
 8000836:	fb94 f0f3 	sdiv	r0, r4, r3
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <setModulationIndex>:
	if(DIVIDE_BY_TWO_PI(PI_angularFrq) < 1.5)
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <setModulationIndex+0x38>)
 800083e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000878 <setModulationIndex+0x3c>
 8000842:	edd3 6a00 	vldr	s13, [r3]
 8000846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800084a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800084e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000856:	d503      	bpl.n	8000860 <setModulationIndex+0x24>
		modulationIndex = 0.03;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <setModulationIndex+0x40>)
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <setModulationIndex+0x44>)
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	4770      	bx	lr
		modulationIndex = DIVIDE_BY_TWO_PI(PI_angularFrq) / 50.0f;
 8000860:	bfa1      	itttt	ge
 8000862:	eddf 6a08 	vldrge	s13, [pc, #32]	; 8000884 <setModulationIndex+0x48>
 8000866:	4b05      	ldrge	r3, [pc, #20]	; (800087c <setModulationIndex+0x40>)
 8000868:	ee87 7aa6 	vdivge.f32	s14, s15, s13
 800086c:	ed83 7a00 	vstrge	s14, [r3]
}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2400015c 	.word	0x2400015c
 8000878:	40c90fdb 	.word	0x40c90fdb
 800087c:	24000024 	.word	0x24000024
 8000880:	3cf5c28f 	.word	0x3cf5c28f
 8000884:	42480000 	.word	0x42480000

08000888 <limitAngFrq>:
	if(PI_angularFrq > MULTIPLY_BY_TWO_PI(50)) PI_angularFrq = 314.159265f;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <limitAngFrq+0x2c>)
 800088a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80008b8 <limitAngFrq+0x30>
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089a:	dd02      	ble.n	80008a2 <limitAngFrq+0x1a>
 800089c:	ed83 7a00 	vstr	s14, [r3]
	if(PI_angularFrq < 0) PI_angularFrq = 0;
 80008a0:	4770      	bx	lr
 80008a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008aa:	bf44      	itt	mi
 80008ac:	2200      	movmi	r2, #0
 80008ae:	601a      	strmi	r2, [r3, #0]
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2400015c 	.word	0x2400015c
 80008b8:	439d1463 	.word	0x439d1463

080008bc <adjustRPM>:
	angularFrq = MULTIPLY_BY_TWO_PI(fooRPM) / 60.0f;
 80008bc:	ee07 0a90 	vmov	s15, r0
 80008c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80008dc <adjustRPM+0x20>
 80008c4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80008e0 <adjustRPM+0x24>
 80008c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <adjustRPM+0x28>)
 80008ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008d6:	ed83 7a00 	vstr	s14, [r3]
}
 80008da:	4770      	bx	lr
 80008dc:	40c90fdb 	.word	0x40c90fdb
 80008e0:	42700000 	.word	0x42700000
 80008e4:	24000018 	.word	0x24000018

080008e8 <pi_control>:
	arg->sum = sat(arg->sum + arg->ki * error ,arg->plmt, arg->nlmt);//arg->plmt, arg->nlmt);
 80008e8:	ed90 7a01 	vldr	s14, [r0, #4]
 80008ec:	edd0 7a04 	vldr	s15, [r0, #16]
 80008f0:	edd0 6a02 	vldr	s13, [r0, #8]
 80008f4:	eee7 7a00 	vfma.f32	s15, s14, s0
 80008f8:	ed90 7a03 	vldr	s14, [r0, #12]
	return  sat(arg->sum + error * arg->kp,arg->plmt, arg->nlmt);//arg->plmt, arg->nlmt);
 80008fc:	ed90 6a00 	vldr	s12, [r0]
		x = max;
 8000900:	eef4 7a66 	vcmp.f32	s15, s13
 8000904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000908:	fe76 7aa7 	vselgt.f32	s15, s13, s15
		x = min;
 800090c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	fe77 7a27 	vselgt.f32	s15, s14, s15
	arg->sum = sat(arg->sum + arg->ki * error ,arg->plmt, arg->nlmt);//arg->plmt, arg->nlmt);
 8000918:	edc0 7a04 	vstr	s15, [r0, #16]
	return  sat(arg->sum + error * arg->kp,arg->plmt, arg->nlmt);//arg->plmt, arg->nlmt);
 800091c:	eee6 7a00 	vfma.f32	s15, s12, s0
		x = max;
 8000920:	eef4 6a67 	vcmp.f32	s13, s15
 8000924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000928:	bf48      	it	mi
 800092a:	eef0 7a66 	vmovmi.f32	s15, s13
		x = min;
 800092e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8000936:	fe37 0a27 	vselgt.f32	s0, s14, s15
 800093a:	4770      	bx	lr

0800093c <HAL_TIM_IC_CaptureCallback>:
	if(htim->Instance == TIM23)
 800093c:	6803      	ldr	r3, [r0, #0]
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d10d      	bne.n	8000960 <HAL_TIM_IC_CaptureCallback+0x24>
		counterEnc = __HAL_TIM_GET_COUNTER(htim);
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_TIM_IC_CaptureCallback+0x2c>)
		position = signedCounterEnc/4.0;
 8000948:	ee07 3a10 	vmov	s14, r3
 800094c:	eeba 7bcf 	vcvt.f64.s32	d7, d7, #2
		counterEnc = __HAL_TIM_GET_COUNTER(htim);
 8000950:	6013      	str	r3, [r2, #0]
		signedCounterEnc = (int32_t)counterEnc;
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_TIM_IC_CaptureCallback+0x30>)
		position = signedCounterEnc/4.0;
 8000954:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		signedCounterEnc = (int32_t)counterEnc;
 8000958:	6013      	str	r3, [r2, #0]
		position = signedCounterEnc/4.0;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x34>)
 800095c:	ed83 7a00 	vstr	s14, [r3]
}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	4000e000 	.word	0x4000e000
 8000968:	2400017c 	.word	0x2400017c
 800096c:	240001a4 	.word	0x240001a4
 8000970:	24000198 	.word	0x24000198

08000974 <adjustMIAndFreq>:
	angularFrq = foo_freq * TWO_PI;
 8000974:	ee07 0a90 	vmov	s15, r0
	modulationIndex = foo_MI;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <adjustMIAndFreq+0x34>)
	angularFrq = foo_freq * TWO_PI;
 800097a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009ac <adjustMIAndFreq+0x38>
	counter = 0;
 800097e:	2200      	movs	r2, #0
	angularFrq = foo_freq * TWO_PI;
 8000980:	eef8 7a67 	vcvt.f32.u32	s15, s15
	modulationIndex = foo_MI;
 8000984:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <adjustMIAndFreq+0x3c>)
	angularFrq = foo_freq * TWO_PI;
 800098a:	ee67 7a87 	vmul.f32	s15, s15, s14
	frq = foo_freq;
 800098e:	6018      	str	r0, [r3, #0]
	angularFrq = foo_freq * TWO_PI;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <adjustMIAndFreq+0x40>)
 8000992:	edc3 7a00 	vstr	s15, [r3]
	upperLimit = (5000/foo_freq);
 8000996:	f241 3388 	movw	r3, #5000	; 0x1388
 800099a:	fbb3 f0f0 	udiv	r0, r3, r0
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <adjustMIAndFreq+0x44>)
 80009a0:	6018      	str	r0, [r3, #0]
	counter = 0;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <adjustMIAndFreq+0x48>)
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	4770      	bx	lr
 80009a8:	24000024 	.word	0x24000024
 80009ac:	40c90fdb 	.word	0x40c90fdb
 80009b0:	2400001c 	.word	0x2400001c
 80009b4:	24000018 	.word	0x24000018
 80009b8:	24000030 	.word	0x24000030
 80009bc:	24000178 	.word	0x24000178

080009c0 <adjustMIAndFreqforPI>:
	if((foo_freq - old_foo_freq) >= 2){
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <adjustMIAndFreqforPI+0x48>)
 80009c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ee70 7a67 	vsub.f32	s15, s0, s15
 80009ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	db15      	blt.n	8000a04 <adjustMIAndFreqforPI+0x44>
	modulationIndex = foo_MI;
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <adjustMIAndFreqforPI+0x4c>)
	frq = foo_freq;
 80009da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	upperLimit = (5000/foo_freq);
 80009de:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a10 <adjustMIAndFreqforPI+0x50>
	counter = 0;
 80009e2:	2100      	movs	r1, #0
	modulationIndex = foo_MI;
 80009e4:	edc2 0a00 	vstr	s1, [r2]
	frq = foo_freq;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <adjustMIAndFreqforPI+0x54>)
	old_foo_freq = foo_freq;
 80009ea:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 80009ee:	edc2 7a00 	vstr	s15, [r2]
	upperLimit = (5000/foo_freq);
 80009f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <adjustMIAndFreqforPI+0x58>)
 80009f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fc:	edc2 7a00 	vstr	s15, [r2]
	counter = 0;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <adjustMIAndFreqforPI+0x5c>)
 8000a02:	6011      	str	r1, [r2, #0]
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	24000188 	.word	0x24000188
 8000a0c:	24000024 	.word	0x24000024
 8000a10:	459c4000 	.word	0x459c4000
 8000a14:	2400001c 	.word	0x2400001c
 8000a18:	24000030 	.word	0x24000030
 8000a1c:	24000178 	.word	0x24000178

08000a20 <motorStart>:
{
 8000a20:	b508      	push	{r3, lr}
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a22:	210c      	movs	r1, #12
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <motorStart+0x2c>)
 8000a26:	f009 fb9f 	bl	800a168 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a2a:	210c      	movs	r1, #12
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <motorStart+0x30>)
 8000a2e:	f009 fb9b 	bl	800a168 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a32:	2100      	movs	r1, #0
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <motorStart+0x34>)
 8000a36:	f009 fb97 	bl	800a168 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim14);
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <motorStart+0x38>)
 8000a3c:	f008 ff9c 	bl	8009978 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a40:	213c      	movs	r1, #60	; 0x3c
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <motorStart+0x3c>)
}
 8000a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a48:	f008 bfdc 	b.w	8009a04 <HAL_TIM_Encoder_Start_IT>
 8000a4c:	240070b8 	.word	0x240070b8
 8000a50:	24006eec 	.word	0x24006eec
 8000a54:	24006fbc 	.word	0x24006fbc
 8000a58:	240071b8 	.word	0x240071b8
 8000a5c:	2400716c 	.word	0x2400716c

08000a60 <main>:
{
 8000a60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000a64:	b0a3      	sub	sp, #140	; 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a66:	2210      	movs	r2, #16
 8000a68:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a6a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6c:	a815      	add	r0, sp, #84	; 0x54
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a6e:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a70:	f01b fcf0 	bl	801c454 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000a74:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 8000a76:	f005 fd51 	bl	800651c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a7a:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 8000a7e:	4bd8      	ldr	r3, [pc, #864]	; (8000de0 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a80:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a82:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a86:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a88:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a8c:	4bd5      	ldr	r3, [pc, #852]	; (8000de4 <main+0x384>)
 8000a8e:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a90:	f005 fd66 	bl	8006560 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a94:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a98:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a9a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a9e:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aa0:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000aa4:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000aa8:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aac:	f005 fd58 	bl	8006560 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ab0:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab2:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ab4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ab8:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000abc:	2316      	movs	r3, #22
 8000abe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ac2:	f240 1301 	movw	r3, #257	; 0x101
 8000ac6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aca:	f005 fd49 	bl	8006560 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ace:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad2:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ad4:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ad8:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ada:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ade:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000ae0:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000ae4:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae8:	f005 fd3a 	bl	8006560 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000aec:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aee:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000af0:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000af4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000af8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000afc:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b00:	f005 fd2e 	bl	8006560 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b04:	4620      	mov	r0, r4
 8000b06:	f005 fd19 	bl	800653c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b0a:	4bb7      	ldr	r3, [pc, #732]	; (8000de8 <main+0x388>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000b12:	d111      	bne.n	8000b38 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b18:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b1c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b24:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b2e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b34:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b38:	4aab      	ldr	r2, [pc, #684]	; (8000de8 <main+0x388>)
 8000b3a:	6953      	ldr	r3, [r2, #20]
 8000b3c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000b40:	d123      	bne.n	8000b8a <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b52:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b56:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000b5a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b5c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b60:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b62:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b66:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b68:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000b6c:	d2f9      	bcs.n	8000b62 <main+0x102>
    } while(sets-- != 0U);
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	f113 0f20 	cmn.w	r3, #32
 8000b74:	d1f2      	bne.n	8000b5c <main+0xfc>
 8000b76:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b7a:	6953      	ldr	r3, [r2, #20]
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b86:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000b8a:	f005 fc23 	bl	80063d4 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000b90:	f7ff fdd6 	bl	8000740 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000b96:	f7ff fe25 	bl	80007e4 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	2214      	movs	r2, #20
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	a815      	add	r0, sp, #84	; 0x54
 8000ba0:	f01b fc58 	bl	801c454 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b91      	ldr	r3, [pc, #580]	; (8000dec <main+0x38c>)
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ba6:	f248 0120 	movw	r1, #32800	; 0x8020
 8000baa:	4891      	ldr	r0, [pc, #580]	; (8000df0 <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000bb0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000bb4:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 8000bc0:	4d8c      	ldr	r5, [pc, #560]	; (8000df4 <main+0x394>)
  pLayerCfg.FBStartAdress = 0x70000000;
 8000bc2:	f04f 0805 	mov.w	r8, #5
  hospi1.Init.FifoThreshold = 4;
 8000bc6:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd2:	f002 0202 	and.w	r2, r2, #2
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000be2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000bee:	9201      	str	r2, [sp, #4]
 8000bf0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bf6:	f042 0208 	orr.w	r2, r2, #8
 8000bfa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c02:	f002 0208 	and.w	r2, r2, #8
 8000c06:	9202      	str	r2, [sp, #8]
 8000c08:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c0e:	f042 0210 	orr.w	r2, r2, #16
 8000c12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c1a:	f002 0210 	and.w	r2, r2, #16
 8000c1e:	9203      	str	r2, [sp, #12]
 8000c20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c26:	f042 0201 	orr.w	r2, r2, #1
 8000c2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c32:	f002 0201 	and.w	r2, r2, #1
 8000c36:	9204      	str	r2, [sp, #16]
 8000c38:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c4a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c4e:	9205      	str	r2, [sp, #20]
 8000c50:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c56:	f042 0204 	orr.w	r2, r2, #4
 8000c5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c62:	f002 0204 	and.w	r2, r2, #4
 8000c66:	9206      	str	r2, [sp, #24]
 8000c68:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c6e:	f042 0220 	orr.w	r2, r2, #32
 8000c72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	9307      	str	r3, [sp, #28]
 8000c82:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c84:	f005 ff44 	bl	8006b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	485a      	ldr	r0, [pc, #360]	; (8000df8 <main+0x398>)
 8000c90:	f005 ff3e 	bl	8006b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	210c      	movs	r1, #12
 8000c98:	4858      	ldr	r0, [pc, #352]	; (8000dfc <main+0x39c>)
 8000c9a:	f005 ff39 	bl	8006b10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	f248 0320 	movw	r3, #32800	; 0x8020
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca2:	a915      	add	r1, sp, #84	; 0x54
 8000ca4:	4852      	ldr	r0, [pc, #328]	; (8000df0 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	f005 fda3 	bl	80067f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	a915      	add	r1, sp, #84	; 0x54
 8000cb4:	4850      	ldr	r0, [pc, #320]	; (8000df8 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f005 fd9b 	bl	80067f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	a915      	add	r1, sp, #84	; 0x54
 8000cc4:	484d      	ldr	r0, [pc, #308]	; (8000dfc <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	e9cd a615 	strd	sl, r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f005 fd92 	bl	80067f8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000cd4:	484a      	ldr	r0, [pc, #296]	; (8000e00 <main+0x3a0>)
 8000cd6:	4b4b      	ldr	r3, [pc, #300]	; (8000e04 <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cd8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000cda:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cdc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cde:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ce2:	f005 fc65 	bl	80065b0 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ce6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000cea:	4847      	ldr	r0, [pc, #284]	; (8000e08 <main+0x3a8>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cec:	4a47      	ldr	r2, [pc, #284]	; (8000e0c <main+0x3ac>)
  hdma2d.Init.OutputOffset = 0;
 8000cee:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cf2:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cf6:	f005 fcb6 	bl	8006666 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cfa:	2234      	movs	r2, #52	; 0x34
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	a815      	add	r0, sp, #84	; 0x54
 8000d00:	f01b fba8 	bl	801c454 <memset>
  hltdc.Instance = LTDC;
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000d06:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000d08:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000d0a:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000d0e:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000d12:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d14:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000d16:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d1a:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000d1e:	2309      	movs	r3, #9
 8000d20:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000d24:	230b      	movs	r3, #11
 8000d26:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000d2a:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d2e:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000d30:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000d34:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d38:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000d3c:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d40:	f006 fb3a 	bl	80073b8 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000d44:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8000d46:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8000d4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d4e:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d50:	971c      	str	r7, [sp, #112]	; 0x70
  pLayerCfg.WindowX0 = 0;
 8000d52:	9415      	str	r4, [sp, #84]	; 0x54
  hospi1.Init.ChipSelectHighTime = 2;
 8000d54:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000d56:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Red = 0;
 8000d5a:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  hospi1.Instance = OCTOSPI1;
 8000d5e:	4d2d      	ldr	r5, [pc, #180]	; (8000e14 <main+0x3b4>)
  pLayerCfg.Alpha0 = 0;
 8000d60:	e9cd 141a 	strd	r1, r4, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d64:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000d68:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d6c:	e9cd 811d 	strd	r8, r1, [sp, #116]	; 0x74
  pLayerCfg.WindowY0 = 0;
 8000d70:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d74:	a915      	add	r1, sp, #84	; 0x54
 8000d76:	4622      	mov	r2, r4
  hospi1.Init.DeviceSize = 32;
 8000d78:	f04f 0820 	mov.w	r8, #32
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d7c:	e9cd 3618 	strd	r3, r6, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d80:	f006 fbe5 	bl	800754e <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d84:	2318      	movs	r3, #24
 8000d86:	4621      	mov	r1, r4
 8000d88:	a815      	add	r0, sp, #84	; 0x54
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f01b fb62 	bl	801c454 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <main+0x3b8>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000d92:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d94:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000d96:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000d98:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 8000d9a:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi1.Init.DeviceSize = 32;
 8000d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000da2:	e9c5 2803 	strd	r2, r8, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000da6:	2208      	movs	r2, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000da8:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000dac:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.MaxTran = 0;
 8000db0:	e9c5 240e 	strd	r2, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000db4:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.ChipSelectBoundary = 0;
 8000db8:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000dbc:	f006 fd4a 	bl	8007854 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dc0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dc4:	a915      	add	r1, sp, #84	; 0x54
 8000dc6:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dc8:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 1;
 8000dce:	9617      	str	r6, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dd0:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dd2:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 1;
 8000dd6:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dda:	f006 ffc5 	bl	8007d68 <HAL_OSPIM_Config>
 8000dde:	e01d      	b.n	8000e1c <main+0x3bc>
 8000de0:	03000012 	.word	0x03000012
 8000de4:	01010001 	.word	0x01010001
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58021800 	.word	0x58021800
 8000df4:	24007008 	.word	0x24007008
 8000df8:	58020c00 	.word	0x58020c00
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	24006f98 	.word	0x24006f98
 8000e04:	58024c00 	.word	0x58024c00
 8000e08:	24007104 	.word	0x24007104
 8000e0c:	52001000 	.word	0x52001000
 8000e10:	50001000 	.word	0x50001000
 8000e14:	24006f38 	.word	0x24006f38
 8000e18:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f006 fd8f 	bl	8007940 <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e22:	f240 1201 	movw	r2, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000e26:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000e28:	4da3      	ldr	r5, [pc, #652]	; (80010b8 <main+0x658>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e2a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000e2e:	f004 ff2f 	bl	8005c90 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000e32:	a90e      	add	r1, sp, #56	; 0x38
 8000e34:	4620      	mov	r0, r4
 8000e36:	f005 f81b 	bl	8005e70 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f004 fef0 	bl	8005c20 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000e40:	2318      	movs	r3, #24
 8000e42:	4621      	mov	r1, r4
 8000e44:	a815      	add	r0, sp, #84	; 0x54
 8000e46:	461a      	mov	r2, r3
 8000e48:	f01b fb04 	bl	801c454 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	4621      	mov	r1, r4
 8000e50:	a80a      	add	r0, sp, #40	; 0x28
 8000e52:	f01b faff 	bl	801c454 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000e56:	4621      	mov	r1, r4
 8000e58:	2214      	movs	r2, #20
 8000e5a:	a80e      	add	r0, sp, #56	; 0x38
 8000e5c:	f01b fafa 	bl	801c454 <memset>
  hospi2.Instance = OCTOSPI2;
 8000e60:	4a96      	ldr	r2, [pc, #600]	; (80010bc <main+0x65c>)
  hospi2.Init.DeviceSize = 24;
 8000e62:	2318      	movs	r3, #24
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e64:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e66:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 8000e68:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 8000e6a:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi2.Init.DeviceSize = 24;
 8000e6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e72:	e9c5 b405 	strd	fp, r4, [r5, #20]
  hospi2.Init.DeviceSize = 24;
 8000e76:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000e7a:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
 8000e7e:	2317      	movs	r3, #23
 8000e80:	e9c5 b30b 	strd	fp, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000e84:	f44f 73c8 	mov.w	r3, #400	; 0x190
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e88:	f04f 0b80 	mov.w	fp, #128	; 0x80
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e8c:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.Refresh = 400;
 8000e90:	642b      	str	r3, [r5, #64]	; 0x40
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e92:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000e96:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000e9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e9e:	f006 fcd9 	bl	8007854 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <main+0x660>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea8:	a915      	add	r1, sp, #84	; 0x54
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000eaa:	9318      	str	r3, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000eac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb0:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000eb2:	9717      	str	r7, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000eb4:	9319      	str	r3, [sp, #100]	; 0x64
  sOspiManagerCfg.DQSPort = 2;
 8000eb6:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eba:	f006 ff55 	bl	8007d68 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000ebe:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec4:	a90a      	add	r1, sp, #40	; 0x28
 8000ec6:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000ec8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000ecc:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	2760      	movs	r7, #96	; 0x60
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000ed0:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ed4:	f006 fd96 	bl	8007a04 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ed8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ee2:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ee4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ee8:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000eea:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000eec:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000eee:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000ef0:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ef2:	f006 fdad 	bl	8007a50 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000ef6:	eb0d 0108 	add.w	r1, sp, r8
 8000efa:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000efc:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000efe:	f006 febf 	bl	8007c80 <HAL_OSPI_MemoryMapped>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	221c      	movs	r2, #28
 8000f04:	4621      	mov	r1, r4
 8000f06:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	940c      	str	r4, [sp, #48]	; 0x30
  htim1.Instance = TIM1;
 8000f0a:	4d6e      	ldr	r5, [pc, #440]	; (80010c4 <main+0x664>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f10:	f01b faa0 	bl	801c454 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f14:	2234      	movs	r2, #52	; 0x34
 8000f16:	4621      	mov	r1, r4
 8000f18:	a815      	add	r0, sp, #84	; 0x54
 8000f1a:	f01b fa9b 	bl	801c454 <memset>
  htim1.Instance = TIM1;
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <main+0x668>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f20:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f22:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000f26:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f28:	f8c5 b018 	str.w	fp, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000f2c:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 28800-1;
 8000f30:	f247 037f 	movw	r3, #28799	; 0x707f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f38:	f008 ff24 	bl	8009d84 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3c:	a90a      	add	r1, sp, #40	; 0x28
 8000f3e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f42:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f46:	f009 f911 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f4a:	4652      	mov	r2, sl
 8000f4c:	a90e      	add	r1, sp, #56	; 0x38
 8000f4e:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f50:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f52:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1;
 8000f54:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5c:	f008 ffde 	bl	8009f1c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f64:	a915      	add	r1, sp, #84	; 0x54
 8000f66:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f68:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f6a:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f6c:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f6e:	e9cd 241a 	strd	r2, r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f76:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f7a:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f7e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f82:	f009 f945 	bl	800a210 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 fdde 	bl	8001b48 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000f8c:	4d4f      	ldr	r5, [pc, #316]	; (80010cc <main+0x66c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	4621      	mov	r1, r4
 8000f90:	221c      	movs	r2, #28
 8000f92:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	9410      	str	r4, [sp, #64]	; 0x40
 8000f96:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	f01b fa5b 	bl	801c454 <memset>
  htim4.Init.Period = 28800-1;
 8000f9e:	f247 037f 	movw	r3, #28799	; 0x707f
  htim4.Instance = TIM4;
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <main+0x670>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fa4:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fa6:	f8c5 8008 	str.w	r8, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	f8c5 b018 	str.w	fp, [r5, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim4.Init.Prescaler = 0;
 8000fb2:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fb6:	f008 fee5 	bl	8009d84 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fba:	a90e      	add	r1, sp, #56	; 0x38
 8000fbc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc2:	f009 f8d3 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fc6:	4652      	mov	r2, sl
 8000fc8:	a915      	add	r1, sp, #84	; 0x54
 8000fca:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000fd0:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd4:	f008 ffa2 	bl	8009f1c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f000 fdb5 	bl	8001b48 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000fde:	4d3d      	ldr	r5, [pc, #244]	; (80010d4 <main+0x674>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	221c      	movs	r2, #28
 8000fe4:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	9410      	str	r4, [sp, #64]	; 0x40
 8000fe8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	f01b fa32 	bl	801c454 <memset>
  htim5.Init.Period = 28800-1;
 8000ff0:	f247 037f 	movw	r3, #28799	; 0x707f
  htim5.Instance = TIM5;
 8000ff4:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <main+0x678>)
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ff6:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ff8:	f8c5 8008 	str.w	r8, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	f8c5 b018 	str.w	fp, [r5, #24]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim5.Init.Prescaler = 0;
 8001004:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001008:	f008 febc 	bl	8009d84 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800100c:	a90e      	add	r1, sp, #56	; 0x38
 800100e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001014:	f009 f8aa 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	4622      	mov	r2, r4
 800101a:	a915      	add	r1, sp, #84	; 0x54
 800101c:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101e:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8001022:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001026:	f008 ff79 	bl	8009f1c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 800102a:	4628      	mov	r0, r5
 800102c:	f000 fd8c 	bl	8001b48 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <main+0x67c>)
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <main+0x680>)
  htim23.Instance = TIM23;
 8001034:	4d2b      	ldr	r5, [pc, #172]	; (80010e4 <main+0x684>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	6084      	str	r4, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	6184      	str	r4, [r0, #24]
  htim14.Init.Prescaler = 0;
 800103a:	e9c0 3400 	strd	r3, r4, [r0]
  htim14.Init.Period = 57600-1;
 800103e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001046:	f008 fe6d 	bl	8009d24 <HAL_TIM_Base_Init>
  htim23.Instance = TIM23;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <main+0x688>)
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800104c:	a915      	add	r1, sp, #84	; 0x54
 800104e:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	9410      	str	r4, [sp, #64]	; 0x40
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	60ac      	str	r4, [r5, #8]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	61ac      	str	r4, [r5, #24]
  sConfig.IC2Filter = 0;
 8001056:	941d      	str	r4, [sp, #116]	; 0x74
  htim23.Init.Prescaler = 0;
 8001058:	e9c5 3400 	strd	r3, r4, [r5]
  htim23.Init.Period = 4294967295;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001068:	e9cd 9415 	strd	r9, r4, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800106c:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001070:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001074:	e9cd 641b 	strd	r6, r4, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001078:	f008 feb4 	bl	8009de4 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800107c:	a90e      	add	r1, sp, #56	; 0x38
 800107e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001084:	f009 f872 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
  MX_TouchGFX_Init();
 8001088:	f000 febb 	bl	8001e02 <MX_TouchGFX_Init>
  motorStart();
 800108c:	f7ff fcc8 	bl	8000a20 <motorStart>
  osKernelInitialize();
 8001090:	f009 f928 	bl	800a2e4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <main+0x68c>)
 8001096:	4621      	mov	r1, r4
 8001098:	4815      	ldr	r0, [pc, #84]	; (80010f0 <main+0x690>)
 800109a:	f009 f94f 	bl	800a33c <osThreadNew>
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <main+0x694>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80010a0:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <main+0x698>)
 80010a2:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010a4:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <main+0x69c>)
 80010a8:	f009 f948 	bl	800a33c <osThreadNew>
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <main+0x6a0>)
 80010ae:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80010b0:	f009 f92a 	bl	800a308 <osKernelStart>
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x654>
 80010b6:	bf00      	nop
 80010b8:	24007204 	.word	0x24007204
 80010bc:	5200a000 	.word	0x5200a000
 80010c0:	00010002 	.word	0x00010002
 80010c4:	240070b8 	.word	0x240070b8
 80010c8:	40010000 	.word	0x40010000
 80010cc:	24006eec 	.word	0x24006eec
 80010d0:	40000800 	.word	0x40000800
 80010d4:	24006fbc 	.word	0x24006fbc
 80010d8:	40000c00 	.word	0x40000c00
 80010dc:	240071b8 	.word	0x240071b8
 80010e0:	40002000 	.word	0x40002000
 80010e4:	2400716c 	.word	0x2400716c
 80010e8:	4000e000 	.word	0x4000e000
 80010ec:	0801d4c8 	.word	0x0801d4c8
 80010f0:	08000735 	.word	0x08000735
 80010f4:	24006ee8 	.word	0x24006ee8
 80010f8:	0801d4a4 	.word	0x0801d4a4
 80010fc:	08001e07 	.word	0x08001e07
 8001100:	240070b0 	.word	0x240070b0
 8001104:	00000000 	.word	0x00000000

08001108 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */


	if (htim->Instance == TIM14)
 8001108:	6802      	ldr	r2, [r0, #0]
 800110a:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800110c:	429a      	cmp	r2, r3
{
 800110e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001112:	4606      	mov	r6, r0
 8001114:	ed2d 8b04 	vpush	{d8-d9}
 8001118:	b085      	sub	sp, #20
	if (htim->Instance == TIM14)
 800111a:	f040 8109 	bne.w	8001330 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		// Buraya PG5 i toggle etme olayı denenecek
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);

		float theta = (frq * TWO_PI * counter) * time;
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 800111e:	4b9b      	ldr	r3, [pc, #620]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001120:	4a9b      	ldr	r2, [pc, #620]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001122:	edd3 9a00 	vldr	s19, [r3]
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;

		if(modulationIndex != 0)
 8001126:	4699      	mov	r9, r3
 8001128:	f8d2 a000 	ldr.w	sl, [r2]
 800112c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8001130:	4a98      	ldr	r2, [pc, #608]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001132:	4d99      	ldr	r5, [pc, #612]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001134:	f8d2 8000 	ldr.w	r8, [r2]
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	4a97      	ldr	r2, [pc, #604]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800113e:	6817      	ldr	r7, [r2, #0]
 8001140:	f000 8101 	beq.w	8001346 <HAL_TIM_PeriodElapsedCallback+0x23e>
		float theta = (frq * TWO_PI * counter) * time;
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8001146:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
		float theta = (frq * TWO_PI * counter) * time;
 800114a:	682c      	ldr	r4, [r5, #0]
 800114c:	ed93 8a00 	vldr	s16, [r3]
 8001150:	eddf 7a94 	vldr	s15, [pc, #592]	; 80013a4 <HAL_TIM_PeriodElapsedCallback+0x29c>
 8001154:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8001158:	4b93      	ldr	r3, [pc, #588]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800115a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800115e:	ee07 4a90 	vmov	s15, r4
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));

			counter++;
 8001162:	3401      	adds	r4, #1
		float theta = (frq * TWO_PI * counter) * time;
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	ee28 8a27 	vmul.f32	s16, s16, s15
 800116c:	edd3 7a00 	vldr	s15, [r3]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001170:	4b8e      	ldr	r3, [pc, #568]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2a4>)
		float theta = (frq * TWO_PI * counter) * time;
 8001172:	ee28 8a27 	vmul.f32	s16, s16, s15
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001176:	edd3 8a00 	vldr	s17, [r3]
 800117a:	eef8 8a68 	vcvt.f32.u32	s17, s17
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 800117e:	eeb0 0a48 	vmov.f32	s0, s16
 8001182:	f01b f819 	bl	801c1b8 <sinf>
 8001186:	eef0 7a49 	vmov.f32	s15, s18
 800118a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800118e:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 8001192:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80013b0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8001196:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 800119a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800119e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a2:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011a6:	f01b f807 	bl	801c1b8 <sinf>
 80011aa:	eef0 7a49 	vmov.f32	s15, s18
 80011ae:	ee29 0a80 	vmul.f32	s0, s19, s0
 80011b2:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011b6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 80013b4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 80011ba:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
 80011be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80011c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c6:	edc8 7a10 	vstr	s15, [r8, #64]	; 0x40
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011ca:	f01a fff5 	bl	801c1b8 <sinf>
 80011ce:	ee29 0a80 	vmul.f32	s0, s19, s0

			counter = 0;

		}

		if(counter > upperLimit)
 80011d2:	4a79      	ldr	r2, [pc, #484]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
			counter++;
 80011d4:	602c      	str	r4, [r5, #0]
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011d6:	eea0 9a09 	vfma.f32	s18, s0, s18
		if(counter > upperLimit)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	4294      	cmp	r4, r2
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));
 80011de:	ee28 9a89 	vmul.f32	s18, s17, s18
 80011e2:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 80011e6:	ed87 9a0d 	vstr	s18, [r7, #52]	; 0x34
		if(counter > upperLimit)
 80011ea:	f200 80b4 	bhi.w	8001356 <HAL_TIM_PeriodElapsedCallback+0x24e>
		{
			counter = 0;
		}


		indx++;
 80011ee:	4a73      	ldr	r2, [pc, #460]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	9203      	str	r2, [sp, #12]
 80011f4:	3301      	adds	r3, #1
		if(indx == 200)
 80011f6:	2bc8      	cmp	r3, #200	; 0xc8
		indx++;
 80011f8:	6013      	str	r3, [r2, #0]
		if(indx == 200)
 80011fa:	f040 80ae 	bne.w	800135a <HAL_TIM_PeriodElapsedCallback+0x252>
		{
			rpm_ref = angularFrq*60/TWO_PI;
 80011fe:	4c70      	ldr	r4, [pc, #448]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001200:	eddf 6a70 	vldr	s13, [pc, #448]	; 80013c4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001204:	edd4 7a00 	vldr	s15, [r4]
 8001208:	eddf 5a66 	vldr	s11, [pc, #408]	; 80013a4 <HAL_TIM_PeriodElapsedCallback+0x29c>
 800120c:	ee67 7aa6 	vmul.f32	s15, s15, s13
			speed = (position - oldpos) * 25; // speed in clicks/sec
 8001210:	496d      	ldr	r1, [pc, #436]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
			rpm_ref = angularFrq*60/TWO_PI;
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
			speed = (position - oldpos) * 25; // speed in clicks/sec
 8001214:	4f6e      	ldr	r7, [pc, #440]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001216:	4688      	mov	r8, r1
			rpm_ref = angularFrq*60/TWO_PI;
 8001218:	ee87 7aa5 	vdiv.f32	s14, s15, s11
				fl_rpm = (1.0063*((0.0707304 * speed) - 8.75)) + (offset - 30);
			else
				fl_rpm = (1.0063*((0.0707304 * speed) - 8.75)) + (offset - 40); */

			//fl_rpm = (1.0063*(0.0707304 * speed)) + offset;
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 800121c:	4a6d      	ldr	r2, [pc, #436]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			speed = (position - oldpos) * 25; // speed in clicks/sec
 800121e:	edd7 7a00 	vldr	s15, [r7]

			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;

			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001222:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8001408 <HAL_TIM_PeriodElapsedCallback+0x300>
 8001226:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800140c <HAL_TIM_PeriodElapsedCallback+0x304>
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 800122a:	4d6b      	ldr	r5, [pc, #428]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 800122c:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8001368 <HAL_TIM_PeriodElapsedCallback+0x260>
			rpm_ref = angularFrq*60/TWO_PI;
 8001230:	ed83 7a00 	vstr	s14, [r3]
			speed = (position - oldpos) * 25; // speed in clicks/sec
 8001234:	ed91 7a00 	vldr	s14, [r1]
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800123a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	ed83 7a00 	vstr	s14, [r3]
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 800124a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 8001250:	ee27 7b04 	vmul.f64	d7, d7, d4
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	2800      	cmp	r0, #0
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001258:	4862      	ldr	r0, [pc, #392]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 800125a:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8001370 <HAL_TIM_PeriodElapsedCallback+0x268>
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 800125e:	bfb8      	it	lt
 8001260:	2100      	movlt	r1, #0
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 8001262:	ee87 3b04 	vdiv.f64	d3, d7, d4
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 8001266:	bfbc      	itt	lt
 8001268:	6019      	strlt	r1, [r3, #0]
 800126a:	2100      	movlt	r1, #0
			fl_rpm = (1.0572 * SPEED_TO_RPM(speed)) - 2.1893;
 800126c:	ed9f 4b42 	vldr	d4, [pc, #264]	; 8001378 <HAL_TIM_PeriodElapsedCallback+0x270>
 8001270:	ed9f 7b43 	vldr	d7, [pc, #268]	; 8001380 <HAL_TIM_PeriodElapsedCallback+0x278>
 8001274:	eea3 7b04 	vfma.f64	d7, d3, d4
 8001278:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800127c:	ed82 7a00 	vstr	s14, [r2]
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 8001280:	bfac      	ite	ge
 8001282:	eebd 7ac7 	vcvtge.s32.f32	s14, s14
 8001286:	6011      	strlt	r1, [r2, #0]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001288:	4957      	ldr	r1, [pc, #348]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
			(rpm < 0) ? (rpm = 0, fl_rpm = 0.0) : (rpm = (int)fl_rpm);
 800128a:	bfa8      	it	ge
 800128c:	ed83 7a00 	vstrge	s14, [r3]
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 8001290:	ed92 7a00 	vldr	s14, [r2]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001294:	681b      	ldr	r3, [r3, #0]
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 8001296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800129e:	edc5 7a00 	vstr	s15, [r5]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	f8db 3000 	ldr.w	r3, [fp]
 80012a8:	f8da 2000 	ldr.w	r2, [sl]
 80012ac:	f7ff fab9 	bl	8000822 <movingAvg>
 80012b0:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x2e4>)
		    pos++;
		    if (pos >= len){
 80012b2:	f8db 2000 	ldr.w	r2, [fp]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 80012b6:	6018      	str	r0, [r3, #0]
		    pos++;
 80012b8:	f8da 3000 	ldr.w	r3, [sl]
 80012bc:	3301      	adds	r3, #1
		    if (pos >= len){
 80012be:	4293      	cmp	r3, r2
		    pos++;
 80012c0:	f8ca 3000 	str.w	r3, [sl]
		      pos = 0;
 80012c4:	bfa4      	itt	ge
 80012c6:	2300      	movge	r3, #0
 80012c8:	f8ca 3000 	strge.w	r3, [sl]
		    }

			if(piUsed == 1)
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d127      	bne.n	8001324 <HAL_TIM_PeriodElapsedCallback+0x21c>
			{
				temp_pi_control = pi_control(&angularFreqPI, angularFrq - angularFrqEnc);
 80012d4:	edd5 7a00 	vldr	s15, [r5]
 80012d8:	ed94 0a00 	vldr	s0, [r4]
 80012dc:	4845      	ldr	r0, [pc, #276]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80012de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80012e2:	f7ff fb01 	bl	80008e8 <pi_control>
				PI_angularFrq = angularFrqEnc + temp_pi_control;
 80012e6:	edd5 7a00 	vldr	s15, [r5]
				temp_pi_control = pi_control(&angularFreqPI, angularFrq - angularFrqEnc);
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
				PI_angularFrq = angularFrqEnc + temp_pi_control;
 80012ec:	4943      	ldr	r1, [pc, #268]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
				temp_pi_control = pi_control(&angularFreqPI, angularFrq - angularFrqEnc);
 80012ee:	ed83 0a00 	vstr	s0, [r3]
				PI_angularFrq = angularFrqEnc + temp_pi_control;
 80012f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80012f6:	ed81 0a00 	vstr	s0, [r1]
				limitAngFrq();
 80012fa:	f7ff fac5 	bl	8000888 <limitAngFrq>
				setModulationIndex();
 80012fe:	f7ff fa9d 	bl	800083c <setModulationIndex>
				if(angularFrq != 0) adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), modulationIndex);
 8001302:	edd4 7a00 	vldr	s15, [r4]
 8001306:	ed91 0a00 	vldr	s0, [r1]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
				else if (angularFrq == 0) adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), 0);
 800130e:	ee80 0a25 	vdiv.f32	s0, s0, s11
				if(angularFrq != 0) adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), modulationIndex);
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	bf14      	ite	ne
 8001318:	edd9 0a00 	vldrne	s1, [r9]
				else if (angularFrq == 0) adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), 0);
 800131c:	eddf 0a38 	vldreq	s1, [pc, #224]	; 8001400 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8001320:	f7ff fb4e 	bl	80009c0 <adjustMIAndFreqforPI>
			}
			oldpos = position;
 8001324:	f8d8 3000 	ldr.w	r3, [r8]
			indx = 0;
 8001328:	9a03      	ldr	r2, [sp, #12]
			oldpos = position;
 800132a:	603b      	str	r3, [r7, #0]
			indx = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	6013      	str	r3, [r2, #0]
		}

		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001330:	6832      	ldr	r2, [r6, #0]
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001334:	429a      	cmp	r2, r3
 8001336:	d110      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x252>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001338:	b005      	add	sp, #20
 800133a:	ecbd 8b04 	vpop	{d8-d9}
 800133e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_IncTick();
 8001342:	f005 b875 	b.w	8006430 <HAL_IncTick>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001346:	2300      	movs	r3, #0
 8001348:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800134c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
			counter = 0;
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	e74b      	b.n	80011ee <HAL_TIM_PeriodElapsedCallback+0xe6>
 8001356:	2300      	movs	r3, #0
 8001358:	e7fb      	b.n	8001352 <HAL_TIM_PeriodElapsedCallback+0x24a>
}
 800135a:	b005      	add	sp, #20
 800135c:	ecbd 8b04 	vpop	{d8-d9}
 8001360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	404e0000 	.word	0x404e0000
 8001370:	00000000 	.word	0x00000000
 8001374:	408f4000 	.word	0x408f4000
 8001378:	8c154c98 	.word	0x8c154c98
 800137c:	3ff0ea4a 	.word	0x3ff0ea4a
 8001380:	b7e90ff9 	.word	0xb7e90ff9
 8001384:	c00183af 	.word	0xc00183af
 8001388:	40002000 	.word	0x40002000
 800138c:	24000024 	.word	0x24000024
 8001390:	240070b8 	.word	0x240070b8
 8001394:	24006eec 	.word	0x24006eec
 8001398:	24000178 	.word	0x24000178
 800139c:	24006fbc 	.word	0x24006fbc
 80013a0:	2400001c 	.word	0x2400001c
 80013a4:	40c90fdb 	.word	0x40c90fdb
 80013a8:	2400002c 	.word	0x2400002c
 80013ac:	24000028 	.word	0x24000028
 80013b0:	40060a92 	.word	0x40060a92
 80013b4:	40860a92 	.word	0x40860a92
 80013b8:	24000030 	.word	0x24000030
 80013bc:	24000180 	.word	0x24000180
 80013c0:	24000018 	.word	0x24000018
 80013c4:	42700000 	.word	0x42700000
 80013c8:	24000198 	.word	0x24000198
 80013cc:	240001a0 	.word	0x240001a0
 80013d0:	2400018c 	.word	0x2400018c
 80013d4:	240070b4 	.word	0x240070b4
 80013d8:	24000160 	.word	0x24000160
 80013dc:	240001a8 	.word	0x240001a8
 80013e0:	2400019c 	.word	0x2400019c
 80013e4:	24000164 	.word	0x24000164
 80013e8:	240001ac 	.word	0x240001ac
 80013ec:	24000184 	.word	0x24000184
 80013f0:	24000190 	.word	0x24000190
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24006ee4 	.word	0x24006ee4
 80013fc:	2400015c 	.word	0x2400015c
 8001400:	00000000 	.word	0x00000000
 8001404:	40001000 	.word	0x40001000
 8001408:	24000194 	.word	0x24000194
 800140c:	24000020 	.word	0x24000020

08001410 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_MspInit+0x2c>)
{
 8001416:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001418:	210f      	movs	r1, #15
 800141a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001422:	f042 0202 	orr.w	r2, r2, #2
 8001426:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800142a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001438:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143a:	f005 b82f 	b.w	800649c <HAL_NVIC_SetPriority>
 800143e:	bf00      	nop
 8001440:	58024400 	.word	0x58024400

08001444 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001444:	6802      	ldr	r2, [r0, #0]
{
 8001446:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_CRC_MspInit+0x2c>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d10d      	bne.n	800146a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800144e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001452:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001456:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800145a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800146a:	b002      	add	sp, #8
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	58024c00 	.word	0x58024c00

08001474 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_DMA2D_MspInit+0x40>)
{
 8001476:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001478:	6802      	ldr	r2, [r0, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d117      	bne.n	80014ae <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001480:	2105      	movs	r1, #5
 8001482:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001484:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001488:	f042 0210 	orr.w	r2, r2, #16
 800148c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800149e:	f004 fffd 	bl	800649c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014a2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014a4:	b003      	add	sp, #12
 80014a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014aa:	f005 b829 	b.w	8006500 <HAL_NVIC_EnableIRQ>
}
 80014ae:	b003      	add	sp, #12
 80014b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b4:	52001000 	.word	0x52001000
 80014b8:	58024400 	.word	0x58024400

080014bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c0:	b0ba      	sub	sp, #232	; 0xe8
 80014c2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	2214      	movs	r2, #20
 80014c6:	2100      	movs	r1, #0
 80014c8:	a808      	add	r0, sp, #32
 80014ca:	f01a ffc3 	bl	801c454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ce:	22b4      	movs	r2, #180	; 0xb4
 80014d0:	2100      	movs	r1, #0
 80014d2:	a80d      	add	r0, sp, #52	; 0x34
 80014d4:	f01a ffbe 	bl	801c454 <memset>
  if(hltdc->Instance==LTDC)
 80014d8:	6822      	ldr	r2, [r4, #0]
 80014da:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <HAL_LTDC_MspInit+0x1fc>)
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 80e8 	bne.w	80016b2 <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80014e6:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80014e8:	201e      	movs	r0, #30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014ea:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80014ec:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014f0:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80014f4:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80014f6:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80014fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014fe:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001502:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001504:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001506:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f007 fc91 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	b108      	cbz	r0, 8001514 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001510:	f7ff ff7e 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001514:	4b69      	ldr	r3, [pc, #420]	; (80016bc <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 800151c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001520:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	a908      	add	r1, sp, #32
 8001524:	4866      	ldr	r0, [pc, #408]	; (80016c0 <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001526:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800152a:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 800152e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001532:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001536:	f002 0208 	and.w	r2, r2, #8
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001542:	f042 0202 	orr.w	r2, r2, #2
 8001546:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800154a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800154e:	f002 0202 	and.w	r2, r2, #2
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800155a:	f042 0208 	orr.w	r2, r2, #8
 800155e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001562:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001566:	f002 0208 	and.w	r2, r2, #8
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800157a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800157e:	f002 0210 	and.w	r2, r2, #16
 8001582:	9203      	str	r2, [sp, #12]
 8001584:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001592:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001596:	f002 0201 	and.w	r2, r2, #1
 800159a:	9204      	str	r2, [sp, #16]
 800159c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800159e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015b2:	9205      	str	r2, [sp, #20]
 80015b4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015ca:	9206      	str	r2, [sp, #24]
 80015cc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015de:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	9307      	str	r3, [sp, #28]
 80015e6:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f005 f900 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 80015f8:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fa:	a908      	add	r1, sp, #32
 80015fc:	4831      	ldr	r0, [pc, #196]	; (80016c4 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f005 f8f6 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 800160c:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001610:	a908      	add	r1, sp, #32
 8001612:	482d      	ldr	r0, [pc, #180]	; (80016c8 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001614:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161e:	f005 f8eb 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	a908      	add	r1, sp, #32
 8001628:	4828      	ldr	r0, [pc, #160]	; (80016cc <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800162e:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001634:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f005 f8df 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800163a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	a908      	add	r1, sp, #32
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001642:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164c:	f005 f8d4 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8001650:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001654:	a908      	add	r1, sp, #32
 8001656:	481f      	ldr	r0, [pc, #124]	; (80016d4 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001658:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001662:	f005 f8c9 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001666:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	a908      	add	r1, sp, #32
 800166a:	481b      	ldr	r0, [pc, #108]	; (80016d8 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800166c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f005 f8bf 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	a908      	add	r1, sp, #32
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f005 f8b6 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800168c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800168e:	a908      	add	r1, sp, #32
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001696:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800169c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800169e:	f005 f8ab 	bl	80067f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016a2:	4640      	mov	r0, r8
 80016a4:	4622      	mov	r2, r4
 80016a6:	2105      	movs	r1, #5
 80016a8:	f004 fef8 	bl	800649c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016ac:	4640      	mov	r0, r8
 80016ae:	f004 ff27 	bl	8006500 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80016b2:	b03a      	add	sp, #232	; 0xe8
 80016b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b8:	50001000 	.word	0x50001000
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58020c00 	.word	0x58020c00
 80016c8:	58021000 	.word	0x58021000
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58021800 	.word	0x58021800
 80016d4:	58021c00 	.word	0x58021c00
 80016d8:	58020800 	.word	0x58020800

080016dc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e0:	b091      	sub	sp, #68	; 0x44
 80016e2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	2214      	movs	r2, #20
 80016e6:	2100      	movs	r1, #0
 80016e8:	a80b      	add	r0, sp, #44	; 0x2c
 80016ea:	f01a feb3 	bl	801c454 <memset>
  if(hospi->Instance==OCTOSPI1)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	4a89      	ldr	r2, [pc, #548]	; (8001918 <HAL_OSPI_MspInit+0x23c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f040 80b1 	bne.w	800185a <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80016f8:	4a88      	ldr	r2, [pc, #544]	; (800191c <HAL_OSPI_MspInit+0x240>)
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80016fe:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001700:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001702:	d10c      	bne.n	800171e <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001704:	4b86      	ldr	r3, [pc, #536]	; (8001920 <HAL_OSPI_MspInit+0x244>)
 8001706:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800170a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800170e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800171e:	4b80      	ldr	r3, [pc, #512]	; (8001920 <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2500      	movs	r5, #0
 8001724:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800172a:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172c:	a90b      	add	r1, sp, #44	; 0x2c
 800172e:	487d      	ldr	r0, [pc, #500]	; (8001924 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001734:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001738:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800173c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001740:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001744:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800174c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001754:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001758:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800175c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001760:	9202      	str	r2, [sp, #8]
 8001762:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001768:	f042 0208 	orr.w	r2, r2, #8
 800176c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001774:	f002 0208 	and.w	r2, r2, #8
 8001778:	9203      	str	r2, [sp, #12]
 800177a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800177c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001780:	f042 0210 	orr.w	r2, r2, #16
 8001784:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001788:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800178c:	f002 0210 	and.w	r2, r2, #16
 8001790:	9204      	str	r2, [sp, #16]
 8001792:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001794:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017a4:	f002 0220 	and.w	r2, r2, #32
 80017a8:	9205      	str	r2, [sp, #20]
 80017aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017b0:	f042 0202 	orr.w	r2, r2, #2
 80017b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	9306      	str	r3, [sp, #24]
 80017c2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017d0:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d2:	f005 f811 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 80017d6:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	a90b      	add	r1, sp, #44	; 0x2c
 80017da:	4853      	ldr	r0, [pc, #332]	; (8001928 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80017dc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e8:	f005 f806 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ec:	a90b      	add	r1, sp, #44	; 0x2c
 80017ee:	484f      	ldr	r0, [pc, #316]	; (800192c <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017f0:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fa:	f004 fffd 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017fe:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001800:	a90b      	add	r1, sp, #44	; 0x2c
 8001802:	4848      	ldr	r0, [pc, #288]	; (8001924 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001804:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001810:	f004 fff2 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001814:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001818:	a90b      	add	r1, sp, #44	; 0x2c
 800181a:	4843      	ldr	r0, [pc, #268]	; (8001928 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800181c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001826:	f004 ffe7 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182e:	a90b      	add	r1, sp, #44	; 0x2c
 8001830:	483f      	ldr	r0, [pc, #252]	; (8001930 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001832:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183c:	f004 ffdc 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	a90b      	add	r1, sp, #44	; 0x2c
 8001842:	483c      	ldr	r0, [pc, #240]	; (8001934 <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001844:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	f004 ffd2 	bl	80067f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001854:	b011      	add	sp, #68	; 0x44
 8001856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 800185a:	4a37      	ldr	r2, [pc, #220]	; (8001938 <HAL_OSPI_MspInit+0x25c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d1f9      	bne.n	8001854 <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001860:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_OSPI_MspInit+0x240>)
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001866:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800186a:	d10c      	bne.n	8001886 <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_OSPI_MspInit+0x244>)
 800186e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001872:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800187a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	9307      	str	r3, [sp, #28]
 8001884:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800188e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001892:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001894:	a90b      	add	r1, sp, #44	; 0x2c
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001898:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800189c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80018a0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80018a4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80018a8:	9208      	str	r2, [sp, #32]
 80018aa:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80018c0:	9209      	str	r2, [sp, #36]	; 0x24
 80018c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80018d4:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	930a      	str	r3, [sp, #40]	; 0x28
 80018dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ea:	f004 ff85 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f2:	a90b      	add	r1, sp, #44	; 0x2c
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80018f6:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001900:	f004 ff7a 	bl	80067f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001904:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001908:	a90b      	add	r1, sp, #44	; 0x2c
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800190c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001916:	e79b      	b.n	8001850 <HAL_OSPI_MspInit+0x174>
 8001918:	52005000 	.word	0x52005000
 800191c:	240001b0 	.word	0x240001b0
 8001920:	58024400 	.word	0x58024400
 8001924:	58021800 	.word	0x58021800
 8001928:	58020c00 	.word	0x58020c00
 800192c:	58021000 	.word	0x58021000
 8001930:	58021400 	.word	0x58021400
 8001934:	58020400 	.word	0x58020400
 8001938:	5200a000 	.word	0x5200a000

0800193c <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_OSPI_MspDeInit+0xa0>)
{
 800193e:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8001940:	6803      	ldr	r3, [r0, #0]
 8001942:	4293      	cmp	r3, r2
 8001944:	d12a      	bne.n	800199c <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_OSPI_MspDeInit+0xa4>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	3a01      	subs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_OSPI_MspDeInit+0xa8>)
 8001950:	b92a      	cbnz	r2, 800195e <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001952:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001956:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800195a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800195e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001962:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800196c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001970:	f005 f828 	bl	80069c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8001974:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8001978:	481c      	ldr	r0, [pc, #112]	; (80019ec <HAL_OSPI_MspDeInit+0xb0>)
 800197a:	f005 f823 	bl	80069c4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800197e:	2104      	movs	r1, #4
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <HAL_OSPI_MspDeInit+0xb4>)
 8001982:	f005 f81f 	bl	80069c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8001986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <HAL_OSPI_MspDeInit+0xb8>)
 800198c:	f005 f81a 	bl	80069c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001990:	2104      	movs	r1, #4
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8001994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001998:	f005 b814 	b.w	80069c4 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_OSPI_MspDeInit+0xc0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11a      	bne.n	80019d8 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_OSPI_MspDeInit+0xa4>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	3a01      	subs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_OSPI_MspDeInit+0xa8>)
 80019ac:	b92a      	cbnz	r2, 80019ba <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80019ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80019b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80019b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80019ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80019be:	f641 4103 	movw	r1, #7171	; 0x1c03
 80019c2:	4809      	ldr	r0, [pc, #36]	; (80019e8 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 80019c4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80019c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 80019cc:	f004 fffa 	bl	80069c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80019d0:	f241 011f 	movw	r1, #4127	; 0x101f
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <HAL_OSPI_MspDeInit+0xb8>)
 80019d6:	e7dd      	b.n	8001994 <HAL_OSPI_MspDeInit+0x58>
}
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	52005000 	.word	0x52005000
 80019e0:	240001b0 	.word	0x240001b0
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58021800 	.word	0x58021800
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021000 	.word	0x58021000
 80019f4:	58021400 	.word	0x58021400
 80019f8:	58020400 	.word	0x58020400
 80019fc:	5200a000 	.word	0x5200a000

08001a00 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001a00:	6803      	ldr	r3, [r0, #0]
{
 8001a02:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_TIM_PWM_MspInit+0x6c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10e      	bne.n	8001a28 <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_TIM_PWM_MspInit+0x70>)
 8001a0c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a24:	b004      	add	sp, #16
 8001a26:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_TIM_PWM_MspInit+0x74>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10d      	bne.n	8001a4a <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_TIM_PWM_MspInit+0x70>)
 8001a30:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a34:	f042 0204 	orr.w	r2, r2, #4
 8001a38:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	9b02      	ldr	r3, [sp, #8]
 8001a48:	e7ec      	b.n	8001a24 <HAL_TIM_PWM_MspInit+0x24>
  else if(htim_pwm->Instance==TIM5)
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_TIM_PWM_MspInit+0x78>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d1e9      	bne.n	8001a24 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_TIM_PWM_MspInit+0x70>)
 8001a52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a56:	f042 0208 	orr.w	r2, r2, #8
 8001a5a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	9b03      	ldr	r3, [sp, #12]
}
 8001a6a:	e7db      	b.n	8001a24 <HAL_TIM_PWM_MspInit+0x24>
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	58024400 	.word	0x58024400
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40000c00 	.word	0x40000c00

08001a7c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_TIM_Base_MspInit+0x40>)
{
 8001a7e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d117      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a88:	2105      	movs	r1, #5
 8001a8a:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a8c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a94:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a98:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001aa6:	f004 fcf9 	bl	800649c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001aaa:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001aac:	b003      	add	sp, #12
 8001aae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ab2:	f004 bd25 	b.w	8006500 <HAL_NVIC_EnableIRQ>
}
 8001ab6:	b003      	add	sp, #12
 8001ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001abc:	40002000 	.word	0x40002000
 8001ac0:	58024400 	.word	0x58024400

08001ac4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	2214      	movs	r2, #20
 8001acc:	2100      	movs	r1, #0
 8001ace:	a803      	add	r0, sp, #12
 8001ad0:	f01a fcc0 	bl	801c454 <memset>
  if(htim_encoder->Instance==TIM23)
 8001ad4:	6822      	ldr	r2, [r4, #0]
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x78>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d12d      	bne.n	8001b38 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x7c>)
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	a903      	add	r1, sp, #12
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001ae4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001ae8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001af0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001af4:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001b1c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001b22:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b24:	f004 fe68 	bl	80067f8 <HAL_GPIO_Init>

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 5, 0);
 8001b28:	20a1      	movs	r0, #161	; 0xa1
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	f004 fcb5 	bl	800649c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001b32:	20a1      	movs	r0, #161	; 0xa1
 8001b34:	f004 fce4 	bl	8006500 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001b38:	b008      	add	sp, #32
 8001b3a:	bd10      	pop	{r4, pc}
 8001b3c:	4000e000 	.word	0x4000e000
 8001b40:	58024400 	.word	0x58024400
 8001b44:	58021400 	.word	0x58021400

08001b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	2214      	movs	r2, #20
 8001b50:	2100      	movs	r1, #0
 8001b52:	a803      	add	r0, sp, #12
 8001b54:	f01a fc7e 	bl	801c454 <memset>
  if(htim->Instance==TIM1)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <HAL_TIM_MspPostInit+0xc0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d11c      	bne.n	8001b9a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_TIM_MspPostInit+0xc4>)
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b66:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b6c:	f042 0210 	orr.w	r2, r2, #16
 8001b70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b88:	4821      	ldr	r0, [pc, #132]	; (8001c10 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f004 fe31 	bl	80067f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b96:	b008      	add	sp, #32
 8001b98:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_TIM_MspPostInit+0xcc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d118      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	481c      	ldr	r0, [pc, #112]	; (8001c18 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bac:	f042 0208 	orr.w	r2, r2, #8
 8001bb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bcc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bce:	a903      	add	r1, sp, #12
 8001bd0:	e7df      	b.n	8001b92 <HAL_TIM_MspPostInit+0x4a>
  else if(htim->Instance==TIM5)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_TIM_MspPostInit+0xd4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d1de      	bne.n	8001b96 <HAL_TIM_MspPostInit+0x4e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	a903      	add	r1, sp, #12
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c00:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	e9cd 2205 	strd	r2, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	e7c4      	b.n	8001b92 <HAL_TIM_MspPostInit+0x4a>
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58021000 	.word	0x58021000
 8001c14:	40000800 	.word	0x40000800
 8001c18:	58020c00 	.word	0x58020c00
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	58020000 	.word	0x58020000

08001c24 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c24:	280f      	cmp	r0, #15
{
 8001c26:	b510      	push	{r4, lr}
 8001c28:	4604      	mov	r4, r0
 8001c2a:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2c:	d902      	bls.n	8001c34 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001c30:	b00a      	add	sp, #40	; 0x28
 8001c32:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001c34:	4601      	mov	r1, r0
 8001c36:	2200      	movs	r2, #0
 8001c38:	2036      	movs	r0, #54	; 0x36
 8001c3a:	f004 fc2f 	bl	800649c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c3e:	2036      	movs	r0, #54	; 0x36
 8001c40:	f004 fc5e 	bl	8006500 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c46:	4669      	mov	r1, sp
 8001c48:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001c4a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_InitTick+0x88>)
 8001c4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c66:	f006 ffc9 	bl	8008bfc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c6a:	9b07      	ldr	r3, [sp, #28]
 8001c6c:	b9c3      	cbnz	r3, 8001ca0 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c6e:	f006 ffa1 	bl	8008bb4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001c72:	4c0f      	ldr	r4, [pc, #60]	; (8001cb0 <HAL_InitTick+0x8c>)
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_InitTick+0x90>)
 8001c76:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c78:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001c7c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_InitTick+0x94>)
 8001c80:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c84:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001c86:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c88:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c8a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001c8c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c90:	f008 f848 	bl	8009d24 <HAL_TIM_Base_Init>
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d1ca      	bne.n	8001c2e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f007 fe6d 	bl	8009978 <HAL_TIM_Base_Start_IT>
 8001c9e:	e7c7      	b.n	8001c30 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ca0:	f006 ff88 	bl	8008bb4 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	0040      	lsls	r0, r0, #1
 8001ca6:	e7e4      	b.n	8001c72 <HAL_InitTick+0x4e>
 8001ca8:	24000078 	.word	0x24000078
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	24007264 	.word	0x24007264
 8001cb4:	40001000 	.word	0x40001000
 8001cb8:	000f4240 	.word	0x000f4240

08001cbc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cbc:	4770      	bx	lr

08001cbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler>

08001cc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler>

08001cc2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler>

08001cc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler>

08001cc6 <DebugMon_Handler>:
 8001cc6:	4770      	bx	lr

08001cc8 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cc8:	4801      	ldr	r0, [pc, #4]	; (8001cd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8001cca:	f007 bf0d 	b.w	8009ae8 <HAL_TIM_IRQHandler>
 8001cce:	bf00      	nop
 8001cd0:	240071b8 	.word	0x240071b8

08001cd4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd4:	4801      	ldr	r0, [pc, #4]	; (8001cdc <TIM6_DAC_IRQHandler+0x8>)
 8001cd6:	f007 bf07 	b.w	8009ae8 <HAL_TIM_IRQHandler>
 8001cda:	bf00      	nop
 8001cdc:	24007264 	.word	0x24007264

08001ce0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ce0:	4801      	ldr	r0, [pc, #4]	; (8001ce8 <LTDC_IRQHandler+0x8>)
 8001ce2:	f005 bbd7 	b.w	8007494 <HAL_LTDC_IRQHandler>
 8001ce6:	bf00      	nop
 8001ce8:	24007008 	.word	0x24007008

08001cec <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001cec:	4801      	ldr	r0, [pc, #4]	; (8001cf4 <DMA2D_IRQHandler+0x8>)
 8001cee:	f004 bcf9 	b.w	80066e4 <HAL_DMA2D_IRQHandler>
 8001cf2:	bf00      	nop
 8001cf4:	24007104 	.word	0x24007104

08001cf8 <TIM23_IRQHandler>:
void TIM23_IRQHandler(void)
{
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001cf8:	4801      	ldr	r0, [pc, #4]	; (8001d00 <TIM23_IRQHandler+0x8>)
 8001cfa:	f007 bef5 	b.w	8009ae8 <HAL_TIM_IRQHandler>
 8001cfe:	bf00      	nop
 8001d00:	2400716c 	.word	0x2400716c

08001d04 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d04:	2001      	movs	r0, #1
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d0a:	f01a fb49 	bl	801c3a0 <__errno>
 8001d0e:	2316      	movs	r3, #22
 8001d10:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d12:	f04f 30ff 	mov.w	r0, #4294967295
 8001d16:	bd08      	pop	{r3, pc}

08001d18 <_exit>:

void _exit (int status)
{
 8001d18:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d1a:	f01a fb41 	bl	801c3a0 <__errno>
 8001d1e:	2316      	movs	r3, #22
 8001d20:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001d22:	e7fe      	b.n	8001d22 <_exit+0xa>

08001d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	460e      	mov	r6, r1
 8001d28:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	42a5      	cmp	r5, r4
 8001d2e:	db01      	blt.n	8001d34 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001d30:	4620      	mov	r0, r4
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001d34:	f3af 8000 	nop.w
 8001d38:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	3501      	adds	r5, #1
 8001d3c:	e7f6      	b.n	8001d2c <_read+0x8>

08001d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3e:	b570      	push	{r4, r5, r6, lr}
 8001d40:	460e      	mov	r6, r1
 8001d42:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2500      	movs	r5, #0
 8001d46:	42a5      	cmp	r5, r4
 8001d48:	db01      	blt.n	8001d4e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001d4e:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001d52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	e7f6      	b.n	8001d46 <_write+0x8>

08001d58 <_close>:

int _close(int file)
{
	return -1;
}
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	4770      	bx	lr

08001d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001d62:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001d64:	604b      	str	r3, [r1, #4]
}
 8001d66:	4770      	bx	lr

08001d68 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d68:	2001      	movs	r0, #1
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <_sbrk+0x30>)
{
 8001d72:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001d74:	6819      	ldr	r1, [r3, #0]
{
 8001d76:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001d78:	b909      	cbnz	r1, 8001d7e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d7a:	490a      	ldr	r1, [pc, #40]	; (8001da4 <_sbrk+0x34>)
 8001d7c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	4909      	ldr	r1, [pc, #36]	; (8001da8 <_sbrk+0x38>)
 8001d82:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <_sbrk+0x3c>)
 8001d84:	4402      	add	r2, r0
 8001d86:	1b09      	subs	r1, r1, r4
 8001d88:	428a      	cmp	r2, r1
 8001d8a:	d906      	bls.n	8001d9a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d8c:	f01a fb08 	bl	801c3a0 <__errno>
 8001d90:	230c      	movs	r3, #12
 8001d92:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d98:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d9a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001d9c:	e7fc      	b.n	8001d98 <_sbrk+0x28>
 8001d9e:	bf00      	nop
 8001da0:	240001b4 	.word	0x240001b4
 8001da4:	24007350 	.word	0x24007350
 8001da8:	24050000 	.word	0x24050000
 8001dac:	00001000 	.word	0x00001000

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001db4:	f004 fab8 	bl	8006328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dba:	e003      	b.n	8001dc4 <LoopCopyDataInit>

08001dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dc2:	3104      	adds	r1, #4

08001dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dcc:	d3f6      	bcc.n	8001dbc <CopyDataInit>
  ldr  r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001dd0:	e002      	b.n	8001dd8 <LoopFillZerobss>

08001dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dd4:	f842 3b04 	str.w	r3, [r2], #4

08001dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ddc:	d3f9      	bcc.n	8001dd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f01a faf7 	bl	801c3d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7fe fe3d 	bl	8000a60 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001dec:	080222b4 	.word	0x080222b4
  ldr  r0, =_sdata
 8001df0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001df4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
 8001df8:	24000140 	.word	0x24000140
  ldr  r3, = _ebss
 8001dfc:	24007350 	.word	0x24007350

08001e00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC3_IRQHandler>

08001e02 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001e02:	f000 bc8f 	b.w	8002724 <touchgfx_init>

08001e06 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001e06:	f000 bcfd 	b.w	8002804 <touchgfx_taskEntry>

08001e0a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001e0a:	6840      	ldr	r0, [r0, #4]
    }
 8001e0c:	4770      	bx	lr

08001e0e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001e0e:	6041      	str	r1, [r0, #4]
    }
 8001e10:	4770      	bx	lr
	...

08001e14 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001e1e:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001e24:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8001e28:	3a4c      	subs	r2, #76	; 0x4c
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001e2e:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	4770      	bx	lr
 8001e3c:	e000edfc 	.word	0xe000edfc
 8001e40:	c5acce55 	.word	0xc5acce55

08001e44 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001e44:	1a51      	subs	r1, r2, r1
 8001e46:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001e4a:	fbb1 f0f3 	udiv	r0, r1, r3
 8001e4e:	4770      	bx	lr

08001e50 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e0001004 	.word	0xe0001004

08001e5c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001e5c:	4770      	bx	lr

08001e5e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	210c      	movs	r1, #12
 8001e64:	f01a f954 	bl	801c110 <_ZdlPvj>
 8001e68:	4620      	mov	r0, r4
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 8001e6c:	6803      	ldr	r3, [r0, #0]
{
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001e74:	b131      	cbz	r1, 8001e84 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001e76:	4798      	blx	r3
 8001e78:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	4418      	add	r0, r3
 8001e80:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001e82:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001e84:	4798      	blx	r3
 8001e86:	60a0      	str	r0, [r4, #8]
}
 8001e88:	e7fb      	b.n	8001e82 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001e8a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001e8a:	4770      	bx	lr

08001e8c <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 8001e8e:	2308      	movs	r3, #8
 8001e90:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001e92:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001e94:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <_ZN20STM32TouchController4initEv+0x24>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <_ZN20STM32TouchController4initEv+0x28>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001ea4:	f004 f95e 	bl	8006164 <BSP_TS_Init>
}
 8001ea8:	b005      	add	sp, #20
 8001eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eae:	bf00      	nop
 8001eb0:	24006c62 	.word	0x24006c62
 8001eb4:	24006c64 	.word	0x24006c64

08001eb8 <_ZN20STM32TouchControllerD0Ev>:
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	f01a f927 	bl	801c110 <_ZdlPvj>
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	bd10      	pop	{r4, pc}

08001ec6 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ec6:	b530      	push	{r4, r5, lr}
 8001ec8:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001eca:	2000      	movs	r0, #0
{
 8001ecc:	460d      	mov	r5, r1
 8001ece:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001ed0:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001ed2:	9003      	str	r0, [sp, #12]
 8001ed4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001ed8:	f004 f9c6 	bl	8006268 <BSP_TS_GetState>
 8001edc:	b140      	cbz	r0, 8001ef0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001eee:	e7fe      	b.n	8001eee <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001ef0:	9801      	ldr	r0, [sp, #4]
 8001ef2:	b120      	cbz	r0, 8001efe <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001ef4:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001ef6:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001ef8:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001efa:	9b03      	ldr	r3, [sp, #12]
 8001efc:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001efe:	b005      	add	sp, #20
 8001f00:	bd30      	pop	{r4, r5, pc}
	...

08001f04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001f04:	b110      	cbz	r0, 8001f0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001f06:	2801      	cmp	r0, #1
 8001f08:	d009      	beq.n	8001f1e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001f0a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001f0e:	2108      	movs	r1, #8
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001f1a:	f004 bdf9 	b.w	8006b10 <HAL_GPIO_WritePin>
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001f20:	2104      	movs	r1, #4
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	0952      	lsrs	r2, r2, #5
 8001f2a:	e7f5      	b.n	8001f18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001f2c:	240001b8 	.word	0x240001b8
 8001f30:	58020800 	.word	0x58020800

08001f34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001f34:	b110      	cbz	r0, 8001f3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8001f36:	2801      	cmp	r0, #1
 8001f38:	d009      	beq.n	8001f4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001f3a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001f3e:	2108      	movs	r1, #8
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	3a00      	subs	r2, #0
 8001f44:	bf18      	it	ne
 8001f46:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001f4a:	f004 bde1 	b.w	8006b10 <HAL_GPIO_WritePin>
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	3a00      	subs	r2, #0
 8001f56:	bf18      	it	ne
 8001f58:	2201      	movne	r2, #1
 8001f5a:	e7f5      	b.n	8001f48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8001f5c:	240001b8 	.word	0x240001b8
 8001f60:	58020800 	.word	0x58020800

08001f64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001f64:	b110      	cbz	r0, 8001f6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001f66:	2801      	cmp	r0, #1
 8001f68:	d004      	beq.n	8001f74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001f6a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f6c:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8001f70:	f004 bdd3 	b.w	8006b1a <HAL_GPIO_TogglePin>
 8001f74:	2104      	movs	r1, #4
 8001f76:	e7fa      	b.n	8001f6e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8001f78:	58020800 	.word	0x58020800

08001f7c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001f7c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001f7e:	b130      	cbz	r0, 8001f8e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001f80:	2801      	cmp	r0, #1
 8001f82:	d009      	beq.n	8001f98 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8001f84:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f86:	1e43      	subs	r3, r0, #1
 8001f88:	4258      	negs	r0, r3
 8001f8a:	4158      	adcs	r0, r3
 8001f8c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f8e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8001f92:	f004 fdb7 	bl	8006b04 <HAL_GPIO_ReadPin>
        break;
 8001f96:	e7f6      	b.n	8001f86 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f98:	2104      	movs	r1, #4
 8001f9a:	e7f9      	b.n	8001f90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8001f9c:	58020800 	.word	0x58020800

08001fa0 <_ZN8touchgfx4GPIO4initEv>:
{
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4d08      	ldr	r5, [pc, #32]	; (8001fc4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001fa4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001fa6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001fa8:	b2e0      	uxtb	r0, r4
 8001faa:	f7ff ffe7 	bl	8001f7c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001fae:	b118      	cbz	r0, 8001fb8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001fb4:	bf18      	it	ne
 8001fb6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001fb8:	3401      	adds	r4, #1
 8001fba:	3504      	adds	r5, #4
 8001fbc:	2c05      	cmp	r4, #5
 8001fbe:	d1f3      	bne.n	8001fa8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
 8001fc2:	bf00      	nop
 8001fc4:	240001b8 	.word	0x240001b8

08001fc8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001fc8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001fca:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001fce:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001fd2:	4770      	bx	lr

08001fd4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	4770      	bx	lr

08001fd8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001fd8:	2000      	movs	r0, #0
 8001fda:	4770      	bx	lr

08001fdc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001fdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001fde:	b10b      	cbz	r3, 8001fe4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4718      	bx	r3
        }
    }
 8001fe4:	4770      	bx	lr

08001fe6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001fe6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fea:	4770      	bx	lr

08001fec <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001fec:	6840      	ldr	r0, [r0, #4]
 8001fee:	6803      	ldr	r3, [r0, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4718      	bx	r3

08001ff4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ffc:	f000 fcac 	bl	8002958 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8002002:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	4620      	mov	r0, r4
 800200a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8002010:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8002012:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8002016:	f7ff ffc3 	bl	8001fa0 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 800201a:	4628      	mov	r0, r5
 800201c:	f7ff fefa 	bl	8001e14 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8002020:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002022:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002024:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8002028:	bd38      	pop	{r3, r4, r5, pc}
 800202a:	bf00      	nop
 800202c:	70060000 	.word	0x70060000
 8002030:	700c0000 	.word	0x700c0000

08002034 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002034:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002036:	b931      	cbnz	r1, 8002046 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800203a:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8002042:	f01a f97b 	bl	801c33c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002046:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800204a:	3a00      	subs	r2, #0
 800204c:	4908      	ldr	r1, [pc, #32]	; (8002070 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800204e:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002050:	bf18      	it	ne
 8002052:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002054:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002056:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002058:	bf18      	it	ne
 800205a:	2301      	movne	r3, #1
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 800205e:	7013      	strb	r3, [r2, #0]
    }
 8002060:	bd08      	pop	{r3, pc}
 8002062:	bf00      	nop
 8002064:	0801d52c 	.word	0x0801d52c
 8002068:	0801d564 	.word	0x0801d564
 800206c:	0801d5b2 	.word	0x0801d5b2
 8002070:	24006c66 	.word	0x24006c66
 8002074:	24006c67 	.word	0x24006c67

08002078 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002078:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	428b      	cmp	r3, r1
 8002080:	d803      	bhi.n	800208a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	4293      	cmp	r3, r2
 8002088:	d905      	bls.n	8002096 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800208c:	219e      	movs	r1, #158	; 0x9e
 800208e:	4a07      	ldr	r2, [pc, #28]	; (80020ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002092:	f01a f953 	bl	801c33c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002098:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800209c:	801a      	strh	r2, [r3, #0]
    }
 800209e:	bd08      	pop	{r3, pc}
 80020a0:	24006c5c 	.word	0x24006c5c
 80020a4:	24006c5e 	.word	0x24006c5e
 80020a8:	0801d5f7 	.word	0x0801d5f7
 80020ac:	0801d65a 	.word	0x0801d65a
 80020b0:	0801d5b2 	.word	0x0801d5b2
 80020b4:	24006c62 	.word	0x24006c62
 80020b8:	24006c64 	.word	0x24006c64

080020bc <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80020bc:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80020be:	6803      	ldr	r3, [r0, #0]
{
 80020c0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80020c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c4:	4798      	blx	r3
    enableInterrupts();
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	4620      	mov	r0, r4
 80020ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020cc:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80020ce:	f000 f8e7 	bl	80022a0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	4620      	mov	r0, r4
 80020d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d8:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 80020e2:	f004 fd15 	bl	8006b10 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 80020ee:	f004 fd0f 	bl	8006b10 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80020f2:	f000 f8d5 	bl	80022a0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	4620      	mov	r0, r4
 80020fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fc:	4798      	blx	r3
    for (;;)
 80020fe:	e7f8      	b.n	80020f2 <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 8002100:	58020c00 	.word	0x58020c00
 8002104:	58021800 	.word	0x58021800

08002108 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002108:	b510      	push	{r4, lr}
 800210a:	4604      	mov	r4, r0
        swapFrameBuffers();
 800210c:	f00b fb9c 	bl	800d848 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	4620      	mov	r0, r4
 8002114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8002118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800211c:	4718      	bx	r3

0800211e <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800211e:	f000 bc0d 	b.w	800293c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08002122 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002122:	f000 bc11 	b.w	8002948 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08002128 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8002128:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800212a:	f000 fc6d 	bl	8002a08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8002130:	2300      	movs	r3, #0
 8002132:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002136:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800213a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800213e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002142:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002146:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800214a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800214c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002150:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002152:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002156:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002158:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800215c:	d2f9      	bcs.n	8002152 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 800215e:	3b20      	subs	r3, #32
 8002160:	f113 0f20 	cmn.w	r3, #32
 8002164:	d1f2      	bne.n	800214c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8002166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800216a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800216e:	bd70      	pop	{r4, r5, r6, pc}
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002174:	f000 bbbe 	b.w	80028f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08002178 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002178:	f000 bc68 	b.w	8002a4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800217c <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800217c:	f000 bc52 	b.w	8002a24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08002180 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002180:	f000 bbc2 	b.w	8002908 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002184 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8002184:	f00a bd18 	b.w	800cbb8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08002188 <_ZN11TouchGFXHALD0Ev>:
 8002188:	b510      	push	{r4, lr}
 800218a:	4604      	mov	r4, r0
 800218c:	2188      	movs	r1, #136	; 0x88
 800218e:	f019 ffbf 	bl	801c110 <_ZdlPvj>
 8002192:	4620      	mov	r0, r4
 8002194:	bd10      	pop	{r4, pc}

08002196 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8002196:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800219a:	b11b      	cbz	r3, 80021a4 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 800219c:	6840      	ldr	r0, [r0, #4]
 800219e:	6803      	ldr	r3, [r0, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4718      	bx	r3
    }
 80021a4:	4618      	mov	r0, r3
 80021a6:	4770      	bx	lr

080021a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80021a8:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80021ae:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80021b0:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	428c      	cmp	r4, r1
 80021b8:	d009      	beq.n	80021ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 80021ba:	b93a      	cbnz	r2, 80021cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80021bc:	490a      	ldr	r1, [pc, #40]	; (80021e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80021c0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021c2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80021c4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80021c6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021c8:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80021ca:	701a      	strb	r2, [r3, #0]
        }
    }
 80021cc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d0fc      	beq.n	80021cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021d6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80021d8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80021da:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80021dc:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80021de:	2200      	movs	r2, #0
 80021e0:	e7f3      	b.n	80021ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80021e2:	bf00      	nop
 80021e4:	24006c60 	.word	0x24006c60
 80021e8:	24006c5e 	.word	0x24006c5e
 80021ec:	24006c5c 	.word	0x24006c5c

080021f0 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80021f0:	4601      	mov	r1, r0
 80021f2:	b508      	push	{r3, lr}
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <IdleTaskHook+0x14>)
 80021f6:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80021f8:	b101      	cbz	r1, 80021fc <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80021fa:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80021fc:	f00b fb3e 	bl	800d87c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002200:	2001      	movs	r0, #1
 8002202:	bd08      	pop	{r3, pc}
 8002204:	24006c68 	.word	0x24006c68

08002208 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002208:	2101      	movs	r1, #1
 800220a:	2200      	movs	r2, #0
{
 800220c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800220e:	4608      	mov	r0, r1
 8002210:	f008 f8e9 	bl	800a3e6 <osSemaphoreNew>
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002216:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002218:	b928      	cbnz	r0, 8002226 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800221c:	2128      	movs	r1, #40	; 0x28
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002222:	f01a f88b 	bl	801c33c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002226:	2200      	movs	r2, #0
 8002228:	2104      	movs	r1, #4
 800222a:	2001      	movs	r0, #1
 800222c:	f008 f97a 	bl	800a524 <osMessageQueueNew>
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002232:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002234:	b918      	cbnz	r0, 800223e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800223c:	e7f0      	b.n	8002220 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 800223e:	bd08      	pop	{r3, pc}
 8002240:	240001cc 	.word	0x240001cc
 8002244:	0801d770 	.word	0x0801d770
 8002248:	0801d7b9 	.word	0x0801d7b9
 800224c:	0801d7e8 	.word	0x0801d7e8
 8002250:	240001c8 	.word	0x240001c8
 8002254:	0801d842 	.word	0x0801d842

08002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800225a:	f04f 31ff 	mov.w	r1, #4294967295
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	f008 b90c 	b.w	800a47c <osSemaphoreAcquire>
 8002264:	240001cc 	.word	0x240001cc

08002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	f008 b932 	b.w	800a4d4 <osSemaphoreRelease>
 8002270:	240001cc 	.word	0x240001cc

08002274 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002276:	2100      	movs	r1, #0
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	f008 b8ff 	b.w	800a47c <osSemaphoreAcquire>
 800227e:	bf00      	nop
 8002280:	240001cc 	.word	0x240001cc

08002284 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8002284:	f7ff bff0 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002288 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002288:	2300      	movs	r3, #0
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800228e:	461a      	mov	r2, r3
 8002290:	6800      	ldr	r0, [r0, #0]
 8002292:	f008 b983 	b.w	800a59c <osMessageQueuePut>
 8002296:	bf00      	nop
 8002298:	240001c8 	.word	0x240001c8
 800229c:	24000034 	.word	0x24000034

080022a0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80022a0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80022a2:	2300      	movs	r3, #0
 80022a4:	4c07      	ldr	r4, [pc, #28]	; (80022c4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80022a6:	a901      	add	r1, sp, #4
 80022a8:	461a      	mov	r2, r3
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	f008 f9a6 	bl	800a5fc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	2200      	movs	r2, #0
 80022b6:	a901      	add	r1, sp, #4
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	f008 f99f 	bl	800a5fc <osMessageQueueGet>
}
 80022be:	b002      	add	sp, #8
 80022c0:	bd10      	pop	{r4, pc}
 80022c2:	bf00      	nop
 80022c4:	240001c8 	.word	0x240001c8

080022c8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 80022c8:	6803      	ldr	r3, [r0, #0]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	4718      	bx	r3

080022ce <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80022ce:	2001      	movs	r0, #1
 80022d0:	4770      	bx	lr

080022d2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	4718      	bx	r3

080022d8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80022d8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80022dc:	4770      	bx	lr
	...

080022e0 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <DMA2D_XferCpltCallback+0xc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80022e6:	6803      	ldr	r3, [r0, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4718      	bx	r3
 80022ec:	24006c68 	.word	0x24006c68

080022f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 80022f0:	b508      	push	{r3, lr}
 80022f2:	280b      	cmp	r0, #11
 80022f4:	d80b      	bhi.n	800230e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 80022f6:	e8df f000 	tbb	[pc, r0]
 80022fa:	0612      	.short	0x0612
 80022fc:	0a0a0a10 	.word	0x0a0a0a10
 8002300:	0808080a 	.word	0x0808080a
 8002304:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002306:	2001      	movs	r0, #1
}
 8002308:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800230a:	2005      	movs	r0, #5
        break;
 800230c:	e7fc      	b.n	8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002310:	2166      	movs	r1, #102	; 0x66
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002316:	f01a f811 	bl	801c33c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800231a:	2000      	movs	r0, #0
 800231c:	e7f4      	b.n	8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800231e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002320:	e7f2      	b.n	8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002322:	bf00      	nop
 8002324:	0801d884 	.word	0x0801d884
 8002328:	0801d89f 	.word	0x0801d89f
 800232c:	0801d8e9 	.word	0x0801d8e9

08002330 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002330:	b508      	push	{r3, lr}
 8002332:	280a      	cmp	r0, #10
 8002334:	d809      	bhi.n	800234a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002336:	e8df f000 	tbb	[pc, r0]
 800233a:	0610      	.short	0x0610
 800233c:	0808080e 	.word	0x0808080e
 8002340:	06060608 	.word	0x06060608
 8002344:	06          	.byte	0x06
 8002345:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002346:	2001      	movs	r0, #1
}
 8002348:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 800234c:	2187      	movs	r1, #135	; 0x87
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002352:	f019 fff3 	bl	801c33c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002356:	2000      	movs	r0, #0
 8002358:	e7f6      	b.n	8002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800235a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800235c:	e7f4      	b.n	8002348 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800235e:	bf00      	nop
 8002360:	0801d884 	.word	0x0801d884
 8002364:	0801d941 	.word	0x0801d941
 8002368:	0801d8e9 	.word	0x0801d8e9

0800236c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002370:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002374:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002376:	4640      	mov	r0, r8
 8002378:	f7ff ffba 	bl	80022f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800237c:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800237e:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002380:	4638      	mov	r0, r7
 8002382:	f7ff ffb5 	bl	80022f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002386:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002388:	4638      	mov	r0, r7
 800238a:	f7ff ffd1 	bl	8002330 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800238e:	8aa1      	ldrh	r1, [r4, #20]
 8002390:	8b62      	ldrh	r2, [r4, #26]
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002394:	1a52      	subs	r2, r2, r1
 8002396:	469e      	mov	lr, r3
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800239a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800239c:	8b22      	ldrh	r2, [r4, #24]
 800239e:	1a52      	subs	r2, r2, r1
 80023a0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023a2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80023a4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023aa:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80023ae:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023b0:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80023b2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80023b4:	f8d4 c000 	ldr.w	ip, [r4]
 80023b8:	f894 901c 	ldrb.w	r9, [r4, #28]
 80023bc:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 80023c0:	ea4f 6209 	mov.w	r2, r9, lsl #24
 80023c4:	d029      	beq.n	800241a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80023c6:	d813      	bhi.n	80023f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80023c8:	f1bc 0f20 	cmp.w	ip, #32
 80023cc:	ea45 0002 	orr.w	r0, r5, r2
 80023d0:	d067      	beq.n	80024a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80023d2:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 80023d6:	d064      	beq.n	80024a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80023d8:	f1bc 0f04 	cmp.w	ip, #4
 80023dc:	d05d      	beq.n	800249a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023de:	432a      	orrs	r2, r5
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80023e2:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023e8:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80023ea:	d067      	beq.n	80024bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80023ec:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 80023ee:	e040      	b.n	8002472 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 80023f0:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80023f4:	d007      	beq.n	8002406 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 80023f6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80023fa:	d1f0      	bne.n	80023de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002400:	f042 0209 	orr.w	r2, r2, #9
 8002404:	e003      	b.n	800240e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800240a:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800240e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002410:	68e2      	ldr	r2, [r4, #12]
 8002412:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002414:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002416:	6159      	str	r1, [r3, #20]
 8002418:	e02a      	b.n	8002470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800241a:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800241c:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800241e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002422:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002424:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002426:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002428:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 800242c:	7802      	ldrb	r2, [r0, #0]
 800242e:	b142      	cbz	r2, 8002442 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 8002430:	2a01      	cmp	r2, #1
 8002432:	d020      	beq.n	8002476 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8002436:	f240 1101 	movw	r1, #257	; 0x101
 800243a:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 800243c:	4825      	ldr	r0, [pc, #148]	; (80024d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 800243e:	f019 ff7d 	bl	801c33c <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002442:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 8002444:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002446:	69d9      	ldr	r1, [r3, #28]
 8002448:	1e50      	subs	r0, r2, #1
 800244a:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002456:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	f042 0220 	orr.w	r2, r2, #32
 8002460:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	0692      	lsls	r2, r2, #26
 8002466:	d4fc      	bmi.n	8002462 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002468:	2210      	movs	r2, #16
 800246a:	609a      	str	r2, [r3, #8]
        if(blend)
 800246c:	2c00      	cmp	r4, #0
 800246e:	d0bd      	beq.n	80023ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002472:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002474:	e020      	b.n	80024b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002476:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 8002478:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800247c:	69d9      	ldr	r1, [r3, #28]
 800247e:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 8002482:	bf18      	it	ne
 8002484:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002486:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800248a:	f022 0210 	bic.w	r2, r2, #16
 800248e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002492:	f042 0210 	orr.w	r2, r2, #16
 8002496:	61da      	str	r2, [r3, #28]
            break;
 8002498:	e7de      	b.n	8002458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800249a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800249e:	61d8      	str	r0, [r3, #28]
 80024a0:	e7b8      	b.n	8002414 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024a2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024a8:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024ac:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024b0:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024b4:	f8ce 3000 	str.w	r3, [lr]
}
 80024b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80024bc:	f240 2201 	movw	r2, #513	; 0x201
 80024c0:	e7d7      	b.n	8002472 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 80024c2:	bf00      	nop
 80024c4:	52001000 	.word	0x52001000
 80024c8:	00010201 	.word	0x00010201
 80024cc:	0801d98c 	.word	0x0801d98c
 80024d0:	0801d9a6 	.word	0x0801d9a6
 80024d4:	0801d8e9 	.word	0x0801d8e9
 80024d8:	00020201 	.word	0x00020201

080024dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e0:	7f88      	ldrb	r0, [r1, #30]
 80024e2:	f7ff ff25 	bl	8002330 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024e8:	8aa5      	ldrh	r5, [r4, #20]
 80024ea:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024ec:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024f2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f4:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024f6:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024f8:	6921      	ldr	r1, [r4, #16]
 80024fa:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80024fe:	6825      	ldr	r5, [r4, #0]
 8002500:	2d08      	cmp	r5, #8
 8002502:	d10e      	bne.n	8002522 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002504:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002506:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002508:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800250c:	7f20      	ldrb	r0, [r4, #28]
 800250e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002512:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002514:	68e2      	ldr	r2, [r4, #12]
 8002516:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800251a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800251c:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800251e:	601a      	str	r2, [r3, #0]
    }
}
 8002520:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002522:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002524:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002526:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002528:	68e2      	ldr	r2, [r4, #12]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800252c:	4a03      	ldr	r2, [pc, #12]	; (800253c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 800252e:	e7f6      	b.n	800251e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002530:	52001000 	.word	0x52001000
 8002534:	00010009 	.word	0x00010009
 8002538:	00020201 	.word	0x00020201
 800253c:	00030201 	.word	0x00030201

08002540 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002546:	6003      	str	r3, [r0, #0]
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <_ZN8STM32DMAD1Ev+0x1c>)
 800254a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800254e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002552:	f3bf 8f6f 	isb	sy
}
 8002556:	4770      	bx	lr
 8002558:	0801d9ec 	.word	0x0801d9ec
 800255c:	e000e100 	.word	0xe000e100

08002560 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002560:	b510      	push	{r4, lr}
 8002562:	4604      	mov	r4, r0
}
 8002564:	f7ff ffec 	bl	8002540 <_ZN8STM32DMAD1Ev>
 8002568:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800256c:	4620      	mov	r0, r4
 800256e:	f019 fdcf 	bl	801c110 <_ZdlPvj>
 8002572:	4620      	mov	r0, r4
 8002574:	bd10      	pop	{r4, pc}
	...

08002578 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 800257a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800257c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002580:	f042 0210 	orr.w	r2, r2, #16
 8002584:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002588:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800258c:	f002 0210 	and.w	r2, r2, #16
 8002590:	9201      	str	r2, [sp, #4]
 8002592:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002594:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002596:	f042 0210 	orr.w	r2, r2, #16
 800259a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800259c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800259e:	f022 0210 	bic.w	r2, r2, #16
 80025a2:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <_ZN8STM32DMA10initializeEv+0x44>)
 80025a6:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <_ZN8STM32DMA10initializeEv+0x48>)
 80025a8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN8STM32DMA10initializeEv+0x4c>)
 80025ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	b002      	add	sp, #8
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400
 80025bc:	24007104 	.word	0x24007104
 80025c0:	080022e1 	.word	0x080022e1
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <_ZN8STM32DMAC1Ev+0x30>)
 80025ce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80025d0:	2600      	movs	r6, #0
 80025d2:	4625      	mov	r5, r4
 80025d4:	2260      	movs	r2, #96	; 0x60
 80025d6:	6060      	str	r0, [r4, #4]
 80025d8:	7226      	strb	r6, [r4, #8]
 80025da:	7266      	strb	r6, [r4, #9]
 80025dc:	f845 3b20 	str.w	r3, [r5], #32
 80025e0:	4629      	mov	r1, r5
 80025e2:	f00b fab3 	bl	800db4c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80025e6:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80025ea:	60ee      	str	r6, [r5, #12]
 80025ec:	3520      	adds	r5, #32
 80025ee:	42ab      	cmp	r3, r5
 80025f0:	d1fb      	bne.n	80025ea <_ZN8STM32DMAC1Ev+0x22>
}
 80025f2:	4620      	mov	r0, r4
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	bf00      	nop
 80025f8:	0801d9ec 	.word	0x0801d9ec

080025fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80025fc:	2001      	movs	r0, #1
 80025fe:	4770      	bx	lr

08002600 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002600:	200c      	movs	r0, #12
 8002602:	4770      	bx	lr

08002604 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002604:	230c      	movs	r3, #12
 8002606:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800260a:	3008      	adds	r0, #8
 800260c:	4770      	bx	lr

0800260e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800260e:	230c      	movs	r3, #12
 8002610:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002614:	3008      	adds	r0, #8
 8002616:	4770      	bx	lr

08002618 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002618:	2001      	movs	r0, #1
 800261a:	4770      	bx	lr

0800261c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800261c:	f44f 60e2 	mov.w	r0, #1808	; 0x710
 8002620:	4770      	bx	lr

08002622 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002622:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8002626:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800262a:	3008      	adds	r0, #8
 800262c:	4770      	bx	lr

0800262e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800262e:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8002632:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002636:	3008      	adds	r0, #8
 8002638:	4770      	bx	lr

0800263a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800263a:	2001      	movs	r0, #1
 800263c:	4770      	bx	lr

0800263e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800263e:	2010      	movs	r0, #16
 8002640:	4770      	bx	lr

08002642 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002642:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002646:	3008      	adds	r0, #8
 8002648:	4770      	bx	lr

0800264a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800264a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800264e:	3008      	adds	r0, #8
 8002650:	4770      	bx	lr

08002652 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002652:	4608      	mov	r0, r1
 8002654:	f000 bb14 	b.w	8002c80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002658 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800265a:	b510      	push	{r4, lr}
 800265c:	4604      	mov	r4, r0
 800265e:	6003      	str	r3, [r0, #0]
 8002660:	f009 ffdc 	bl	800c61c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002664:	4620      	mov	r0, r4
 8002666:	bd10      	pop	{r4, pc}
 8002668:	0801daa4 	.word	0x0801daa4

0800266c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800266c:	b510      	push	{r4, lr}
 800266e:	4604      	mov	r4, r0
 8002670:	f7ff fff2 	bl	8002658 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002674:	2114      	movs	r1, #20
 8002676:	4620      	mov	r0, r4
 8002678:	f019 fd4a 	bl	801c110 <_ZdlPvj>
 800267c:	4620      	mov	r0, r4
 800267e:	bd10      	pop	{r4, pc}

08002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002682:	b510      	push	{r4, lr}
 8002684:	4604      	mov	r4, r0
 8002686:	6003      	str	r3, [r0, #0]
 8002688:	f009 ffc8 	bl	800c61c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800268c:	4620      	mov	r0, r4
 800268e:	bd10      	pop	{r4, pc}
 8002690:	0801da70 	.word	0x0801da70

08002694 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002694:	b510      	push	{r4, lr}
 8002696:	4604      	mov	r4, r0
 8002698:	f7ff fff2 	bl	8002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800269c:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 80026a0:	4620      	mov	r0, r4
 80026a2:	f019 fd35 	bl	801c110 <_ZdlPvj>
 80026a6:	4620      	mov	r0, r4
 80026a8:	bd10      	pop	{r4, pc}
	...

080026ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80026ae:	b510      	push	{r4, lr}
 80026b0:	4604      	mov	r4, r0
 80026b2:	6003      	str	r3, [r0, #0]
 80026b4:	f009 ffb2 	bl	800c61c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	0801da3c 	.word	0x0801da3c

080026c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	f7ff fff2 	bl	80026ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026c8:	2118      	movs	r1, #24
 80026ca:	4620      	mov	r0, r4
 80026cc:	f019 fd20 	bl	801c110 <_ZdlPvj>
 80026d0:	4620      	mov	r0, r4
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_ZN12FrontendHeapD1Ev+0x24>)
 80026d6:	b510      	push	{r4, lr}
 80026d8:	4604      	mov	r4, r0
 80026da:	6003      	str	r3, [r0, #0]
 80026dc:	f200 7044 	addw	r0, r0, #1860	; 0x744
 80026e0:	f7ff ffba 	bl	8002658 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80026e8:	f7ff ffca 	bl	8002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026ec:	f104 0014 	add.w	r0, r4, #20
 80026f0:	f7ff ffdc 	bl	80026ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026f4:	4620      	mov	r0, r4
 80026f6:	bd10      	pop	{r4, pc}
 80026f8:	0801dad8 	.word	0x0801dad8

080026fc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80026fc:	b508      	push	{r3, lr}
 80026fe:	4802      	ldr	r0, [pc, #8]	; (8002708 <__tcf_0+0xc>)
 8002700:	f7ff ffe8 	bl	80026d4 <_ZN12FrontendHeapD1Ev>
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop
 8002708:	240001d4 	.word	0x240001d4

0800270c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800270c:	b510      	push	{r4, lr}
 800270e:	4604      	mov	r4, r0
 8002710:	f7ff ffe0 	bl	80026d4 <_ZN12FrontendHeapD1Ev>
 8002714:	f640 01b4 	movw	r1, #2228	; 0x8b4
 8002718:	4620      	mov	r0, r4
 800271a:	f019 fcf9 	bl	801c110 <_ZdlPvj>
 800271e:	4620      	mov	r0, r4
 8002720:	bd10      	pop	{r4, pc}
	...

08002724 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002728:	f000 f9ec 	bl	8002b04 <_ZN14BitmapDatabase11getInstanceEv>
 800272c:	2400      	movs	r4, #0
 800272e:	4605      	mov	r5, r0
 8002730:	f000 f9ec 	bl	8002b0c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002734:	4623      	mov	r3, r4
 8002736:	4601      	mov	r1, r0
 8002738:	4622      	mov	r2, r4
 800273a:	4628      	mov	r0, r5
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	f011 f9d7 	bl	8013af0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <touchgfx_init+0xb4>)
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002746:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002748:	4d25      	ldr	r5, [pc, #148]	; (80027e0 <touchgfx_init+0xbc>)
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f002 f88c 	bl	8004868 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002750:	4824      	ldr	r0, [pc, #144]	; (80027e4 <touchgfx_init+0xc0>)
 8002752:	f011 f90f 	bl	8013974 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002756:	782b      	ldrb	r3, [r5, #0]
 8002758:	f3bf 8f5b 	dmb	ish
 800275c:	07db      	lsls	r3, r3, #31
 800275e:	d435      	bmi.n	80027cc <touchgfx_init+0xa8>
 8002760:	4628      	mov	r0, r5
 8002762:	f019 fcd7 	bl	801c114 <__cxa_guard_acquire>
 8002766:	b388      	cbz	r0, 80027cc <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002768:	4c1f      	ldr	r4, [pc, #124]	; (80027e8 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <touchgfx_init+0xc8>)
 800276c:	f204 765c 	addw	r6, r4, #1884	; 0x75c
 8002770:	f104 0014 	add.w	r0, r4, #20
 8002774:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002778:	f204 7744 	addw	r7, r4, #1860	; 0x744
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	6060      	str	r0, [r4, #4]
 8002780:	f8c4 8008 	str.w	r8, [r4, #8]
 8002784:	60e7      	str	r7, [r4, #12]
 8002786:	6126      	str	r6, [r4, #16]
 8002788:	f009 ff4a 	bl	800c620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <touchgfx_init+0xcc>)
 800278e:	4640      	mov	r0, r8
 8002790:	6163      	str	r3, [r4, #20]
 8002792:	f009 ff45 	bl	800c620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <touchgfx_init+0xd0>)
 8002798:	4638      	mov	r0, r7
 800279a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800279c:	f009 ff40 	bl	800c620 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <touchgfx_init+0xd4>)
 80027a2:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
 80027a6:	f8c4 3744 	str.w	r3, [r4, #1860]	; 0x744
 80027aa:	f002 f8dd 	bl	8004968 <_ZN5ModelC1Ev>
 80027ae:	4622      	mov	r2, r4
 80027b0:	f504 61eb 	add.w	r1, r4, #1880	; 0x758
 80027b4:	4630      	mov	r0, r6
 80027b6:	f002 f8cd 	bl	8004954 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80027ba:	4630      	mov	r0, r6
 80027bc:	f000 fa60 	bl	8002c80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80027c0:	4628      	mov	r0, r5
 80027c2:	f019 fcb3 	bl	801c12c <__cxa_guard_release>
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <touchgfx_init+0xd8>)
 80027c8:	f019 fdd6 	bl	801c378 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <touchgfx_init+0xdc>)
}
 80027ce:	b002      	add	sp, #8
 80027d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80027d4:	f7ff bc10 	b.w	8001ff8 <_ZN11TouchGFXHAL10initializeEv>
 80027d8:	24006cc4 	.word	0x24006cc4
 80027dc:	24001734 	.word	0x24001734
 80027e0:	240001d0 	.word	0x240001d0
 80027e4:	24000038 	.word	0x24000038
 80027e8:	240001d4 	.word	0x240001d4
 80027ec:	0801dad8 	.word	0x0801dad8
 80027f0:	0801da3c 	.word	0x0801da3c
 80027f4:	0801da70 	.word	0x0801da70
 80027f8:	0801daa4 	.word	0x0801daa4
 80027fc:	080026fd 	.word	0x080026fd
 8002800:	240016ac 	.word	0x240016ac

08002804 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002804:	4801      	ldr	r0, [pc, #4]	; (800280c <touchgfx_taskEntry+0x8>)
 8002806:	f7ff bc59 	b.w	80020bc <_ZN11TouchGFXHAL9taskEntryEv>
 800280a:	bf00      	nop
 800280c:	240016ac 	.word	0x240016ac

08002810 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002810:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002812:	4e27      	ldr	r6, [pc, #156]	; (80028b0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002816:	4c28      	ldr	r4, [pc, #160]	; (80028b8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002818:	4630      	mov	r0, r6
static LCD24bpp display;
 800281a:	4d28      	ldr	r5, [pc, #160]	; (80028bc <_GLOBAL__sub_I_touchgfx_init+0xac>)
 800281c:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800281e:	f7ff fed3 	bl	80025c8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8002822:	4628      	mov	r0, r5
 8002824:	f013 fbb8 	bl	8015f98 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002830:	4824      	ldr	r0, [pc, #144]	; (80028c4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
 8002834:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
 800283a:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 800283c:	661a      	str	r2, [r3, #96]	; 0x60
 800283e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002842:	671a      	str	r2, [r3, #112]	; 0x70
 8002844:	60dc      	str	r4, [r3, #12]
 8002846:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 800284a:	491f      	ldr	r1, [pc, #124]	; (80028c8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 800284c:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002850:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002854:	6759      	str	r1, [r3, #116]	; 0x74
 8002856:	2101      	movs	r1, #1
 8002858:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 800285c:	491b      	ldr	r1, [pc, #108]	; (80028cc <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 800285e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002860:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002864:	8001      	strh	r1, [r0, #0]
 8002866:	481a      	ldr	r0, [pc, #104]	; (80028d0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 8002868:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 800286c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002870:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002874:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002878:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800287c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002880:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002884:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002888:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800288a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800288e:	4811      	ldr	r0, [pc, #68]	; (80028d4 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8002890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002894:	8001      	strh	r1, [r0, #0]
 8002896:	4810      	ldr	r0, [pc, #64]	; (80028d8 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800289c:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 800289e:	490f      	ldr	r1, [pc, #60]	; (80028dc <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 80028a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80028a4:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80028a6:	490e      	ldr	r1, [pc, #56]	; (80028e0 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 80028aa:	6019      	str	r1, [r3, #0]
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	24000a8c 	.word	0x24000a8c
 80028b4:	0801d51c 	.word	0x0801d51c
 80028b8:	24000a88 	.word	0x24000a88
 80028bc:	24001738 	.word	0x24001738
 80028c0:	240016ac 	.word	0x240016ac
 80028c4:	24006c5c 	.word	0x24006c5c
 80028c8:	01000001 	.word	0x01000001
 80028cc:	24006c68 	.word	0x24006c68
 80028d0:	24006c62 	.word	0x24006c62
 80028d4:	24006c5e 	.word	0x24006c5e
 80028d8:	24006c64 	.word	0x24006c64
 80028dc:	24006c60 	.word	0x24006c60
 80028e0:	0801d6a8 	.word	0x0801d6a8
 80028e4:	0801d4f4 	.word	0x0801d4f4

080028e8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80028e8:	4801      	ldr	r0, [pc, #4]	; (80028f0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80028ea:	f7ff be29 	b.w	8002540 <_ZN8STM32DMAD1Ev>
 80028ee:	bf00      	nop
 80028f0:	24000a8c 	.word	0x24000a8c

080028f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80028f6:	2290      	movs	r2, #144	; 0x90
 80028f8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80028fc:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100

08002908 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002908:	4a09      	ldr	r2, [pc, #36]	; (8002930 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800290c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800290e:	480a      	ldr	r0, [pc, #40]	; (8002938 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002914:	3b01      	subs	r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800291a:	6911      	ldr	r1, [r2, #16]
 800291c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002920:	3901      	subs	r1, #1
 8002922:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002926:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800292e:	4770      	bx	lr
 8002930:	50001000 	.word	0x50001000
 8002934:	24001792 	.word	0x24001792
 8002938:	24001790 	.word	0x24001790

0800293c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800293e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	50001084 	.word	0x50001084

08002948 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800294a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800294c:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800294e:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8002952:	4770      	bx	lr
 8002954:	50001084 	.word	0x50001084

08002958 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4604      	mov	r4, r0
    HAL::initialize();
 800295c:	f00a f981 	bl	800cc62 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8002964:	f00d ff28 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 8002968:	4601      	mov	r1, r0
 800296a:	4620      	mov	r0, r4
 800296c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	4620      	mov	r0, r4
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002974:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002978:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800297c:	2300      	movs	r3, #0
 800297e:	46ac      	mov	ip, r5
}
 8002980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8002984:	4760      	bx	ip
 8002986:	bf00      	nop
 8002988:	70060000 	.word	0x70060000

0800298c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800298c:	f00a b950 	b.w	800cc30 <_ZN8touchgfx3HAL10beginFrameEv>

08002990 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002990:	f00a b95a 	b.w	800cc48 <_ZN8touchgfx3HAL8endFrameEv>

08002994 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002994:	f00a ba73 	b.w	800ce7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002998 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 800299a:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80029a2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80029a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80029aa:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80029ae:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80029b2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80029b6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80029b8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80029bc:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80029be:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80029c2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80029c4:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80029c8:	d2f9      	bcs.n	80029be <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 80029ca:	3b20      	subs	r3, #32
 80029cc:	f113 0f20 	cmn.w	r3, #32
 80029d0:	d1f2      	bne.n	80029b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 80029d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029d6:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	03db      	lsls	r3, r3, #15
 80029e6:	d501      	bpl.n	80029ec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 80029e8:	f7ff bfd6 	b.w	8002998 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	03db      	lsls	r3, r3, #15
 80029fa:	d501      	bpl.n	8002a00 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 80029fc:	f7ff bfcc 	b.w	8002998 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002a08:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002a0a:	f00a f8db 	bl	800cbc4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	03db      	lsls	r3, r3, #15
 8002a14:	d503      	bpl.n	8002a1e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a1a:	f7ff bfbd 	b.w	8002998 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002a2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a42:	f3bf 8f6f 	isb	sy
}
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002a4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_LTDC_LineEventCallback+0x50>)
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_LTDC_LineEventCallback+0x54>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	8811      	ldrh	r1, [r2, #0]
 8002a68:	428b      	cmp	r3, r1
    {
 8002a6a:	b510      	push	{r4, lr}
 8002a6c:	4c12      	ldr	r4, [pc, #72]	; (8002ab8 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8002a6e:	d113      	bne.n	8002a98 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_LTDC_LineEventCallback+0x5c>)
 8002a72:	8819      	ldrh	r1, [r3, #0]
 8002a74:	f004 fd98 	bl	80075a8 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002a78:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002a7a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a84:	f7ff fc00 	bl	8002288 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002a88:	6820      	ldr	r0, [r4, #0]
 8002a8a:	f00a fedd 	bl	800d848 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a8e:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a94:	f7ff ba36 	b.w	8001f04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002a98:	f004 fd86 	bl	80075a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff fa49 	bl	8001f34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002aa2:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002aa4:	6803      	ldr	r3, [r0, #0]
    }
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4718      	bx	r3
 8002aae:	bf00      	nop
 8002ab0:	50001000 	.word	0x50001000
 8002ab4:	24001792 	.word	0x24001792
 8002ab8:	24006c68 	.word	0x24006c68
 8002abc:	24001790 	.word	0x24001790

08002ac0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN23ApplicationFontProviderD0Ev>:
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	f019 fb22 	bl	801c110 <_ZdlPvj>
 8002acc:	4620      	mov	r0, r4
 8002ace:	bd10      	pop	{r4, pc}

08002ad0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002ad0:	b508      	push	{r3, lr}
 8002ad2:	2903      	cmp	r1, #3
 8002ad4:	d813      	bhi.n	8002afe <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002ad6:	e8df f001 	tbb	[pc, r1]
 8002ada:	0602      	.short	0x0602
 8002adc:	0e0a      	.short	0x0e0a
    switch (typography)
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002ade:	f001 ff0f 	bl	8004900 <_ZN17TypedTextDatabase8getFontsEv>
 8002ae2:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002ae4:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002ae6:	f001 ff0b 	bl	8004900 <_ZN17TypedTextDatabase8getFontsEv>
 8002aea:	6840      	ldr	r0, [r0, #4]
 8002aec:	e7fa      	b.n	8002ae4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002aee:	f001 ff07 	bl	8004900 <_ZN17TypedTextDatabase8getFontsEv>
 8002af2:	6880      	ldr	r0, [r0, #8]
 8002af4:	e7f6      	b.n	8002ae4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002af6:	f001 ff03 	bl	8004900 <_ZN17TypedTextDatabase8getFontsEv>
 8002afa:	68c0      	ldr	r0, [r0, #12]
 8002afc:	e7f2      	b.n	8002ae4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 8002afe:	2000      	movs	r0, #0
 8002b00:	e7f0      	b.n	8002ae4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002b04 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002b04:	4800      	ldr	r0, [pc, #0]	; (8002b08 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002b06:	4770      	bx	lr
 8002b08:	0801daf8 	.word	0x0801daf8

08002b0c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002b0c:	200d      	movs	r0, #13
 8002b0e:	4770      	bx	lr

08002b10 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002b10:	b513      	push	{r0, r1, r4, lr}
 8002b12:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002b14:	b151      	cbz	r1, 8002b2c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002b1a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002b1c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002b20:	689c      	ldr	r4, [r3, #8]
 8002b22:	f10d 0303 	add.w	r3, sp, #3
 8002b26:	47a0      	blx	r4
        return glyph;
    }
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd10      	pop	{r4, pc}
            return 0;
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	e7fb      	b.n	8002b28 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002b30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002b30:	8940      	ldrh	r0, [r0, #10]
 8002b32:	4770      	bx	lr

08002b34 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002b34:	8980      	ldrh	r0, [r0, #12]
 8002b36:	4770      	bx	lr

08002b38 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002b38:	8880      	ldrh	r0, [r0, #4]
 8002b3a:	4770      	bx	lr

08002b3c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002b3c:	7983      	ldrb	r3, [r0, #6]
 8002b3e:	8880      	ldrh	r0, [r0, #4]
 8002b40:	4418      	add	r0, r3
    }
 8002b42:	b280      	uxth	r0, r0
 8002b44:	4770      	bx	lr

08002b46 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002b46:	79c0      	ldrb	r0, [r0, #7]
    }
 8002b48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002b4c:	4770      	bx	lr

08002b4e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002b4e:	79c0      	ldrb	r0, [r0, #7]
    }
 8002b50:	09c0      	lsrs	r0, r0, #7
 8002b52:	4770      	bx	lr

08002b54 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002b54:	4770      	bx	lr

08002b56 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002b56:	b510      	push	{r4, lr}
 8002b58:	4604      	mov	r4, r0
    }
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	f019 fad8 	bl	801c110 <_ZdlPvj>
 8002b60:	4620      	mov	r0, r4
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8002b64:	4770      	bx	lr

08002b66 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002b66:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8002b6a:	6808      	ldr	r0, [r1, #0]
 8002b6c:	6849      	ldr	r1, [r1, #4]
 8002b6e:	c303      	stmia	r3!, {r0, r1}
    }
 8002b70:	4770      	bx	lr

08002b72 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002b72:	4770      	bx	lr

08002b74 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002b74:	4770      	bx	lr

08002b76 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002b76:	6041      	str	r1, [r0, #4]
    }
 8002b78:	4770      	bx	lr

08002b7a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002b7a:	4770      	bx	lr

08002b7c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	7203      	strb	r3, [r0, #8]
    }
 8002b80:	4770      	bx	lr

08002b82 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002b82:	4770      	bx	lr

08002b84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b84:	4770      	bx	lr

08002b86 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002b86:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8002b88:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002b8a:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8002b8c:	68c2      	ldr	r2, [r0, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	1054      	asrs	r4, r2, #1
 8002b92:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002b96:	07d2      	lsls	r2, r2, #31
 8002b98:	bf48      	it	mi
 8002b9a:	590a      	ldrmi	r2, [r1, r4]
    }
 8002b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8002ba0:	bf48      	it	mi
 8002ba2:	58d3      	ldrmi	r3, [r2, r3]
 8002ba4:	4718      	bx	r3

08002ba6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002ba6:	6843      	ldr	r3, [r0, #4]
 8002ba8:	b12b      	cbz	r3, 8002bb6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002baa:	6883      	ldr	r3, [r0, #8]
 8002bac:	b92b      	cbnz	r3, 8002bba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002bae:	68c0      	ldr	r0, [r0, #12]
 8002bb0:	f000 0001 	and.w	r0, r0, #1
 8002bb4:	4770      	bx	lr
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4770      	bx	lr
 8002bba:	2001      	movs	r0, #1
    }
 8002bbc:	4770      	bx	lr

08002bbe <_ZN8touchgfx12NoTransitionD0Ev>:
 8002bbe:	b510      	push	{r4, lr}
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	210c      	movs	r1, #12
 8002bc4:	f019 faa4 	bl	801c110 <_ZdlPvj>
 8002bc8:	4620      	mov	r0, r4
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4604      	mov	r4, r0
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	f019 fa9d 	bl	801c110 <_ZdlPvj>
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	bd10      	pop	{r4, pc}

08002bda <_ZN23FrontendApplicationBaseD0Ev>:
 8002bda:	b510      	push	{r4, lr}
 8002bdc:	4604      	mov	r4, r0
 8002bde:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002be2:	f019 fa95 	bl	801c110 <_ZdlPvj>
 8002be6:	4620      	mov	r0, r4
 8002be8:	bd10      	pop	{r4, pc}

08002bea <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002bea:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8002bec:	f00d fde4 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 8002bf0:	6803      	ldr	r3, [r0, #0]
    }
 8002bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4718      	bx	r3

08002bfa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002bfe:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002c02:	b158      	cbz	r0, 8002c1c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002c04:	6803      	ldr	r3, [r0, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4798      	blx	r3
 8002c0a:	b138      	cbz	r0, 8002c1c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002c0c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002c10:	6803      	ldr	r3, [r0, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8002c1c:	bd10      	pop	{r4, pc}
	...

08002c20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	4617      	mov	r7, r2
 8002c26:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002c28:	f00d fde8 	bl	80107fc <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002c2e:	2500      	movs	r5, #0
        instance = this;
 8002c30:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002c32:	4629      	mov	r1, r5
      model(m)
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8002c36:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002c3a:	4e0f      	ldr	r6, [pc, #60]	; (8002c78 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002c42:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8002c46:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002c4a:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002c4c:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002c54:	4628      	mov	r0, r5
 8002c56:	f001 fe07 	bl	8004868 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002c5a:	6833      	ldr	r3, [r6, #0]
 8002c5c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002c60:	b10a      	cbz	r2, 8002c66 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002c62:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c64:	b900      	cbnz	r0, 8002c68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002c66:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002c68:	f014 fa83 	bl	8017172 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c70:	24006cb4 	.word	0x24006cb4
 8002c74:	0801e050 	.word	0x0801e050
 8002c78:	24006c68 	.word	0x24006c68
 8002c7c:	0801e038 	.word	0x0801e038

08002c80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002c82:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002c86:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002c90:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002c94:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	08002e01 	.word	0x08002e01

08002ca0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8002ca2:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002ca6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002cb0:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002cb4:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	08002f69 	.word	0x08002f69

08002cc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002cc6:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002ccc:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002cce:	4614      	mov	r4, r2
 8002cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4798      	blx	r3
 8002cd8:	f5b0 6fe2 	cmp.w	r0, #1808	; 0x710
 8002cdc:	d205      	bcs.n	8002cea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2a>
 8002cde:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002ce0:	21a3      	movs	r1, #163	; 0xa3
 8002ce2:	4a42      	ldr	r2, [pc, #264]	; (8002dec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002ce4:	4842      	ldr	r0, [pc, #264]	; (8002df0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002ce6:	f019 fb29 	bl	801c33c <__assert_func>
 8002cea:	6860      	ldr	r0, [r4, #4]
 8002cec:	6803      	ldr	r3, [r0, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4798      	blx	r3
 8002cf2:	280f      	cmp	r0, #15
 8002cf4:	d803      	bhi.n	8002cfe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3e>
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002cf8:	21a4      	movs	r1, #164	; 0xa4
 8002cfa:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002cfc:	e7f2      	b.n	8002ce4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002cfe:	68e0      	ldr	r0, [r4, #12]
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4798      	blx	r3
 8002d06:	280b      	cmp	r0, #11
 8002d08:	d803      	bhi.n	8002d12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x52>
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002d0c:	21a5      	movs	r1, #165	; 0xa5
 8002d0e:	4a37      	ldr	r2, [pc, #220]	; (8002dec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002d10:	e7e8      	b.n	8002ce4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    Application::getInstance()->clearAllTimerWidgets();
 8002d12:	f00d fd51 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 8002d16:	f00d fd55 	bl	80107c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002d1a:	f8d9 0000 	ldr.w	r0, [r9]
 8002d1e:	b110      	cbz	r0, 8002d26 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x66>
        (*currentTrans)->tearDown();
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4798      	blx	r3
    if (*currentTrans)
 8002d26:	f8d9 0000 	ldr.w	r0, [r9]
 8002d2a:	b110      	cbz	r0, 8002d32 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x72>
        (*currentTrans)->~Transition();
 8002d2c:	6803      	ldr	r3, [r0, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4798      	blx	r3
    if (*currentScreen)
 8002d32:	6838      	ldr	r0, [r7, #0]
 8002d34:	b110      	cbz	r0, 8002d3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->tearDownScreen();
 8002d36:	6803      	ldr	r3, [r0, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4798      	blx	r3
    if (*currentPresenter)
 8002d3c:	f8d8 0000 	ldr.w	r0, [r8]
 8002d40:	b110      	cbz	r0, 8002d48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->deactivate();
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4798      	blx	r3
    if (*currentScreen)
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	b110      	cbz	r0, 8002d52 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x92>
        (*currentScreen)->~Screen();
 8002d4c:	6803      	ldr	r3, [r0, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4798      	blx	r3
    if (*currentPresenter)
 8002d52:	f8d8 0000 	ldr.w	r0, [r8]
 8002d56:	b110      	cbz	r0, 8002d5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9e>
        (*currentPresenter)->~Presenter();
 8002d58:	6803      	ldr	r3, [r0, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002d5e:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002d60:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002d62:	f04f 0b00 	mov.w	fp, #0
 8002d66:	6803      	ldr	r3, [r0, #0]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4798      	blx	r3
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002d6e:	4605      	mov	r5, r0
 8002d70:	f8c0 b004 	str.w	fp, [r0, #4]
 8002d74:	6003      	str	r3, [r0, #0]
 8002d76:	4659      	mov	r1, fp
 8002d78:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002d7c:	68a0      	ldr	r0, [r4, #8]
 8002d7e:	6803      	ldr	r3, [r0, #0]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	4798      	blx	r3
 8002d84:	4606      	mov	r6, r0
 8002d86:	f001 fed1 	bl	8004b2c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002d8a:	6860      	ldr	r0, [r4, #4]
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	4798      	blx	r3
 8002d94:	4604      	mov	r4, r0
 8002d96:	4631      	mov	r1, r6
 8002d98:	f001 fdf8 	bl	800498c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002d9c:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002da0:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002da4:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002da6:	b1e4      	cbz	r4, 8002de2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
 8002da8:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002daa:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002dae:	4630      	mov	r0, r6
 8002db0:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002db2:	f8c4 a008 	str.w	sl, [r4, #8]
 8002db6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 8002db8:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002dba:	4798      	blx	r3
    newPresenter->activate();
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f00f f8e4 	bl	8011f94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	4628      	mov	r0, r5
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	4798      	blx	r3
    newTransition->invalidate();
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002ddc:	4620      	mov	r0, r4
 8002dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002de2:	4623      	mov	r3, r4
 8002de4:	e7e1      	b.n	8002daa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xea>
 8002de6:	bf00      	nop
 8002de8:	0801dc0c 	.word	0x0801dc0c
 8002dec:	0801dc9a 	.word	0x0801dc9a
 8002df0:	0801dd9e 	.word	0x0801dd9e
 8002df4:	0801dde5 	.word	0x0801dde5
 8002df8:	0801de88 	.word	0x0801de88
 8002dfc:	0801e094 	.word	0x0801e094

08002e00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002e00:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002e04:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002e06:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8002e0e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8002e14:	f7ff ff54 	bl	8002cc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002e18:	b003      	add	sp, #12
 8002e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1e:	bf00      	nop
 8002e20:	24006ca8 	.word	0x24006ca8
 8002e24:	24006ca4 	.word	0x24006ca4

08002e28 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002e2e:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002e30:	4699      	mov	r9, r3
 8002e32:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002e34:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002e36:	4614      	mov	r4, r2
 8002e38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4798      	blx	r3
 8002e40:	f240 6323 	movw	r3, #1571	; 0x623
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d805      	bhi.n	8002e54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002e4a:	21a3      	movs	r1, #163	; 0xa3
 8002e4c:	4a41      	ldr	r2, [pc, #260]	; (8002f54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002e4e:	4842      	ldr	r0, [pc, #264]	; (8002f58 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002e50:	f019 fa74 	bl	801c33c <__assert_func>
 8002e54:	6860      	ldr	r0, [r4, #4]
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4798      	blx	r3
 8002e5c:	280f      	cmp	r0, #15
 8002e5e:	d803      	bhi.n	8002e68 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002e60:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002e62:	21a4      	movs	r1, #164	; 0xa4
 8002e64:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002e66:	e7f2      	b.n	8002e4e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002e68:	68e0      	ldr	r0, [r4, #12]
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4798      	blx	r3
 8002e70:	280b      	cmp	r0, #11
 8002e72:	d803      	bhi.n	8002e7c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002e76:	21a5      	movs	r1, #165	; 0xa5
 8002e78:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002e7a:	e7e8      	b.n	8002e4e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 8002e7c:	f00d fc9c 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 8002e80:	f00d fca0 	bl	80107c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002e84:	f8d9 0000 	ldr.w	r0, [r9]
 8002e88:	b110      	cbz	r0, 8002e90 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4798      	blx	r3
    if (*currentTrans)
 8002e90:	f8d9 0000 	ldr.w	r0, [r9]
 8002e94:	b110      	cbz	r0, 8002e9c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 8002e96:	6803      	ldr	r3, [r0, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4798      	blx	r3
    if (*currentScreen)
 8002e9c:	6838      	ldr	r0, [r7, #0]
 8002e9e:	b110      	cbz	r0, 8002ea6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002ea0:	6803      	ldr	r3, [r0, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	4798      	blx	r3
    if (*currentPresenter)
 8002ea6:	f8d8 0000 	ldr.w	r0, [r8]
 8002eaa:	b110      	cbz	r0, 8002eb2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 8002eac:	6803      	ldr	r3, [r0, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4798      	blx	r3
    if (*currentScreen)
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	b110      	cbz	r0, 8002ebc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 8002eb6:	6803      	ldr	r3, [r0, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4798      	blx	r3
    if (*currentPresenter)
 8002ebc:	f8d8 0000 	ldr.w	r0, [r8]
 8002ec0:	b110      	cbz	r0, 8002ec8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002ec8:	68e0      	ldr	r0, [r4, #12]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	f04f 0b00 	mov.w	fp, #0
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	4798      	blx	r3
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002ed8:	4605      	mov	r5, r0
 8002eda:	f8c0 b004 	str.w	fp, [r0, #4]
 8002ede:	6003      	str	r3, [r0, #0]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002ee6:	68a0      	ldr	r0, [r4, #8]
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	4798      	blx	r3
 8002eee:	4606      	mov	r6, r0
 8002ef0:	f001 ff20 	bl	8004d34 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002ef4:	6860      	ldr	r0, [r4, #4]
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	6803      	ldr	r3, [r0, #0]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	4798      	blx	r3
 8002efe:	4604      	mov	r4, r0
 8002f00:	4631      	mov	r1, r6
 8002f02:	f001 fe9f 	bl	8004c44 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8002f06:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002f0a:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002f0e:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002f10:	b1e4      	cbz	r4, 8002f4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 8002f12:	1d23      	adds	r3, r4, #4
 8002f14:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002f18:	4630      	mov	r0, r6
 8002f1a:	6833      	ldr	r3, [r6, #0]
 8002f1c:	f8c4 a008 	str.w	sl, [r4, #8]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002f24:	4798      	blx	r3
    newPresenter->activate();
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	4620      	mov	r0, r4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002f2e:	4629      	mov	r1, r5
 8002f30:	4630      	mov	r0, r6
 8002f32:	f00f f82f 	bl	8011f94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	4628      	mov	r0, r5
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4798      	blx	r3
    newTransition->invalidate();
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	4628      	mov	r0, r5
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4798      	blx	r3
}
 8002f46:	4620      	mov	r0, r4
 8002f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	e7e1      	b.n	8002f14 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8002f50:	0801dc0c 	.word	0x0801dc0c
 8002f54:	0801df2b 	.word	0x0801df2b
 8002f58:	0801dd9e 	.word	0x0801dd9e
 8002f5c:	0801dde5 	.word	0x0801dde5
 8002f60:	0801de88 	.word	0x0801de88
 8002f64:	0801e094 	.word	0x0801e094

08002f68 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f68:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002f6c:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f6e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>)
 8002f76:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002f7a:	4804      	ldr	r0, [pc, #16]	; (8002f8c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>)
 8002f7c:	f7ff ff54 	bl	8002e28 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002f80:	b003      	add	sp, #12
 8002f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f86:	bf00      	nop
 8002f88:	24006ca8 	.word	0x24006ca8
 8002f8c:	24006ca4 	.word	0x24006ca4

08002f90 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002f90:	6a00      	ldr	r0, [r0, #32]
 8002f92:	4770      	bx	lr

08002f94 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002f94:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002f96:	4770      	bx	lr

08002f98 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002f98:	4770      	bx	lr

08002f9a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002f9a:	888b      	ldrh	r3, [r1, #4]
 8002f9c:	6980      	ldr	r0, [r0, #24]
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	680a      	ldr	r2, [r1, #0]
 8002fa2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002fa6:	4410      	add	r0, r2
 8002fa8:	4770      	bx	lr

08002faa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002faa:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002fac:	b1c2      	cbz	r2, 8002fe0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002fae:	7b13      	ldrb	r3, [r2, #12]
 8002fb0:	b1b3      	cbz	r3, 8002fe0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002fb2:	7b54      	ldrb	r4, [r2, #13]
 8002fb4:	7ad2      	ldrb	r2, [r2, #11]
 8002fb6:	0224      	lsls	r4, r4, #8
 8002fb8:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002fbc:	4314      	orrs	r4, r2
 8002fbe:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002fc0:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002fc2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002fc6:	8813      	ldrh	r3, [r2, #0]
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d102      	bne.n	8002fd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002fcc:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002fd0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002fd2:	d805      	bhi.n	8002fe0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002fd4:	3801      	subs	r0, #1
 8002fd6:	3204      	adds	r2, #4
 8002fd8:	b280      	uxth	r0, r0
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d1f3      	bne.n	8002fc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002fde:	e7f7      	b.n	8002fd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	e7f5      	b.n	8002fd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002fe4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	2128      	movs	r1, #40	; 0x28
 8002fea:	f019 f891 	bl	801c110 <_ZdlPvj>
 8002fee:	4620      	mov	r0, r4
 8002ff0:	bd10      	pop	{r4, pc}
	...

08002ff4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002ff4:	b530      	push	{r4, r5, lr}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002ffa:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8002ffe:	9506      	str	r5, [sp, #24]
 8003000:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003004:	9505      	str	r5, [sp, #20]
 8003006:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800300a:	9504      	str	r5, [sp, #16]
 800300c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003010:	9503      	str	r5, [sp, #12]
 8003012:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003016:	9502      	str	r5, [sp, #8]
 8003018:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800301c:	9501      	str	r5, [sp, #4]
 800301e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003022:	9500      	str	r5, [sp, #0]
 8003024:	f00e fbf4 	bl	8011810 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 800302a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003030:	61a3      	str	r3, [r4, #24]
 8003032:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003034:	61e3      	str	r3, [r4, #28]
 8003036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003038:	6223      	str	r3, [r4, #32]
 800303a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800303c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800303e:	b009      	add	sp, #36	; 0x24
 8003040:	bd30      	pop	{r4, r5, pc}
 8003042:	bf00      	nop
 8003044:	0801e0b8 	.word	0x0801e0b8

08003048 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003048:	2000      	movs	r0, #0
 800304a:	4770      	bx	lr

0800304c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800304c:	8081      	strh	r1, [r0, #4]
    }
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003050:	80c1      	strh	r1, [r0, #6]
    }
 8003052:	4770      	bx	lr

08003054 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003054:	8101      	strh	r1, [r0, #8]
    }
 8003056:	4770      	bx	lr

08003058 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003058:	8141      	strh	r1, [r0, #10]
    }
 800305a:	4770      	bx	lr

0800305c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800305c:	4770      	bx	lr

0800305e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 800305e:	4770      	bx	lr

08003060 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8003060:	4770      	bx	lr

08003062 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8003062:	4770      	bx	lr

08003064 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003064:	4770      	bx	lr

08003066 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003066:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003068:	88c4      	ldrh	r4, [r0, #6]
 800306a:	6803      	ldr	r3, [r0, #0]
 800306c:	1b12      	subs	r2, r2, r4
 800306e:	8884      	ldrh	r4, [r0, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	1b09      	subs	r1, r1, r4
 8003074:	b212      	sxth	r2, r2
    }
 8003076:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800307a:	b209      	sxth	r1, r1
 800307c:	4718      	bx	r3

0800307e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800307e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003082:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800308e:	6010      	str	r0, [r2, #0]
    }
 8003090:	4770      	bx	lr

08003092 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003092:	4770      	bx	lr

08003094 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003094:	4770      	bx	lr

08003096 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003096:	4770      	bx	lr

08003098 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003098:	4770      	bx	lr

0800309a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800309a:	4770      	bx	lr

0800309c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800309c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80030a0:	b11a      	cbz	r2, 80030aa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80030a2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80030a6:	b102      	cbz	r2, 80030aa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80030a8:	6018      	str	r0, [r3, #0]
        }
    }
 80030aa:	4770      	bx	lr

080030ac <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80030ac:	4770      	bx	lr

080030ae <_ZN15Screen1ViewBase14button9ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button9Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030ae:	4770      	bx	lr

080030b0 <_ZN15Screen1ViewBase14button8ClickedEv>:

    virtual void button8Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030b0:	4770      	bx	lr

080030b2 <_ZN15Screen1ViewBase19buttonSwitchClickedEv>:

    virtual void buttonSwitchClicked()
    {
        // Override and implement this function in Screen1
    }
 80030b2:	4770      	bx	lr

080030b4 <_ZN15Screen1ViewBase17buttonSendClickedEv>:

    virtual void buttonSendClicked()
    {
        // Override and implement this function in Screen1
    }
 80030b4:	4770      	bx	lr

080030b6 <_ZN15Screen1ViewBase14button0ClickedEv>:

    virtual void button0Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030b6:	4770      	bx	lr

080030b8 <_ZN15Screen1ViewBase18buttonClearClickedEv>:

    virtual void buttonClearClicked()
    {
        // Override and implement this function in Screen1
    }
 80030b8:	4770      	bx	lr

080030ba <_ZN15Screen1ViewBase14button3ClickedEv>:

    virtual void button3Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030ba:	4770      	bx	lr

080030bc <_ZN15Screen1ViewBase14button2ClickedEv>:

    virtual void button2Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030bc:	4770      	bx	lr

080030be <_ZN15Screen1ViewBase14button1ClickedEv>:

    virtual void button1Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030be:	4770      	bx	lr

080030c0 <_ZN15Screen1ViewBase14button6ClickedEv>:

    virtual void button6Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030c0:	4770      	bx	lr

080030c2 <_ZN15Screen1ViewBase14button5ClickedEv>:

    virtual void button5Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030c2:	4770      	bx	lr

080030c4 <_ZN15Screen1ViewBase14button4ClickedEv>:

    virtual void button4Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030c4:	4770      	bx	lr

080030c6 <_ZN15Screen1ViewBase14button7ClickedEv>:

    virtual void button7Clicked()
    {
        // Override and implement this function in Screen1
    }
 80030c6:	4770      	bx	lr

080030c8 <_ZN15Screen1ViewBase16buttonDotClickedEv>:

    virtual void buttonDotClicked()
    {
        // Override and implement this function in Screen1
    }
 80030c8:	4770      	bx	lr

080030ca <_ZN15Screen1ViewBase17buttonFreqToggledEv>:

    virtual void buttonFreqToggled()
    {
        // Override and implement this function in Screen1
    }
 80030ca:	4770      	bx	lr

080030cc <_ZN15Screen1ViewBase15buttonMIToggledEv>:

    virtual void buttonMIToggled()
    {
        // Override and implement this function in Screen1
    }
 80030cc:	4770      	bx	lr

080030ce <_ZN15Screen1ViewBase18buttonPowerClickedEv>:

    virtual void buttonPowerClicked()
    {
        // Override and implement this function in Screen1
    }
 80030ce:	4770      	bx	lr

080030d0 <_ZN15Screen1ViewBase20button2DirectClickedEv>:

    virtual void button2DirectClicked()
    {
        // Override and implement this function in Screen1
    }
 80030d0:	4770      	bx	lr

080030d2 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 80030d2:	4770      	bx	lr

080030d4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80030d4:	4770      	bx	lr

080030d6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80030d6:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80030d8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80030da:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80030dc:	68c2      	ldr	r2, [r0, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	1055      	asrs	r5, r2, #1
 80030e2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80030e6:	07d2      	lsls	r2, r2, #31
 80030e8:	bf48      	it	mi
 80030ea:	5962      	ldrmi	r2, [r4, r5]
    }
 80030ec:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80030ee:	bf48      	it	mi
 80030f0:	58d3      	ldrmi	r3, [r2, r3]
 80030f2:	4718      	bx	r3

080030f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 80030f4:	6843      	ldr	r3, [r0, #4]
 80030f6:	b12b      	cbz	r3, 8003104 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80030f8:	6883      	ldr	r3, [r0, #8]
 80030fa:	b92b      	cbnz	r3, 8003108 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80030fc:	68c0      	ldr	r0, [r0, #12]
 80030fe:	f000 0001 	and.w	r0, r0, #1
 8003102:	4770      	bx	lr
 8003104:	4618      	mov	r0, r3
 8003106:	4770      	bx	lr
 8003108:	2001      	movs	r0, #1
    }
 800310a:	4770      	bx	lr

0800310c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	2110      	movs	r1, #16
 8003112:	f018 fffd 	bl	801c110 <_ZdlPvj>
 8003116:	4620      	mov	r0, r4
 8003118:	bd10      	pop	{r4, pc}

0800311a <_ZN15Screen1ViewBaseD0Ev>:
    virtual ~Screen1ViewBase() {}
 800311a:	b510      	push	{r4, lr}
 800311c:	4604      	mov	r4, r0
 800311e:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8003122:	f018 fff5 	bl	801c110 <_ZdlPvj>
 8003126:	4620      	mov	r0, r4
 8003128:	bd10      	pop	{r4, pc}

0800312a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button7)
 800312a:	f100 0398 	add.w	r3, r0, #152	; 0x98
 800312e:	4299      	cmp	r1, r3
{
 8003130:	b510      	push	{r4, lr}
 8003132:	4604      	mov	r4, r0
    if (&src == &button7)
 8003134:	d104      	bne.n	8003140 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    {
        //Interaction14
        //When button7 clicked call virtual function
        //Call button7Clicked
        button7Clicked();
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        //button2DirectClicked
        //When button2Direct clicked call virtual function
        //Call button2DirectClicked
        button2DirectClicked();
    }
}
 800313a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        button2DirectClicked();
 800313e:	4718      	bx	r3
    else if (&src == &button8)
 8003140:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8003144:	4299      	cmp	r1, r3
 8003146:	d102      	bne.n	800314e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
        button8Clicked();
 8003148:	6803      	ldr	r3, [r0, #0]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	e7f5      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button9)
 800314e:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8003152:	4299      	cmp	r1, r3
 8003154:	d102      	bne.n	800315c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
        button9Clicked();
 8003156:	6803      	ldr	r3, [r0, #0]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	e7ee      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button4)
 800315c:	f500 73b8 	add.w	r3, r0, #368	; 0x170
 8003160:	4299      	cmp	r1, r3
 8003162:	d102      	bne.n	800316a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        button4Clicked();
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	e7e7      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button5)
 800316a:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
 800316e:	4299      	cmp	r1, r3
 8003170:	d102      	bne.n	8003178 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4e>
        button5Clicked();
 8003172:	6803      	ldr	r3, [r0, #0]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	e7e0      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button6)
 8003178:	f500 7300 	add.w	r3, r0, #512	; 0x200
 800317c:	4299      	cmp	r1, r3
 800317e:	d102      	bne.n	8003186 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5c>
        button6Clicked();
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	e7d9      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button1)
 8003186:	f500 7312 	add.w	r3, r0, #584	; 0x248
 800318a:	4299      	cmp	r1, r3
 800318c:	d102      	bne.n	8003194 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6a>
        button1Clicked();
 800318e:	6803      	ldr	r3, [r0, #0]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	e7d2      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button2)
 8003194:	f500 7324 	add.w	r3, r0, #656	; 0x290
 8003198:	4299      	cmp	r1, r3
 800319a:	d102      	bne.n	80031a2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x78>
        button2Clicked();
 800319c:	6803      	ldr	r3, [r0, #0]
 800319e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a0:	e7cb      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button3)
 80031a2:	f500 7336 	add.w	r3, r0, #728	; 0x2d8
 80031a6:	4299      	cmp	r1, r3
 80031a8:	d102      	bne.n	80031b0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
        button3Clicked();
 80031aa:	6803      	ldr	r3, [r0, #0]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	e7c4      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &buttonClear)
 80031b0:	f500 7348 	add.w	r3, r0, #800	; 0x320
 80031b4:	4299      	cmp	r1, r3
 80031b6:	d103      	bne.n	80031c0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
        buttonClearClicked();
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        button2DirectClicked();
 80031bc:	4620      	mov	r0, r4
 80031be:	e7bc      	b.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button0)
 80031c0:	f500 735a 	add.w	r3, r0, #872	; 0x368
 80031c4:	4299      	cmp	r1, r3
 80031c6:	d102      	bne.n	80031ce <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        button0Clicked();
 80031c8:	6803      	ldr	r3, [r0, #0]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	e7f6      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSend)
 80031ce:	f500 736c 	add.w	r3, r0, #944	; 0x3b0
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d102      	bne.n	80031dc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb2>
        buttonSendClicked();
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	e7ef      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSwitch)
 80031dc:	f500 737e 	add.w	r3, r0, #1016	; 0x3f8
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d102      	bne.n	80031ea <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc0>
        buttonSwitchClicked();
 80031e4:	6803      	ldr	r3, [r0, #0]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	e7e8      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonDot)
 80031ea:	f200 5394 	addw	r3, r0, #1428	; 0x594
 80031ee:	4299      	cmp	r1, r3
 80031f0:	d102      	bne.n	80031f8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xce>
        buttonDotClicked();
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	e7e1      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonFreq)
 80031f8:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 80031fc:	4299      	cmp	r1, r3
 80031fe:	d102      	bne.n	8003206 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        buttonFreqToggled();
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003204:	e7da      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonMI)
 8003206:	f200 6314 	addw	r3, r0, #1556	; 0x614
 800320a:	4299      	cmp	r1, r3
 800320c:	d102      	bne.n	8003214 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xea>
        buttonMIToggled();
 800320e:	6803      	ldr	r3, [r0, #0]
 8003210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003212:	e7d3      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonPower)
 8003214:	f200 634c 	addw	r3, r0, #1612	; 0x64c
 8003218:	4299      	cmp	r1, r3
 800321a:	d102      	bne.n	8003222 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf8>
        buttonPowerClicked();
 800321c:	6803      	ldr	r3, [r0, #0]
 800321e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003220:	e7cc      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &button2Direct)
 8003222:	f200 63b4 	addw	r3, r0, #1716	; 0x6b4
 8003226:	4299      	cmp	r1, r3
 8003228:	d106      	bne.n	8003238 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10e>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800322a:	f00d fac5 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoScreen2ScreenNoTransition();
 800322e:	f7ff fd37 	bl	8002ca0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        button2DirectClicked();
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	e7c1      	b.n	80031bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
}
 8003238:	bd10      	pop	{r4, pc}
	...

0800323c <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 800323c:	4a07      	ldr	r2, [pc, #28]	; (800325c <_ZN8touchgfx8DrawableC1Ev+0x20>)
 800323e:	6002      	str	r2, [r0, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003246:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800324a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800324e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	0801fa20 	.word	0x0801fa20

08003260 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003260:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003262:	b570      	push	{r4, r5, r6, lr}
 8003264:	4604      	mov	r4, r0
        setX(x);
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 8003268:	4615      	mov	r5, r2
        setX(x);
 800326a:	4798      	blx	r3
        setY(y);
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8003274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003278:	4718      	bx	r3

0800327a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800327a:	b570      	push	{r4, r5, r6, lr}
 800327c:	4604      	mov	r4, r0
 800327e:	461d      	mov	r5, r3
 8003280:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003284:	f7ff ffec 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	4629      	mov	r1, r5
 800328c:	4620      	mov	r0, r4
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	4798      	blx	r3
        setHeight(height);
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	4631      	mov	r1, r6
 8003296:	4620      	mov	r0, r4
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 800329a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800329e:	4718      	bx	r3

080032a0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80032a0:	b510      	push	{r4, lr}
 80032a2:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 80032a4:	2226      	movs	r2, #38	; 0x26
 80032a6:	2100      	movs	r1, #0
 80032a8:	f019 f8d4 	bl	801c454 <memset>
class Widget : public Drawable
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ffc5 	bl	800323c <_ZN8touchgfx8DrawableC1Ev>
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 80032b4:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	23ff      	movs	r3, #255	; 0xff
 80032ba:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 80032be:	2300      	movs	r3, #0
 80032c0:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 80032c2:	bd10      	pop	{r4, pc}
 80032c4:	0801f41c 	.word	0x0801f41c

080032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80032c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 80032ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 80032ce:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 80032d0:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 80032d2:	4299      	cmp	r1, r3
 80032d4:	d033      	beq.n	800333e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b92b      	cbnz	r3, 80032e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 80032de:	21ae      	movs	r1, #174	; 0xae
 80032e0:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80032e2:	481c      	ldr	r0, [pc, #112]	; (8003354 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 80032e4:	f019 f82a 	bl	801c33c <__assert_func>
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 80032ea:	8812      	ldrh	r2, [r2, #0]
 80032ec:	428a      	cmp	r2, r1
 80032ee:	d803      	bhi.n	80032f8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 80032f2:	21af      	movs	r1, #175	; 0xaf
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 80032f6:	e7f4      	b.n	80032e2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 80032f8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	f001 faea 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	4601      	mov	r1, r0
 8003310:	9001      	str	r0, [sp, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	4628      	mov	r0, r5
 8003316:	4798      	blx	r3
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	4604      	mov	r4, r0
 800331c:	9901      	ldr	r1, [sp, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	4628      	mov	r0, r5
 8003322:	4798      	blx	r3
 8003324:	fb14 f400 	smulbb	r4, r4, r0
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	4628      	mov	r0, r5
 800332c:	b2e4      	uxtb	r4, r4
 800332e:	9901      	ldr	r1, [sp, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	4798      	blx	r3
 8003334:	4404      	add	r4, r0
 8003336:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800333a:	b002      	add	sp, #8
 800333c:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8003344:	e7f9      	b.n	800333a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 8003346:	bf00      	nop
 8003348:	24006cb8 	.word	0x24006cb8
 800334c:	0801e108 	.word	0x0801e108
 8003350:	0801e14a 	.word	0x0801e14a
 8003354:	0801e178 	.word	0x0801e178
 8003358:	24006cbc 	.word	0x24006cbc
 800335c:	0801e1bf 	.word	0x0801e1bf
 8003360:	24006cc0 	.word	0x24006cc0
 8003364:	24006cc4 	.word	0x24006cc4

08003368 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003368:	b510      	push	{r4, lr}
 800336a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800336c:	2226      	movs	r2, #38	; 0x26
 800336e:	2100      	movs	r1, #0
 8003370:	f019 f870 	bl	801c454 <memset>
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ff61 	bl	800323c <_ZN8touchgfx8DrawableC1Ev>
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 800337c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003380:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003382:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8003386:	62a3      	str	r3, [r4, #40]	; 0x28
 8003388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800338e:	2300      	movs	r3, #0
 8003390:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8003394:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8003396:	bd10      	pop	{r4, pc}
 8003398:	0801f374 	.word	0x0801f374
 800339c:	0801dc04 	.word	0x0801dc04

080033a0 <_ZN8touchgfx12ToggleButtonC1Ev>:
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80033a4:	2226      	movs	r2, #38	; 0x26
 80033a6:	2100      	movs	r1, #0
 80033a8:	f019 f854 	bl	801c454 <memset>
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff ff45 	bl	800323c <_ZN8touchgfx8DrawableC1Ev>
 80033b2:	2300      	movs	r3, #0
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <_ZN8touchgfx12ToggleButtonC1Ev+0x38>)
 80033b6:	4620      	mov	r0, r4
 80033b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 80033be:	2301      	movs	r3, #1
 80033c0:	6022      	str	r2, [r4, #0]
 80033c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80033c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ca:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80033cc:	8623      	strh	r3, [r4, #48]	; 0x30
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80033ce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 80033d2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	bf00      	nop
 80033d8:	0801f260 	.word	0x0801f260

080033dc <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	4604      	mov	r4, r0
        : presenter(0)
 80033e2:	2600      	movs	r6, #0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80033e4:	4dea      	ldr	r5, [pc, #936]	; (8003790 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
 80033e6:	f04f 0a08 	mov.w	sl, #8
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80033ea:	f504 7b5a 	add.w	fp, r4, #872	; 0x368
 80033ee:	f04f 0909 	mov.w	r9, #9
    button7.setAction(buttonCallback);
 80033f2:	f504 68e0 	add.w	r8, r4, #1792	; 0x700
class TypedText
 80033f6:	2705      	movs	r7, #5
Screen1ViewBase::Screen1ViewBase() :
 80033f8:	ed2d 8b10 	vpush	{d8-d15}
 80033fc:	b095      	sub	sp, #84	; 0x54
 80033fe:	f00e fc1d 	bl	8011c3c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003402:	4622      	mov	r2, r4
 8003404:	4be3      	ldr	r3, [pc, #908]	; (8003794 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 8003406:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003408:	f842 3b40 	str.w	r3, [r2], #64
 800340c:	4610      	mov	r0, r2
 800340e:	ee08 2a10 	vmov	s16, r2
 8003412:	f7ff ff45 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003416:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800341a:	4618      	mov	r0, r3
 800341c:	930a      	str	r3, [sp, #40]	; 0x28
 800341e:	f7ff ff3f 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003422:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003426:	4618      	mov	r0, r3
 8003428:	ee08 3a90 	vmov	s17, r3
 800342c:	f00b fcd0 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003430:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 8003434:	4618      	mov	r0, r3
 8003436:	ee09 3a10 	vmov	s18, r3
 800343a:	f00b fcc9 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800343e:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8003442:	4618      	mov	r0, r3
 8003444:	ee09 3a90 	vmov	s19, r3
 8003448:	f00b fcc2 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800344c:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8003450:	4618      	mov	r0, r3
 8003452:	ee0a 3a10 	vmov	s20, r3
 8003456:	f00b fcbb 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800345a:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 800345e:	4618      	mov	r0, r3
 8003460:	ee0a 3a90 	vmov	s21, r3
 8003464:	f00b fcb4 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003468:	f504 7300 	add.w	r3, r4, #512	; 0x200
 800346c:	4618      	mov	r0, r3
 800346e:	ee0b 3a10 	vmov	s22, r3
 8003472:	f00b fcad 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003476:	f504 7312 	add.w	r3, r4, #584	; 0x248
 800347a:	4618      	mov	r0, r3
 800347c:	ee0b 3a90 	vmov	s23, r3
 8003480:	f00b fca6 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003484:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8003488:	4618      	mov	r0, r3
 800348a:	ee0c 3a10 	vmov	s24, r3
 800348e:	f00b fc9f 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003492:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 8003496:	4618      	mov	r0, r3
 8003498:	ee0c 3a90 	vmov	s25, r3
 800349c:	f00b fc98 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80034a0:	f504 7348 	add.w	r3, r4, #800	; 0x320
 80034a4:	4618      	mov	r0, r3
 80034a6:	ee0d 3a10 	vmov	s26, r3
 80034aa:	f00b fc91 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80034ae:	4658      	mov	r0, fp
 80034b0:	f00b fc8e 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80034b4:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 80034b8:	4618      	mov	r0, r3
 80034ba:	ee0d 3a90 	vmov	s27, r3
 80034be:	f00b fc87 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80034c2:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 80034c6:	4618      	mov	r0, r3
 80034c8:	ee0f 3a10 	vmov	s30, r3
 80034cc:	f00b fb14 	bl	800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80034d0:	f204 4334 	addw	r3, r4, #1076	; 0x434
 80034d4:	4618      	mov	r0, r3
 80034d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034d8:	f7ff fee2 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 80034dc:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 80034e0:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 80034e4:	4618      	mov	r0, r3
 80034e6:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 80034ea:	f8a4 6464 	strh.w	r6, [r4, #1124]	; 0x464
 80034ee:	930c      	str	r3, [sp, #48]	; 0x30
 80034f0:	f7ff fed6 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 80034f4:	f204 439c 	addw	r3, r4, #1180	; 0x49c
 80034f8:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
 80034fc:	f8c4 6494 	str.w	r6, [r4, #1172]	; 0x494
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 8003500:	4618      	mov	r0, r3
 8003502:	f8a4 6498 	strh.w	r6, [r4, #1176]	; 0x498
 8003506:	ee0f 3a90 	vmov	s31, r3
 800350a:	4da3      	ldr	r5, [pc, #652]	; (8003798 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 800350c:	f7ff ff2c 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003510:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8003514:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 8003518:	4618      	mov	r0, r3
 800351a:	f8c4 64d8 	str.w	r6, [r4, #1240]	; 0x4d8
 800351e:	9303      	str	r3, [sp, #12]
 8003520:	f7ff ff22 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003524:	f204 531c 	addw	r3, r4, #1308	; 0x51c
 8003528:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
 800352c:	f8c4 6518 	str.w	r6, [r4, #1304]	; 0x518
    __background.setPosition(0, 0, 480, 272);
 8003530:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003534:	4618      	mov	r0, r3
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	f7ff ff16 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 800353c:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
 8003540:	4618      	mov	r0, r3
 8003542:	9305      	str	r3, [sp, #20]
 8003544:	f7ff ff10 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003548:	f204 5394 	addw	r3, r4, #1428	; 0x594
 800354c:	4618      	mov	r0, r3
 800354e:	ee0e 3a10 	vmov	s28, r3
 8003552:	f00b fc3d 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003556:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 800355a:	4618      	mov	r0, r3
 800355c:	9306      	str	r3, [sp, #24]
 800355e:	f7ff ff1f 	bl	80033a0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8003562:	f204 6314 	addw	r3, r4, #1556	; 0x614
 8003566:	4618      	mov	r0, r3
 8003568:	9307      	str	r3, [sp, #28]
 800356a:	f7ff ff19 	bl	80033a0 <_ZN8touchgfx12ToggleButtonC1Ev>
 800356e:	f204 634c 	addw	r3, r4, #1612	; 0x64c
 8003572:	4618      	mov	r0, r3
 8003574:	9308      	str	r3, [sp, #32]
 8003576:	f00b fabf 	bl	800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800357a:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
 800357e:	a912      	add	r1, sp, #72	; 0x48
 8003580:	ee0e 3a90 	vmov	s29, r3
 8003584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003588:	ee1e 0a90 	vmov	r0, s29
 800358c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8003590:	f00a fb86 	bl	800dca0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003594:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
 8003598:	4618      	mov	r0, r3
 800359a:	9309      	str	r3, [sp, #36]	; 0x24
 800359c:	f00b faac 	bl	800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
    __background.setPosition(0, 0, 480, 272);
 80035a2:	4632      	mov	r2, r6
 80035a4:	4631      	mov	r1, r6
 80035a6:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
 80035aa:	ee18 0a10 	vmov	r0, s16
 80035ae:	4b7c      	ldr	r3, [pc, #496]	; (80037a0 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 80035b0:	9500      	str	r5, [sp, #0]
 80035b2:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
 80035b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035ba:	f8c4 4704 	str.w	r4, [r4, #1796]	; 0x704
 80035be:	f8c4 670c 	str.w	r6, [r4, #1804]	; 0x70c
 80035c2:	f7ff fe5a 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 80035c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 80035ca:	4632      	mov	r2, r6
 80035cc:	4631      	mov	r1, r6
 80035ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035d0:	66a3      	str	r3, [r4, #104]	; 0x68
 80035d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035d6:	9500      	str	r5, [sp, #0]
        color = col;
 80035d8:	f04f 35ff 	mov.w	r5, #4294967295
 80035dc:	f7ff fe4d 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 80035e0:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
    button7.setXY(0, 16);
 80035e2:	2210      	movs	r2, #16
 80035e4:	4631      	mov	r1, r6
 80035e6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80035ea:	ee18 0a90 	vmov	r0, s17
 80035ee:	f7ff fe37 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80035f2:	aa12      	add	r2, sp, #72	; 0x48
 80035f4:	a911      	add	r1, sp, #68	; 0x44
 80035f6:	ee18 0a90 	vmov	r0, s17
 80035fa:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80035fe:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003602:	f00a ff79 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003606:	ee18 0a90 	vmov	r0, s17
 800360a:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
 800360e:	f7ff fe5b 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8.setXY(60, 16);
 8003612:	2210      	movs	r2, #16
 8003614:	213c      	movs	r1, #60	; 0x3c
 8003616:	ee19 0a10 	vmov	r0, s18
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800361a:	f8c4 80c0 	str.w	r8, [r4, #192]	; 0xc0
        colorPressed = col;
 800361e:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 8003622:	f7ff fe1d 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button8.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003626:	a911      	add	r1, sp, #68	; 0x44
 8003628:	aa12      	add	r2, sp, #72	; 0x48
 800362a:	ee19 0a10 	vmov	r0, s18
 800362e:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003632:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003636:	f00a ff5f 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800363a:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 800363e:	ee19 0a10 	vmov	r0, s18
 8003642:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
 8003646:	f7ff fe3f 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9.setXY(120, 16);
 800364a:	2210      	movs	r2, #16
 800364c:	2178      	movs	r1, #120	; 0x78
 800364e:	ee19 0a90 	vmov	r0, s19
 8003652:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        colorPressed = col;
 8003656:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
 800365a:	f7ff fe01 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button9.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800365e:	a911      	add	r1, sp, #68	; 0x44
 8003660:	aa12      	add	r2, sp, #72	; 0x48
 8003662:	ee19 0a90 	vmov	r0, s19
 8003666:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800366a:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800366e:	f00a ff43 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003672:	f04f 0202 	mov.w	r2, #2
        updateTextPosition();
 8003676:	ee19 0a90 	vmov	r0, s19
 800367a:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
 800367e:	f7ff fe23 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4.setXY(0, 76);
 8003682:	224c      	movs	r2, #76	; 0x4c
 8003684:	4631      	mov	r1, r6
 8003686:	ee1a 0a10 	vmov	r0, s20
 800368a:	f8c4 8150 	str.w	r8, [r4, #336]	; 0x150
        colorPressed = col;
 800368e:	e9c4 5559 	strd	r5, r5, [r4, #356]	; 0x164
 8003692:	f7ff fde5 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003696:	a911      	add	r1, sp, #68	; 0x44
 8003698:	aa12      	add	r2, sp, #72	; 0x48
 800369a:	ee1a 0a10 	vmov	r0, s20
 800369e:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036a2:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036a6:	f00a ff27 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80036aa:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
 80036ae:	ee1a 0a10 	vmov	r0, s20
 80036b2:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
 80036b6:	f7ff fe07 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5.setXY(60, 76);
 80036ba:	224c      	movs	r2, #76	; 0x4c
 80036bc:	213c      	movs	r1, #60	; 0x3c
 80036be:	ee1a 0a90 	vmov	r0, s21
 80036c2:	f8c4 8198 	str.w	r8, [r4, #408]	; 0x198
        colorPressed = col;
 80036c6:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
 80036ca:	f7ff fdc9 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80036ce:	a911      	add	r1, sp, #68	; 0x44
 80036d0:	aa12      	add	r2, sp, #72	; 0x48
 80036d2:	ee1a 0a90 	vmov	r0, s21
 80036d6:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036da:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036de:	f00a ff0b 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80036e2:	f04f 0204 	mov.w	r2, #4
        updateTextPosition();
 80036e6:	ee1a 0a90 	vmov	r0, s21
 80036ea:	f8a4 21f0 	strh.w	r2, [r4, #496]	; 0x1f0
 80036ee:	f7ff fdeb 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6.setXY(120, 76);
 80036f2:	224c      	movs	r2, #76	; 0x4c
 80036f4:	2178      	movs	r1, #120	; 0x78
 80036f6:	ee1b 0a10 	vmov	r0, s22
 80036fa:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
        colorPressed = col;
 80036fe:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
 8003702:	f7ff fdad 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003706:	aa12      	add	r2, sp, #72	; 0x48
 8003708:	a911      	add	r1, sp, #68	; 0x44
 800370a:	ee1b 0a10 	vmov	r0, s22
 800370e:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003712:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003716:	f00a feef 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800371a:	ee1b 0a10 	vmov	r0, s22
 800371e:	f8a4 7238 	strh.w	r7, [r4, #568]	; 0x238
 8003722:	f7ff fdd1 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1.setXY(0, 136);
 8003726:	2288      	movs	r2, #136	; 0x88
 8003728:	4631      	mov	r1, r6
 800372a:	ee1b 0a90 	vmov	r0, s23
 800372e:	f8c4 8228 	str.w	r8, [r4, #552]	; 0x228
        colorPressed = col;
 8003732:	e9c4 558f 	strd	r5, r5, [r4, #572]	; 0x23c
 8003736:	f7ff fd93 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800373a:	a911      	add	r1, sp, #68	; 0x44
 800373c:	aa12      	add	r2, sp, #72	; 0x48
 800373e:	ee1b 0a90 	vmov	r0, s23
 8003742:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003746:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800374a:	f00a fed5 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800374e:	f04f 0206 	mov.w	r2, #6
        updateTextPosition();
 8003752:	ee1b 0a90 	vmov	r0, s23
 8003756:	f8a4 2280 	strh.w	r2, [r4, #640]	; 0x280
 800375a:	f7ff fdb5 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2.setXY(60, 136);
 800375e:	2288      	movs	r2, #136	; 0x88
 8003760:	213c      	movs	r1, #60	; 0x3c
 8003762:	ee1c 0a10 	vmov	r0, s24
 8003766:	f8c4 8270 	str.w	r8, [r4, #624]	; 0x270
        colorPressed = col;
 800376a:	e9c4 55a1 	strd	r5, r5, [r4, #644]	; 0x284
 800376e:	f7ff fd77 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003772:	a911      	add	r1, sp, #68	; 0x44
 8003774:	aa12      	add	r2, sp, #72	; 0x48
 8003776:	ee1c 0a10 	vmov	r0, s24
 800377a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800377e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003782:	f00a feb9 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003786:	f04f 0207 	mov.w	r2, #7
        updateTextPosition();
 800378a:	ee1c 0a10 	vmov	r0, s24
 800378e:	e00b      	b.n	80037a8 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8003790:	0801f55c 	.word	0x0801f55c
 8003794:	0801e234 	.word	0x0801e234
 8003798:	0801f4b4 	.word	0x0801f4b4
 800379c:	0801e21c 	.word	0x0801e21c
 80037a0:	0800312b 	.word	0x0800312b
 80037a4:	ff570e0e 	.word	0xff570e0e
 80037a8:	f8a4 22c8 	strh.w	r2, [r4, #712]	; 0x2c8
 80037ac:	f7ff fd8c 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3.setXY(120, 136);
 80037b0:	2288      	movs	r2, #136	; 0x88
 80037b2:	2178      	movs	r1, #120	; 0x78
 80037b4:	ee1c 0a90 	vmov	r0, s25
 80037b8:	f8c4 82b8 	str.w	r8, [r4, #696]	; 0x2b8
        colorPressed = col;
 80037bc:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 80037c0:	f7ff fd4e 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037c4:	aa12      	add	r2, sp, #72	; 0x48
 80037c6:	a911      	add	r1, sp, #68	; 0x44
 80037c8:	ee1c 0a90 	vmov	r0, s25
 80037cc:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80037d0:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80037d4:	f00a fe90 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80037d8:	ee1c 0a90 	vmov	r0, s25
 80037dc:	f8a4 a310 	strh.w	sl, [r4, #784]	; 0x310
 80037e0:	f7ff fd72 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear.setXY(0, 196);
 80037e4:	22c4      	movs	r2, #196	; 0xc4
 80037e6:	4631      	mov	r1, r6
 80037e8:	ee1d 0a10 	vmov	r0, s26
 80037ec:	f8c4 8300 	str.w	r8, [r4, #768]	; 0x300
        colorPressed = col;
 80037f0:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 80037f4:	f7ff fd34 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037f8:	aa12      	add	r2, sp, #72	; 0x48
 80037fa:	a911      	add	r1, sp, #68	; 0x44
 80037fc:	ee1d 0a10 	vmov	r0, s26
 8003800:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003804:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003808:	f00a fe76 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800380c:	ee1d 0a10 	vmov	r0, s26
 8003810:	f8a4 9358 	strh.w	r9, [r4, #856]	; 0x358
 8003814:	f7ff fd58 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0.setXY(60, 196);
 8003818:	22c4      	movs	r2, #196	; 0xc4
 800381a:	213c      	movs	r1, #60	; 0x3c
 800381c:	4658      	mov	r0, fp
 800381e:	f8c4 8348 	str.w	r8, [r4, #840]	; 0x348
        colorPressed = col;
 8003822:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
 8003826:	f7ff fd1b 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800382a:	a911      	add	r1, sp, #68	; 0x44
 800382c:	aa12      	add	r2, sp, #72	; 0x48
 800382e:	4658      	mov	r0, fp
 8003830:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003834:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003838:	f00a fe5e 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800383c:	f04f 020a 	mov.w	r2, #10
        updateTextPosition();
 8003840:	4658      	mov	r0, fp
 8003842:	f8a4 23a0 	strh.w	r2, [r4, #928]	; 0x3a0
 8003846:	f7ff fd3f 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend.setXY(120, 196);
 800384a:	22c4      	movs	r2, #196	; 0xc4
 800384c:	2178      	movs	r1, #120	; 0x78
 800384e:	ee1d 0a90 	vmov	r0, s27
 8003852:	f8c4 8390 	str.w	r8, [r4, #912]	; 0x390
        colorPressed = col;
 8003856:	e9c4 55e9 	strd	r5, r5, [r4, #932]	; 0x3a4
 800385a:	f7ff fd01 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800385e:	a911      	add	r1, sp, #68	; 0x44
 8003860:	aa12      	add	r2, sp, #72	; 0x48
 8003862:	ee1d 0a90 	vmov	r0, s27
 8003866:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800386a:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800386e:	f00a fe43 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003872:	f04f 020b 	mov.w	r2, #11
        updateTextPosition();
 8003876:	ee1d 0a90 	vmov	r0, s27
 800387a:	f8a4 23e8 	strh.w	r2, [r4, #1000]	; 0x3e8
 800387e:	f7ff fd23 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSwitch.setXY(180, 196);
 8003882:	22c4      	movs	r2, #196	; 0xc4
 8003884:	21b4      	movs	r1, #180	; 0xb4
 8003886:	ee1f 0a10 	vmov	r0, s30
 800388a:	f8c4 83d8 	str.w	r8, [r4, #984]	; 0x3d8
        colorPressed = col;
 800388e:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 8003892:	f7ff fce5 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSwitch.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 8003896:	aa12      	add	r2, sp, #72	; 0x48
 8003898:	a90f      	add	r1, sp, #60	; 0x3c
 800389a:	ee1f 0a10 	vmov	r0, s30
 800389e:	9200      	str	r2, [sp, #0]
 80038a0:	aa11      	add	r2, sp, #68	; 0x44
 80038a2:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
 80038a6:	4613      	mov	r3, r2
 80038a8:	aa10      	add	r2, sp, #64	; 0x40
 80038aa:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 80038ae:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 80038b2:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 80038b6:	f00b f87c 	bl	800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 80038ba:	f04f 020f 	mov.w	r2, #15
    boxWithBorder1_1.setPosition(247, 5, 121, 82);
 80038be:	2379      	movs	r3, #121	; 0x79
 80038c0:	21f7      	movs	r1, #247	; 0xf7
 80038c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80038c4:	f8a4 2430 	strh.w	r2, [r4, #1072]	; 0x430
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 80038c8:	f04f 0210 	mov.w	r2, #16
 80038cc:	f8c4 8420 	str.w	r8, [r4, #1056]	; 0x420
 80038d0:	f8a4 2432 	strh.w	r2, [r4, #1074]	; 0x432
 80038d4:	2252      	movs	r2, #82	; 0x52
 80038d6:	9200      	str	r2, [sp, #0]
 80038d8:	463a      	mov	r2, r7
 80038da:	f7ff fcce 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 80038de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <_ZN15Screen1ViewBaseC1Ev+0x578>)
    boxWithBorder1.setPosition(372, 5, 100, 82);
 80038e4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80038e8:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 80038ec:	2252      	movs	r2, #82	; 0x52
 80038ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038f0:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
 80038f4:	2364      	movs	r3, #100	; 0x64
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80038f6:	f8a4 7464 	strh.w	r7, [r4, #1124]	; 0x464
 80038fa:	9200      	str	r2, [sp, #0]
 80038fc:	463a      	mov	r2, r7
 80038fe:	f7ff fcbc 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <_ZN15Screen1ViewBaseC1Ev+0x578>)
 8003904:	f8a4 7498 	strh.w	r7, [r4, #1176]	; 0x498
    textAreaFreq.setPosition(255, 40, 104, 35);
 8003908:	2228      	movs	r2, #40	; 0x28
 800390a:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
        borderColor = color;
 800390e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003912:	21ff      	movs	r1, #255	; 0xff
 8003914:	ee1f 0a90 	vmov	r0, s31
 8003918:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 800391c:	2323      	movs	r3, #35	; 0x23
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 800391e:	f504 67de 	add.w	r7, r4, #1776	; 0x6f0
    textAreaFreq.setPosition(255, 40, 104, 35);
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2368      	movs	r3, #104	; 0x68
 8003926:	f7ff fca8 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <_ZN15Screen1ViewBaseC1Ev+0x57c>)
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800392c:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 8003930:	681b      	ldr	r3, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8003932:	f8a4 64d0 	strh.w	r6, [r4, #1232]	; 0x4d0
 8003936:	b92b      	cbnz	r3, 8003944 <_ZN15Screen1ViewBaseC1Ev+0x568>
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <_ZN15Screen1ViewBaseC1Ev+0x580>)
 800393a:	21ae      	movs	r1, #174	; 0xae
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <_ZN15Screen1ViewBaseC1Ev+0x584>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800393e:	4809      	ldr	r0, [pc, #36]	; (8003964 <_ZN15Screen1ViewBaseC1Ev+0x588>)
 8003940:	f018 fcfc 	bl	801c33c <__assert_func>
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <_ZN15Screen1ViewBaseC1Ev+0x58c>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d811      	bhi.n	8003970 <_ZN15Screen1ViewBaseC1Ev+0x594>
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <_ZN15Screen1ViewBaseC1Ev+0x590>)
 800394e:	21af      	movs	r1, #175	; 0xaf
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <_ZN15Screen1ViewBaseC1Ev+0x584>)
 8003952:	e7f4      	b.n	800393e <_ZN15Screen1ViewBaseC1Ev+0x562>
 8003954:	ff570e0e 	.word	0xff570e0e
 8003958:	24006cb8 	.word	0x24006cb8
 800395c:	0801e108 	.word	0x0801e108
 8003960:	0801e14a 	.word	0x0801e14a
 8003964:	0801e178 	.word	0x0801e178
 8003968:	24006cbc 	.word	0x24006cbc
 800396c:	0801e1bf 	.word	0x0801e1bf
        return texts->getText(typedTextId);
 8003970:	4bc8      	ldr	r3, [pc, #800]	; (8003c94 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8003972:	2110      	movs	r1, #16
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	f000 ffb3 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 800397a:	4ac7      	ldr	r2, [pc, #796]	; (8003c98 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 800397c:	4603      	mov	r3, r0
 800397e:	2103      	movs	r1, #3
 8003980:	4638      	mov	r0, r7
 8003982:	f00f fe2f 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003986:	230e      	movs	r3, #14
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 8003988:	f8c4 74d8 	str.w	r7, [r4, #1240]	; 0x4d8
    textAreaFreq.setTypedText(touchgfx::TypedText(T_FREQ));
 800398c:	a912      	add	r1, sp, #72	; 0x48
 800398e:	4fc3      	ldr	r7, [pc, #780]	; (8003c9c <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 8003990:	ee1f 0a90 	vmov	r0, s31
 8003994:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003998:	9712      	str	r7, [sp, #72]	; 0x48
 800399a:	f00a fd6d 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaMI.setPosition(380, 46, 84, 31);
 800399e:	231f      	movs	r3, #31
 80039a0:	222e      	movs	r2, #46	; 0x2e
 80039a2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80039a6:	9803      	ldr	r0, [sp, #12]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2354      	movs	r3, #84	; 0x54
 80039ac:	f7ff fc65 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaMIBuffer, TEXTAREAMI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LXQE).getText());
 80039b0:	f204 62f6 	addw	r2, r4, #1782	; 0x6f6
        this->color = color;
 80039b4:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 80039b8:	920d      	str	r2, [sp, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80039ba:	4ab9      	ldr	r2, [pc, #740]	; (8003ca0 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
        linespace = space;
 80039bc:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 80039c0:	6813      	ldr	r3, [r2, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0b8      	beq.n	8003938 <_ZN15Screen1ViewBaseC1Ev+0x55c>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80039c6:	4ab7      	ldr	r2, [pc, #732]	; (8003ca4 <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 80039c8:	8813      	ldrh	r3, [r2, #0]
 80039ca:	2b11      	cmp	r3, #17
 80039cc:	d9be      	bls.n	800394c <_ZN15Screen1ViewBaseC1Ev+0x570>
        return texts->getText(typedTextId);
 80039ce:	4bb1      	ldr	r3, [pc, #708]	; (8003c94 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 80039d0:	2111      	movs	r1, #17
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	f000 ff84 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 80039d8:	4aaf      	ldr	r2, [pc, #700]	; (8003c98 <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 80039da:	4603      	mov	r3, r0
 80039dc:	2104      	movs	r1, #4
 80039de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039e0:	f00f fe00 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80039e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    textAreaMI.setTypedText(touchgfx::TypedText(T_MI));
 80039e6:	a912      	add	r1, sp, #72	; 0x48
 80039e8:	9803      	ldr	r0, [sp, #12]
 80039ea:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
        : typedTextId(id)
 80039ee:	f04f 030f 	mov.w	r3, #15
 80039f2:	9712      	str	r7, [sp, #72]	; 0x48
 80039f4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039f8:	f00a fd3e 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(402, 15);
 80039fc:	220f      	movs	r2, #15
 80039fe:	9804      	ldr	r0, [sp, #16]
 8003a00:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8003a04:	f7ff fc2c 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8003a08:	230c      	movs	r3, #12
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IO59));
 8003a0a:	a912      	add	r1, sp, #72	; 0x48
 8003a0c:	9804      	ldr	r0, [sp, #16]
        this->color = color;
 8003a0e:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
        linespace = space;
 8003a12:	f8a4 6550 	strh.w	r6, [r4, #1360]	; 0x550
 8003a16:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003a1a:	9712      	str	r7, [sp, #72]	; 0x48
 8003a1c:	f00a fd2c 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2_1.setXY(255, 15);
 8003a20:	220f      	movs	r2, #15
 8003a22:	9805      	ldr	r0, [sp, #20]
 8003a24:	21ff      	movs	r1, #255	; 0xff
 8003a26:	f7ff fc1b 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8003a2a:	230d      	movs	r3, #13
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3GJ));
 8003a2c:	a912      	add	r1, sp, #72	; 0x48
 8003a2e:	9805      	ldr	r0, [sp, #20]
        this->color = color;
 8003a30:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
        linespace = space;
 8003a34:	f8a4 658c 	strh.w	r6, [r4, #1420]	; 0x58c
 8003a38:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003a3c:	9712      	str	r7, [sp, #72]	; 0x48
 8003a3e:	f00a fd1b 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonDot.setXY(180, 136);
 8003a42:	ee1e 0a10 	vmov	r0, s28
 8003a46:	2288      	movs	r2, #136	; 0x88
 8003a48:	21b4      	movs	r1, #180	; 0xb4
 8003a4a:	f04f 0706 	mov.w	r7, #6
 8003a4e:	f7ff fc07 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDot.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003a52:	aa12      	add	r2, sp, #72	; 0x48
 8003a54:	a911      	add	r1, sp, #68	; 0x44
 8003a56:	ee1e 0a10 	vmov	r0, s28
 8003a5a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003a5e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003a62:	f00a fd49 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003a66:	2312      	movs	r3, #18
        updateTextPosition();
 8003a68:	ee1e 0a10 	vmov	r0, s28
 8003a6c:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
 8003a70:	f7ff fc2a 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8003a74:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
        colorPressed = col;
 8003a78:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 8003a7c:	f04f 0507 	mov.w	r5, #7
    toggleButtonFreq.setXY(259, 98);
 8003a80:	9806      	ldr	r0, [sp, #24]
 8003a82:	2262      	movs	r2, #98	; 0x62
 8003a84:	f240 1103 	movw	r1, #259	; 0x103
 8003a88:	f8c4 85bc 	str.w	r8, [r4, #1468]	; 0x5bc
 8003a8c:	f7ff fbe8 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a90:	aa12      	add	r2, sp, #72	; 0x48
 8003a92:	a911      	add	r1, sp, #68	; 0x44
 8003a94:	9806      	ldr	r0, [sp, #24]
        originalPressed = bitmapPressed;
 8003a96:	f8a4 5610 	strh.w	r5, [r4, #1552]	; 0x610
 8003a9a:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 8003a9e:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003aa2:	f00a fd29 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButtonMI.setXY(374, 98);
 8003aa6:	9807      	ldr	r0, [sp, #28]
 8003aa8:	2262      	movs	r2, #98	; 0x62
 8003aaa:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8003aae:	f8c4 8604 	str.w	r8, [r4, #1540]	; 0x604
 8003ab2:	f7ff fbd5 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8003ab6:	aa12      	add	r2, sp, #72	; 0x48
 8003ab8:	a911      	add	r1, sp, #68	; 0x44
 8003aba:	9807      	ldr	r0, [sp, #28]
        originalPressed = bitmapPressed;
 8003abc:	f8a4 5648 	strh.w	r5, [r4, #1608]	; 0x648
 8003ac0:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003ac4:	1d25      	adds	r5, r4, #4
 8003ac6:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003aca:	f00a fd15 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonPower.setXY(244, 202);
 8003ace:	9808      	ldr	r0, [sp, #32]
 8003ad0:	22ca      	movs	r2, #202	; 0xca
 8003ad2:	21f4      	movs	r1, #244	; 0xf4
 8003ad4:	f8c4 863c 	str.w	r8, [r4, #1596]	; 0x63c
 8003ad8:	f7ff fbc2 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8003adc:	f04f 020a 	mov.w	r2, #10
    buttonPower.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 8003ae0:	ab12      	add	r3, sp, #72	; 0x48
 8003ae2:	a90f      	add	r1, sp, #60	; 0x3c
 8003ae4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8003ae8:	f04f 020b 	mov.w	r2, #11
 8003aec:	9808      	ldr	r0, [sp, #32]
 8003aee:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8003af2:	f04f 0204 	mov.w	r2, #4
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003afc:	f04f 0201 	mov.w	r2, #1
 8003b00:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003b04:	aa11      	add	r2, sp, #68	; 0x44
 8003b06:	4613      	mov	r3, r2
 8003b08:	aa10      	add	r2, sp, #64	; 0x40
 8003b0a:	f00a ff52 	bl	800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003b0e:	2347      	movs	r3, #71	; 0x47
        iconY = y;
 8003b10:	f04f 0210 	mov.w	r2, #16
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 8003b14:	a912      	add	r1, sp, #72	; 0x48
 8003b16:	ee1e 0a90 	vmov	r0, s29
        iconX = x;
 8003b1a:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
        iconY = y;
 8003b1e:	f8a4 2686 	strh.w	r2, [r4, #1670]	; 0x686
 8003b22:	f8c4 8674 	str.w	r8, [r4, #1652]	; 0x674
 8003b26:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8003b2a:	f00b f80c 	bl	800eb46 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(241, 9, 2, 250);
 8003b2e:	23fa      	movs	r3, #250	; 0xfa
 8003b30:	464a      	mov	r2, r9
 8003b32:	ee1e 0a90 	vmov	r0, s29
 8003b36:	21f1      	movs	r1, #241	; 0xf1
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	f7ff fb9d 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003b40:	4631      	mov	r1, r6
 8003b42:	ee1e 0a90 	vmov	r0, s29
 8003b46:	f00a f872 	bl	800dc2e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    button2Direct.setXY(416, 202);
 8003b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b4c:	22ca      	movs	r2, #202	; 0xca
 8003b4e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003b52:	f7ff fb85 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8003b56:	f04f 0203 	mov.w	r2, #3
    button2Direct.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
 8003b5a:	ab12      	add	r3, sp, #72	; 0x48
 8003b5c:	a90f      	add	r1, sp, #60	; 0x3c
 8003b5e:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003b62:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003b66:	aa11      	add	r2, sp, #68	; 0x44
 8003b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	aa10      	add	r2, sp, #64	; 0x40
 8003b70:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003b74:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003b78:	f00a ff1b 	bl	800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003b7c:	2316      	movs	r3, #22
 8003b7e:	ee18 1a10 	vmov	r1, s16
 8003b82:	4628      	mov	r0, r5
 8003b84:	f8c4 86dc 	str.w	r8, [r4, #1756]	; 0x6dc
 8003b88:	f8a4 36ec 	strh.w	r3, [r4, #1772]	; 0x6ec
        iconY = y;
 8003b8c:	f04f 030f 	mov.w	r3, #15
 8003b90:	f8a4 36ee 	strh.w	r3, [r4, #1774]	; 0x6ee
 8003b94:	f008 fdbe 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f008 fdba 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ba0:	ee18 1a90 	vmov	r1, s17
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f008 fdb5 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003baa:	ee19 1a10 	vmov	r1, s18
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f008 fdb0 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bb4:	ee19 1a90 	vmov	r1, s19
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f008 fdab 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bbe:	ee1a 1a10 	vmov	r1, s20
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f008 fda6 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bc8:	ee1a 1a90 	vmov	r1, s21
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f008 fda1 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bd2:	ee1b 1a10 	vmov	r1, s22
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f008 fd9c 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bdc:	ee1b 1a90 	vmov	r1, s23
 8003be0:	4628      	mov	r0, r5
 8003be2:	f008 fd97 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003be6:	ee1c 1a10 	vmov	r1, s24
 8003bea:	4628      	mov	r0, r5
 8003bec:	f008 fd92 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bf0:	ee1c 1a90 	vmov	r1, s25
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f008 fd8d 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bfa:	ee1d 1a10 	vmov	r1, s26
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f008 fd88 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c04:	4659      	mov	r1, fp
 8003c06:	4628      	mov	r0, r5
 8003c08:	f008 fd84 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c0c:	ee1d 1a90 	vmov	r1, s27
 8003c10:	4628      	mov	r0, r5
 8003c12:	f008 fd7f 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c16:	ee1f 1a10 	vmov	r1, s30
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f008 fd7a 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c22:	4628      	mov	r0, r5
 8003c24:	f008 fd76 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f008 fd72 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c30:	ee1f 1a90 	vmov	r1, s31
 8003c34:	4628      	mov	r0, r5
 8003c36:	f008 fd6d 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c3a:	9903      	ldr	r1, [sp, #12]
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f008 fd69 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c42:	9904      	ldr	r1, [sp, #16]
 8003c44:	4628      	mov	r0, r5
 8003c46:	f008 fd65 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c4a:	9905      	ldr	r1, [sp, #20]
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f008 fd61 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c52:	ee1e 1a10 	vmov	r1, s28
 8003c56:	4628      	mov	r0, r5
 8003c58:	f008 fd5c 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c5c:	9906      	ldr	r1, [sp, #24]
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f008 fd58 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c64:	9907      	ldr	r1, [sp, #28]
 8003c66:	4628      	mov	r0, r5
 8003c68:	f008 fd54 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c6c:	9908      	ldr	r1, [sp, #32]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f008 fd50 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c74:	ee1e 1a90 	vmov	r1, s29
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f008 fd4b 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c82:	f008 fd47 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003c86:	4620      	mov	r0, r4
 8003c88:	b015      	add	sp, #84	; 0x54
 8003c8a:	ecbd 8b10 	vpop	{d8-d15}
 8003c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	24006cc4 	.word	0x24006cc4
 8003c98:	0801e211 	.word	0x0801e211
 8003c9c:	0801dc04 	.word	0x0801dc04
 8003ca0:	24006cb8 	.word	0x24006cb8
 8003ca4:	24006cbc 	.word	0x24006cbc

08003ca8 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8003ca8:	4770      	bx	lr

08003caa <_ZN15Screen2ViewBase17button7_p2ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button7_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003caa:	4770      	bx	lr

08003cac <_ZN15Screen2ViewBase17button8_p2ClickedEv>:

    virtual void button8_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cac:	4770      	bx	lr

08003cae <_ZN15Screen2ViewBase17button9_p2ClickedEv>:

    virtual void button9_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cae:	4770      	bx	lr

08003cb0 <_ZN15Screen2ViewBase17button4_p2ClickedEv>:

    virtual void button4_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN15Screen2ViewBase17button5_p2ClickedEv>:

    virtual void button5_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN15Screen2ViewBase17button6_p2ClickedEv>:

    virtual void button6_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cb4:	4770      	bx	lr

08003cb6 <_ZN15Screen2ViewBase17button1_p2ClickedEv>:

    virtual void button1_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cb6:	4770      	bx	lr

08003cb8 <_ZN15Screen2ViewBase17button2_p2ClickedEv>:

    virtual void button2_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cb8:	4770      	bx	lr

08003cba <_ZN15Screen2ViewBase17button3_p2ClickedEv>:

    virtual void button3_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cba:	4770      	bx	lr

08003cbc <_ZN15Screen2ViewBase21buttonClear_p2ClickedEv>:

    virtual void buttonClear_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cbc:	4770      	bx	lr

08003cbe <_ZN15Screen2ViewBase17button0_p2ClickedEv>:

    virtual void button0_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cbe:	4770      	bx	lr

08003cc0 <_ZN15Screen2ViewBase20buttonSend_p2ClickedEv>:

    virtual void buttonSend_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN15Screen2ViewBase21buttonPower_p2ClickedEv>:

    virtual void buttonPower_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN15Screen2ViewBase20button2ManualClickedEv>:

    virtual void button2ManualClicked()
    {
        // Override and implement this function in Screen2
    }
 8003cc4:	4770      	bx	lr

08003cc6 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8003cc6:	4770      	bx	lr

08003cc8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003cc8:	4770      	bx	lr

08003cca <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003cca:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003ccc:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003cce:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003cd0:	68c2      	ldr	r2, [r0, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	1055      	asrs	r5, r2, #1
 8003cd6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003cda:	07d2      	lsls	r2, r2, #31
 8003cdc:	bf48      	it	mi
 8003cde:	5962      	ldrmi	r2, [r4, r5]
    }
 8003ce0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003ce2:	bf48      	it	mi
 8003ce4:	58d3      	ldrmi	r3, [r2, r3]
 8003ce6:	4718      	bx	r3

08003ce8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003ce8:	6843      	ldr	r3, [r0, #4]
 8003cea:	b12b      	cbz	r3, 8003cf8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003cec:	6883      	ldr	r3, [r0, #8]
 8003cee:	b92b      	cbnz	r3, 8003cfc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003cf0:	68c0      	ldr	r0, [r0, #12]
 8003cf2:	f000 0001 	and.w	r0, r0, #1
 8003cf6:	4770      	bx	lr
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	4770      	bx	lr
 8003cfc:	2001      	movs	r0, #1
    }
 8003cfe:	4770      	bx	lr

08003d00 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4604      	mov	r4, r0
 8003d04:	2110      	movs	r1, #16
 8003d06:	f018 fa03 	bl	801c110 <_ZdlPvj>
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	bd10      	pop	{r4, pc}

08003d0e <_ZN15Screen2ViewBaseD0Ev>:
    virtual ~Screen2ViewBase() {}
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	4604      	mov	r4, r0
 8003d12:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003d16:	f018 f9fb 	bl	801c110 <_ZdlPvj>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	bd10      	pop	{r4, pc}

08003d1e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button2Manual_p2)
 8003d1e:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8003d22:	4299      	cmp	r1, r3
{
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4604      	mov	r4, r0
    if (&src == &button2Manual_p2)
 8003d28:	d107      	bne.n	8003d3a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003d2a:	f00c fd45 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When button2Manual_p2 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8003d2e:	f7fe ffa7 	bl	8002c80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

        //button2ManualClicked
        //When button2Manual_p2 clicked call virtual function
        //Call button2ManualClicked
        button2ManualClicked();
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    else if (&src == &buttonPower_p2)
    {
        //buttonPower_p2Clicked
        //When buttonPower_p2 clicked call virtual function
        //Call buttonPower_p2Clicked
        buttonPower_p2Clicked();
 8003d36:	4620      	mov	r0, r4
 8003d38:	e005      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button7_p2)
 8003d3a:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	d104      	bne.n	8003d4c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
        button7_p2Clicked();
 8003d42:	6803      	ldr	r3, [r0, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 8003d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonPower_p2Clicked();
 8003d4a:	4718      	bx	r3
    else if (&src == &button8_p2)
 8003d4c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003d50:	4299      	cmp	r1, r3
 8003d52:	d102      	bne.n	8003d5a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        button8_p2Clicked();
 8003d54:	6803      	ldr	r3, [r0, #0]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	e7f5      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button9_p2)
 8003d5a:	f500 73b2 	add.w	r3, r0, #356	; 0x164
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	d102      	bne.n	8003d68 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        button9_p2Clicked();
 8003d62:	6803      	ldr	r3, [r0, #0]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	e7ee      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button4_p2)
 8003d68:	f500 73d6 	add.w	r3, r0, #428	; 0x1ac
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	d102      	bne.n	8003d76 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        button4_p2Clicked();
 8003d70:	6803      	ldr	r3, [r0, #0]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	e7e7      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button5_p2)
 8003d76:	f500 73fa 	add.w	r3, r0, #500	; 0x1f4
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d102      	bne.n	8003d84 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
        button5_p2Clicked();
 8003d7e:	6803      	ldr	r3, [r0, #0]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	e7e0      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button6_p2)
 8003d84:	f500 730f 	add.w	r3, r0, #572	; 0x23c
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d102      	bne.n	8003d92 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
        button6_p2Clicked();
 8003d8c:	6803      	ldr	r3, [r0, #0]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	e7d9      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button1_p2)
 8003d92:	f500 7321 	add.w	r3, r0, #644	; 0x284
 8003d96:	4299      	cmp	r1, r3
 8003d98:	d102      	bne.n	8003da0 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x82>
        button1_p2Clicked();
 8003d9a:	6803      	ldr	r3, [r0, #0]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	e7d2      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button2_p2)
 8003da0:	f500 7333 	add.w	r3, r0, #716	; 0x2cc
 8003da4:	4299      	cmp	r1, r3
 8003da6:	d102      	bne.n	8003dae <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
        button2_p2Clicked();
 8003da8:	6803      	ldr	r3, [r0, #0]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	e7cb      	b.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button3_p2)
 8003dae:	f500 7345 	add.w	r3, r0, #788	; 0x314
 8003db2:	4299      	cmp	r1, r3
 8003db4:	d102      	bne.n	8003dbc <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        button3_p2Clicked();
 8003db6:	6803      	ldr	r3, [r0, #0]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	e7bc      	b.n	8003d36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonClear_p2)
 8003dbc:	f500 7357 	add.w	r3, r0, #860	; 0x35c
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	d102      	bne.n	8003dca <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
        buttonClear_p2Clicked();
 8003dc4:	6803      	ldr	r3, [r0, #0]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	e7b5      	b.n	8003d36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &button0_p2)
 8003dca:	f500 7369 	add.w	r3, r0, #932	; 0x3a4
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	d102      	bne.n	8003dd8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xba>
        button0_p2Clicked();
 8003dd2:	6803      	ldr	r3, [r0, #0]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	e7ae      	b.n	8003d36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonSend_p2)
 8003dd8:	f500 737b 	add.w	r3, r0, #1004	; 0x3ec
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	d102      	bne.n	8003de6 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
        buttonSend_p2Clicked();
 8003de0:	6803      	ldr	r3, [r0, #0]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	e7a7      	b.n	8003d36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonPower_p2)
 8003de6:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
 8003dea:	4299      	cmp	r1, r3
 8003dec:	d102      	bne.n	8003df4 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        buttonPower_p2Clicked();
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	e7a0      	b.n	8003d36 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
}
 8003df4:	bd10      	pop	{r4, pc}
	...

08003df8 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	f04f 0a00 	mov.w	sl, #0
        : Box(), borderColor(0), borderSize(0)
 8003e02:	4eeb      	ldr	r6, [pc, #940]	; (80041b0 <_ZN15Screen2ViewBaseC1Ev+0x3b8>)
 8003e04:	2708      	movs	r7, #8
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003e06:	f504 7b69 	add.w	fp, r4, #932	; 0x3a4
        : TextArea(), wildcard(0)
 8003e0a:	4dea      	ldr	r5, [pc, #936]	; (80041b4 <_ZN15Screen2ViewBaseC1Ev+0x3bc>)
 8003e0c:	f04f 0802 	mov.w	r8, #2
    button2Manual_p2.setAction(buttonCallback);
 8003e10:	f504 69c2 	add.w	r9, r4, #1552	; 0x610
Screen2ViewBase::Screen2ViewBase() :
 8003e14:	ed2d 8b10 	vpush	{d8-d15}
 8003e18:	b08f      	sub	sp, #60	; 0x3c
 8003e1a:	f00d ff0f 	bl	8011c3c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4be5      	ldr	r3, [pc, #916]	; (80041b8 <_ZN15Screen2ViewBaseC1Ev+0x3c0>)
 8003e22:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
 8003e26:	f842 3b40 	str.w	r3, [r2], #64
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	ee08 2a10 	vmov	s16, r2
 8003e30:	f7ff fa36 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003e34:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003e38:	4618      	mov	r0, r3
 8003e3a:	9305      	str	r3, [sp, #20]
 8003e3c:	f7ff fa30 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003e40:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003e44:	4618      	mov	r0, r3
 8003e46:	ee0e 3a90 	vmov	s29, r3
 8003e4a:	f00a fe55 	bl	800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003e4e:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8003e52:	4618      	mov	r0, r3
 8003e54:	ee08 3a90 	vmov	s17, r3
 8003e58:	f00a ffba 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e5c:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8003e60:	4618      	mov	r0, r3
 8003e62:	ee09 3a10 	vmov	s18, r3
 8003e66:	f00a ffb3 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e6a:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003e6e:	4618      	mov	r0, r3
 8003e70:	ee09 3a90 	vmov	s19, r3
 8003e74:	f00a ffac 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e78:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	ee0a 3a10 	vmov	s20, r3
 8003e82:	f00a ffa5 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e86:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	ee0a 3a90 	vmov	s21, r3
 8003e90:	f00a ff9e 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e94:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003e98:	4618      	mov	r0, r3
 8003e9a:	ee0b 3a10 	vmov	s22, r3
 8003e9e:	f00a ff97 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ea2:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	ee0b 3a90 	vmov	s23, r3
 8003eac:	f00a ff90 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eb0:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	ee0c 3a10 	vmov	s24, r3
 8003eba:	f00a ff89 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ebe:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	ee0c 3a90 	vmov	s25, r3
 8003ec8:	f00a ff82 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ecc:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	ee0d 3a10 	vmov	s26, r3
 8003ed6:	f00a ff7b 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eda:	4658      	mov	r0, fp
 8003edc:	f00a ff78 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ee0:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	ee0d 3a90 	vmov	s27, r3
 8003eea:	f00a ff71 	bl	800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eee:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003ef2:	a90c      	add	r1, sp, #48	; 0x30
 8003ef4:	ee0e 3a10 	vmov	s28, r3
 8003ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003efc:	ee1e 0a10 	vmov	r0, s28
 8003f00:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003f04:	f009 fecc 	bl	800dca0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003f08:	f504 638c 	add.w	r3, r4, #1120	; 0x460
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	9306      	str	r3, [sp, #24]
 8003f10:	f7ff f9c6 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003f14:	f204 4394 	addw	r3, r4, #1172	; 0x494
 8003f18:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f8c4 a48c 	str.w	sl, [r4, #1164]	; 0x48c
 8003f22:	f8a4 a490 	strh.w	sl, [r4, #1168]	; 0x490
 8003f26:	ee0f 3a10 	vmov	s30, r3
 8003f2a:	f7ff fa1d 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003f2e:	f204 43d4 	addw	r3, r4, #1236	; 0x4d4
 8003f32:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
 8003f36:	4618      	mov	r0, r3
 8003f38:	f8c4 a4d0 	str.w	sl, [r4, #1232]	; 0x4d0
 8003f3c:	ee0f 3a90 	vmov	s31, r3
 8003f40:	f7ff fa12 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003f44:	f504 63a2 	add.w	r3, r4, #1296	; 0x510
 8003f48:	4618      	mov	r0, r3
 8003f4a:	9307      	str	r3, [sp, #28]
 8003f4c:	f7ff f9a8 	bl	80032a0 <_ZN8touchgfx3BoxC1Ev>
 8003f50:	f204 5344 	addw	r3, r4, #1348	; 0x544
 8003f54:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
 8003f58:	2609      	movs	r6, #9
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f8c4 a53c 	str.w	sl, [r4, #1340]	; 0x53c
 8003f60:	f8a4 a540 	strh.w	sl, [r4, #1344]	; 0x540
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	f7ff f9ff 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003f6a:	f204 5384 	addw	r3, r4, #1412	; 0x584
 8003f6e:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
 8003f72:	f8c4 a580 	str.w	sl, [r4, #1408]	; 0x580
    __background.setPosition(0, 0, 480, 272);
 8003f76:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	f7ff f9f3 	bl	8003368 <_ZN8touchgfx8TextAreaC1Ev>
 8003f82:	f504 63b8 	add.w	r3, r4, #1472	; 0x5c0
 8003f86:	4618      	mov	r0, r3
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	f00a fdb5 	bl	800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003f8e:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <_ZN15Screen2ViewBaseC1Ev+0x3c4>)
    __background.setPosition(0, 0, 480, 272);
 8003f90:	4652      	mov	r2, sl
 8003f92:	4651      	mov	r1, sl
 8003f94:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
 8003f98:	ee18 0a10 	vmov	r0, s16
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <_ZN15Screen2ViewBaseC1Ev+0x3c8>)
 8003f9e:	9500      	str	r5, [sp, #0]
 8003fa0:	f8c4 3618 	str.w	r3, [r4, #1560]	; 0x618
 8003fa4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003fa8:	f8c4 4614 	str.w	r4, [r4, #1556]	; 0x614
 8003fac:	f8c4 a61c 	str.w	sl, [r4, #1564]	; 0x61c
 8003fb0:	f7ff f963 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003fb4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8003fb8:	4652      	mov	r2, sl
 8003fba:	4651      	mov	r1, sl
 8003fbc:	9805      	ldr	r0, [sp, #20]
 8003fbe:	66a3      	str	r3, [r4, #104]	; 0x68
 8003fc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003fc4:	9500      	str	r5, [sp, #0]
        color = col;
 8003fc6:	f04f 35ff 	mov.w	r5, #4294967295
 8003fca:	f7ff f956 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <_ZN15Screen2ViewBaseC1Ev+0x3cc>)
    button2Manual_p2.setXY(4, 202);
 8003fd0:	22ca      	movs	r2, #202	; 0xca
 8003fd2:	2104      	movs	r1, #4
 8003fd4:	ee1e 0a90 	vmov	r0, s29
 8003fd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003fdc:	f7ff f940 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button2Manual_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 8003fe0:	aa0c      	add	r2, sp, #48	; 0x30
 8003fe2:	a909      	add	r1, sp, #36	; 0x24
 8003fe4:	ee1e 0a90 	vmov	r0, s29
 8003fe8:	9200      	str	r2, [sp, #0]
 8003fea:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fec:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	aa0a      	add	r2, sp, #40	; 0x28
 8003ff4:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8003ff8:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8003ffc:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8004000:	f00a fcd7 	bl	800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8004004:	230f      	movs	r3, #15
        iconX = x;
 8004006:	f04f 0216 	mov.w	r2, #22
    button7_p2.setXY(283, 16);
 800400a:	f240 111b 	movw	r1, #283	; 0x11b
 800400e:	ee18 0a90 	vmov	r0, s17
        iconY = y;
 8004012:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
        iconX = x;
 8004016:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 800401a:	2210      	movs	r2, #16
 800401c:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
 8004020:	f7ff f91e 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button7_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004024:	a90c      	add	r1, sp, #48	; 0x30
 8004026:	ee18 0a90 	vmov	r0, s17
 800402a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800402e:	460a      	mov	r2, r1
 8004030:	a90b      	add	r1, sp, #44	; 0x2c
 8004032:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004036:	f00a fa5f 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800403a:	2313      	movs	r3, #19
        updateTextPosition();
 800403c:	ee18 0a90 	vmov	r0, s17
 8004040:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
 8004044:	f7ff f940 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8_p2.setXY(343, 16);
 8004048:	2210      	movs	r2, #16
 800404a:	f240 1157 	movw	r1, #343	; 0x157
 800404e:	ee19 0a10 	vmov	r0, s18
 8004052:	f8c4 90fc 	str.w	r9, [r4, #252]	; 0xfc
        colorPressed = col;
 8004056:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
 800405a:	f7ff f901 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button8_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800405e:	a90c      	add	r1, sp, #48	; 0x30
 8004060:	ee19 0a10 	vmov	r0, s18
 8004064:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004068:	460a      	mov	r2, r1
 800406a:	a90b      	add	r1, sp, #44	; 0x2c
 800406c:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004070:	f00a fa42 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004074:	2314      	movs	r3, #20
        updateTextPosition();
 8004076:	ee19 0a10 	vmov	r0, s18
 800407a:	f8a4 3154 	strh.w	r3, [r4, #340]	; 0x154
 800407e:	f7ff f923 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9_p2.setXY(403, 16);
 8004082:	2210      	movs	r2, #16
 8004084:	f240 1193 	movw	r1, #403	; 0x193
 8004088:	ee19 0a90 	vmov	r0, s19
 800408c:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
        colorPressed = col;
 8004090:	e9c4 5556 	strd	r5, r5, [r4, #344]	; 0x158
 8004094:	f7ff f8e4 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button9_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004098:	a90c      	add	r1, sp, #48	; 0x30
 800409a:	ee19 0a90 	vmov	r0, s19
 800409e:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80040a2:	460a      	mov	r2, r1
 80040a4:	a90b      	add	r1, sp, #44	; 0x2c
 80040a6:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80040aa:	f00a fa25 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040ae:	2315      	movs	r3, #21
        updateTextPosition();
 80040b0:	ee19 0a90 	vmov	r0, s19
 80040b4:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
 80040b8:	f7ff f906 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4_p2.setXY(283, 76);
 80040bc:	224c      	movs	r2, #76	; 0x4c
 80040be:	f240 111b 	movw	r1, #283	; 0x11b
 80040c2:	ee1a 0a10 	vmov	r0, s20
 80040c6:	f8c4 918c 	str.w	r9, [r4, #396]	; 0x18c
        colorPressed = col;
 80040ca:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
 80040ce:	f7ff f8c7 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button4_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040d2:	a90c      	add	r1, sp, #48	; 0x30
 80040d4:	ee1a 0a10 	vmov	r0, s20
 80040d8:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80040dc:	460a      	mov	r2, r1
 80040de:	a90b      	add	r1, sp, #44	; 0x2c
 80040e0:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80040e4:	f00a fa08 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040e8:	f04f 0216 	mov.w	r2, #22
        updateTextPosition();
 80040ec:	ee1a 0a10 	vmov	r0, s20
 80040f0:	f8a4 21e4 	strh.w	r2, [r4, #484]	; 0x1e4
 80040f4:	f7ff f8e8 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5_p2.setXY(343, 76);
 80040f8:	224c      	movs	r2, #76	; 0x4c
 80040fa:	f240 1157 	movw	r1, #343	; 0x157
 80040fe:	ee1a 0a90 	vmov	r0, s21
 8004102:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
        colorPressed = col;
 8004106:	e9c4 557a 	strd	r5, r5, [r4, #488]	; 0x1e8
 800410a:	f7ff f8a9 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button5_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800410e:	aa0c      	add	r2, sp, #48	; 0x30
 8004110:	a90b      	add	r1, sp, #44	; 0x2c
 8004112:	ee1a 0a90 	vmov	r0, s21
 8004116:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800411a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800411e:	f00a f9eb 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004122:	2317      	movs	r3, #23
        updateTextPosition();
 8004124:	ee1a 0a90 	vmov	r0, s21
 8004128:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
 800412c:	f7ff f8cc 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6_p2.setXY(403, 76);
 8004130:	224c      	movs	r2, #76	; 0x4c
 8004132:	f240 1193 	movw	r1, #403	; 0x193
 8004136:	ee1b 0a10 	vmov	r0, s22
 800413a:	f8c4 921c 	str.w	r9, [r4, #540]	; 0x21c
        colorPressed = col;
 800413e:	e9c4 558c 	strd	r5, r5, [r4, #560]	; 0x230
 8004142:	f7ff f88d 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button6_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004146:	aa0c      	add	r2, sp, #48	; 0x30
 8004148:	a90b      	add	r1, sp, #44	; 0x2c
 800414a:	ee1b 0a10 	vmov	r0, s22
 800414e:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004152:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004156:	f00a f9cf 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800415a:	2318      	movs	r3, #24
        updateTextPosition();
 800415c:	ee1b 0a10 	vmov	r0, s22
 8004160:	f8a4 3274 	strh.w	r3, [r4, #628]	; 0x274
 8004164:	f7ff f8b0 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1_p2.setXY(283, 136);
 8004168:	2288      	movs	r2, #136	; 0x88
 800416a:	f240 111b 	movw	r1, #283	; 0x11b
 800416e:	ee1b 0a90 	vmov	r0, s23
 8004172:	f8c4 9264 	str.w	r9, [r4, #612]	; 0x264
        colorPressed = col;
 8004176:	e9c4 559e 	strd	r5, r5, [r4, #632]	; 0x278
 800417a:	f7ff f871 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button1_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800417e:	aa0c      	add	r2, sp, #48	; 0x30
 8004180:	a90b      	add	r1, sp, #44	; 0x2c
 8004182:	ee1b 0a90 	vmov	r0, s23
 8004186:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800418a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800418e:	f00a f9b3 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004192:	2319      	movs	r3, #25
        updateTextPosition();
 8004194:	ee1b 0a90 	vmov	r0, s23
 8004198:	f8a4 32bc 	strh.w	r3, [r4, #700]	; 0x2bc
 800419c:	f7ff f894 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2_p2.setXY(343, 136);
 80041a0:	2288      	movs	r2, #136	; 0x88
 80041a2:	f240 1157 	movw	r1, #343	; 0x157
 80041a6:	ee1c 0a10 	vmov	r0, s24
 80041aa:	f8c4 92ac 	str.w	r9, [r4, #684]	; 0x2ac
 80041ae:	e00b      	b.n	80041c8 <_ZN15Screen2ViewBaseC1Ev+0x3d0>
 80041b0:	0801f55c 	.word	0x0801f55c
 80041b4:	0801f4b4 	.word	0x0801f4b4
 80041b8:	0801e2c8 	.word	0x0801e2c8
 80041bc:	0801e2b0 	.word	0x0801e2b0
 80041c0:	08003d1f 	.word	0x08003d1f
 80041c4:	ff570e0e 	.word	0xff570e0e
        colorPressed = col;
 80041c8:	e9c4 55b0 	strd	r5, r5, [r4, #704]	; 0x2c0
 80041cc:	f7ff f848 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button2_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041d0:	a90b      	add	r1, sp, #44	; 0x2c
 80041d2:	aa0c      	add	r2, sp, #48	; 0x30
 80041d4:	ee1c 0a10 	vmov	r0, s24
 80041d8:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80041dc:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80041e0:	f00a f98a 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80041e4:	f04f 021a 	mov.w	r2, #26
        updateTextPosition();
 80041e8:	ee1c 0a10 	vmov	r0, s24
 80041ec:	f8a4 2304 	strh.w	r2, [r4, #772]	; 0x304
 80041f0:	f7ff f86a 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3_p2.setXY(403, 136);
 80041f4:	2288      	movs	r2, #136	; 0x88
 80041f6:	f240 1193 	movw	r1, #403	; 0x193
 80041fa:	ee1c 0a90 	vmov	r0, s25
 80041fe:	f8c4 92f4 	str.w	r9, [r4, #756]	; 0x2f4
        colorPressed = col;
 8004202:	e9c4 55c2 	strd	r5, r5, [r4, #776]	; 0x308
 8004206:	f7ff f82b 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button3_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800420a:	aa0c      	add	r2, sp, #48	; 0x30
 800420c:	a90b      	add	r1, sp, #44	; 0x2c
 800420e:	ee1c 0a90 	vmov	r0, s25
 8004212:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004216:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800421a:	f00a f96d 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800421e:	231b      	movs	r3, #27
        updateTextPosition();
 8004220:	ee1c 0a90 	vmov	r0, s25
 8004224:	f8a4 334c 	strh.w	r3, [r4, #844]	; 0x34c
 8004228:	f7ff f84e 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear_p2.setXY(283, 196);
 800422c:	22c4      	movs	r2, #196	; 0xc4
 800422e:	f240 111b 	movw	r1, #283	; 0x11b
 8004232:	ee1d 0a10 	vmov	r0, s26
 8004236:	f8c4 933c 	str.w	r9, [r4, #828]	; 0x33c
        colorPressed = col;
 800423a:	e9c4 55d4 	strd	r5, r5, [r4, #848]	; 0x350
 800423e:	f7ff f80f 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004242:	aa0c      	add	r2, sp, #48	; 0x30
 8004244:	a90b      	add	r1, sp, #44	; 0x2c
 8004246:	ee1d 0a10 	vmov	r0, s26
 800424a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800424e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004252:	f00a f951 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004256:	231c      	movs	r3, #28
        updateTextPosition();
 8004258:	ee1d 0a10 	vmov	r0, s26
 800425c:	f8a4 3394 	strh.w	r3, [r4, #916]	; 0x394
 8004260:	f7ff f832 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0_p2.setXY(343, 196);
 8004264:	22c4      	movs	r2, #196	; 0xc4
 8004266:	f240 1157 	movw	r1, #343	; 0x157
 800426a:	4658      	mov	r0, fp
 800426c:	f8c4 9384 	str.w	r9, [r4, #900]	; 0x384
        colorPressed = col;
 8004270:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
 8004274:	f7fe fff4 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    button0_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004278:	aa0c      	add	r2, sp, #48	; 0x30
 800427a:	a90b      	add	r1, sp, #44	; 0x2c
 800427c:	4658      	mov	r0, fp
 800427e:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004282:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004286:	f00a f937 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800428a:	231d      	movs	r3, #29
        updateTextPosition();
 800428c:	4658      	mov	r0, fp
 800428e:	f8a4 33dc 	strh.w	r3, [r4, #988]	; 0x3dc
 8004292:	f7ff f819 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend_p2.setXY(403, 196);
 8004296:	22c4      	movs	r2, #196	; 0xc4
 8004298:	f240 1193 	movw	r1, #403	; 0x193
 800429c:	ee1d 0a90 	vmov	r0, s27
 80042a0:	f8c4 93cc 	str.w	r9, [r4, #972]	; 0x3cc
        colorPressed = col;
 80042a4:	e9c4 55f8 	strd	r5, r5, [r4, #992]	; 0x3e0
 80042a8:	f7fe ffda 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80042ac:	aa0c      	add	r2, sp, #48	; 0x30
 80042ae:	a90b      	add	r1, sp, #44	; 0x2c
 80042b0:	ee1d 0a90 	vmov	r0, s27
 80042b4:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
        borderSize = size;
 80042b8:	2705      	movs	r7, #5
 80042ba:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80042be:	f00a f91b 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80042c2:	231e      	movs	r3, #30
        updateTextPosition();
 80042c4:	ee1d 0a90 	vmov	r0, s27
 80042c8:	f8a4 3424 	strh.w	r3, [r4, #1060]	; 0x424
 80042cc:	f7fe fffc 	bl	80032c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 80042d0:	a90c      	add	r1, sp, #48	; 0x30
 80042d2:	ee1e 0a10 	vmov	r0, s28
        color = col;
 80042d6:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
        colorPressed = col;
 80042da:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
 80042de:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
 80042e2:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 80042e6:	f00a fc2e 	bl	800eb46 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(258, 9, 2, 250);
 80042ea:	23fa      	movs	r3, #250	; 0xfa
 80042ec:	4632      	mov	r2, r6
 80042ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 80042f2:	ee1e 0a10 	vmov	r0, s28
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4643      	mov	r3, r8
 80042fa:	f7fe ffbe 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80042fe:	4651      	mov	r1, sl
 8004300:	ee1e 0a10 	vmov	r0, s28
    textAreaSRPM.setPosition(12, 51, 104, 35);
 8004304:	f04f 0823 	mov.w	r8, #35	; 0x23
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004308:	f009 fc91 	bl	800dc2e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 800430c:	2252      	movs	r2, #82	; 0x52
 800430e:	2379      	movs	r3, #121	; 0x79
 8004310:	2104      	movs	r1, #4
 8004312:	9806      	ldr	r0, [sp, #24]
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 8004314:	f204 56fc 	addw	r6, r4, #1532	; 0x5fc
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 8004318:	9200      	str	r2, [sp, #0]
 800431a:	2210      	movs	r2, #16
 800431c:	f7fe ffad 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004320:	4b98      	ldr	r3, [pc, #608]	; (8004584 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaSRPM.setPosition(12, 51, 104, 35);
 8004322:	2233      	movs	r2, #51	; 0x33
 8004324:	210c      	movs	r1, #12
 8004326:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
        borderColor = color;
 800432a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800432e:	ee1f 0a10 	vmov	r0, s30
        borderSize = size;
 8004332:	f8a4 7490 	strh.w	r7, [r4, #1168]	; 0x490
        borderColor = color;
 8004336:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
 800433a:	2368      	movs	r3, #104	; 0x68
 800433c:	f8cd 8000 	str.w	r8, [sp]
 8004340:	f7fe ff9b 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 8004346:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
 800434a:	681b      	ldr	r3, [r3, #0]
        linespace = space;
 800434c:	f8a4 a4c8 	strh.w	sl, [r4, #1224]	; 0x4c8
 8004350:	b92b      	cbnz	r3, 800435e <_ZN15Screen2ViewBaseC1Ev+0x566>
 8004352:	4b8e      	ldr	r3, [pc, #568]	; (800458c <_ZN15Screen2ViewBaseC1Ev+0x794>)
 8004354:	21ae      	movs	r1, #174	; 0xae
 8004356:	4a8e      	ldr	r2, [pc, #568]	; (8004590 <_ZN15Screen2ViewBaseC1Ev+0x798>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8004358:	488e      	ldr	r0, [pc, #568]	; (8004594 <_ZN15Screen2ViewBaseC1Ev+0x79c>)
 800435a:	f017 ffef 	bl	801c33c <__assert_func>
 800435e:	4b8e      	ldr	r3, [pc, #568]	; (8004598 <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	2b1f      	cmp	r3, #31
 8004364:	d803      	bhi.n	800436e <_ZN15Screen2ViewBaseC1Ev+0x576>
 8004366:	4b8d      	ldr	r3, [pc, #564]	; (800459c <_ZN15Screen2ViewBaseC1Ev+0x7a4>)
 8004368:	21af      	movs	r1, #175	; 0xaf
 800436a:	4a89      	ldr	r2, [pc, #548]	; (8004590 <_ZN15Screen2ViewBaseC1Ev+0x798>)
 800436c:	e7f4      	b.n	8004358 <_ZN15Screen2ViewBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 800436e:	4b8c      	ldr	r3, [pc, #560]	; (80045a0 <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 8004370:	211f      	movs	r1, #31
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	f000 fab4 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 8004378:	4a8a      	ldr	r2, [pc, #552]	; (80045a4 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 800437a:	4603      	mov	r3, r0
 800437c:	4639      	mov	r1, r7
 800437e:	4630      	mov	r0, r6
 8004380:	f00f f930 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wildcard = value;
 8004384:	f8c4 64d0 	str.w	r6, [r4, #1232]	; 0x4d0
        : typedTextId(id)
 8004388:	4e87      	ldr	r6, [pc, #540]	; (80045a8 <_ZN15Screen2ViewBaseC1Ev+0x7b0>)
    textAreaSRPM.setTypedText(touchgfx::TypedText(T_SRPM));
 800438a:	a90c      	add	r1, sp, #48	; 0x30
 800438c:	ee1f 0a10 	vmov	r0, s30
 8004390:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8004394:	960c      	str	r6, [sp, #48]	; 0x30
 8004396:	f00a f86f 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreasrpm.setXY(34, 26);
 800439a:	221a      	movs	r2, #26
 800439c:	2122      	movs	r1, #34	; 0x22
 800439e:	ee1f 0a90 	vmov	r0, s31
 80043a2:	f7fe ff5d 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 80043a6:	2320      	movs	r3, #32
    textAreasrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EP5D));
 80043a8:	a90c      	add	r1, sp, #48	; 0x30
 80043aa:	ee1f 0a90 	vmov	r0, s31
        this->color = color;
 80043ae:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
        linespace = space;
 80043b2:	f8a4 a508 	strh.w	sl, [r4, #1288]	; 0x508
 80043b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80043ba:	960c      	str	r6, [sp, #48]	; 0x30
 80043bc:	f00a f85c 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    boxWithBorder1_1_1.setPosition(131, 16, 121, 82);
 80043c0:	2252      	movs	r2, #82	; 0x52
 80043c2:	2379      	movs	r3, #121	; 0x79
 80043c4:	2183      	movs	r1, #131	; 0x83
 80043c6:	9807      	ldr	r0, [sp, #28]
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	2210      	movs	r2, #16
 80043cc:	f7fe ff55 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
 80043d0:	4a6c      	ldr	r2, [pc, #432]	; (8004584 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaMRPM.setPosition(139, 51, 104, 35);
 80043d2:	2368      	movs	r3, #104	; 0x68
 80043d4:	f8cd 8000 	str.w	r8, [sp]
 80043d8:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
 80043dc:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80043e0:	218b      	movs	r1, #139	; 0x8b
 80043e2:	9802      	ldr	r0, [sp, #8]
 80043e4:	f8c4 253c 	str.w	r2, [r4, #1340]	; 0x53c
 80043e8:	2233      	movs	r2, #51	; 0x33
        borderSize = size;
 80043ea:	f8a4 7540 	strh.w	r7, [r4, #1344]	; 0x540
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 80043ee:	f204 6806 	addw	r8, r4, #1542	; 0x606
    textAreaMRPM.setPosition(139, 51, 104, 35);
 80043f2:	f7fe ff42 	bl	800327a <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80043f6:	4a64      	ldr	r2, [pc, #400]	; (8004588 <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 80043f8:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 80043fc:	6813      	ldr	r3, [r2, #0]
        linespace = space;
 80043fe:	f8a4 a578 	strh.w	sl, [r4, #1400]	; 0x578
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0a5      	beq.n	8004352 <_ZN15Screen2ViewBaseC1Ev+0x55a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8004406:	4a64      	ldr	r2, [pc, #400]	; (8004598 <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 8004408:	8813      	ldrh	r3, [r2, #0]
 800440a:	2b21      	cmp	r3, #33	; 0x21
 800440c:	d9ab      	bls.n	8004366 <_ZN15Screen2ViewBaseC1Ev+0x56e>
        return texts->getText(typedTextId);
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 8004410:	2121      	movs	r1, #33	; 0x21
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	f000 fa64 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 8004418:	4a62      	ldr	r2, [pc, #392]	; (80045a4 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 800441a:	4603      	mov	r3, r0
 800441c:	4639      	mov	r1, r7
 800441e:	4640      	mov	r0, r8
 8004420:	f00f f8e0 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004424:	2324      	movs	r3, #36	; 0x24
    textAreaMRPM.setTypedText(touchgfx::TypedText(T_MRPM));
 8004426:	a90c      	add	r1, sp, #48	; 0x30
 8004428:	9802      	ldr	r0, [sp, #8]
 800442a:	f8c4 8580 	str.w	r8, [r4, #1408]	; 0x580
 800442e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8004432:	960c      	str	r6, [sp, #48]	; 0x30
 8004434:	f00a f820 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreamrpm.setXY(158, 26);
 8004438:	221a      	movs	r2, #26
 800443a:	9803      	ldr	r0, [sp, #12]
 800443c:	219e      	movs	r1, #158	; 0x9e
 800443e:	f7fe ff0f 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8004442:	2322      	movs	r3, #34	; 0x22
    textAreamrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DTOP));
 8004444:	a90c      	add	r1, sp, #48	; 0x30
 8004446:	9803      	ldr	r0, [sp, #12]
        this->color = color;
 8004448:	f8c4 55b4 	str.w	r5, [r4, #1460]	; 0x5b4
 800444c:	1d25      	adds	r5, r4, #4
        linespace = space;
 800444e:	f8a4 a5b8 	strh.w	sl, [r4, #1464]	; 0x5b8
 8004452:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8004456:	960c      	str	r6, [sp, #48]	; 0x30
 8004458:	f00a f80e 	bl	800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonPower_p2.setXY(74, 202);
 800445c:	9804      	ldr	r0, [sp, #16]
 800445e:	22ca      	movs	r2, #202	; 0xca
 8004460:	214a      	movs	r1, #74	; 0x4a
 8004462:	f7fe fefd 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 8004466:	230a      	movs	r3, #10
    buttonPower_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 8004468:	aa0a      	add	r2, sp, #40	; 0x28
 800446a:	a909      	add	r1, sp, #36	; 0x24
 800446c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8004470:	230b      	movs	r3, #11
 8004472:	9804      	ldr	r0, [sp, #16]
 8004474:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8004478:	2304      	movs	r3, #4
 800447a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800447e:	2301      	movs	r3, #1
 8004480:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8004484:	ab0c      	add	r3, sp, #48	; 0x30
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	ab0b      	add	r3, sp, #44	; 0x2c
 800448a:	f00a fa92 	bl	800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 800448e:	2347      	movs	r3, #71	; 0x47
 8004490:	ee18 1a10 	vmov	r1, s16
 8004494:	4628      	mov	r0, r5
 8004496:	f8a4 35f8 	strh.w	r3, [r4, #1528]	; 0x5f8
        iconY = y;
 800449a:	2310      	movs	r3, #16
 800449c:	f8c4 95e8 	str.w	r9, [r4, #1512]	; 0x5e8
 80044a0:	f8a4 35fa 	strh.w	r3, [r4, #1530]	; 0x5fa
 80044a4:	f008 f936 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044a8:	9905      	ldr	r1, [sp, #20]
 80044aa:	4628      	mov	r0, r5
 80044ac:	f008 f932 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044b0:	ee1e 1a90 	vmov	r1, s29
 80044b4:	4628      	mov	r0, r5
 80044b6:	f008 f92d 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ba:	ee18 1a90 	vmov	r1, s17
 80044be:	4628      	mov	r0, r5
 80044c0:	f008 f928 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044c4:	ee19 1a10 	vmov	r1, s18
 80044c8:	4628      	mov	r0, r5
 80044ca:	f008 f923 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ce:	ee19 1a90 	vmov	r1, s19
 80044d2:	4628      	mov	r0, r5
 80044d4:	f008 f91e 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044d8:	ee1a 1a10 	vmov	r1, s20
 80044dc:	4628      	mov	r0, r5
 80044de:	f008 f919 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044e2:	ee1a 1a90 	vmov	r1, s21
 80044e6:	4628      	mov	r0, r5
 80044e8:	f008 f914 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ec:	ee1b 1a10 	vmov	r1, s22
 80044f0:	4628      	mov	r0, r5
 80044f2:	f008 f90f 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044f6:	ee1b 1a90 	vmov	r1, s23
 80044fa:	4628      	mov	r0, r5
 80044fc:	f008 f90a 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004500:	ee1c 1a10 	vmov	r1, s24
 8004504:	4628      	mov	r0, r5
 8004506:	f008 f905 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800450a:	ee1c 1a90 	vmov	r1, s25
 800450e:	4628      	mov	r0, r5
 8004510:	f008 f900 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004514:	ee1d 1a10 	vmov	r1, s26
 8004518:	4628      	mov	r0, r5
 800451a:	f008 f8fb 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800451e:	4659      	mov	r1, fp
 8004520:	4628      	mov	r0, r5
 8004522:	f008 f8f7 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004526:	ee1d 1a90 	vmov	r1, s27
 800452a:	4628      	mov	r0, r5
 800452c:	f008 f8f2 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004530:	ee1e 1a10 	vmov	r1, s28
 8004534:	4628      	mov	r0, r5
 8004536:	f008 f8ed 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800453a:	9906      	ldr	r1, [sp, #24]
 800453c:	4628      	mov	r0, r5
 800453e:	f008 f8e9 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004542:	ee1f 1a10 	vmov	r1, s30
 8004546:	4628      	mov	r0, r5
 8004548:	f008 f8e4 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800454c:	ee1f 1a90 	vmov	r1, s31
 8004550:	4628      	mov	r0, r5
 8004552:	f008 f8df 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004556:	9907      	ldr	r1, [sp, #28]
 8004558:	4628      	mov	r0, r5
 800455a:	f008 f8db 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800455e:	9902      	ldr	r1, [sp, #8]
 8004560:	4628      	mov	r0, r5
 8004562:	f008 f8d7 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004566:	9903      	ldr	r1, [sp, #12]
 8004568:	4628      	mov	r0, r5
 800456a:	f008 f8d3 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800456e:	4628      	mov	r0, r5
 8004570:	9904      	ldr	r1, [sp, #16]
 8004572:	f008 f8cf 	bl	800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004576:	4620      	mov	r0, r4
 8004578:	b00f      	add	sp, #60	; 0x3c
 800457a:	ecbd 8b10 	vpop	{d8-d15}
 800457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004582:	bf00      	nop
 8004584:	ff570e0e 	.word	0xff570e0e
 8004588:	24006cb8 	.word	0x24006cb8
 800458c:	0801e108 	.word	0x0801e108
 8004590:	0801e14a 	.word	0x0801e14a
 8004594:	0801e178 	.word	0x0801e178
 8004598:	24006cbc 	.word	0x24006cbc
 800459c:	0801e1bf 	.word	0x0801e1bf
 80045a0:	24006cc4 	.word	0x24006cc4
 80045a4:	0801e211 	.word	0x0801e211
 80045a8:	0801dc04 	.word	0x0801dc04

080045ac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80045ac:	4770      	bx	lr
	...

080045b0 <_Z23getFont_verdana_10_4bppv>:
{
 80045b0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80045b2:	4d15      	ldr	r5, [pc, #84]	; (8004608 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 80045b4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80045b6:	782c      	ldrb	r4, [r5, #0]
 80045b8:	f3bf 8f5b 	dmb	ish
 80045bc:	f014 0401 	ands.w	r4, r4, #1
 80045c0:	d11e      	bne.n	8004600 <_Z23getFont_verdana_10_4bppv+0x50>
 80045c2:	4628      	mov	r0, r5
 80045c4:	f017 fda6 	bl	801c114 <__cxa_guard_acquire>
 80045c8:	b1d0      	cbz	r0, 8004600 <_Z23getFont_verdana_10_4bppv+0x50>
 80045ca:	233f      	movs	r3, #63	; 0x3f
 80045cc:	2201      	movs	r2, #1
 80045ce:	490f      	ldr	r1, [pc, #60]	; (800460c <_Z23getFont_verdana_10_4bppv+0x5c>)
 80045d0:	9307      	str	r3, [sp, #28]
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <_Z23getFont_verdana_10_4bppv+0x60>)
 80045d4:	480f      	ldr	r0, [pc, #60]	; (8004614 <_Z23getFont_verdana_10_4bppv+0x64>)
 80045d6:	9306      	str	r3, [sp, #24]
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <_Z23getFont_verdana_10_4bppv+0x68>)
 80045da:	9408      	str	r4, [sp, #32]
 80045dc:	9403      	str	r4, [sp, #12]
 80045de:	9400      	str	r4, [sp, #0]
 80045e0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80045e4:	2304      	movs	r3, #4
 80045e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80045ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045ee:	230a      	movs	r3, #10
 80045f0:	f7fe fd00 	bl	8002ff4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80045f4:	4628      	mov	r0, r5
 80045f6:	f017 fd99 	bl	801c12c <__cxa_guard_release>
 80045fa:	4808      	ldr	r0, [pc, #32]	; (800461c <_Z23getFont_verdana_10_4bppv+0x6c>)
 80045fc:	f017 febc 	bl	801c378 <atexit>
    return verdana_10_4bpp;
}
 8004600:	4804      	ldr	r0, [pc, #16]	; (8004614 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004602:	b00d      	add	sp, #52	; 0x34
 8004604:	bd30      	pop	{r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	24001794 	.word	0x24001794
 800460c:	08021f1c 	.word	0x08021f1c
 8004610:	0802210c 	.word	0x0802210c
 8004614:	24001798 	.word	0x24001798
 8004618:	08022128 	.word	0x08022128
 800461c:	080045ad 	.word	0x080045ad

08004620 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004620:	4770      	bx	lr
	...

08004624 <_Z23getFont_verdana_20_4bppv>:
{
 8004624:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004626:	4d15      	ldr	r5, [pc, #84]	; (800467c <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8004628:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800462a:	782c      	ldrb	r4, [r5, #0]
 800462c:	f3bf 8f5b 	dmb	ish
 8004630:	f014 0401 	ands.w	r4, r4, #1
 8004634:	d11f      	bne.n	8004676 <_Z23getFont_verdana_20_4bppv+0x52>
 8004636:	4628      	mov	r0, r5
 8004638:	f017 fd6c 	bl	801c114 <__cxa_guard_acquire>
 800463c:	b1d8      	cbz	r0, 8004676 <_Z23getFont_verdana_20_4bppv+0x52>
 800463e:	233f      	movs	r3, #63	; 0x3f
 8004640:	2201      	movs	r2, #1
 8004642:	490f      	ldr	r1, [pc, #60]	; (8004680 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8004644:	9307      	str	r3, [sp, #28]
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004648:	480f      	ldr	r0, [pc, #60]	; (8004688 <_Z23getFont_verdana_20_4bppv+0x64>)
 800464a:	9306      	str	r3, [sp, #24]
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <_Z23getFont_verdana_20_4bppv+0x68>)
 800464e:	9408      	str	r4, [sp, #32]
 8004650:	9403      	str	r4, [sp, #12]
 8004652:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004656:	2304      	movs	r3, #4
 8004658:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800465c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2210      	movs	r2, #16
 8004664:	2314      	movs	r3, #20
 8004666:	f7fe fcc5 	bl	8002ff4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800466a:	4628      	mov	r0, r5
 800466c:	f017 fd5e 	bl	801c12c <__cxa_guard_release>
 8004670:	4807      	ldr	r0, [pc, #28]	; (8004690 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004672:	f017 fe81 	bl	801c378 <atexit>
    return verdana_20_4bpp;
}
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004678:	b00d      	add	sp, #52	; 0x34
 800467a:	bd30      	pop	{r4, r5, pc}
 800467c:	240017c0 	.word	0x240017c0
 8004680:	08021f2c 	.word	0x08021f2c
 8004684:	08022110 	.word	0x08022110
 8004688:	240017c4 	.word	0x240017c4
 800468c:	0802212c 	.word	0x0802212c
 8004690:	08004621 	.word	0x08004621

08004694 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004694:	4770      	bx	lr
	...

08004698 <_Z23getFont_verdana_30_4bppv>:
{
 8004698:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800469a:	4d15      	ldr	r5, [pc, #84]	; (80046f0 <_Z23getFont_verdana_30_4bppv+0x58>)
{
 800469c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800469e:	782c      	ldrb	r4, [r5, #0]
 80046a0:	f3bf 8f5b 	dmb	ish
 80046a4:	f014 0401 	ands.w	r4, r4, #1
 80046a8:	d11f      	bne.n	80046ea <_Z23getFont_verdana_30_4bppv+0x52>
 80046aa:	4628      	mov	r0, r5
 80046ac:	f017 fd32 	bl	801c114 <__cxa_guard_acquire>
 80046b0:	b1d8      	cbz	r0, 80046ea <_Z23getFont_verdana_30_4bppv+0x52>
 80046b2:	233f      	movs	r3, #63	; 0x3f
 80046b4:	2201      	movs	r2, #1
 80046b6:	490f      	ldr	r1, [pc, #60]	; (80046f4 <_Z23getFont_verdana_30_4bppv+0x5c>)
 80046b8:	9307      	str	r3, [sp, #28]
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <_Z23getFont_verdana_30_4bppv+0x60>)
 80046bc:	480f      	ldr	r0, [pc, #60]	; (80046fc <_Z23getFont_verdana_30_4bppv+0x64>)
 80046be:	9306      	str	r3, [sp, #24]
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <_Z23getFont_verdana_30_4bppv+0x68>)
 80046c2:	9408      	str	r4, [sp, #32]
 80046c4:	9403      	str	r4, [sp, #12]
 80046c6:	9400      	str	r4, [sp, #0]
 80046c8:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80046cc:	2304      	movs	r3, #4
 80046ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80046d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046d6:	231e      	movs	r3, #30
 80046d8:	2211      	movs	r2, #17
 80046da:	f7fe fc8b 	bl	8002ff4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80046de:	4628      	mov	r0, r5
 80046e0:	f017 fd24 	bl	801c12c <__cxa_guard_release>
 80046e4:	4807      	ldr	r0, [pc, #28]	; (8004704 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80046e6:	f017 fe47 	bl	801c378 <atexit>
    return verdana_30_4bpp;
}
 80046ea:	4804      	ldr	r0, [pc, #16]	; (80046fc <_Z23getFont_verdana_30_4bppv+0x64>)
 80046ec:	b00d      	add	sp, #52	; 0x34
 80046ee:	bd30      	pop	{r4, r5, pc}
 80046f0:	240017ec 	.word	0x240017ec
 80046f4:	0802200c 	.word	0x0802200c
 80046f8:	08022120 	.word	0x08022120
 80046fc:	240017f0 	.word	0x240017f0
 8004700:	08022130 	.word	0x08022130
 8004704:	08004695 	.word	0x08004695

08004708 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004708:	4770      	bx	lr
	...

0800470c <_Z23getFont_verdana_40_4bppv>:
{
 800470c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800470e:	4d15      	ldr	r5, [pc, #84]	; (8004764 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8004710:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004712:	782c      	ldrb	r4, [r5, #0]
 8004714:	f3bf 8f5b 	dmb	ish
 8004718:	f014 0401 	ands.w	r4, r4, #1
 800471c:	d11e      	bne.n	800475c <_Z23getFont_verdana_40_4bppv+0x50>
 800471e:	4628      	mov	r0, r5
 8004720:	f017 fcf8 	bl	801c114 <__cxa_guard_acquire>
 8004724:	b1d0      	cbz	r0, 800475c <_Z23getFont_verdana_40_4bppv+0x50>
 8004726:	233f      	movs	r3, #63	; 0x3f
 8004728:	2201      	movs	r2, #1
 800472a:	490f      	ldr	r1, [pc, #60]	; (8004768 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <_Z23getFont_verdana_40_4bppv+0x60>)
 8004730:	480f      	ldr	r0, [pc, #60]	; (8004770 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004732:	9306      	str	r3, [sp, #24]
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004736:	9408      	str	r4, [sp, #32]
 8004738:	9403      	str	r4, [sp, #12]
 800473a:	9400      	str	r4, [sp, #0]
 800473c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004740:	2304      	movs	r3, #4
 8004742:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004746:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800474a:	2328      	movs	r3, #40	; 0x28
 800474c:	f7fe fc52 	bl	8002ff4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004750:	4628      	mov	r0, r5
 8004752:	f017 fceb 	bl	801c12c <__cxa_guard_release>
 8004756:	4808      	ldr	r0, [pc, #32]	; (8004778 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004758:	f017 fe0e 	bl	801c378 <atexit>
    return verdana_40_4bpp;
}
 800475c:	4804      	ldr	r0, [pc, #16]	; (8004770 <_Z23getFont_verdana_40_4bppv+0x64>)
 800475e:	b00d      	add	sp, #52	; 0x34
 8004760:	bd30      	pop	{r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	24001818 	.word	0x24001818
 8004768:	080220fc 	.word	0x080220fc
 800476c:	08022124 	.word	0x08022124
 8004770:	2400181c 	.word	0x2400181c
 8004774:	08022134 	.word	0x08022134
 8004778:	08004709 	.word	0x08004709

0800477c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800477c:	2000      	movs	r0, #0
 800477e:	4770      	bx	lr

08004780 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004780:	2000      	movs	r0, #0
 8004782:	4770      	bx	lr

08004784 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004784:	b40e      	push	{r1, r2, r3}
 8004786:	b503      	push	{r0, r1, lr}
 8004788:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800478a:	2100      	movs	r1, #0
{
 800478c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004790:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004792:	f00c fe71 	bl	8011478 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004796:	b002      	add	sp, #8
 8004798:	f85d eb04 	ldr.w	lr, [sp], #4
 800479c:	b003      	add	sp, #12
 800479e:	4770      	bx	lr

080047a0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80047a0:	b40c      	push	{r2, r3}
 80047a2:	b507      	push	{r0, r1, r2, lr}
 80047a4:	ab04      	add	r3, sp, #16
 80047a6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80047aa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80047ac:	f00c fe64 	bl	8011478 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80047b0:	b003      	add	sp, #12
 80047b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b6:	b002      	add	sp, #8
 80047b8:	4770      	bx	lr
	...

080047bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80047bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80047be:	b510      	push	{r4, lr}
 80047c0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80047c2:	b373      	cbz	r3, 8004822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80047c4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80047c6:	b92b      	cbnz	r3, 80047d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80047ca:	21c0      	movs	r1, #192	; 0xc0
 80047cc:	4a18      	ldr	r2, [pc, #96]	; (8004830 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80047ce:	4819      	ldr	r0, [pc, #100]	; (8004834 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80047d0:	f017 fdb4 	bl	801c33c <__assert_func>
            return buffer[pos];
 80047d4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80047d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80047da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80047dc:	b30b      	cbz	r3, 8004822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80047de:	f00e f949 	bl	8012a74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80047e2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d803      	bhi.n	80047f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80047ea:	21c5      	movs	r1, #197	; 0xc5
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80047ee:	e7ee      	b.n	80047ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80047f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80047f2:	f640 103f 	movw	r0, #2367	; 0x93f
 80047f6:	1c53      	adds	r3, r2, #1
 80047f8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80047fa:	2b09      	cmp	r3, #9
 80047fc:	4619      	mov	r1, r3
 80047fe:	bf88      	it	hi
 8004800:	f1a3 010a 	subhi.w	r1, r3, #10
 8004804:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004808:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800480a:	4281      	cmp	r1, r0
 800480c:	d109      	bne.n	8004822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800480e:	2b0a      	cmp	r3, #10
 8004810:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004814:	bf28      	it	cs
 8004816:	2300      	movcs	r3, #0
            return buffer[pos];
 8004818:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800481a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800481e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8004820:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004822:	4620      	mov	r0, r4
}
 8004824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004828:	f00e b808 	b.w	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800482c:	0801e32c 	.word	0x0801e32c
 8004830:	0801e335 	.word	0x0801e335
 8004834:	0801e3e0 	.word	0x0801e3e0
 8004838:	0801e42a 	.word	0x0801e42a
 800483c:	0801e438 	.word	0x0801e438

08004840 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004840:	f00d bfb4 	b.w	80127ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004844 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004844:	b510      	push	{r4, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	ac02      	add	r4, sp, #8
 800484a:	e884 0006 	stmia.w	r4, {r1, r2}
 800484e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004850:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004852:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004854:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	9b08      	ldr	r3, [sp, #32]
 800485e:	f00b fb05 	bl	800fe6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004862:	b006      	add	sp, #24
 8004864:	bd10      	pop	{r4, pc}
	...

08004868 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004868:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800486a:	bb18      	cbnz	r0, 80048b4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800486c:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800486e:	4813      	ldr	r0, [pc, #76]	; (80048bc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4913      	ldr	r1, [pc, #76]	; (80048c0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004874:	b1b3      	cbz	r3, 80048a4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004876:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004878:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800487a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800487c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800487e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	441a      	add	r2, r3
 8004884:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004888:	2200      	movs	r2, #0
 800488a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800488c:	f000 f838 	bl	8004900 <_ZN17TypedTextDatabase8getFontsEv>
 8004890:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004892:	f000 f833 	bl	80048fc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004898:	601c      	str	r4, [r3, #0]
        fonts = f;
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800489c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80048a0:	8018      	strh	r0, [r3, #0]
    }
}
 80048a2:	e007      	b.n	80048b4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80048a6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80048aa:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80048ae:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80048b0:	2c00      	cmp	r4, #0
 80048b2:	d1e8      	bne.n	8004886 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
 80048b6:	bf00      	nop
 80048b8:	24001844 	.word	0x24001844
 80048bc:	24001848 	.word	0x24001848
 80048c0:	2400184c 	.word	0x2400184c
 80048c4:	24001850 	.word	0x24001850
 80048c8:	24006cb8 	.word	0x24006cb8
 80048cc:	24006cc0 	.word	0x24006cc0
 80048d0:	24006cbc 	.word	0x24006cbc
 80048d4:	080221cc 	.word	0x080221cc
 80048d8:	08022138 	.word	0x08022138
 80048dc:	08022294 	.word	0x08022294

080048e0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2400184c 	.word	0x2400184c
 80048f8:	24001848 	.word	0x24001848

080048fc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80048fc:	2025      	movs	r0, #37	; 0x25
 80048fe:	4770      	bx	lr

08004900 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004900:	4800      	ldr	r0, [pc, #0]	; (8004904 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004902:	4770      	bx	lr
 8004904:	24001854 	.word	0x24001854

08004908 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004908:	b510      	push	{r4, lr}
};
 800490a:	4c07      	ldr	r4, [pc, #28]	; (8004928 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 800490c:	f7ff fec4 	bl	8004698 <_Z23getFont_verdana_30_4bppv>
};
 8004910:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004912:	f7ff fefb 	bl	800470c <_Z23getFont_verdana_40_4bppv>
};
 8004916:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004918:	f7ff fe4a 	bl	80045b0 <_Z23getFont_verdana_10_4bppv>
};
 800491c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 800491e:	f7ff fe81 	bl	8004624 <_Z23getFont_verdana_20_4bppv>
};
 8004922:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	24001854 	.word	0x24001854

0800492c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800492c:	4770      	bx	lr

0800492e <_ZN19FrontendApplicationD0Ev>:
 800492e:	b510      	push	{r4, lr}
 8004930:	4604      	mov	r4, r0
 8004932:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004936:	f017 fbeb 	bl	801c110 <_ZdlPvj>
 800493a:	4620      	mov	r0, r4
 800493c:	bd10      	pop	{r4, pc}

0800493e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
    {
        model.tick();
 8004942:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8004946:	f000 f812 	bl	800496e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800494a:	4620      	mov	r0, r4
    }
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004950:	f00b be06 	b.w	8010560 <_ZN8touchgfx11Application15handleTickEventEv>

08004954 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004954:	b510      	push	{r4, lr}
 8004956:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004958:	f7fe f962 	bl	8002c20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800495c:	4b01      	ldr	r3, [pc, #4]	; (8004964 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800495e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004960:	6023      	str	r3, [r4, #0]
}
 8004962:	bd10      	pop	{r4, pc}
 8004964:	0801e514 	.word	0x0801e514

08004968 <_ZN5ModelC1Ev>:





Model::Model() : modelListener(0)
 8004968:	2200      	movs	r2, #0
 800496a:	6002      	str	r2, [r0, #0]
{

}
 800496c:	4770      	bx	lr

0800496e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800496e:	4770      	bx	lr

08004970 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004970:	4770      	bx	lr

08004972 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004972:	3804      	subs	r0, #4
 8004974:	4770      	bx	lr

08004976 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004976:	4770      	bx	lr

08004978 <_ZN16Screen1PresenterD0Ev>:
 8004978:	b510      	push	{r4, lr}
 800497a:	4604      	mov	r4, r0
 800497c:	2110      	movs	r1, #16
 800497e:	f017 fbc7 	bl	801c110 <_ZdlPvj>
 8004982:	4620      	mov	r0, r4
 8004984:	bd10      	pop	{r4, pc}

08004986 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004986:	f1a0 0004 	sub.w	r0, r0, #4
 800498a:	e7f5      	b.n	8004978 <_ZN16Screen1PresenterD0Ev>

0800498c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800498c:	2200      	movs	r2, #0
    : view(v)
 800498e:	60c1      	str	r1, [r0, #12]
 8004990:	6082      	str	r2, [r0, #8]
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004994:	b510      	push	{r4, lr}
    : view(v)
 8004996:	f102 0408 	add.w	r4, r2, #8
 800499a:	3220      	adds	r2, #32
 800499c:	6004      	str	r4, [r0, #0]
 800499e:	6042      	str	r2, [r0, #4]
}
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	0801e550 	.word	0x0801e550

080049a8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80049a8:	4770      	bx	lr

080049aa <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80049aa:	4770      	bx	lr

080049ac <_ZN11Screen1View19buttonSwitchClickedEv>:
{
	fillBuffer(7);
}
void Screen1View::buttonSwitchClicked()
{
	switchPressed = !switchPressed;
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <_ZN11Screen1View19buttonSwitchClickedEv+0x14>)
 80049ae:	7813      	ldrb	r3, [r2, #0]
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	7013      	strb	r3, [r2, #0]
	dotPressed = 0;
 80049b8:	2200      	movs	r2, #0
 80049ba:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <_ZN11Screen1View19buttonSwitchClickedEv+0x18>)
 80049bc:	701a      	strb	r2, [r3, #0]
}
 80049be:	4770      	bx	lr
 80049c0:	24001878 	.word	0x24001878
 80049c4:	24001864 	.word	0x24001864

080049c8 <_ZN11Screen1View16buttonDotClickedEv>:
	textAreaMI.invalidate();
	textAreaFreq.invalidate();
}
void Screen1View::buttonDotClicked()
{
	dotPressed = 1;
 80049c8:	4b01      	ldr	r3, [pc, #4]	; (80049d0 <_ZN11Screen1View16buttonDotClickedEv+0x8>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
}
 80049ce:	4770      	bx	lr
 80049d0:	24001864 	.word	0x24001864

080049d4 <_ZN11Screen1View17buttonFreqToggledEv>:
void Screen1View::buttonFreqToggled()
{
	freqReady = 1;
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <_ZN11Screen1View17buttonFreqToggledEv+0x8>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
}
 80049da:	4770      	bx	lr
 80049dc:	24001865 	.word	0x24001865

080049e0 <_ZN11Screen1View15buttonMIToggledEv>:
void Screen1View::buttonMIToggled()
{
	miReady = 1;
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <_ZN11Screen1View15buttonMIToggledEv+0x8>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
}
 80049e6:	4770      	bx	lr
 80049e8:	24001870 	.word	0x24001870

080049ec <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80049ec:	f7fe bb71 	b.w	80030d2 <_ZN15Screen1ViewBase11setupScreenEv>

080049f0 <_ZN11Screen1View18buttonPowerClickedEv>:
void Screen1View::buttonPowerClicked()
{
 80049f0:	b508      	push	{r3, lr}
	buttonClearClicked();
 80049f2:	6803      	ldr	r3, [r0, #0]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4798      	blx	r3
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <_ZN11Screen1View18buttonPowerClickedEv+0x18>)
 80049fa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004a0c <_ZN11Screen1View18buttonPowerClickedEv+0x1c>
 80049fe:	6818      	ldr	r0, [r3, #0]
}
 8004a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 8004a04:	f7fb bfb6 	b.w	8000974 <adjustMIAndFreq>
 8004a08:	24001868 	.word	0x24001868
 8004a0c:	00000000 	.word	0x00000000

08004a10 <_ZN11Screen1ViewD0Ev>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
 8004a14:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8004a18:	f017 fb7a 	bl	801c110 <_ZdlPvj>
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <_ZN11Screen1View17buttonSendClickedEv>:
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8004a20:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <_ZN11Screen1View17buttonSendClickedEv+0x5c>)
{
 8004a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8004a24:	781a      	ldrb	r2, [r3, #0]
{
 8004a26:	4604      	mov	r4, r0
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 8004a28:	2a01      	cmp	r2, #1
 8004a2a:	d124      	bne.n	8004a76 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 8004a2c:	4e14      	ldr	r6, [pc, #80]	; (8004a80 <_ZN11Screen1View17buttonSendClickedEv+0x60>)
 8004a2e:	7832      	ldrb	r2, [r6, #0]
 8004a30:	2a01      	cmp	r2, #1
 8004a32:	d120      	bne.n	8004a76 <_ZN11Screen1View17buttonSendClickedEv+0x56>
 	   dotPressed = 0;
 8004a34:	2500      	movs	r5, #0
 8004a36:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <_ZN11Screen1View17buttonSendClickedEv+0x64>)
 	   toggleButtonMI.forceState(0);
 8004a38:	f200 6014 	addw	r0, r0, #1556	; 0x614
 8004a3c:	4629      	mov	r1, r5
 	   miReady = 0;
 8004a3e:	701d      	strb	r5, [r3, #0]
 	   dotPressed = 0;
 8004a40:	7015      	strb	r5, [r2, #0]
 	   toggleButtonMI.forceState(0);
 8004a42:	9001      	str	r0, [sp, #4]
 8004a44:	f009 f8d2 	bl	800dbec <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonMI.invalidate();
 8004a48:	9801      	ldr	r0, [sp, #4]
 8004a4a:	f00c fe37 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
 	   toggleButtonFreq.forceState(0);
 8004a4e:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8004a52:	4629      	mov	r1, r5
 	   freqReady = 0;
 8004a54:	7035      	strb	r5, [r6, #0]
 	   toggleButtonFreq.forceState(0);
 8004a56:	9001      	str	r0, [sp, #4]
 8004a58:	f009 f8c8 	bl	800dbec <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonFreq.invalidate();
 8004a5c:	9801      	ldr	r0, [sp, #4]
 8004a5e:	f00c fe2d 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <_ZN11Screen1View17buttonSendClickedEv+0x68>)
 8004a64:	ed93 0a00 	vldr	s0, [r3]
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <_ZN11Screen1View17buttonSendClickedEv+0x6c>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
}
 8004a6c:	b002      	add	sp, #8
 8004a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8004a72:	f7fb bf7f 	b.w	8000974 <adjustMIAndFreq>
}
 8004a76:	b002      	add	sp, #8
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	bf00      	nop
 8004a7c:	24001870 	.word	0x24001870
 8004a80:	24001865 	.word	0x24001865
 8004a84:	24001864 	.word	0x24001864
 8004a88:	24001874 	.word	0x24001874
 8004a8c:	24001868 	.word	0x24001868

08004a90 <_ZN11Screen1View18buttonClearClickedEv>:
{
 8004a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	dotPressed = 0;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <_ZN11Screen1View18buttonClearClickedEv+0x7c>)
 8004a94:	2500      	movs	r5, #0
{
 8004a96:	b085      	sub	sp, #20
 8004a98:	4604      	mov	r4, r0
	dotPressed = 0;
 8004a9a:	701d      	strb	r5, [r3, #0]
	toggleButtonMI.forceState(0);
 8004a9c:	f200 6014 	addw	r0, r0, #1556	; 0x614
	freqReady = 0;
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <_ZN11Screen1View18buttonClearClickedEv+0x80>)
	toggleButtonMI.forceState(0);
 8004aa2:	4629      	mov	r1, r5
	miScreenBuffer = 0.0;
 8004aa4:	4f1b      	ldr	r7, [pc, #108]	; (8004b14 <_ZN11Screen1View18buttonClearClickedEv+0x84>)
	freqReady = 0;
 8004aa6:	701d      	strb	r5, [r3, #0]
	miReady = 0;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <_ZN11Screen1View18buttonClearClickedEv+0x88>)
	freqScreenBuffer = 0;
 8004aaa:	4e1c      	ldr	r6, [pc, #112]	; (8004b1c <_ZN11Screen1View18buttonClearClickedEv+0x8c>)
	miReady = 0;
 8004aac:	701d      	strb	r5, [r3, #0]
	miBuffer = 0;
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <_ZN11Screen1View18buttonClearClickedEv+0x90>)
	toggleButtonMI.forceState(0);
 8004ab0:	9001      	str	r0, [sp, #4]
	miBuffer = 0;
 8004ab2:	601d      	str	r5, [r3, #0]
	miScreenBuffer = 0.0;
 8004ab4:	2300      	movs	r3, #0
	freqScreenBuffer = 0;
 8004ab6:	6035      	str	r5, [r6, #0]
	miScreenBuffer = 0.0;
 8004ab8:	603b      	str	r3, [r7, #0]
	toggleButtonMI.forceState(0);
 8004aba:	f009 f897 	bl	800dbec <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonMI.invalidate();
 8004abe:	9801      	ldr	r0, [sp, #4]
 8004ac0:	f00c fdfc 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
	toggleButtonFreq.forceState(0);
 8004ac4:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8004ac8:	4629      	mov	r1, r5
 8004aca:	9001      	str	r0, [sp, #4]
 8004acc:	f009 f88e 	bl	800dbec <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonFreq.invalidate();
 8004ad0:	9801      	ldr	r0, [sp, #4]
 8004ad2:	f00c fdf3 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(textAreaMIBuffer, 4, "%3.2f", miScreenBuffer);
 8004ad6:	683b      	ldr	r3, [r7, #0]
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8004ad8:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <_ZN11Screen1View18buttonClearClickedEv+0x94>)
 8004ada:	2104      	movs	r1, #4
 8004adc:	9303      	str	r3, [sp, #12]
 8004ade:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004ae2:	ab03      	add	r3, sp, #12
 8004ae4:	f00e ff3c 	bl	8013960 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	4a0f      	ldr	r2, [pc, #60]	; (8004b28 <_ZN11Screen1View18buttonClearClickedEv+0x98>)
 8004aec:	2103      	movs	r1, #3
 8004aee:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
 8004af2:	f00e fd77 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaMI.invalidate();
 8004af6:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8004afa:	f00c fddf 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaFreq.invalidate();
 8004afe:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004b02:	f00c fddb 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004b06:	b005      	add	sp, #20
 8004b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	24001864 	.word	0x24001864
 8004b10:	24001865 	.word	0x24001865
 8004b14:	24001874 	.word	0x24001874
 8004b18:	24001870 	.word	0x24001870
 8004b1c:	24001868 	.word	0x24001868
 8004b20:	2400186c 	.word	0x2400186c
 8004b24:	0801e578 	.word	0x0801e578
 8004b28:	0801e57e 	.word	0x0801e57e

08004b2c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	f7fe fc54 	bl	80033dc <_ZN15Screen1ViewBaseC1Ev>
 8004b34:	4b01      	ldr	r3, [pc, #4]	; (8004b3c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8004b36:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004b38:	6023      	str	r3, [r4, #0]
}
 8004b3a:	bd10      	pop	{r4, pc}
 8004b3c:	0801e590 	.word	0x0801e590

08004b40 <_ZN11Screen1View10fillBufferEh>:
	if(switchPressed == 1)
 8004b40:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <_ZN11Screen1View10fillBufferEh+0x90>)
{
 8004b42:	b513      	push	{r0, r1, r4, lr}
	if(switchPressed == 1)
 8004b44:	781b      	ldrb	r3, [r3, #0]
{
 8004b46:	4604      	mov	r4, r0
	if(switchPressed == 1)
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d131      	bne.n	8004bb0 <_ZN11Screen1View10fillBufferEh+0x70>
			if(dotPressed == 0)
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <_ZN11Screen1View10fillBufferEh+0x94>)
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004b4e:	ee07 1a90 	vmov	s15, r1
 8004b52:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <_ZN11Screen1View10fillBufferEh+0x98>)
			if(dotPressed == 0)
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	ed93 6a00 	vldr	s12, [r3]
 8004b5a:	b9e2      	cbnz	r2, 8004b96 <_ZN11Screen1View10fillBufferEh+0x56>
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004b64:	eea6 7a27 	vfma.f32	s14, s12, s15
		miBuffer = (miBuffer*10) + foo;
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <_ZN11Screen1View10fillBufferEh+0x9c>)
 8004b6a:	200a      	movs	r0, #10
 8004b6c:	ed83 7a00 	vstr	s14, [r3]
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004b76:	fb00 1103 	mla	r1, r0, r3, r1
 8004b7a:	ab01      	add	r3, sp, #4
 8004b7c:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	2104      	movs	r1, #4
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <_ZN11Screen1View10fillBufferEh+0xa0>)
 8004b86:	f00e feeb 	bl	8013960 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
		textAreaMI.invalidate();
 8004b8a:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
		textAreaFreq.invalidate();
 8004b8e:	f00c fd95 	bl	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004b92:	b002      	add	sp, #8
 8004b94:	bd10      	pop	{r4, pc}
				miScreenBuffer = miScreenBuffer + (foo/10.0);
 8004b96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004b9a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004b9e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004ba2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004ba6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004baa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004bae:	e7db      	b.n	8004b68 <_ZN11Screen1View10fillBufferEh+0x28>
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004bb0:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <_ZN11Screen1View10fillBufferEh+0xa4>)
 8004bb2:	200a      	movs	r0, #10
 8004bb4:	6813      	ldr	r3, [r2, #0]
 8004bb6:	fb00 1303 	mla	r3, r0, r3, r1
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004bba:	2103      	movs	r1, #3
 8004bbc:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004bc0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <_ZN11Screen1View10fillBufferEh+0xa8>)
 8004bc4:	f00e fd0e 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaFreq.invalidate();
 8004bc8:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004bcc:	e7df      	b.n	8004b8e <_ZN11Screen1View10fillBufferEh+0x4e>
 8004bce:	bf00      	nop
 8004bd0:	24001878 	.word	0x24001878
 8004bd4:	24001864 	.word	0x24001864
 8004bd8:	24001874 	.word	0x24001874
 8004bdc:	2400186c 	.word	0x2400186c
 8004be0:	0801e581 	.word	0x0801e581
 8004be4:	24001868 	.word	0x24001868
 8004be8:	0801e57e 	.word	0x0801e57e

08004bec <_ZN11Screen1View14button9ClickedEv>:
	fillBuffer(9);
 8004bec:	2109      	movs	r1, #9
 8004bee:	f7ff bfa7 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004bf2 <_ZN11Screen1View14button8ClickedEv>:
	fillBuffer(8);
 8004bf2:	2108      	movs	r1, #8
 8004bf4:	f7ff bfa4 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004bf8 <_ZN11Screen1View14button0ClickedEv>:
	fillBuffer(0);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f7ff bfa1 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004bfe <_ZN11Screen1View14button3ClickedEv>:
	fillBuffer(3);
 8004bfe:	2103      	movs	r1, #3
 8004c00:	f7ff bf9e 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c04 <_ZN11Screen1View14button2ClickedEv>:
	fillBuffer(2);
 8004c04:	2102      	movs	r1, #2
 8004c06:	f7ff bf9b 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c0a <_ZN11Screen1View14button1ClickedEv>:
	fillBuffer(1);
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	f7ff bf98 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c10 <_ZN11Screen1View14button6ClickedEv>:
	fillBuffer(6);
 8004c10:	2106      	movs	r1, #6
 8004c12:	f7ff bf95 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c16 <_ZN11Screen1View14button5ClickedEv>:
	fillBuffer(5);
 8004c16:	2105      	movs	r1, #5
 8004c18:	f7ff bf92 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c1c <_ZN11Screen1View14button4ClickedEv>:
	fillBuffer(4);
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	f7ff bf8f 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c22 <_ZN11Screen1View14button7ClickedEv>:
	fillBuffer(7);
 8004c22:	2107      	movs	r1, #7
 8004c24:	f7ff bf8c 	b.w	8004b40 <_ZN11Screen1View10fillBufferEh>

08004c28 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8004c28:	4770      	bx	lr

08004c2a <_ZThn4_N16Screen2PresenterD1Ev>:
 8004c2a:	3804      	subs	r0, #4
 8004c2c:	4770      	bx	lr

08004c2e <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8004c2e:	4770      	bx	lr

08004c30 <_ZN16Screen2PresenterD0Ev>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4604      	mov	r4, r0
 8004c34:	2110      	movs	r1, #16
 8004c36:	f017 fa6b 	bl	801c110 <_ZdlPvj>
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <_ZThn4_N16Screen2PresenterD0Ev>:
 8004c3e:	f1a0 0004 	sub.w	r0, r0, #4
 8004c42:	e7f5      	b.n	8004c30 <_ZN16Screen2PresenterD0Ev>

08004c44 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8004c44:	2200      	movs	r2, #0
    : view(v)
 8004c46:	60c1      	str	r1, [r0, #12]
 8004c48:	6082      	str	r2, [r0, #8]
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8004c4c:	b510      	push	{r4, lr}
    : view(v)
 8004c4e:	f102 0408 	add.w	r4, r2, #8
 8004c52:	3220      	adds	r2, #32
 8004c54:	6004      	str	r4, [r0, #0]
 8004c56:	6042      	str	r2, [r0, #4]
}
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0801e608 	.word	0x0801e608

08004c60 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8004c60:	4770      	bx	lr

08004c62 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8004c62:	4770      	bx	lr

08004c64 <_ZN11Screen2View20button2DirectClickedEv>:
	adjustMIAndFreq(0, 0.0);
	piUsed = 0;
}
void Screen2View::button2DirectClicked()
{
	piUsed = 0;
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <_ZN11Screen2View20button2DirectClickedEv+0x8>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
}
 8004c6a:	4770      	bx	lr
 8004c6c:	24000190 	.word	0x24000190

08004c70 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8004c70:	f7ff b829 	b.w	8003cc6 <_ZN15Screen2ViewBase11setupScreenEv>

08004c74 <_ZN11Screen2View21buttonClear_p2ClickedEv>:
	rpmScreenBuffer = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <_ZN11Screen2View21buttonClear_p2ClickedEv+0x24>)
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004c78:	2105      	movs	r1, #5
{
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
	rpmScreenBuffer = 0;
 8004c7e:	6013      	str	r3, [r2, #0]
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004c80:	f200 50fc 	addw	r0, r0, #1532	; 0x5fc
 8004c84:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <_ZN11Screen2View21buttonClear_p2ClickedEv+0x28>)
 8004c86:	f00e fcad 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004c8a:	f204 4094 	addw	r0, r4, #1172	; 0x494
}
 8004c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004c92:	f00c bd13 	b.w	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
 8004c96:	bf00      	nop
 8004c98:	2400187c 	.word	0x2400187c
 8004c9c:	0801e57e 	.word	0x0801e57e

08004ca0 <_ZN11Screen2View20buttonSend_p2ClickedEv>:
	piUsed = 1;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <_ZN11Screen2View20buttonSend_p2ClickedEv+0x10>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
	adjustRPM(rpmScreenBuffer);
 8004ca6:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <_ZN11Screen2View20buttonSend_p2ClickedEv+0x14>)
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f7fb be07 	b.w	80008bc <adjustRPM>
 8004cae:	bf00      	nop
 8004cb0:	24000190 	.word	0x24000190
 8004cb4:	2400187c 	.word	0x2400187c

08004cb8 <_ZN11Screen2View21buttonPower_p2ClickedEv>:
{
 8004cb8:	b508      	push	{r3, lr}
	buttonClear_p2Clicked();
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	4798      	blx	r3
	adjustRPM(0);
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f7fb fdfb 	bl	80008bc <adjustRPM>
	adjustMIAndFreq(0, 0.0);
 8004cc6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004cd8 <_ZN11Screen2View21buttonPower_p2ClickedEv+0x20>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7fb fe52 	bl	8000974 <adjustMIAndFreq>
	piUsed = 0;
 8004cd0:	4b02      	ldr	r3, [pc, #8]	; (8004cdc <_ZN11Screen2View21buttonPower_p2ClickedEv+0x24>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
}
 8004cd6:	bd08      	pop	{r3, pc}
 8004cd8:	00000000 	.word	0x00000000
 8004cdc:	24000190 	.word	0x24000190

08004ce0 <_ZN11Screen2ViewD0Ev>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	f240 6124 	movw	r1, #1572	; 0x624
 8004ce8:	f017 fa12 	bl	801c110 <_ZdlPvj>
 8004cec:	4620      	mov	r0, r4
 8004cee:	bd10      	pop	{r4, pc}

08004cf0 <_ZN11Screen2View15handleTickEventEv>:
void Screen2View::handleTickEvent()
{
	count++;
 8004cf0:	f8d0 3620 	ldr.w	r3, [r0, #1568]	; 0x620
 8004cf4:	3301      	adds	r3, #1
	if (count>10){
 8004cf6:	2b0a      	cmp	r3, #10
{
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4604      	mov	r4, r0
	if (count>10){
 8004cfc:	d802      	bhi.n	8004d04 <_ZN11Screen2View15handleTickEventEv+0x14>
	count++;
 8004cfe:	f8c0 3620 	str.w	r3, [r0, #1568]	; 0x620
		(newAvgRpm < 0) ? (temp = 0) : (temp = newAvgRpm);

		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", temp);
		textAreaMRPM.invalidate();
	}
}
 8004d02:	bd10      	pop	{r4, pc}
		count = 0;
 8004d04:	2300      	movs	r3, #0
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", temp);
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <_ZN11Screen2View15handleTickEventEv+0x3c>)
 8004d08:	2105      	movs	r1, #5
 8004d0a:	f200 6006 	addw	r0, r0, #1542	; 0x606
		count = 0;
 8004d0e:	f8c0 301a 	str.w	r3, [r0, #26]
		(newAvgRpm < 0) ? (temp = 0) : (temp = newAvgRpm);
 8004d12:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <_ZN11Screen2View15handleTickEventEv+0x40>)
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", temp);
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d1a:	f00e fc63 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaMRPM.invalidate();
 8004d1e:	f204 5044 	addw	r0, r4, #1348	; 0x544
}
 8004d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		textAreaMRPM.invalidate();
 8004d26:	f00c bcc9 	b.w	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
 8004d2a:	bf00      	nop
 8004d2c:	0801e57e 	.word	0x0801e57e
 8004d30:	24000184 	.word	0x24000184

08004d34 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	f7ff f85e 	bl	8003df8 <_ZN15Screen2ViewBaseC1Ev>
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <_ZN11Screen2ViewC1Ev+0x18>)
}
 8004d3e:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8c4 3620 	str.w	r3, [r4, #1568]	; 0x620
}
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	bf00      	nop
 8004d4c:	0801e638 	.word	0x0801e638

08004d50 <_ZN11Screen2View10fillBufferEh>:
{
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4604      	mov	r4, r0
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004d54:	4808      	ldr	r0, [pc, #32]	; (8004d78 <_ZN11Screen2View10fillBufferEh+0x28>)
 8004d56:	230a      	movs	r3, #10
 8004d58:	6802      	ldr	r2, [r0, #0]
 8004d5a:	fb03 1302 	mla	r3, r3, r2, r1
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004d5e:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <_ZN11Screen2View10fillBufferEh+0x2c>)
 8004d60:	2105      	movs	r1, #5
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004d62:	6003      	str	r3, [r0, #0]
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004d64:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
 8004d68:	f00e fc3c 	bl	80135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004d6c:	f204 4094 	addw	r0, r4, #1172	; 0x494
}
 8004d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004d74:	f00c bca2 	b.w	80116bc <_ZNK8touchgfx8Drawable10invalidateEv>
 8004d78:	2400187c 	.word	0x2400187c
 8004d7c:	0801e57e 	.word	0x0801e57e

08004d80 <_ZN11Screen2View17button7_p2ClickedEv>:
	fillBuffer(7);
 8004d80:	2107      	movs	r1, #7
 8004d82:	f7ff bfe5 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004d86 <_ZN11Screen2View17button8_p2ClickedEv>:
	fillBuffer(8);
 8004d86:	2108      	movs	r1, #8
 8004d88:	f7ff bfe2 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004d8c <_ZN11Screen2View17button9_p2ClickedEv>:
	fillBuffer(9);
 8004d8c:	2109      	movs	r1, #9
 8004d8e:	f7ff bfdf 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004d92 <_ZN11Screen2View17button4_p2ClickedEv>:
	fillBuffer(4);
 8004d92:	2104      	movs	r1, #4
 8004d94:	f7ff bfdc 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004d98 <_ZN11Screen2View17button5_p2ClickedEv>:
	fillBuffer(5);
 8004d98:	2105      	movs	r1, #5
 8004d9a:	f7ff bfd9 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004d9e <_ZN11Screen2View17button6_p2ClickedEv>:
	fillBuffer(6);
 8004d9e:	2106      	movs	r1, #6
 8004da0:	f7ff bfd6 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004da4 <_ZN11Screen2View17button1_p2ClickedEv>:
	fillBuffer(1);
 8004da4:	2101      	movs	r1, #1
 8004da6:	f7ff bfd3 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004daa <_ZN11Screen2View17button2_p2ClickedEv>:
	fillBuffer(2);
 8004daa:	2102      	movs	r1, #2
 8004dac:	f7ff bfd0 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004db0 <_ZN11Screen2View17button3_p2ClickedEv>:
	fillBuffer(3);
 8004db0:	2103      	movs	r1, #3
 8004db2:	f7ff bfcd 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004db6 <_ZN11Screen2View17button0_p2ClickedEv>:
	fillBuffer(0);
 8004db6:	2100      	movs	r1, #0
 8004db8:	f7ff bfca 	b.w	8004d50 <_ZN11Screen2View10fillBufferEh>

08004dbc <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004dbc:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004dc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8004dc4:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004dc6:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8004dc8:	2305      	movs	r3, #5
 8004dca:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004dcc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004dd0:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004dd4:	4770      	bx	lr

08004dd6 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8004dd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004dda:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004ddc:	bf04      	itt	eq
 8004dde:	2300      	moveq	r3, #0
 8004de0:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8004de4:	2000      	movs	r0, #0
 8004de6:	4770      	bx	lr

08004de8 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr

08004dec <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004dec:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004dee:	6904      	ldr	r4, [r0, #16]
 8004df0:	8900      	ldrh	r0, [r0, #8]
 8004df2:	46a4      	mov	ip, r4
}
 8004df4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004df8:	4760      	bx	ip

08004dfa <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004dfa:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004dfc:	68c4      	ldr	r4, [r0, #12]
 8004dfe:	8900      	ldrh	r0, [r0, #8]
 8004e00:	46a4      	mov	ip, r4
}
 8004e02:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e06:	4760      	bx	ip

08004e08 <FT5336_GestureConfig>:
{
 8004e08:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004e0c:	f100 0818 	add.w	r8, r0, #24
{
 8004e10:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004e12:	7809      	ldrb	r1, [r1, #0]
 8004e14:	4640      	mov	r0, r8
 8004e16:	f000 f8fb 	bl	8005010 <ft5336_radian_value>
 8004e1a:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004e1c:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004e20:	4640      	mov	r0, r8
 8004e22:	f000 f901 	bl	8005028 <ft5336_offset_left_right>
 8004e26:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004e28:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	f000 f907 	bl	8005040 <ft5336_offset_up_down>
 8004e32:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004e34:	f899 100c 	ldrb.w	r1, [r9, #12]
 8004e38:	4640      	mov	r0, r8
 8004e3a:	f000 f90d 	bl	8005058 <ft5336_disatnce_left_right>
 8004e3e:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004e40:	f899 1010 	ldrb.w	r1, [r9, #16]
 8004e44:	4640      	mov	r0, r8
 8004e46:	f000 f913 	bl	8005070 <ft5336_distance_up_down>
 8004e4a:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004e4c:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004e50:	4640      	mov	r0, r8
 8004e52:	f000 f919 	bl	8005088 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8004e56:	42c5      	cmn	r5, r0
}
 8004e58:	bf14      	ite	ne
 8004e5a:	f04f 30ff 	movne.w	r0, #4294967295
 8004e5e:	2000      	moveq	r0, #0
 8004e60:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08004e64 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8004e64:	3018      	adds	r0, #24
 8004e66:	f000 b927 	b.w	80050b8 <ft5336_chip_id>

08004e6a <FT5336_GetMultiTouchState>:
{
 8004e6a:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004e6c:	f100 0518 	add.w	r5, r0, #24
{
 8004e70:	b088      	sub	sp, #32
 8004e72:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004e74:	4628      	mov	r0, r5
 8004e76:	4669      	mov	r1, sp
 8004e78:	f000 f8bd 	bl	8004ff6 <ft5336_td_status>
 8004e7c:	bb98      	cbnz	r0, 8004ee6 <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004e7e:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	bf98      	it	ls
 8004e86:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004e88:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004e8a:	231e      	movs	r3, #30
 8004e8c:	466a      	mov	r2, sp
 8004e8e:	2103      	movs	r1, #3
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 f89d 	bl	8004fd0 <ft5336_read_reg>
 8004e96:	bb48      	cbnz	r0, 8004eec <FT5336_GetMultiTouchState+0x82>
 8004e98:	466b      	mov	r3, sp
 8004e9a:	1d22      	adds	r2, r4, #4
 8004e9c:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004ea0:	781d      	ldrb	r5, [r3, #0]
 8004ea2:	3306      	adds	r3, #6
 8004ea4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8004ea8:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004eaa:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004eac:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004eb0:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004eb2:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004eb6:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004eba:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004ebc:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004ec0:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004ec2:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8004ec6:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004eca:	ea44 0406 	orr.w	r4, r4, r6
 8004ece:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8004ed0:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8004ed4:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8004ed6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8004eda:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8004ede:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004ee0:	d1de      	bne.n	8004ea0 <FT5336_GetMultiTouchState+0x36>
}
 8004ee2:	b008      	add	sp, #32
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	e7cd      	b.n	8004e88 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004ef0:	e7f7      	b.n	8004ee2 <FT5336_GetMultiTouchState+0x78>

08004ef2 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8004ef2:	3018      	adds	r0, #24
 8004ef4:	f000 b87a 	b.w	8004fec <ft5336_gest_id>

08004ef8 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8004ef8:	2101      	movs	r1, #1
 8004efa:	3018      	adds	r0, #24
 8004efc:	f000 b8d0 	b.w	80050a0 <ft5336_g_mode>

08004f00 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8004f00:	2100      	movs	r1, #0
 8004f02:	3018      	adds	r0, #24
 8004f04:	f000 b8cc 	b.w	80050a0 <ft5336_g_mode>

08004f08 <FT5336_Init>:
{
 8004f08:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004f0a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8004f0e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004f10:	b96b      	cbnz	r3, 8004f2e <FT5336_Init+0x26>
    pObj->IO.Init();
 8004f12:	6803      	ldr	r3, [r0, #0]
 8004f14:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8004f16:	4620      	mov	r0, r4
 8004f18:	f7ff fff2 	bl	8004f00 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8004f1c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004f1e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8004f22:	bf18      	it	ne
 8004f24:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004f26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8004f2a:	4240      	negs	r0, r0
}
 8004f2c:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8004f2e:	2000      	movs	r0, #0
  return ret;
 8004f30:	e7fc      	b.n	8004f2c <FT5336_Init+0x24>

08004f32 <FT5336_ClearIT>:
 8004f32:	2000      	movs	r0, #0
 8004f34:	4770      	bx	lr

08004f36 <FT5336_GetState>:
{
 8004f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004f38:	f100 0518 	add.w	r5, r0, #24
{
 8004f3c:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004f3e:	a901      	add	r1, sp, #4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f858 	bl	8004ff6 <ft5336_td_status>
 8004f46:	bb08      	cbnz	r0, 8004f8c <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004f48:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	bf98      	it	ls
 8004f50:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004f52:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004f54:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004f56:	2103      	movs	r1, #3
 8004f58:	4628      	mov	r0, r5
 8004f5a:	eb0d 0203 	add.w	r2, sp, r3
 8004f5e:	f000 f837 	bl	8004fd0 <ft5336_read_reg>
 8004f62:	b9b0      	cbnz	r0, 8004f92 <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f72:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004f74:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004f78:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60a3      	str	r3, [r4, #8]
}
 8004f88:	b003      	add	sp, #12
 8004f8a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f90:	e7df      	b.n	8004f52 <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8004f92:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004f96:	e7f7      	b.n	8004f88 <FT5336_GetState+0x52>

08004f98 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8004f98:	b190      	cbz	r0, 8004fc0 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004f9a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004f9c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f9e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004fa0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004fa2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004fa4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004fa6:	68ca      	ldr	r2, [r1, #12]
 8004fa8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004faa:	690a      	ldr	r2, [r1, #16]
 8004fac:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004fae:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004fb0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004fb2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <FT5336_RegisterBusIO+0x30>)
 8004fb6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <FT5336_RegisterBusIO+0x34>)
 8004fba:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004fbc:	b103      	cbz	r3, 8004fc0 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004fbe:	4718      	bx	r3
}
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	08004ded 	.word	0x08004ded
 8004fcc:	08004dfb 	.word	0x08004dfb

08004fd0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004fd0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004fd2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004fd6:	46a4      	mov	ip, r4
}
 8004fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004fdc:	4760      	bx	ip

08004fde <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004fde:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004fe0:	6804      	ldr	r4, [r0, #0]
 8004fe2:	6880      	ldr	r0, [r0, #8]
 8004fe4:	46a4      	mov	ip, r4
}
 8004fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004fea:	4760      	bx	ip

08004fec <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004fec:	2301      	movs	r3, #1
{
 8004fee:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f7ff bfed 	b.w	8004fd0 <ft5336_read_reg>

08004ff6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8004ff6:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004ff8:	460a      	mov	r2, r1
{
 8004ffa:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2102      	movs	r1, #2
 8005000:	f7ff ffe6 	bl	8004fd0 <ft5336_read_reg>
  
  if(ret == 0)
 8005004:	b918      	cbnz	r0, 800500e <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8005006:	7823      	ldrb	r3, [r4, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800500e:	bd10      	pop	{r4, pc}

08005010 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8005010:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8005012:	2301      	movs	r3, #1
{
 8005014:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8005018:	f10d 0207 	add.w	r2, sp, #7
 800501c:	2191      	movs	r1, #145	; 0x91
 800501e:	f7ff ffde 	bl	8004fde <ft5336_write_reg>
}
 8005022:	b003      	add	sp, #12
 8005024:	f85d fb04 	ldr.w	pc, [sp], #4

08005028 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005028:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800502a:	2301      	movs	r3, #1
{
 800502c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8005030:	f10d 0207 	add.w	r2, sp, #7
 8005034:	2192      	movs	r1, #146	; 0x92
 8005036:	f7ff ffd2 	bl	8004fde <ft5336_write_reg>
}
 800503a:	b003      	add	sp, #12
 800503c:	f85d fb04 	ldr.w	pc, [sp], #4

08005040 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005040:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8005042:	2301      	movs	r3, #1
{
 8005044:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8005048:	f10d 0207 	add.w	r2, sp, #7
 800504c:	2193      	movs	r1, #147	; 0x93
 800504e:	f7ff ffc6 	bl	8004fde <ft5336_write_reg>
}
 8005052:	b003      	add	sp, #12
 8005054:	f85d fb04 	ldr.w	pc, [sp], #4

08005058 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005058:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800505a:	2301      	movs	r3, #1
{
 800505c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8005060:	f10d 0207 	add.w	r2, sp, #7
 8005064:	2194      	movs	r1, #148	; 0x94
 8005066:	f7ff ffba 	bl	8004fde <ft5336_write_reg>
}
 800506a:	b003      	add	sp, #12
 800506c:	f85d fb04 	ldr.w	pc, [sp], #4

08005070 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005070:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8005072:	2301      	movs	r3, #1
{
 8005074:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8005078:	f10d 0207 	add.w	r2, sp, #7
 800507c:	2195      	movs	r1, #149	; 0x95
 800507e:	f7ff ffae 	bl	8004fde <ft5336_write_reg>
}
 8005082:	b003      	add	sp, #12
 8005084:	f85d fb04 	ldr.w	pc, [sp], #4

08005088 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8005088:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800508a:	2301      	movs	r3, #1
{
 800508c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8005090:	f10d 0207 	add.w	r2, sp, #7
 8005094:	2196      	movs	r1, #150	; 0x96
 8005096:	f7ff ffa2 	bl	8004fde <ft5336_write_reg>
}
 800509a:	b003      	add	sp, #12
 800509c:	f85d fb04 	ldr.w	pc, [sp], #4

080050a0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80050a0:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80050a2:	2301      	movs	r3, #1
{
 80050a4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80050a8:	f10d 0207 	add.w	r2, sp, #7
 80050ac:	21a4      	movs	r1, #164	; 0xa4
 80050ae:	f7ff ff96 	bl	8004fde <ft5336_write_reg>
}
 80050b2:	b003      	add	sp, #12
 80050b4:	f85d fb04 	ldr.w	pc, [sp], #4

080050b8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80050b8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80050ba:	2301      	movs	r3, #1
 80050bc:	21a8      	movs	r1, #168	; 0xa8
 80050be:	f7ff bf87 	b.w	8004fd0 <ft5336_read_reg>

080050c2 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80050c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80050ca:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80050ce:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80050d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050da:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80050de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80050e2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80050e6:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80050e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050ec:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 80050f0:	2000      	movs	r0, #0
 80050f2:	4770      	bx	lr

080050f4 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	b09a      	sub	sp, #104	; 0x68
 80050f8:	460d      	mov	r5, r1
 80050fa:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 80050fc:	2100      	movs	r1, #0
{
 80050fe:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8005100:	a806      	add	r0, sp, #24
 8005102:	2250      	movs	r2, #80	; 0x50
 8005104:	f017 f9a6 	bl	801c454 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005108:	2214      	movs	r2, #20
 800510a:	2100      	movs	r1, #0
 800510c:	a801      	add	r0, sp, #4
 800510e:	f017 f9a1 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005112:	b92d      	cbnz	r5, 8005120 <MX25LM51245G_AutoPollingMemReady+0x2c>
 8005114:	2c01      	cmp	r4, #1
 8005116:	d103      	bne.n	8005120 <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800511c:	b01a      	add	sp, #104	; 0x68
 800511e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005120:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005122:	a906      	add	r1, sp, #24
 8005124:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005126:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 8005128:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800512a:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800512c:	bf0c      	ite	eq
 800512e:	2201      	moveq	r2, #1
 8005130:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005132:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 8005134:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005136:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005138:	bf14      	ite	ne
 800513a:	461a      	movne	r2, r3
 800513c:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800513e:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005140:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005142:	bf0c      	ite	eq
 8005144:	461a      	moveq	r2, r3
 8005146:	2210      	movne	r2, #16
 8005148:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800514a:	f240 52fa 	movw	r2, #1530	; 0x5fa
 800514e:	bf08      	it	eq
 8005150:	2205      	moveq	r2, #5
 8005152:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005154:	bf0c      	ite	eq
 8005156:	461a      	moveq	r2, r3
 8005158:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800515c:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800515e:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005160:	bf14      	ite	ne
 8005162:	461a      	movne	r2, r3
 8005164:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005168:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800516a:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800516c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005170:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005172:	bf0c      	ite	eq
 8005174:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8005178:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800517c:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800517e:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005180:	bf14      	ite	ne
 8005182:	461a      	movne	r2, r3
 8005184:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005188:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800518a:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800518c:	bf0c      	ite	eq
 800518e:	461a      	moveq	r2, r3
 8005190:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005192:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005194:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005196:	bf0c      	ite	eq
 8005198:	2202      	moveq	r2, #2
 800519a:	2201      	movne	r2, #1
 800519c:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800519e:	bf14      	ite	ne
 80051a0:	461a      	movne	r2, r3
 80051a2:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80051a6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80051aa:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80051ac:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80051b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80051b4:	2210      	movs	r2, #16
 80051b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051ba:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	f002 fbd0 	bl	8007966 <HAL_OSPI_Command>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d1a6      	bne.n	8005118 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	a901      	add	r1, sp, #4
 80051d0:	4630      	mov	r0, r6
 80051d2:	f002 fd05 	bl	8007be0 <HAL_OSPI_AutoPolling>
 80051d6:	3800      	subs	r0, #0
 80051d8:	bf18      	it	ne
 80051da:	2001      	movne	r0, #1
 80051dc:	4240      	negs	r0, r0
 80051de:	e79d      	b.n	800511c <MX25LM51245G_AutoPollingMemReady+0x28>

080051e0 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	b096      	sub	sp, #88	; 0x58
 80051e4:	460c      	mov	r4, r1
 80051e6:	4606      	mov	r6, r0
 80051e8:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80051ea:	2100      	movs	r1, #0
 80051ec:	2250      	movs	r2, #80	; 0x50
 80051ee:	a802      	add	r0, sp, #8
 80051f0:	f017 f930 	bl	801c454 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80051f4:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80051f6:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80051f8:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80051fc:	d104      	bne.n	8005208 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 80051fe:	b91d      	cbnz	r5, 8005208 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005204:	b016      	add	sp, #88	; 0x58
 8005206:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005208:	2300      	movs	r3, #0
 800520a:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800520c:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800520e:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005210:	bf0c      	ite	eq
 8005212:	2201      	moveq	r2, #1
 8005214:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005216:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800521a:	bf18      	it	ne
 800521c:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800521e:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005220:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005222:	d146      	bne.n	80052b2 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 8005224:	2d00      	cmp	r5, #0
 8005226:	bf0c      	ite	eq
 8005228:	230b      	moveq	r3, #11
 800522a:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800522c:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800522e:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005230:	a902      	add	r1, sp, #8
 8005232:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005234:	bf0c      	ite	eq
 8005236:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800523a:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005240:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005242:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005244:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005246:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005248:	bf0c      	ite	eq
 800524a:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 800524e:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005252:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005254:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005256:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005258:	bf0c      	ite	eq
 800525a:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800525e:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005262:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005264:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8005266:	bf0c      	ite	eq
 8005268:	2208      	moveq	r2, #8
 800526a:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800526c:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	f002 fb77 	bl	8007966 <HAL_OSPI_Command>
 8005278:	2800      	cmp	r0, #0
 800527a:	d1c1      	bne.n	8005200 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800527c:	2302      	movs	r3, #2
 800527e:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005280:	b9d4      	cbnz	r4, 80052b8 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 8005282:	2d00      	cmp	r5, #0
 8005284:	bf18      	it	ne
 8005286:	2312      	movne	r3, #18
 8005288:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 800528a:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800528c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005290:	a902      	add	r1, sp, #8
 8005292:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8005294:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005296:	f002 fb66 	bl	8007966 <HAL_OSPI_Command>
 800529a:	2800      	cmp	r0, #0
 800529c:	d1b0      	bne.n	8005200 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800529e:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80052a0:	4669      	mov	r1, sp
 80052a2:	4630      	mov	r0, r6
 80052a4:	f002 fcec 	bl	8007c80 <HAL_OSPI_MemoryMapped>
 80052a8:	3800      	subs	r0, #0
 80052aa:	bf18      	it	ne
 80052ac:	2001      	movne	r0, #1
 80052ae:	4240      	negs	r0, r0
 80052b0:	e7a8      	b.n	8005204 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80052b2:	f64e 4313 	movw	r3, #60435	; 0xec13
 80052b6:	e7b9      	b.n	800522c <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80052b8:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80052bc:	e7e4      	b.n	8005288 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

080052be <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80052be:	b510      	push	{r4, lr}
 80052c0:	b096      	sub	sp, #88	; 0x58
 80052c2:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80052c4:	2228      	movs	r2, #40	; 0x28
 80052c6:	2100      	movs	r1, #0
 80052c8:	a808      	add	r0, sp, #32
 80052ca:	f017 f8c3 	bl	801c454 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80052ce:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80052d0:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80052d2:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80052d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80052d8:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80052dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80052e0:	2204      	movs	r2, #4
 80052e2:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80052e4:	2210      	movs	r2, #16
 80052e6:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80052ea:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052ee:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80052f0:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80052f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f6:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80052f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80052fc:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8005300:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005304:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8005306:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8005308:	2206      	movs	r2, #6
 800530a:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800530e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005312:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800531a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800531e:	f002 fb22 	bl	8007966 <HAL_OSPI_Command>
 8005322:	b118      	cbz	r0, 800532c <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005328:	b016      	add	sp, #88	; 0x58
 800532a:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800532c:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005334:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005336:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800533a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800533e:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005340:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005342:	f002 fb10 	bl	8007966 <HAL_OSPI_Command>
 8005346:	2800      	cmp	r0, #0
 8005348:	d1ec      	bne.n	8005324 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800534a:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800534c:	4669      	mov	r1, sp
 800534e:	4620      	mov	r0, r4
 8005350:	f002 fc96 	bl	8007c80 <HAL_OSPI_MemoryMapped>
 8005354:	3800      	subs	r0, #0
 8005356:	bf18      	it	ne
 8005358:	2001      	movne	r0, #1
 800535a:	4240      	negs	r0, r0
 800535c:	e7e4      	b.n	8005328 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

0800535e <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	b09a      	sub	sp, #104	; 0x68
 8005362:	460c      	mov	r4, r1
 8005364:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8005366:	2100      	movs	r1, #0
{
 8005368:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800536a:	a806      	add	r0, sp, #24
 800536c:	2250      	movs	r2, #80	; 0x50
 800536e:	f017 f871 	bl	801c454 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005372:	2214      	movs	r2, #20
 8005374:	2100      	movs	r1, #0
 8005376:	a801      	add	r0, sp, #4
 8005378:	f017 f86c 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800537c:	b92c      	cbnz	r4, 800538a <MX25LM51245G_WriteEnable+0x2c>
 800537e:	2d01      	cmp	r5, #1
 8005380:	d103      	bne.n	800538a <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005386:	b01a      	add	sp, #104	; 0x68
 8005388:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800538a:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800538c:	a906      	add	r1, sp, #24
 800538e:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005390:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005392:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005394:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005396:	bf0c      	ite	eq
 8005398:	2201      	moveq	r2, #1
 800539a:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800539c:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800539e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80053a0:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80053a2:	bf0c      	ite	eq
 80053a4:	2208      	moveq	r2, #8
 80053a6:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80053a8:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80053aa:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80053ac:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80053ae:	bf0c      	ite	eq
 80053b0:	461a      	moveq	r2, r3
 80053b2:	2210      	movne	r2, #16
 80053b4:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80053b6:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80053ba:	bf08      	it	eq
 80053bc:	2206      	moveq	r2, #6
 80053be:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80053c4:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80053c8:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053cc:	f002 facb 	bl	8007966 <HAL_OSPI_Command>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d1d6      	bne.n	8005382 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80053d4:	2c00      	cmp	r4, #0
 80053d6:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 80053da:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80053e0:	bf08      	it	eq
 80053e2:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053e4:	a906      	add	r1, sp, #24
 80053e6:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80053e8:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80053ea:	bf0c      	ite	eq
 80053ec:	2300      	moveq	r3, #0
 80053ee:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80053f2:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80053f4:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80053f6:	bf0c      	ite	eq
 80053f8:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80053fc:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053fe:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005400:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8005402:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005406:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005408:	bf0c      	ite	eq
 800540a:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800540e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005412:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005414:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005416:	bf0c      	ite	eq
 8005418:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 800541c:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800541e:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005420:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005422:	bf0c      	ite	eq
 8005424:	2300      	moveq	r3, #0
 8005426:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005428:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800542a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800542c:	bf0c      	ite	eq
 800542e:	2302      	moveq	r3, #2
 8005430:	2301      	movne	r3, #1
 8005432:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005434:	bf0c      	ite	eq
 8005436:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 800543a:	2300      	movne	r3, #0
 800543c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800543e:	f002 fa92 	bl	8007966 <HAL_OSPI_Command>
 8005442:	2800      	cmp	r0, #0
 8005444:	d19d      	bne.n	8005382 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 8005446:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005448:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800544a:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800544c:	a901      	add	r1, sp, #4
 800544e:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 8005450:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005454:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005458:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800545c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005460:	f002 fbbe 	bl	8007be0 <HAL_OSPI_AutoPolling>
 8005464:	3800      	subs	r0, #0
 8005466:	bf18      	it	ne
 8005468:	2001      	movne	r0, #1
 800546a:	4240      	negs	r0, r0
 800546c:	e78b      	b.n	8005386 <MX25LM51245G_WriteEnable+0x28>

0800546e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800546e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005470:	b095      	sub	sp, #84	; 0x54
 8005472:	460d      	mov	r5, r1
 8005474:	4606      	mov	r6, r0
 8005476:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005478:	2100      	movs	r1, #0
 800547a:	2250      	movs	r2, #80	; 0x50
 800547c:	4668      	mov	r0, sp
{
 800547e:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8005480:	f016 ffe8 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005484:	b92d      	cbnz	r5, 8005492 <MX25LM51245G_WriteCfg2Register+0x24>
 8005486:	2c01      	cmp	r4, #1
 8005488:	d103      	bne.n	8005492 <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 800548a:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800548e:	b015      	add	sp, #84	; 0x54
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005492:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 8005494:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005496:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005498:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054a0:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80054a2:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054a4:	bf0c      	ite	eq
 80054a6:	2308      	moveq	r3, #8
 80054a8:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80054aa:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80054ac:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80054ae:	bf0c      	ite	eq
 80054b0:	4613      	moveq	r3, r2
 80054b2:	2310      	movne	r3, #16
 80054b4:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80054b6:	f247 238d 	movw	r3, #29325	; 0x728d
 80054ba:	bf08      	it	eq
 80054bc:	2372      	moveq	r3, #114	; 0x72
 80054be:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80054c0:	bf0c      	ite	eq
 80054c2:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80054c6:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80054ca:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80054cc:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80054ce:	bf0c      	ite	eq
 80054d0:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80054d4:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80054d6:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80054d8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80054da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054de:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80054e0:	bf0c      	ite	eq
 80054e2:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80054e6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80054ea:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80054ec:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80054ee:	bf0c      	ite	eq
 80054f0:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80054f4:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80054f6:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 80054fa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80054fe:	b1d5      	cbz	r5, 8005536 <MX25LM51245G_WriteCfg2Register+0xc8>
 8005500:	2c01      	cmp	r4, #1
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2302      	moveq	r3, #2
 8005508:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800550a:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	4669      	mov	r1, sp
 8005512:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005514:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005518:	f002 fa25 	bl	8007966 <HAL_OSPI_Command>
 800551c:	2800      	cmp	r0, #0
 800551e:	d1b4      	bne.n	800548a <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	a91a      	add	r1, sp, #104	; 0x68
 8005526:	4630      	mov	r0, r6
 8005528:	f002 fac8 	bl	8007abc <HAL_OSPI_Transmit>
 800552c:	3800      	subs	r0, #0
 800552e:	bf18      	it	ne
 8005530:	2001      	movne	r0, #1
 8005532:	4240      	negs	r0, r0
 8005534:	e7ab      	b.n	800548e <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8005536:	2301      	movs	r3, #1
 8005538:	e7e6      	b.n	8005508 <MX25LM51245G_WriteCfg2Register+0x9a>

0800553a <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b095      	sub	sp, #84	; 0x54
 800553e:	460d      	mov	r5, r1
 8005540:	4606      	mov	r6, r0
 8005542:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005544:	2100      	movs	r1, #0
 8005546:	2250      	movs	r2, #80	; 0x50
 8005548:	4668      	mov	r0, sp
{
 800554a:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800554c:	f016 ff82 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005550:	b92d      	cbnz	r5, 800555e <MX25LM51245G_ReadCfg2Register+0x24>
 8005552:	2c01      	cmp	r4, #1
 8005554:	d103      	bne.n	800555e <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 8005556:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800555a:	b015      	add	sp, #84	; 0x54
 800555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800555e:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005560:	4669      	mov	r1, sp
 8005562:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8005564:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005566:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005568:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005570:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005572:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005574:	bf14      	ite	ne
 8005576:	4613      	movne	r3, r2
 8005578:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800557a:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800557c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800557e:	bf0c      	ite	eq
 8005580:	4613      	moveq	r3, r2
 8005582:	2310      	movne	r3, #16
 8005584:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8005586:	f247 138e 	movw	r3, #29070	; 0x718e
 800558a:	bf08      	it	eq
 800558c:	2371      	moveq	r3, #113	; 0x71
 800558e:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005590:	bf0c      	ite	eq
 8005592:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005596:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800559a:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800559c:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800559e:	bf14      	ite	ne
 80055a0:	4613      	movne	r3, r2
 80055a2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80055a6:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80055a8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80055aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055ae:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80055b0:	bf0c      	ite	eq
 80055b2:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80055b6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80055ba:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80055bc:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80055be:	bf14      	ite	ne
 80055c0:	4613      	movne	r3, r2
 80055c2:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80055c6:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80055c8:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80055ca:	bf0c      	ite	eq
 80055cc:	4613      	moveq	r3, r2
 80055ce:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80055d0:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80055d2:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80055d4:	bf0c      	ite	eq
 80055d6:	2302      	moveq	r3, #2
 80055d8:	2301      	movne	r3, #1
 80055da:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80055dc:	bf14      	ite	ne
 80055de:	4613      	movne	r3, r2
 80055e0:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80055e4:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80055e8:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	f002 f9b9 	bl	8007966 <HAL_OSPI_Command>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d1ae      	bne.n	8005556 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055fe:	4630      	mov	r0, r6
 8005600:	f002 fa9c 	bl	8007b3c <HAL_OSPI_Receive>
 8005604:	3800      	subs	r0, #0
 8005606:	bf18      	it	ne
 8005608:	2001      	movne	r0, #1
 800560a:	4240      	negs	r0, r0
 800560c:	e7a5      	b.n	800555a <MX25LM51245G_ReadCfg2Register+0x20>

0800560e <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800560e:	b570      	push	{r4, r5, r6, lr}
 8005610:	b094      	sub	sp, #80	; 0x50
 8005612:	460c      	mov	r4, r1
 8005614:	4606      	mov	r6, r0
 8005616:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005618:	2100      	movs	r1, #0
 800561a:	2250      	movs	r2, #80	; 0x50
 800561c:	4668      	mov	r0, sp
 800561e:	f016 ff19 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005622:	b90c      	cbnz	r4, 8005628 <MX25LM51245G_ResetEnable+0x1a>
 8005624:	2d01      	cmp	r5, #1
 8005626:	d028      	beq.n	800567a <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005628:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800562a:	4669      	mov	r1, sp
 800562c:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800562e:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005630:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005632:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005634:	bf0c      	ite	eq
 8005636:	2201      	moveq	r2, #1
 8005638:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800563a:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800563c:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800563e:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005640:	bf14      	ite	ne
 8005642:	461a      	movne	r2, r3
 8005644:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005646:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005648:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800564a:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800564c:	bf0c      	ite	eq
 800564e:	461a      	moveq	r2, r3
 8005650:	2210      	movne	r2, #16
 8005652:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8005654:	f246 6299 	movw	r2, #26265	; 0x6699
 8005658:	bf08      	it	eq
 800565a:	2266      	moveq	r2, #102	; 0x66
 800565c:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005662:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005666:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800566a:	f002 f97c 	bl	8007966 <HAL_OSPI_Command>
 800566e:	3800      	subs	r0, #0
 8005670:	bf18      	it	ne
 8005672:	2001      	movne	r0, #1
 8005674:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005676:	b014      	add	sp, #80	; 0x50
 8005678:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	e7fa      	b.n	8005676 <MX25LM51245G_ResetEnable+0x68>

08005680 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	b094      	sub	sp, #80	; 0x50
 8005684:	460c      	mov	r4, r1
 8005686:	4606      	mov	r6, r0
 8005688:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800568a:	2100      	movs	r1, #0
 800568c:	2250      	movs	r2, #80	; 0x50
 800568e:	4668      	mov	r0, sp
 8005690:	f016 fee0 	bl	801c454 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005694:	b90c      	cbnz	r4, 800569a <MX25LM51245G_ResetMemory+0x1a>
 8005696:	2d01      	cmp	r5, #1
 8005698:	d028      	beq.n	80056ec <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800569a:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800569c:	4669      	mov	r1, sp
 800569e:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80056a0:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80056a2:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80056a4:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80056a6:	bf0c      	ite	eq
 80056a8:	2201      	moveq	r2, #1
 80056aa:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80056ac:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80056ae:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80056b0:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80056b2:	bf14      	ite	ne
 80056b4:	461a      	movne	r2, r3
 80056b6:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80056b8:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80056ba:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80056bc:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80056be:	bf0c      	ite	eq
 80056c0:	461a      	moveq	r2, r3
 80056c2:	2210      	movne	r2, #16
 80056c4:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80056c6:	f649 1266 	movw	r2, #39270	; 0x9966
 80056ca:	bf08      	it	eq
 80056cc:	2299      	moveq	r2, #153	; 0x99
 80056ce:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80056d4:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80056d8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056dc:	f002 f943 	bl	8007966 <HAL_OSPI_Command>
 80056e0:	3800      	subs	r0, #0
 80056e2:	bf18      	it	ne
 80056e4:	2001      	movne	r0, #1
 80056e6:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80056e8:	b014      	add	sp, #80	; 0x50
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	e7fa      	b.n	80056e8 <MX25LM51245G_ResetMemory+0x68>
	...

080056f4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <BSP_I2C4_DeInit+0x48>)
{
 80056f6:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	b90b      	cbnz	r3, 8005700 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80056fc:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80056fe:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 8005700:	3b01      	subs	r3, #1
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f9      	bne.n	80056fc <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800570c:	480c      	ldr	r0, [pc, #48]	; (8005740 <BSP_I2C4_DeInit+0x4c>)
 800570e:	f001 f959 	bl	80069c4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005712:	480b      	ldr	r0, [pc, #44]	; (8005740 <BSP_I2C4_DeInit+0x4c>)
 8005714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005718:	f001 f954 	bl	80069c4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800571e:	480a      	ldr	r0, [pc, #40]	; (8005748 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8005720:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8005724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005728:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800572c:	f001 fbe3 	bl	8006ef6 <HAL_I2C_DeInit>
 8005730:	2800      	cmp	r0, #0
 8005732:	d0e3      	beq.n	80056fc <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8005734:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005738:	e7e1      	b.n	80056fe <BSP_I2C4_DeInit+0xa>
 800573a:	bf00      	nop
 800573c:	24001880 	.word	0x24001880
 8005740:	58021400 	.word	0x58021400
 8005744:	58024400 	.word	0x58024400
 8005748:	240072b0 	.word	0x240072b0

0800574c <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800574c:	2300      	movs	r3, #0
 800574e:	2201      	movs	r2, #1
{
 8005750:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005752:	6041      	str	r1, [r0, #4]
{
 8005754:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005756:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005758:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800575c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005760:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005764:	f001 fb75 	bl	8006e52 <HAL_I2C_Init>
 8005768:	4601      	mov	r1, r0
 800576a:	b108      	cbz	r0, 8005770 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800576c:	2001      	movs	r0, #1
}
 800576e:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005770:	4620      	mov	r0, r4
 8005772:	f001 fd50 	bl	8007216 <HAL_I2CEx_ConfigAnalogFilter>
 8005776:	4601      	mov	r1, r0
 8005778:	2800      	cmp	r0, #0
 800577a:	d1f7      	bne.n	800576c <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800577c:	4620      	mov	r0, r4
 800577e:	f001 fd70 	bl	8007262 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8005782:	3800      	subs	r0, #0
 8005784:	bf18      	it	ne
 8005786:	2001      	movne	r0, #1
 8005788:	e7f1      	b.n	800576e <MX_I2C4_Init+0x22>
	...

0800578c <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800578c:	4ba3      	ldr	r3, [pc, #652]	; (8005a1c <BSP_I2C4_Init+0x290>)
 800578e:	48a4      	ldr	r0, [pc, #656]	; (8005a20 <BSP_I2C4_Init+0x294>)
{
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005794:	6003      	str	r3, [r0, #0]
{
 8005796:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 8005798:	4ba2      	ldr	r3, [pc, #648]	; (8005a24 <BSP_I2C4_Init+0x298>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	9200      	str	r2, [sp, #0]
 800579e:	3201      	adds	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 80c9 	bne.w	800593c <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80057aa:	f001 fd2f 	bl	800720c <HAL_I2C_GetState>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f040 80c4 	bne.w	800593c <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80057b4:	4d9c      	ldr	r5, [pc, #624]	; (8005a28 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80057b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80057ba:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80057bc:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80057be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80057c2:	489a      	ldr	r0, [pc, #616]	; (8005a2c <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80057cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	930a      	str	r3, [sp, #40]	; 0x28
 80057d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80057d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80057dc:	f043 0320 	orr.w	r3, r3, #32
 80057e0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80057e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80057e8:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80057f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80057f2:	2312      	movs	r3, #18
 80057f4:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80057f8:	2302      	movs	r3, #2
 80057fa:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80057fe:	a90d      	add	r1, sp, #52	; 0x34
 8005800:	f000 fffa 	bl	80067f8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005808:	a90d      	add	r1, sp, #52	; 0x34
 800580a:	4888      	ldr	r0, [pc, #544]	; (8005a2c <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800580c:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800580e:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005810:	f000 fff2 	bl	80067f8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005814:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005820:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	930c      	str	r3, [sp, #48]	; 0x30
 800582a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 800582c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005838:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005844:	f003 f9c8 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005848:	2800      	cmp	r0, #0
 800584a:	d071      	beq.n	8005930 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800584c:	4b78      	ldr	r3, [pc, #480]	; (8005a30 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800584e:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005852:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8005a38 <BSP_I2C4_Init+0x2ac>
 8005856:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800585a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800585e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005862:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005866:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800586a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800586c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005870:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005874:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800587c:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	4b6c      	ldr	r3, [pc, #432]	; (8005a34 <BSP_I2C4_Init+0x2a8>)
 8005882:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005886:	9a00      	ldr	r2, [sp, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4690      	mov	r8, r2
{
 800588c:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800588e:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005890:	f240 3479 	movw	r4, #889	; 0x379
 8005894:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005896:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005898:	45a4      	cmp	ip, r4
 800589a:	d95a      	bls.n	8005952 <BSP_I2C4_Init+0x1c6>
 800589c:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800589e:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80058a0:	45ab      	cmp	fp, r5
 80058a2:	d852      	bhi.n	800594a <BSP_I2C4_Init+0x1be>
 80058a4:	9c02      	ldr	r4, [sp, #8]
 80058a6:	42ac      	cmp	r4, r5
 80058a8:	d34f      	bcc.n	800594a <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80058aa:	4596      	cmp	lr, r2
 80058ac:	d04d      	beq.n	800594a <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80058ae:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 80058b2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80058b4:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80058b6:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80058ba:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80058bc:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80058c0:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80058c4:	d93e      	bls.n	8005944 <BSP_I2C4_Init+0x1b8>
 80058c6:	4a5b      	ldr	r2, [pc, #364]	; (8005a34 <BSP_I2C4_Init+0x2a8>)
 80058c8:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80058ca:	4b5a      	ldr	r3, [pc, #360]	; (8005a34 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80058cc:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80058d0:	4a59      	ldr	r2, [pc, #356]	; (8005a38 <BSP_I2C4_Init+0x2ac>)
 80058d2:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80058d4:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80058d6:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80058da:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80058dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 80058e6:	9309      	str	r3, [sp, #36]	; 0x24
 80058e8:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 80058ec:	3b0a      	subs	r3, #10
 80058ee:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	429e      	cmp	r6, r3
 80058f4:	d138      	bne.n	8005968 <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 80058f6:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 80058fa:	d819      	bhi.n	8005930 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058fc:	2314      	movs	r3, #20
 80058fe:	fb03 f808 	mul.w	r8, r3, r8
 8005902:	4b4d      	ldr	r3, [pc, #308]	; (8005a38 <BSP_I2C4_Init+0x2ac>)
 8005904:	eb03 0208 	add.w	r2, r3, r8
 8005908:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800590c:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800590e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005912:	6853      	ldr	r3, [r2, #4]
 8005914:	051b      	lsls	r3, r3, #20
 8005916:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800591a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800591c:	6893      	ldr	r3, [r2, #8]
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005924:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005926:	68d3      	ldr	r3, [r2, #12]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800592c:	4323      	orrs	r3, r4
 800592e:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005930:	9900      	ldr	r1, [sp, #0]
 8005932:	483b      	ldr	r0, [pc, #236]	; (8005a20 <BSP_I2C4_Init+0x294>)
 8005934:	f7ff ff0a 	bl	800574c <MX_I2C4_Init>
 8005938:	2800      	cmp	r0, #0
 800593a:	d16b      	bne.n	8005a14 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 800593c:	2000      	movs	r0, #0
}
 800593e:	b013      	add	sp, #76	; 0x4c
 8005940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005944:	4696      	mov	lr, r2
 8005946:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800594a:	3701      	adds	r7, #1
 800594c:	440d      	add	r5, r1
 800594e:	2f10      	cmp	r7, #16
 8005950:	d1a6      	bne.n	80058a0 <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005952:	2e10      	cmp	r6, #16
 8005954:	448c      	add	ip, r1
 8005956:	d19b      	bne.n	8005890 <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005958:	3201      	adds	r2, #1
 800595a:	4401      	add	r1, r0
 800595c:	2a10      	cmp	r2, #16
 800595e:	d195      	bne.n	800588c <BSP_I2C4_Init+0x100>
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	d1af      	bne.n	80058c6 <BSP_I2C4_Init+0x13a>
 8005966:	e7b0      	b.n	80058ca <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005968:	6813      	ldr	r3, [r2, #0]
 800596a:	f06f 0401 	mvn.w	r4, #1
 800596e:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005970:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005972:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005976:	4419      	add	r1, r3
 8005978:	9104      	str	r1, [sp, #16]
 800597a:	eb03 010b 	add.w	r1, r3, fp
 800597e:	4361      	muls	r1, r4
 8005980:	9c02      	ldr	r4, [sp, #8]
 8005982:	9101      	str	r1, [sp, #4]
 8005984:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005986:	9904      	ldr	r1, [sp, #16]
 8005988:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800598a:	f241 245c 	movw	r4, #4700	; 0x125c
 800598e:	9707      	str	r7, [sp, #28]
 8005990:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005994:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005996:	42a1      	cmp	r1, r4
 8005998:	d931      	bls.n	80059fe <BSP_I2C4_Init+0x272>
 800599a:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 800599e:	d22e      	bcs.n	80059fe <BSP_I2C4_Init+0x272>
 80059a0:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80059a2:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80059a6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80059aa:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 80059ae:	9c08      	ldr	r4, [sp, #32]
 80059b0:	f109 0918 	add.w	r9, r9, #24
 80059b4:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80059b6:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 80059ba:	f241 0447 	movw	r4, #4167	; 0x1047
 80059be:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80059c2:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80059c6:	45a2      	cmp	sl, r4
 80059c8:	d812      	bhi.n	80059f0 <BSP_I2C4_Init+0x264>
 80059ca:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 80059ce:	d30f      	bcc.n	80059f0 <BSP_I2C4_Init+0x264>
 80059d0:	4570      	cmp	r0, lr
 80059d2:	d20d      	bcs.n	80059f0 <BSP_I2C4_Init+0x264>
              error = -error;
 80059d4:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 80059d8:	bf28      	it	cs
 80059da:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80059dc:	9c03      	ldr	r4, [sp, #12]
 80059de:	4554      	cmp	r4, sl
 80059e0:	d906      	bls.n	80059f0 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80059e2:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 80059e4:	46b0      	mov	r8, r6
 80059e6:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80059ea:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 80059ec:	9c05      	ldr	r4, [sp, #20]
 80059ee:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80059f0:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80059f4:	eba9 0903 	sub.w	r9, r9, r3
 80059f8:	441d      	add	r5, r3
 80059fa:	449e      	add	lr, r3
 80059fc:	d1db      	bne.n	80059b6 <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80059fe:	9c01      	ldr	r4, [sp, #4]
 8005a00:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8005a04:	4419      	add	r1, r3
 8005a06:	eba4 0403 	sub.w	r4, r4, r3
 8005a0a:	9401      	str	r4, [sp, #4]
 8005a0c:	d1bd      	bne.n	800598a <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a0e:	3601      	adds	r6, #1
 8005a10:	3214      	adds	r2, #20
 8005a12:	e76d      	b.n	80058f0 <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 8005a14:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005a18:	e791      	b.n	800593e <BSP_I2C4_Init+0x1b2>
 8005a1a:	bf00      	nop
 8005a1c:	58001c00 	.word	0x58001c00
 8005a20:	240072b0 	.word	0x240072b0
 8005a24:	24001880 	.word	0x24001880
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	58021400 	.word	0x58021400
 8005a30:	3b9aca00 	.word	0x3b9aca00
 8005a34:	24002284 	.word	0x24002284
 8005a38:	24001884 	.word	0x24001884

08005a3c <BSP_I2C4_WriteReg>:
{
 8005a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005a3e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005a42:	9200      	str	r2, [sp, #0]
 8005a44:	460a      	mov	r2, r1
 8005a46:	4601      	mov	r1, r0
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <BSP_I2C4_WriteReg+0x30>)
 8005a4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f001 fa6a 	bl	8006f28 <HAL_I2C_Mem_Write>
 8005a54:	b140      	cbz	r0, 8005a68 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005a56:	4805      	ldr	r0, [pc, #20]	; (8005a6c <BSP_I2C4_WriteReg+0x30>)
 8005a58:	f001 fbdb 	bl	8007212 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005a5c:	2804      	cmp	r0, #4
 8005a5e:	bf0c      	ite	eq
 8005a60:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005a64:	f06f 0003 	mvnne.w	r0, #3
}
 8005a68:	b004      	add	sp, #16
 8005a6a:	bd10      	pop	{r4, pc}
 8005a6c:	240072b0 	.word	0x240072b0

08005a70 <BSP_I2C4_ReadReg>:
{
 8005a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005a72:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005a76:	9200      	str	r2, [sp, #0]
 8005a78:	460a      	mov	r2, r1
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	4808      	ldr	r0, [pc, #32]	; (8005aa0 <BSP_I2C4_ReadReg+0x30>)
 8005a7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a82:	2301      	movs	r3, #1
 8005a84:	f001 fb06 	bl	8007094 <HAL_I2C_Mem_Read>
 8005a88:	b140      	cbz	r0, 8005a9c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <BSP_I2C4_ReadReg+0x30>)
 8005a8c:	f001 fbc1 	bl	8007212 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005a90:	2804      	cmp	r0, #4
 8005a92:	bf0c      	ite	eq
 8005a94:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005a98:	f06f 0003 	mvnne.w	r0, #3
}
 8005a9c:	b004      	add	sp, #16
 8005a9e:	bd10      	pop	{r4, pc}
 8005aa0:	240072b0 	.word	0x240072b0

08005aa4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005aa4:	f000 bcd0 	b.w	8006448 <HAL_GetTick>

08005aa8 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005aa8:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005aaa:	4c21      	ldr	r4, [pc, #132]	; (8005b30 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005aac:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005aae:	4821      	ldr	r0, [pc, #132]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005ab0:	78a2      	ldrb	r2, [r4, #2]
 8005ab2:	7861      	ldrb	r1, [r4, #1]
 8005ab4:	f7ff fc53 	bl	800535e <MX25LM51245G_WriteEnable>
 8005ab8:	b118      	cbz	r0, 8005ac2 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aba:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005abe:	b005      	add	sp, #20
 8005ac0:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	481b      	ldr	r0, [pc, #108]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005acc:	78a2      	ldrb	r2, [r4, #2]
 8005ace:	7861      	ldrb	r1, [r4, #1]
 8005ad0:	f7ff fccd 	bl	800546e <MX25LM51245G_WriteCfg2Register>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1f0      	bne.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005ad8:	78a2      	ldrb	r2, [r4, #2]
 8005ada:	7861      	ldrb	r1, [r4, #1]
 8005adc:	4815      	ldr	r0, [pc, #84]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005ade:	f7ff fc3e 	bl	800535e <MX25LM51245G_WriteEnable>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1e8      	bne.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8005ae8:	2501      	movs	r5, #1
 8005aea:	4812      	ldr	r0, [pc, #72]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005aec:	9500      	str	r5, [sp, #0]
 8005aee:	78a2      	ldrb	r2, [r4, #2]
 8005af0:	7861      	ldrb	r1, [r4, #1]
 8005af2:	f7ff fcbc 	bl	800546e <MX25LM51245G_WriteCfg2Register>
 8005af6:	4604      	mov	r4, r0
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1de      	bne.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005afc:	2028      	movs	r0, #40	; 0x28
 8005afe:	f000 fca9 	bl	8006454 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005b02:	4622      	mov	r2, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	480b      	ldr	r0, [pc, #44]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005b08:	f7ff faf4 	bl	80050f4 <MX25LM51245G_AutoPollingMemReady>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d1d4      	bne.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005b10:	ab03      	add	r3, sp, #12
 8005b12:	4602      	mov	r2, r0
 8005b14:	4629      	mov	r1, r5
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4806      	ldr	r0, [pc, #24]	; (8005b34 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005b1c:	f7ff fd0d 	bl	800553a <MX25LM51245G_ReadCfg2Register>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d1ca      	bne.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8005b24:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	d0c8      	beq.n	8005abe <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8005b2c:	e7c5      	b.n	8005aba <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8005b2e:	bf00      	nop
 8005b30:	24002288 	.word	0x24002288
 8005b34:	24002290 	.word	0x24002290

08005b38 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005b38:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005b3a:	4d27      	ldr	r5, [pc, #156]	; (8005bd8 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005b3c:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005b3e:	4c27      	ldr	r4, [pc, #156]	; (8005bdc <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8005b40:	78aa      	ldrb	r2, [r5, #2]
 8005b42:	7869      	ldrb	r1, [r5, #1]
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff fc0a 	bl	800535e <MX25LM51245G_WriteEnable>
 8005b4a:	b118      	cbz	r0, 8005b54 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b4c:	f06f 0004 	mvn.w	r0, #4
}
 8005b50:	b005      	add	sp, #20
 8005b52:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005b54:	2303      	movs	r3, #3
 8005b56:	78aa      	ldrb	r2, [r5, #2]
 8005b58:	7869      	ldrb	r1, [r5, #1]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b62:	f7ff fc84 	bl	800546e <MX25LM51245G_WriteCfg2Register>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d1f0      	bne.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005b6a:	78aa      	ldrb	r2, [r5, #2]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	7869      	ldrb	r1, [r5, #1]
 8005b70:	f7ff fbf5 	bl	800535e <MX25LM51245G_WriteEnable>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1e9      	bne.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8005b78:	2302      	movs	r3, #2
 8005b7a:	78aa      	ldrb	r2, [r5, #2]
 8005b7c:	7869      	ldrb	r1, [r5, #1]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4603      	mov	r3, r0
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff fc73 	bl	800546e <MX25LM51245G_WriteCfg2Register>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d1df      	bne.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005b8c:	2028      	movs	r0, #40	; 0x28
 8005b8e:	f000 fc61 	bl	8006454 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005b96:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b98:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005ba0:	f001 fe58 	bl	8007854 <HAL_OSPI_Init>
 8005ba4:	b9a8      	cbnz	r0, 8005bd2 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4611      	mov	r1, r2
 8005bac:	f7ff faa2 	bl	80050f4 <MX25LM51245G_AutoPollingMemReady>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d1cb      	bne.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005bb4:	ab03      	add	r3, sp, #12
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7ff fcbb 	bl	800553a <MX25LM51245G_ReadCfg2Register>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1c1      	bne.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8005bc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d0bf      	beq.n	8005b50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005bd0:	e7bc      	b.n	8005b4c <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005bd2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005bd6:	e7bb      	b.n	8005b50 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005bd8:	24002288 	.word	0x24002288
 8005bdc:	24002290 	.word	0x24002290

08005be0 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8005be0:	4a0e      	ldr	r2, [pc, #56]	; (8005c1c <MX_OSPI_NOR_Init+0x3c>)
 8005be2:	2304      	movs	r3, #4
 8005be4:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005be8:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005bea:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005bec:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8005bee:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005bf0:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8005bf2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005bf6:	684a      	ldr	r2, [r1, #4]
 8005bf8:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005bfa:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8005bfc:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005bfe:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005c00:	68ca      	ldr	r2, [r1, #12]
 8005c02:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005c04:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005c08:	bf09      	itett	eq
 8005c0a:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005c0e:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005c10:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005c12:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005c16:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8005c18:	f001 be1c 	b.w	8007854 <HAL_OSPI_Init>
 8005c1c:	52005000 	.word	0x52005000

08005c20 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8005c20:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005c22:	b998      	cbnz	r0, 8005c4c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005c24:	4c0b      	ldr	r4, [pc, #44]	; (8005c54 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8005c26:	78a2      	ldrb	r2, [r4, #2]
 8005c28:	7861      	ldrb	r1, [r4, #1]
 8005c2a:	b95a      	cbnz	r2, 8005c44 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	480a      	ldr	r0, [pc, #40]	; (8005c58 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005c30:	f7ff fad6 	bl	80051e0 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8005c34:	b110      	cbz	r0, 8005c3c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c36:	f06f 0004 	mvn.w	r0, #4
}
 8005c3a:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005c3c:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005c3e:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005c40:	7023      	strb	r3, [r4, #0]
 8005c42:	e7fa      	b.n	8005c3a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8005c44:	4804      	ldr	r0, [pc, #16]	; (8005c58 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005c46:	f7ff fb3a 	bl	80052be <MX25LM51245G_EnableDTRMemoryMappedMode>
 8005c4a:	e7f3      	b.n	8005c34 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8005c4c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005c50:	e7f3      	b.n	8005c3a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8005c52:	bf00      	nop
 8005c54:	24002288 	.word	0x24002288
 8005c58:	24002290 	.word	0x24002290

08005c5c <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8005c5c:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005c5e:	b950      	cbnz	r0, 8005c76 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8005c60:	4c09      	ldr	r4, [pc, #36]	; (8005c88 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8005c62:	7823      	ldrb	r3, [r4, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d109      	bne.n	8005c7c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8005c68:	4808      	ldr	r0, [pc, #32]	; (8005c8c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8005c6a:	f002 f838 	bl	8007cde <HAL_OSPI_Abort>
 8005c6e:	b940      	cbnz	r0, 8005c82 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005c70:	2301      	movs	r3, #1
 8005c72:	7023      	strb	r3, [r4, #0]
}
 8005c74:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005c76:	f06f 0001 	mvn.w	r0, #1
 8005c7a:	e7fb      	b.n	8005c74 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8005c7c:	f06f 001a 	mvn.w	r0, #26
 8005c80:	e7f8      	b.n	8005c74 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c82:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005c86:	e7f5      	b.n	8005c74 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8005c88:	24002288 	.word	0x24002288
 8005c8c:	24002290 	.word	0x24002290

08005c90 <BSP_OSPI_NOR_DeInit>:
{
 8005c90:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d156      	bne.n	8005d44 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005c96:	4c2d      	ldr	r4, [pc, #180]	; (8005d4c <BSP_OSPI_NOR_DeInit+0xbc>)
 8005c98:	7823      	ldrb	r3, [r4, #0]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d04b      	beq.n	8005d36 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005c9e:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ca4:	482a      	ldr	r0, [pc, #168]	; (8005d50 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005ca6:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8005ca8:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005caa:	f000 fe8b 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4828      	ldr	r0, [pc, #160]	; (8005d54 <BSP_OSPI_NOR_DeInit+0xc4>)
 8005cb2:	f000 fe87 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8005cb6:	2140      	movs	r1, #64	; 0x40
 8005cb8:	4827      	ldr	r0, [pc, #156]	; (8005d58 <BSP_OSPI_NOR_DeInit+0xc8>)
 8005cba:	f000 fe83 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8005cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cc2:	4826      	ldr	r0, [pc, #152]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005cc4:	f000 fe7e 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8005cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ccc:	4823      	ldr	r0, [pc, #140]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005cce:	f000 fe79 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8005cd2:	2104      	movs	r1, #4
 8005cd4:	4822      	ldr	r0, [pc, #136]	; (8005d60 <BSP_OSPI_NOR_DeInit+0xd0>)
 8005cd6:	f000 fe75 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8005cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cde:	481f      	ldr	r0, [pc, #124]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005ce0:	f000 fe70 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	481d      	ldr	r0, [pc, #116]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005ce8:	f000 fe6c 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8005cec:	2120      	movs	r1, #32
 8005cee:	481b      	ldr	r0, [pc, #108]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005cf0:	f000 fe68 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8005cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf8:	4817      	ldr	r0, [pc, #92]	; (8005d58 <BSP_OSPI_NOR_DeInit+0xc8>)
 8005cfa:	f000 fe63 	bl	80069c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	4816      	ldr	r0, [pc, #88]	; (8005d5c <BSP_OSPI_NOR_DeInit+0xcc>)
 8005d02:	f000 fe5f 	bl	80069c4 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005d08:	4817      	ldr	r0, [pc, #92]	; (8005d68 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8005d0a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d10:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005d12:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8005d1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005d26:	f001 fe0b 	bl	8007940 <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2000      	moveq	r0, #0
 8005d30:	f06f 0003 	mvnne.w	r0, #3
}
 8005d34:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8005d36:	f7ff ff91 	bl	8005c5c <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0af      	beq.n	8005c9e <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8005d3e:	f06f 0004 	mvn.w	r0, #4
 8005d42:	e7f7      	b.n	8005d34 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d44:	f06f 0001 	mvn.w	r0, #1
 8005d48:	e7f4      	b.n	8005d34 <BSP_OSPI_NOR_DeInit+0xa4>
 8005d4a:	bf00      	nop
 8005d4c:	24002288 	.word	0x24002288
 8005d50:	58021400 	.word	0x58021400
 8005d54:	58020400 	.word	0x58020400
 8005d58:	58021800 	.word	0x58021800
 8005d5c:	58020c00 	.word	0x58020c00
 8005d60:	58021000 	.word	0x58021000
 8005d64:	58024400 	.word	0x58024400
 8005d68:	24002290 	.word	0x24002290

08005d6c <BSP_OSPI_NOR_ConfigFlash>:
{
 8005d6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005d70:	460d      	mov	r5, r1
 8005d72:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d156      	bne.n	8005e26 <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005d78:	4c2e      	ldr	r4, [pc, #184]	; (8005e34 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8005d7a:	7823      	ldrb	r3, [r4, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d055      	beq.n	8005e2c <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8005d80:	7863      	ldrb	r3, [r4, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d146      	bne.n	8005e14 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8005d86:	2901      	cmp	r1, #1
 8005d88:	78a2      	ldrb	r2, [r4, #2]
 8005d8a:	d109      	bne.n	8005da0 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8005d8c:	4296      	cmp	r6, r2
 8005d8e:	d107      	bne.n	8005da0 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d90:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005d92:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8005d94:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d96:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005d98:	70a6      	strb	r6, [r4, #2]
}
 8005d9a:	b004      	add	sp, #16
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005da0:	4f25      	ldr	r7, [pc, #148]	; (8005e38 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005da2:	2101      	movs	r1, #1
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff fada 	bl	800535e <MX25LM51245G_WriteEnable>
 8005daa:	4603      	mov	r3, r0
 8005dac:	bb78      	cbnz	r0, 8005e0e <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8005dae:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8005db2:	9000      	str	r0, [sp, #0]
 8005db4:	4638      	mov	r0, r7
 8005db6:	78a2      	ldrb	r2, [r4, #2]
 8005db8:	7861      	ldrb	r1, [r4, #1]
 8005dba:	f7ff fb58 	bl	800546e <MX25LM51245G_WriteCfg2Register>
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	bb28      	cbnz	r0, 8005e0e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005dc2:	2028      	movs	r0, #40	; 0x28
 8005dc4:	f000 fb46 	bl	8006454 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005dc8:	78a3      	ldrb	r3, [r4, #2]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d106      	bne.n	8005ddc <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005dce:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005dd0:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005dd4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005dd8:	f001 fd3c 	bl	8007854 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4816      	ldr	r0, [pc, #88]	; (8005e38 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005de0:	4611      	mov	r1, r2
 8005de2:	f7ff f987 	bl	80050f4 <MX25LM51245G_AutoPollingMemReady>
 8005de6:	b990      	cbnz	r0, 8005e0e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005de8:	ab03      	add	r3, sp, #12
 8005dea:	4602      	mov	r2, r0
 8005dec:	4601      	mov	r1, r0
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	4811      	ldr	r0, [pc, #68]	; (8005e38 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005df4:	f7ff fba1 	bl	800553a <MX25LM51245G_ReadCfg2Register>
 8005df8:	b948      	cbnz	r0, 8005e0e <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8005dfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005dfe:	b933      	cbnz	r3, 8005e0e <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005e00:	2d01      	cmp	r5, #1
 8005e02:	d1c5      	bne.n	8005d90 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005e04:	78a3      	ldrb	r3, [r4, #2]
 8005e06:	b94b      	cbnz	r3, 8005e1c <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8005e08:	f7ff fe96 	bl	8005b38 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8005e0c:	e008      	b.n	8005e20 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005e0e:	f06f 0004 	mvn.w	r0, #4
 8005e12:	e7c2      	b.n	8005d9a <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8005e14:	2901      	cmp	r1, #1
 8005e16:	d1bb      	bne.n	8005d90 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d1f5      	bne.n	8005e08 <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8005e1c:	f7ff fe44 	bl	8005aa8 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d1ba      	bne.n	8005d9a <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005e24:	e7b4      	b.n	8005d90 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8005e26:	f06f 0001 	mvn.w	r0, #1
 8005e2a:	e7b6      	b.n	8005d9a <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8005e2c:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8005e30:	e7b3      	b.n	8005d9a <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005e32:	bf00      	nop
 8005e34:	24002288 	.word	0x24002288
 8005e38:	24002290 	.word	0x24002290

08005e3c <MX_OSPI_ClockConfig>:
{
 8005e3c:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8005e42:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005e44:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005e46:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005e48:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005e4a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005e4c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005e4e:	2305      	movs	r3, #5
 8005e50:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8005e54:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005e56:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005e58:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005e5c:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005e5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005e62:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005e64:	f002 ffe4 	bl	8008e30 <HAL_RCCEx_PeriphCLKConfig>
}
 8005e68:	b02f      	add	sp, #188	; 0xbc
 8005e6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005e70 <BSP_OSPI_NOR_Init>:
{
 8005e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e74:	460e      	mov	r6, r1
 8005e76:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f040 8160 	bne.w	800613e <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8005e7e:	4cb1      	ldr	r4, [pc, #708]	; (8006144 <BSP_OSPI_NOR_Init+0x2d4>)
 8005e80:	7825      	ldrb	r5, [r4, #0]
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	f040 8159 	bne.w	800613a <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8005e88:	4baf      	ldr	r3, [pc, #700]	; (8006148 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005e8a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005e8e:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005e92:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8005e94:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005e98:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005e9a:	48ac      	ldr	r0, [pc, #688]	; (800614c <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8005e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005ea4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005ea8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005eac:	9201      	str	r2, [sp, #4]
 8005eae:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8005eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005eb8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ebe:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8005ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ec4:	f042 0220 	orr.w	r2, r2, #32
 8005ec8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ed0:	f002 0220 	and.w	r2, r2, #32
 8005ed4:	9202      	str	r2, [sp, #8]
 8005ed6:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8005ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ee8:	f002 0202 	and.w	r2, r2, #2
 8005eec:	9203      	str	r2, [sp, #12]
 8005eee:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8005ef0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005efc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f00:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f04:	9204      	str	r2, [sp, #16]
 8005f06:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8005f08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f0c:	f042 0208 	orr.w	r2, r2, #8
 8005f10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f18:	f002 0208 	and.w	r2, r2, #8
 8005f1c:	9205      	str	r2, [sp, #20]
 8005f1e:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8005f20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f24:	f042 0208 	orr.w	r2, r2, #8
 8005f28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f30:	f002 0208 	and.w	r2, r2, #8
 8005f34:	9206      	str	r2, [sp, #24]
 8005f36:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8005f38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f3c:	f042 0210 	orr.w	r2, r2, #16
 8005f40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f48:	f002 0210 	and.w	r2, r2, #16
 8005f4c:	9207      	str	r2, [sp, #28]
 8005f4e:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8005f50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f54:	f042 0208 	orr.w	r2, r2, #8
 8005f58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f60:	f002 0208 	and.w	r2, r2, #8
 8005f64:	9208      	str	r2, [sp, #32]
 8005f66:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8005f68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f78:	f002 0208 	and.w	r2, r2, #8
 8005f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8005f80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f84:	f042 0208 	orr.w	r2, r2, #8
 8005f88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f90:	f002 0208 	and.w	r2, r2, #8
 8005f94:	920a      	str	r2, [sp, #40]	; 0x28
 8005f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8005f98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005fa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fa8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005fb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fb4:	f042 0208 	orr.w	r2, r2, #8
 8005fb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbc:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005fca:	2340      	movs	r3, #64	; 0x40
 8005fcc:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd0:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005fd2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd6:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005fda:	f000 fc0d 	bl	80067f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005fde:	a911      	add	r1, sp, #68	; 0x44
 8005fe0:	485b      	ldr	r0, [pc, #364]	; (8006150 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005fe2:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005fe4:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8005fe6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005fea:	f000 fc05 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005ff2:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005ff4:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005ff6:	a911      	add	r1, sp, #68	; 0x44
 8005ff8:	4856      	ldr	r0, [pc, #344]	; (8006154 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005ffa:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005ffc:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005ffe:	f000 fbfb 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8006002:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8006006:	a911      	add	r1, sp, #68	; 0x44
 8006008:	4853      	ldr	r0, [pc, #332]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 800600a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 800600c:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 800600e:	f000 fbf3 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8006012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8006016:	a911      	add	r1, sp, #68	; 0x44
 8006018:	484f      	ldr	r0, [pc, #316]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 800601a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 800601c:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 800601e:	f000 fbeb 	bl	80067f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8006022:	a911      	add	r1, sp, #68	; 0x44
 8006024:	484d      	ldr	r0, [pc, #308]	; (800615c <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8006026:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8006028:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 800602a:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 800602c:	f000 fbe4 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8006030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8006034:	a911      	add	r1, sp, #68	; 0x44
 8006036:	4848      	ldr	r0, [pc, #288]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8006038:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 800603a:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 800603c:	f000 fbdc 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8006040:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8006042:	a911      	add	r1, sp, #68	; 0x44
 8006044:	4844      	ldr	r0, [pc, #272]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8006046:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8006048:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 800604c:	f000 fbd4 	bl	80067f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8006050:	a911      	add	r1, sp, #68	; 0x44
 8006052:	4841      	ldr	r0, [pc, #260]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8006054:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8006056:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 800605a:	f000 fbcd 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 800605e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8006062:	a911      	add	r1, sp, #68	; 0x44
 8006064:	4839      	ldr	r0, [pc, #228]	; (800614c <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8006066:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8006068:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 800606a:	f000 fbc5 	bl	80067f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 800606e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8006070:	a911      	add	r1, sp, #68	; 0x44
 8006072:	4839      	ldr	r0, [pc, #228]	; (8006158 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8006074:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8006076:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 800607a:	f000 fbbd 	bl	80067f8 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800607e:	a811      	add	r0, sp, #68	; 0x44
 8006080:	f7ff f81f 	bl	80050c2 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 8006086:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800608a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800608e:	b10b      	cbz	r3, 8006094 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006090:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006094:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8006096:	4832      	ldr	r0, [pc, #200]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006098:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800609a:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 800609c:	7873      	ldrb	r3, [r6, #1]
 800609e:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 80060a0:	f7ff fecc 	bl	8005e3c <MX_OSPI_ClockConfig>
 80060a4:	b120      	cbz	r0, 80060b0 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80060a6:	f06f 0003 	mvn.w	r0, #3
}
 80060aa:	b01b      	add	sp, #108	; 0x6c
 80060ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80060b0:	a90d      	add	r1, sp, #52	; 0x34
 80060b2:	482b      	ldr	r0, [pc, #172]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060b4:	f7ff fd94 	bl	8005be0 <MX_OSPI_NOR_Init>
 80060b8:	4602      	mov	r2, r0
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d1f3      	bne.n	80060a6 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060be:	4601      	mov	r1, r0
 80060c0:	4827      	ldr	r0, [pc, #156]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060c2:	f7ff faa4 	bl	800560e <MX25LM51245G_ResetEnable>
 80060c6:	4602      	mov	r2, r0
 80060c8:	b110      	cbz	r0, 80060d0 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060ca:	f06f 0004 	mvn.w	r0, #4
 80060ce:	e7ec      	b.n	80060aa <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060d0:	4601      	mov	r1, r0
 80060d2:	4823      	ldr	r0, [pc, #140]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060d4:	f7ff fad4 	bl	8005680 <MX25LM51245G_ResetMemory>
 80060d8:	4602      	mov	r2, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1f5      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060de:	2101      	movs	r1, #1
 80060e0:	481f      	ldr	r0, [pc, #124]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060e2:	f7ff fa94 	bl	800560e <MX25LM51245G_ResetEnable>
 80060e6:	4602      	mov	r2, r0
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d1ee      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80060ec:	2101      	movs	r1, #1
 80060ee:	481c      	ldr	r0, [pc, #112]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060f0:	f7ff fac6 	bl	8005680 <MX25LM51245G_ResetMemory>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d1e8      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80060f8:	2201      	movs	r2, #1
 80060fa:	4819      	ldr	r0, [pc, #100]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 80060fc:	4611      	mov	r1, r2
 80060fe:	f7ff fa86 	bl	800560e <MX25LM51245G_ResetEnable>
 8006102:	2800      	cmp	r0, #0
 8006104:	d1e1      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8006106:	2201      	movs	r2, #1
 8006108:	4815      	ldr	r0, [pc, #84]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 800610a:	4611      	mov	r1, r2
 800610c:	f7ff fab8 	bl	8005680 <MX25LM51245G_ResetMemory>
 8006110:	2800      	cmp	r0, #0
 8006112:	d1da      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8006114:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8006116:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8006118:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800611a:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800611c:	f000 f99a 	bl	8006454 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8006120:	78a2      	ldrb	r2, [r4, #2]
 8006122:	7861      	ldrb	r1, [r4, #1]
 8006124:	480e      	ldr	r0, [pc, #56]	; (8006160 <BSP_OSPI_NOR_Init+0x2f0>)
 8006126:	f7fe ffe5 	bl	80050f4 <MX25LM51245G_AutoPollingMemReady>
 800612a:	2800      	cmp	r0, #0
 800612c:	d1cd      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800612e:	7872      	ldrb	r2, [r6, #1]
 8006130:	7831      	ldrb	r1, [r6, #0]
 8006132:	f7ff fe1b 	bl	8005d6c <BSP_OSPI_NOR_ConfigFlash>
 8006136:	2800      	cmp	r0, #0
 8006138:	d1c7      	bne.n	80060ca <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 800613a:	2000      	movs	r0, #0
 800613c:	e7b5      	b.n	80060aa <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 800613e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006142:	e7b2      	b.n	80060aa <BSP_OSPI_NOR_Init+0x23a>
 8006144:	24002288 	.word	0x24002288
 8006148:	58024400 	.word	0x58024400
 800614c:	58021800 	.word	0x58021800
 8006150:	58020400 	.word	0x58020400
 8006154:	58021400 	.word	0x58021400
 8006158:	58020c00 	.word	0x58020c00
 800615c:	58021000 	.word	0x58021000
 8006160:	24002290 	.word	0x24002290

08006164 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006168:	460c      	mov	r4, r1
 800616a:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800616c:	2800      	cmp	r0, #0
 800616e:	d163      	bne.n	8006238 <BSP_TS_Init+0xd4>
 8006170:	680b      	ldr	r3, [r1, #0]
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8006178:	d25e      	bcs.n	8006238 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800617a:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800617c:	1e51      	subs	r1, r2, #1
 800617e:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 8006182:	d259      	bcs.n	8006238 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006184:	4293      	cmp	r3, r2
 8006186:	bf28      	it	cs
 8006188:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800618a:	68e2      	ldr	r2, [r4, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d853      	bhi.n	8006238 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8006190:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006192:	4d2b      	ldr	r5, [pc, #172]	; (8006240 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8006194:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006196:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 8006198:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800619c:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 800619e:	4b29      	ldr	r3, [pc, #164]	; (8006244 <BSP_TS_Init+0xe0>)
 80061a0:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <BSP_TS_Init+0xe4>)
 80061a4:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80061a6:	4b29      	ldr	r3, [pc, #164]	; (800624c <BSP_TS_Init+0xe8>)
 80061a8:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80061aa:	4b29      	ldr	r3, [pc, #164]	; (8006250 <BSP_TS_Init+0xec>)
 80061ac:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <BSP_TS_Init+0xf0>)
 80061b0:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80061b2:	f7fe fef1 	bl	8004f98 <FT5336_RegisterBusIO>
 80061b6:	b128      	cbz	r0, 80061c4 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 80061b8:	f04f 35ff 	mov.w	r5, #4294967295
}
 80061bc:	4628      	mov	r0, r5
 80061be:	b008      	add	sp, #32
 80061c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80061c4:	a901      	add	r1, sp, #4
 80061c6:	4628      	mov	r0, r5
 80061c8:	f7fe fe4c 	bl	8004e64 <FT5336_ReadID>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1f3      	bne.n	80061b8 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	2b51      	cmp	r3, #81	; 0x51
 80061d4:	d1f0      	bne.n	80061b8 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80061d8:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80061da:	4f20      	ldr	r7, [pc, #128]	; (800625c <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80061dc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006264 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80061e0:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80061e2:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4798      	blx	r3
 80061ea:	4605      	mov	r5, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1e3      	bne.n	80061b8 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80061f0:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80061f2:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80061f4:	4e1a      	ldr	r6, [pc, #104]	; (8006260 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80061f6:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80061f8:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80061fa:	6863      	ldr	r3, [r4, #4]
 80061fc:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80061fe:	68a3      	ldr	r3, [r4, #8]
 8006200:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006206:	f8d8 3000 	ldr.w	r3, [r8]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	4798      	blx	r3
 800620e:	2800      	cmp	r0, #0
 8006210:	db0f      	blt.n	8006232 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006212:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006214:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006216:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006218:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800621a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800621c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006222:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006224:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006226:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006228:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800622a:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800622c:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8006230:	e7c4      	b.n	80061bc <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006232:	f06f 0504 	mvn.w	r5, #4
 8006236:	e7c1      	b.n	80061bc <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8006238:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800623c:	e7be      	b.n	80061bc <BSP_TS_Init+0x58>
 800623e:	bf00      	nop
 8006240:	240022f0 	.word	0x240022f0
 8006244:	0800578d 	.word	0x0800578d
 8006248:	080056f5 	.word	0x080056f5
 800624c:	08005a71 	.word	0x08005a71
 8006250:	08005a3d 	.word	0x08005a3d
 8006254:	08005aa5 	.word	0x08005aa5
 8006258:	2400003c 	.word	0x2400003c
 800625c:	24002318 	.word	0x24002318
 8006260:	2400231c 	.word	0x2400231c
 8006264:	24002344 	.word	0x24002344

08006268 <BSP_TS_GetState>:
{
 8006268:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800626c:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 800626e:	2800      	cmp	r0, #0
 8006270:	d151      	bne.n	8006316 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006272:	4b2a      	ldr	r3, [pc, #168]	; (800631c <BSP_TS_GetState+0xb4>)
 8006274:	a901      	add	r1, sp, #4
 8006276:	4a2a      	ldr	r2, [pc, #168]	; (8006320 <BSP_TS_GetState+0xb8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6810      	ldr	r0, [r2, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4798      	blx	r3
 8006280:	2800      	cmp	r0, #0
 8006282:	db45      	blt.n	8006310 <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 8006284:	4b27      	ldr	r3, [pc, #156]	; (8006324 <BSP_TS_GetState+0xbc>)
 8006286:	9801      	ldr	r0, [sp, #4]
 8006288:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800628c:	6a1f      	ldr	r7, [r3, #32]
 800628e:	2800      	cmp	r0, #0
 8006290:	d03a      	beq.n	8006308 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006292:	689e      	ldr	r6, [r3, #8]
 8006294:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006298:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 800629a:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 800629e:	bf4b      	itete	mi
 80062a0:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 80062a2:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 80062a4:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 80062a6:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80062a8:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80062ac:	bf1c      	itt	ne
 80062ae:	f108 35ff 	addne.w	r5, r8, #4294967295
 80062b2:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80062b6:	f8d3 e014 	ldr.w	lr, [r3, #20]
 80062ba:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80062bc:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80062be:	bf48      	it	mi
 80062c0:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80062c4:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80062c6:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80062c8:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80062ca:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80062cc:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80062ce:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80062d2:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80062d6:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80062d8:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80062da:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80062dc:	bf8c      	ite	hi
 80062de:	eba5 060c 	subhi.w	r6, r5, ip
 80062e2:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80062e6:	42ba      	cmp	r2, r7
 80062e8:	bf8c      	ite	hi
 80062ea:	1bd1      	subhi	r1, r2, r7
 80062ec:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80062ee:	42b0      	cmp	r0, r6
 80062f0:	d301      	bcc.n	80062f6 <BSP_TS_GetState+0x8e>
 80062f2:	4288      	cmp	r0, r1
 80062f4:	d205      	bcs.n	8006302 <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80062f6:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80062f8:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 80062fa:	2000      	movs	r0, #0
}
 80062fc:	b004      	add	sp, #16
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006302:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8006306:	e7f8      	b.n	80062fa <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006308:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800630c:	60a7      	str	r7, [r4, #8]
 800630e:	e7f5      	b.n	80062fc <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006310:	f06f 0004 	mvn.w	r0, #4
 8006314:	e7f2      	b.n	80062fc <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006316:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800631a:	e7ef      	b.n	80062fc <BSP_TS_GetState+0x94>
 800631c:	24002344 	.word	0x24002344
 8006320:	24002318 	.word	0x24002318
 8006324:	2400231c 	.word	0x2400231c

08006328 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006328:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <SystemInit+0x8c>)
 800632a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800632e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006336:	4a20      	ldr	r2, [pc, #128]	; (80063b8 <SystemInit+0x90>)
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	2b06      	cmp	r3, #6
 8006340:	d805      	bhi.n	800634e <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006342:	6813      	ldr	r3, [r2, #0]
 8006344:	f023 030f 	bic.w	r3, r3, #15
 8006348:	f043 0307 	orr.w	r3, r3, #7
 800634c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <SystemInit+0x94>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006358:	2200      	movs	r2, #0
 800635a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <SystemInit+0x98>)
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006362:	4915      	ldr	r1, [pc, #84]	; (80063b8 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8006364:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006366:	680a      	ldr	r2, [r1, #0]
 8006368:	0712      	lsls	r2, r2, #28
 800636a:	d505      	bpl.n	8006378 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800636c:	680a      	ldr	r2, [r1, #0]
 800636e:	f022 020f 	bic.w	r2, r2, #15
 8006372:	f042 0207 	orr.w	r2, r2, #7
 8006376:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006378:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800637a:	4912      	ldr	r1, [pc, #72]	; (80063c4 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 800637c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800637e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006380:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006382:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006384:	4910      	ldr	r1, [pc, #64]	; (80063c8 <SystemInit+0xa0>)
 8006386:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006388:	4910      	ldr	r1, [pc, #64]	; (80063cc <SystemInit+0xa4>)
 800638a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800638c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800638e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006392:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006394:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800639c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80063a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <SystemInit+0xa8>)
 80063a6:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063ac:	4b01      	ldr	r3, [pc, #4]	; (80063b4 <SystemInit+0x8c>)
 80063ae:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	e000ed00 	.word	0xe000ed00
 80063b8:	52002000 	.word	0x52002000
 80063bc:	58024400 	.word	0x58024400
 80063c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80063c4:	02020200 	.word	0x02020200
 80063c8:	01ff0000 	.word	0x01ff0000
 80063cc:	01010280 	.word	0x01010280
 80063d0:	52004000 	.word	0x52004000

080063d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063d4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063d6:	2003      	movs	r0, #3
 80063d8:	f000 f84e 	bl	8006478 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063dc:	f002 fa02 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 80063e0:	490f      	ldr	r1, [pc, #60]	; (8006420 <HAL_Init+0x4c>)
 80063e2:	4a10      	ldr	r2, [pc, #64]	; (8006424 <HAL_Init+0x50>)
 80063e4:	698b      	ldr	r3, [r1, #24]
 80063e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80063ea:	5cd3      	ldrb	r3, [r2, r3]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063f2:	698b      	ldr	r3, [r1, #24]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <HAL_Init+0x54>)
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	fa20 f303 	lsr.w	r3, r0, r3
 8006404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <HAL_Init+0x58>)
 8006408:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800640a:	2000      	movs	r0, #0
 800640c:	f7fb fc0a 	bl	8001c24 <HAL_InitTick>
 8006410:	4604      	mov	r4, r0
 8006412:	b918      	cbnz	r0, 800641c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006414:	f7fa fffe 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006418:	4620      	mov	r0, r4
 800641a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800641c:	2401      	movs	r4, #1
 800641e:	e7fb      	b.n	8006418 <HAL_Init+0x44>
 8006420:	58024400 	.word	0x58024400
 8006424:	0801e6a0 	.word	0x0801e6a0
 8006428:	24000070 	.word	0x24000070
 800642c:	2400006c 	.word	0x2400006c

08006430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006430:	4a03      	ldr	r2, [pc, #12]	; (8006440 <HAL_IncTick+0x10>)
 8006432:	4b04      	ldr	r3, [pc, #16]	; (8006444 <HAL_IncTick+0x14>)
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	440b      	add	r3, r1
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	240072fc 	.word	0x240072fc
 8006444:	24000074 	.word	0x24000074

08006448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006448:	4b01      	ldr	r3, [pc, #4]	; (8006450 <HAL_GetTick+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	240072fc 	.word	0x240072fc

08006454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006458:	f7ff fff6 	bl	8006448 <HAL_GetTick>
 800645c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800645e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006460:	bf1e      	ittt	ne
 8006462:	4b04      	ldrne	r3, [pc, #16]	; (8006474 <HAL_Delay+0x20>)
 8006464:	781b      	ldrbne	r3, [r3, #0]
 8006466:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006468:	f7ff ffee 	bl	8006448 <HAL_GetTick>
 800646c:	1b43      	subs	r3, r0, r5
 800646e:	42a3      	cmp	r3, r4
 8006470:	d3fa      	bcc.n	8006468 <HAL_Delay+0x14>
  {
  }
}
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	24000074 	.word	0x24000074

08006478 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006478:	4907      	ldr	r1, [pc, #28]	; (8006498 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800647a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800647c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800647e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006486:	0412      	lsls	r2, r2, #16
 8006488:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800648a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800648c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006494:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006496:	4770      	bx	lr
 8006498:	e000ed00 	.word	0xe000ed00

0800649c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800649e:	b530      	push	{r4, r5, lr}
 80064a0:	68dc      	ldr	r4, [r3, #12]
 80064a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064aa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064ac:	2d04      	cmp	r5, #4
 80064ae:	bf28      	it	cs
 80064b0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064b2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064b8:	bf8c      	ite	hi
 80064ba:	3c03      	subhi	r4, #3
 80064bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064be:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80064c2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064c4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064cc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d0:	fa01 f104 	lsl.w	r1, r1, r4
 80064d4:	ea41 0302 	orr.w	r3, r1, r2
 80064d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80064dc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80064de:	db06      	blt.n	80064ee <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80064e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80064e8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80064ec:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ee:	f000 000f 	and.w	r0, r0, #15
 80064f2:	4a02      	ldr	r2, [pc, #8]	; (80064fc <HAL_NVIC_SetPriority+0x60>)
 80064f4:	5413      	strb	r3, [r2, r0]
 80064f6:	e7f9      	b.n	80064ec <HAL_NVIC_SetPriority+0x50>
 80064f8:	e000ed00 	.word	0xe000ed00
 80064fc:	e000ed14 	.word	0xe000ed14

08006500 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006500:	2800      	cmp	r0, #0
 8006502:	db08      	blt.n	8006516 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006504:	2301      	movs	r3, #1
 8006506:	0942      	lsrs	r2, r0, #5
 8006508:	f000 001f 	and.w	r0, r0, #31
 800650c:	fa03 f000 	lsl.w	r0, r3, r0
 8006510:	4b01      	ldr	r3, [pc, #4]	; (8006518 <HAL_NVIC_EnableIRQ+0x18>)
 8006512:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006516:	4770      	bx	lr
 8006518:	e000e100 	.word	0xe000e100

0800651c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800651c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <HAL_MPU_Disable+0x18>)
 8006522:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006528:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800652a:	2200      	movs	r2, #0
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <HAL_MPU_Disable+0x1c>)
 800652e:	605a      	str	r2, [r3, #4]
}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	e000ed00 	.word	0xe000ed00
 8006538:	e000ed90 	.word	0xe000ed90

0800653c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800653c:	4a06      	ldr	r2, [pc, #24]	; (8006558 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800653e:	f040 0001 	orr.w	r0, r0, #1
 8006542:	4b06      	ldr	r3, [pc, #24]	; (800655c <HAL_MPU_Enable+0x20>)
 8006544:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006546:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800654e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006552:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006556:	4770      	bx	lr
 8006558:	e000ed00 	.word	0xe000ed00
 800655c:	e000ed90 	.word	0xe000ed90

08006560 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006560:	7843      	ldrb	r3, [r0, #1]
 8006562:	4a12      	ldr	r2, [pc, #72]	; (80065ac <HAL_MPU_ConfigRegion+0x4c>)
{
 8006564:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006566:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006568:	7801      	ldrb	r1, [r0, #0]
 800656a:	b1d9      	cbz	r1, 80065a4 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800656c:	6843      	ldr	r3, [r0, #4]
 800656e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006570:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006572:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006574:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006576:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800657a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800657c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800657e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006582:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006584:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006588:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800658a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800658e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006590:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006594:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006596:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800659a:	7a01      	ldrb	r1, [r0, #8]
 800659c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80065a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80065a2:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80065a4:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80065a6:	6111      	str	r1, [r2, #16]
}
 80065a8:	e7fb      	b.n	80065a2 <HAL_MPU_ConfigRegion+0x42>
 80065aa:	bf00      	nop
 80065ac:	e000ed90 	.word	0xe000ed90

080065b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80065b0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80065b2:	4604      	mov	r4, r0
 80065b4:	b908      	cbnz	r0, 80065ba <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80065b6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80065b8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80065ba:	7f43      	ldrb	r3, [r0, #29]
 80065bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80065c0:	b913      	cbnz	r3, 80065c8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80065c2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80065c4:	f7fa ff3e 	bl	8001444 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80065c8:	2302      	movs	r3, #2
 80065ca:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80065cc:	7923      	ldrb	r3, [r4, #4]
 80065ce:	b9e3      	cbnz	r3, 800660a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <HAL_CRC_Init+0x70>)
 80065d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	f022 0218 	bic.w	r2, r2, #24
 80065dc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80065de:	7962      	ldrb	r2, [r4, #5]
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	b9d2      	cbnz	r2, 800661a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80065e4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80065e8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80065ea:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	6961      	ldr	r1, [r4, #20]
 80065f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065f4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80065f6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80065f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006600:	430a      	orrs	r2, r1
 8006602:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006604:	2301      	movs	r3, #1
 8006606:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006608:	e7d6      	b.n	80065b8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800660a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f808 	bl	8006624 <HAL_CRCEx_Polynomial_Set>
 8006614:	2800      	cmp	r0, #0
 8006616:	d0e2      	beq.n	80065de <HAL_CRC_Init+0x2e>
 8006618:	e7cd      	b.n	80065b6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800661a:	6922      	ldr	r2, [r4, #16]
 800661c:	e7e4      	b.n	80065e8 <HAL_CRC_Init+0x38>
 800661e:	bf00      	nop
 8006620:	04c11db7 	.word	0x04c11db7

08006624 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006624:	231f      	movs	r3, #31
{
 8006626:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006628:	3b01      	subs	r3, #1
 800662a:	d306      	bcc.n	800663a <HAL_CRCEx_Polynomial_Set+0x16>
 800662c:	fa21 f403 	lsr.w	r4, r1, r3
 8006630:	07e4      	lsls	r4, r4, #31
 8006632:	d5f9      	bpl.n	8006628 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006634:	2a08      	cmp	r2, #8
 8006636:	d014      	beq.n	8006662 <HAL_CRCEx_Polynomial_Set+0x3e>
 8006638:	d802      	bhi.n	8006640 <HAL_CRCEx_Polynomial_Set+0x1c>
 800663a:	b13a      	cbz	r2, 800664c <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 800663c:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800663e:	e00d      	b.n	800665c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8006640:	2a10      	cmp	r2, #16
 8006642:	d00c      	beq.n	800665e <HAL_CRCEx_Polynomial_Set+0x3a>
 8006644:	2a18      	cmp	r2, #24
 8006646:	d1f9      	bne.n	800663c <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8006648:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800664a:	d8f7      	bhi.n	800663c <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800664c:	6800      	ldr	r0, [r0, #0]
 800664e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006650:	6883      	ldr	r3, [r0, #8]
 8006652:	f023 0318 	bic.w	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	6082      	str	r2, [r0, #8]
 800665a:	2000      	movs	r0, #0
}
 800665c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800665e:	2b07      	cmp	r3, #7
 8006660:	e7f3      	b.n	800664a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006662:	2b0f      	cmp	r3, #15
 8006664:	e7f1      	b.n	800664a <HAL_CRCEx_Polynomial_Set+0x26>

08006666 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006666:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006668:	4604      	mov	r4, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d036      	beq.n	80066dc <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800666e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006676:	b91b      	cbnz	r3, 8006680 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006678:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800667c:	f7fa fefa 	bl	8001474 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006680:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006682:	69e0      	ldr	r0, [r4, #28]
 8006684:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006686:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800668e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006696:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800669e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066a0:	68a2      	ldr	r2, [r4, #8]
 80066a2:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 80066a6:	4302      	orrs	r2, r0
 80066a8:	f021 0101 	bic.w	r1, r1, #1
 80066ac:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80066ae:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80066b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b4:	0c12      	lsrs	r2, r2, #16
 80066b6:	0412      	lsls	r2, r2, #16
 80066b8:	430a      	orrs	r2, r1
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80066bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066be:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80066c2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80066c6:	0552      	lsls	r2, r2, #21
 80066c8:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80066cc:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80066ce:	430a      	orrs	r2, r1
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80066d2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80066d4:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80066d6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80066da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80066dc:	2001      	movs	r0, #1
 80066de:	e7fc      	b.n	80066da <HAL_DMA2D_Init+0x74>

080066e0 <HAL_DMA2D_LineEventCallback>:
 80066e0:	4770      	bx	lr

080066e2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80066e2:	4770      	bx	lr

080066e4 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80066e4:	6803      	ldr	r3, [r0, #0]
{
 80066e6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80066e8:	685e      	ldr	r6, [r3, #4]
{
 80066ea:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80066ec:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066ee:	07f2      	lsls	r2, r6, #31
 80066f0:	d514      	bpl.n	800671c <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80066f2:	05e9      	lsls	r1, r5, #23
 80066f4:	d512      	bpl.n	800671c <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066fc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80066fe:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006706:	2201      	movs	r2, #1
 8006708:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800670a:	2304      	movs	r3, #4
 800670c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006710:	2300      	movs	r3, #0
 8006712:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006716:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006718:	b103      	cbz	r3, 800671c <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800671a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800671c:	06b2      	lsls	r2, r6, #26
 800671e:	d516      	bpl.n	800674e <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006720:	04ab      	lsls	r3, r5, #18
 8006722:	d514      	bpl.n	800674e <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800672c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800672e:	2220      	movs	r2, #32
 8006730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800673a:	2304      	movs	r3, #4
 800673c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006740:	2300      	movs	r3, #0
 8006742:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006748:	b10b      	cbz	r3, 800674e <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800674a:	4620      	mov	r0, r4
 800674c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800674e:	0730      	lsls	r0, r6, #28
 8006750:	d516      	bpl.n	8006780 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006752:	0529      	lsls	r1, r5, #20
 8006754:	d514      	bpl.n	8006780 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800675e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006760:	2208      	movs	r2, #8
 8006762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006766:	f043 0304 	orr.w	r3, r3, #4
 800676a:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800676c:	2304      	movs	r3, #4
 800676e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006772:	2300      	movs	r3, #0
 8006774:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800677a:	b10b      	cbz	r3, 8006780 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800677c:	4620      	mov	r0, r4
 800677e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006780:	0772      	lsls	r2, r6, #29
 8006782:	d50b      	bpl.n	800679c <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006784:	056b      	lsls	r3, r5, #21
 8006786:	d509      	bpl.n	800679c <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006788:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800678a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006794:	2204      	movs	r2, #4
 8006796:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006798:	f7ff ffa2 	bl	80066e0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800679c:	07b0      	lsls	r0, r6, #30
 800679e:	d514      	bpl.n	80067ca <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80067a0:	05a9      	lsls	r1, r5, #22
 80067a2:	d512      	bpl.n	80067ca <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80067ae:	2202      	movs	r2, #2
 80067b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80067b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b4:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80067bc:	2300      	movs	r3, #0
 80067be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80067c2:	6a23      	ldr	r3, [r4, #32]
 80067c4:	b10b      	cbz	r3, 80067ca <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80067c6:	4620      	mov	r0, r4
 80067c8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80067ca:	06f2      	lsls	r2, r6, #27
 80067cc:	d513      	bpl.n	80067f6 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80067ce:	04eb      	lsls	r3, r5, #19
 80067d0:	d511      	bpl.n	80067f6 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80067d2:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80067d4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80067de:	2210      	movs	r2, #16
 80067e0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80067e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80067ec:	2300      	movs	r3, #0
 80067ee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80067f2:	f7ff ff76 	bl	80066e2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80067f6:	bd70      	pop	{r4, r5, r6, pc}

080067f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80067fc:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067fe:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 8006802:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80069c0 <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006806:	680a      	ldr	r2, [r1, #0]
 8006808:	fa32 f403 	lsrs.w	r4, r2, r3
 800680c:	d102      	bne.n	8006814 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006814:	f04f 0c01 	mov.w	ip, #1
 8006818:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800681c:	ea1c 0202 	ands.w	r2, ip, r2
 8006820:	f000 80b7 	beq.w	8006992 <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006824:	684d      	ldr	r5, [r1, #4]
 8006826:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800682a:	2603      	movs	r6, #3
 800682c:	f005 0403 	and.w	r4, r5, #3
 8006830:	fa06 f608 	lsl.w	r6, r6, r8
 8006834:	1e67      	subs	r7, r4, #1
 8006836:	43f6      	mvns	r6, r6
 8006838:	2f01      	cmp	r7, #1
 800683a:	d834      	bhi.n	80068a6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800683c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800683e:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006842:	68cf      	ldr	r7, [r1, #12]
 8006844:	fa07 f708 	lsl.w	r7, r7, r8
 8006848:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800684c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800684e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006850:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006854:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8006858:	409f      	lsls	r7, r3
 800685a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800685e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006860:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006862:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006864:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006868:	688f      	ldr	r7, [r1, #8]
 800686a:	fa07 f708 	lsl.w	r7, r7, r8
 800686e:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8006872:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006874:	d119      	bne.n	80068aa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006876:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800687a:	f003 0b07 	and.w	fp, r3, #7
 800687e:	f04f 0c0f 	mov.w	ip, #15
 8006882:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8006886:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800688a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800688e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8006892:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006896:	690f      	ldr	r7, [r1, #16]
 8006898:	fa07 f70b 	lsl.w	r7, r7, fp
 800689c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80068a0:	f8ca 7020 	str.w	r7, [sl, #32]
 80068a4:	e001      	b.n	80068aa <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068a6:	2c03      	cmp	r4, #3
 80068a8:	d1da      	bne.n	8006860 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80068aa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068ac:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068b0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068b4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068b8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80068bc:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068be:	d068      	beq.n	8006992 <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068c0:	4e3d      	ldr	r6, [pc, #244]	; (80069b8 <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068c2:	f003 0703 	and.w	r7, r3, #3
 80068c6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ca:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068ce:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d0:	f044 0402 	orr.w	r4, r4, #2
 80068d4:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 80068d8:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 80068dc:	f023 0603 	bic.w	r6, r3, #3
 80068e0:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 80068e4:	f004 0402 	and.w	r4, r4, #2
 80068e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80068ec:	9401      	str	r4, [sp, #4]
 80068ee:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068f0:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80068f4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068f8:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068fc:	4c2f      	ldr	r4, [pc, #188]	; (80069bc <HAL_GPIO_Init+0x1c4>)
 80068fe:	42a0      	cmp	r0, r4
 8006900:	d049      	beq.n	8006996 <HAL_GPIO_Init+0x19e>
 8006902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006906:	42a0      	cmp	r0, r4
 8006908:	d047      	beq.n	800699a <HAL_GPIO_Init+0x1a2>
 800690a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800690e:	42a0      	cmp	r0, r4
 8006910:	d045      	beq.n	800699e <HAL_GPIO_Init+0x1a6>
 8006912:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006916:	42a0      	cmp	r0, r4
 8006918:	d043      	beq.n	80069a2 <HAL_GPIO_Init+0x1aa>
 800691a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800691e:	42a0      	cmp	r0, r4
 8006920:	d041      	beq.n	80069a6 <HAL_GPIO_Init+0x1ae>
 8006922:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006926:	42a0      	cmp	r0, r4
 8006928:	d03f      	beq.n	80069aa <HAL_GPIO_Init+0x1b2>
 800692a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800692e:	42a0      	cmp	r0, r4
 8006930:	d03d      	beq.n	80069ae <HAL_GPIO_Init+0x1b6>
 8006932:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006936:	42a0      	cmp	r0, r4
 8006938:	d03b      	beq.n	80069b2 <HAL_GPIO_Init+0x1ba>
 800693a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800693e:	42a0      	cmp	r0, r4
 8006940:	bf0c      	ite	eq
 8006942:	2409      	moveq	r4, #9
 8006944:	240a      	movne	r4, #10
 8006946:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006948:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 800694a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800694e:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006952:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8006954:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 8006958:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 800695c:	bf54      	ite	pl
 800695e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006960:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 8006962:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8006964:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006966:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8006968:	bf54      	ite	pl
 800696a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800696c:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800696e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8006970:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006974:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8006978:	bf54      	ite	pl
 800697a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800697c:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800697e:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006980:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8006984:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8006988:	bf54      	ite	pl
 800698a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800698c:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800698e:	f8ce 4000 	str.w	r4, [lr]
    position++;
 8006992:	3301      	adds	r3, #1
 8006994:	e737      	b.n	8006806 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006996:	2400      	movs	r4, #0
 8006998:	e7d5      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 800699a:	2401      	movs	r4, #1
 800699c:	e7d3      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 800699e:	2402      	movs	r4, #2
 80069a0:	e7d1      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069a2:	2403      	movs	r4, #3
 80069a4:	e7cf      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069a6:	2404      	movs	r4, #4
 80069a8:	e7cd      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069aa:	2405      	movs	r4, #5
 80069ac:	e7cb      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069ae:	2406      	movs	r4, #6
 80069b0:	e7c9      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069b2:	2407      	movs	r4, #7
 80069b4:	e7c7      	b.n	8006946 <HAL_GPIO_Init+0x14e>
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400
 80069bc:	58020000 	.word	0x58020000
 80069c0:	58000080 	.word	0x58000080

080069c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80069c8:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80069ca:	4d49      	ldr	r5, [pc, #292]	; (8006af0 <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069cc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006af8 <HAL_GPIO_DeInit+0x134>
 80069d0:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006afc <HAL_GPIO_DeInit+0x138>
 80069d4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006b00 <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 80069d8:	fa31 f302 	lsrs.w	r3, r1, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80069e2:	2301      	movs	r3, #1
 80069e4:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 80069e8:	ea1e 0701 	ands.w	r7, lr, r1
 80069ec:	d06e      	beq.n	8006acc <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80069ee:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069f2:	f002 0c03 	and.w	ip, r2, #3
 80069f6:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069f8:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <HAL_GPIO_DeInit+0x130>)
 80069fa:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069fe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006a02:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006a04:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006a08:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006a0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a10:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006a14:	d05c      	beq.n	8006ad0 <HAL_GPIO_DeInit+0x10c>
 8006a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	d05a      	beq.n	8006ad4 <HAL_GPIO_DeInit+0x110>
 8006a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a22:	4298      	cmp	r0, r3
 8006a24:	d058      	beq.n	8006ad8 <HAL_GPIO_DeInit+0x114>
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	d056      	beq.n	8006adc <HAL_GPIO_DeInit+0x118>
 8006a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a32:	4298      	cmp	r0, r3
 8006a34:	d054      	beq.n	8006ae0 <HAL_GPIO_DeInit+0x11c>
 8006a36:	4548      	cmp	r0, r9
 8006a38:	d054      	beq.n	8006ae4 <HAL_GPIO_DeInit+0x120>
 8006a3a:	4550      	cmp	r0, sl
 8006a3c:	d054      	beq.n	8006ae8 <HAL_GPIO_DeInit+0x124>
 8006a3e:	4558      	cmp	r0, fp
 8006a40:	d054      	beq.n	8006aec <HAL_GPIO_DeInit+0x128>
 8006a42:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8006a46:	4298      	cmp	r0, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2309      	moveq	r3, #9
 8006a4c:	230a      	movne	r3, #10
 8006a4e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006a52:	4543      	cmp	r3, r8
 8006a54:	d118      	bne.n	8006a88 <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	ea23 0307 	bic.w	r3, r3, r7
 8006a5c:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006a5e:	686b      	ldr	r3, [r5, #4]
 8006a60:	ea23 0307 	bic.w	r3, r3, r7
 8006a64:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8006a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006a6e:	ea2c 0c07 	bic.w	ip, ip, r7
 8006a72:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006a76:	f8d3 c000 	ldr.w	ip, [r3]
 8006a7a:	ea2c 0707 	bic.w	r7, ip, r7
 8006a7e:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	ea23 0606 	bic.w	r6, r3, r6
 8006a86:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a88:	2603      	movs	r6, #3
 8006a8a:	0053      	lsls	r3, r2, #1
 8006a8c:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a8e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a92:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a96:	270f      	movs	r7, #15
 8006a98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a9c:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a9e:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006aa2:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006aa4:	fa22 f406 	lsr.w	r4, r2, r6
 8006aa8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006aac:	6a26      	ldr	r6, [r4, #32]
 8006aae:	ea26 0707 	bic.w	r7, r6, r7
 8006ab2:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ab4:	68c4      	ldr	r4, [r0, #12]
 8006ab6:	ea24 0403 	bic.w	r4, r4, r3
 8006aba:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006abc:	6844      	ldr	r4, [r0, #4]
 8006abe:	ea24 040e 	bic.w	r4, r4, lr
 8006ac2:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ac4:	6884      	ldr	r4, [r0, #8]
 8006ac6:	ea24 0303 	bic.w	r3, r4, r3
 8006aca:	6083      	str	r3, [r0, #8]
    position++;
 8006acc:	3201      	adds	r2, #1
 8006ace:	e783      	b.n	80069d8 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e7bc      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e7ba      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e7b8      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006adc:	2303      	movs	r3, #3
 8006ade:	e7b6      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	e7b4      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	e7b2      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006ae8:	2306      	movs	r3, #6
 8006aea:	e7b0      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006aec:	2307      	movs	r3, #7
 8006aee:	e7ae      	b.n	8006a4e <HAL_GPIO_DeInit+0x8a>
 8006af0:	58000080 	.word	0x58000080
 8006af4:	58020000 	.word	0x58020000
 8006af8:	58021400 	.word	0x58021400
 8006afc:	58021800 	.word	0x58021800
 8006b00:	58021c00 	.word	0x58021c00

08006b04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b04:	6903      	ldr	r3, [r0, #16]
 8006b06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006b08:	bf14      	ite	ne
 8006b0a:	2001      	movne	r0, #1
 8006b0c:	2000      	moveq	r0, #0
 8006b0e:	4770      	bx	lr

08006b10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b10:	b10a      	cbz	r2, 8006b16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b12:	6181      	str	r1, [r0, #24]
  }
}
 8006b14:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b16:	0409      	lsls	r1, r1, #16
 8006b18:	e7fb      	b.n	8006b12 <HAL_GPIO_WritePin+0x2>

08006b1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b1a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b1c:	ea01 0203 	and.w	r2, r1, r3
 8006b20:	ea21 0103 	bic.w	r1, r1, r3
 8006b24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b28:	6181      	str	r1, [r0, #24]
}
 8006b2a:	4770      	bx	lr

08006b2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b2c:	6803      	ldr	r3, [r0, #0]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	0791      	lsls	r1, r2, #30
 8006b32:	d501      	bpl.n	8006b38 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b34:	2200      	movs	r2, #0
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	07d2      	lsls	r2, r2, #31
 8006b3c:	d403      	bmi.n	8006b46 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	619a      	str	r2, [r3, #24]
  }
}
 8006b46:	4770      	bx	lr

08006b48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b48:	b530      	push	{r4, r5, lr}
 8006b4a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b4c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b50:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b52:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b54:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b5a:	4a05      	ldr	r2, [pc, #20]	; (8006b70 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b5c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b5e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b66:	ea20 0002 	bic.w	r0, r0, r2
 8006b6a:	4303      	orrs	r3, r0
 8006b6c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b6e:	bd30      	pop	{r4, r5, pc}
 8006b70:	03ff63ff 	.word	0x03ff63ff

08006b74 <I2C_IsErrorOccurred>:
{
 8006b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b78:	6803      	ldr	r3, [r0, #0]
{
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4688      	mov	r8, r1
 8006b7e:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b80:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b82:	f015 0510 	ands.w	r5, r5, #16
 8006b86:	d079      	beq.n	8006c7c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b88:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8006b8c:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b90:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	0695      	lsls	r5, r2, #26
 8006b98:	d436      	bmi.n	8006c08 <I2C_IsErrorOccurred+0x94>
 8006b9a:	b10e      	cbz	r6, 8006ba0 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8006b9c:	2504      	movs	r5, #4
 8006b9e:	e039      	b.n	8006c14 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006ba0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006ba4:	d0f6      	beq.n	8006b94 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7ff fc4f 	bl	8006448 <HAL_GetTick>
 8006baa:	1bc0      	subs	r0, r0, r7
 8006bac:	4540      	cmp	r0, r8
 8006bae:	d802      	bhi.n	8006bb6 <I2C_IsErrorOccurred+0x42>
 8006bb0:	f1b8 0f00 	cmp.w	r8, #0
 8006bb4:	d1ed      	bne.n	8006b92 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006bba:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bbe:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006bc0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bc2:	0400      	lsls	r0, r0, #16
 8006bc4:	d50a      	bpl.n	8006bdc <I2C_IsErrorOccurred+0x68>
 8006bc6:	0449      	lsls	r1, r1, #17
 8006bc8:	d408      	bmi.n	8006bdc <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8006bca:	2a20      	cmp	r2, #32
 8006bcc:	d006      	beq.n	8006bdc <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bd4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006bd6:	f7ff fc37 	bl	8006448 <HAL_GetTick>
 8006bda:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	699d      	ldr	r5, [r3, #24]
 8006be0:	f015 0520 	ands.w	r5, r5, #32
 8006be4:	d1d5      	bne.n	8006b92 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006be6:	f7ff fc2f 	bl	8006448 <HAL_GetTick>
 8006bea:	1bc0      	subs	r0, r0, r7
 8006bec:	2819      	cmp	r0, #25
 8006bee:	d9f5      	bls.n	8006bdc <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8006bf2:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8006bf4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bf8:	f043 0320 	orr.w	r3, r3, #32
 8006bfc:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c02:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8006c06:	e7e9      	b.n	8006bdc <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	d1c7      	bne.n	8006b9c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c0c:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8006c0e:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8006c10:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c12:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c18:	05d0      	lsls	r0, r2, #23
 8006c1a:	d505      	bpl.n	8006c28 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006c20:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8006c24:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c26:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c28:	0551      	lsls	r1, r2, #21
 8006c2a:	d505      	bpl.n	8006c38 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006c30:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8006c34:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c36:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c38:	0592      	lsls	r2, r2, #22
 8006c3a:	d521      	bpl.n	8006c80 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c40:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c44:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006c46:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006c48:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8006c4a:	f7ff ff6f 	bl	8006b2c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	6853      	ldr	r3, [r2, #4]
 8006c52:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006c56:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006c5a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c66:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006c68:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006c6a:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006c76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c7a:	e003      	b.n	8006c84 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8006c7c:	462e      	mov	r6, r5
 8006c7e:	e7c9      	b.n	8006c14 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d1e0      	bne.n	8006c46 <I2C_IsErrorOccurred+0xd2>
}
 8006c84:	4630      	mov	r0, r6
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c8a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	079b      	lsls	r3, r3, #30
 8006c98:	d501      	bpl.n	8006c9e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c9a:	2000      	movs	r0, #0
}
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9e:	4632      	mov	r2, r6
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff ff66 	bl	8006b74 <I2C_IsErrorOccurred>
 8006ca8:	b9a0      	cbnz	r0, 8006cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	1c6a      	adds	r2, r5, #1
 8006cac:	d0f1      	beq.n	8006c92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7ff fbcb 	bl	8006448 <HAL_GetTick>
 8006cb2:	1b80      	subs	r0, r0, r6
 8006cb4:	42a8      	cmp	r0, r5
 8006cb6:	d801      	bhi.n	8006cbc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	d1ea      	bne.n	8006c92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cbe:	f043 0320 	orr.w	r3, r3, #32
 8006cc2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006cd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	e7e1      	b.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006cd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4604      	mov	r4, r0
 8006cdc:	460d      	mov	r5, r1
 8006cde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	069b      	lsls	r3, r3, #26
 8006ce6:	d501      	bpl.n	8006cec <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006ce8:	2000      	movs	r0, #0
}
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cec:	4632      	mov	r2, r6
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7ff ff3f 	bl	8006b74 <I2C_IsErrorOccurred>
 8006cf6:	b990      	cbnz	r0, 8006d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf8:	f7ff fba6 	bl	8006448 <HAL_GetTick>
 8006cfc:	1b80      	subs	r0, r0, r6
 8006cfe:	42a8      	cmp	r0, r5
 8006d00:	d801      	bhi.n	8006d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006d02:	2d00      	cmp	r5, #0
 8006d04:	d1ec      	bne.n	8006ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d08:	f043 0320 	orr.w	r3, r3, #32
 8006d0c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	2320      	movs	r3, #32
 8006d10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006d1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006d1e:	2001      	movs	r0, #1
 8006d20:	e7e3      	b.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08006d22 <I2C_WaitOnFlagUntilTimeout>:
{
 8006d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d26:	9f06      	ldr	r7, [sp, #24]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4688      	mov	r8, r1
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	6993      	ldr	r3, [r2, #24]
 8006d34:	ea38 0303 	bics.w	r3, r8, r3
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	42b3      	cmp	r3, r6
 8006d40:	d001      	beq.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006d42:	2000      	movs	r0, #0
 8006d44:	e015      	b.n	8006d72 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	1c6b      	adds	r3, r5, #1
 8006d48:	d0f3      	beq.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4a:	f7ff fb7d 	bl	8006448 <HAL_GetTick>
 8006d4e:	1bc0      	subs	r0, r0, r7
 8006d50:	42a8      	cmp	r0, r5
 8006d52:	d801      	bhi.n	8006d58 <I2C_WaitOnFlagUntilTimeout+0x36>
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	d1eb      	bne.n	8006d30 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006d5a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d5c:	f043 0320 	orr.w	r3, r3, #32
 8006d60:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	2320      	movs	r3, #32
 8006d64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006d6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d78 <I2C_RequestMemoryWrite>:
{
 8006d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d7c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d7e:	4b18      	ldr	r3, [pc, #96]	; (8006de0 <I2C_RequestMemoryWrite+0x68>)
{
 8006d80:	4605      	mov	r5, r0
 8006d82:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	b2f2      	uxtb	r2, r6
 8006d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8006d8c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d90:	f7ff feda 	bl	8006b48 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d94:	4628      	mov	r0, r5
 8006d96:	4642      	mov	r2, r8
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7ff ff76 	bl	8006c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9e:	b118      	cbz	r0, 8006da8 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8006da0:	2001      	movs	r0, #1
}
 8006da2:	b002      	add	sp, #8
 8006da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006da8:	2e01      	cmp	r6, #1
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	d10d      	bne.n	8006dca <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dae:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006db0:	2200      	movs	r2, #0
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006db8:	463b      	mov	r3, r7
 8006dba:	f8cd 8000 	str.w	r8, [sp]
 8006dbe:	f7ff ffb0 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006dc2:	3800      	subs	r0, #0
 8006dc4:	bf18      	it	ne
 8006dc6:	2001      	movne	r0, #1
 8006dc8:	e7eb      	b.n	8006da2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dca:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	f7ff ff59 	bl	8006c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d1e1      	bne.n	8006da0 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	e7e6      	b.n	8006dae <I2C_RequestMemoryWrite+0x36>
 8006de0:	80002000 	.word	0x80002000

08006de4 <I2C_RequestMemoryRead>:
{
 8006de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006de8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006dea:	4b18      	ldr	r3, [pc, #96]	; (8006e4c <I2C_RequestMemoryRead+0x68>)
{
 8006dec:	4605      	mov	r5, r0
 8006dee:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	b2f2      	uxtb	r2, r6
 8006df4:	2300      	movs	r3, #0
{
 8006df6:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006dfa:	f7ff fea5 	bl	8006b48 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dfe:	4628      	mov	r0, r5
 8006e00:	4642      	mov	r2, r8
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7ff ff41 	bl	8006c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006e08:	b118      	cbz	r0, 8006e12 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8006e0a:	2001      	movs	r0, #1
}
 8006e0c:	b002      	add	sp, #8
 8006e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e12:	2e01      	cmp	r6, #1
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	d10d      	bne.n	8006e34 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e18:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2140      	movs	r1, #64	; 0x40
 8006e1e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e20:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e22:	463b      	mov	r3, r7
 8006e24:	f8cd 8000 	str.w	r8, [sp]
 8006e28:	f7ff ff7b 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006e2c:	3800      	subs	r0, #0
 8006e2e:	bf18      	it	ne
 8006e30:	2001      	movne	r0, #1
 8006e32:	e7eb      	b.n	8006e0c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e34:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e36:	4639      	mov	r1, r7
 8006e38:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	f7ff ff24 	bl	8006c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d1e1      	bne.n	8006e0a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	e7e6      	b.n	8006e18 <I2C_RequestMemoryRead+0x34>
 8006e4a:	bf00      	nop
 8006e4c:	80002000 	.word	0x80002000

08006e50 <HAL_I2C_MspInit>:
}
 8006e50:	4770      	bx	lr

08006e52 <HAL_I2C_Init>:
{
 8006e52:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006e54:	4604      	mov	r4, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d04a      	beq.n	8006ef0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e62:	b91b      	cbnz	r3, 8006e6c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006e64:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006e68:	f7ff fff2 	bl	8006e50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e6c:	2324      	movs	r3, #36	; 0x24
 8006e6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e7c:	6862      	ldr	r2, [r4, #4]
 8006e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e82:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e8a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e8c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006e90:	2901      	cmp	r1, #1
 8006e92:	d124      	bne.n	8006ede <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e98:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e9a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e9e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eb0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006eb4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006eb6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006ebc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ebe:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006ece:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ed6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006edc:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ede:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ee4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee6:	d1d8      	bne.n	8006e9a <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	e7d4      	b.n	8006e9a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e7f3      	b.n	8006edc <HAL_I2C_Init+0x8a>

08006ef4 <HAL_I2C_MspDeInit>:
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_I2C_DeInit>:
{
 8006ef6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006ef8:	4604      	mov	r4, r0
 8006efa:	b198      	cbz	r0, 8006f24 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006efc:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006efe:	2324      	movs	r3, #36	; 0x24
 8006f00:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006f04:	6813      	ldr	r3, [r2, #0]
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006f0c:	f7ff fff2 	bl	8006ef4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f10:	2000      	movs	r0, #0
 8006f12:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8006f14:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006f18:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006f22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e7fc      	b.n	8006f22 <HAL_I2C_DeInit+0x2c>

08006f28 <HAL_I2C_Mem_Write>:
{
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	469b      	mov	fp, r3
 8006f30:	4604      	mov	r4, r0
 8006f32:	460f      	mov	r7, r1
 8006f34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006f38:	4692      	mov	sl, r2
 8006f3a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8006f3e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	f040 80a3 	bne.w	8007090 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8006f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4c:	b10b      	cbz	r3, 8006f52 <HAL_I2C_Mem_Write+0x2a>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	b933      	cbnz	r3, 8006f60 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f56:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006f58:	2001      	movs	r0, #1
}
 8006f5a:	b005      	add	sp, #20
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006f60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	f000 8093 	beq.w	8007090 <HAL_I2C_Mem_Write+0x168>
 8006f6a:	2501      	movs	r5, #1
 8006f6c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006f70:	f7ff fa6a 	bl	8006448 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f74:	2319      	movs	r3, #25
 8006f76:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006f78:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff fece 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
 8006f86:	4680      	mov	r8, r0
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d1e5      	bne.n	8006f58 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f8c:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8006f8e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f90:	4652      	mov	r2, sl
 8006f92:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fa2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006fa4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006fa6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fa8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8006fac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fae:	465b      	mov	r3, fp
 8006fb0:	f7ff fee2 	bl	8006d78 <I2C_RequestMemoryWrite>
 8006fb4:	b110      	cbz	r0, 8006fbc <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8006fb6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006fba:	e7cd      	b.n	8006f58 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2bff      	cmp	r3, #255	; 0xff
 8006fc2:	d955      	bls.n	8007070 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fca:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fcc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff fdb9 	bl	8006b48 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f7ff fe55 	bl	8006c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d1b9      	bne.n	8006f58 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006fec:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006fee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006ff2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006ff4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006ff6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006ff8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006ffa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006ffc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ffe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007000:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007002:	b29b      	uxth	r3, r3
 8007004:	b1ab      	cbz	r3, 8007032 <HAL_I2C_Mem_Write+0x10a>
 8007006:	b9a2      	cbnz	r2, 8007032 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007008:	464b      	mov	r3, r9
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	4620      	mov	r0, r4
 800700e:	9600      	str	r6, [sp, #0]
 8007010:	f7ff fe87 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
 8007014:	2800      	cmp	r0, #0
 8007016:	d19f      	bne.n	8006f58 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	2bff      	cmp	r3, #255	; 0xff
 800701e:	d92f      	bls.n	8007080 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007020:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007026:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007028:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800702a:	4639      	mov	r1, r7
 800702c:	4620      	mov	r0, r4
 800702e:	f7ff fd8b 	bl	8006b48 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1cd      	bne.n	8006fd6 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703a:	4632      	mov	r2, r6
 800703c:	4649      	mov	r1, r9
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff fe4a 	bl	8006cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007044:	2800      	cmp	r0, #0
 8007046:	d187      	bne.n	8006f58 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	2120      	movs	r1, #32
 800704c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007054:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007058:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800705c:	f022 0201 	bic.w	r2, r2, #1
 8007060:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007062:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007066:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800706a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800706e:	e774      	b.n	8006f5a <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007070:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007076:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007078:	b292      	uxth	r2, r2
 800707a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	e7a6      	b.n	8006fce <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8007080:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007086:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007088:	b292      	uxth	r2, r2
 800708a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	e7cc      	b.n	800702a <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8007090:	2002      	movs	r0, #2
 8007092:	e762      	b.n	8006f5a <HAL_I2C_Mem_Write+0x32>

08007094 <HAL_I2C_Mem_Read>:
{
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b085      	sub	sp, #20
 800709a:	469b      	mov	fp, r3
 800709c:	4604      	mov	r4, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80070a4:	4692      	mov	sl, r2
 80070a6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80070aa:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	f040 80a7 	bne.w	8007204 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80070b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b8:	b10b      	cbz	r3, 80070be <HAL_I2C_Mem_Read+0x2a>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	b933      	cbnz	r3, 80070cc <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80070c4:	2001      	movs	r0, #1
}
 80070c6:	b005      	add	sp, #20
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80070cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	f000 8097 	beq.w	8007204 <HAL_I2C_Mem_Read+0x170>
 80070d6:	2501      	movs	r5, #1
 80070d8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80070dc:	f7ff f9b4 	bl	8006448 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070e0:	2319      	movs	r3, #25
 80070e2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80070e4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070e6:	462a      	mov	r2, r5
 80070e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7ff fe18 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4680      	mov	r8, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1e5      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80070fa:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070fc:	4652      	mov	r2, sl
 80070fe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007100:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800710a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800710c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800710e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007110:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007112:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007114:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8007118:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800711a:	465b      	mov	r3, fp
 800711c:	f7ff fe62 	bl	8006de4 <I2C_RequestMemoryRead>
 8007120:	b110      	cbz	r0, 8007128 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8007122:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007126:	e7cd      	b.n	80070c4 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	2bff      	cmp	r3, #255	; 0xff
 800712e:	4b36      	ldr	r3, [pc, #216]	; (8007208 <HAL_I2C_Mem_Read+0x174>)
 8007130:	d958      	bls.n	80071e4 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007132:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800713a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800713c:	4639      	mov	r1, r7
 800713e:	4620      	mov	r0, r4
 8007140:	f7ff fd02 	bl	8006b48 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007144:	464b      	mov	r3, r9
 8007146:	2200      	movs	r2, #0
 8007148:	2104      	movs	r1, #4
 800714a:	4620      	mov	r0, r4
 800714c:	9600      	str	r6, [sp, #0]
 800714e:	f7ff fde8 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
 8007152:	2800      	cmp	r0, #0
 8007154:	d1b6      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800715e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007160:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007162:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007164:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007166:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007168:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800716a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800716c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800716e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007170:	b29b      	uxth	r3, r3
 8007172:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007174:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	b1ab      	cbz	r3, 80071a6 <HAL_I2C_Mem_Read+0x112>
 800717a:	b9a2      	cbnz	r2, 80071a6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800717c:	464b      	mov	r3, r9
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	4620      	mov	r0, r4
 8007182:	9600      	str	r6, [sp, #0]
 8007184:	f7ff fdcd 	bl	8006d22 <I2C_WaitOnFlagUntilTimeout>
 8007188:	2800      	cmp	r0, #0
 800718a:	d19b      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800718c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800718e:	b29b      	uxth	r3, r3
 8007190:	2bff      	cmp	r3, #255	; 0xff
 8007192:	d92f      	bls.n	80071f4 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007194:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800719a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800719c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800719e:	4639      	mov	r1, r7
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff fcd1 	bl	8006b48 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80071a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1ca      	bne.n	8007144 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ae:	4632      	mov	r2, r6
 80071b0:	4649      	mov	r1, r9
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff fd90 	bl	8006cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d183      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	2120      	movs	r1, #32
 80071c0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80071c8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80071cc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071de:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80071e2:	e770      	b.n	80070c6 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80071e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80071ec:	b292      	uxth	r2, r2
 80071ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	e7a3      	b.n	800713c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80071f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071fa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80071fc:	b292      	uxth	r2, r2
 80071fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	e7cc      	b.n	800719e <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8007204:	2002      	movs	r0, #2
 8007206:	e75e      	b.n	80070c6 <HAL_I2C_Mem_Read+0x32>
 8007208:	80002400 	.word	0x80002400

0800720c <HAL_I2C_GetState>:
  return hi2c->State;
 800720c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007210:	4770      	bx	lr

08007212 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007212:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007214:	4770      	bx	lr

08007216 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007216:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800721c:	2b20      	cmp	r3, #32
 800721e:	b2dc      	uxtb	r4, r3
 8007220:	d11d      	bne.n	800725e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007222:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007226:	2b01      	cmp	r3, #1
 8007228:	d019      	beq.n	800725e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800722a:	2324      	movs	r3, #36	; 0x24
 800722c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007240:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4311      	orrs	r1, r2
 8007246:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007250:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007252:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007256:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800725a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800725c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800725e:	2002      	movs	r0, #2
 8007260:	e7fc      	b.n	800725c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007262:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007264:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007268:	2b20      	cmp	r3, #32
 800726a:	b2dc      	uxtb	r4, r3
 800726c:	d11c      	bne.n	80072a8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007272:	2b01      	cmp	r3, #1
 8007274:	d018      	beq.n	80072a8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007276:	2324      	movs	r3, #36	; 0x24
 8007278:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800727c:	6803      	ldr	r3, [r0, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007286:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007288:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800728c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007290:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800729a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800729c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80072a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80072a4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80072a6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80072a8:	2002      	movs	r0, #2
 80072aa:	e7fc      	b.n	80072a6 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080072ac <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072ac:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072ae:	f8d1 c000 	ldr.w	ip, [r1]
{
 80072b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072b6:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072b8:	6804      	ldr	r4, [r0, #0]
 80072ba:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072bc:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072c0:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072c2:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80072c4:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80072c8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072cc:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072ce:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072d2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072d6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072d8:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072da:	68e0      	ldr	r0, [r4, #12]
 80072dc:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80072e0:	4430      	add	r0, r6
 80072e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072e6:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072e8:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072ea:	68e0      	ldr	r0, [r4, #12]
 80072ec:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80072f0:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072f2:	6898      	ldr	r0, [r3, #8]
 80072f4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80072f8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072fa:	6888      	ldr	r0, [r1, #8]
 80072fc:	68e6      	ldr	r6, [r4, #12]
 80072fe:	3001      	adds	r0, #1
 8007300:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8007304:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007306:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007308:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800730c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800730e:	6918      	ldr	r0, [r3, #16]
 8007310:	f020 0007 	bic.w	r0, r0, #7
 8007314:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007316:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007318:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800731a:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800731e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007322:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007326:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800732a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800732e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007332:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007336:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007338:	6958      	ldr	r0, [r3, #20]
 800733a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800733e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007340:	6948      	ldr	r0, [r1, #20]
 8007342:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007344:	69d8      	ldr	r0, [r3, #28]
 8007346:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800734a:	f020 0007 	bic.w	r0, r0, #7
 800734e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007350:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8007354:	4305      	orrs	r5, r0
 8007356:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007358:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800735a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800735c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007360:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007362:	b31e      	cbz	r6, 80073ac <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007364:	2e01      	cmp	r6, #1
 8007366:	d023      	beq.n	80073b0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007368:	1eb0      	subs	r0, r6, #2
 800736a:	2802      	cmp	r0, #2
 800736c:	d922      	bls.n	80073b4 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800736e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007370:	bf0c      	ite	eq
 8007372:	2002      	moveq	r0, #2
 8007374:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007376:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007378:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800737c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8007380:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007382:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007384:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007386:	4345      	muls	r5, r0
 8007388:	4378      	muls	r0, r7
 800738a:	3007      	adds	r0, #7
 800738c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007390:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007392:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007394:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8007398:	f020 0007 	bic.w	r0, r0, #7
 800739c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800739e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073a0:	58a3      	ldr	r3, [r4, r2]
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	50a3      	str	r3, [r4, r2]
}
 80073a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80073ac:	2004      	movs	r0, #4
 80073ae:	e7e2      	b.n	8007376 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80073b0:	2003      	movs	r0, #3
 80073b2:	e7e0      	b.n	8007376 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80073b4:	2002      	movs	r0, #2
 80073b6:	e7de      	b.n	8007376 <LTDC_SetConfig+0xca>

080073b8 <HAL_LTDC_Init>:
{
 80073b8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80073ba:	4604      	mov	r4, r0
 80073bc:	2800      	cmp	r0, #0
 80073be:	d063      	beq.n	8007488 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073c0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80073c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073c8:	b91b      	cbnz	r3, 80073d2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80073ca:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80073ce:	f7fa f875 	bl	80014bc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073d2:	2302      	movs	r3, #2
 80073d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80073e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073e2:	6999      	ldr	r1, [r3, #24]
 80073e4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80073e8:	4302      	orrs	r2, r0
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80073f2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073f4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80073f6:	4925      	ldr	r1, [pc, #148]	; (800748c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073f8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	400a      	ands	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007406:	69a0      	ldr	r0, [r4, #24]
 8007408:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800740a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800740c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	400a      	ands	r2, r1
 8007412:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800741a:	6a20      	ldr	r0, [r4, #32]
 800741c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800741e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007420:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	400a      	ands	r2, r1
 8007426:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800742e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007430:	4302      	orrs	r2, r0
 8007432:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	4011      	ands	r1, r2
 8007438:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800743a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007442:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007444:	430a      	orrs	r2, r1
 8007446:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800744a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800744e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007452:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007456:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800745a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800745e:	430a      	orrs	r2, r1
 8007460:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007464:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007468:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800746c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800746e:	f042 0206 	orr.w	r2, r2, #6
 8007472:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800747c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800747e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007482:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007486:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007488:	2001      	movs	r0, #1
 800748a:	e7fc      	b.n	8007486 <HAL_LTDC_Init+0xce>
 800748c:	f000f800 	.word	0xf000f800

08007490 <HAL_LTDC_ErrorCallback>:
 8007490:	4770      	bx	lr

08007492 <HAL_LTDC_ReloadEventCallback>:
 8007492:	4770      	bx	lr

08007494 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007494:	6803      	ldr	r3, [r0, #0]
{
 8007496:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007498:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800749a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800749c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800749e:	0772      	lsls	r2, r6, #29
 80074a0:	d514      	bpl.n	80074cc <HAL_LTDC_IRQHandler+0x38>
 80074a2:	0769      	lsls	r1, r5, #29
 80074a4:	d512      	bpl.n	80074cc <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80074a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a8:	f022 0204 	bic.w	r2, r2, #4
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80074ae:	2204      	movs	r2, #4
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80074b2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80074be:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074c0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074c4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80074c8:	f7ff ffe2 	bl	8007490 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80074cc:	07b2      	lsls	r2, r6, #30
 80074ce:	d516      	bpl.n	80074fe <HAL_LTDC_IRQHandler+0x6a>
 80074d0:	07ab      	lsls	r3, r5, #30
 80074d2:	d514      	bpl.n	80074fe <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074d4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80074d6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074da:	f022 0202 	bic.w	r2, r2, #2
 80074de:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074e0:	2202      	movs	r2, #2
 80074e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074e4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074ee:	2304      	movs	r3, #4
 80074f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074f4:	2300      	movs	r3, #0
 80074f6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80074fa:	f7ff ffc9 	bl	8007490 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074fe:	07f0      	lsls	r0, r6, #31
 8007500:	d510      	bpl.n	8007524 <HAL_LTDC_IRQHandler+0x90>
 8007502:	07e9      	lsls	r1, r5, #31
 8007504:	d50e      	bpl.n	8007524 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007506:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8007508:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800750a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007512:	2201      	movs	r2, #1
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007516:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8007518:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800751c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007520:	f7fb fa9e 	bl	8002a60 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007524:	0732      	lsls	r2, r6, #28
 8007526:	d511      	bpl.n	800754c <HAL_LTDC_IRQHandler+0xb8>
 8007528:	072b      	lsls	r3, r5, #28
 800752a:	d50f      	bpl.n	800754c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800752c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800752e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007532:	f022 0208 	bic.w	r2, r2, #8
 8007536:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007538:	2208      	movs	r2, #8
 800753a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800753c:	2301      	movs	r3, #1
 800753e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007542:	2300      	movs	r3, #0
 8007544:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007548:	f7ff ffa3 	bl	8007492 <HAL_LTDC_ReloadEventCallback>
}
 800754c:	bd70      	pop	{r4, r5, r6, pc}

0800754e <HAL_LTDC_ConfigLayer>:
{
 800754e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8007552:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800755c:	2b01      	cmp	r3, #1
 800755e:	f04f 0002 	mov.w	r0, #2
 8007562:	d01f      	beq.n	80075a4 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007564:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007566:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800756a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800756c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007570:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007574:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007578:	3438      	adds	r4, #56	; 0x38
 800757a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800757c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800757e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007586:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007588:	4630      	mov	r0, r6
 800758a:	4662      	mov	r2, ip
 800758c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800758e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007590:	f7ff fe8c 	bl	80072ac <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007594:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007596:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007598:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800759c:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80075a0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080075a8 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80075a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	f04f 0302 	mov.w	r3, #2
 80075b2:	d012      	beq.n	80075da <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80075b8:	6803      	ldr	r3, [r0, #0]
 80075ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80075c2:	4a07      	ldr	r2, [pc, #28]	; (80075e0 <HAL_LTDC_ProgramLineEvent+0x38>)
 80075c4:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80075c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80075d4:	2300      	movs	r3, #0
 80075d6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80075da:	4618      	mov	r0, r3
}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	50001000 	.word	0x50001000

080075e4 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80075e8:	f7fe ff2e 	bl	8006448 <HAL_GetTick>
 80075ec:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80075ee:	b144      	cbz	r4, 8007602 <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80075f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d006      	beq.n	8007606 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80075fc:	2300      	movs	r3, #0
 80075fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8007602:	2001      	movs	r0, #1
 8007604:	e015      	b.n	8007632 <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800760e:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	68d3      	ldr	r3, [r2, #12]
 800761c:	f013 0301 	ands.w	r3, r3, #1
 8007620:	d108      	bne.n	8007634 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8007622:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8007624:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8007626:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 8007628:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 800762a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800762e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8007632:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007634:	f7fe ff08 	bl	8006448 <HAL_GetTick>
 8007638:	1b40      	subs	r0, r0, r5
 800763a:	2805      	cmp	r0, #5
 800763c:	d9ec      	bls.n	8007618 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800763e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8007646:	2300      	movs	r3, #0
 8007648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800764c:	2303      	movs	r3, #3
 800764e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 8007652:	e7d6      	b.n	8007602 <HAL_MDMA_Abort+0x1e>

08007654 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007658:	6804      	ldr	r4, [r0, #0]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007660:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8007662:	6883      	ldr	r3, [r0, #8]
 8007664:	b92b      	cbnz	r3, 8007672 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	684a      	ldr	r2, [r1, #4]
 800766a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800766e:	4313      	orrs	r3, r2
 8007670:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007672:	680b      	ldr	r3, [r1, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d14e      	bne.n	8007716 <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8007678:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800767c:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8007680:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8007684:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8007688:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 800768c:	433b      	orrs	r3, r7
 800768e:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8007690:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007692:	b16b      	cbz	r3, 80076b0 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007694:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007696:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800769a:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800769c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800769e:	f8d2 c000 	ldr.w	ip, [r2]
 80076a2:	433b      	orrs	r3, r7
 80076a4:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80076a6:	433b      	orrs	r3, r7
 80076a8:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 80076ac:	433b      	orrs	r3, r7
 80076ae:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80076b0:	6833      	ldr	r3, [r6, #0]
 80076b2:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 80076b4:	f023 031f 	bic.w	r3, r3, #31
 80076b8:	433b      	orrs	r3, r7
 80076ba:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80076bc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80076be:	b123      	cbz	r3, 80076ca <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80076c0:	680e      	ldr	r6, [r1, #0]
 80076c2:	b916      	cbnz	r6, 80076ca <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80076c4:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80076c6:	3e01      	subs	r6, #1
 80076c8:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80076ca:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 80076ce:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80076d2:	f1ba 0f00 	cmp.w	sl, #0
 80076d6:	d076      	beq.n	80077c6 <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80076d8:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 80076dc:	f1b9 0f00 	cmp.w	r9, #0
 80076e0:	d047      	beq.n	8007772 <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80076e2:	6817      	ldr	r7, [r2, #0]
 80076e4:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80076e8:	b34b      	cbz	r3, 800773e <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80076ea:	ea43 000a 	orr.w	r0, r3, sl
 80076ee:	ea40 0309 	orr.w	r3, r0, r9
 80076f2:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80076f4:	ea43 0308 	orr.w	r3, r3, r8
 80076f8:	ea43 030e 	orr.w	r3, r3, lr
 80076fc:	ea43 030c 	orr.w	r3, r3, ip
 8007700:	4333      	orrs	r3, r6
 8007702:	4303      	orrs	r3, r0
 8007704:	483e      	ldr	r0, [pc, #248]	; (8007800 <OSPI_ConfigCmd+0x1ac>)
 8007706:	4038      	ands	r0, r7
 8007708:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800770a:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800770c:	688b      	ldr	r3, [r1, #8]
 800770e:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8007710:	698b      	ldr	r3, [r1, #24]
 8007712:	64a3      	str	r3, [r4, #72]	; 0x48
 8007714:	e040      	b.n	8007798 <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8007716:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 8007718:	bf01      	itttt	eq
 800771a:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800771e:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 8007722:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8007726:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 800772a:	bf1f      	itttt	ne
 800772c:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8007730:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8007734:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8007738:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 800773c:	e7a4      	b.n	8007688 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800773e:	ea4a 0309 	orr.w	r3, sl, r9
 8007742:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8007746:	ea43 0308 	orr.w	r3, r3, r8
 800774a:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 800774e:	ea43 030e 	orr.w	r3, r3, lr
 8007752:	ea43 030c 	orr.w	r3, r3, ip
 8007756:	4333      	orrs	r3, r6
 8007758:	433b      	orrs	r3, r7
 800775a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800775c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800775e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007762:	d1d3      	bne.n	800770c <OSPI_ConfigCmd+0xb8>
 8007764:	694b      	ldr	r3, [r1, #20]
 8007766:	2b08      	cmp	r3, #8
 8007768:	d1d0      	bne.n	800770c <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007770:	e7cb      	b.n	800770a <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007772:	b1a3      	cbz	r3, 800779e <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8007774:	ea43 030a 	orr.w	r3, r3, sl
 8007778:	6810      	ldr	r0, [r2, #0]
 800777a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800777c:	ea43 0308 	orr.w	r3, r3, r8
 8007780:	ea43 030e 	orr.w	r3, r3, lr
 8007784:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 8007788:	4323      	orrs	r3, r4
 800778a:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 800778e:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007792:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8007794:	688b      	ldr	r3, [r1, #8]
 8007796:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800779e:	6814      	ldr	r4, [r2, #0]
 80077a0:	ea4a 0308 	orr.w	r3, sl, r8
 80077a4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80077a8:	ea43 030e 	orr.w	r3, r3, lr
 80077ac:	4323      	orrs	r3, r4
 80077ae:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80077b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80077b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077b6:	d1ed      	bne.n	8007794 <OSPI_ConfigCmd+0x140>
 80077b8:	694b      	ldr	r3, [r1, #20]
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d1ea      	bne.n	8007794 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077c4:	e7e5      	b.n	8007792 <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80077c6:	f1b9 0f00 	cmp.w	r9, #0
 80077ca:	d014      	beq.n	80077f6 <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80077cc:	6810      	ldr	r0, [r2, #0]
 80077ce:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80077d2:	b163      	cbz	r3, 80077ee <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80077d4:	ea43 0309 	orr.w	r3, r3, r9
 80077d8:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80077dc:	4333      	orrs	r3, r6
 80077de:	432b      	orrs	r3, r5
 80077e0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80077e2:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80077e4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80077e8:	4303      	orrs	r3, r0
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	e790      	b.n	8007710 <OSPI_ConfigCmd+0xbc>
 80077ee:	ea49 0306 	orr.w	r3, r9, r6
 80077f2:	432b      	orrs	r3, r5
 80077f4:	e7f6      	b.n	80077e4 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80077f6:	2308      	movs	r3, #8
 80077f8:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 80077fa:	2001      	movs	r0, #1
 80077fc:	e7cd      	b.n	800779a <OSPI_ConfigCmd+0x146>
 80077fe:	bf00      	nop
 8007800:	f0ffc0c0 	.word	0xf0ffc0c0

08007804 <OSPI_WaitFlagStateUntilTimeout>:
{
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800780c:	4604      	mov	r4, r0
 800780e:	460e      	mov	r6, r1
 8007810:	4615      	mov	r5, r2
 8007812:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	6a13      	ldr	r3, [r2, #32]
 8007818:	4233      	tst	r3, r6
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	42ab      	cmp	r3, r5
 8007822:	d101      	bne.n	8007828 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8007824:	2000      	movs	r0, #0
 8007826:	e012      	b.n	800784e <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007828:	f1b8 3fff 	cmp.w	r8, #4294967295
 800782c:	d0f3      	beq.n	8007816 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fe fe0b 	bl	8006448 <HAL_GetTick>
 8007832:	1bc0      	subs	r0, r0, r7
 8007834:	4540      	cmp	r0, r8
 8007836:	d802      	bhi.n	800783e <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	d1ea      	bne.n	8007814 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800783e:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007842:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007844:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800784e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007854 <HAL_OSPI_Init>:
{
 8007854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007856:	4604      	mov	r4, r0
 8007858:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800785a:	f7fe fdf5 	bl	8006448 <HAL_GetTick>
 800785e:	4603      	mov	r3, r0
  if (hospi == NULL)
 8007860:	2c00      	cmp	r4, #0
 8007862:	d068      	beq.n	8007936 <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007864:	2000      	movs	r0, #0
 8007866:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007868:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800786a:	2e00      	cmp	r6, #0
 800786c:	d161      	bne.n	8007932 <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 800786e:	4620      	mov	r0, r4
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	f7f9 ff33 	bl	80016dc <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8007876:	69e0      	ldr	r0, [r4, #28]
 8007878:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800787a:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	4301      	orrs	r1, r0
 8007882:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007884:	68af      	ldr	r7, [r5, #8]
 8007886:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800788a:	482c      	ldr	r0, [pc, #176]	; (800793c <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 800788c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 800788e:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007890:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 8007892:	4301      	orrs	r1, r0
 8007894:	6920      	ldr	r0, [r4, #16]
 8007896:	3801      	subs	r0, #1
 8007898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800789c:	6960      	ldr	r0, [r4, #20]
 800789e:	3801      	subs	r0, #1
 80078a0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80078a4:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 80078a6:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80078a8:	68e9      	ldr	r1, [r5, #12]
 80078aa:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80078ae:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80078b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80078b2:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80078b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80078ba:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80078bc:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80078be:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80078c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078c2:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80078c4:	6829      	ldr	r1, [r5, #0]
 80078c6:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 80078ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80078ce:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80078d0:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80078d2:	2120      	movs	r1, #32
 80078d4:	9200      	str	r2, [sp, #0]
 80078d6:	4632      	mov	r2, r6
 80078d8:	f7ff ff94 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80078dc:	bb48      	cbnz	r0, 8007932 <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078e2:	68d9      	ldr	r1, [r3, #12]
 80078e4:	3a01      	subs	r2, #1
 80078e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80078ea:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80078ec:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80078ee:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f6:	430a      	orrs	r2, r1
 80078f8:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80078fa:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80078fe:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 8007902:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 8007906:	432a      	orrs	r2, r5
 8007908:	430a      	orrs	r2, r1
 800790a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007916:	69a2      	ldr	r2, [r4, #24]
 8007918:	2a02      	cmp	r2, #2
 800791a:	d103      	bne.n	8007924 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	f042 0202 	orr.w	r2, r2, #2
 8007922:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007924:	68e3      	ldr	r3, [r4, #12]
 8007926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800792a:	bf0c      	ite	eq
 800792c:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 800792e:	2302      	movne	r3, #2
 8007930:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007932:	b005      	add	sp, #20
 8007934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8007936:	2001      	movs	r0, #1
 8007938:	e7fb      	b.n	8007932 <HAL_OSPI_Init+0xde>
 800793a:	bf00      	nop
 800793c:	f8e0f88c 	.word	0xf8e0f88c

08007940 <HAL_OSPI_DeInit>:
{
 8007940:	b510      	push	{r4, lr}
  if (hospi == NULL)
 8007942:	4604      	mov	r4, r0
 8007944:	b168      	cbz	r0, 8007962 <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 8007946:	6803      	ldr	r3, [r0, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	f022 0202 	bic.w	r2, r2, #2
 8007956:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 8007958:	f7f9 fff0 	bl	800193c <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800795c:	2000      	movs	r0, #0
 800795e:	6560      	str	r0, [r4, #84]	; 0x54
}
 8007960:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8007962:	2001      	movs	r0, #1
 8007964:	e7fc      	b.n	8007960 <HAL_OSPI_DeInit+0x20>

08007966 <HAL_OSPI_Command>:
{
 8007966:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007968:	4604      	mov	r4, r0
 800796a:	4616      	mov	r6, r2
 800796c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800796e:	f7fe fd6b 	bl	8006448 <HAL_GetTick>
  state = hospi->State;
 8007972:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8007974:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8007976:	2a02      	cmp	r2, #2
 8007978:	d107      	bne.n	800798a <HAL_OSPI_Command+0x24>
 800797a:	68e2      	ldr	r2, [r4, #12]
 800797c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007980:	d109      	bne.n	8007996 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007982:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007984:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007986:	65a3      	str	r3, [r4, #88]	; 0x58
 8007988:	e01f      	b.n	80079ca <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800798a:	2a14      	cmp	r2, #20
 800798c:	d11f      	bne.n	80079ce <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800798e:	682a      	ldr	r2, [r5, #0]
 8007990:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007992:	2a01      	cmp	r2, #1
 8007994:	d8f5      	bhi.n	8007982 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007996:	2200      	movs	r2, #0
 8007998:	2120      	movs	r1, #32
 800799a:	4620      	mov	r0, r4
 800799c:	9600      	str	r6, [sp, #0]
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	f7ff ff30 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80079a4:	b988      	cbnz	r0, 80079ca <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80079a6:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 80079a8:	4629      	mov	r1, r5
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff fe52 	bl	8007654 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 80079b0:	b958      	cbnz	r0, 80079ca <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80079b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	b992      	cbnz	r2, 80079de <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80079b8:	2201      	movs	r2, #1
 80079ba:	2102      	movs	r1, #2
 80079bc:	4620      	mov	r0, r4
 80079be:	9600      	str	r6, [sp, #0]
 80079c0:	f7ff ff20 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	2202      	movs	r2, #2
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80079ca:	b004      	add	sp, #16
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80079ce:	2a24      	cmp	r2, #36	; 0x24
 80079d0:	d1d7      	bne.n	8007982 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80079d2:	682a      	ldr	r2, [r5, #0]
 80079d4:	f022 0202 	bic.w	r2, r2, #2
 80079d8:	2a01      	cmp	r2, #1
 80079da:	d1d2      	bne.n	8007982 <HAL_OSPI_Command+0x1c>
 80079dc:	e7db      	b.n	8007996 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80079de:	682b      	ldr	r3, [r5, #0]
 80079e0:	b90b      	cbnz	r3, 80079e6 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80079e2:	2304      	movs	r3, #4
 80079e4:	e005      	b.n	80079f2 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80079ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079ec:	2b24      	cmp	r3, #36	; 0x24
 80079ee:	d0f8      	beq.n	80079e2 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80079f0:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80079f2:	6563      	str	r3, [r4, #84]	; 0x54
 80079f4:	e7e9      	b.n	80079ca <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d1e7      	bne.n	80079ca <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80079fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079fc:	2b14      	cmp	r3, #20
 80079fe:	d0f0      	beq.n	80079e2 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8007a00:	2324      	movs	r3, #36	; 0x24
 8007a02:	e7f6      	b.n	80079f2 <HAL_OSPI_Command+0x8c>

08007a04 <HAL_OSPI_HyperbusCfg>:
{
 8007a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a06:	4604      	mov	r4, r0
 8007a08:	4616      	mov	r6, r2
 8007a0a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007a0c:	f7fe fd1c 	bl	8006448 <HAL_GetTick>
  state = hospi->State;
 8007a10:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8007a12:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007a14:	3a01      	subs	r2, #1
 8007a16:	2a01      	cmp	r2, #1
 8007a18:	d816      	bhi.n	8007a48 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2120      	movs	r1, #32
 8007a1e:	4620      	mov	r0, r4
 8007a20:	9600      	str	r6, [sp, #0]
 8007a22:	f7ff feef 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007a26:	b968      	cbnz	r0, 8007a44 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8007a28:	6822      	ldr	r2, [r4, #0]
 8007a2a:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007a36:	6869      	ldr	r1, [r5, #4]
 8007a38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8007a40:	2302      	movs	r3, #2
 8007a42:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007a44:	b002      	add	sp, #8
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a48:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007a4a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a4e:	e7f9      	b.n	8007a44 <HAL_OSPI_HyperbusCfg+0x40>

08007a50 <HAL_OSPI_HyperbusCmd>:
{
 8007a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	4616      	mov	r6, r2
 8007a56:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007a58:	f7fe fcf6 	bl	8006448 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8007a5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8007a5e:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8007a60:	2a02      	cmp	r2, #2
 8007a62:	d127      	bne.n	8007ab4 <HAL_OSPI_HyperbusCmd+0x64>
 8007a64:	68e2      	ldr	r2, [r4, #12]
 8007a66:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007a6a:	d123      	bne.n	8007ab4 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2120      	movs	r1, #32
 8007a70:	4620      	mov	r0, r4
 8007a72:	9600      	str	r6, [sp, #0]
 8007a74:	f7ff fec6 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007a78:	b9d0      	cbnz	r0, 8007ab0 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a7a:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a7c:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a84:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a8c:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007a8e:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a90:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007a92:	692a      	ldr	r2, [r5, #16]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8007a9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8007a9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8007aa2:	68ea      	ldr	r2, [r5, #12]
 8007aa4:	3a01      	subs	r2, #1
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8007aa8:	686a      	ldr	r2, [r5, #4]
 8007aaa:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007aac:	2304      	movs	r3, #4
 8007aae:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007ab0:	b002      	add	sp, #8
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007ab4:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007ab6:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007ab8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007aba:	e7f9      	b.n	8007ab0 <HAL_OSPI_HyperbusCmd+0x60>

08007abc <HAL_OSPI_Transmit>:
{
 8007abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007abe:	460f      	mov	r7, r1
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8007ac6:	f7fe fcbf 	bl	8006448 <HAL_GetTick>
 8007aca:	4603      	mov	r3, r0
  if (pData == NULL)
 8007acc:	b91f      	cbnz	r7, 8007ad6 <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007ace:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007ad0:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007ad2:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ad4:	e02e      	b.n	8007b34 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007ad6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007ad8:	2a04      	cmp	r2, #4
 8007ada:	d12d      	bne.n	8007b38 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007adc:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007ade:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007ae0:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007ae2:	3201      	adds	r2, #1
 8007ae4:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007ae6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ae8:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007aea:	6832      	ldr	r2, [r6, #0]
 8007aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007af0:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8007af2:	2201      	movs	r2, #1
 8007af4:	2104      	movs	r1, #4
 8007af6:	4620      	mov	r0, r4
 8007af8:	9500      	str	r5, [sp, #0]
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	f7ff fe82 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007b00:	b9c0      	cbnz	r0, 8007b34 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007b02:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 8007b04:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 8007b0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b0e:	3201      	adds	r2, #1
 8007b10:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007b12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b14:	3a01      	subs	r2, #1
 8007b16:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 8007b18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d1e9      	bne.n	8007af2 <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2102      	movs	r1, #2
 8007b22:	4620      	mov	r0, r4
 8007b24:	9500      	str	r5, [sp, #0]
 8007b26:	f7ff fe6d 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007b2a:	b918      	cbnz	r0, 8007b34 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007b32:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007b34:	b005      	add	sp, #20
 8007b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b38:	2310      	movs	r3, #16
 8007b3a:	e7c9      	b.n	8007ad0 <HAL_OSPI_Transmit+0x14>

08007b3c <HAL_OSPI_Receive>:
{
 8007b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3e:	4604      	mov	r4, r0
 8007b40:	b085      	sub	sp, #20
 8007b42:	460f      	mov	r7, r1
 8007b44:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fe fc7f 	bl	8006448 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007b4a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007b4c:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007b4e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007b50:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8007b54:	b91f      	cbnz	r7, 8007b5e <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007b56:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007b58:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b5c:	e034      	b.n	8007bc8 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007b5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007b60:	2a04      	cmp	r2, #4
 8007b62:	d13b      	bne.n	8007bdc <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007b64:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007b66:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007b68:	3201      	adds	r2, #1
 8007b6a:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007b6c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b6e:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b70:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b72:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b74:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b78:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007b80:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b82:	d123      	bne.n	8007bcc <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007b84:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8007b86:	2201      	movs	r2, #1
 8007b88:	2106      	movs	r1, #6
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	9600      	str	r6, [sp, #0]
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	f7ff fe38 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007b94:	b9c0      	cbnz	r0, 8007bc8 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b96:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8007b9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8007b9c:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b9e:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8007ba0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007ba6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ba8:	3a01      	subs	r2, #1
 8007baa:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8007bac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	d1e9      	bne.n	8007b86 <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	9600      	str	r6, [sp, #0]
 8007bba:	f7ff fe23 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007bbe:	b918      	cbnz	r0, 8007bc8 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007bc6:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007bc8:	b005      	add	sp, #20
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007bcc:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8007bd0:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8007bd4:	d1d6      	bne.n	8007b84 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007bd6:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8007bda:	e7d4      	b.n	8007b86 <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007bdc:	2310      	movs	r3, #16
 8007bde:	e7bb      	b.n	8007b58 <HAL_OSPI_Receive+0x1c>

08007be0 <HAL_OSPI_AutoPolling>:
{
 8007be0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007be4:	4604      	mov	r4, r0
 8007be6:	4616      	mov	r6, r2
 8007be8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007bea:	f7fe fc2d 	bl	8006448 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8007bee:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007bf0:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007bf2:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007bf4:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8007bf8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007bfa:	2a04      	cmp	r2, #4
 8007bfc:	d13c      	bne.n	8007c78 <HAL_OSPI_AutoPolling+0x98>
 8007bfe:	68ea      	ldr	r2, [r5, #12]
 8007c00:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007c04:	d138      	bne.n	8007c78 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007c06:	9003      	str	r0, [sp, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2120      	movs	r1, #32
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	9600      	str	r6, [sp, #0]
 8007c10:	f7ff fdf8 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007c14:	bb28      	cbnz	r0, 8007c62 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007c16:	6829      	ldr	r1, [r5, #0]
 8007c18:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007c1a:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007c1c:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8007c20:	6869      	ldr	r1, [r5, #4]
 8007c22:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8007c26:	6929      	ldr	r1, [r5, #16]
 8007c28:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8007c2c:	6810      	ldr	r0, [r2, #0]
 8007c2e:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8007c32:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8007c36:	4329      	orrs	r1, r5
 8007c38:	4301      	orrs	r1, r0
 8007c3a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007c3e:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007c40:	68e1      	ldr	r1, [r4, #12]
 8007c42:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007c46:	d10f      	bne.n	8007c68 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007c48:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	2108      	movs	r1, #8
 8007c4e:	4620      	mov	r0, r4
 8007c50:	9600      	str	r6, [sp, #0]
 8007c52:	f7ff fdd7 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007c56:	b920      	cbnz	r0, 8007c62 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007c62:	b004      	add	sp, #16
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007c68:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8007c6c:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8007c70:	d1ea      	bne.n	8007c48 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007c72:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8007c76:	e7e8      	b.n	8007c4a <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c78:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007c7a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c7e:	e7f0      	b.n	8007c62 <HAL_OSPI_AutoPolling+0x82>

08007c80 <HAL_OSPI_MemoryMapped>:
{
 8007c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007c86:	f7fe fbdf 	bl	8006448 <HAL_GetTick>
 8007c8a:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007c8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007c8e:	2a04      	cmp	r2, #4
 8007c90:	d121      	bne.n	8007cd6 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007c92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c94:	2120      	movs	r1, #32
 8007c96:	4620      	mov	r0, r4
 8007c98:	9200      	str	r2, [sp, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f7ff fdb2 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007ca0:	b9b8      	cbnz	r0, 8007cd2 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007ca2:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007ca4:	2388      	movs	r3, #136	; 0x88
 8007ca6:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007ca8:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007caa:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007cac:	d108      	bne.n	8007cc0 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007cae:	686b      	ldr	r3, [r5, #4]
 8007cb0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007cb8:	6811      	ldr	r1, [r2, #0]
 8007cba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007cbe:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007cc6:	f023 0308 	bic.w	r3, r3, #8
 8007cca:	4333      	orrs	r3, r6
 8007ccc:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007cd0:	6013      	str	r3, [r2, #0]
}
 8007cd2:	b002      	add	sp, #8
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007cd6:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007cd8:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007cda:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cdc:	e7f9      	b.n	8007cd2 <HAL_OSPI_MemoryMapped+0x52>

08007cde <HAL_OSPI_Abort>:
{
 8007cde:	b530      	push	{r4, r5, lr}
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8007ce4:	f7fe fbb0 	bl	8006448 <HAL_GetTick>
 8007ce8:	4603      	mov	r3, r0
  state = hospi->State;
 8007cea:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007cec:	f012 0f0c 	tst.w	r2, #12
 8007cf0:	d035      	beq.n	8007d5e <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007cf2:	6821      	ldr	r1, [r4, #0]
 8007cf4:	680a      	ldr	r2, [r1, #0]
 8007cf6:	f012 0204 	ands.w	r2, r2, #4
 8007cfa:	d02b      	beq.n	8007d54 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007cfc:	680a      	ldr	r2, [r1, #0]
 8007cfe:	9003      	str	r0, [sp, #12]
 8007d00:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007d04:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007d06:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007d08:	f7ff fc6c 	bl	80075e4 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	b108      	cbz	r0, 8007d14 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007d10:	2204      	movs	r2, #4
 8007d12:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007d14:	6822      	ldr	r2, [r4, #0]
 8007d16:	6a11      	ldr	r1, [r2, #32]
 8007d18:	0689      	lsls	r1, r1, #26
 8007d1a:	d51d      	bpl.n	8007d58 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007d1c:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007d1e:	4620      	mov	r0, r4
 8007d20:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007d22:	f041 0102 	orr.w	r1, r1, #2
 8007d26:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007d28:	2102      	movs	r1, #2
 8007d2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007d2c:	9200      	str	r2, [sp, #0]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f7ff fd68 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	b958      	cbnz	r0, 8007d50 <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007d3c:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007d3e:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007d40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007d42:	9200      	str	r2, [sp, #0]
 8007d44:	4602      	mov	r2, r0
 8007d46:	4620      	mov	r0, r4
 8007d48:	f7ff fd5c 	bl	8007804 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007d4c:	b900      	cbnz	r0, 8007d50 <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8007d4e:	6565      	str	r5, [r4, #84]	; 0x54
}
 8007d50:	b005      	add	sp, #20
 8007d52:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007d54:	4610      	mov	r0, r2
 8007d56:	e7dd      	b.n	8007d14 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	6563      	str	r3, [r4, #84]	; 0x54
 8007d5c:	e7f8      	b.n	8007d50 <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d5e:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007d60:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d62:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d64:	e7f4      	b.n	8007d50 <HAL_OSPI_Abort+0x72>
	...

08007d68 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8007d68:	4bc4      	ldr	r3, [pc, #784]	; (800807c <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8007d6a:	6802      	ldr	r2, [r0, #0]
{
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8007d70:	429a      	cmp	r2, r3
{
 8007d72:	b08f      	sub	sp, #60	; 0x3c
 8007d74:	4688      	mov	r8, r1
    instance = 1U;
 8007d76:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8007d7a:	bf0b      	itete	eq
 8007d7c:	f04f 0c01 	moveq.w	ip, #1
 8007d80:	f04f 0c00 	movne.w	ip, #0
 8007d84:	2400      	moveq	r4, #0
 8007d86:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007d88:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007d8a:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007d8c:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8008084 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007d90:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8008088 <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8007d94:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8007d96:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8007d98:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8007d9c:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8007da0:	f040 8126 	bne.w	8007ff0 <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007da4:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8007da8:	f012 0f01 	tst.w	r2, #1
 8007dac:	bf0c      	ite	eq
 8007dae:	4648      	moveq	r0, r9
 8007db0:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007db4:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8007db6:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8007dba:	1c79      	adds	r1, r7, #1
 8007dbc:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007dbe:	07d7      	lsls	r7, r2, #31
 8007dc0:	d504      	bpl.n	8007dcc <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007dc2:	ea82 0700 	eor.w	r7, r2, r0
 8007dc6:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007dc8:	bf58      	it	pl
 8007dca:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007dcc:	06d7      	lsls	r7, r2, #27
 8007dce:	d504      	bpl.n	8007dda <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007dd0:	ea82 0700 	eor.w	r7, r2, r0
 8007dd4:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007dd6:	bf58      	it	pl
 8007dd8:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007dda:	05d7      	lsls	r7, r2, #23
 8007ddc:	d504      	bpl.n	8007de8 <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007dde:	ea82 0700 	eor.w	r7, r2, r0
 8007de2:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007de4:	bf58      	it	pl
 8007de6:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007de8:	03d7      	lsls	r7, r2, #15
 8007dea:	d50a      	bpl.n	8007e02 <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007dec:	ea82 0700 	eor.w	r7, r2, r0
 8007df0:	037f      	lsls	r7, r7, #13
 8007df2:	d406      	bmi.n	8007e02 <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007df4:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007df6:	bf54      	ite	pl
 8007df8:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007dfc:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8007e00:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007e02:	01d7      	lsls	r7, r2, #7
 8007e04:	d50a      	bpl.n	8007e1c <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007e06:	ea82 0700 	eor.w	r7, r2, r0
 8007e0a:	017f      	lsls	r7, r7, #5
 8007e0c:	d406      	bmi.n	8007e1c <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007e0e:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007e10:	bf54      	ite	pl
 8007e12:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007e16:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8007e1a:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e1c:	2902      	cmp	r1, #2
 8007e1e:	f04f 0701 	mov.w	r7, #1
 8007e22:	d1c8      	bne.n	8007db6 <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007e24:	2d02      	cmp	r5, #2
 8007e26:	f103 0318 	add.w	r3, r3, #24
 8007e2a:	f040 80df 	bne.w	8007fec <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007e2e:	4a93      	ldr	r2, [pc, #588]	; (800807c <HAL_OSPIM_Config+0x314>)
 8007e30:	6815      	ldr	r5, [r2, #0]
 8007e32:	403d      	ands	r5, r7
 8007e34:	d004      	beq.n	8007e40 <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007e36:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007e38:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007e3a:	f023 0301 	bic.w	r3, r3, #1
 8007e3e:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007e40:	4b8f      	ldr	r3, [pc, #572]	; (8008080 <HAL_OSPIM_Config+0x318>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	07d0      	lsls	r0, r2, #31
 8007e46:	f140 80d5 	bpl.w	8007ff4 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8007e52:	f045 0302 	orr.w	r3, r5, #2
 8007e56:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007e58:	ab0e      	add	r3, sp, #56	; 0x38
 8007e5a:	2218      	movs	r2, #24
 8007e5c:	fb02 3204 	mla	r2, r2, r4, r3
 8007e60:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e6a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e6e:	6819      	ldr	r1, [r3, #0]
 8007e70:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e74:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007e76:	4b83      	ldr	r3, [pc, #524]	; (8008084 <HAL_OSPIM_Config+0x31c>)
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	07c9      	lsls	r1, r1, #31
 8007e7c:	f140 80bc 	bpl.w	8007ff8 <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8007e88:	f1bc 0f00 	cmp.w	ip, #0
 8007e8c:	d030      	beq.n	8007ef0 <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e96:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	f042 0202 	orr.w	r2, r2, #2
 8007ea0:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea4:	b143      	cbz	r3, 8007eb8 <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007eac:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	f042 0220 	orr.w	r2, r2, #32
 8007eb6:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eba:	b15b      	cbz	r3, 8007ed4 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007ec8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007ed2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed6:	b15b      	cbz	r3, 8007ef0 <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007ee4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007eee:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007ef0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ef2:	f04f 0a18 	mov.w	sl, #24
 8007ef6:	f8d8 7000 	ldr.w	r7, [r8]
 8007efa:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8007efe:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8007f02:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8007f06:	454f      	cmp	r7, r9
 8007f08:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8007f0c:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8007f10:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8007f14:	f000 80ba 	beq.w	800808c <HAL_OSPIM_Config+0x324>
 8007f18:	4583      	cmp	fp, r0
 8007f1a:	d00a      	beq.n	8007f32 <HAL_OSPIM_Config+0x1ca>
 8007f1c:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8007f20:	4576      	cmp	r6, lr
 8007f22:	d006      	beq.n	8007f32 <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007f24:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8007f28:	4592      	cmp	sl, r2
 8007f2a:	d002      	beq.n	8007f32 <HAL_OSPIM_Config+0x1ca>
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	f040 80c0 	bne.w	80080b2 <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007f32:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007f36:	ae0e      	add	r6, sp, #56	; 0x38
 8007f38:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007f3c:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007f40:	f8d9 a000 	ldr.w	sl, [r9]
 8007f44:	f02a 0a01 	bic.w	sl, sl, #1
 8007f48:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007f4c:	f04f 0918 	mov.w	r9, #24
 8007f50:	fb09 690c 	mla	r9, r9, ip, r6
 8007f54:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8007f58:	f1b9 0f00 	cmp.w	r9, #0
 8007f5c:	d00b      	beq.n	8007f76 <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007f5e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007f62:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007f66:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8007f6a:	f8d9 a000 	ldr.w	sl, [r9]
 8007f6e:	f02a 0a10 	bic.w	sl, sl, #16
 8007f72:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f76:	f04f 0918 	mov.w	r9, #24
 8007f7a:	ae0e      	add	r6, sp, #56	; 0x38
 8007f7c:	fb09 6c0c 	mla	ip, r9, ip, r6
 8007f80:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f84:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8007f88:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007f8c:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007f90:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f94:	f8d9 a000 	ldr.w	sl, [r9]
 8007f98:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8007f9c:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007fa0:	f1bc 0f00 	cmp.w	ip, #0
 8007fa4:	d00f      	beq.n	8007fc6 <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007fa6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007faa:	f00c 0c01 	and.w	ip, ip, #1
 8007fae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007fb2:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007fb6:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007fba:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8007fbe:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8007fc2:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	d073      	beq.n	80080b2 <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007fca:	f101 3cff 	add.w	ip, r1, #4294967295
 8007fce:	f00c 0c01 	and.w	ip, ip, #1
 8007fd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007fd6:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007fda:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007fde:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007fe2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007fe6:	f8cc 1004 	str.w	r1, [ip, #4]
 8007fea:	e062      	b.n	80080b2 <HAL_OSPIM_Config+0x34a>
 8007fec:	460d      	mov	r5, r1
 8007fee:	e6d1      	b.n	8007d94 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e6df      	b.n	8007db4 <HAL_OSPIM_Config+0x4c>
 8007ff4:	9501      	str	r5, [sp, #4]
 8007ff6:	e72f      	b.n	8007e58 <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8007ff8:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f43f af77 	beq.w	8007ef0 <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008008:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	f021 0101 	bic.w	r1, r1, #1
 8008012:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8008014:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8008018:	b143      	cbz	r3, 800802c <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008020:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	f022 0210 	bic.w	r2, r2, #16
 800802a:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800802c:	2318      	movs	r3, #24
 800802e:	aa0e      	add	r2, sp, #56	; 0x38
 8008030:	fb03 2304 	mla	r3, r3, r4, r2
 8008034:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8008038:	b15b      	cbz	r3, 8008052 <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800803a:	3b01      	subs	r3, #1
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008046:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008050:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008052:	2318      	movs	r3, #24
 8008054:	aa0e      	add	r2, sp, #56	; 0x38
 8008056:	fb03 2304 	mla	r3, r3, r4, r2
 800805a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f43f af46 	beq.w	8007ef0 <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8008064:	3b01      	subs	r3, #1
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008070:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800807a:	e738      	b.n	8007eee <HAL_OSPIM_Config+0x186>
 800807c:	52005000 	.word	0x52005000
 8008080:	5200a000 	.word	0x5200a000
 8008084:	5200b400 	.word	0x5200b400
 8008088:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800808c:	4583      	cmp	fp, r0
 800808e:	f47f af50 	bne.w	8007f32 <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8008092:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8008096:	4592      	cmp	sl, r2
 8008098:	f47f af4b 	bne.w	8007f32 <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800809c:	4299      	cmp	r1, r3
 800809e:	f47f af48 	bne.w	8007f32 <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80080a2:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80082a0 <HAL_OSPIM_Config+0x538>
 80080a6:	f8dc 1000 	ldr.w	r1, [ip]
 80080aa:	f041 0101 	orr.w	r1, r1, #1
 80080ae:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80080b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80080b6:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 80080ba:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 80080be:	f8de 1000 	ldr.w	r1, [lr]
 80080c2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80080c6:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80080ca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80080ce:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80080d2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80080d6:	f101 3eff 	add.w	lr, r1, #4294967295
 80080da:	4971      	ldr	r1, [pc, #452]	; (80082a0 <HAL_OSPIM_Config+0x538>)
 80080dc:	f8d1 c000 	ldr.w	ip, [r1]
 80080e0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80080e4:	45e6      	cmp	lr, ip
 80080e6:	d907      	bls.n	80080f8 <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80080e8:	f8d1 c000 	ldr.w	ip, [r1]
 80080ec:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 80080f0:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 80080f4:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80080f8:	6809      	ldr	r1, [r1, #0]
 80080fa:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 80080fe:	f011 0f01 	tst.w	r1, #1
 8008102:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8008106:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 800810a:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 800810e:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 8008112:	d063      	beq.n	80081dc <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8008114:	680c      	ldr	r4, [r1, #0]
 8008116:	f024 0403 	bic.w	r4, r4, #3
 800811a:	f044 0401 	orr.w	r4, r4, #1
 800811e:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 8008120:	b150      	cbz	r0, 8008138 <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8008122:	0080      	lsls	r0, r0, #2
 8008124:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8008128:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 800812c:	6801      	ldr	r1, [r0, #0]
 800812e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8008132:	f041 0110 	orr.w	r1, r1, #16
 8008136:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008138:	f1bc 0f00 	cmp.w	ip, #0
 800813c:	d02e      	beq.n	800819c <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800813e:	3a01      	subs	r2, #1
 8008140:	f002 0201 	and.w	r2, r2, #1
 8008144:	0092      	lsls	r2, r2, #2
 8008146:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800814a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800814e:	6851      	ldr	r1, [r2, #4]
 8008150:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8008154:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008158:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800815a:	b37f      	cbz	r7, 80081bc <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800815c:	3b01      	subs	r3, #1
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008168:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008172:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008176:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8008178:	b125      	cbz	r5, 8008184 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800817a:	4a4a      	ldr	r2, [pc, #296]	; (80082a4 <HAL_OSPIM_Config+0x53c>)
 800817c:	6813      	ldr	r3, [r2, #0]
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	079b      	lsls	r3, r3, #30
 8008188:	d504      	bpl.n	8008194 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800818a:	4a47      	ldr	r2, [pc, #284]	; (80082a8 <HAL_OSPIM_Config+0x540>)
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	f043 0301 	orr.w	r3, r3, #1
 8008192:	6013      	str	r3, [r2, #0]
}
 8008194:	2000      	movs	r0, #0
 8008196:	b00f      	add	sp, #60	; 0x3c
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800819c:	2a00      	cmp	r2, #0
 800819e:	d0dc      	beq.n	800815a <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80081a0:	3a01      	subs	r2, #1
 80081a2:	f002 0201 	and.w	r2, r2, #1
 80081a6:	0092      	lsls	r2, r2, #2
 80081a8:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80081ac:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80081b0:	6851      	ldr	r1, [r2, #4]
 80081b2:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80081b6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80081ba:	e7cd      	b.n	8008158 <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0db      	beq.n	8008178 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80081cc:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80081d6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80081da:	e7cc      	b.n	8008176 <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80081dc:	f8d1 e000 	ldr.w	lr, [r1]
 80081e0:	f02e 0e03 	bic.w	lr, lr, #3
 80081e4:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 80081e8:	f04e 0e01 	orr.w	lr, lr, #1
 80081ec:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 80081f0:	b160      	cbz	r0, 800820c <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80081f2:	0080      	lsls	r0, r0, #2
 80081f4:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 80081f8:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80081fc:	6801      	ldr	r1, [r0, #0]
 80081fe:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8008202:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8008206:	f041 0110 	orr.w	r1, r1, #16
 800820a:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800820c:	f1bc 0f00 	cmp.w	ip, #0
 8008210:	d021      	beq.n	8008256 <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008212:	3a01      	subs	r2, #1
 8008214:	f002 0201 	and.w	r2, r2, #1
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800821e:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8008222:	6851      	ldr	r1, [r2, #4]
 8008224:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8008228:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 800822c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008230:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008232:	b317      	cbz	r7, 800827a <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008234:	3b01      	subs	r3, #1
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008240:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800824a:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 800824e:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008252:	605c      	str	r4, [r3, #4]
 8008254:	e790      	b.n	8008178 <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008256:	2a00      	cmp	r2, #0
 8008258:	d0eb      	beq.n	8008232 <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800825a:	3a01      	subs	r2, #1
 800825c:	f002 0201 	and.w	r2, r2, #1
 8008260:	0092      	lsls	r2, r2, #2
 8008262:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8008266:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800826a:	6851      	ldr	r1, [r2, #4]
 800826c:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8008270:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8008274:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008278:	e7da      	b.n	8008230 <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800827a:	2b00      	cmp	r3, #0
 800827c:	f43f af7c 	beq.w	8008178 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008280:	3b01      	subs	r3, #1
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800828c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008296:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 800829a:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 800829e:	e7d8      	b.n	8008252 <HAL_OSPIM_Config+0x4ea>
 80082a0:	5200b400 	.word	0x5200b400
 80082a4:	52005000 	.word	0x52005000
 80082a8:	5200a000 	.word	0x5200a000

080082ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082ac:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80082ae:	4d1d      	ldr	r5, [pc, #116]	; (8008324 <HAL_PWREx_ConfigSupply+0x78>)
{
 80082b0:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80082b2:	68eb      	ldr	r3, [r5, #12]
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d006      	beq.n	80082ca <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082bc:	68e8      	ldr	r0, [r5, #12]
 80082be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082c2:	1b00      	subs	r0, r0, r4
 80082c4:	bf18      	it	ne
 80082c6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082ca:	68eb      	ldr	r3, [r5, #12]
 80082cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80082d0:	4303      	orrs	r3, r0
 80082d2:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80082d4:	f7fe f8b8 	bl	8006448 <HAL_GetTick>
 80082d8:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082da:	686b      	ldr	r3, [r5, #4]
 80082dc:	049b      	lsls	r3, r3, #18
 80082de:	d508      	bpl.n	80082f2 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80082e0:	f1a4 031d 	sub.w	r3, r4, #29
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d90c      	bls.n	8008302 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80082e8:	3c2d      	subs	r4, #45	; 0x2d
 80082ea:	2c01      	cmp	r4, #1
 80082ec:	d909      	bls.n	8008302 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80082ee:	2000      	movs	r0, #0
 80082f0:	e7ea      	b.n	80082c8 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082f2:	f7fe f8a9 	bl	8006448 <HAL_GetTick>
 80082f6:	1b80      	subs	r0, r0, r6
 80082f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80082fc:	d9ed      	bls.n	80082da <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80082fe:	2001      	movs	r0, #1
 8008300:	e7e2      	b.n	80082c8 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008302:	f7fe f8a1 	bl	8006448 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008306:	4d07      	ldr	r5, [pc, #28]	; (8008324 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8008308:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800830a:	68eb      	ldr	r3, [r5, #12]
 800830c:	f003 0311 	and.w	r3, r3, #17
 8008310:	2b11      	cmp	r3, #17
 8008312:	d0ec      	beq.n	80082ee <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008314:	f7fe f898 	bl	8006448 <HAL_GetTick>
 8008318:	1b00      	subs	r0, r0, r4
 800831a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800831e:	d9f4      	bls.n	800830a <HAL_PWREx_ConfigSupply+0x5e>
 8008320:	e7ed      	b.n	80082fe <HAL_PWREx_ConfigSupply+0x52>
 8008322:	bf00      	nop
 8008324:	58024800 	.word	0x58024800

08008328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800832a:	4604      	mov	r4, r0
 800832c:	b908      	cbnz	r0, 8008332 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800832e:	2001      	movs	r0, #1
 8008330:	e07f      	b.n	8008432 <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008332:	6803      	ldr	r3, [r0, #0]
 8008334:	07df      	lsls	r7, r3, #31
 8008336:	d453      	bmi.n	80083e0 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	079e      	lsls	r6, r3, #30
 800833c:	f100 80a3 	bmi.w	8008486 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	06da      	lsls	r2, r3, #27
 8008344:	d51c      	bpl.n	8008380 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008346:	4ba0      	ldr	r3, [pc, #640]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 8008348:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800834a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008350:	2a08      	cmp	r2, #8
 8008352:	d007      	beq.n	8008364 <HAL_RCC_OscConfig+0x3c>
 8008354:	2a18      	cmp	r2, #24
 8008356:	f040 80e5 	bne.w	8008524 <HAL_RCC_OscConfig+0x1fc>
 800835a:	f001 0203 	and.w	r2, r1, #3
 800835e:	2a01      	cmp	r2, #1
 8008360:	f040 80e0 	bne.w	8008524 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	05db      	lsls	r3, r3, #23
 8008368:	d502      	bpl.n	8008370 <HAL_RCC_OscConfig+0x48>
 800836a:	69e3      	ldr	r3, [r4, #28]
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d1de      	bne.n	800832e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008370:	4a95      	ldr	r2, [pc, #596]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 8008372:	6a21      	ldr	r1, [r4, #32]
 8008374:	68d3      	ldr	r3, [r2, #12]
 8008376:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800837a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800837e:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	0719      	lsls	r1, r3, #28
 8008384:	f100 80fb 	bmi.w	800857e <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	069a      	lsls	r2, r3, #26
 800838c:	f100 8120 	bmi.w	80085d0 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	075d      	lsls	r5, r3, #29
 8008394:	d51e      	bpl.n	80083d4 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8008396:	4d8d      	ldr	r5, [pc, #564]	; (80085cc <HAL_RCC_OscConfig+0x2a4>)
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80083a0:	f7fe f852 	bl	8006448 <HAL_GetTick>
 80083a4:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	05da      	lsls	r2, r3, #23
 80083aa:	f140 8136 	bpl.w	800861a <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	4d85      	ldr	r5, [pc, #532]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	f040 8138 	bne.w	8008628 <HAL_RCC_OscConfig+0x300>
 80083b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80083c4:	f7fe f840 	bl	8006448 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083c8:	4e7f      	ldr	r6, [pc, #508]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 80083ca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083cc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80083ce:	079b      	lsls	r3, r3, #30
 80083d0:	f140 8150 	bpl.w	8008674 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 8153 	bne.w	8008682 <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 80083dc:	2000      	movs	r0, #0
 80083de:	e028      	b.n	8008432 <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083e0:	4b79      	ldr	r3, [pc, #484]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 80083e2:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083e6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083ea:	2a10      	cmp	r2, #16
 80083ec:	d005      	beq.n	80083fa <HAL_RCC_OscConfig+0xd2>
 80083ee:	2a18      	cmp	r2, #24
 80083f0:	d10a      	bne.n	8008408 <HAL_RCC_OscConfig+0xe0>
 80083f2:	f001 0203 	and.w	r2, r1, #3
 80083f6:	2a02      	cmp	r2, #2
 80083f8:	d106      	bne.n	8008408 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	039d      	lsls	r5, r3, #14
 80083fe:	d59b      	bpl.n	8008338 <HAL_RCC_OscConfig+0x10>
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d198      	bne.n	8008338 <HAL_RCC_OscConfig+0x10>
 8008406:	e792      	b.n	800832e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008408:	6862      	ldr	r2, [r4, #4]
 800840a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800840e:	d111      	bne.n	8008434 <HAL_RCC_OscConfig+0x10c>
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008416:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008418:	f7fe f816 	bl	8006448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841c:	4e6a      	ldr	r6, [pc, #424]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 800841e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	0398      	lsls	r0, r3, #14
 8008424:	d488      	bmi.n	8008338 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008426:	f7fe f80f 	bl	8006448 <HAL_GetTick>
 800842a:	1b40      	subs	r0, r0, r5
 800842c:	2864      	cmp	r0, #100	; 0x64
 800842e:	d9f7      	bls.n	8008420 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8008430:	2003      	movs	r0, #3
}
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008434:	4d64      	ldr	r5, [pc, #400]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b99a      	cbnz	r2, 8008462 <HAL_RCC_OscConfig+0x13a>
 800843a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008446:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008448:	f7fd fffe 	bl	8006448 <HAL_GetTick>
 800844c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	0399      	lsls	r1, r3, #14
 8008452:	f57f af71 	bpl.w	8008338 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008456:	f7fd fff7 	bl	8006448 <HAL_GetTick>
 800845a:	1b80      	subs	r0, r0, r6
 800845c:	2864      	cmp	r0, #100	; 0x64
 800845e:	d9f6      	bls.n	800844e <HAL_RCC_OscConfig+0x126>
 8008460:	e7e6      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008462:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008466:	d107      	bne.n	8008478 <HAL_RCC_OscConfig+0x150>
 8008468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	682b      	ldr	r3, [r5, #0]
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	e7cf      	b.n	8008418 <HAL_RCC_OscConfig+0xf0>
 8008478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008484:	e7f6      	b.n	8008474 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008486:	4b50      	ldr	r3, [pc, #320]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 8008488:	68e1      	ldr	r1, [r4, #12]
 800848a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800848c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800848e:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008492:	d003      	beq.n	800849c <HAL_RCC_OscConfig+0x174>
 8008494:	2a18      	cmp	r2, #24
 8008496:	d121      	bne.n	80084dc <HAL_RCC_OscConfig+0x1b4>
 8008498:	0782      	lsls	r2, r0, #30
 800849a:	d11f      	bne.n	80084dc <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	075b      	lsls	r3, r3, #29
 80084a0:	d502      	bpl.n	80084a8 <HAL_RCC_OscConfig+0x180>
 80084a2:	2900      	cmp	r1, #0
 80084a4:	f43f af43 	beq.w	800832e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084a8:	4d47      	ldr	r5, [pc, #284]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 80084aa:	682a      	ldr	r2, [r5, #0]
 80084ac:	f022 0219 	bic.w	r2, r2, #25
 80084b0:	430a      	orrs	r2, r1
 80084b2:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80084b4:	f7fd ffc8 	bl	8006448 <HAL_GetTick>
 80084b8:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	075f      	lsls	r7, r3, #29
 80084be:	d507      	bpl.n	80084d0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c0:	686b      	ldr	r3, [r5, #4]
 80084c2:	6922      	ldr	r2, [r4, #16]
 80084c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084cc:	606b      	str	r3, [r5, #4]
 80084ce:	e737      	b.n	8008340 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084d0:	f7fd ffba 	bl	8006448 <HAL_GetTick>
 80084d4:	1b80      	subs	r0, r0, r6
 80084d6:	2802      	cmp	r0, #2
 80084d8:	d9ef      	bls.n	80084ba <HAL_RCC_OscConfig+0x192>
 80084da:	e7a9      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084dc:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084de:	b181      	cbz	r1, 8008502 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084e0:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e4:	4d38      	ldr	r5, [pc, #224]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084e6:	430a      	orrs	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084ea:	f7fd ffad 	bl	8006448 <HAL_GetTick>
 80084ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	0758      	lsls	r0, r3, #29
 80084f4:	d4e4      	bmi.n	80084c0 <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084f6:	f7fd ffa7 	bl	8006448 <HAL_GetTick>
 80084fa:	1b80      	subs	r0, r0, r6
 80084fc:	2802      	cmp	r0, #2
 80084fe:	d9f7      	bls.n	80084f0 <HAL_RCC_OscConfig+0x1c8>
 8008500:	e796      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 8008502:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008506:	4e30      	ldr	r6, [pc, #192]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 8008508:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800850a:	f7fd ff9d 	bl	8006448 <HAL_GetTick>
 800850e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008510:	6833      	ldr	r3, [r6, #0]
 8008512:	0759      	lsls	r1, r3, #29
 8008514:	f57f af14 	bpl.w	8008340 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008518:	f7fd ff96 	bl	8006448 <HAL_GetTick>
 800851c:	1b40      	subs	r0, r0, r5
 800851e:	2802      	cmp	r0, #2
 8008520:	d9f6      	bls.n	8008510 <HAL_RCC_OscConfig+0x1e8>
 8008522:	e785      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008524:	69e2      	ldr	r2, [r4, #28]
 8008526:	b1c2      	cbz	r2, 800855a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8008528:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800852a:	4d27      	ldr	r5, [pc, #156]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 800852c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008530:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008532:	f7fd ff89 	bl	8006448 <HAL_GetTick>
 8008536:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	05df      	lsls	r7, r3, #23
 800853c:	d507      	bpl.n	800854e <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800853e:	68eb      	ldr	r3, [r5, #12]
 8008540:	6a22      	ldr	r2, [r4, #32]
 8008542:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008546:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800854a:	60eb      	str	r3, [r5, #12]
 800854c:	e718      	b.n	8008380 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800854e:	f7fd ff7b 	bl	8006448 <HAL_GetTick>
 8008552:	1b80      	subs	r0, r0, r6
 8008554:	2802      	cmp	r0, #2
 8008556:	d9ef      	bls.n	8008538 <HAL_RCC_OscConfig+0x210>
 8008558:	e76a      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 800855a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800855c:	4e1a      	ldr	r6, [pc, #104]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 800855e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008562:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008564:	f7fd ff70 	bl	8006448 <HAL_GetTick>
 8008568:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	05d8      	lsls	r0, r3, #23
 800856e:	f57f af07 	bpl.w	8008380 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008572:	f7fd ff69 	bl	8006448 <HAL_GetTick>
 8008576:	1b40      	subs	r0, r0, r5
 8008578:	2802      	cmp	r0, #2
 800857a:	d9f6      	bls.n	800856a <HAL_RCC_OscConfig+0x242>
 800857c:	e758      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800857e:	6963      	ldr	r3, [r4, #20]
 8008580:	4d11      	ldr	r5, [pc, #68]	; (80085c8 <HAL_RCC_OscConfig+0x2a0>)
 8008582:	b183      	cbz	r3, 80085a6 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8008584:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800858c:	f7fd ff5c 	bl	8006448 <HAL_GetTick>
 8008590:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008592:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008594:	079b      	lsls	r3, r3, #30
 8008596:	f53f aef7 	bmi.w	8008388 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800859a:	f7fd ff55 	bl	8006448 <HAL_GetTick>
 800859e:	1b80      	subs	r0, r0, r6
 80085a0:	2802      	cmp	r0, #2
 80085a2:	d9f6      	bls.n	8008592 <HAL_RCC_OscConfig+0x26a>
 80085a4:	e744      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 80085a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80085ae:	f7fd ff4b 	bl	8006448 <HAL_GetTick>
 80085b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80085b6:	079f      	lsls	r7, r3, #30
 80085b8:	f57f aee6 	bpl.w	8008388 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085bc:	f7fd ff44 	bl	8006448 <HAL_GetTick>
 80085c0:	1b80      	subs	r0, r0, r6
 80085c2:	2802      	cmp	r0, #2
 80085c4:	d9f6      	bls.n	80085b4 <HAL_RCC_OscConfig+0x28c>
 80085c6:	e733      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
 80085c8:	58024400 	.word	0x58024400
 80085cc:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80085d0:	69a3      	ldr	r3, [r4, #24]
 80085d2:	4d83      	ldr	r5, [pc, #524]	; (80087e0 <HAL_RCC_OscConfig+0x4b8>)
 80085d4:	b183      	cbz	r3, 80085f8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80085de:	f7fd ff33 	bl	8006448 <HAL_GetTick>
 80085e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	0498      	lsls	r0, r3, #18
 80085e8:	f53f aed2 	bmi.w	8008390 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085ec:	f7fd ff2c 	bl	8006448 <HAL_GetTick>
 80085f0:	1b80      	subs	r0, r0, r6
 80085f2:	2802      	cmp	r0, #2
 80085f4:	d9f6      	bls.n	80085e4 <HAL_RCC_OscConfig+0x2bc>
 80085f6:	e71b      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008600:	f7fd ff22 	bl	8006448 <HAL_GetTick>
 8008604:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	0499      	lsls	r1, r3, #18
 800860a:	f57f aec1 	bpl.w	8008390 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800860e:	f7fd ff1b 	bl	8006448 <HAL_GetTick>
 8008612:	1b80      	subs	r0, r0, r6
 8008614:	2802      	cmp	r0, #2
 8008616:	d9f6      	bls.n	8008606 <HAL_RCC_OscConfig+0x2de>
 8008618:	e70a      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800861a:	f7fd ff15 	bl	8006448 <HAL_GetTick>
 800861e:	1b80      	subs	r0, r0, r6
 8008620:	2864      	cmp	r0, #100	; 0x64
 8008622:	f67f aec0 	bls.w	80083a6 <HAL_RCC_OscConfig+0x7e>
 8008626:	e703      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008628:	b9b3      	cbnz	r3, 8008658 <HAL_RCC_OscConfig+0x330>
 800862a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	672b      	str	r3, [r5, #112]	; 0x70
 8008636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008638:	f023 0304 	bic.w	r3, r3, #4
 800863c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800863e:	f7fd ff03 	bl	8006448 <HAL_GetTick>
 8008642:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008644:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008646:	0798      	lsls	r0, r3, #30
 8008648:	f57f aec4 	bpl.w	80083d4 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800864c:	f7fd fefc 	bl	8006448 <HAL_GetTick>
 8008650:	1b80      	subs	r0, r0, r6
 8008652:	42b8      	cmp	r0, r7
 8008654:	d9f6      	bls.n	8008644 <HAL_RCC_OscConfig+0x31c>
 8008656:	e6eb      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008658:	2b05      	cmp	r3, #5
 800865a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800865c:	d103      	bne.n	8008666 <HAL_RCC_OscConfig+0x33e>
 800865e:	f043 0304 	orr.w	r3, r3, #4
 8008662:	672b      	str	r3, [r5, #112]	; 0x70
 8008664:	e6a8      	b.n	80083b8 <HAL_RCC_OscConfig+0x90>
 8008666:	f023 0301 	bic.w	r3, r3, #1
 800866a:	672b      	str	r3, [r5, #112]	; 0x70
 800866c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800866e:	f023 0304 	bic.w	r3, r3, #4
 8008672:	e6a4      	b.n	80083be <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008674:	f7fd fee8 	bl	8006448 <HAL_GetTick>
 8008678:	1b40      	subs	r0, r0, r5
 800867a:	42b8      	cmp	r0, r7
 800867c:	f67f aea6 	bls.w	80083cc <HAL_RCC_OscConfig+0xa4>
 8008680:	e6d6      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008682:	4d57      	ldr	r5, [pc, #348]	; (80087e0 <HAL_RCC_OscConfig+0x4b8>)
 8008684:	692b      	ldr	r3, [r5, #16]
 8008686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800868a:	2b18      	cmp	r3, #24
 800868c:	d07a      	beq.n	8008784 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 800868e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008690:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008696:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008698:	d167      	bne.n	800876a <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 800869a:	f7fd fed5 	bl	8006448 <HAL_GetTick>
 800869e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	0199      	lsls	r1, r3, #6
 80086a4:	d45b      	bmi.n	800875e <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80086a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80086aa:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086b6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80086ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80086bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086c0:	3b01      	subs	r3, #1
 80086c2:	3a01      	subs	r2, #1
 80086c4:	025b      	lsls	r3, r3, #9
 80086c6:	0412      	lsls	r2, r2, #16
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80086ce:	4313      	orrs	r3, r2
 80086d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086d2:	3a01      	subs	r2, #1
 80086d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d8:	4313      	orrs	r3, r2
 80086da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80086dc:	3a01      	subs	r2, #1
 80086de:	0612      	lsls	r2, r2, #24
 80086e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80086e4:	4313      	orrs	r3, r2
 80086e6:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80086e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80086f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80086f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008700:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008702:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008704:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008706:	f023 030c 	bic.w	r3, r3, #12
 800870a:	4313      	orrs	r3, r2
 800870c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800870e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008710:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008712:	f023 0302 	bic.w	r3, r3, #2
 8008716:	4313      	orrs	r3, r2
 8008718:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800871a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800871c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008720:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008722:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008728:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800872a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800872c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008730:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008732:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008740:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008742:	f7fd fe81 	bl	8006448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008746:	4d26      	ldr	r5, [pc, #152]	; (80087e0 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8008748:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	019a      	lsls	r2, r3, #6
 800874e:	f53f ae45 	bmi.w	80083dc <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008752:	f7fd fe79 	bl	8006448 <HAL_GetTick>
 8008756:	1b00      	subs	r0, r0, r4
 8008758:	2802      	cmp	r0, #2
 800875a:	d9f6      	bls.n	800874a <HAL_RCC_OscConfig+0x422>
 800875c:	e668      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800875e:	f7fd fe73 	bl	8006448 <HAL_GetTick>
 8008762:	1b80      	subs	r0, r0, r6
 8008764:	2802      	cmp	r0, #2
 8008766:	d99b      	bls.n	80086a0 <HAL_RCC_OscConfig+0x378>
 8008768:	e662      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 800876a:	f7fd fe6d 	bl	8006448 <HAL_GetTick>
 800876e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	019b      	lsls	r3, r3, #6
 8008774:	f57f ae32 	bpl.w	80083dc <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008778:	f7fd fe66 	bl	8006448 <HAL_GetTick>
 800877c:	1b00      	subs	r0, r0, r4
 800877e:	2802      	cmp	r0, #2
 8008780:	d9f6      	bls.n	8008770 <HAL_RCC_OscConfig+0x448>
 8008782:	e655      	b.n	8008430 <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008784:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008786:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008788:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800878a:	f43f ae52 	beq.w	8008432 <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800878e:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008794:	4281      	cmp	r1, r0
 8008796:	f47f adca 	bne.w	800832e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800879a:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800879e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80087a0:	428a      	cmp	r2, r1
 80087a2:	f47f adc4 	bne.w	800832e <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80087a8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80087ac:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087ae:	4291      	cmp	r1, r2
 80087b0:	f47f adbd 	bne.w	800832e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80087b6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80087ba:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087bc:	4291      	cmp	r1, r2
 80087be:	f47f adb6 	bne.w	800832e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087c4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80087c8:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087ca:	4291      	cmp	r1, r2
 80087cc:	f47f adaf 	bne.w	800832e <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80087d2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80087d6:	3801      	subs	r0, #1
  return HAL_OK;
 80087d8:	1a18      	subs	r0, r3, r0
 80087da:	bf18      	it	ne
 80087dc:	2001      	movne	r0, #1
 80087de:	e628      	b.n	8008432 <HAL_RCC_OscConfig+0x10a>
 80087e0:	58024400 	.word	0x58024400

080087e4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087e4:	4b48      	ldr	r3, [pc, #288]	; (8008908 <HAL_RCC_GetSysClockFreq+0x124>)
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80087ec:	2a10      	cmp	r2, #16
{
 80087ee:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087f0:	f000 8086 	beq.w	8008900 <HAL_RCC_GetSysClockFreq+0x11c>
 80087f4:	2a18      	cmp	r2, #24
 80087f6:	d00c      	beq.n	8008812 <HAL_RCC_GetSysClockFreq+0x2e>
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	f040 8083 	bne.w	8008904 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4842      	ldr	r0, [pc, #264]	; (800890c <HAL_RCC_GetSysClockFreq+0x128>)
 8008802:	f012 0f20 	tst.w	r2, #32
 8008806:	d003      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800880e:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008810:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008812:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008814:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8008818:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800881c:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008820:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8008822:	d0f5      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008824:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008828:	f002 0201 	and.w	r2, r2, #1
 800882c:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008830:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008834:	4362      	muls	r2, r4
 8008836:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800883a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800883e:	2901      	cmp	r1, #1
 8008840:	ee07 2a90 	vmov	s15, r2
 8008844:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8008848:	d04c      	beq.n	80088e4 <HAL_RCC_GetSysClockFreq+0x100>
 800884a:	2902      	cmp	r1, #2
 800884c:	d03c      	beq.n	80088c8 <HAL_RCC_GetSysClockFreq+0xe4>
 800884e:	2900      	cmp	r1, #0
 8008850:	d148      	bne.n	80088e4 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d527      	bpl.n	80088a8 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	4a2c      	ldr	r2, [pc, #176]	; (800890c <HAL_RCC_GetSysClockFreq+0x128>)
 800885c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008862:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008868:	ee07 2a10 	vmov	s14, r2
 800886c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008870:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008874:	ee06 3a90 	vmov	s13, r3
 8008878:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800887c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008880:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008884:	4b20      	ldr	r3, [pc, #128]	; (8008908 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008886:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008890:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008892:	ee07 3a10 	vmov	s14, r3
 8008896:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800889a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800889e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80088a2:	ee17 0a90 	vmov	r0, s15
 80088a6:	e7b3      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ae:	ee07 3a10 	vmov	s14, r3
 80088b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088be:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008910 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80088c6:	e7dd      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a10 	vmov	s14, r3
 80088d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088de:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8008914 <HAL_RCC_GetSysClockFreq+0x130>
 80088e2:	e7ee      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	ee07 3a10 	vmov	s14, r3
 80088ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088fa:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008918 <HAL_RCC_GetSysClockFreq+0x134>
 80088fe:	e7e0      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008900:	4806      	ldr	r0, [pc, #24]	; (800891c <HAL_RCC_GetSysClockFreq+0x138>)
 8008902:	e785      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8008904:	4806      	ldr	r0, [pc, #24]	; (8008920 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008906:	e783      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0x2c>
 8008908:	58024400 	.word	0x58024400
 800890c:	03d09000 	.word	0x03d09000
 8008910:	4c742400 	.word	0x4c742400
 8008914:	4b989680 	.word	0x4b989680
 8008918:	4a742400 	.word	0x4a742400
 800891c:	01312d00 	.word	0x01312d00
 8008920:	003d0900 	.word	0x003d0900

08008924 <HAL_RCC_ClockConfig>:
{
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800892a:	4604      	mov	r4, r0
 800892c:	b910      	cbnz	r0, 8008934 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800892e:	2001      	movs	r0, #1
}
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008934:	4a88      	ldr	r2, [pc, #544]	; (8008b58 <HAL_RCC_ClockConfig+0x234>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	428b      	cmp	r3, r1
 800893e:	f0c0 8093 	bcc.w	8008a68 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	075f      	lsls	r7, r3, #29
 8008946:	f100 809b 	bmi.w	8008a80 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800894a:	071e      	lsls	r6, r3, #28
 800894c:	d50b      	bpl.n	8008966 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800894e:	4983      	ldr	r1, [pc, #524]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008950:	6966      	ldr	r6, [r4, #20]
 8008952:	69c8      	ldr	r0, [r1, #28]
 8008954:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008958:	4286      	cmp	r6, r0
 800895a:	d904      	bls.n	8008966 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800895c:	69ca      	ldr	r2, [r1, #28]
 800895e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008962:	4332      	orrs	r2, r6
 8008964:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008966:	06d8      	lsls	r0, r3, #27
 8008968:	d50b      	bpl.n	8008982 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800896a:	497c      	ldr	r1, [pc, #496]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 800896c:	69a6      	ldr	r6, [r4, #24]
 800896e:	69c8      	ldr	r0, [r1, #28]
 8008970:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008974:	4286      	cmp	r6, r0
 8008976:	d904      	bls.n	8008982 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008978:	69ca      	ldr	r2, [r1, #28]
 800897a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800897e:	4332      	orrs	r2, r6
 8008980:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008982:	0699      	lsls	r1, r3, #26
 8008984:	d50b      	bpl.n	800899e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008986:	4975      	ldr	r1, [pc, #468]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008988:	69e6      	ldr	r6, [r4, #28]
 800898a:	6a08      	ldr	r0, [r1, #32]
 800898c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008990:	4286      	cmp	r6, r0
 8008992:	d904      	bls.n	800899e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008994:	6a0a      	ldr	r2, [r1, #32]
 8008996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800899a:	4332      	orrs	r2, r6
 800899c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800899e:	079a      	lsls	r2, r3, #30
 80089a0:	d50b      	bpl.n	80089ba <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089a2:	496e      	ldr	r1, [pc, #440]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 80089a4:	68e6      	ldr	r6, [r4, #12]
 80089a6:	6988      	ldr	r0, [r1, #24]
 80089a8:	f000 000f 	and.w	r0, r0, #15
 80089ac:	4286      	cmp	r6, r0
 80089ae:	d904      	bls.n	80089ba <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b0:	698a      	ldr	r2, [r1, #24]
 80089b2:	f022 020f 	bic.w	r2, r2, #15
 80089b6:	4332      	orrs	r2, r6
 80089b8:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ba:	07df      	lsls	r7, r3, #31
 80089bc:	d46e      	bmi.n	8008a9c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	079e      	lsls	r6, r3, #30
 80089c2:	f100 80a1 	bmi.w	8008b08 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089c6:	4964      	ldr	r1, [pc, #400]	; (8008b58 <HAL_RCC_ClockConfig+0x234>)
 80089c8:	680a      	ldr	r2, [r1, #0]
 80089ca:	f002 020f 	and.w	r2, r2, #15
 80089ce:	42aa      	cmp	r2, r5
 80089d0:	f200 80a8 	bhi.w	8008b24 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089d4:	0758      	lsls	r0, r3, #29
 80089d6:	f100 80b1 	bmi.w	8008b3c <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089da:	0719      	lsls	r1, r3, #28
 80089dc:	d50b      	bpl.n	80089f6 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089de:	495f      	ldr	r1, [pc, #380]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 80089e0:	6965      	ldr	r5, [r4, #20]
 80089e2:	69c8      	ldr	r0, [r1, #28]
 80089e4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80089e8:	4285      	cmp	r5, r0
 80089ea:	d204      	bcs.n	80089f6 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089ec:	69ca      	ldr	r2, [r1, #28]
 80089ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80089f2:	432a      	orrs	r2, r5
 80089f4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f6:	06da      	lsls	r2, r3, #27
 80089f8:	d50b      	bpl.n	8008a12 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089fa:	4958      	ldr	r1, [pc, #352]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 80089fc:	69a5      	ldr	r5, [r4, #24]
 80089fe:	69c8      	ldr	r0, [r1, #28]
 8008a00:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008a04:	4285      	cmp	r5, r0
 8008a06:	d204      	bcs.n	8008a12 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a08:	69ca      	ldr	r2, [r1, #28]
 8008a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a0e:	432a      	orrs	r2, r5
 8008a10:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a12:	069b      	lsls	r3, r3, #26
 8008a14:	d50b      	bpl.n	8008a2e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a16:	4a51      	ldr	r2, [pc, #324]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008a18:	69e0      	ldr	r0, [r4, #28]
 8008a1a:	6a11      	ldr	r1, [r2, #32]
 8008a1c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008a20:	4288      	cmp	r0, r1
 8008a22:	d204      	bcs.n	8008a2e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a24:	6a13      	ldr	r3, [r2, #32]
 8008a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2a:	4303      	orrs	r3, r0
 8008a2c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a2e:	f7ff fed9 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 8008a32:	494a      	ldr	r1, [pc, #296]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008a34:	4a4a      	ldr	r2, [pc, #296]	; (8008b60 <HAL_RCC_ClockConfig+0x23c>)
 8008a36:	698b      	ldr	r3, [r1, #24]
 8008a38:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008a3c:	5cd3      	ldrb	r3, [r2, r3]
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a44:	698b      	ldr	r3, [r1, #24]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	5cd3      	ldrb	r3, [r2, r3]
 8008a4c:	4a45      	ldr	r2, [pc, #276]	; (8008b64 <HAL_RCC_ClockConfig+0x240>)
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	fa20 f303 	lsr.w	r3, r0, r3
 8008a56:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8008a58:	4b43      	ldr	r3, [pc, #268]	; (8008b68 <HAL_RCC_ClockConfig+0x244>)
 8008a5a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8008a5c:	4b43      	ldr	r3, [pc, #268]	; (8008b6c <HAL_RCC_ClockConfig+0x248>)
}
 8008a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	f7f9 b8de 	b.w	8001c24 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a68:	6813      	ldr	r3, [r2, #0]
 8008a6a:	f023 030f 	bic.w	r3, r3, #15
 8008a6e:	430b      	orrs	r3, r1
 8008a70:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	f47f af58 	bne.w	800892e <HAL_RCC_ClockConfig+0xa>
 8008a7e:	e760      	b.n	8008942 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a80:	4936      	ldr	r1, [pc, #216]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008a82:	6926      	ldr	r6, [r4, #16]
 8008a84:	6988      	ldr	r0, [r1, #24]
 8008a86:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008a8a:	4286      	cmp	r6, r0
 8008a8c:	f67f af5d 	bls.w	800894a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a90:	698a      	ldr	r2, [r1, #24]
 8008a92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a96:	4332      	orrs	r2, r6
 8008a98:	618a      	str	r2, [r1, #24]
 8008a9a:	e756      	b.n	800894a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a9c:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008a9e:	68a1      	ldr	r1, [r4, #8]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aaa:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aac:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aae:	2a02      	cmp	r2, #2
 8008ab0:	d11d      	bne.n	8008aee <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ab2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ab6:	f43f af3a 	beq.w	800892e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aba:	4e28      	ldr	r6, [pc, #160]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ac0:	6933      	ldr	r3, [r6, #16]
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008aca:	f7fd fcbd 	bl	8006448 <HAL_GetTick>
 8008ace:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad0:	6933      	ldr	r3, [r6, #16]
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ad8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008adc:	f43f af6f 	beq.w	80089be <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ae0:	f7fd fcb2 	bl	8006448 <HAL_GetTick>
 8008ae4:	1bc0      	subs	r0, r0, r7
 8008ae6:	4540      	cmp	r0, r8
 8008ae8:	d9f2      	bls.n	8008ad0 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008aea:	2003      	movs	r0, #3
 8008aec:	e720      	b.n	8008930 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aee:	2a03      	cmp	r2, #3
 8008af0:	d102      	bne.n	8008af8 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008af2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008af6:	e7de      	b.n	8008ab6 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008af8:	2a01      	cmp	r2, #1
 8008afa:	d102      	bne.n	8008b02 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008afc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008b00:	e7d9      	b.n	8008ab6 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b02:	f013 0f04 	tst.w	r3, #4
 8008b06:	e7d6      	b.n	8008ab6 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b08:	4914      	ldr	r1, [pc, #80]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008b0a:	68e6      	ldr	r6, [r4, #12]
 8008b0c:	6988      	ldr	r0, [r1, #24]
 8008b0e:	f000 000f 	and.w	r0, r0, #15
 8008b12:	4286      	cmp	r6, r0
 8008b14:	f4bf af57 	bcs.w	80089c6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b18:	698a      	ldr	r2, [r1, #24]
 8008b1a:	f022 020f 	bic.w	r2, r2, #15
 8008b1e:	4332      	orrs	r2, r6
 8008b20:	618a      	str	r2, [r1, #24]
 8008b22:	e750      	b.n	80089c6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b24:	680a      	ldr	r2, [r1, #0]
 8008b26:	f022 020f 	bic.w	r2, r2, #15
 8008b2a:	432a      	orrs	r2, r5
 8008b2c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b2e:	680a      	ldr	r2, [r1, #0]
 8008b30:	f002 020f 	and.w	r2, r2, #15
 8008b34:	42aa      	cmp	r2, r5
 8008b36:	f47f aefa 	bne.w	800892e <HAL_RCC_ClockConfig+0xa>
 8008b3a:	e74b      	b.n	80089d4 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b3c:	4907      	ldr	r1, [pc, #28]	; (8008b5c <HAL_RCC_ClockConfig+0x238>)
 8008b3e:	6925      	ldr	r5, [r4, #16]
 8008b40:	6988      	ldr	r0, [r1, #24]
 8008b42:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008b46:	4285      	cmp	r5, r0
 8008b48:	f4bf af47 	bcs.w	80089da <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b4c:	698a      	ldr	r2, [r1, #24]
 8008b4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b52:	432a      	orrs	r2, r5
 8008b54:	618a      	str	r2, [r1, #24]
 8008b56:	e740      	b.n	80089da <HAL_RCC_ClockConfig+0xb6>
 8008b58:	52002000 	.word	0x52002000
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	0801e6a0 	.word	0x0801e6a0
 8008b64:	24000070 	.word	0x24000070
 8008b68:	2400006c 	.word	0x2400006c
 8008b6c:	24000078 	.word	0x24000078

08008b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b70:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b72:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <HAL_RCC_GetHCLKFreq+0x34>)
 8008b74:	f7ff fe36 	bl	80087e4 <HAL_RCC_GetSysClockFreq>
 8008b78:	490b      	ldr	r1, [pc, #44]	; (8008ba8 <HAL_RCC_GetHCLKFreq+0x38>)
 8008b7a:	69a3      	ldr	r3, [r4, #24]
 8008b7c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008b80:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b82:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b84:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b88:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b8c:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b90:	5ccb      	ldrb	r3, [r1, r3]
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	fa22 f003 	lsr.w	r0, r2, r3
 8008b9a:	4b04      	ldr	r3, [pc, #16]	; (8008bac <HAL_RCC_GetHCLKFreq+0x3c>)
 8008b9c:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b9e:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <HAL_RCC_GetHCLKFreq+0x40>)
 8008ba0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	0801e6a0 	.word	0x0801e6a0
 8008bac:	24000070 	.word	0x24000070
 8008bb0:	2400006c 	.word	0x2400006c

08008bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bb4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bb6:	f7ff ffdb 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008bbc:	4a05      	ldr	r2, [pc, #20]	; (8008bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008bc4:	5cd3      	ldrb	r3, [r2, r3]
 8008bc6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bca:	40d8      	lsrs	r0, r3
 8008bcc:	bd08      	pop	{r3, pc}
 8008bce:	bf00      	nop
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	0801e6a0 	.word	0x0801e6a0

08008bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bda:	f7ff ffc9 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008be0:	4a05      	ldr	r2, [pc, #20]	; (8008bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008be8:	5cd3      	ldrb	r3, [r2, r3]
 8008bea:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008bee:	40d8      	lsrs	r0, r3
 8008bf0:	bd08      	pop	{r3, pc}
 8008bf2:	bf00      	nop
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	0801e6a0 	.word	0x0801e6a0

08008bfc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008bfc:	233f      	movs	r3, #63	; 0x3f
 8008bfe:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c00:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <HAL_RCC_GetClockConfig+0x4c>)
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	f002 0207 	and.w	r2, r2, #7
 8008c08:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008c10:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	f002 020f 	and.w	r2, r2, #15
 8008c18:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008c20:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008c28:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008c2a:	69da      	ldr	r2, [r3, #28]
 8008c2c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008c30:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c38:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c3a:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <HAL_RCC_GetClockConfig+0x50>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	600b      	str	r3, [r1, #0]
}
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	52002000 	.word	0x52002000

08008c50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c52:	4c3a      	ldr	r4, [pc, #232]	; (8008d3c <RCCEx_PLL2_Config+0xec>)
{
 8008c54:	4606      	mov	r6, r0
 8008c56:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d069      	beq.n	8008d36 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6a:	f7fd fbed 	bl	8006448 <HAL_GetTick>
 8008c6e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	011a      	lsls	r2, r3, #4
 8008c74:	d44b      	bmi.n	8008d0e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c78:	6832      	ldr	r2, [r6, #0]
 8008c7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c7e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c84:	68b3      	ldr	r3, [r6, #8]
 8008c86:	68f2      	ldr	r2, [r6, #12]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	3a01      	subs	r2, #1
 8008c8c:	025b      	lsls	r3, r3, #9
 8008c8e:	0412      	lsls	r2, r2, #16
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c96:	4313      	orrs	r3, r2
 8008c98:	6872      	ldr	r2, [r6, #4]
 8008c9a:	3a01      	subs	r2, #1
 8008c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	6932      	ldr	r2, [r6, #16]
 8008ca4:	3a01      	subs	r2, #1
 8008ca6:	0612      	lsls	r2, r2, #24
 8008ca8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008cac:	4313      	orrs	r3, r2
 8008cae:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cb2:	6972      	ldr	r2, [r6, #20]
 8008cb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cbe:	69b2      	ldr	r2, [r6, #24]
 8008cc0:	f023 0320 	bic.w	r3, r3, #32
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cca:	f023 0310 	bic.w	r3, r3, #16
 8008cce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008cd2:	69f2      	ldr	r2, [r6, #28]
 8008cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008cdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ce0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ce2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ce4:	f043 0310 	orr.w	r3, r3, #16
 8008ce8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008cec:	b9b5      	cbnz	r5, 8008d1c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008cf4:	4c11      	ldr	r4, [pc, #68]	; (8008d3c <RCCEx_PLL2_Config+0xec>)
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cfc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfe:	f7fd fba3 	bl	8006448 <HAL_GetTick>
 8008d02:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	d50f      	bpl.n	8008d2a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e005      	b.n	8008d1a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d0e:	f7fd fb9b 	bl	8006448 <HAL_GetTick>
 8008d12:	1bc0      	subs	r0, r0, r7
 8008d14:	2802      	cmp	r0, #2
 8008d16:	d9ab      	bls.n	8008c70 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008d18:	2003      	movs	r0, #3
}
 8008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d1c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d1e:	bf0c      	ite	eq
 8008d20:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d24:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008d28:	e7e3      	b.n	8008cf2 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d2a:	f7fd fb8d 	bl	8006448 <HAL_GetTick>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	2802      	cmp	r0, #2
 8008d32:	d9e7      	bls.n	8008d04 <RCCEx_PLL2_Config+0xb4>
 8008d34:	e7f0      	b.n	8008d18 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7ef      	b.n	8008d1a <RCCEx_PLL2_Config+0xca>
 8008d3a:	bf00      	nop
 8008d3c:	58024400 	.word	0x58024400

08008d40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d42:	4c3a      	ldr	r4, [pc, #232]	; (8008e2c <RCCEx_PLL3_Config+0xec>)
{
 8008d44:	4606      	mov	r6, r0
 8008d46:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d4a:	f003 0303 	and.w	r3, r3, #3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d069      	beq.n	8008e26 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5a:	f7fd fb75 	bl	8006448 <HAL_GetTick>
 8008d5e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	009a      	lsls	r2, r3, #2
 8008d64:	d44b      	bmi.n	8008dfe <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d68:	6832      	ldr	r2, [r6, #0]
 8008d6a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008d6e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008d72:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d74:	68b3      	ldr	r3, [r6, #8]
 8008d76:	68f2      	ldr	r2, [r6, #12]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	3a01      	subs	r2, #1
 8008d7c:	025b      	lsls	r3, r3, #9
 8008d7e:	0412      	lsls	r2, r2, #16
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d86:	4313      	orrs	r3, r2
 8008d88:	6872      	ldr	r2, [r6, #4]
 8008d8a:	3a01      	subs	r2, #1
 8008d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d90:	4313      	orrs	r3, r2
 8008d92:	6932      	ldr	r2, [r6, #16]
 8008d94:	3a01      	subs	r2, #1
 8008d96:	0612      	lsls	r2, r2, #24
 8008d98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008da2:	6972      	ldr	r2, [r6, #20]
 8008da4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008da8:	4313      	orrs	r3, r2
 8008daa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dae:	69b2      	ldr	r2, [r6, #24]
 8008db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008db4:	4313      	orrs	r3, r2
 8008db6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008db8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dbe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008dc2:	69f2      	ldr	r2, [r6, #28]
 8008dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008dcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008dd0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008ddc:	b9b5      	cbnz	r5, 8008e0c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008de2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008de4:	4c11      	ldr	r4, [pc, #68]	; (8008e2c <RCCEx_PLL3_Config+0xec>)
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dee:	f7fd fb2b 	bl	8006448 <HAL_GetTick>
 8008df2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	d50f      	bpl.n	8008e1a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	e005      	b.n	8008e0a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dfe:	f7fd fb23 	bl	8006448 <HAL_GetTick>
 8008e02:	1bc0      	subs	r0, r0, r7
 8008e04:	2802      	cmp	r0, #2
 8008e06:	d9ab      	bls.n	8008d60 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008e08:	2003      	movs	r0, #3
}
 8008e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e0c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e0e:	bf0c      	ite	eq
 8008e10:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e14:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008e18:	e7e3      	b.n	8008de2 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e1a:	f7fd fb15 	bl	8006448 <HAL_GetTick>
 8008e1e:	1b40      	subs	r0, r0, r5
 8008e20:	2802      	cmp	r0, #2
 8008e22:	d9e7      	bls.n	8008df4 <RCCEx_PLL3_Config+0xb4>
 8008e24:	e7f0      	b.n	8008e08 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008e26:	2001      	movs	r0, #1
 8008e28:	e7ef      	b.n	8008e0a <RCCEx_PLL3_Config+0xca>
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400

08008e30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e34:	6806      	ldr	r6, [r0, #0]
{
 8008e36:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e38:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008e3c:	d009      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e3e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e44:	d02c      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8008e46:	d811      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008e48:	b1e3      	cbz	r3, 8008e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4e:	d01f      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008e50:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e52:	682b      	ldr	r3, [r5, #0]
 8008e54:	05d8      	lsls	r0, r3, #23
 8008e56:	f140 80d7 	bpl.w	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e5a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	f200 80d2 	bhi.w	8009006 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8008e62:	e8df f003 	tbb	[pc, r3]
 8008e66:	2922      	.short	0x2922
 8008e68:	27ca      	.short	0x27ca
 8008e6a:	27          	.byte	0x27
 8008e6b:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e70:	d1ee      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e72:	4ab6      	ldr	r2, [pc, #728]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e74:	2600      	movs	r6, #0
 8008e76:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008e78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e7a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	6513      	str	r3, [r2, #80]	; 0x50
 8008e82:	e7e6      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e84:	4ab1      	ldr	r2, [pc, #708]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e8e:	e7f0      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e90:	2102      	movs	r1, #2
 8008e92:	3004      	adds	r0, #4
 8008e94:	f7ff fedc 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e98:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d1d9      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8008e9e:	e7e8      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	3024      	adds	r0, #36	; 0x24
 8008ea4:	f7ff ff4c 	bl	8008d40 <RCCEx_PLL3_Config>
 8008ea8:	e7f6      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eaa:	4aa8      	ldr	r2, [pc, #672]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008eac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008eb4:	4634      	mov	r4, r6
 8008eb6:	e004      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eb8:	2100      	movs	r1, #0
 8008eba:	1d28      	adds	r0, r5, #4
 8008ebc:	f7ff fec8 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ec0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	f040 80a2 	bne.w	800900c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ec8:	4aa0      	ldr	r2, [pc, #640]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008eca:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008ecc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ece:	f023 0307 	bic.w	r3, r3, #7
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	0559      	lsls	r1, r3, #21
 8008eda:	d510      	bpl.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008edc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8008ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee4:	f000 80b3 	beq.w	800904e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008ee8:	f200 8092 	bhi.w	8009010 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80a2 	beq.w	8009036 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ef6:	f000 80a4 	beq.w	8009042 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008efa:	2601      	movs	r6, #1
 8008efc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	051a      	lsls	r2, r3, #20
 8008f02:	d510      	bpl.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f04:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8008f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0c:	f000 80c6 	beq.w	800909c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008f10:	f200 80a5 	bhi.w	800905e <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80b5 	beq.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f1e:	f000 80b7 	beq.w	8009090 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008f22:	2601      	movs	r6, #1
 8008f24:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	019b      	lsls	r3, r3, #6
 8008f2a:	d50d      	bpl.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8008f2c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	f000 80ce 	beq.w	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8008f34:	f200 80ba 	bhi.w	80090ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80ba 	beq.w	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	f000 80c0 	beq.w	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8008f44:	2601      	movs	r6, #1
 8008f46:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	04df      	lsls	r7, r3, #19
 8008f4c:	d50f      	bpl.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f4e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f54:	f000 80e0 	beq.w	8009118 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8008f58:	f200 80c2 	bhi.w	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80cf 	beq.w	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f66:	f000 80d1 	beq.w	800910c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008f6a:	2601      	movs	r6, #1
 8008f6c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	0498      	lsls	r0, r3, #18
 8008f72:	d50f      	bpl.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f74:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f7a:	f000 80ef 	beq.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8008f7e:	f200 80d3 	bhi.w	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80d9 	beq.w	800913a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f8c:	f000 80e0 	beq.w	8009150 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8008f90:	2601      	movs	r6, #1
 8008f92:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	0459      	lsls	r1, r3, #17
 8008f98:	d510      	bpl.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f9a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa2:	f000 80fc 	beq.w	800919e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008fa6:	f200 80e1 	bhi.w	800916c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 80e7 	beq.w	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb4:	f000 80ed 	beq.w	8009192 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008fb8:	2601      	movs	r6, #1
 8008fba:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	041a      	lsls	r2, r3, #16
 8008fc0:	d50d      	bpl.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8008fc2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc8:	f000 80f1 	beq.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd0:	f000 80fb 	beq.w	80091ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80ef 	beq.w	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008fda:	2601      	movs	r6, #1
 8008fdc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	01db      	lsls	r3, r3, #7
 8008fe2:	f140 8108 	bpl.w	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8008fe6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	f200 8148 	bhi.w	800927e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008fee:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ff2:	00f9      	.short	0x00f9
 8008ff4:	014000f4 	.word	0x014000f4
 8008ff8:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009000:	f7ff fe9e 	bl	8008d40 <RCCEx_PLL3_Config>
 8009004:	e75c      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009006:	2601      	movs	r6, #1
 8009008:	4634      	mov	r4, r6
 800900a:	e764      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800900c:	4626      	mov	r6, r4
 800900e:	e762      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009010:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009014:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009018:	d003      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800901a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800901e:	f47f af6c 	bne.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8009022:	b9d4      	cbnz	r4, 800905a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009024:	4a49      	ldr	r2, [pc, #292]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009026:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800902a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800902c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009030:	430b      	orrs	r3, r1
 8009032:	6593      	str	r3, [r2, #88]	; 0x58
 8009034:	e763      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009036:	4a45      	ldr	r2, [pc, #276]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009038:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800903a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009040:	e7ef      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009042:	2100      	movs	r1, #0
 8009044:	1d28      	adds	r0, r5, #4
 8009046:	f7ff fe03 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800904a:	4604      	mov	r4, r0
      break;
 800904c:	e7e9      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800904e:	2100      	movs	r1, #0
 8009050:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009054:	f7ff fe74 	bl	8008d40 <RCCEx_PLL3_Config>
 8009058:	e7f7      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800905a:	4626      	mov	r6, r4
 800905c:	e74f      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 800905e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009062:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009066:	d003      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800906c:	f47f af59 	bne.w	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8009070:	b9d4      	cbnz	r4, 80090a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009072:	4a36      	ldr	r2, [pc, #216]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009074:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8009078:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800907a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800907e:	430b      	orrs	r3, r1
 8009080:	6593      	str	r3, [r2, #88]	; 0x58
 8009082:	e750      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009084:	4a31      	ldr	r2, [pc, #196]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009086:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800908c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800908e:	e7ef      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009090:	2100      	movs	r1, #0
 8009092:	1d28      	adds	r0, r5, #4
 8009094:	f7ff fddc 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009098:	4604      	mov	r4, r0
      break;
 800909a:	e7e9      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800909c:	2100      	movs	r1, #0
 800909e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090a2:	f7ff fe4d 	bl	8008d40 <RCCEx_PLL3_Config>
 80090a6:	e7f7      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80090a8:	4626      	mov	r6, r4
 80090aa:	e73c      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 80090ac:	2b30      	cmp	r3, #48	; 0x30
 80090ae:	f47f af49 	bne.w	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 80090b2:	b99c      	cbnz	r4, 80090dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80090b4:	4a25      	ldr	r2, [pc, #148]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090b6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80090b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80090ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80090be:	430b      	orrs	r3, r1
 80090c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090c2:	e741      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c4:	4a21      	ldr	r2, [pc, #132]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090cc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80090ce:	e7f0      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090d0:	2102      	movs	r1, #2
 80090d2:	1d28      	adds	r0, r5, #4
 80090d4:	f7ff fdbc 	bl	8008c50 <RCCEx_PLL2_Config>
 80090d8:	4604      	mov	r4, r0
      break;
 80090da:	e7ea      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 80090dc:	4626      	mov	r6, r4
 80090de:	e733      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 80090e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090e4:	d003      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80090e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ea:	f47f af3e 	bne.w	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 80090ee:	b9cc      	cbnz	r4, 8009124 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f0:	4a16      	ldr	r2, [pc, #88]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80090f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fa:	430b      	orrs	r3, r1
 80090fc:	6513      	str	r3, [r2, #80]	; 0x50
 80090fe:	e736      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009100:	4a12      	ldr	r2, [pc, #72]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009102:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009108:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800910a:	e7f0      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800910c:	2100      	movs	r1, #0
 800910e:	1d28      	adds	r0, r5, #4
 8009110:	f7ff fd9e 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009114:	4604      	mov	r4, r0
      break;
 8009116:	e7ea      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009118:	2100      	movs	r1, #0
 800911a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800911e:	f7ff fe0f 	bl	8008d40 <RCCEx_PLL3_Config>
 8009122:	e7f7      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8009124:	4626      	mov	r6, r4
 8009126:	e722      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800912c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009130:	d003      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8009132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009136:	f47f af2b 	bne.w	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 800913a:	b9ac      	cbnz	r4, 8009168 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800913c:	4a03      	ldr	r2, [pc, #12]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800913e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8009140:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009142:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009146:	430b      	orrs	r3, r1
 8009148:	6513      	str	r3, [r2, #80]	; 0x50
 800914a:	e723      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800914c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009150:	2101      	movs	r1, #1
 8009152:	1d28      	adds	r0, r5, #4
 8009154:	f7ff fd7c 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009158:	4604      	mov	r4, r0
      break;
 800915a:	e7ee      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800915c:	2101      	movs	r1, #1
 800915e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009162:	f7ff fded 	bl	8008d40 <RCCEx_PLL3_Config>
 8009166:	e7f7      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8009168:	4626      	mov	r6, r4
 800916a:	e713      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 800916c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009170:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009174:	d003      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800917a:	f47f af1d 	bne.w	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 800917e:	b9a4      	cbnz	r4, 80091aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009180:	4a7f      	ldr	r2, [pc, #508]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009182:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009186:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009188:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800918c:	430b      	orrs	r3, r1
 800918e:	6593      	str	r3, [r2, #88]	; 0x58
 8009190:	e714      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009192:	2101      	movs	r1, #1
 8009194:	1d28      	adds	r0, r5, #4
 8009196:	f7ff fd5b 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800919a:	4604      	mov	r4, r0
      break;
 800919c:	e7ef      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800919e:	2101      	movs	r1, #1
 80091a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80091a4:	f7ff fdcc 	bl	8008d40 <RCCEx_PLL3_Config>
 80091a8:	e7f7      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80091aa:	4626      	mov	r6, r4
 80091ac:	e706      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ae:	4a74      	ldr	r2, [pc, #464]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80091b8:	b96c      	cbnz	r4, 80091d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091ba:	4a71      	ldr	r2, [pc, #452]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091bc:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80091be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80091c4:	430b      	orrs	r3, r1
 80091c6:	6513      	str	r3, [r2, #80]	; 0x50
 80091c8:	e709      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091ca:	2101      	movs	r1, #1
 80091cc:	1d28      	adds	r0, r5, #4
 80091ce:	f7ff fd3f 	bl	8008c50 <RCCEx_PLL2_Config>
 80091d2:	4604      	mov	r4, r0
      break;
 80091d4:	e7f0      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80091d6:	4626      	mov	r6, r4
 80091d8:	e701      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091da:	4a69      	ldr	r2, [pc, #420]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	d14d      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091e8:	4a65      	ldr	r2, [pc, #404]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091ea:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80091ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	430b      	orrs	r3, r1
 80091f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	025f      	lsls	r7, r3, #9
 80091fa:	d54d      	bpl.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091fc:	4f61      	ldr	r7, [pc, #388]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009204:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009206:	f7fd f91f 	bl	8006448 <HAL_GetTick>
 800920a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	05d8      	lsls	r0, r3, #23
 8009210:	d53a      	bpl.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 8009212:	2c00      	cmp	r4, #0
 8009214:	d16c      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009216:	4b5a      	ldr	r3, [pc, #360]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009218:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 800921c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800921e:	4042      	eors	r2, r0
 8009220:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009224:	d00b      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009228:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800922a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800922e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009232:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009234:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009236:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800923a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800923c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800923e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009242:	d040      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009244:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8009248:	494d      	ldr	r1, [pc, #308]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800924a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800924e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009252:	d149      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8009254:	6908      	ldr	r0, [r1, #16]
 8009256:	4a4c      	ldr	r2, [pc, #304]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8009258:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800925c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009260:	4302      	orrs	r2, r0
 8009262:	610a      	str	r2, [r1, #16]
 8009264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009268:	4a45      	ldr	r2, [pc, #276]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800926a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800926c:	430b      	orrs	r3, r1
 800926e:	6713      	str	r3, [r2, #112]	; 0x70
 8009270:	e012      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009272:	2102      	movs	r1, #2
 8009274:	1d28      	adds	r0, r5, #4
 8009276:	f7ff fceb 	bl	8008c50 <RCCEx_PLL2_Config>
 800927a:	4604      	mov	r4, r0
      break;
 800927c:	e7b2      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800927e:	2601      	movs	r6, #1
 8009280:	4634      	mov	r4, r6
 8009282:	e7b8      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8009284:	4626      	mov	r6, r4
 8009286:	e7b6      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009288:	f7fd f8de 	bl	8006448 <HAL_GetTick>
 800928c:	eba0 0008 	sub.w	r0, r0, r8
 8009290:	2864      	cmp	r0, #100	; 0x64
 8009292:	d9bb      	bls.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8009294:	2603      	movs	r6, #3
 8009296:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	07da      	lsls	r2, r3, #31
 800929c:	d508      	bpl.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 800929e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80092a0:	2b10      	cmp	r3, #16
 80092a2:	d03c      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80092a4:	d826      	bhi.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80092a6:	b35b      	cbz	r3, 8009300 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d032      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80092ac:	2601      	movs	r6, #1
 80092ae:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	079b      	lsls	r3, r3, #30
 80092b4:	d548      	bpl.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80092b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d85b      	bhi.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80092bc:	e8df f003 	tbb	[pc, r3]
 80092c0:	3c54373c 	.word	0x3c54373c
 80092c4:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 80092c6:	f7fd f8bf 	bl	8006448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ca:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 80092ce:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80092d8:	0799      	lsls	r1, r3, #30
 80092da:	d4b3      	bmi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092dc:	f7fd f8b4 	bl	8006448 <HAL_GetTick>
 80092e0:	1bc0      	subs	r0, r0, r7
 80092e2:	4548      	cmp	r0, r9
 80092e4:	d9f6      	bls.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80092e6:	e7d5      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092e8:	690a      	ldr	r2, [r1, #16]
 80092ea:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80092ee:	e7b8      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80092f0:	4626      	mov	r6, r4
 80092f2:	e7d1      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 80092f4:	f023 0208 	bic.w	r2, r3, #8
 80092f8:	2a20      	cmp	r2, #32
 80092fa:	d001      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80092fc:	2b18      	cmp	r3, #24
 80092fe:	d1d5      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 8009300:	b99c      	cbnz	r4, 800932a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009302:	4a1f      	ldr	r2, [pc, #124]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009304:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8009306:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009308:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800930c:	430b      	orrs	r3, r1
 800930e:	6553      	str	r3, [r2, #84]	; 0x54
 8009310:	e7ce      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009312:	2101      	movs	r1, #1
 8009314:	1d28      	adds	r0, r5, #4
 8009316:	f7ff fc9b 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800931a:	4604      	mov	r4, r0
      break;
 800931c:	e7f0      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800931e:	2101      	movs	r1, #1
 8009320:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009324:	f7ff fd0c 	bl	8008d40 <RCCEx_PLL3_Config>
 8009328:	e7f7      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800932a:	4626      	mov	r6, r4
 800932c:	e7c0      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800932e:	2101      	movs	r1, #1
 8009330:	1d28      	adds	r0, r5, #4
 8009332:	f7ff fc8d 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009336:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009338:	b9fc      	cbnz	r4, 800937a <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800933a:	4a11      	ldr	r2, [pc, #68]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800933c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800933e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	430b      	orrs	r3, r1
 8009346:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	075f      	lsls	r7, r3, #29
 800934c:	d52e      	bpl.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800934e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8009352:	2b05      	cmp	r3, #5
 8009354:	f200 8134 	bhi.w	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8009358:	e8df f013 	tbh	[pc, r3, lsl #1]
 800935c:	0018001d 	.word	0x0018001d
 8009360:	001d012c 	.word	0x001d012c
 8009364:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009368:	2101      	movs	r1, #1
 800936a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800936e:	f7ff fce7 	bl	8008d40 <RCCEx_PLL3_Config>
 8009372:	e7e0      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009374:	2601      	movs	r6, #1
 8009376:	4634      	mov	r4, r6
 8009378:	e7e6      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800937a:	4626      	mov	r6, r4
 800937c:	e7e4      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800937e:	bf00      	nop
 8009380:	58024400 	.word	0x58024400
 8009384:	58024800 	.word	0x58024800
 8009388:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800938c:	2101      	movs	r1, #1
 800938e:	1d28      	adds	r0, r5, #4
 8009390:	f7ff fc5e 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009394:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009396:	2c00      	cmp	r4, #0
 8009398:	f040 8115 	bne.w	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800939c:	4ab8      	ldr	r2, [pc, #736]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800939e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80093a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	430b      	orrs	r3, r1
 80093aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	0698      	lsls	r0, r3, #26
 80093b0:	d510      	bpl.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093b2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80093b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ba:	f000 811f 	beq.w	80095fc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80093be:	f200 8104 	bhi.w	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 810a 	beq.w	80095dc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80093c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093cc:	f000 8110 	beq.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80093d0:	2601      	movs	r6, #1
 80093d2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	0659      	lsls	r1, r3, #25
 80093d8:	d510      	bpl.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80093da:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80093de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093e2:	f000 812c 	beq.w	800963e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80093e6:	f200 8111 	bhi.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8117 	beq.w	800961e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80093f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f4:	f000 811d 	beq.w	8009632 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80093f8:	2601      	movs	r6, #1
 80093fa:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	061a      	lsls	r2, r3, #24
 8009400:	d510      	bpl.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009402:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800940a:	f000 813b 	beq.w	8009684 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800940e:	f200 811e 	bhi.w	800964e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 8124 	beq.w	8009660 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8009418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941c:	f000 812a 	beq.w	8009674 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8009420:	2601      	movs	r6, #1
 8009422:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	071b      	lsls	r3, r3, #28
 8009428:	d512      	bpl.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800942a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009430:	d107      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009432:	2102      	movs	r1, #2
 8009434:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009438:	f7ff fc82 	bl	8008d40 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800943c:	2800      	cmp	r0, #0
 800943e:	bf18      	it	ne
 8009440:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009442:	4a8f      	ldr	r2, [pc, #572]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009444:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8009446:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800944c:	430b      	orrs	r3, r1
 800944e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	06df      	lsls	r7, r3, #27
 8009454:	d514      	bpl.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009456:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800945a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945e:	d107      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009460:	2102      	movs	r1, #2
 8009462:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009466:	f7ff fc6b 	bl	8008d40 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800946a:	2800      	cmp	r0, #0
 800946c:	bf18      	it	ne
 800946e:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009470:	4a83      	ldr	r2, [pc, #524]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009472:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8009476:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947c:	430b      	orrs	r3, r1
 800947e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	0318      	lsls	r0, r3, #12
 8009484:	d51a      	bpl.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 8009486:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800948a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800948e:	f000 8101 	beq.w	8009694 <HAL_RCCEx_PeriphCLKConfig+0x864>
 8009492:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009496:	d006      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009498:	2900      	cmp	r1, #0
 800949a:	f040 8101 	bne.w	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800949e:	1d28      	adds	r0, r5, #4
 80094a0:	f7ff fbd6 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094a4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	f040 80fd 	bne.w	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094ac:	4a74      	ldr	r2, [pc, #464]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094ae:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80094b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80094b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	0359      	lsls	r1, r3, #13
 80094c0:	d51c      	bpl.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 80094c2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80094c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094ca:	f000 80ee 	beq.w	80096aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80094ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094d2:	d008      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80094d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094d8:	f040 80ee 	bne.w	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094dc:	4a68      	ldr	r2, [pc, #416]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80094e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	f040 80e9 	bne.w	80096be <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094ec:	4a64      	ldr	r2, [pc, #400]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094ee:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80094f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80094f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	03da      	lsls	r2, r3, #15
 8009500:	d509      	bpl.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009502:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 80dc 	beq.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x892>
 800950a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800950e:	f000 80e6 	beq.w	80096de <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8009512:	2601      	movs	r6, #1
 8009514:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	d507      	bpl.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800951c:	2102      	movs	r1, #2
 800951e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009522:	f7ff fc0d 	bl	8008d40 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009526:	2800      	cmp	r0, #0
 8009528:	bf18      	it	ne
 800952a:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	039f      	lsls	r7, r3, #14
 8009530:	d50a      	bpl.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 8009532:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8009534:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009538:	f000 80e7 	beq.w	800970a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800953c:	f200 80d7 	bhi.w	80096ee <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8009540:	2900      	cmp	r1, #0
 8009542:	f000 80da 	beq.w	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009546:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009548:	02d8      	lsls	r0, r3, #11
 800954a:	d506      	bpl.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800954c:	494c      	ldr	r1, [pc, #304]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800954e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8009550:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009552:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009556:	4302      	orrs	r2, r0
 8009558:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800955a:	0299      	lsls	r1, r3, #10
 800955c:	d506      	bpl.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800955e:	4948      	ldr	r1, [pc, #288]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009560:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8009562:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009564:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009568:	4302      	orrs	r2, r0
 800956a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800956c:	005a      	lsls	r2, r3, #1
 800956e:	d509      	bpl.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009570:	4a43      	ldr	r2, [pc, #268]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009572:	6911      	ldr	r1, [r2, #16]
 8009574:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009578:	6111      	str	r1, [r2, #16]
 800957a:	6911      	ldr	r1, [r2, #16]
 800957c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8009580:	4301      	orrs	r1, r0
 8009582:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009584:	2b00      	cmp	r3, #0
 8009586:	da06      	bge.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009588:	493d      	ldr	r1, [pc, #244]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800958a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800958c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800958e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009592:	4302      	orrs	r2, r0
 8009594:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009596:	021b      	lsls	r3, r3, #8
 8009598:	d507      	bpl.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800959a:	4a39      	ldr	r2, [pc, #228]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800959c:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80095a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80095a6:	430b      	orrs	r3, r1
 80095a8:	6553      	str	r3, [r2, #84]	; 0x54
}
 80095aa:	1e30      	subs	r0, r6, #0
 80095ac:	bf18      	it	ne
 80095ae:	2001      	movne	r0, #1
 80095b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095b4:	2101      	movs	r1, #1
 80095b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095ba:	f7ff fbc1 	bl	8008d40 <RCCEx_PLL3_Config>
 80095be:	e6e9      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095c0:	2601      	movs	r6, #1
 80095c2:	4634      	mov	r4, r6
 80095c4:	e6f2      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80095c6:	4626      	mov	r6, r4
 80095c8:	e6f0      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095ce:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80095d2:	d003      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80095d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095d8:	f47f aefa 	bne.w	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80095dc:	b9a4      	cbnz	r4, 8009608 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095de:	4a28      	ldr	r2, [pc, #160]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80095e0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80095e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80095ea:	430b      	orrs	r3, r1
 80095ec:	6553      	str	r3, [r2, #84]	; 0x54
 80095ee:	e6f1      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f0:	2100      	movs	r1, #0
 80095f2:	1d28      	adds	r0, r5, #4
 80095f4:	f7ff fb2c 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095f8:	4604      	mov	r4, r0
      break;
 80095fa:	e7ef      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095fc:	2102      	movs	r1, #2
 80095fe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009602:	f7ff fb9d 	bl	8008d40 <RCCEx_PLL3_Config>
 8009606:	e7f7      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8009608:	4626      	mov	r6, r4
 800960a:	e6e3      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800960c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009610:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009614:	d003      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8009616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800961a:	f47f aeed 	bne.w	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 800961e:	b9a4      	cbnz	r4, 800964a <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009620:	4a17      	ldr	r2, [pc, #92]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009622:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8009626:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009628:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800962c:	430b      	orrs	r3, r1
 800962e:	6593      	str	r3, [r2, #88]	; 0x58
 8009630:	e6e4      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009632:	2100      	movs	r1, #0
 8009634:	1d28      	adds	r0, r5, #4
 8009636:	f7ff fb0b 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800963a:	4604      	mov	r4, r0
      break;
 800963c:	e7ef      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800963e:	2102      	movs	r1, #2
 8009640:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009644:	f7ff fb7c 	bl	8008d40 <RCCEx_PLL3_Config>
 8009648:	e7f7      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800964a:	4626      	mov	r6, r4
 800964c:	e6d6      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800964e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009652:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009656:	d003      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8009658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800965c:	f47f aee0 	bne.w	8009420 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 8009660:	b9b4      	cbnz	r4, 8009690 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009662:	4a07      	ldr	r2, [pc, #28]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009664:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8009668:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800966a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800966e:	430b      	orrs	r3, r1
 8009670:	6593      	str	r3, [r2, #88]	; 0x58
 8009672:	e6d7      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009674:	2100      	movs	r1, #0
 8009676:	1d28      	adds	r0, r5, #4
 8009678:	f7ff faea 	bl	8008c50 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800967c:	4604      	mov	r4, r0
      break;
 800967e:	e7ef      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8009680:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009684:	2102      	movs	r1, #2
 8009686:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800968a:	f7ff fb59 	bl	8008d40 <RCCEx_PLL3_Config>
 800968e:	e7f5      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009690:	4626      	mov	r6, r4
 8009692:	e6c7      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009694:	2102      	movs	r1, #2
 8009696:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800969a:	f7ff fb51 	bl	8008d40 <RCCEx_PLL3_Config>
 800969e:	e701      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 80096a0:	2601      	movs	r6, #1
 80096a2:	4634      	mov	r4, r6
 80096a4:	e70a      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80096a6:	4626      	mov	r6, r4
 80096a8:	e708      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096aa:	2101      	movs	r1, #1
 80096ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80096b0:	f7ff fb46 	bl	8008d40 <RCCEx_PLL3_Config>
 80096b4:	4604      	mov	r4, r0
      break;
 80096b6:	e716      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 80096b8:	2601      	movs	r6, #1
 80096ba:	4634      	mov	r4, r6
 80096bc:	e71e      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80096be:	4626      	mov	r6, r4
 80096c0:	e71c      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c2:	4a16      	ldr	r2, [pc, #88]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80096c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80096cc:	b96c      	cbnz	r4, 80096ea <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096ce:	4a13      	ldr	r2, [pc, #76]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80096d0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80096d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80096d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096d8:	430b      	orrs	r3, r1
 80096da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096dc:	e71b      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096de:	2102      	movs	r1, #2
 80096e0:	1d28      	adds	r0, r5, #4
 80096e2:	f7ff fab5 	bl	8008c50 <RCCEx_PLL2_Config>
 80096e6:	4604      	mov	r4, r0
      break;
 80096e8:	e7f0      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80096ea:	4626      	mov	r6, r4
 80096ec:	e713      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 80096ee:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80096f2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80096f6:	f47f af26 	bne.w	8009546 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 80096fa:	b964      	cbnz	r4, 8009716 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096fc:	4807      	ldr	r0, [pc, #28]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80096fe:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009700:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009704:	430a      	orrs	r2, r1
 8009706:	6542      	str	r2, [r0, #84]	; 0x54
 8009708:	e71e      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800970a:	4804      	ldr	r0, [pc, #16]	; (800971c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800970c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800970e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009712:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009714:	e7f1      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009716:	4626      	mov	r6, r4
 8009718:	e716      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x718>
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400

08009720 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009720:	6a03      	ldr	r3, [r0, #32]
 8009722:	f023 0301 	bic.w	r3, r3, #1
{
 8009726:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009728:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800972e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009730:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8009734:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009736:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800973a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800973e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009740:	688d      	ldr	r5, [r1, #8]
 8009742:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009744:	4d1b      	ldr	r5, [pc, #108]	; (80097b4 <TIM_OC1_SetConfig+0x94>)
 8009746:	42a8      	cmp	r0, r5
 8009748:	d00f      	beq.n	800976a <TIM_OC1_SetConfig+0x4a>
 800974a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800974e:	42a8      	cmp	r0, r5
 8009750:	d00b      	beq.n	800976a <TIM_OC1_SetConfig+0x4a>
 8009752:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8009756:	42a8      	cmp	r0, r5
 8009758:	d007      	beq.n	800976a <TIM_OC1_SetConfig+0x4a>
 800975a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800975e:	42a8      	cmp	r0, r5
 8009760:	d003      	beq.n	800976a <TIM_OC1_SetConfig+0x4a>
 8009762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009766:	42a8      	cmp	r0, r5
 8009768:	d11e      	bne.n	80097a8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800976a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800976c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009770:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009772:	4d10      	ldr	r5, [pc, #64]	; (80097b4 <TIM_OC1_SetConfig+0x94>)
 8009774:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009776:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977a:	d00f      	beq.n	800979c <TIM_OC1_SetConfig+0x7c>
 800977c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009780:	42a8      	cmp	r0, r5
 8009782:	d00b      	beq.n	800979c <TIM_OC1_SetConfig+0x7c>
 8009784:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8009788:	42a8      	cmp	r0, r5
 800978a:	d007      	beq.n	800979c <TIM_OC1_SetConfig+0x7c>
 800978c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009790:	42a8      	cmp	r0, r5
 8009792:	d003      	beq.n	800979c <TIM_OC1_SetConfig+0x7c>
 8009794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009798:	42a8      	cmp	r0, r5
 800979a:	d105      	bne.n	80097a8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800979c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097a0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80097a4:	4334      	orrs	r4, r6
 80097a6:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097aa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097ac:	684a      	ldr	r2, [r1, #4]
 80097ae:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b0:	6203      	str	r3, [r0, #32]
}
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	40010000 	.word	0x40010000

080097b8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097b8:	6a03      	ldr	r3, [r0, #32]
 80097ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80097be:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097c6:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80097cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80097d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80097d6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097d8:	688d      	ldr	r5, [r1, #8]
 80097da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097de:	4d16      	ldr	r5, [pc, #88]	; (8009838 <TIM_OC3_SetConfig+0x80>)
 80097e0:	42a8      	cmp	r0, r5
 80097e2:	d003      	beq.n	80097ec <TIM_OC3_SetConfig+0x34>
 80097e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097e8:	42a8      	cmp	r0, r5
 80097ea:	d10d      	bne.n	8009808 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80097ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f6:	4d10      	ldr	r5, [pc, #64]	; (8009838 <TIM_OC3_SetConfig+0x80>)
 80097f8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80097fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fe:	d00e      	beq.n	800981e <TIM_OC3_SetConfig+0x66>
 8009800:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009804:	42a8      	cmp	r0, r5
 8009806:	d00a      	beq.n	800981e <TIM_OC3_SetConfig+0x66>
 8009808:	4d0c      	ldr	r5, [pc, #48]	; (800983c <TIM_OC3_SetConfig+0x84>)
 800980a:	42a8      	cmp	r0, r5
 800980c:	d007      	beq.n	800981e <TIM_OC3_SetConfig+0x66>
 800980e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009812:	42a8      	cmp	r0, r5
 8009814:	d003      	beq.n	800981e <TIM_OC3_SetConfig+0x66>
 8009816:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800981a:	42a8      	cmp	r0, r5
 800981c:	d106      	bne.n	800982c <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800981e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009822:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009826:	4334      	orrs	r4, r6
 8009828:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800982c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800982e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009830:	684a      	ldr	r2, [r1, #4]
 8009832:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009834:	6203      	str	r3, [r0, #32]
}
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	40010000 	.word	0x40010000
 800983c:	40014000 	.word	0x40014000

08009840 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009840:	6a03      	ldr	r3, [r0, #32]
 8009842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8009846:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009848:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800984c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800984e:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009854:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009856:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800985a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800985e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009862:	688d      	ldr	r5, [r1, #8]
 8009864:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009868:	4d0e      	ldr	r5, [pc, #56]	; (80098a4 <TIM_OC4_SetConfig+0x64>)
 800986a:	42a8      	cmp	r0, r5
 800986c:	d00f      	beq.n	800988e <TIM_OC4_SetConfig+0x4e>
 800986e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009872:	42a8      	cmp	r0, r5
 8009874:	d00b      	beq.n	800988e <TIM_OC4_SetConfig+0x4e>
 8009876:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800987a:	42a8      	cmp	r0, r5
 800987c:	d007      	beq.n	800988e <TIM_OC4_SetConfig+0x4e>
 800987e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009882:	42a8      	cmp	r0, r5
 8009884:	d003      	beq.n	800988e <TIM_OC4_SetConfig+0x4e>
 8009886:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800988a:	42a8      	cmp	r0, r5
 800988c:	d104      	bne.n	8009898 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800988e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009892:	694d      	ldr	r5, [r1, #20]
 8009894:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009898:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800989a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800989c:	684a      	ldr	r2, [r1, #4]
 800989e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a0:	6203      	str	r3, [r0, #32]
}
 80098a2:	bd30      	pop	{r4, r5, pc}
 80098a4:	40010000 	.word	0x40010000

080098a8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098a8:	6a03      	ldr	r3, [r0, #32]
 80098aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80098ae:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80098bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80098c6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098c8:	688d      	ldr	r5, [r1, #8]
 80098ca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ce:	4d0f      	ldr	r5, [pc, #60]	; (800990c <TIM_OC5_SetConfig+0x64>)
 80098d0:	42a8      	cmp	r0, r5
 80098d2:	d00f      	beq.n	80098f4 <TIM_OC5_SetConfig+0x4c>
 80098d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098d8:	42a8      	cmp	r0, r5
 80098da:	d00b      	beq.n	80098f4 <TIM_OC5_SetConfig+0x4c>
 80098dc:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80098e0:	42a8      	cmp	r0, r5
 80098e2:	d007      	beq.n	80098f4 <TIM_OC5_SetConfig+0x4c>
 80098e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098e8:	42a8      	cmp	r0, r5
 80098ea:	d003      	beq.n	80098f4 <TIM_OC5_SetConfig+0x4c>
 80098ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098f0:	42a8      	cmp	r0, r5
 80098f2:	d104      	bne.n	80098fe <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098f4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098f8:	694d      	ldr	r5, [r1, #20]
 80098fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009900:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009902:	684a      	ldr	r2, [r1, #4]
 8009904:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009906:	6203      	str	r3, [r0, #32]
}
 8009908:	bd30      	pop	{r4, r5, pc}
 800990a:	bf00      	nop
 800990c:	40010000 	.word	0x40010000

08009910 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009910:	6a03      	ldr	r3, [r0, #32]
 8009912:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8009916:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009918:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800991c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800991e:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009924:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009926:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800992a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800992e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009932:	688d      	ldr	r5, [r1, #8]
 8009934:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009938:	4d0e      	ldr	r5, [pc, #56]	; (8009974 <TIM_OC6_SetConfig+0x64>)
 800993a:	42a8      	cmp	r0, r5
 800993c:	d00f      	beq.n	800995e <TIM_OC6_SetConfig+0x4e>
 800993e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009942:	42a8      	cmp	r0, r5
 8009944:	d00b      	beq.n	800995e <TIM_OC6_SetConfig+0x4e>
 8009946:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800994a:	42a8      	cmp	r0, r5
 800994c:	d007      	beq.n	800995e <TIM_OC6_SetConfig+0x4e>
 800994e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009952:	42a8      	cmp	r0, r5
 8009954:	d003      	beq.n	800995e <TIM_OC6_SetConfig+0x4e>
 8009956:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800995a:	42a8      	cmp	r0, r5
 800995c:	d104      	bne.n	8009968 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800995e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009962:	694d      	ldr	r5, [r1, #20]
 8009964:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009968:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800996a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800996c:	684a      	ldr	r2, [r1, #4]
 800996e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009970:	6203      	str	r3, [r0, #32]
}
 8009972:	bd30      	pop	{r4, r5, pc}
 8009974:	40010000 	.word	0x40010000

08009978 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009978:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800997c:	2b01      	cmp	r3, #1
 800997e:	d13b      	bne.n	80099f8 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	2302      	movs	r3, #2
 8009982:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009986:	6803      	ldr	r3, [r0, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	f042 0201 	orr.w	r2, r2, #1
 800998e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009990:	4a1a      	ldr	r2, [pc, #104]	; (80099fc <HAL_TIM_Base_Start_IT+0x84>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d022      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 8009996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800999a:	d01f      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 800999c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01b      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d017      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d013      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099b4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00f      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099bc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00b      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099c4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d007      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099cc:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d003      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x64>
 80099d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099d8:	4293      	cmp	r3, r2
 80099da:	d107      	bne.n	80099ec <HAL_TIM_Base_Start_IT+0x74>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099dc:	6899      	ldr	r1, [r3, #8]
 80099de:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <HAL_TIM_Base_Start_IT+0x88>)
 80099e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e2:	2a06      	cmp	r2, #6
 80099e4:	d006      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x7c>
 80099e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80099ea:	d003      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x7c>
    __HAL_TIM_ENABLE(htim);
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80099f4:	2000      	movs	r0, #0
}
 80099f6:	4770      	bx	lr
    return HAL_ERROR;
 80099f8:	2001      	movs	r0, #1
 80099fa:	4770      	bx	lr
 80099fc:	40010000 	.word	0x40010000
 8009a00:	00010007 	.word	0x00010007

08009a04 <HAL_TIM_Encoder_Start_IT>:
{
 8009a04:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a06:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a0a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009a0e:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a12:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009a14:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a18:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009a1a:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009a1c:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8009a1e:	b9e9      	cbnz	r1, 8009a5c <HAL_TIM_Encoder_Start_IT+0x58>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a20:	2a01      	cmp	r2, #1
 8009a22:	d15a      	bne.n	8009ada <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a24:	2d01      	cmp	r5, #1
 8009a26:	d15a      	bne.n	8009ade <HAL_TIM_Encoder_Start_IT+0xda>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a28:	2302      	movs	r3, #2
 8009a2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a2e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a32:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a34:	6a1a      	ldr	r2, [r3, #32]
 8009a36:	f022 0201 	bic.w	r2, r2, #1
 8009a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a3c:	6a1a      	ldr	r2, [r3, #32]
 8009a3e:	f042 0201 	orr.w	r2, r2, #1
 8009a42:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a4a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8009a4c:	6802      	ldr	r2, [r0, #0]
 8009a4e:	6813      	ldr	r3, [r2, #0]
 8009a50:	f043 0301 	orr.w	r3, r3, #1
 8009a54:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8009a5c:	2904      	cmp	r1, #4
 8009a5e:	d115      	bne.n	8009a8c <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d13a      	bne.n	8009ada <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a64:	2c01      	cmp	r4, #1
 8009a66:	d1f7      	bne.n	8009a58 <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a68:	2302      	movs	r3, #2
 8009a6a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a6e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a72:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8009a74:	6a1a      	ldr	r2, [r3, #32]
 8009a76:	f022 0210 	bic.w	r2, r2, #16
 8009a7a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a7c:	6a1a      	ldr	r2, [r3, #32]
 8009a7e:	f042 0210 	orr.w	r2, r2, #16
 8009a82:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	f042 0204 	orr.w	r2, r2, #4
 8009a8a:	e7de      	b.n	8009a4a <HAL_TIM_Encoder_Start_IT+0x46>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a8c:	2a01      	cmp	r2, #1
 8009a8e:	d124      	bne.n	8009ada <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d124      	bne.n	8009ade <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a94:	2d01      	cmp	r5, #1
 8009a96:	d1df      	bne.n	8009a58 <HAL_TIM_Encoder_Start_IT+0x54>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a98:	2c01      	cmp	r4, #1
 8009a9a:	d1dd      	bne.n	8009a58 <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aa2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aa6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aaa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  switch (Channel)
 8009aae:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8009ab0:	6a1a      	ldr	r2, [r3, #32]
 8009ab2:	f022 0201 	bic.w	r2, r2, #1
 8009ab6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ab8:	6a1a      	ldr	r2, [r3, #32]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8009ac0:	6a1a      	ldr	r2, [r3, #32]
 8009ac2:	f022 0210 	bic.w	r2, r2, #16
 8009ac6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ac8:	6a1a      	ldr	r2, [r3, #32]
 8009aca:	f042 0210 	orr.w	r2, r2, #16
 8009ace:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	f042 0202 	orr.w	r2, r2, #2
 8009ad6:	60da      	str	r2, [r3, #12]
 8009ad8:	e7d4      	b.n	8009a84 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7bc      	b.n	8009a58 <HAL_TIM_Encoder_Start_IT+0x54>
 8009ade:	4613      	mov	r3, r2
 8009ae0:	e7ba      	b.n	8009a58 <HAL_TIM_Encoder_Start_IT+0x54>

08009ae2 <HAL_TIM_OC_DelayElapsedCallback>:
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009ae4:	4770      	bx	lr

08009ae6 <HAL_TIM_TriggerCallback>:
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ae8:	6803      	ldr	r3, [r0, #0]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	0791      	lsls	r1, r2, #30
{
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009af2:	d50f      	bpl.n	8009b14 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	0792      	lsls	r2, r2, #30
 8009af8:	d50c      	bpl.n	8009b14 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009afa:	f06f 0202 	mvn.w	r2, #2
 8009afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b00:	2201      	movs	r2, #1
 8009b02:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	0799      	lsls	r1, r3, #30
 8009b08:	f000 8085 	beq.w	8009c16 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009b0c:	f7f6 ff16 	bl	800093c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b10:	2300      	movs	r3, #0
 8009b12:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	0752      	lsls	r2, r2, #29
 8009b1a:	d510      	bpl.n	8009b3e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	0750      	lsls	r0, r2, #29
 8009b20:	d50d      	bpl.n	8009b3e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b22:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009b34:	d075      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	f7f6 ff01 	bl	800093c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	691a      	ldr	r2, [r3, #16]
 8009b42:	0711      	lsls	r1, r2, #28
 8009b44:	d50f      	bpl.n	8009b66 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	0712      	lsls	r2, r2, #28
 8009b4a:	d50c      	bpl.n	8009b66 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b4c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8009b50:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b54:	2204      	movs	r2, #4
 8009b56:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	079b      	lsls	r3, r3, #30
 8009b5c:	d067      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b5e:	f7f6 feed 	bl	800093c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b62:	2300      	movs	r3, #0
 8009b64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	691a      	ldr	r2, [r3, #16]
 8009b6a:	06d0      	lsls	r0, r2, #27
 8009b6c:	d510      	bpl.n	8009b90 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	06d1      	lsls	r1, r2, #27
 8009b72:	d50d      	bpl.n	8009b90 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b74:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8009b78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009b86:	d058      	beq.n	8009c3a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b88:	f7f6 fed8 	bl	800093c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	691a      	ldr	r2, [r3, #16]
 8009b94:	07d2      	lsls	r2, r2, #31
 8009b96:	d508      	bpl.n	8009baa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	07d0      	lsls	r0, r2, #31
 8009b9c:	d505      	bpl.n	8009baa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b9e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ba2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ba4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ba6:	f7f7 faaf 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	0611      	lsls	r1, r2, #24
 8009bb0:	d508      	bpl.n	8009bc4 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	0612      	lsls	r2, r2, #24
 8009bb6:	d505      	bpl.n	8009bc4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009bbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009bc0:	f000 fb7f 	bl	800a2c2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	05d0      	lsls	r0, r2, #23
 8009bca:	d508      	bpl.n	8009bde <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	0611      	lsls	r1, r2, #24
 8009bd0:	d505      	bpl.n	8009bde <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8009bd6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bd8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009bda:	f000 fb73 	bl	800a2c4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	0652      	lsls	r2, r2, #25
 8009be4:	d508      	bpl.n	8009bf8 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	0650      	lsls	r0, r2, #25
 8009bea:	d505      	bpl.n	8009bf8 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009bf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009bf4:	f7ff ff77 	bl	8009ae6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	691a      	ldr	r2, [r3, #16]
 8009bfc:	0691      	lsls	r1, r2, #26
 8009bfe:	d522      	bpl.n	8009c46 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	0692      	lsls	r2, r2, #26
 8009c04:	d51f      	bpl.n	8009c46 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c06:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009c0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c0c:	611a      	str	r2, [r3, #16]
}
 8009c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009c12:	f000 bb55 	b.w	800a2c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c16:	f7ff ff64 	bl	8009ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff ff62 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c20:	e776      	b.n	8009b10 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c22:	f7ff ff5e 	bl	8009ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff ff5c 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c2c:	e785      	b.n	8009b3a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2e:	f7ff ff58 	bl	8009ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff ff56 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c38:	e793      	b.n	8009b62 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c3a:	f7ff ff52 	bl	8009ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff ff50 	bl	8009ae4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c44:	e7a2      	b.n	8009b8c <HAL_TIM_IRQHandler+0xa4>
}
 8009c46:	bd10      	pop	{r4, pc}

08009c48 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c48:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8009c4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c4c:	4290      	cmp	r0, r2
 8009c4e:	d012      	beq.n	8009c76 <TIM_Base_SetConfig+0x2e>
 8009c50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c54:	d00f      	beq.n	8009c76 <TIM_Base_SetConfig+0x2e>
 8009c56:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c5a:	4290      	cmp	r0, r2
 8009c5c:	d00b      	beq.n	8009c76 <TIM_Base_SetConfig+0x2e>
 8009c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c62:	4290      	cmp	r0, r2
 8009c64:	d007      	beq.n	8009c76 <TIM_Base_SetConfig+0x2e>
 8009c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6a:	4290      	cmp	r0, r2
 8009c6c:	d003      	beq.n	8009c76 <TIM_Base_SetConfig+0x2e>
 8009c6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009c72:	4290      	cmp	r0, r2
 8009c74:	d119      	bne.n	8009caa <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8009c76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c7c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c7e:	4a27      	ldr	r2, [pc, #156]	; (8009d1c <TIM_Base_SetConfig+0xd4>)
 8009c80:	4290      	cmp	r0, r2
 8009c82:	d025      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009c84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c88:	d022      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009c8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c8e:	4290      	cmp	r0, r2
 8009c90:	d01e      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c96:	4290      	cmp	r0, r2
 8009c98:	d01a      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c9e:	4290      	cmp	r0, r2
 8009ca0:	d016      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009ca2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009ca6:	4290      	cmp	r0, r2
 8009ca8:	d012      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009caa:	4a1d      	ldr	r2, [pc, #116]	; (8009d20 <TIM_Base_SetConfig+0xd8>)
 8009cac:	4290      	cmp	r0, r2
 8009cae:	d00f      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cb4:	4290      	cmp	r0, r2
 8009cb6:	d00b      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cbc:	4290      	cmp	r0, r2
 8009cbe:	d007      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009cc0:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8009cc4:	4290      	cmp	r0, r2
 8009cc6:	d003      	beq.n	8009cd0 <TIM_Base_SetConfig+0x88>
 8009cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ccc:	4290      	cmp	r0, r2
 8009cce:	d103      	bne.n	8009cd8 <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cd4:	68ca      	ldr	r2, [r1, #12]
 8009cd6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd8:	694a      	ldr	r2, [r1, #20]
 8009cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cde:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009ce0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce2:	688b      	ldr	r3, [r1, #8]
 8009ce4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009ce6:	680b      	ldr	r3, [r1, #0]
 8009ce8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <TIM_Base_SetConfig+0xd4>)
 8009cec:	4298      	cmp	r0, r3
 8009cee:	d00f      	beq.n	8009d10 <TIM_Base_SetConfig+0xc8>
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	d00b      	beq.n	8009d10 <TIM_Base_SetConfig+0xc8>
 8009cf8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009cfc:	4298      	cmp	r0, r3
 8009cfe:	d007      	beq.n	8009d10 <TIM_Base_SetConfig+0xc8>
 8009d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d04:	4298      	cmp	r0, r3
 8009d06:	d003      	beq.n	8009d10 <TIM_Base_SetConfig+0xc8>
 8009d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	d101      	bne.n	8009d14 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8009d10:	690b      	ldr	r3, [r1, #16]
 8009d12:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009d14:	2301      	movs	r3, #1
 8009d16:	6143      	str	r3, [r0, #20]
}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40014000 	.word	0x40014000

08009d24 <HAL_TIM_Base_Init>:
{
 8009d24:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009d26:	4604      	mov	r4, r0
 8009d28:	b350      	cbz	r0, 8009d80 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d32:	b91b      	cbnz	r3, 8009d3c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009d38:	f7f7 fea0 	bl	8001a7c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d46:	f7ff ff7f 	bl	8009c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d4a:	2301      	movs	r3, #1
  return HAL_OK;
 8009d4c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009d56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009d5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d76:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009d7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009d80:	2001      	movs	r0, #1
 8009d82:	e7fc      	b.n	8009d7e <HAL_TIM_Base_Init+0x5a>

08009d84 <HAL_TIM_PWM_Init>:
{
 8009d84:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009d86:	4604      	mov	r4, r0
 8009d88:	b350      	cbz	r0, 8009de0 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d92:	b91b      	cbnz	r3, 8009d9c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009d94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d98:	f7f7 fe32 	bl	8001a00 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009da6:	f7ff ff4f 	bl	8009c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009daa:	2301      	movs	r3, #1
  return HAL_OK;
 8009dac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009db6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009dbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dd2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009dd6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009dde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009de0:	2001      	movs	r0, #1
 8009de2:	e7fc      	b.n	8009dde <HAL_TIM_PWM_Init+0x5a>

08009de4 <HAL_TIM_Encoder_Init>:
{
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	460d      	mov	r5, r1
  if (htim == NULL)
 8009de8:	4604      	mov	r4, r0
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d04d      	beq.n	8009e8a <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009df6:	b91b      	cbnz	r3, 8009e00 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8009df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8009dfc:	f7f7 fe62 	bl	8001ac4 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e00:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009e02:	2302      	movs	r3, #2
 8009e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e08:	f851 0b04 	ldr.w	r0, [r1], #4
 8009e0c:	6883      	ldr	r3, [r0, #8]
 8009e0e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009e12:	f023 0307 	bic.w	r3, r3, #7
 8009e16:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e18:	f7ff ff16 	bl	8009c48 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8009e1c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8009e1e:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8009e20:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8009e22:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e24:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8009e26:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e2c:	69ab      	ldr	r3, [r5, #24]
  tmpccer = htim->Instance->CCER;
 8009e2e:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e30:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e34:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009e38:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e3a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e3c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e44:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e4c:	68e9      	ldr	r1, [r5, #12]
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	6a29      	ldr	r1, [r5, #32]
 8009e52:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e56:	6969      	ldr	r1, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e58:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009e5a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e5e:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8009e60:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e62:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8009e66:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e68:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e6a:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8009e6c:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8009e6e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e78:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	e7fc      	b.n	8009e88 <HAL_TIM_Encoder_Init+0xa4>
	...

08009e90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e90:	6a03      	ldr	r3, [r0, #32]
 8009e92:	f023 0310 	bic.w	r3, r3, #16
{
 8009e96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009e9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009e9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009e9e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8009ea0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ea4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ea6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009eaa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009eb2:	688d      	ldr	r5, [r1, #8]
 8009eb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb8:	4d16      	ldr	r5, [pc, #88]	; (8009f14 <TIM_OC2_SetConfig+0x84>)
 8009eba:	42a8      	cmp	r0, r5
 8009ebc:	d003      	beq.n	8009ec6 <TIM_OC2_SetConfig+0x36>
 8009ebe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ec2:	42a8      	cmp	r0, r5
 8009ec4:	d10d      	bne.n	8009ee2 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ecc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed0:	4d10      	ldr	r5, [pc, #64]	; (8009f14 <TIM_OC2_SetConfig+0x84>)
 8009ed2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed8:	d00e      	beq.n	8009ef8 <TIM_OC2_SetConfig+0x68>
 8009eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ede:	42a8      	cmp	r0, r5
 8009ee0:	d00a      	beq.n	8009ef8 <TIM_OC2_SetConfig+0x68>
 8009ee2:	4d0d      	ldr	r5, [pc, #52]	; (8009f18 <TIM_OC2_SetConfig+0x88>)
 8009ee4:	42a8      	cmp	r0, r5
 8009ee6:	d007      	beq.n	8009ef8 <TIM_OC2_SetConfig+0x68>
 8009ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009eec:	42a8      	cmp	r0, r5
 8009eee:	d003      	beq.n	8009ef8 <TIM_OC2_SetConfig+0x68>
 8009ef0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ef4:	42a8      	cmp	r0, r5
 8009ef6:	d106      	bne.n	8009f06 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009efc:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009f00:	4334      	orrs	r4, r6
 8009f02:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009f06:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009f08:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009f0a:	684a      	ldr	r2, [r1, #4]
 8009f0c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009f0e:	6203      	str	r3, [r0, #32]
}
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	bf00      	nop
 8009f14:	40010000 	.word	0x40010000
 8009f18:	40014000 	.word	0x40014000

08009f1c <HAL_TIM_PWM_ConfigChannel>:
{
 8009f1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8009f1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8009f22:	4605      	mov	r5, r0
 8009f24:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d07a      	beq.n	800a020 <HAL_TIM_PWM_ConfigChannel+0x104>
 8009f2a:	2201      	movs	r2, #1
  switch (Channel)
 8009f2c:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 8009f2e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8009f32:	d053      	beq.n	8009fdc <HAL_TIM_PWM_ConfigChannel+0xc0>
 8009f34:	d809      	bhi.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x2e>
 8009f36:	2c04      	cmp	r4, #4
 8009f38:	d02e      	beq.n	8009f98 <HAL_TIM_PWM_ConfigChannel+0x7c>
 8009f3a:	2c08      	cmp	r4, #8
 8009f3c:	d03d      	beq.n	8009fba <HAL_TIM_PWM_ConfigChannel+0x9e>
 8009f3e:	b1cc      	cbz	r4, 8009f74 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_UNLOCK(htim);
 8009f40:	2300      	movs	r3, #0
 8009f42:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8009f46:	4610      	mov	r0, r2
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8009f4a:	2c10      	cmp	r4, #16
 8009f4c:	d057      	beq.n	8009ffe <HAL_TIM_PWM_ConfigChannel+0xe2>
 8009f4e:	2c14      	cmp	r4, #20
 8009f50:	d1f6      	bne.n	8009f40 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f52:	6800      	ldr	r0, [r0, #0]
 8009f54:	f7ff fcdc 	bl	8009910 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f58:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f5a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f72:	e053      	b.n	800a01c <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f74:	6800      	ldr	r0, [r0, #0]
 8009f76:	f7ff fbd3 	bl	8009720 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f7a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f7c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f7e:	699a      	ldr	r2, [r3, #24]
 8009f80:	f042 0208 	orr.w	r2, r2, #8
 8009f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f86:	699a      	ldr	r2, [r3, #24]
 8009f88:	f022 0204 	bic.w	r2, r2, #4
 8009f8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f8e:	699a      	ldr	r2, [r3, #24]
 8009f90:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f92:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009f94:	2200      	movs	r2, #0
      break;
 8009f96:	e7d3      	b.n	8009f40 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f98:	6800      	ldr	r0, [r0, #0]
 8009f9a:	f7ff ff79 	bl	8009e90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f9e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fa0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fa8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009faa:	699a      	ldr	r2, [r3, #24]
 8009fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fb2:	699a      	ldr	r2, [r3, #24]
 8009fb4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009fb8:	e7eb      	b.n	8009f92 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	f7ff fbfc 	bl	80097b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fc0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fc2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	f042 0208 	orr.w	r2, r2, #8
 8009fca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fcc:	69da      	ldr	r2, [r3, #28]
 8009fce:	f022 0204 	bic.w	r2, r2, #4
 8009fd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fd4:	69da      	ldr	r2, [r3, #28]
 8009fd6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fd8:	61da      	str	r2, [r3, #28]
      break;
 8009fda:	e7db      	b.n	8009f94 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fdc:	6800      	ldr	r0, [r0, #0]
 8009fde:	f7ff fc2f 	bl	8009840 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fe2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fe4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fe6:	69da      	ldr	r2, [r3, #28]
 8009fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009ffc:	e7ec      	b.n	8009fd8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ffe:	6800      	ldr	r0, [r0, #0]
 800a000:	f7ff fc52 	bl	80098a8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a004:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a006:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a00a:	f042 0208 	orr.w	r2, r2, #8
 800a00e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a012:	f022 0204 	bic.w	r2, r2, #4
 800a016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a01a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a01c:	655a      	str	r2, [r3, #84]	; 0x54
 800a01e:	e7b9      	b.n	8009f94 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 800a020:	2202      	movs	r2, #2
 800a022:	e790      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x2a>

0800a024 <TIM_CCxChannelCmd>:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a024:	f001 011f 	and.w	r1, r1, #31
  TIMx->CCER &= ~tmp;
 800a028:	6a03      	ldr	r3, [r0, #32]
{
 800a02a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a02c:	2401      	movs	r4, #1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a02e:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a030:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800a032:	ea23 0304 	bic.w	r3, r3, r4
 800a036:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a038:	6a03      	ldr	r3, [r0, #32]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	6202      	str	r2, [r0, #32]
}
 800a03e:	bd10      	pop	{r4, pc}

0800a040 <HAL_TIM_OC_Start>:
{
 800a040:	b510      	push	{r4, lr}
 800a042:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a044:	b929      	cbnz	r1, 800a052 <HAL_TIM_OC_Start+0x12>
 800a046:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d031      	beq.n	800a0b2 <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 800a04e:	2001      	movs	r0, #1
}
 800a050:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a052:	2904      	cmp	r1, #4
 800a054:	d107      	bne.n	800a066 <HAL_TIM_OC_Start+0x26>
 800a056:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d1f7      	bne.n	800a04e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a05e:	2302      	movs	r3, #2
 800a060:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800a064:	e028      	b.n	800a0b8 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a066:	2908      	cmp	r1, #8
 800a068:	d107      	bne.n	800a07a <HAL_TIM_OC_Start+0x3a>
 800a06a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d1ed      	bne.n	800a04e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a072:	2302      	movs	r3, #2
 800a074:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a078:	e01e      	b.n	800a0b8 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a07a:	290c      	cmp	r1, #12
 800a07c:	d107      	bne.n	800a08e <HAL_TIM_OC_Start+0x4e>
 800a07e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a082:	2b01      	cmp	r3, #1
 800a084:	d1e3      	bne.n	800a04e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a086:	2302      	movs	r3, #2
 800a088:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800a08c:	e014      	b.n	800a0b8 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a08e:	2910      	cmp	r1, #16
 800a090:	d107      	bne.n	800a0a2 <HAL_TIM_OC_Start+0x62>
 800a092:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a096:	2b01      	cmp	r3, #1
 800a098:	d1d9      	bne.n	800a04e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a09a:	2302      	movs	r3, #2
 800a09c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800a0a0:	e00a      	b.n	800a0b8 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0a2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d1d1      	bne.n	800a04e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800a0b0:	e002      	b.n	800a0b8 <HAL_TIM_OC_Start+0x78>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	6820      	ldr	r0, [r4, #0]
 800a0bc:	f7ff ffb2 	bl	800a024 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	4a26      	ldr	r2, [pc, #152]	; (800a15c <HAL_TIM_OC_Start+0x11c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d019      	beq.n	800a0fc <HAL_TIM_OC_Start+0xbc>
 800a0c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d015      	beq.n	800a0fc <HAL_TIM_OC_Start+0xbc>
 800a0d0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d011      	beq.n	800a0fc <HAL_TIM_OC_Start+0xbc>
 800a0d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d00d      	beq.n	800a0fc <HAL_TIM_OC_Start+0xbc>
 800a0e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d009      	beq.n	800a0fc <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ec:	d10e      	bne.n	800a10c <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0ee:	6899      	ldr	r1, [r3, #8]
 800a0f0:	4a1b      	ldr	r2, [pc, #108]	; (800a160 <HAL_TIM_OC_Start+0x120>)
 800a0f2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f4:	2a06      	cmp	r2, #6
 800a0f6:	d12d      	bne.n	800a154 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e7a9      	b.n	800a050 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 800a0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a102:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a104:	4a15      	ldr	r2, [pc, #84]	; (800a15c <HAL_TIM_OC_Start+0x11c>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d1ee      	bne.n	800a0e8 <HAL_TIM_OC_Start+0xa8>
 800a10a:	e7f0      	b.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a10c:	4a15      	ldr	r2, [pc, #84]	; (800a164 <HAL_TIM_OC_Start+0x124>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d0ed      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a116:	4293      	cmp	r3, r2
 800a118:	d0e9      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a11a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a11e:	4293      	cmp	r3, r2
 800a120:	d0e5      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a122:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a126:	4293      	cmp	r3, r2
 800a128:	d0e1      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a12a:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a12e:	4293      	cmp	r3, r2
 800a130:	d0dd      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a132:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a136:	4293      	cmp	r3, r2
 800a138:	d0d9      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a13a:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a13e:	4293      	cmp	r3, r2
 800a140:	d0d5      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
 800a142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a146:	4293      	cmp	r3, r2
 800a148:	d0d1      	beq.n	800a0ee <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	f042 0201 	orr.w	r2, r2, #1
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e7d1      	b.n	800a0f8 <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a154:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a158:	d1f7      	bne.n	800a14a <HAL_TIM_OC_Start+0x10a>
 800a15a:	e7cd      	b.n	800a0f8 <HAL_TIM_OC_Start+0xb8>
 800a15c:	40010000 	.word	0x40010000
 800a160:	00010007 	.word	0x00010007
 800a164:	40000400 	.word	0x40000400

0800a168 <HAL_TIM_PWM_Start>:
 800a168:	f7ff bf6a 	b.w	800a040 <HAL_TIM_OC_Start>

0800a16c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a16c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a172:	2b01      	cmp	r3, #1
 800a174:	f04f 0302 	mov.w	r3, #2
 800a178:	d045      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a17a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a17e:	4d23      	ldr	r5, [pc, #140]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 800a180:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a182:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a184:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a186:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a188:	d003      	beq.n	800a192 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800a18a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a18e:	42ab      	cmp	r3, r5
 800a190:	d103      	bne.n	800a19a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a192:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a196:	684d      	ldr	r5, [r1, #4]
 800a198:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a19a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a19c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1a0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a4:	4a19      	ldr	r2, [pc, #100]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d022      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d01f      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1b0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d01b      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d017      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1c8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00f      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1d0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00b      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1d8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d007      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1e0:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a1e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f2:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a200:	2300      	movs	r3, #0
 800a202:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800a206:	4618      	mov	r0, r3

  return HAL_OK;
}
 800a208:	bd30      	pop	{r4, r5, pc}
 800a20a:	bf00      	nop
 800a20c:	40010000 	.word	0x40010000

0800a210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a210:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a212:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a216:	2b01      	cmp	r3, #1
 800a218:	d04c      	beq.n	800a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a21a:	68cb      	ldr	r3, [r1, #12]
 800a21c:	688a      	ldr	r2, [r1, #8]
 800a21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a222:	4c25      	ldr	r4, [pc, #148]	; (800a2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a224:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a226:	684a      	ldr	r2, [r1, #4]
 800a228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a22c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a22e:	680a      	ldr	r2, [r1, #0]
 800a230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a234:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a236:	690a      	ldr	r2, [r1, #16]
 800a238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a23c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a23e:	694a      	ldr	r2, [r1, #20]
 800a240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a244:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a246:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a24c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a24e:	698a      	ldr	r2, [r1, #24]
 800a250:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a258:	6802      	ldr	r2, [r0, #0]
 800a25a:	42a2      	cmp	r2, r4
 800a25c:	d002      	beq.n	800a264 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800a25e:	4d17      	ldr	r5, [pc, #92]	; (800a2bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a260:	42aa      	cmp	r2, r5
 800a262:	d121      	bne.n	800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a268:	69cd      	ldr	r5, [r1, #28]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a26a:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a26c:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a270:	d002      	beq.n	800a278 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800a272:	4c12      	ldr	r4, [pc, #72]	; (800a2bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a274:	42a2      	cmp	r2, r4
 800a276:	d117      	bne.n	800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a278:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a27a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a27e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a282:	6a0c      	ldr	r4, [r1, #32]
 800a284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a288:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a28a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a28c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a290:	4323      	orrs	r3, r4
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a292:	4c09      	ldr	r4, [pc, #36]	; (800a2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800a294:	42a2      	cmp	r2, r4
 800a296:	d003      	beq.n	800a2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x90>
 800a298:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a29c:	42a2      	cmp	r2, r4
 800a29e:	d103      	bne.n	800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a2a6:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2a8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a2b0:	4618      	mov	r0, r3
}
 800a2b2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800a2b4:	2002      	movs	r0, #2
 800a2b6:	e7fc      	b.n	800a2b2 <HAL_TIMEx_ConfigBreakDeadTime+0xa2>
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <HAL_TIMEx_CommutCallback>:
 800a2c0:	4770      	bx	lr

0800a2c2 <HAL_TIMEx_BreakCallback>:
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_TIMEx_Break2Callback>:
 800a2c4:	4770      	bx	lr
	...

0800a2c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a2c8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a2ca:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <SysTick_Handler+0x18>)
 800a2cc:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a2ce:	f001 fe45 	bl	800bf5c <xTaskGetSchedulerState>
 800a2d2:	2801      	cmp	r0, #1
 800a2d4:	d003      	beq.n	800a2de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a2d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a2da:	f000 bbdb 	b.w	800aa94 <xPortSysTickHandler>
}
 800a2de:	bd08      	pop	{r3, pc}
 800a2e0:	e000e010 	.word	0xe000e010

0800a2e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2e8:	b92b      	cbnz	r3, 800a2f6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2ea:	4b06      	ldr	r3, [pc, #24]	; (800a304 <osKernelInitialize+0x20>)
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	b928      	cbnz	r0, 800a2fc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2f4:	4770      	bx	lr
    stat = osErrorISR;
 800a2f6:	f06f 0005 	mvn.w	r0, #5
 800a2fa:	4770      	bx	lr
    } else {
      stat = osError;
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	240025a8 	.word	0x240025a8

0800a308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a308:	b510      	push	{r4, lr}
 800a30a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a30e:	b95c      	cbnz	r4, 800a328 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a310:	4b08      	ldr	r3, [pc, #32]	; (800a334 <osKernelStart+0x2c>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	2a01      	cmp	r2, #1
 800a316:	d10a      	bne.n	800a32e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a318:	4a07      	ldr	r2, [pc, #28]	; (800a338 <osKernelStart+0x30>)
 800a31a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a31c:	2202      	movs	r2, #2
 800a31e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a320:	f001 fcc2 	bl	800bca8 <vTaskStartScheduler>
      stat = osOK;
 800a324:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800a326:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a328:	f06f 0005 	mvn.w	r0, #5
 800a32c:	e7fb      	b.n	800a326 <osKernelStart+0x1e>
      stat = osError;
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a332:	e7f8      	b.n	800a326 <osKernelStart+0x1e>
 800a334:	240025a8 	.word	0x240025a8
 800a338:	e000ed00 	.word	0xe000ed00

0800a33c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33e:	4614      	mov	r4, r2
 800a340:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a342:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a344:	460b      	mov	r3, r1
  hTask = NULL;
 800a346:	9205      	str	r2, [sp, #20]
 800a348:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a34c:	b9d2      	cbnz	r2, 800a384 <osThreadNew+0x48>
 800a34e:	b1c8      	cbz	r0, 800a384 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a350:	2c00      	cmp	r4, #0
 800a352:	d02f      	beq.n	800a3b4 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a354:	69a5      	ldr	r5, [r4, #24]
 800a356:	2d00      	cmp	r5, #0
 800a358:	bf08      	it	eq
 800a35a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a35c:	1e69      	subs	r1, r5, #1
 800a35e:	46ac      	mov	ip, r5
 800a360:	2937      	cmp	r1, #55	; 0x37
 800a362:	d82b      	bhi.n	800a3bc <osThreadNew+0x80>
 800a364:	6861      	ldr	r1, [r4, #4]
 800a366:	07c9      	lsls	r1, r1, #31
 800a368:	d428      	bmi.n	800a3bc <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a36a:	6966      	ldr	r6, [r4, #20]
 800a36c:	b16e      	cbz	r6, 800a38a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a36e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a370:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a372:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a376:	b157      	cbz	r7, 800a38e <osThreadNew+0x52>
 800a378:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a37c:	d902      	bls.n	800a384 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a37e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a380:	b104      	cbz	r4, 800a384 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a382:	b9ee      	cbnz	r6, 800a3c0 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a384:	9805      	ldr	r0, [sp, #20]
}
 800a386:	b007      	add	sp, #28
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a38a:	2280      	movs	r2, #128	; 0x80
 800a38c:	e7f0      	b.n	800a370 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a38e:	f1be 0f00 	cmp.w	lr, #0
 800a392:	d1f7      	bne.n	800a384 <osThreadNew+0x48>
      if (mem == 0) {
 800a394:	6924      	ldr	r4, [r4, #16]
 800a396:	2c00      	cmp	r4, #0
 800a398:	d1f4      	bne.n	800a384 <osThreadNew+0x48>
 800a39a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a39c:	a905      	add	r1, sp, #20
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	e9cd c100 	strd	ip, r1, [sp]
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f001 faf9 	bl	800b99c <xTaskCreate>
 800a3aa:	2801      	cmp	r0, #1
            hTask = NULL;
 800a3ac:	bf1c      	itt	ne
 800a3ae:	2300      	movne	r3, #0
 800a3b0:	9305      	strne	r3, [sp, #20]
 800a3b2:	e7e7      	b.n	800a384 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800a3b4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a3b8:	2280      	movs	r2, #128	; 0x80
 800a3ba:	e7ef      	b.n	800a39c <osThreadNew+0x60>
        return (NULL);
 800a3bc:	4610      	mov	r0, r2
 800a3be:	e7e2      	b.n	800a386 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3c0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a3c4:	9500      	str	r5, [sp, #0]
 800a3c6:	f001 fab1 	bl	800b92c <xTaskCreateStatic>
 800a3ca:	9005      	str	r0, [sp, #20]
 800a3cc:	e7da      	b.n	800a384 <osThreadNew+0x48>

0800a3ce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3d4:	b924      	cbnz	r4, 800a3e0 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800a3d6:	b110      	cbz	r0, 800a3de <osDelay+0x10>
      vTaskDelay(ticks);
 800a3d8:	f001 fc26 	bl	800bc28 <vTaskDelay>
    stat = osOK;
 800a3dc:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800a3de:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a3e0:	f06f 0005 	mvn.w	r0, #5
 800a3e4:	e7fb      	b.n	800a3de <osDelay+0x10>

0800a3e6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460e      	mov	r6, r1
 800a3ec:	4615      	mov	r5, r2
 800a3ee:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a3f2:	b11a      	cbz	r2, 800a3fc <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a3f4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	b003      	add	sp, #12
 800a3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d0f9      	beq.n	800a3f4 <osSemaphoreNew+0xe>
 800a400:	4288      	cmp	r0, r1
 800a402:	d3f7      	bcc.n	800a3f4 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800a404:	b1e5      	cbz	r5, 800a440 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a406:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800a40a:	b1bb      	cbz	r3, 800a43c <osSemaphoreNew+0x56>
 800a40c:	2f4f      	cmp	r7, #79	; 0x4f
 800a40e:	d9f1      	bls.n	800a3f4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a410:	2801      	cmp	r0, #1
 800a412:	d12a      	bne.n	800a46a <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a414:	2103      	movs	r1, #3
 800a416:	9100      	str	r1, [sp, #0]
 800a418:	4611      	mov	r1, r2
 800a41a:	f000 fce9 	bl	800adf0 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800a41e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a420:	2800      	cmp	r0, #0
 800a422:	d0e7      	beq.n	800a3f4 <osSemaphoreNew+0xe>
 800a424:	b1de      	cbz	r6, 800a45e <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a426:	2300      	movs	r3, #0
 800a428:	461a      	mov	r2, r3
 800a42a:	4619      	mov	r1, r3
 800a42c:	f000 fd96 	bl	800af5c <xQueueGenericSend>
 800a430:	2801      	cmp	r0, #1
 800a432:	d014      	beq.n	800a45e <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800a434:	4620      	mov	r0, r4
 800a436:	f001 f8d7 	bl	800b5e8 <vQueueDelete>
 800a43a:	e7db      	b.n	800a3f4 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	d1d9      	bne.n	800a3f4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a440:	2c01      	cmp	r4, #1
 800a442:	d105      	bne.n	800a450 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800a444:	2203      	movs	r2, #3
 800a446:	2100      	movs	r1, #0
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fd1f 	bl	800ae8c <xQueueGenericCreate>
 800a44e:	e7e6      	b.n	800a41e <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a450:	4620      	mov	r0, r4
 800a452:	4631      	mov	r1, r6
 800a454:	f000 fd63 	bl	800af1e <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a458:	4604      	mov	r4, r0
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0ca      	beq.n	800a3f4 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800a45e:	b955      	cbnz	r5, 800a476 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800a460:	4629      	mov	r1, r5
 800a462:	4620      	mov	r0, r4
 800a464:	f001 f896 	bl	800b594 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a468:	e7c5      	b.n	800a3f6 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a46a:	461a      	mov	r2, r3
 800a46c:	f000 fd35 	bl	800aeda <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a470:	4604      	mov	r4, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0be      	beq.n	800a3f4 <osSemaphoreNew+0xe>
          name = attr->name;
 800a476:	682d      	ldr	r5, [r5, #0]
 800a478:	e7f2      	b.n	800a460 <osSemaphoreNew+0x7a>
	...

0800a47c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a47c:	b513      	push	{r0, r1, r4, lr}
 800a47e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a480:	b1f8      	cbz	r0, 800a4c2 <osSemaphoreAcquire+0x46>
 800a482:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a486:	b1a3      	cbz	r3, 800a4b2 <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 800a488:	b9d9      	cbnz	r1, 800a4c2 <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a48a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a48c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a48e:	f001 f831 	bl	800b4f4 <xQueueReceiveFromISR>
 800a492:	2801      	cmp	r0, #1
 800a494:	d112      	bne.n	800a4bc <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	b913      	cbnz	r3, 800a4a0 <osSemaphoreAcquire+0x24>
  stat = osOK;
 800a49a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a49c:	b002      	add	sp, #8
 800a49e:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <osSemaphoreAcquire+0x54>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	e7f3      	b.n	800a49a <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a4b2:	f000 ff5b 	bl	800b36c <xQueueSemaphoreTake>
 800a4b6:	2801      	cmp	r0, #1
 800a4b8:	d0ef      	beq.n	800a49a <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800a4ba:	b92c      	cbnz	r4, 800a4c8 <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 800a4bc:	f06f 0002 	mvn.w	r0, #2
 800a4c0:	e7ec      	b.n	800a49c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a4c2:	f06f 0003 	mvn.w	r0, #3
 800a4c6:	e7e9      	b.n	800a49c <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800a4c8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a4cc:	e7e6      	b.n	800a49c <osSemaphoreAcquire+0x20>
 800a4ce:	bf00      	nop
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a4d4:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a4d6:	b300      	cbz	r0, 800a51a <osSemaphoreRelease+0x46>
 800a4d8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a4dc:	b1a3      	cbz	r3, 800a508 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 800a4de:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a4e0:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a4e2:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a4e4:	f000 fe4e 	bl	800b184 <xQueueGiveFromISR>
 800a4e8:	2801      	cmp	r0, #1
 800a4ea:	d113      	bne.n	800a514 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	b913      	cbnz	r3, 800a4f6 <osSemaphoreRelease+0x22>
  stat = osOK;
 800a4f0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a4f2:	b002      	add	sp, #8
 800a4f4:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <osSemaphoreRelease+0x4c>)
 800a4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	e7f3      	b.n	800a4f0 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a508:	461a      	mov	r2, r3
 800a50a:	4619      	mov	r1, r3
 800a50c:	f000 fd26 	bl	800af5c <xQueueGenericSend>
 800a510:	2801      	cmp	r0, #1
 800a512:	d0ed      	beq.n	800a4f0 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800a514:	f06f 0002 	mvn.w	r0, #2
 800a518:	e7eb      	b.n	800a4f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a51a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a51e:	e7e8      	b.n	800a4f2 <osSemaphoreRelease+0x1e>
 800a520:	e000ed04 	.word	0xe000ed04

0800a524 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a526:	4606      	mov	r6, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4614      	mov	r4, r2
 800a52c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a530:	b11f      	cbz	r7, 800a53a <osMessageQueueNew+0x16>
  hQueue = NULL;
 800a532:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a534:	4628      	mov	r0, r5
 800a536:	b003      	add	sp, #12
 800a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0f9      	beq.n	800a532 <osMessageQueueNew+0xe>
 800a53e:	2900      	cmp	r1, #0
 800a540:	d0f7      	beq.n	800a532 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800a542:	b1da      	cbz	r2, 800a57c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a544:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800a548:	b183      	cbz	r3, 800a56c <osMessageQueueNew+0x48>
 800a54a:	2a4f      	cmp	r2, #79	; 0x4f
 800a54c:	d9f1      	bls.n	800a532 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a54e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a550:	2a00      	cmp	r2, #0
 800a552:	d0ee      	beq.n	800a532 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a554:	4345      	muls	r5, r0
 800a556:	6966      	ldr	r6, [r4, #20]
 800a558:	42ae      	cmp	r6, r5
 800a55a:	d3ea      	bcc.n	800a532 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a55c:	9700      	str	r7, [sp, #0]
 800a55e:	f000 fc47 	bl	800adf0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a562:	4605      	mov	r5, r0
 800a564:	2800      	cmp	r0, #0
 800a566:	d0e4      	beq.n	800a532 <osMessageQueueNew+0xe>
        name = attr->name;
 800a568:	6824      	ldr	r4, [r4, #0]
 800a56a:	e011      	b.n	800a590 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	d1e0      	bne.n	800a532 <osMessageQueueNew+0xe>
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1dd      	bne.n	800a532 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a576:	6963      	ldr	r3, [r4, #20]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1da      	bne.n	800a532 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800a57c:	4629      	mov	r1, r5
 800a57e:	2200      	movs	r2, #0
 800a580:	4630      	mov	r0, r6
 800a582:	f000 fc83 	bl	800ae8c <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a586:	4605      	mov	r5, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0d2      	beq.n	800a532 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800a58c:	2c00      	cmp	r4, #0
 800a58e:	d1eb      	bne.n	800a568 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800a590:	4621      	mov	r1, r4
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fffe 	bl	800b594 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800a598:	e7cc      	b.n	800a534 <osMessageQueueNew+0x10>
	...

0800a59c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a59c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a59e:	461c      	mov	r4, r3
 800a5a0:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a5a4:	b1b6      	cbz	r6, 800a5d4 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5a6:	b308      	cbz	r0, 800a5ec <osMessageQueuePut+0x50>
 800a5a8:	b301      	cbz	r1, 800a5ec <osMessageQueuePut+0x50>
 800a5aa:	b9fb      	cbnz	r3, 800a5ec <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a5ac:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a5ae:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a5b0:	f000 fd86 	bl	800b0c0 <xQueueGenericSendFromISR>
 800a5b4:	2801      	cmp	r0, #1
 800a5b6:	d116      	bne.n	800a5e6 <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	b913      	cbnz	r3, 800a5c2 <osMessageQueuePut+0x26>
  stat = osOK;
 800a5bc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a5be:	b002      	add	sp, #8
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <osMessageQueuePut+0x5c>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	e7f3      	b.n	800a5bc <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5d4:	b150      	cbz	r0, 800a5ec <osMessageQueuePut+0x50>
 800a5d6:	b149      	cbz	r1, 800a5ec <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5d8:	4633      	mov	r3, r6
 800a5da:	4622      	mov	r2, r4
 800a5dc:	f000 fcbe 	bl	800af5c <xQueueGenericSend>
 800a5e0:	2801      	cmp	r0, #1
 800a5e2:	d0eb      	beq.n	800a5bc <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800a5e4:	b92c      	cbnz	r4, 800a5f2 <osMessageQueuePut+0x56>
          stat = osErrorResource;
 800a5e6:	f06f 0002 	mvn.w	r0, #2
 800a5ea:	e7e8      	b.n	800a5be <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800a5ec:	f06f 0003 	mvn.w	r0, #3
 800a5f0:	e7e5      	b.n	800a5be <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800a5f2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a5f6:	e7e2      	b.n	800a5be <osMessageQueuePut+0x22>
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5fe:	461c      	mov	r4, r3
 800a600:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a604:	b1b3      	cbz	r3, 800a634 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a606:	b300      	cbz	r0, 800a64a <osMessageQueueGet+0x4e>
 800a608:	b1f9      	cbz	r1, 800a64a <osMessageQueueGet+0x4e>
 800a60a:	b9f4      	cbnz	r4, 800a64a <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a60c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a60e:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a610:	f000 ff70 	bl	800b4f4 <xQueueReceiveFromISR>
 800a614:	2801      	cmp	r0, #1
 800a616:	d115      	bne.n	800a644 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	b913      	cbnz	r3, 800a622 <osMessageQueueGet+0x26>
  stat = osOK;
 800a61c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a61e:	b003      	add	sp, #12
 800a620:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800a622:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <osMessageQueueGet+0x5c>)
 800a624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	e7f3      	b.n	800a61c <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a634:	b148      	cbz	r0, 800a64a <osMessageQueueGet+0x4e>
 800a636:	b141      	cbz	r1, 800a64a <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a638:	4622      	mov	r2, r4
 800a63a:	f000 fdf7 	bl	800b22c <xQueueReceive>
 800a63e:	2801      	cmp	r0, #1
 800a640:	d0ec      	beq.n	800a61c <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800a642:	b92c      	cbnz	r4, 800a650 <osMessageQueueGet+0x54>
          stat = osErrorResource;
 800a644:	f06f 0002 	mvn.w	r0, #2
 800a648:	e7e9      	b.n	800a61e <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800a64a:	f06f 0003 	mvn.w	r0, #3
 800a64e:	e7e6      	b.n	800a61e <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800a650:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a654:	e7e3      	b.n	800a61e <osMessageQueueGet+0x22>
 800a656:	bf00      	nop
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a65c:	4b03      	ldr	r3, [pc, #12]	; (800a66c <vApplicationGetIdleTaskMemory+0x10>)
 800a65e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a660:	4b03      	ldr	r3, [pc, #12]	; (800a670 <vApplicationGetIdleTaskMemory+0x14>)
 800a662:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a664:	2380      	movs	r3, #128	; 0x80
 800a666:	6013      	str	r3, [r2, #0]
}
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	24002548 	.word	0x24002548
 800a670:	24002348 	.word	0x24002348

0800a674 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a674:	4b03      	ldr	r3, [pc, #12]	; (800a684 <vApplicationGetTimerTaskMemory+0x10>)
 800a676:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a678:	4b03      	ldr	r3, [pc, #12]	; (800a688 <vApplicationGetTimerTaskMemory+0x14>)
 800a67a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a680:	6013      	str	r3, [r2, #0]
}
 800a682:	4770      	bx	lr
 800a684:	240029ac 	.word	0x240029ac
 800a688:	240025ac 	.word	0x240025ac

0800a68c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a68c:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <prvInsertBlockIntoFreeList+0x40>)
{
 800a68e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a690:	461a      	mov	r2, r3
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4283      	cmp	r3, r0
 800a696:	d3fb      	bcc.n	800a690 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a698:	6854      	ldr	r4, [r2, #4]
 800a69a:	1911      	adds	r1, r2, r4
 800a69c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a69e:	bf01      	itttt	eq
 800a6a0:	6841      	ldreq	r1, [r0, #4]
 800a6a2:	4610      	moveq	r0, r2
 800a6a4:	1909      	addeq	r1, r1, r4
 800a6a6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6a8:	6844      	ldr	r4, [r0, #4]
 800a6aa:	1901      	adds	r1, r0, r4
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	d107      	bne.n	800a6c0 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6b0:	4907      	ldr	r1, [pc, #28]	; (800a6d0 <prvInsertBlockIntoFreeList+0x44>)
 800a6b2:	6809      	ldr	r1, [r1, #0]
 800a6b4:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6b6:	bf1f      	itttt	ne
 800a6b8:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6ba:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6bc:	1909      	addne	r1, r1, r4
 800a6be:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6c0:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6c2:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6c4:	bf18      	it	ne
 800a6c6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c8:	bd10      	pop	{r4, pc}
 800a6ca:	bf00      	nop
 800a6cc:	24006624 	.word	0x24006624
 800a6d0:	24002a0c 	.word	0x24002a0c

0800a6d4 <pvPortMalloc>:
{
 800a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a6da:	f001 f98d 	bl	800b9f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a6de:	4b3e      	ldr	r3, [pc, #248]	; (800a7d8 <pvPortMalloc+0x104>)
 800a6e0:	483e      	ldr	r0, [pc, #248]	; (800a7dc <pvPortMalloc+0x108>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	469c      	mov	ip, r3
 800a6e6:	b9d2      	cbnz	r2, 800a71e <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800a6e8:	4a3d      	ldr	r2, [pc, #244]	; (800a7e0 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800a6ea:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4b3d      	ldr	r3, [pc, #244]	; (800a7e4 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6ee:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800a6f0:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6f2:	bf1c      	itt	ne
 800a6f4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6f6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6fa:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 800a6fc:	4b3a      	ldr	r3, [pc, #232]	; (800a7e8 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6fe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a702:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a706:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a708:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a70c:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a710:	4b36      	ldr	r3, [pc, #216]	; (800a7ec <pvPortMalloc+0x118>)
 800a712:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a714:	4b36      	ldr	r3, [pc, #216]	; (800a7f0 <pvPortMalloc+0x11c>)
 800a716:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a71c:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a71e:	6807      	ldr	r7, [r0, #0]
 800a720:	4227      	tst	r7, r4
 800a722:	d153      	bne.n	800a7cc <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 800a724:	2c00      	cmp	r4, #0
 800a726:	d044      	beq.n	800a7b2 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800a728:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a72c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a72e:	bf1c      	itt	ne
 800a730:	f023 0307 	bicne.w	r3, r3, #7
 800a734:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a736:	2b00      	cmp	r3, #0
 800a738:	d048      	beq.n	800a7cc <pvPortMalloc+0xf8>
 800a73a:	4a2d      	ldr	r2, [pc, #180]	; (800a7f0 <pvPortMalloc+0x11c>)
 800a73c:	6816      	ldr	r6, [r2, #0]
 800a73e:	4690      	mov	r8, r2
 800a740:	429e      	cmp	r6, r3
 800a742:	d343      	bcc.n	800a7cc <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 800a744:	4a27      	ldr	r2, [pc, #156]	; (800a7e4 <pvPortMalloc+0x110>)
 800a746:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a748:	6869      	ldr	r1, [r5, #4]
 800a74a:	4299      	cmp	r1, r3
 800a74c:	d201      	bcs.n	800a752 <pvPortMalloc+0x7e>
 800a74e:	6828      	ldr	r0, [r5, #0]
 800a750:	b9a8      	cbnz	r0, 800a77e <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 800a752:	f8dc 0000 	ldr.w	r0, [ip]
 800a756:	42a8      	cmp	r0, r5
 800a758:	d038      	beq.n	800a7cc <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a75a:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a75c:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a75e:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a760:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a762:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a764:	d912      	bls.n	800a78c <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a766:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a768:	0742      	lsls	r2, r0, #29
 800a76a:	d00b      	beq.n	800a784 <pvPortMalloc+0xb0>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	e7fe      	b.n	800a77c <pvPortMalloc+0xa8>
 800a77e:	462a      	mov	r2, r5
 800a780:	4605      	mov	r5, r0
 800a782:	e7e1      	b.n	800a748 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a784:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a786:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a788:	f7ff ff80 	bl	800a68c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a78c:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a78e:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a790:	4916      	ldr	r1, [pc, #88]	; (800a7ec <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a792:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a794:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800a796:	4a17      	ldr	r2, [pc, #92]	; (800a7f4 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800a798:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a79a:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a79c:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800a79e:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7a0:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7a2:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 800a7a6:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7aa:	bf38      	it	cc
 800a7ac:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7ae:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800a7b0:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800a7b2:	f001 f9c5 	bl	800bb40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b6:	0763      	lsls	r3, r4, #29
 800a7b8:	d00a      	beq.n	800a7d0 <pvPortMalloc+0xfc>
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	e7fe      	b.n	800a7ca <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 800a7cc:	2400      	movs	r4, #0
 800a7ce:	e7f0      	b.n	800a7b2 <pvPortMalloc+0xde>
}
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d6:	bf00      	nop
 800a7d8:	24002a0c 	.word	0x24002a0c
 800a7dc:	24006610 	.word	0x24006610
 800a7e0:	24002a10 	.word	0x24002a10
 800a7e4:	24006624 	.word	0x24006624
 800a7e8:	24006608 	.word	0x24006608
 800a7ec:	24006618 	.word	0x24006618
 800a7f0:	24006614 	.word	0x24006614
 800a7f4:	2400661c 	.word	0x2400661c

0800a7f8 <vPortFree>:
{
 800a7f8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b390      	cbz	r0, 800a864 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7fe:	4a1a      	ldr	r2, [pc, #104]	; (800a868 <vPortFree+0x70>)
 800a800:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a804:	6812      	ldr	r2, [r2, #0]
 800a806:	4213      	tst	r3, r2
 800a808:	d108      	bne.n	800a81c <vPortFree+0x24>
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	e7fe      	b.n	800a81a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a81c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a820:	b141      	cbz	r1, 800a834 <vPortFree+0x3c>
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	e7fe      	b.n	800a832 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a834:	ea23 0302 	bic.w	r3, r3, r2
 800a838:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a83c:	f001 f8dc 	bl	800b9f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vPortFree+0x74>)
 800a842:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a846:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a84a:	6811      	ldr	r1, [r2, #0]
 800a84c:	440b      	add	r3, r1
 800a84e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a850:	f7ff ff1c 	bl	800a68c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a854:	4a06      	ldr	r2, [pc, #24]	; (800a870 <vPortFree+0x78>)
 800a856:	6813      	ldr	r3, [r2, #0]
 800a858:	3301      	adds	r3, #1
}
 800a85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800a85e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a860:	f001 b96e 	b.w	800bb40 <xTaskResumeAll>
}
 800a864:	bd10      	pop	{r4, pc}
 800a866:	bf00      	nop
 800a868:	24006610 	.word	0x24006610
 800a86c:	24006614 	.word	0x24006614
 800a870:	24006620 	.word	0x24006620

0800a874 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a874:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a87c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a87e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a880:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a888:	4770      	bx	lr

0800a88a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a88e:	4770      	bx	lr

0800a890 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a890:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a892:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800a894:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a896:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a89c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a89e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a8a0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	6003      	str	r3, [r0, #0]
}
 800a8a6:	4770      	bx	lr

0800a8a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8a8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8aa:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8ac:	1c63      	adds	r3, r4, #1
 800a8ae:	d10a      	bne.n	800a8c6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8b0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8b6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8b8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8ba:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a8bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a8be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	6003      	str	r3, [r0, #0]
}
 800a8c4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8c6:	f100 0208 	add.w	r2, r0, #8
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	6852      	ldr	r2, [r2, #4]
 800a8ce:	6815      	ldr	r5, [r2, #0]
 800a8d0:	42a5      	cmp	r5, r4
 800a8d2:	d9fa      	bls.n	800a8ca <vListInsert+0x22>
 800a8d4:	e7ed      	b.n	800a8b2 <vListInsert+0xa>

0800a8d6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8d6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8d8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800a8dc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8e0:	6859      	ldr	r1, [r3, #4]
 800a8e2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8e4:	bf08      	it	eq
 800a8e6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	3a01      	subs	r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8f2:	6818      	ldr	r0, [r3, #0]
}
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8f8:	4808      	ldr	r0, [pc, #32]	; (800a91c <prvPortStartFirstTask+0x24>)
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	6800      	ldr	r0, [r0, #0]
 800a8fe:	f380 8808 	msr	MSP, r0
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8814 	msr	CONTROL, r0
 800a90a:	b662      	cpsie	i
 800a90c:	b661      	cpsie	f
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	df00      	svc	0
 800a918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a91a:	0000      	.short	0x0000
 800a91c:	e000ed08 	.word	0xe000ed08

0800a920 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a920:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a930 <vPortEnableVFP+0x10>
 800a924:	6801      	ldr	r1, [r0, #0]
 800a926:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a92a:	6001      	str	r1, [r0, #0]
 800a92c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a92e:	0000      	.short	0x0000
 800a930:	e000ed88 	.word	0xe000ed88

0800a934 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a934:	2300      	movs	r3, #0
{
 800a936:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a938:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <prvTaskExitError+0x3c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3301      	adds	r3, #1
 800a940:	d008      	beq.n	800a954 <prvTaskExitError+0x20>
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	e7fe      	b.n	800a952 <prvTaskExitError+0x1e>
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0fc      	beq.n	800a964 <prvTaskExitError+0x30>
}
 800a96a:	b002      	add	sp, #8
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	2400007c 	.word	0x2400007c

0800a974 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a978:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a97c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a980:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a982:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a984:	4b03      	ldr	r3, [pc, #12]	; (800a994 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a986:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a988:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a98a:	f06f 0302 	mvn.w	r3, #2
 800a98e:	6203      	str	r3, [r0, #32]
}
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	0800a935 	.word	0x0800a935
	...

0800a9a0 <SVC_Handler>:
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	24006634 	.word	0x24006634

0800a9c4 <vPortEnterCritical>:
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	; (800aa00 <vPortEnterCritical+0x3c>)
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a9da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a9dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a9de:	d10d      	bne.n	800a9fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9e0:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <vPortEnterCritical+0x40>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9e8:	d008      	beq.n	800a9fc <vPortEnterCritical+0x38>
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	e7fe      	b.n	800a9fa <vPortEnterCritical+0x36>
}
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	2400007c 	.word	0x2400007c
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800aa08:	4a08      	ldr	r2, [pc, #32]	; (800aa2c <vPortExitCritical+0x24>)
 800aa0a:	6813      	ldr	r3, [r2, #0]
 800aa0c:	b943      	cbnz	r3, 800aa20 <vPortExitCritical+0x18>
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	e7fe      	b.n	800aa1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800aa20:	3b01      	subs	r3, #1
 800aa22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa24:	b90b      	cbnz	r3, 800aa2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa26:	f383 8811 	msr	BASEPRI, r3
}
 800aa2a:	4770      	bx	lr
 800aa2c:	2400007c 	.word	0x2400007c

0800aa30 <PendSV_Handler>:
	__asm volatile
 800aa30:	f3ef 8009 	mrs	r0, PSP
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <pxCurrentTCBConst>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	f01e 0f10 	tst.w	lr, #16
 800aa40:	bf08      	it	eq
 800aa42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4a:	6010      	str	r0, [r2, #0]
 800aa4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa54:	f380 8811 	msr	BASEPRI, r0
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f001 f96c 	bl	800bd3c <vTaskSwitchContext>
 800aa64:	f04f 0000 	mov.w	r0, #0
 800aa68:	f380 8811 	msr	BASEPRI, r0
 800aa6c:	bc09      	pop	{r0, r3}
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	6808      	ldr	r0, [r1, #0]
 800aa72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa76:	f01e 0f10 	tst.w	lr, #16
 800aa7a:	bf08      	it	eq
 800aa7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa80:	f380 8809 	msr	PSP, r0
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w

0800aa90 <pxCurrentTCBConst>:
 800aa90:	24006634 	.word	0x24006634

0800aa94 <xPortSysTickHandler>:
{
 800aa94:	b508      	push	{r3, lr}
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800aaa6:	f000 ffb5 	bl	800ba14 <xTaskIncrementTick>
 800aaaa:	b118      	cbz	r0, 800aab4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <xPortSysTickHandler+0x28>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aab4:	2300      	movs	r3, #0
 800aab6:	f383 8811 	msr	BASEPRI, r3
}
 800aaba:	bd08      	pop	{r3, pc}
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	4a08      	ldr	r2, [pc, #32]	; (800aae4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac4:	4908      	ldr	r1, [pc, #32]	; (800aae8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aace:	4b07      	ldr	r3, [pc, #28]	; (800aaec <vPortSetupTimerInterrupt+0x2c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aad6:	4906      	ldr	r1, [pc, #24]	; (800aaf0 <vPortSetupTimerInterrupt+0x30>)
 800aad8:	3b01      	subs	r3, #1
 800aada:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aadc:	2307      	movs	r3, #7
 800aade:	6013      	str	r3, [r2, #0]
}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	e000e010 	.word	0xe000e010
 800aae8:	e000e018 	.word	0xe000e018
 800aaec:	2400006c 	.word	0x2400006c
 800aaf0:	e000e014 	.word	0xe000e014

0800aaf4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aaf4:	4b37      	ldr	r3, [pc, #220]	; (800abd4 <xPortStartScheduler+0xe0>)
 800aaf6:	4a38      	ldr	r2, [pc, #224]	; (800abd8 <xPortStartScheduler+0xe4>)
{
 800aaf8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aafa:	6819      	ldr	r1, [r3, #0]
 800aafc:	4291      	cmp	r1, r2
 800aafe:	d108      	bne.n	800ab12 <xPortStartScheduler+0x1e>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	e7fe      	b.n	800ab10 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b31      	ldr	r3, [pc, #196]	; (800abdc <xPortStartScheduler+0xe8>)
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d108      	bne.n	800ab2c <xPortStartScheduler+0x38>
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	e7fe      	b.n	800ab2a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab2c:	4b2c      	ldr	r3, [pc, #176]	; (800abe0 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab2e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab36:	22ff      	movs	r2, #255	; 0xff
 800ab38:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab3a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab3c:	4a29      	ldr	r2, [pc, #164]	; (800abe4 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ab48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab4c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab4e:	2307      	movs	r3, #7
 800ab50:	4a25      	ldr	r2, [pc, #148]	; (800abe8 <xPortStartScheduler+0xf4>)
 800ab52:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab54:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ab58:	1e5c      	subs	r4, r3, #1
 800ab5a:	0600      	lsls	r0, r0, #24
 800ab5c:	d40c      	bmi.n	800ab78 <xPortStartScheduler+0x84>
 800ab5e:	b111      	cbz	r1, 800ab66 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	d011      	beq.n	800ab8a <xPortStartScheduler+0x96>
 800ab66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	e7fe      	b.n	800ab76 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f88d 3003 	strb.w	r3, [sp, #3]
 800ab86:	4623      	mov	r3, r4
 800ab88:	e7e4      	b.n	800ab54 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab8a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800ab8e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab90:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab92:	9b01      	ldr	r3, [sp, #4]
 800ab94:	4a12      	ldr	r2, [pc, #72]	; (800abe0 <xPortStartScheduler+0xec>)
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab9a:	4b14      	ldr	r3, [pc, #80]	; (800abec <xPortStartScheduler+0xf8>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800aba2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800abaa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800abac:	f7ff ff88 	bl	800aac0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800abb0:	4b0f      	ldr	r3, [pc, #60]	; (800abf0 <xPortStartScheduler+0xfc>)
 800abb2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800abb4:	f7ff feb4 	bl	800a920 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abb8:	4a0e      	ldr	r2, [pc, #56]	; (800abf4 <xPortStartScheduler+0x100>)
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abc0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800abc2:	f7ff fe99 	bl	800a8f8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800abc6:	f001 f8b9 	bl	800bd3c <vTaskSwitchContext>
	prvTaskExitError();
 800abca:	f7ff feb3 	bl	800a934 <prvTaskExitError>
}
 800abce:	4620      	mov	r0, r4
 800abd0:	b002      	add	sp, #8
 800abd2:	bd10      	pop	{r4, pc}
 800abd4:	e000ed00 	.word	0xe000ed00
 800abd8:	410fc271 	.word	0x410fc271
 800abdc:	410fc270 	.word	0x410fc270
 800abe0:	e000e400 	.word	0xe000e400
 800abe4:	2400662c 	.word	0x2400662c
 800abe8:	24006630 	.word	0x24006630
 800abec:	e000ed20 	.word	0xe000ed20
 800abf0:	2400007c 	.word	0x2400007c
 800abf4:	e000ef34 	.word	0xe000ef34

0800abf8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abf8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abfc:	2b0f      	cmp	r3, #15
 800abfe:	d90e      	bls.n	800ac1e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac00:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <vPortValidateInterruptPriority+0x4c>)
 800ac02:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac04:	4a10      	ldr	r2, [pc, #64]	; (800ac48 <vPortValidateInterruptPriority+0x50>)
 800ac06:	7812      	ldrb	r2, [r2, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d908      	bls.n	800ac1e <vPortValidateInterruptPriority+0x26>
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	e7fe      	b.n	800ac1c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac1e:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <vPortValidateInterruptPriority+0x54>)
 800ac20:	4a0b      	ldr	r2, [pc, #44]	; (800ac50 <vPortValidateInterruptPriority+0x58>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d908      	bls.n	800ac40 <vPortValidateInterruptPriority+0x48>
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	e7fe      	b.n	800ac3e <vPortValidateInterruptPriority+0x46>
	}
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	e000e3f0 	.word	0xe000e3f0
 800ac48:	2400662c 	.word	0x2400662c
 800ac4c:	e000ed0c 	.word	0xe000ed0c
 800ac50:	24006630 	.word	0x24006630

0800ac54 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac54:	b510      	push	{r4, lr}
 800ac56:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac58:	f7ff feb4 	bl	800a9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ac5e:	f7ff fed3 	bl	800aa08 <vPortExitCritical>

	return xReturn;
}
 800ac62:	fab4 f084 	clz	r0, r4
 800ac66:	0940      	lsrs	r0, r0, #5
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <prvCopyDataToQueue>:
{
 800ac6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800ac70:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac72:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac74:	b952      	cbnz	r2, 800ac8c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac76:	6807      	ldr	r7, [r0, #0]
 800ac78:	bb47      	cbnz	r7, 800accc <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac7a:	6880      	ldr	r0, [r0, #8]
 800ac7c:	f001 f9c0 	bl	800c000 <xTaskPriorityDisinherit>
 800ac80:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac82:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac84:	3601      	adds	r6, #1
}
 800ac86:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac88:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ac8c:	b965      	cbnz	r5, 800aca8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac8e:	6840      	ldr	r0, [r0, #4]
 800ac90:	f011 fbd2 	bl	801c438 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac98:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac9a:	68a2      	ldr	r2, [r4, #8]
 800ac9c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac9e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aca0:	d3f0      	bcc.n	800ac84 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	e7ed      	b.n	800ac84 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aca8:	68c0      	ldr	r0, [r0, #12]
 800acaa:	f011 fbc5 	bl	801c438 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800acb0:	68e3      	ldr	r3, [r4, #12]
 800acb2:	4251      	negs	r1, r2
 800acb4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acb6:	6822      	ldr	r2, [r4, #0]
 800acb8:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acba:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acbc:	bf3e      	ittt	cc
 800acbe:	68a3      	ldrcc	r3, [r4, #8]
 800acc0:	185b      	addcc	r3, r3, r1
 800acc2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800acc4:	2d02      	cmp	r5, #2
 800acc6:	d101      	bne.n	800accc <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acc8:	b116      	cbz	r6, 800acd0 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800acca:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800accc:	2500      	movs	r5, #0
 800acce:	e7d9      	b.n	800ac84 <prvCopyDataToQueue+0x1a>
 800acd0:	4635      	mov	r5, r6
 800acd2:	e7d7      	b.n	800ac84 <prvCopyDataToQueue+0x1a>

0800acd4 <prvCopyDataFromQueue>:
{
 800acd4:	4603      	mov	r3, r0
 800acd6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800acda:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acdc:	b162      	cbz	r2, 800acf8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acde:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ace0:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace2:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ace4:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace6:	60dc      	str	r4, [r3, #12]
}
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acec:	bf24      	itt	cs
 800acee:	6819      	ldrcs	r1, [r3, #0]
 800acf0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acf2:	68d9      	ldr	r1, [r3, #12]
 800acf4:	f011 bba0 	b.w	801c438 <memcpy>
}
 800acf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <prvUnlockQueue>:
{
 800acfe:	b570      	push	{r4, r5, r6, lr}
 800ad00:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ad02:	f7ff fe5f 	bl	800a9c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ad06:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ad0e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	dc14      	bgt.n	800ad3e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800ad14:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad16:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ad1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ad1e:	f7ff fe73 	bl	800aa08 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ad22:	f7ff fe4f 	bl	800a9c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ad26:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ad2a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad2c:	2d00      	cmp	r5, #0
 800ad2e:	dc12      	bgt.n	800ad56 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800ad30:	23ff      	movs	r3, #255	; 0xff
 800ad32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ad36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ad3a:	f7ff be65 	b.w	800aa08 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0e7      	beq.n	800ad14 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad44:	4630      	mov	r0, r6
 800ad46:	f001 f877 	bl	800be38 <xTaskRemoveFromEventList>
 800ad4a:	b108      	cbz	r0, 800ad50 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ad4c:	f001 f900 	bl	800bf50 <vTaskMissedYield>
			--cTxLock;
 800ad50:	3d01      	subs	r5, #1
 800ad52:	b26d      	sxtb	r5, r5
 800ad54:	e7dc      	b.n	800ad10 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0e9      	beq.n	800ad30 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f001 f86b 	bl	800be38 <xTaskRemoveFromEventList>
 800ad62:	b108      	cbz	r0, 800ad68 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ad64:	f001 f8f4 	bl	800bf50 <vTaskMissedYield>
				--cRxLock;
 800ad68:	3d01      	subs	r5, #1
 800ad6a:	b26d      	sxtb	r5, r5
 800ad6c:	e7de      	b.n	800ad2c <prvUnlockQueue+0x2e>
	...

0800ad70 <xQueueGenericReset>:
{
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ad74:	4604      	mov	r4, r0
 800ad76:	b940      	cbnz	r0, 800ad8a <xQueueGenericReset+0x1a>
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	e7fe      	b.n	800ad88 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ad8a:	f7ff fe1b 	bl	800a9c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad94:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad96:	434b      	muls	r3, r1
 800ad98:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad9a:	1a5b      	subs	r3, r3, r1
 800ad9c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad9e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ada0:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ada2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ada4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ada6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ada8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800adb0:	b995      	cbnz	r5, 800add8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	b163      	cbz	r3, 800add0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb6:	f104 0010 	add.w	r0, r4, #16
 800adba:	f001 f83d 	bl	800be38 <xTaskRemoveFromEventList>
 800adbe:	b138      	cbz	r0, 800add0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <xQueueGenericReset+0x7c>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800add0:	f7ff fe1a 	bl	800aa08 <vPortExitCritical>
}
 800add4:	2001      	movs	r0, #1
 800add6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800add8:	f104 0010 	add.w	r0, r4, #16
 800addc:	f7ff fd4a 	bl	800a874 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ade0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ade4:	f7ff fd46 	bl	800a874 <vListInitialise>
 800ade8:	e7f2      	b.n	800add0 <xQueueGenericReset+0x60>
 800adea:	bf00      	nop
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <xQueueGenericCreateStatic>:
	{
 800adf0:	b513      	push	{r0, r1, r4, lr}
 800adf2:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adf4:	b940      	cbnz	r0, 800ae08 <xQueueGenericCreateStatic+0x18>
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	e7fe      	b.n	800ae06 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800ae08:	b943      	cbnz	r3, 800ae1c <xQueueGenericCreateStatic+0x2c>
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	e7fe      	b.n	800ae1a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae1c:	b14a      	cbz	r2, 800ae32 <xQueueGenericCreateStatic+0x42>
 800ae1e:	b991      	cbnz	r1, 800ae46 <xQueueGenericCreateStatic+0x56>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	e7fe      	b.n	800ae30 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae32:	b141      	cbz	r1, 800ae46 <xQueueGenericCreateStatic+0x56>
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	e7fe      	b.n	800ae44 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae46:	2350      	movs	r3, #80	; 0x50
 800ae48:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	2b50      	cmp	r3, #80	; 0x50
 800ae4e:	d008      	beq.n	800ae62 <xQueueGenericCreateStatic+0x72>
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae62:	2900      	cmp	r1, #0
 800ae64:	bf08      	it	eq
 800ae66:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae68:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800ae72:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae76:	4619      	mov	r1, r3
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f7ff ff79 	bl	800ad70 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ae7e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800ae82:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ae84:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800ae88:	b002      	add	sp, #8
 800ae8a:	bd10      	pop	{r4, pc}

0800ae8c <xQueueGenericCreate>:
	{
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae92:	4606      	mov	r6, r0
 800ae94:	b940      	cbnz	r0, 800aea8 <xQueueGenericCreate+0x1c>
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	e7fe      	b.n	800aea6 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aeaa:	3050      	adds	r0, #80	; 0x50
 800aeac:	f7ff fc12 	bl	800a6d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	b170      	cbz	r0, 800aed2 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800aeba:	b165      	cbz	r5, 800aed6 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aebc:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aec0:	2101      	movs	r1, #1
 800aec2:	4620      	mov	r0, r4
 800aec4:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800aec6:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aeca:	f7ff ff51 	bl	800ad70 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800aece:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800aed2:	4620      	mov	r0, r4
 800aed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed6:	4603      	mov	r3, r0
 800aed8:	e7f2      	b.n	800aec0 <xQueueGenericCreate+0x34>

0800aeda <xQueueCreateCountingSemaphoreStatic>:
	{
 800aeda:	b513      	push	{r0, r1, r4, lr}
 800aedc:	4613      	mov	r3, r2
 800aede:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800aee0:	b940      	cbnz	r0, 800aef4 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	e7fe      	b.n	800aef2 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aef4:	4288      	cmp	r0, r1
 800aef6:	d208      	bcs.n	800af0a <xQueueCreateCountingSemaphoreStatic+0x30>
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	e7fe      	b.n	800af08 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af0a:	2202      	movs	r2, #2
 800af0c:	9200      	str	r2, [sp, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	4611      	mov	r1, r2
 800af12:	f7ff ff6d 	bl	800adf0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800af16:	b100      	cbz	r0, 800af1a <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af18:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800af1a:	b002      	add	sp, #8
 800af1c:	bd10      	pop	{r4, pc}

0800af1e <xQueueCreateCountingSemaphore>:
	{
 800af1e:	b510      	push	{r4, lr}
 800af20:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800af22:	b940      	cbnz	r0, 800af36 <xQueueCreateCountingSemaphore+0x18>
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	e7fe      	b.n	800af34 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800af36:	4288      	cmp	r0, r1
 800af38:	d208      	bcs.n	800af4c <xQueueCreateCountingSemaphore+0x2e>
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	e7fe      	b.n	800af4a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af4c:	2202      	movs	r2, #2
 800af4e:	2100      	movs	r1, #0
 800af50:	f7ff ff9c 	bl	800ae8c <xQueueGenericCreate>
		if( xHandle != NULL )
 800af54:	b100      	cbz	r0, 800af58 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af56:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800af58:	bd10      	pop	{r4, pc}
	...

0800af5c <xQueueGenericSend>:
{
 800af5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	4688      	mov	r8, r1
 800af62:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800af64:	4604      	mov	r4, r0
{
 800af66:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800af68:	b940      	cbnz	r0, 800af7c <xQueueGenericSend+0x20>
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	e7fe      	b.n	800af7a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af7c:	b951      	cbnz	r1, 800af94 <xQueueGenericSend+0x38>
 800af7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af80:	b143      	cbz	r3, 800af94 <xQueueGenericSend+0x38>
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	e7fe      	b.n	800af92 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af94:	2f02      	cmp	r7, #2
 800af96:	d10b      	bne.n	800afb0 <xQueueGenericSend+0x54>
 800af98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d008      	beq.n	800afb0 <xQueueGenericSend+0x54>
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	e7fe      	b.n	800afae <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afb0:	f000 ffd4 	bl	800bf5c <xTaskGetSchedulerState>
 800afb4:	4606      	mov	r6, r0
 800afb6:	b950      	cbnz	r0, 800afce <xQueueGenericSend+0x72>
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	b14b      	cbz	r3, 800afd0 <xQueueGenericSend+0x74>
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	e7fe      	b.n	800afcc <xQueueGenericSend+0x70>
 800afce:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800afd0:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800afd4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0bc <xQueueGenericSend+0x160>
 800afd8:	e037      	b.n	800b04a <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800afda:	9d01      	ldr	r5, [sp, #4]
 800afdc:	b91d      	cbnz	r5, 800afe6 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800afde:	f7ff fd13 	bl	800aa08 <vPortExitCritical>
			return errQUEUE_FULL;
 800afe2:	2000      	movs	r0, #0
 800afe4:	e050      	b.n	800b088 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800afe6:	b916      	cbnz	r6, 800afee <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afe8:	a802      	add	r0, sp, #8
 800afea:	f000 ff69 	bl	800bec0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800afee:	f7ff fd0b 	bl	800aa08 <vPortExitCritical>
		vTaskSuspendAll();
 800aff2:	f000 fd01 	bl	800b9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aff6:	f7ff fce5 	bl	800a9c4 <vPortEnterCritical>
 800affa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800affe:	2bff      	cmp	r3, #255	; 0xff
 800b000:	d101      	bne.n	800b006 <xQueueGenericSend+0xaa>
 800b002:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800b006:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b00a:	2bff      	cmp	r3, #255	; 0xff
 800b00c:	d101      	bne.n	800b012 <xQueueGenericSend+0xb6>
 800b00e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800b012:	f7ff fcf9 	bl	800aa08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b016:	a901      	add	r1, sp, #4
 800b018:	a802      	add	r0, sp, #8
 800b01a:	f000 ff5d 	bl	800bed8 <xTaskCheckForTimeOut>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d146      	bne.n	800b0b0 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b022:	f7ff fccf 	bl	800a9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b026:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d12f      	bne.n	800b08e <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b02e:	f7ff fceb 	bl	800aa08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b032:	9901      	ldr	r1, [sp, #4]
 800b034:	f104 0010 	add.w	r0, r4, #16
 800b038:	f000 fec6 	bl	800bdc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b03c:	4620      	mov	r0, r4
 800b03e:	f7ff fe5e 	bl	800acfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b042:	f000 fd7d 	bl	800bb40 <xTaskResumeAll>
 800b046:	b350      	cbz	r0, 800b09e <xQueueGenericSend+0x142>
 800b048:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b04a:	f7ff fcbb 	bl	800a9c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b04e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b052:	429a      	cmp	r2, r3
 800b054:	d301      	bcc.n	800b05a <xQueueGenericSend+0xfe>
 800b056:	2f02      	cmp	r7, #2
 800b058:	d1bf      	bne.n	800afda <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b05a:	463a      	mov	r2, r7
 800b05c:	4641      	mov	r1, r8
 800b05e:	4620      	mov	r0, r4
 800b060:	f7ff fe03 	bl	800ac6a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b066:	b11b      	cbz	r3, 800b070 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b068:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b06c:	f000 fee4 	bl	800be38 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800b070:	b138      	cbz	r0, 800b082 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800b072:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <xQueueGenericSend+0x160>)
 800b074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b082:	f7ff fcc1 	bl	800aa08 <vPortExitCritical>
				return pdPASS;
 800b086:	2001      	movs	r0, #1
}
 800b088:	b004      	add	sp, #16
 800b08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800b08e:	f7ff fcbb 	bl	800aa08 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b092:	4620      	mov	r0, r4
 800b094:	f7ff fe33 	bl	800acfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b098:	f000 fd52 	bl	800bb40 <xTaskResumeAll>
 800b09c:	e7d4      	b.n	800b048 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800b09e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0a2:	f8ca 3000 	str.w	r3, [sl]
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	e7cb      	b.n	800b048 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7ff fe24 	bl	800acfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0b6:	f000 fd43 	bl	800bb40 <xTaskResumeAll>
 800b0ba:	e792      	b.n	800afe2 <xQueueGenericSend+0x86>
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <xQueueGenericSendFromISR>:
{
 800b0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	4690      	mov	r8, r2
 800b0c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	b940      	cbnz	r0, 800b0e0 <xQueueGenericSendFromISR+0x20>
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	e7fe      	b.n	800b0de <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e0:	b951      	cbnz	r1, 800b0f8 <xQueueGenericSendFromISR+0x38>
 800b0e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b0e4:	b143      	cbz	r3, 800b0f8 <xQueueGenericSendFromISR+0x38>
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	e7fe      	b.n	800b0f6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0f8:	2f02      	cmp	r7, #2
 800b0fa:	d10b      	bne.n	800b114 <xQueueGenericSendFromISR+0x54>
 800b0fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d008      	beq.n	800b114 <xQueueGenericSendFromISR+0x54>
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	e7fe      	b.n	800b112 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b114:	f7ff fd70 	bl	800abf8 <vPortValidateInterruptPriority>
	__asm volatile
 800b118:	f3ef 8611 	mrs	r6, BASEPRI
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b12c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b12e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b130:	429a      	cmp	r2, r3
 800b132:	d301      	bcc.n	800b138 <xQueueGenericSendFromISR+0x78>
 800b134:	2f02      	cmp	r7, #2
 800b136:	d123      	bne.n	800b180 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b138:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b13c:	463a      	mov	r2, r7
 800b13e:	4649      	mov	r1, r9
 800b140:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b142:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b146:	f7ff fd90 	bl	800ac6a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b14a:	1c6b      	adds	r3, r5, #1
 800b14c:	d113      	bne.n	800b176 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b150:	b90b      	cbnz	r3, 800b156 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800b152:	2001      	movs	r0, #1
 800b154:	e00b      	b.n	800b16e <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b156:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b15a:	f000 fe6d 	bl	800be38 <xTaskRemoveFromEventList>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d0f7      	beq.n	800b152 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800b162:	f1b8 0f00 	cmp.w	r8, #0
 800b166:	d0f4      	beq.n	800b152 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b168:	2001      	movs	r0, #1
 800b16a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b16e:	f386 8811 	msr	BASEPRI, r6
}
 800b172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b176:	3501      	adds	r5, #1
 800b178:	b26d      	sxtb	r5, r5
 800b17a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b17e:	e7e8      	b.n	800b152 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800b180:	2000      	movs	r0, #0
 800b182:	e7f4      	b.n	800b16e <xQueueGenericSendFromISR+0xae>

0800b184 <xQueueGiveFromISR>:
{
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b188:	4604      	mov	r4, r0
 800b18a:	b940      	cbnz	r0, 800b19e <xQueueGiveFromISR+0x1a>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	e7fe      	b.n	800b19c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b19e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b1a0:	b143      	cbz	r3, 800b1b4 <xQueueGiveFromISR+0x30>
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	e7fe      	b.n	800b1b2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b1b4:	6803      	ldr	r3, [r0, #0]
 800b1b6:	b953      	cbnz	r3, 800b1ce <xQueueGiveFromISR+0x4a>
 800b1b8:	6883      	ldr	r3, [r0, #8]
 800b1ba:	b143      	cbz	r3, 800b1ce <xQueueGiveFromISR+0x4a>
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	e7fe      	b.n	800b1cc <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1ce:	f7ff fd13 	bl	800abf8 <vPortValidateInterruptPriority>
	__asm volatile
 800b1d2:	f3ef 8611 	mrs	r6, BASEPRI
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b1e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d91c      	bls.n	800b228 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1f2:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b1f4:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1f6:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1f8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b1fa:	d110      	bne.n	800b21e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1fe:	b90b      	cbnz	r3, 800b204 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800b200:	2001      	movs	r0, #1
 800b202:	e009      	b.n	800b218 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b204:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b208:	f000 fe16 	bl	800be38 <xTaskRemoveFromEventList>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d0f7      	beq.n	800b200 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b210:	2d00      	cmp	r5, #0
 800b212:	d0f5      	beq.n	800b200 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b214:	2001      	movs	r0, #1
 800b216:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b218:	f386 8811 	msr	BASEPRI, r6
}
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b21e:	3301      	adds	r3, #1
 800b220:	b25b      	sxtb	r3, r3
 800b222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b226:	e7eb      	b.n	800b200 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b228:	2000      	movs	r0, #0
 800b22a:	e7f5      	b.n	800b218 <xQueueGiveFromISR+0x94>

0800b22c <xQueueReceive>:
{
 800b22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b230:	b085      	sub	sp, #20
 800b232:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b234:	4604      	mov	r4, r0
{
 800b236:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b238:	b940      	cbnz	r0, 800b24c <xQueueReceive+0x20>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	e7fe      	b.n	800b24a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b24c:	b951      	cbnz	r1, 800b264 <xQueueReceive+0x38>
 800b24e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b250:	b143      	cbz	r3, 800b264 <xQueueReceive+0x38>
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	e7fe      	b.n	800b262 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b264:	f000 fe7a 	bl	800bf5c <xTaskGetSchedulerState>
 800b268:	4606      	mov	r6, r0
 800b26a:	b950      	cbnz	r0, 800b282 <xQueueReceive+0x56>
 800b26c:	9b01      	ldr	r3, [sp, #4]
 800b26e:	b14b      	cbz	r3, 800b284 <xQueueReceive+0x58>
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	e7fe      	b.n	800b280 <xQueueReceive+0x54>
 800b282:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b284:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800b288:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800b368 <xQueueReceive+0x13c>
 800b28c:	e03b      	b.n	800b306 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b28e:	9d01      	ldr	r5, [sp, #4]
 800b290:	b91d      	cbnz	r5, 800b29a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800b292:	f7ff fbb9 	bl	800aa08 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b296:	2000      	movs	r0, #0
 800b298:	e052      	b.n	800b340 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800b29a:	b916      	cbnz	r6, 800b2a2 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b29c:	a802      	add	r0, sp, #8
 800b29e:	f000 fe0f 	bl	800bec0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b2a2:	f7ff fbb1 	bl	800aa08 <vPortExitCritical>
		vTaskSuspendAll();
 800b2a6:	f000 fba7 	bl	800b9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2aa:	f7ff fb8b 	bl	800a9c4 <vPortEnterCritical>
 800b2ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b2b2:	2bff      	cmp	r3, #255	; 0xff
 800b2b4:	d101      	bne.n	800b2ba <xQueueReceive+0x8e>
 800b2b6:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b2ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b2be:	2bff      	cmp	r3, #255	; 0xff
 800b2c0:	d101      	bne.n	800b2c6 <xQueueReceive+0x9a>
 800b2c2:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b2c6:	f7ff fb9f 	bl	800aa08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2ca:	a901      	add	r1, sp, #4
 800b2cc:	a802      	add	r0, sp, #8
 800b2ce:	f000 fe03 	bl	800bed8 <xTaskCheckForTimeOut>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d13d      	bne.n	800b352 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff fcbc 	bl	800ac54 <prvIsQueueEmpty>
 800b2dc:	b398      	cbz	r0, 800b346 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2de:	9901      	ldr	r1, [sp, #4]
 800b2e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b2e4:	f000 fd70 	bl	800bdc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff fd08 	bl	800acfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2ee:	f000 fc27 	bl	800bb40 <xTaskResumeAll>
 800b2f2:	b938      	cbnz	r0, 800b304 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800b2f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2f8:	f8c9 3000 	str.w	r3, [r9]
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b306:	f7ff fb5d 	bl	800a9c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b30a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	d0be      	beq.n	800b28e <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b310:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b312:	4639      	mov	r1, r7
 800b314:	4620      	mov	r0, r4
 800b316:	f7ff fcdd 	bl	800acd4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b31a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	b163      	cbz	r3, 800b33a <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b320:	f104 0010 	add.w	r0, r4, #16
 800b324:	f000 fd88 	bl	800be38 <xTaskRemoveFromEventList>
 800b328:	b138      	cbz	r0, 800b33a <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <xQueueReceive+0x13c>)
 800b32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b33a:	f7ff fb65 	bl	800aa08 <vPortExitCritical>
				return pdPASS;
 800b33e:	2001      	movs	r0, #1
}
 800b340:	b005      	add	sp, #20
 800b342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800b346:	4620      	mov	r0, r4
 800b348:	f7ff fcd9 	bl	800acfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b34c:	f000 fbf8 	bl	800bb40 <xTaskResumeAll>
 800b350:	e7d8      	b.n	800b304 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800b352:	4620      	mov	r0, r4
 800b354:	f7ff fcd3 	bl	800acfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b358:	f000 fbf2 	bl	800bb40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b35c:	4620      	mov	r0, r4
 800b35e:	f7ff fc79 	bl	800ac54 <prvIsQueueEmpty>
 800b362:	2800      	cmp	r0, #0
 800b364:	d0ce      	beq.n	800b304 <xQueueReceive+0xd8>
 800b366:	e796      	b.n	800b296 <xQueueReceive+0x6a>
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <xQueueSemaphoreTake>:
{
 800b36c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800b370:	4604      	mov	r4, r0
{
 800b372:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b374:	b940      	cbnz	r0, 800b388 <xQueueSemaphoreTake+0x1c>
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	e7fe      	b.n	800b386 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b388:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b38a:	b145      	cbz	r5, 800b39e <xQueueSemaphoreTake+0x32>
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	e7fe      	b.n	800b39c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b39e:	f000 fddd 	bl	800bf5c <xTaskGetSchedulerState>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	b950      	cbnz	r0, 800b3bc <xQueueSemaphoreTake+0x50>
 800b3a6:	9b01      	ldr	r3, [sp, #4]
 800b3a8:	b16b      	cbz	r3, 800b3c6 <xQueueSemaphoreTake+0x5a>
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	e7fe      	b.n	800b3ba <xQueueSemaphoreTake+0x4e>
 800b3bc:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b3be:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800b3c0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800b4f0 <xQueueSemaphoreTake+0x184>
 800b3c4:	e051      	b.n	800b46a <xQueueSemaphoreTake+0xfe>
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	e7f9      	b.n	800b3be <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	b963      	cbnz	r3, 800b3e8 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3ce:	b145      	cbz	r5, 800b3e2 <xQueueSemaphoreTake+0x76>
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800b3e2:	f7ff fb11 	bl	800aa08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b3e6:	e05e      	b.n	800b4a6 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800b3e8:	b916      	cbnz	r6, 800b3f0 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ea:	a802      	add	r0, sp, #8
 800b3ec:	f000 fd68 	bl	800bec0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b3f0:	f7ff fb0a 	bl	800aa08 <vPortExitCritical>
		vTaskSuspendAll();
 800b3f4:	f000 fb00 	bl	800b9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3f8:	f7ff fae4 	bl	800a9c4 <vPortEnterCritical>
 800b3fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b400:	2bff      	cmp	r3, #255	; 0xff
 800b402:	d101      	bne.n	800b408 <xQueueSemaphoreTake+0x9c>
 800b404:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b408:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b40c:	2bff      	cmp	r3, #255	; 0xff
 800b40e:	d101      	bne.n	800b414 <xQueueSemaphoreTake+0xa8>
 800b410:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b414:	f7ff faf8 	bl	800aa08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b418:	a901      	add	r1, sp, #4
 800b41a:	a802      	add	r0, sp, #8
 800b41c:	f000 fd5c 	bl	800bed8 <xTaskCheckForTimeOut>
 800b420:	2800      	cmp	r0, #0
 800b422:	d14a      	bne.n	800b4ba <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b424:	4620      	mov	r0, r4
 800b426:	f7ff fc15 	bl	800ac54 <prvIsQueueEmpty>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d03f      	beq.n	800b4ae <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	b93b      	cbnz	r3, 800b442 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800b432:	f7ff fac7 	bl	800a9c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b436:	68a0      	ldr	r0, [r4, #8]
 800b438:	f000 fda0 	bl	800bf7c <xTaskPriorityInherit>
 800b43c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b43e:	f7ff fae3 	bl	800aa08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b442:	9901      	ldr	r1, [sp, #4]
 800b444:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b448:	f000 fcbe 	bl	800bdc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff fc56 	bl	800acfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b452:	f000 fb75 	bl	800bb40 <xTaskResumeAll>
 800b456:	b938      	cbnz	r0, 800b468 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800b458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b45c:	f8c8 3000 	str.w	r3, [r8]
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b46a:	f7ff faab 	bl	800a9c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b46e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0aa      	beq.n	800b3ca <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b474:	3b01      	subs	r3, #1
 800b476:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	b913      	cbnz	r3, 800b482 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b47c:	f000 fe56 	bl	800c12c <pvTaskIncrementMutexHeldCount>
 800b480:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	b163      	cbz	r3, 800b4a0 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b486:	f104 0010 	add.w	r0, r4, #16
 800b48a:	f000 fcd5 	bl	800be38 <xTaskRemoveFromEventList>
 800b48e:	b138      	cbz	r0, 800b4a0 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800b490:	4b17      	ldr	r3, [pc, #92]	; (800b4f0 <xQueueSemaphoreTake+0x184>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b4a0:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b4a2:	f7ff fab1 	bl	800aa08 <vPortExitCritical>
}
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	b004      	add	sp, #16
 800b4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff fc25 	bl	800acfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4b4:	f000 fb44 	bl	800bb40 <xTaskResumeAll>
 800b4b8:	e7d6      	b.n	800b468 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7ff fc1f 	bl	800acfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4c0:	f000 fb3e 	bl	800bb40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7ff fbc5 	bl	800ac54 <prvIsQueueEmpty>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0cc      	beq.n	800b468 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	d0e9      	beq.n	800b4a6 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800b4d2:	f7ff fa77 	bl	800a9c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b4d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4d8:	b119      	cbz	r1, 800b4e2 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b4da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4e2:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b4e4:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4e6:	f000 fdcf 	bl	800c088 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b4ea:	f7ff fa8d 	bl	800aa08 <vPortExitCritical>
 800b4ee:	e7da      	b.n	800b4a6 <xQueueSemaphoreTake+0x13a>
 800b4f0:	e000ed04 	.word	0xe000ed04

0800b4f4 <xQueueReceiveFromISR>:
{
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	b940      	cbnz	r0, 800b512 <xQueueReceiveFromISR+0x1e>
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	e7fe      	b.n	800b510 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b512:	b951      	cbnz	r1, 800b52a <xQueueReceiveFromISR+0x36>
 800b514:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b516:	b143      	cbz	r3, 800b52a <xQueueReceiveFromISR+0x36>
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	e7fe      	b.n	800b528 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b52a:	f7ff fb65 	bl	800abf8 <vPortValidateInterruptPriority>
	__asm volatile
 800b52e:	f3ef 8711 	mrs	r7, BASEPRI
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b542:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b544:	b31c      	cbz	r4, 800b58e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b546:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b54a:	4649      	mov	r1, r9
 800b54c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b54e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b550:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b552:	f7ff fbbf 	bl	800acd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b556:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b558:	1c73      	adds	r3, r6, #1
 800b55a:	d113      	bne.n	800b584 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b55c:	692b      	ldr	r3, [r5, #16]
 800b55e:	b90b      	cbnz	r3, 800b564 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800b560:	2001      	movs	r0, #1
 800b562:	e00b      	b.n	800b57c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b564:	f105 0010 	add.w	r0, r5, #16
 800b568:	f000 fc66 	bl	800be38 <xTaskRemoveFromEventList>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0f7      	beq.n	800b560 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800b570:	f1b8 0f00 	cmp.w	r8, #0
 800b574:	d0f4      	beq.n	800b560 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b576:	2001      	movs	r0, #1
 800b578:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b57c:	f387 8811 	msr	BASEPRI, r7
}
 800b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b584:	3601      	adds	r6, #1
 800b586:	b276      	sxtb	r6, r6
 800b588:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b58c:	e7e8      	b.n	800b560 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800b58e:	4620      	mov	r0, r4
 800b590:	e7f4      	b.n	800b57c <xQueueReceiveFromISR+0x88>
	...

0800b594 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b594:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b596:	4a07      	ldr	r2, [pc, #28]	; (800b5b4 <vQueueAddToRegistry+0x20>)
	{
 800b598:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b59a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800b59e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800b5a2:	b91d      	cbnz	r5, 800b5ac <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5a8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5aa:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	2b08      	cmp	r3, #8
 800b5b0:	d1f3      	bne.n	800b59a <vQueueAddToRegistry+0x6>
 800b5b2:	e7fa      	b.n	800b5aa <vQueueAddToRegistry+0x16>
 800b5b4:	24007300 	.word	0x24007300

0800b5b8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5b8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b5ba:	4909      	ldr	r1, [pc, #36]	; (800b5e0 <vQueueUnregisterQueue+0x28>)
	{
 800b5bc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b5be:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800b5c2:	00dc      	lsls	r4, r3, #3
 800b5c4:	4282      	cmp	r2, r0
 800b5c6:	d106      	bne.n	800b5d6 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b5c8:	4a06      	ldr	r2, [pc, #24]	; (800b5e4 <vQueueUnregisterQueue+0x2c>)
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b5d0:	4422      	add	r2, r4
 800b5d2:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b5d4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d1f0      	bne.n	800b5be <vQueueUnregisterQueue+0x6>
 800b5dc:	e7fa      	b.n	800b5d4 <vQueueUnregisterQueue+0x1c>
 800b5de:	bf00      	nop
 800b5e0:	24007304 	.word	0x24007304
 800b5e4:	24007300 	.word	0x24007300

0800b5e8 <vQueueDelete>:
{
 800b5e8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800b5ea:	b940      	cbnz	r0, 800b5fe <vQueueDelete+0x16>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	e7fe      	b.n	800b5fc <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800b5fe:	f7ff ffdb 	bl	800b5b8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b602:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800b606:	b91b      	cbnz	r3, 800b610 <vQueueDelete+0x28>
}
 800b608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800b60c:	f7ff b8f4 	b.w	800a7f8 <vPortFree>
}
 800b610:	bd10      	pop	{r4, pc}

0800b612 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b612:	b570      	push	{r4, r5, r6, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b61a:	f7ff f9d3 	bl	800a9c4 <vPortEnterCritical>
 800b61e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b622:	2bff      	cmp	r3, #255	; 0xff
 800b624:	d102      	bne.n	800b62c <vQueueWaitForMessageRestricted+0x1a>
 800b626:	2300      	movs	r3, #0
 800b628:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b62c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b630:	2bff      	cmp	r3, #255	; 0xff
 800b632:	d102      	bne.n	800b63a <vQueueWaitForMessageRestricted+0x28>
 800b634:	2300      	movs	r3, #0
 800b636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b63a:	f7ff f9e5 	bl	800aa08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b63e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b640:	b92b      	cbnz	r3, 800b64e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b642:	4632      	mov	r2, r6
 800b644:	4629      	mov	r1, r5
 800b646:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b64a:	f000 fbd7 	bl	800bdfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b64e:	4620      	mov	r0, r4
	}
 800b650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800b654:	f7ff bb53 	b.w	800acfe <prvUnlockQueue>

0800b658 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b65e:	f7ff f9b1 	bl	800a9c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b662:	4b2e      	ldr	r3, [pc, #184]	; (800b71c <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800b664:	4d2e      	ldr	r5, [pc, #184]	; (800b720 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	4f2e      	ldr	r7, [pc, #184]	; (800b724 <prvAddNewTaskToReadyList+0xcc>)
 800b66a:	3201      	adds	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b66e:	682e      	ldr	r6, [r5, #0]
 800b670:	2e00      	cmp	r6, #0
 800b672:	d148      	bne.n	800b706 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b674:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d11f      	bne.n	800b6bc <prvAddNewTaskToReadyList+0x64>
 800b67c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b67e:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b680:	4640      	mov	r0, r8
 800b682:	f7ff f8f7 	bl	800a874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b686:	f108 0814 	add.w	r8, r8, #20
 800b68a:	2e38      	cmp	r6, #56	; 0x38
 800b68c:	d1f7      	bne.n	800b67e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b68e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b750 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800b692:	4e25      	ldr	r6, [pc, #148]	; (800b728 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800b694:	4640      	mov	r0, r8
 800b696:	f7ff f8ed 	bl	800a874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7ff f8ea 	bl	800a874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6a0:	4822      	ldr	r0, [pc, #136]	; (800b72c <prvAddNewTaskToReadyList+0xd4>)
 800b6a2:	f7ff f8e7 	bl	800a874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6a6:	4822      	ldr	r0, [pc, #136]	; (800b730 <prvAddNewTaskToReadyList+0xd8>)
 800b6a8:	f7ff f8e4 	bl	800a874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6ac:	4821      	ldr	r0, [pc, #132]	; (800b734 <prvAddNewTaskToReadyList+0xdc>)
 800b6ae:	f7ff f8e1 	bl	800a874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <prvAddNewTaskToReadyList+0xe0>)
 800b6b4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6b8:	4b20      	ldr	r3, [pc, #128]	; (800b73c <prvAddNewTaskToReadyList+0xe4>)
 800b6ba:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800b6bc:	4a20      	ldr	r2, [pc, #128]	; (800b740 <prvAddNewTaskToReadyList+0xe8>)
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800b6c4:	4a1f      	ldr	r2, [pc, #124]	; (800b744 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6c6:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b6c8:	6811      	ldr	r1, [r2, #0]
 800b6ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6cc:	428b      	cmp	r3, r1
 800b6ce:	d900      	bls.n	800b6d2 <prvAddNewTaskToReadyList+0x7a>
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	2014      	movs	r0, #20
 800b6d4:	1d21      	adds	r1, r4, #4
 800b6d6:	fb00 7003 	mla	r0, r0, r3, r7
 800b6da:	f7ff f8d9 	bl	800a890 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b6de:	f7ff f993 	bl	800aa08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b6e2:	4b19      	ldr	r3, [pc, #100]	; (800b748 <prvAddNewTaskToReadyList+0xf0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	b163      	cbz	r3, 800b702 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d207      	bcs.n	800b702 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <prvAddNewTaskToReadyList+0xf4>)
 800b6f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	f3bf 8f6f 	isb	sy
}
 800b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800b706:	4b10      	ldr	r3, [pc, #64]	; (800b748 <prvAddNewTaskToReadyList+0xf0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1d6      	bne.n	800b6bc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b70e:	682b      	ldr	r3, [r5, #0]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b714:	429a      	cmp	r2, r3
 800b716:	d8d1      	bhi.n	800b6bc <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800b718:	602c      	str	r4, [r5, #0]
 800b71a:	e7cf      	b.n	800b6bc <prvAddNewTaskToReadyList+0x64>
 800b71c:	24006aa0 	.word	0x24006aa0
 800b720:	24006634 	.word	0x24006634
 800b724:	24006640 	.word	0x24006640
 800b728:	24006ac8 	.word	0x24006ac8
 800b72c:	24006ae8 	.word	0x24006ae8
 800b730:	24006b14 	.word	0x24006b14
 800b734:	24006b00 	.word	0x24006b00
 800b738:	24006638 	.word	0x24006638
 800b73c:	2400663c 	.word	0x2400663c
 800b740:	24006aac 	.word	0x24006aac
 800b744:	24006ab0 	.word	0x24006ab0
 800b748:	24006afc 	.word	0x24006afc
 800b74c:	e000ed04 	.word	0xe000ed04
 800b750:	24006ab4 	.word	0x24006ab4

0800b754 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b754:	4a06      	ldr	r2, [pc, #24]	; (800b770 <prvResetNextTaskUnblockTime+0x1c>)
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	4b06      	ldr	r3, [pc, #24]	; (800b774 <prvResetNextTaskUnblockTime+0x20>)
 800b75c:	b919      	cbnz	r1, 800b766 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b762:	601a      	str	r2, [r3, #0]
	}
}
 800b764:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b766:	6812      	ldr	r2, [r2, #0]
 800b768:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b76a:	68d2      	ldr	r2, [r2, #12]
 800b76c:	6852      	ldr	r2, [r2, #4]
 800b76e:	e7f8      	b.n	800b762 <prvResetNextTaskUnblockTime+0xe>
 800b770:	24006638 	.word	0x24006638
 800b774:	24006adc 	.word	0x24006adc

0800b778 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b77c:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b780:	4606      	mov	r6, r0
 800b782:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b784:	21a5      	movs	r1, #165	; 0xa5
 800b786:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b788:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b78a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b78e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b792:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b794:	f010 fe5e 	bl	801c454 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b798:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b79a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b79c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	d037      	beq.n	800b814 <prvInitialiseNewTask.isra.0+0x9c>
 800b7a4:	1e6b      	subs	r3, r5, #1
 800b7a6:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800b7aa:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7ac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b7b0:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800b7b4:	7819      	ldrb	r1, [r3, #0]
 800b7b6:	b109      	cbz	r1, 800b7bc <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7b8:	42ab      	cmp	r3, r5
 800b7ba:	d1f7      	bne.n	800b7ac <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7c2:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800b7c4:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7c8:	1d20      	adds	r0, r4, #4
 800b7ca:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b7cc:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800b7d0:	bf28      	it	cs
 800b7d2:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b7d4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b7d6:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d8:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7dc:	f7ff f855 	bl	800a88a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7e0:	f104 0018 	add.w	r0, r4, #24
 800b7e4:	f7ff f851 	bl	800a88a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800b7e8:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7ec:	463a      	mov	r2, r7
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7f2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7f6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800b7f8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7fc:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b800:	f7ff f8b8 	bl	800a974 <pxPortInitialiseStack>
 800b804:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	d001      	beq.n	800b810 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b80c:	f8c8 4000 	str.w	r4, [r8]
}
 800b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b814:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800b818:	e7d3      	b.n	800b7c2 <prvInitialiseNewTask.isra.0+0x4a>

0800b81a <prvDeleteTCB>:
	{
 800b81a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b81c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800b820:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b822:	b93b      	cbnz	r3, 800b834 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800b824:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b826:	f7fe ffe7 	bl	800a7f8 <vPortFree>
				vPortFree( pxTCB );
 800b82a:	4620      	mov	r0, r4
	}
 800b82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800b830:	f7fe bfe2 	b.w	800a7f8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b834:	2b01      	cmp	r3, #1
 800b836:	d0f9      	beq.n	800b82c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d008      	beq.n	800b84e <prvDeleteTCB+0x34>
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	e7fe      	b.n	800b84c <prvDeleteTCB+0x32>
	}
 800b84e:	bd10      	pop	{r4, pc}

0800b850 <prvIdleTask>:
{
 800b850:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b852:	4e14      	ldr	r6, [pc, #80]	; (800b8a4 <prvIdleTask+0x54>)
				taskYIELD();
 800b854:	4f14      	ldr	r7, [pc, #80]	; (800b8a8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b856:	4c15      	ldr	r4, [pc, #84]	; (800b8ac <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800b858:	4d15      	ldr	r5, [pc, #84]	; (800b8b0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	b96b      	cbnz	r3, 800b87a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b85e:	4b15      	ldr	r3, [pc, #84]	; (800b8b4 <prvIdleTask+0x64>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d906      	bls.n	800b874 <prvIdleTask+0x24>
				taskYIELD();
 800b866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800b874:	f7f4 ff58 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b878:	e7ed      	b.n	800b856 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800b87a:	f7ff f8a3 	bl	800a9c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b87e:	68f3      	ldr	r3, [r6, #12]
 800b880:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b884:	f108 0004 	add.w	r0, r8, #4
 800b888:	f7ff f825 	bl	800a8d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	3b01      	subs	r3, #1
 800b890:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	3b01      	subs	r3, #1
 800b896:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800b898:	f7ff f8b6 	bl	800aa08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b89c:	4640      	mov	r0, r8
 800b89e:	f7ff ffbc 	bl	800b81a <prvDeleteTCB>
 800b8a2:	e7da      	b.n	800b85a <prvIdleTask+0xa>
 800b8a4:	24006b14 	.word	0x24006b14
 800b8a8:	e000ed04 	.word	0xe000ed04
 800b8ac:	24006aa4 	.word	0x24006aa4
 800b8b0:	24006aa0 	.word	0x24006aa0
 800b8b4:	24006640 	.word	0x24006640

0800b8b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8ba:	4b16      	ldr	r3, [pc, #88]	; (800b914 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800b8bc:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8be:	4e16      	ldr	r6, [pc, #88]	; (800b918 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800b8c0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800b8c2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c4:	6830      	ldr	r0, [r6, #0]
 800b8c6:	3004      	adds	r0, #4
 800b8c8:	f7ff f805 	bl	800a8d6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8cc:	1c63      	adds	r3, r4, #1
 800b8ce:	4633      	mov	r3, r6
 800b8d0:	d107      	bne.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x2a>
 800b8d2:	b137      	cbz	r7, 800b8e2 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8d4:	6831      	ldr	r1, [r6, #0]
 800b8d6:	4811      	ldr	r0, [pc, #68]	; (800b91c <prvAddCurrentTaskToDelayedList+0x64>)
 800b8d8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8de:	f7fe bfd7 	b.w	800a890 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8e2:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800b8e8:	d307      	bcc.n	800b8fa <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ea:	4a0d      	ldr	r2, [pc, #52]	; (800b920 <prvAddCurrentTaskToDelayedList+0x68>)
 800b8ec:	6810      	ldr	r0, [r2, #0]
 800b8ee:	6819      	ldr	r1, [r3, #0]
}
 800b8f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8f4:	3104      	adds	r1, #4
 800b8f6:	f7fe bfd7 	b.w	800a8a8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8fa:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b8fc:	6810      	ldr	r0, [r2, #0]
 800b8fe:	6819      	ldr	r1, [r3, #0]
 800b900:	3104      	adds	r1, #4
 800b902:	f7fe ffd1 	bl	800a8a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b906:	4b08      	ldr	r3, [pc, #32]	; (800b928 <prvAddCurrentTaskToDelayedList+0x70>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	42a2      	cmp	r2, r4
 800b90c:	d900      	bls.n	800b910 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800b90e:	601c      	str	r4, [r3, #0]
}
 800b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b912:	bf00      	nop
 800b914:	24006b28 	.word	0x24006b28
 800b918:	24006634 	.word	0x24006634
 800b91c:	24006b00 	.word	0x24006b00
 800b920:	2400663c 	.word	0x2400663c
 800b924:	24006638 	.word	0x24006638
 800b928:	24006adc 	.word	0x24006adc

0800b92c <xTaskCreateStatic>:
	{
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800b934:	b945      	cbnz	r5, 800b948 <xTaskCreateStatic+0x1c>
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	e7fe      	b.n	800b946 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b948:	b944      	cbnz	r4, 800b95c <xTaskCreateStatic+0x30>
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	e7fe      	b.n	800b95a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b95c:	2660      	movs	r6, #96	; 0x60
 800b95e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b960:	9e05      	ldr	r6, [sp, #20]
 800b962:	2e60      	cmp	r6, #96	; 0x60
 800b964:	d008      	beq.n	800b978 <xTaskCreateStatic+0x4c>
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	e7fe      	b.n	800b976 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b978:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b97a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b97c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b97e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b982:	ad04      	add	r5, sp, #16
 800b984:	9402      	str	r4, [sp, #8]
 800b986:	9501      	str	r5, [sp, #4]
 800b988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b98a:	9500      	str	r5, [sp, #0]
 800b98c:	f7ff fef4 	bl	800b778 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b990:	4620      	mov	r0, r4
 800b992:	f7ff fe61 	bl	800b658 <prvAddNewTaskToReadyList>
	}
 800b996:	9804      	ldr	r0, [sp, #16]
 800b998:	b006      	add	sp, #24
 800b99a:	bd70      	pop	{r4, r5, r6, pc}

0800b99c <xTaskCreate>:
	{
 800b99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9a4:	0090      	lsls	r0, r2, #2
	{
 800b9a6:	4688      	mov	r8, r1
 800b9a8:	4616      	mov	r6, r2
 800b9aa:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9ac:	f7fe fe92 	bl	800a6d4 <pvPortMalloc>
			if( pxStack != NULL )
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	b1e8      	cbz	r0, 800b9f0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9b4:	2060      	movs	r0, #96	; 0x60
 800b9b6:	f7fe fe8d 	bl	800a6d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	b1a8      	cbz	r0, 800b9ea <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9be:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800b9c0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f7ff fece 	bl	800b778 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7ff fe3b 	bl	800b658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9e2:	2001      	movs	r0, #1
	}
 800b9e4:	b005      	add	sp, #20
 800b9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f7fe ff04 	bl	800a7f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b9f4:	e7f6      	b.n	800b9e4 <xTaskCreate+0x48>
	...

0800b9f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b9f8:	4a02      	ldr	r2, [pc, #8]	; (800ba04 <vTaskSuspendAll+0xc>)
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	6013      	str	r3, [r2, #0]
}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	24006aa8 	.word	0x24006aa8

0800ba08 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ba08:	4b01      	ldr	r3, [pc, #4]	; (800ba10 <xTaskGetTickCount+0x8>)
 800ba0a:	6818      	ldr	r0, [r3, #0]
}
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	24006b28 	.word	0x24006b28

0800ba14 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba14:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <xTaskIncrementTick+0x100>)
 800ba16:	681b      	ldr	r3, [r3, #0]
{
 800ba18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d172      	bne.n	800bb06 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba20:	4b3d      	ldr	r3, [pc, #244]	; (800bb18 <xTaskIncrementTick+0x104>)
 800ba22:	681d      	ldr	r5, [r3, #0]
 800ba24:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800ba26:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba28:	b9bd      	cbnz	r5, 800ba5a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800ba2a:	4b3c      	ldr	r3, [pc, #240]	; (800bb1c <xTaskIncrementTick+0x108>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	6812      	ldr	r2, [r2, #0]
 800ba30:	b142      	cbz	r2, 800ba44 <xTaskIncrementTick+0x30>
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	e7fe      	b.n	800ba42 <xTaskIncrementTick+0x2e>
 800ba44:	4a36      	ldr	r2, [pc, #216]	; (800bb20 <xTaskIncrementTick+0x10c>)
 800ba46:	6819      	ldr	r1, [r3, #0]
 800ba48:	6810      	ldr	r0, [r2, #0]
 800ba4a:	6018      	str	r0, [r3, #0]
 800ba4c:	6011      	str	r1, [r2, #0]
 800ba4e:	4a35      	ldr	r2, [pc, #212]	; (800bb24 <xTaskIncrementTick+0x110>)
 800ba50:	6813      	ldr	r3, [r2, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	f7ff fe7d 	bl	800b754 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba5a:	4e33      	ldr	r6, [pc, #204]	; (800bb28 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	4f33      	ldr	r7, [pc, #204]	; (800bb2c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba60:	6833      	ldr	r3, [r6, #0]
 800ba62:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800bb38 <xTaskIncrementTick+0x124>
 800ba66:	429d      	cmp	r5, r3
 800ba68:	d211      	bcs.n	800ba8e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	2314      	movs	r3, #20
 800ba72:	4353      	muls	r3, r2
 800ba74:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800ba76:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800ba78:	4b2d      	ldr	r3, [pc, #180]	; (800bb30 <xTaskIncrementTick+0x11c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800ba7c:	bf28      	it	cs
 800ba7e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bf18      	it	ne
 800ba84:	2401      	movne	r4, #1
}
 800ba86:	4620      	mov	r0, r4
 800ba88:	b003      	add	sp, #12
 800ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bb1c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800ba92:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800bb3c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba96:	f8d9 3000 	ldr.w	r3, [r9]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	b91b      	cbnz	r3, 800baa6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba9e:	f04f 33ff 	mov.w	r3, #4294967295
 800baa2:	6033      	str	r3, [r6, #0]
					break;
 800baa4:	e7e1      	b.n	800ba6a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa6:	f8d9 3000 	ldr.w	r3, [r9]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bab0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800bab4:	4295      	cmp	r5, r2
 800bab6:	d201      	bcs.n	800babc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800bab8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baba:	e7d6      	b.n	800ba6a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800babc:	f10b 0104 	add.w	r1, fp, #4
 800bac0:	4608      	mov	r0, r1
 800bac2:	9101      	str	r1, [sp, #4]
 800bac4:	f7fe ff07 	bl	800a8d6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bac8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800bacc:	9901      	ldr	r1, [sp, #4]
 800bace:	b122      	cbz	r2, 800bada <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bad0:	f10b 0018 	add.w	r0, fp, #24
 800bad4:	f7fe feff 	bl	800a8d6 <uxListRemove>
 800bad8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800bada:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800bade:	f8da 2000 	ldr.w	r2, [sl]
 800bae2:	4290      	cmp	r0, r2
 800bae4:	d901      	bls.n	800baea <xTaskIncrementTick+0xd6>
 800bae6:	f8ca 0000 	str.w	r0, [sl]
 800baea:	2314      	movs	r3, #20
 800baec:	fb03 7000 	mla	r0, r3, r0, r7
 800baf0:	f7fe fece 	bl	800a890 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baf4:	f8d8 1000 	ldr.w	r1, [r8]
 800baf8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800bafc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800bafe:	429a      	cmp	r2, r3
 800bb00:	bf28      	it	cs
 800bb02:	2401      	movcs	r4, #1
 800bb04:	e7c7      	b.n	800ba96 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800bb06:	4a0b      	ldr	r2, [pc, #44]	; (800bb34 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800bb08:	2400      	movs	r4, #0
		++xPendedTicks;
 800bb0a:	6813      	ldr	r3, [r2, #0]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800bb10:	e7b9      	b.n	800ba86 <xTaskIncrementTick+0x72>
 800bb12:	bf00      	nop
 800bb14:	24006aa8 	.word	0x24006aa8
 800bb18:	24006b28 	.word	0x24006b28
 800bb1c:	24006638 	.word	0x24006638
 800bb20:	2400663c 	.word	0x2400663c
 800bb24:	24006ae0 	.word	0x24006ae0
 800bb28:	24006adc 	.word	0x24006adc
 800bb2c:	24006640 	.word	0x24006640
 800bb30:	24006b2c 	.word	0x24006b2c
 800bb34:	24006ae4 	.word	0x24006ae4
 800bb38:	24006634 	.word	0x24006634
 800bb3c:	24006ab0 	.word	0x24006ab0

0800bb40 <xTaskResumeAll>:
{
 800bb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800bb42:	4c30      	ldr	r4, [pc, #192]	; (800bc04 <xTaskResumeAll+0xc4>)
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	b943      	cbnz	r3, 800bb5a <xTaskResumeAll+0x1a>
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	e7fe      	b.n	800bb58 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800bb5a:	f7fe ff33 	bl	800a9c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb64:	6824      	ldr	r4, [r4, #0]
 800bb66:	b12c      	cbz	r4, 800bb74 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800bb68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bb6a:	f7fe ff4d 	bl	800aa08 <vPortExitCritical>
}
 800bb6e:	4620      	mov	r0, r4
 800bb70:	b003      	add	sp, #12
 800bb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb74:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <xTaskResumeAll+0xc8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d0f5      	beq.n	800bb68 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb7c:	4d23      	ldr	r5, [pc, #140]	; (800bc0c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800bb7e:	4e24      	ldr	r6, [pc, #144]	; (800bc10 <xTaskResumeAll+0xd0>)
 800bb80:	4f24      	ldr	r7, [pc, #144]	; (800bc14 <xTaskResumeAll+0xd4>)
 800bb82:	e01e      	b.n	800bbc2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	68eb      	ldr	r3, [r5, #12]
 800bb86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb88:	f104 0018 	add.w	r0, r4, #24
 800bb8c:	f7fe fea3 	bl	800a8d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb90:	1d21      	adds	r1, r4, #4
 800bb92:	4608      	mov	r0, r1
 800bb94:	9101      	str	r1, [sp, #4]
 800bb96:	f7fe fe9e 	bl	800a8d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb9c:	6832      	ldr	r2, [r6, #0]
 800bb9e:	9901      	ldr	r1, [sp, #4]
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d900      	bls.n	800bba6 <xTaskResumeAll+0x66>
 800bba4:	6033      	str	r3, [r6, #0]
 800bba6:	2014      	movs	r0, #20
 800bba8:	fb00 7003 	mla	r0, r0, r3, r7
 800bbac:	f7fe fe70 	bl	800a890 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbb0:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <xTaskResumeAll+0xd8>)
 800bbb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d302      	bcc.n	800bbc2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800bbbc:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <xTaskResumeAll+0xdc>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1dd      	bne.n	800bb84 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800bbc8:	b10c      	cbz	r4, 800bbce <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800bbca:	f7ff fdc3 	bl	800b754 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bbce:	4d14      	ldr	r5, [pc, #80]	; (800bc20 <xTaskResumeAll+0xe0>)
 800bbd0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bbd2:	b144      	cbz	r4, 800bbe6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800bbd4:	4e11      	ldr	r6, [pc, #68]	; (800bc1c <xTaskResumeAll+0xdc>)
 800bbd6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bbd8:	f7ff ff1c 	bl	800ba14 <xTaskIncrementTick>
 800bbdc:	b100      	cbz	r0, 800bbe0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800bbde:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bbe0:	3c01      	subs	r4, #1
 800bbe2:	d1f9      	bne.n	800bbd8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800bbe4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800bbe6:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <xTaskResumeAll+0xdc>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0bc      	beq.n	800bb68 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <xTaskResumeAll+0xe4>)
 800bbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf4:	601a      	str	r2, [r3, #0]
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bbfe:	2401      	movs	r4, #1
 800bc00:	e7b3      	b.n	800bb6a <xTaskResumeAll+0x2a>
 800bc02:	bf00      	nop
 800bc04:	24006aa8 	.word	0x24006aa8
 800bc08:	24006aa0 	.word	0x24006aa0
 800bc0c:	24006ae8 	.word	0x24006ae8
 800bc10:	24006ab0 	.word	0x24006ab0
 800bc14:	24006640 	.word	0x24006640
 800bc18:	24006634 	.word	0x24006634
 800bc1c:	24006b2c 	.word	0x24006b2c
 800bc20:	24006ae4 	.word	0x24006ae4
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <vTaskDelay>:
	{
 800bc28:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc2a:	b940      	cbnz	r0, 800bc3e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <vTaskDelay+0x40>)
 800bc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	f3bf 8f6f 	isb	sy
	}
 800bc3c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <vTaskDelay+0x44>)
 800bc40:	6819      	ldr	r1, [r3, #0]
 800bc42:	b141      	cbz	r1, 800bc56 <vTaskDelay+0x2e>
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	e7fe      	b.n	800bc54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bc56:	f7ff fecf 	bl	800b9f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc5a:	f7ff fe2d 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800bc5e:	f7ff ff6f 	bl	800bb40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d0e2      	beq.n	800bc2c <vTaskDelay+0x4>
 800bc66:	e7e9      	b.n	800bc3c <vTaskDelay+0x14>
 800bc68:	e000ed04 	.word	0xe000ed04
 800bc6c:	24006aa8 	.word	0x24006aa8

0800bc70 <vTaskSetApplicationTaskTag>:
	{
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	460d      	mov	r5, r1
		if( xTask == NULL )
 800bc74:	4604      	mov	r4, r0
 800bc76:	b908      	cbnz	r0, 800bc7c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <vTaskSetApplicationTaskTag+0x1c>)
 800bc7a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800bc7c:	f7fe fea2 	bl	800a9c4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800bc80:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800bc82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800bc86:	f7fe bebf 	b.w	800aa08 <vPortExitCritical>
 800bc8a:	bf00      	nop
 800bc8c:	24006634 	.word	0x24006634

0800bc90 <xTaskCallApplicationTaskHook>:
	{
 800bc90:	4603      	mov	r3, r0
 800bc92:	4608      	mov	r0, r1
		if( xTask == NULL )
 800bc94:	b90b      	cbnz	r3, 800bc9a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800bc96:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <xTaskCallApplicationTaskHook+0x14>)
 800bc98:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800bc9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9c:	b103      	cbz	r3, 800bca0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800bc9e:	4718      	bx	r3
	}
 800bca0:	4618      	mov	r0, r3
 800bca2:	4770      	bx	lr
 800bca4:	24006634 	.word	0x24006634

0800bca8 <vTaskStartScheduler>:
{
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcae:	aa07      	add	r2, sp, #28
 800bcb0:	a906      	add	r1, sp, #24
 800bcb2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcb4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcb8:	f7fe fcd0 	bl	800a65c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bcbc:	9b05      	ldr	r3, [sp, #20]
 800bcbe:	9a07      	ldr	r2, [sp, #28]
 800bcc0:	9302      	str	r3, [sp, #8]
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	4917      	ldr	r1, [pc, #92]	; (800bd24 <vTaskStartScheduler+0x7c>)
 800bcc6:	4818      	ldr	r0, [pc, #96]	; (800bd28 <vTaskStartScheduler+0x80>)
 800bcc8:	e9cd 4300 	strd	r4, r3, [sp]
 800bccc:	4623      	mov	r3, r4
 800bcce:	f7ff fe2d 	bl	800b92c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bcd2:	b1d0      	cbz	r0, 800bd0a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800bcd4:	f000 fa88 	bl	800c1e8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800bcd8:	2801      	cmp	r0, #1
 800bcda:	d118      	bne.n	800bd0e <vTaskStartScheduler+0x66>
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <vTaskStartScheduler+0x84>)
 800bcee:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800bcf2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcf6:	4b0e      	ldr	r3, [pc, #56]	; (800bd30 <vTaskStartScheduler+0x88>)
 800bcf8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcfa:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <vTaskStartScheduler+0x8c>)
 800bcfc:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <vTaskStartScheduler+0x90>)
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	f7ff ffc5 	bl	800bc90 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800bd06:	f7fe fef5 	bl	800aaf4 <xPortStartScheduler>
}
 800bd0a:	b008      	add	sp, #32
 800bd0c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd0e:	3001      	adds	r0, #1
 800bd10:	d1fb      	bne.n	800bd0a <vTaskStartScheduler+0x62>
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	e7fe      	b.n	800bd22 <vTaskStartScheduler+0x7a>
 800bd24:	0801e6b0 	.word	0x0801e6b0
 800bd28:	0800b851 	.word	0x0800b851
 800bd2c:	24006adc 	.word	0x24006adc
 800bd30:	24006afc 	.word	0x24006afc
 800bd34:	24006b28 	.word	0x24006b28
 800bd38:	24006634 	.word	0x24006634

0800bd3c <vTaskSwitchContext>:
{
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd3e:	4b1d      	ldr	r3, [pc, #116]	; (800bdb4 <vTaskSwitchContext+0x78>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b1d      	ldr	r3, [pc, #116]	; (800bdb8 <vTaskSwitchContext+0x7c>)
 800bd44:	b112      	cbz	r2, 800bd4c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
}
 800bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800bd4c:	4e1b      	ldr	r6, [pc, #108]	; (800bdbc <vTaskSwitchContext+0x80>)
 800bd4e:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800bd50:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800bd52:	6830      	ldr	r0, [r6, #0]
 800bd54:	f7ff ff9c 	bl	800bc90 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd58:	4d19      	ldr	r5, [pc, #100]	; (800bdc0 <vTaskSwitchContext+0x84>)
 800bd5a:	4a1a      	ldr	r2, [pc, #104]	; (800bdc4 <vTaskSwitchContext+0x88>)
 800bd5c:	f04f 0c14 	mov.w	ip, #20
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	4617      	mov	r7, r2
 800bd64:	fb0c f103 	mul.w	r1, ip, r3
 800bd68:	5854      	ldr	r4, [r2, r1]
 800bd6a:	1850      	adds	r0, r2, r1
 800bd6c:	b1ac      	cbz	r4, 800bd9a <vTaskSwitchContext+0x5e>
 800bd6e:	6844      	ldr	r4, [r0, #4]
 800bd70:	3108      	adds	r1, #8
 800bd72:	6864      	ldr	r4, [r4, #4]
 800bd74:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800bd76:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	4294      	cmp	r4, r2
 800bd7a:	6044      	str	r4, [r0, #4]
 800bd7c:	bf04      	itt	eq
 800bd7e:	6862      	ldreq	r2, [r4, #4]
 800bd80:	6042      	streq	r2, [r0, #4]
 800bd82:	2214      	movs	r2, #20
 800bd84:	fb02 7203 	mla	r2, r2, r3, r7
 800bd88:	6852      	ldr	r2, [r2, #4]
 800bd8a:	68d2      	ldr	r2, [r2, #12]
 800bd8c:	6032      	str	r2, [r6, #0]
 800bd8e:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800bd90:	6830      	ldr	r0, [r6, #0]
}
 800bd92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800bd96:	f7ff bf7b 	b.w	800bc90 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd9a:	b943      	cbnz	r3, 800bdae <vTaskSwitchContext+0x72>
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	e7fe      	b.n	800bdac <vTaskSwitchContext+0x70>
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	e7d8      	b.n	800bd64 <vTaskSwitchContext+0x28>
 800bdb2:	bf00      	nop
 800bdb4:	24006aa8 	.word	0x24006aa8
 800bdb8:	24006b2c 	.word	0x24006b2c
 800bdbc:	24006634 	.word	0x24006634
 800bdc0:	24006ab0 	.word	0x24006ab0
 800bdc4:	24006640 	.word	0x24006640

0800bdc8 <vTaskPlaceOnEventList>:
{
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800bdcc:	b940      	cbnz	r0, 800bde0 <vTaskPlaceOnEventList+0x18>
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	e7fe      	b.n	800bdde <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <vTaskPlaceOnEventList+0x30>)
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	3118      	adds	r1, #24
 800bde6:	f7fe fd5f 	bl	800a8a8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdea:	4620      	mov	r0, r4
 800bdec:	2101      	movs	r1, #1
}
 800bdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdf2:	f7ff bd61 	b.w	800b8b8 <prvAddCurrentTaskToDelayedList>
 800bdf6:	bf00      	nop
 800bdf8:	24006634 	.word	0x24006634

0800bdfc <vTaskPlaceOnEventListRestricted>:
	{
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	460d      	mov	r5, r1
 800be00:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800be02:	b940      	cbnz	r0, 800be16 <vTaskPlaceOnEventListRestricted+0x1a>
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	e7fe      	b.n	800be14 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be16:	4b07      	ldr	r3, [pc, #28]	; (800be34 <vTaskPlaceOnEventListRestricted+0x38>)
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	3118      	adds	r1, #24
 800be1c:	f7fe fd38 	bl	800a890 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800be20:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be22:	4621      	mov	r1, r4
 800be24:	bf0c      	ite	eq
 800be26:	4628      	moveq	r0, r5
 800be28:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800be2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be30:	f7ff bd42 	b.w	800b8b8 <prvAddCurrentTaskToDelayedList>
 800be34:	24006634 	.word	0x24006634

0800be38 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be38:	68c3      	ldr	r3, [r0, #12]
{
 800be3a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800be3e:	b944      	cbnz	r4, 800be52 <xTaskRemoveFromEventList+0x1a>
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	e7fe      	b.n	800be50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be52:	f104 0118 	add.w	r1, r4, #24
 800be56:	4608      	mov	r0, r1
 800be58:	9101      	str	r1, [sp, #4]
 800be5a:	f7fe fd3c 	bl	800a8d6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <xTaskRemoveFromEventList+0x70>)
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	b9e3      	cbnz	r3, 800bea0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be66:	1d21      	adds	r1, r4, #4
 800be68:	4608      	mov	r0, r1
 800be6a:	9101      	str	r1, [sp, #4]
 800be6c:	f7fe fd33 	bl	800a8d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be70:	4a0e      	ldr	r2, [pc, #56]	; (800beac <xTaskRemoveFromEventList+0x74>)
 800be72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be74:	6810      	ldr	r0, [r2, #0]
 800be76:	9901      	ldr	r1, [sp, #4]
 800be78:	4283      	cmp	r3, r0
 800be7a:	d900      	bls.n	800be7e <xTaskRemoveFromEventList+0x46>
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	4a0c      	ldr	r2, [pc, #48]	; (800beb0 <xTaskRemoveFromEventList+0x78>)
 800be80:	2014      	movs	r0, #20
 800be82:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be86:	f7fe fd03 	bl	800a890 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <xTaskRemoveFromEventList+0x7c>)
 800be8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be92:	429a      	cmp	r2, r3
 800be94:	d906      	bls.n	800bea4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800be96:	2001      	movs	r0, #1
 800be98:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <xTaskRemoveFromEventList+0x80>)
 800be9a:	6018      	str	r0, [r3, #0]
}
 800be9c:	b002      	add	sp, #8
 800be9e:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bea0:	4806      	ldr	r0, [pc, #24]	; (800bebc <xTaskRemoveFromEventList+0x84>)
 800bea2:	e7f0      	b.n	800be86 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800bea4:	2000      	movs	r0, #0
	return xReturn;
 800bea6:	e7f9      	b.n	800be9c <xTaskRemoveFromEventList+0x64>
 800bea8:	24006aa8 	.word	0x24006aa8
 800beac:	24006ab0 	.word	0x24006ab0
 800beb0:	24006640 	.word	0x24006640
 800beb4:	24006634 	.word	0x24006634
 800beb8:	24006b2c 	.word	0x24006b2c
 800bebc:	24006ae8 	.word	0x24006ae8

0800bec0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bec0:	4b03      	ldr	r3, [pc, #12]	; (800bed0 <vTaskInternalSetTimeOutState+0x10>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bec6:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <vTaskInternalSetTimeOutState+0x14>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6043      	str	r3, [r0, #4]
}
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	24006ae0 	.word	0x24006ae0
 800bed4:	24006b28 	.word	0x24006b28

0800bed8 <xTaskCheckForTimeOut>:
{
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800bedc:	4605      	mov	r5, r0
 800bede:	b940      	cbnz	r0, 800bef2 <xTaskCheckForTimeOut+0x1a>
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	e7fe      	b.n	800bef0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800bef2:	b941      	cbnz	r1, 800bf06 <xTaskCheckForTimeOut+0x2e>
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	e7fe      	b.n	800bf04 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800bf06:	f7fe fd5d 	bl	800a9c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800bf0a:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <xTaskCheckForTimeOut+0x70>)
 800bf0c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	d010      	beq.n	800bf36 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf14:	480d      	ldr	r0, [pc, #52]	; (800bf4c <xTaskCheckForTimeOut+0x74>)
 800bf16:	682e      	ldr	r6, [r5, #0]
 800bf18:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf1a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf1c:	4286      	cmp	r6, r0
 800bf1e:	d001      	beq.n	800bf24 <xTaskCheckForTimeOut+0x4c>
 800bf20:	428a      	cmp	r2, r1
 800bf22:	d90f      	bls.n	800bf44 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf24:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf26:	4283      	cmp	r3, r0
 800bf28:	d90a      	bls.n	800bf40 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800bf2a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf2c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800bf2e:	4413      	add	r3, r2
 800bf30:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf32:	f7ff ffc5 	bl	800bec0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800bf36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bf38:	f7fe fd66 	bl	800aa08 <vPortExitCritical>
}
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800bf44:	2401      	movs	r4, #1
 800bf46:	e7f7      	b.n	800bf38 <xTaskCheckForTimeOut+0x60>
 800bf48:	24006b28 	.word	0x24006b28
 800bf4c:	24006ae0 	.word	0x24006ae0

0800bf50 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800bf50:	4b01      	ldr	r3, [pc, #4]	; (800bf58 <vTaskMissedYield+0x8>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	601a      	str	r2, [r3, #0]
}
 800bf56:	4770      	bx	lr
 800bf58:	24006b2c 	.word	0x24006b2c

0800bf5c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <xTaskGetSchedulerState+0x18>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	b133      	cbz	r3, 800bf70 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <xTaskGetSchedulerState+0x1c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf68:	bf0c      	ite	eq
 800bf6a:	2002      	moveq	r0, #2
 800bf6c:	2000      	movne	r0, #0
 800bf6e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf70:	2001      	movs	r0, #1
	}
 800bf72:	4770      	bx	lr
 800bf74:	24006afc 	.word	0x24006afc
 800bf78:	24006aa8 	.word	0x24006aa8

0800bf7c <xTaskPriorityInherit>:
	{
 800bf7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800bf7e:	4604      	mov	r4, r0
 800bf80:	b348      	cbz	r0, 800bfd6 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf82:	4a1c      	ldr	r2, [pc, #112]	; (800bff4 <xTaskPriorityInherit+0x78>)
 800bf84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bf86:	6811      	ldr	r1, [r2, #0]
 800bf88:	4616      	mov	r6, r2
 800bf8a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800bf8c:	428b      	cmp	r3, r1
 800bf8e:	d228      	bcs.n	800bfe2 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf90:	6982      	ldr	r2, [r0, #24]
 800bf92:	2a00      	cmp	r2, #0
 800bf94:	db04      	blt.n	800bfa0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf96:	6832      	ldr	r2, [r6, #0]
 800bf98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bf9a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bf9e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfa0:	2214      	movs	r2, #20
 800bfa2:	4d15      	ldr	r5, [pc, #84]	; (800bff8 <xTaskPriorityInherit+0x7c>)
 800bfa4:	fb02 5303 	mla	r3, r2, r3, r5
 800bfa8:	6962      	ldr	r2, [r4, #20]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d115      	bne.n	800bfda <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfae:	1d21      	adds	r1, r4, #4
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	9101      	str	r1, [sp, #4]
 800bfb4:	f7fe fc8f 	bl	800a8d6 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfb8:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfba:	4a10      	ldr	r2, [pc, #64]	; (800bffc <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfbe:	6810      	ldr	r0, [r2, #0]
 800bfc0:	9901      	ldr	r1, [sp, #4]
 800bfc2:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfc4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfc6:	d900      	bls.n	800bfca <xTaskPriorityInherit+0x4e>
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	2014      	movs	r0, #20
 800bfcc:	fb00 5003 	mla	r0, r0, r3, r5
 800bfd0:	f7fe fc5e 	bl	800a890 <vListInsertEnd>
				xReturn = pdTRUE;
 800bfd4:	2001      	movs	r0, #1
	}
 800bfd6:	b002      	add	sp, #8
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfda:	6833      	ldr	r3, [r6, #0]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfe0:	e7f8      	b.n	800bfd4 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800bfe6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bfe8:	42a0      	cmp	r0, r4
 800bfea:	bf2c      	ite	cs
 800bfec:	2000      	movcs	r0, #0
 800bfee:	2001      	movcc	r0, #1
 800bff0:	e7f1      	b.n	800bfd6 <xTaskPriorityInherit+0x5a>
 800bff2:	bf00      	nop
 800bff4:	24006634 	.word	0x24006634
 800bff8:	24006640 	.word	0x24006640
 800bffc:	24006ab0 	.word	0x24006ab0

0800c000 <xTaskPriorityDisinherit>:
	{
 800c000:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800c002:	b910      	cbnz	r0, 800c00a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800c004:	2000      	movs	r0, #0
	}
 800c006:	b002      	add	sp, #8
 800c008:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800c00a:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <xTaskPriorityDisinherit+0x7c>)
 800c00c:	681c      	ldr	r4, [r3, #0]
 800c00e:	4284      	cmp	r4, r0
 800c010:	d008      	beq.n	800c024 <xTaskPriorityDisinherit+0x24>
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	e7fe      	b.n	800c022 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800c024:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c026:	b943      	cbnz	r3, 800c03a <xTaskPriorityDisinherit+0x3a>
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	e7fe      	b.n	800c038 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c03a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800c03c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c03e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c040:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c042:	4291      	cmp	r1, r2
 800c044:	d0de      	beq.n	800c004 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1dc      	bne.n	800c004 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c04a:	1d21      	adds	r1, r4, #4
 800c04c:	4608      	mov	r0, r1
 800c04e:	9101      	str	r1, [sp, #4]
 800c050:	f7fe fc41 	bl	800a8d6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c054:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800c056:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c058:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c05c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c060:	4a07      	ldr	r2, [pc, #28]	; (800c080 <xTaskPriorityDisinherit+0x80>)
 800c062:	6810      	ldr	r0, [r2, #0]
 800c064:	4283      	cmp	r3, r0
 800c066:	d900      	bls.n	800c06a <xTaskPriorityDisinherit+0x6a>
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	4a06      	ldr	r2, [pc, #24]	; (800c084 <xTaskPriorityDisinherit+0x84>)
 800c06c:	2014      	movs	r0, #20
 800c06e:	fb00 2003 	mla	r0, r0, r3, r2
 800c072:	f7fe fc0d 	bl	800a890 <vListInsertEnd>
					xReturn = pdTRUE;
 800c076:	2001      	movs	r0, #1
		return xReturn;
 800c078:	e7c5      	b.n	800c006 <xTaskPriorityDisinherit+0x6>
 800c07a:	bf00      	nop
 800c07c:	24006634 	.word	0x24006634
 800c080:	24006ab0 	.word	0x24006ab0
 800c084:	24006640 	.word	0x24006640

0800c088 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c088:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800c08a:	4604      	mov	r4, r0
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d044      	beq.n	800c11a <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800c090:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c092:	b942      	cbnz	r2, 800c0a6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	e7fe      	b.n	800c0a4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	bf38      	it	cc
 800c0ac:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c0b0:	428b      	cmp	r3, r1
 800c0b2:	d032      	beq.n	800c11a <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0b4:	2a01      	cmp	r2, #1
 800c0b6:	d130      	bne.n	800c11a <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800c0b8:	4a19      	ldr	r2, [pc, #100]	; (800c120 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c0ba:	6812      	ldr	r2, [r2, #0]
 800c0bc:	4282      	cmp	r2, r0
 800c0be:	d108      	bne.n	800c0d2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	e7fe      	b.n	800c0d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0d2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0d4:	4d13      	ldr	r5, [pc, #76]	; (800c124 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0d6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0d8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c0dc:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0de:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0e2:	bfa8      	it	ge
 800c0e4:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0e8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ea:	bfa8      	it	ge
 800c0ec:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d113      	bne.n	800c11a <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f2:	1d01      	adds	r1, r0, #4
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	9101      	str	r1, [sp, #4]
 800c0f8:	f7fe fbed 	bl	800a8d6 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c0fc:	4a0a      	ldr	r2, [pc, #40]	; (800c128 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c0fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c100:	6810      	ldr	r0, [r2, #0]
 800c102:	9901      	ldr	r1, [sp, #4]
 800c104:	4283      	cmp	r3, r0
 800c106:	d900      	bls.n	800c10a <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	2014      	movs	r0, #20
 800c10c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c110:	b003      	add	sp, #12
 800c112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c116:	f7fe bbbb 	b.w	800a890 <vListInsertEnd>
	}
 800c11a:	b003      	add	sp, #12
 800c11c:	bd30      	pop	{r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	24006634 	.word	0x24006634
 800c124:	24006640 	.word	0x24006640
 800c128:	24006ab0 	.word	0x24006ab0

0800c12c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <pvTaskIncrementMutexHeldCount+0x14>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	b11a      	cbz	r2, 800c13a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c136:	3201      	adds	r2, #1
 800c138:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c13a:	6818      	ldr	r0, [r3, #0]
	}
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	24006634 	.word	0x24006634

0800c144 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c146:	4c11      	ldr	r4, [pc, #68]	; (800c18c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c148:	f7fe fc3c 	bl	800a9c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c14c:	6825      	ldr	r5, [r4, #0]
 800c14e:	b9bd      	cbnz	r5, 800c180 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c150:	4f0f      	ldr	r7, [pc, #60]	; (800c190 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c152:	4e10      	ldr	r6, [pc, #64]	; (800c194 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c154:	4638      	mov	r0, r7
 800c156:	f7fe fb8d 	bl	800a874 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7fe fb8a 	bl	800a874 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c160:	4b0d      	ldr	r3, [pc, #52]	; (800c198 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c162:	4a0e      	ldr	r2, [pc, #56]	; (800c19c <prvCheckForValidListAndQueue+0x58>)
 800c164:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c166:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c168:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c16a:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <prvCheckForValidListAndQueue+0x5c>)
 800c16c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c16e:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <prvCheckForValidListAndQueue+0x60>)
 800c170:	9500      	str	r5, [sp, #0]
 800c172:	f7fe fe3d 	bl	800adf0 <xQueueGenericCreateStatic>
 800c176:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c178:	b110      	cbz	r0, 800c180 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c17a:	490b      	ldr	r1, [pc, #44]	; (800c1a8 <prvCheckForValidListAndQueue+0x64>)
 800c17c:	f7ff fa0a 	bl	800b594 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c180:	b003      	add	sp, #12
 800c182:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c186:	f7fe bc3f 	b.w	800aa08 <vPortExitCritical>
 800c18a:	bf00      	nop
 800c18c:	24006c54 	.word	0x24006c54
 800c190:	24006bd8 	.word	0x24006bd8
 800c194:	24006bec 	.word	0x24006bec
 800c198:	24006b30 	.word	0x24006b30
 800c19c:	24006b38 	.word	0x24006b38
 800c1a0:	24006b34 	.word	0x24006b34
 800c1a4:	24006c04 	.word	0x24006c04
 800c1a8:	0801e6b5 	.word	0x0801e6b5

0800c1ac <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c1ac:	4291      	cmp	r1, r2
{
 800c1ae:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1b0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1b2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c1b4:	d80a      	bhi.n	800c1cc <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	6983      	ldr	r3, [r0, #24]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d20d      	bcs.n	800c1da <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1be:	1d01      	adds	r1, r0, #4
 800c1c0:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	f7fe fb70 	bl	800a8a8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c1c8:	2000      	movs	r0, #0
}
 800c1ca:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d201      	bcs.n	800c1d4 <prvInsertTimerInActiveList+0x28>
 800c1d0:	4299      	cmp	r1, r3
 800c1d2:	d202      	bcs.n	800c1da <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1d4:	1d01      	adds	r1, r0, #4
 800c1d6:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <prvInsertTimerInActiveList+0x38>)
 800c1d8:	e7f3      	b.n	800c1c2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c1da:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c1dc:	e7f5      	b.n	800c1ca <prvInsertTimerInActiveList+0x1e>
 800c1de:	bf00      	nop
 800c1e0:	24006b34 	.word	0x24006b34
 800c1e4:	24006b30 	.word	0x24006b30

0800c1e8 <xTimerCreateTimerTask>:
{
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c1ec:	f7ff ffaa 	bl	800c144 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c1f0:	4b12      	ldr	r3, [pc, #72]	; (800c23c <xTimerCreateTimerTask+0x54>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	b1b3      	cbz	r3, 800c224 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1f6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1f8:	aa07      	add	r2, sp, #28
 800c1fa:	a906      	add	r1, sp, #24
 800c1fc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1fe:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c202:	f7fe fa37 	bl	800a674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c206:	9b05      	ldr	r3, [sp, #20]
 800c208:	9a07      	ldr	r2, [sp, #28]
 800c20a:	9302      	str	r3, [sp, #8]
 800c20c:	9b06      	ldr	r3, [sp, #24]
 800c20e:	490c      	ldr	r1, [pc, #48]	; (800c240 <xTimerCreateTimerTask+0x58>)
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	2302      	movs	r3, #2
 800c214:	480b      	ldr	r0, [pc, #44]	; (800c244 <xTimerCreateTimerTask+0x5c>)
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	4623      	mov	r3, r4
 800c21a:	f7ff fb87 	bl	800b92c <xTaskCreateStatic>
 800c21e:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <xTimerCreateTimerTask+0x60>)
 800c220:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c222:	b940      	cbnz	r0, 800c236 <xTimerCreateTimerTask+0x4e>
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c234:	e7fe      	b.n	800c234 <xTimerCreateTimerTask+0x4c>
}
 800c236:	2001      	movs	r0, #1
 800c238:	b008      	add	sp, #32
 800c23a:	bd10      	pop	{r4, pc}
 800c23c:	24006c54 	.word	0x24006c54
 800c240:	0801e6ba 	.word	0x0801e6ba
 800c244:	0800c31d 	.word	0x0800c31d
 800c248:	24006c58 	.word	0x24006c58

0800c24c <xTimerGenericCommand>:
{
 800c24c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c24e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c250:	4604      	mov	r4, r0
{
 800c252:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c254:	b940      	cbnz	r0, 800c268 <xTimerGenericCommand+0x1c>
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	e7fe      	b.n	800c266 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800c268:	4d0c      	ldr	r5, [pc, #48]	; (800c29c <xTimerGenericCommand+0x50>)
 800c26a:	6828      	ldr	r0, [r5, #0]
 800c26c:	b178      	cbz	r0, 800c28e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c26e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c270:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c272:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c276:	dc0c      	bgt.n	800c292 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c278:	f7ff fe70 	bl	800bf5c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c27c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c27e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c280:	4669      	mov	r1, sp
 800c282:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c284:	bf0c      	ite	eq
 800c286:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c288:	461a      	movne	r2, r3
 800c28a:	f7fe fe67 	bl	800af5c <xQueueGenericSend>
}
 800c28e:	b004      	add	sp, #16
 800c290:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c292:	2300      	movs	r3, #0
 800c294:	4669      	mov	r1, sp
 800c296:	f7fe ff13 	bl	800b0c0 <xQueueGenericSendFromISR>
 800c29a:	e7f8      	b.n	800c28e <xTimerGenericCommand+0x42>
 800c29c:	24006c54 	.word	0x24006c54

0800c2a0 <prvSwitchTimerLists>:
{
 800c2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2a2:	4d1c      	ldr	r5, [pc, #112]	; (800c314 <prvSwitchTimerLists+0x74>)
{
 800c2a4:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2a6:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	b92a      	cbnz	r2, 800c2ba <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ae:	4a1a      	ldr	r2, [pc, #104]	; (800c318 <prvSwitchTimerLists+0x78>)
 800c2b0:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2b2:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2b4:	6029      	str	r1, [r5, #0]
}
 800c2b6:	b005      	add	sp, #20
 800c2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2ba:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2bc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2be:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2c0:	1d21      	adds	r1, r4, #4
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	9103      	str	r1, [sp, #12]
 800c2c6:	f7fe fb06 	bl	800a8d6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ca:	6a23      	ldr	r3, [r4, #32]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c2d4:	9903      	ldr	r1, [sp, #12]
 800c2d6:	f013 0f04 	tst.w	r3, #4
 800c2da:	d0e5      	beq.n	800c2a8 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c2dc:	69a3      	ldr	r3, [r4, #24]
 800c2de:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	d205      	bcs.n	800c2f0 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e4:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ea:	f7fe fadd 	bl	800a8a8 <vListInsert>
 800c2ee:	e7db      	b.n	800c2a8 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4632      	mov	r2, r6
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	9700      	str	r7, [sp, #0]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	f7ff ffa7 	bl	800c24c <xTimerGenericCommand>
				configASSERT( xResult );
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d1d2      	bne.n	800c2a8 <prvSwitchTimerLists+0x8>
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	e7fe      	b.n	800c312 <prvSwitchTimerLists+0x72>
 800c314:	24006b30 	.word	0x24006b30
 800c318:	24006b34 	.word	0x24006b34

0800c31c <prvTimerTask>:
{
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c320:	4f77      	ldr	r7, [pc, #476]	; (800c500 <prvTimerTask+0x1e4>)
{
 800c322:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800c324:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800c510 <prvTimerTask+0x1f4>
 800c328:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	f8d3 b000 	ldr.w	fp, [r3]
 800c330:	f1bb 0f00 	cmp.w	fp, #0
 800c334:	d028      	beq.n	800c388 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c336:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c338:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c33a:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800c33e:	4e71      	ldr	r6, [pc, #452]	; (800c504 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800c340:	f7ff fb5a 	bl	800b9f8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c344:	f7ff fb60 	bl	800ba08 <xTaskGetTickCount>
 800c348:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c34a:	6833      	ldr	r3, [r6, #0]
 800c34c:	46b0      	mov	r8, r6
 800c34e:	4298      	cmp	r0, r3
 800c350:	d31c      	bcc.n	800c38c <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800c352:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c354:	b31c      	cbz	r4, 800c39e <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c356:	4b6c      	ldr	r3, [pc, #432]	; (800c508 <prvTimerTask+0x1ec>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681c      	ldr	r4, [r3, #0]
 800c35c:	fab4 f484 	clz	r4, r4
 800c360:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c362:	4b6a      	ldr	r3, [pc, #424]	; (800c50c <prvTimerTask+0x1f0>)
 800c364:	4622      	mov	r2, r4
 800c366:	ebab 0105 	sub.w	r1, fp, r5
 800c36a:	6818      	ldr	r0, [r3, #0]
 800c36c:	f7ff f951 	bl	800b612 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c370:	f7ff fbe6 	bl	800bb40 <xTaskResumeAll>
 800c374:	b978      	cbnz	r0, 800c396 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800c376:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c37a:	f8ca 3000 	str.w	r3, [sl]
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	e006      	b.n	800c396 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c388:	2401      	movs	r4, #1
 800c38a:	e7d8      	b.n	800c33e <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800c38c:	f7ff ff88 	bl	800c2a0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c390:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800c392:	f7ff fbd5 	bl	800bb40 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c396:	4e5d      	ldr	r6, [pc, #372]	; (800c50c <prvTimerTask+0x1f0>)
 800c398:	f04f 0b00 	mov.w	fp, #0
 800c39c:	e035      	b.n	800c40a <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c39e:	4583      	cmp	fp, r0
 800c3a0:	d8df      	bhi.n	800c362 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800c3a2:	f7ff fbcd 	bl	800bb40 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ae:	1d30      	adds	r0, r6, #4
 800c3b0:	f7fe fa91 	bl	800a8d6 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3b4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800c3b8:	0758      	lsls	r0, r3, #29
 800c3ba:	d518      	bpl.n	800c3ee <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3bc:	69b1      	ldr	r1, [r6, #24]
 800c3be:	465b      	mov	r3, fp
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4459      	add	r1, fp
 800c3c6:	f7ff fef1 	bl	800c1ac <prvInsertTimerInActiveList>
 800c3ca:	b1a0      	cbz	r0, 800c3f6 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	465a      	mov	r2, fp
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	9400      	str	r4, [sp, #0]
 800c3d6:	f7ff ff39 	bl	800c24c <xTimerGenericCommand>
			configASSERT( xResult );
 800c3da:	b960      	cbnz	r0, 800c3f6 <prvTimerTask+0xda>
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	e7fe      	b.n	800c3ec <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3ee:	f023 0301 	bic.w	r3, r3, #1
 800c3f2:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3f6:	6a33      	ldr	r3, [r6, #32]
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4798      	blx	r3
}
 800c3fc:	e7cb      	b.n	800c396 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	9905      	ldr	r1, [sp, #20]
 800c402:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c404:	9b02      	ldr	r3, [sp, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	da0a      	bge.n	800c420 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c40a:	2200      	movs	r2, #0
 800c40c:	a902      	add	r1, sp, #8
 800c40e:	6830      	ldr	r0, [r6, #0]
 800c410:	f7fe ff0c 	bl	800b22c <xQueueReceive>
 800c414:	2800      	cmp	r0, #0
 800c416:	d088      	beq.n	800c32a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	9804      	ldr	r0, [sp, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dbee      	blt.n	800c3fe <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c420:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c422:	6963      	ldr	r3, [r4, #20]
 800c424:	b9a3      	cbnz	r3, 800c450 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800c426:	f7ff faef 	bl	800ba08 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c42a:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800c42e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c430:	4298      	cmp	r0, r3
 800c432:	d201      	bcs.n	800c438 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800c434:	f7ff ff34 	bl	800c2a0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800c43e:	2b09      	cmp	r3, #9
 800c440:	d8e3      	bhi.n	800c40a <prvTimerTask+0xee>
 800c442:	e8df f003 	tbb	[pc, r3]
 800c446:	0909      	.short	0x0909
 800c448:	543b3409 	.word	0x543b3409
 800c44c:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c450:	1d20      	adds	r0, r4, #4
 800c452:	f7fe fa40 	bl	800a8d6 <uxListRemove>
 800c456:	e7e6      	b.n	800c426 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c458:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c45c:	462a      	mov	r2, r5
 800c45e:	69a1      	ldr	r1, [r4, #24]
 800c460:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	4419      	add	r1, r3
 800c46e:	f7ff fe9d 	bl	800c1ac <prvInsertTimerInActiveList>
 800c472:	2800      	cmp	r0, #0
 800c474:	d0c9      	beq.n	800c40a <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c476:	6a23      	ldr	r3, [r4, #32]
 800c478:	4620      	mov	r0, r4
 800c47a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c47c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c480:	0759      	lsls	r1, r3, #29
 800c482:	d5c2      	bpl.n	800c40a <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c484:	69a2      	ldr	r2, [r4, #24]
 800c486:	2300      	movs	r3, #0
 800c488:	9903      	ldr	r1, [sp, #12]
 800c48a:	4620      	mov	r0, r4
 800c48c:	f8cd b000 	str.w	fp, [sp]
 800c490:	440a      	add	r2, r1
 800c492:	4619      	mov	r1, r3
 800c494:	f7ff feda 	bl	800c24c <xTimerGenericCommand>
							configASSERT( xResult );
 800c498:	2800      	cmp	r0, #0
 800c49a:	d1b6      	bne.n	800c40a <prvTimerTask+0xee>
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	e7fe      	b.n	800c4ac <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4b2:	f023 0301 	bic.w	r3, r3, #1
 800c4b6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c4ba:	e7a6      	b.n	800c40a <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4c0:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4c6:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4cc:	b941      	cbnz	r1, 800c4e0 <prvTimerTask+0x1c4>
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	e7fe      	b.n	800c4de <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	4429      	add	r1, r5
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7ff fe60 	bl	800c1ac <prvInsertTimerInActiveList>
					break;
 800c4ec:	e78d      	b.n	800c40a <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c4f2:	079a      	lsls	r2, r3, #30
 800c4f4:	d4dd      	bmi.n	800c4b2 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7fe f97e 	bl	800a7f8 <vPortFree>
 800c4fc:	e785      	b.n	800c40a <prvTimerTask+0xee>
 800c4fe:	bf00      	nop
 800c500:	24006b30 	.word	0x24006b30
 800c504:	24006c00 	.word	0x24006c00
 800c508:	24006b34 	.word	0x24006b34
 800c50c:	24006c54 	.word	0x24006c54
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c514:	8880      	ldrh	r0, [r0, #4]
 800c516:	4770      	bx	lr

0800c518 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c518:	2300      	movs	r3, #0
 800c51a:	8083      	strh	r3, [r0, #4]
 800c51c:	4770      	bx	lr
	...

0800c520 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	6803      	ldr	r3, [r0, #0]
 800c524:	460e      	mov	r6, r1
 800c526:	2100      	movs	r1, #0
 800c528:	4605      	mov	r5, r0
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	4798      	blx	r3
 800c52e:	4604      	mov	r4, r0
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	4628      	mov	r0, r5
 800c534:	1b34      	subs	r4, r6, r4
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	b2a4      	uxth	r4, r4
 800c53a:	4798      	blx	r3
 800c53c:	88ab      	ldrh	r3, [r5, #4]
 800c53e:	fbb4 f4f0 	udiv	r4, r4, r0
 800c542:	42a3      	cmp	r3, r4
 800c544:	d805      	bhi.n	800c552 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800c546:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800c548:	211e      	movs	r1, #30
 800c54a:	4a0e      	ldr	r2, [pc, #56]	; (800c584 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c54c:	480e      	ldr	r0, [pc, #56]	; (800c588 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c54e:	f00f fef5 	bl	801c33c <__assert_func>
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	2100      	movs	r1, #0
 800c556:	4628      	mov	r0, r5
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	4798      	blx	r3
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	4607      	mov	r7, r0
 800c560:	4628      	mov	r0, r5
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	4798      	blx	r3
 800c566:	1bf3      	subs	r3, r6, r7
 800c568:	b29b      	uxth	r3, r3
 800c56a:	fbb3 f2f0 	udiv	r2, r3, r0
 800c56e:	fb02 3010 	mls	r0, r2, r0, r3
 800c572:	b118      	cbz	r0, 800c57c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800c574:	4b05      	ldr	r3, [pc, #20]	; (800c58c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800c576:	211f      	movs	r1, #31
 800c578:	4a02      	ldr	r2, [pc, #8]	; (800c584 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c57a:	e7e7      	b.n	800c54c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800c57c:	4620      	mov	r0, r4
 800c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c580:	0801e6c2 	.word	0x0801e6c2
 800c584:	0801e82e 	.word	0x0801e82e
 800c588:	0801e6d7 	.word	0x0801e6d7
 800c58c:	0801e705 	.word	0x0801e705

0800c590 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	6803      	ldr	r3, [r0, #0]
 800c594:	460d      	mov	r5, r1
 800c596:	4604      	mov	r4, r0
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	4798      	blx	r3
 800c59c:	4285      	cmp	r5, r0
 800c59e:	d905      	bls.n	800c5ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	; (800c5d4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800c5a2:	2130      	movs	r1, #48	; 0x30
 800c5a4:	4a0c      	ldr	r2, [pc, #48]	; (800c5d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c5a6:	480d      	ldr	r0, [pc, #52]	; (800c5dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800c5a8:	f00f fec8 	bl	801c33c <__assert_func>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	88a5      	ldrh	r5, [r4, #4]
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	4798      	blx	r3
 800c5b6:	4285      	cmp	r5, r0
 800c5b8:	d303      	bcc.n	800c5c2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800c5ba:	4b09      	ldr	r3, [pc, #36]	; (800c5e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800c5bc:	2131      	movs	r1, #49	; 0x31
 800c5be:	4a06      	ldr	r2, [pc, #24]	; (800c5d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c5c0:	e7f1      	b.n	800c5a6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	88a1      	ldrh	r1, [r4, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ca:	4798      	blx	r3
 800c5cc:	88a3      	ldrh	r3, [r4, #4]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	80a3      	strh	r3, [r4, #4]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	0801e77f 	.word	0x0801e77f
 800c5d8:	0801e871 	.word	0x0801e871
 800c5dc:	0801e6d7 	.word	0x0801e6d7
 800c5e0:	0801e796 	.word	0x0801e796

0800c5e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	6803      	ldr	r3, [r0, #0]
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	4798      	blx	r3
 800c5f2:	4286      	cmp	r6, r0
 800c5f4:	d905      	bls.n	800c602 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800c5f8:	213a      	movs	r1, #58	; 0x3a
 800c5fa:	4a06      	ldr	r2, [pc, #24]	; (800c614 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800c5fc:	4806      	ldr	r0, [pc, #24]	; (800c618 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800c5fe:	f00f fe9d 	bl	801c33c <__assert_func>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	4629      	mov	r1, r5
 800c606:	4620      	mov	r0, r4
 800c608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c60e:	4718      	bx	r3
 800c610:	0801e77f 	.word	0x0801e77f
 800c614:	0801e7e4 	.word	0x0801e7e4
 800c618:	0801e6d7 	.word	0x0801e6d7

0800c61c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c61c:	4770      	bx	lr
	...

0800c620 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c620:	4a02      	ldr	r2, [pc, #8]	; (800c62c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c622:	6002      	str	r2, [r0, #0]
 800c624:	2200      	movs	r2, #0
 800c626:	8082      	strh	r2, [r0, #4]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	0801e7b8 	.word	0x0801e7b8

0800c630 <_ZN8touchgfx9Container13getFirstChildEv>:
 800c630:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c632:	4770      	bx	lr

0800c634 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c634:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c636:	2000      	movs	r0, #0
 800c638:	b12b      	cbz	r3, 800c646 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c63a:	b920      	cbnz	r0, 800c646 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c63c:	1a5a      	subs	r2, r3, r1
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	4250      	negs	r0, r2
 800c642:	4150      	adcs	r0, r2
 800c644:	e7f8      	b.n	800c638 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c646:	4770      	bx	lr

0800c648 <_ZN8touchgfx9Container9removeAllEv>:
 800c648:	2200      	movs	r2, #0
 800c64a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c64c:	b123      	cbz	r3, 800c658 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c64e:	6999      	ldr	r1, [r3, #24]
 800c650:	6281      	str	r1, [r0, #40]	; 0x28
 800c652:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c656:	e7f8      	b.n	800c64a <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c658:	4770      	bx	lr

0800c65a <_ZN8touchgfx9Container6unlinkEv>:
 800c65a:	2300      	movs	r3, #0
 800c65c:	6283      	str	r3, [r0, #40]	; 0x28
 800c65e:	4770      	bx	lr

0800c660 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c660:	2200      	movs	r2, #0
 800c662:	8002      	strh	r2, [r0, #0]
 800c664:	8042      	strh	r2, [r0, #2]
 800c666:	8082      	strh	r2, [r0, #4]
 800c668:	80c2      	strh	r2, [r0, #6]
 800c66a:	4770      	bx	lr

0800c66c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	460d      	mov	r5, r1
 800c670:	4616      	mov	r6, r2
 800c672:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c674:	b13c      	cbz	r4, 800c686 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	4620      	mov	r0, r4
 800c67a:	4632      	mov	r2, r6
 800c67c:	4629      	mov	r1, r5
 800c67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c680:	4798      	blx	r3
 800c682:	69a4      	ldr	r4, [r4, #24]
 800c684:	e7f6      	b.n	800c674 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c686:	bd70      	pop	{r4, r5, r6, pc}

0800c688 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	460d      	mov	r5, r1
 800c68c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c68e:	b134      	cbz	r4, 800c69e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	4621      	mov	r1, r4
 800c694:	4628      	mov	r0, r5
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4798      	blx	r3
 800c69a:	69a4      	ldr	r4, [r4, #24]
 800c69c:	e7f7      	b.n	800c68e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c69e:	bd38      	pop	{r3, r4, r5, pc}

0800c6a0 <_ZN8touchgfx9ContainerD1Ev>:
 800c6a0:	4770      	bx	lr

0800c6a2 <_ZN8touchgfx9ContainerD0Ev>:
 800c6a2:	b510      	push	{r4, lr}
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	212c      	movs	r1, #44	; 0x2c
 800c6a8:	f00f fd32 	bl	801c110 <_ZdlPvj>
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	bd10      	pop	{r4, pc}

0800c6b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c6b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c6b2:	b19b      	cbz	r3, 800c6dc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	d109      	bne.n	800c6cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c6b8:	699a      	ldr	r2, [r3, #24]
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	6159      	str	r1, [r3, #20]
 800c6be:	6282      	str	r2, [r0, #40]	; 0x28
 800c6c0:	b902      	cbnz	r2, 800c6c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c6c2:	4770      	bx	lr
 800c6c4:	6199      	str	r1, [r3, #24]
 800c6c6:	4770      	bx	lr
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	b13a      	cbz	r2, 800c6dc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c6cc:	699a      	ldr	r2, [r3, #24]
 800c6ce:	428a      	cmp	r2, r1
 800c6d0:	d1fa      	bne.n	800c6c8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c6d2:	698a      	ldr	r2, [r1, #24]
 800c6d4:	619a      	str	r2, [r3, #24]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c6dc:	4770      	bx	lr

0800c6de <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c6de:	b410      	push	{r4}
 800c6e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	b92b      	cbnz	r3, 800c6f2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c6e6:	6803      	ldr	r3, [r0, #0]
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f0:	4718      	bx	r3
 800c6f2:	b941      	cbnz	r1, 800c706 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c6f4:	6193      	str	r3, [r2, #24]
 800c6f6:	6282      	str	r2, [r0, #40]	; 0x28
 800c6f8:	6154      	str	r4, [r2, #20]
 800c6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	4603      	mov	r3, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d0f9      	beq.n	800c6fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c706:	4299      	cmp	r1, r3
 800c708:	6998      	ldr	r0, [r3, #24]
 800c70a:	d1f9      	bne.n	800c700 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c70c:	6190      	str	r0, [r2, #24]
 800c70e:	618a      	str	r2, [r1, #24]
 800c710:	e7f2      	b.n	800c6f8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800c714 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c714:	4288      	cmp	r0, r1
 800c716:	b508      	push	{r3, lr}
 800c718:	d105      	bne.n	800c726 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c71a:	4b11      	ldr	r3, [pc, #68]	; (800c760 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800c71c:	2123      	movs	r1, #35	; 0x23
 800c71e:	4a11      	ldr	r2, [pc, #68]	; (800c764 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c720:	4811      	ldr	r0, [pc, #68]	; (800c768 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c722:	f00f fe0b 	bl	801c33c <__assert_func>
 800c726:	694b      	ldr	r3, [r1, #20]
 800c728:	b11b      	cbz	r3, 800c732 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c72c:	2124      	movs	r1, #36	; 0x24
 800c72e:	4a0d      	ldr	r2, [pc, #52]	; (800c764 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c730:	e7f6      	b.n	800c720 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c732:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800c736:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c738:	b913      	cbnz	r3, 800c740 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c73a:	6281      	str	r1, [r0, #40]	; 0x28
 800c73c:	bd08      	pop	{r3, pc}
 800c73e:	4613      	mov	r3, r2
 800c740:	699a      	ldr	r2, [r3, #24]
 800c742:	b12a      	cbz	r2, 800c750 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800c744:	428b      	cmp	r3, r1
 800c746:	d1fa      	bne.n	800c73e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c74a:	2135      	movs	r1, #53	; 0x35
 800c74c:	4a05      	ldr	r2, [pc, #20]	; (800c764 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c74e:	e7e7      	b.n	800c720 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c750:	428b      	cmp	r3, r1
 800c752:	d103      	bne.n	800c75c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800c754:	4b06      	ldr	r3, [pc, #24]	; (800c770 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c756:	2138      	movs	r1, #56	; 0x38
 800c758:	4a02      	ldr	r2, [pc, #8]	; (800c764 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c75a:	e7e1      	b.n	800c720 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c75c:	6199      	str	r1, [r3, #24]
 800c75e:	e7ed      	b.n	800c73c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800c760:	0801e8af 	.word	0x0801e8af
 800c764:	0801ea04 	.word	0x0801ea04
 800c768:	0801e8db 	.word	0x0801e8db
 800c76c:	0801e90e 	.word	0x0801e90e
 800c770:	0801e944 	.word	0x0801e944

0800c774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	461f      	mov	r7, r3
 800c77a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c77e:	460d      	mov	r5, r1
 800c780:	4616      	mov	r6, r2
 800c782:	b103      	cbz	r3, 800c786 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800c784:	6038      	str	r0, [r7, #0]
 800c786:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c788:	b314      	cbz	r4, 800c7d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c78a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c78e:	b1eb      	cbz	r3, 800c7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c790:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c794:	428d      	cmp	r5, r1
 800c796:	db19      	blt.n	800c7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c798:	b289      	uxth	r1, r1
 800c79a:	8923      	ldrh	r3, [r4, #8]
 800c79c:	440b      	add	r3, r1
 800c79e:	b21b      	sxth	r3, r3
 800c7a0:	429d      	cmp	r5, r3
 800c7a2:	da13      	bge.n	800c7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c7a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c7a8:	4296      	cmp	r6, r2
 800c7aa:	db0f      	blt.n	800c7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c7ac:	b292      	uxth	r2, r2
 800c7ae:	8963      	ldrh	r3, [r4, #10]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	b21b      	sxth	r3, r3
 800c7b4:	429e      	cmp	r6, r3
 800c7b6:	da09      	bge.n	800c7cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	1ab2      	subs	r2, r6, r2
 800c7bc:	1a69      	subs	r1, r5, r1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800c7c4:	b212      	sxth	r2, r2
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	b209      	sxth	r1, r1
 800c7ca:	47c0      	blx	r8
 800c7cc:	69a4      	ldr	r4, [r4, #24]
 800c7ce:	e7db      	b.n	800c788 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	4c6d      	ldr	r4, [pc, #436]	; (800c990 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800c7da:	b0a1      	sub	sp, #132	; 0x84
 800c7dc:	4606      	mov	r6, r0
 800c7de:	6824      	ldr	r4, [r4, #0]
 800c7e0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800c7e2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800c7e6:	2400      	movs	r4, #0
 800c7e8:	9303      	str	r3, [sp, #12]
 800c7ea:	802c      	strh	r4, [r5, #0]
 800c7ec:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c7ee:	802c      	strh	r4, [r5, #0]
 800c7f0:	601c      	str	r4, [r3, #0]
 800c7f2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c7f6:	f7ff ffbd 	bl	800c774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c7fa:	f1b9 0f03 	cmp.w	r9, #3
 800c7fe:	f340 80c1 	ble.w	800c984 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800c802:	4631      	mov	r1, r6
 800c804:	a80c      	add	r0, sp, #48	; 0x30
 800c806:	f004 fff1 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c80a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c80e:	9306      	str	r3, [sp, #24]
 800c810:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c814:	9307      	str	r3, [sp, #28]
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	f8d3 a000 	ldr.w	sl, [r3]
 800c81c:	f1ba 0f00 	cmp.w	sl, #0
 800c820:	f000 80b3 	beq.w	800c98a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800c824:	4651      	mov	r1, sl
 800c826:	a810      	add	r0, sp, #64	; 0x40
 800c828:	f004 ffe0 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c82c:	2002      	movs	r0, #2
 800c82e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	fb91 f1f0 	sdiv	r1, r1, r0
 800c83a:	189d      	adds	r5, r3, r2
 800c83c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800c840:	9a07      	ldr	r2, [sp, #28]
 800c842:	4419      	add	r1, r3
 800c844:	9b02      	ldr	r3, [sp, #8]
 800c846:	4413      	add	r3, r2
 800c848:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800c84c:	1a6d      	subs	r5, r5, r1
 800c84e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800c852:	fb92 f2f0 	sdiv	r2, r2, r0
 800c856:	440a      	add	r2, r1
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	435b      	muls	r3, r3
 800c85c:	fb05 3505 	mla	r5, r5, r5, r3
 800c860:	4f4c      	ldr	r7, [pc, #304]	; (800c994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800c862:	ac10      	add	r4, sp, #64	; 0x40
 800c864:	f1b9 0f0c 	cmp.w	r9, #12
 800c868:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c86c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c86e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c870:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c874:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c87c:	f04f 0303 	mov.w	r3, #3
 800c880:	bfd8      	it	le
 800c882:	f109 32ff 	addle.w	r2, r9, #4294967295
 800c886:	f04f 0400 	mov.w	r4, #0
 800c88a:	f8cd 9000 	str.w	r9, [sp]
 800c88e:	bfcc      	ite	gt
 800c890:	4698      	movgt	r8, r3
 800c892:	fb92 f8f3 	sdivle	r8, r2, r3
 800c896:	1c63      	adds	r3, r4, #1
 800c898:	aa10      	add	r2, sp, #64	; 0x40
 800c89a:	f004 0401 	and.w	r4, r4, #1
 800c89e:	f04f 0b00 	mov.w	fp, #0
 800c8a2:	9308      	str	r3, [sp, #32]
 800c8a4:	9b00      	ldr	r3, [sp, #0]
 800c8a6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800c8aa:	fb93 f3f8 	sdiv	r3, r3, r8
 800c8ae:	3404      	adds	r4, #4
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	9a04      	ldr	r2, [sp, #16]
 800c8b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c8ba:	fb13 f302 	smulbb	r3, r3, r2
 800c8be:	9a01      	ldr	r2, [sp, #4]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	1899      	adds	r1, r3, r2
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c8ca:	b209      	sxth	r1, r1
 800c8cc:	4299      	cmp	r1, r3
 800c8ce:	db4d      	blt.n	800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8d0:	8932      	ldrh	r2, [r6, #8]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b21b      	sxth	r3, r3
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	da48      	bge.n	800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8da:	9b04      	ldr	r3, [sp, #16]
 800c8dc:	6827      	ldr	r7, [r4, #0]
 800c8de:	fb17 f703 	smulbb	r7, r7, r3
 800c8e2:	9b02      	ldr	r3, [sp, #8]
 800c8e4:	b2bf      	uxth	r7, r7
 800c8e6:	18fa      	adds	r2, r7, r3
 800c8e8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c8ec:	b212      	sxth	r2, r2
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	db3c      	blt.n	800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8f2:	8970      	ldrh	r0, [r6, #10]
 800c8f4:	4403      	add	r3, r0
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	da37      	bge.n	800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4630      	mov	r0, r6
 800c900:	930b      	str	r3, [sp, #44]	; 0x2c
 800c902:	ab0b      	add	r3, sp, #44	; 0x2c
 800c904:	f7ff ff36 	bl	800c774 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c90a:	b37a      	cbz	r2, 800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c90c:	4552      	cmp	r2, sl
 800c90e:	d02d      	beq.n	800c96c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c910:	4611      	mov	r1, r2
 800c912:	a80e      	add	r0, sp, #56	; 0x38
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	f004 ff69 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c91a:	f04f 0e02 	mov.w	lr, #2
 800c91e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c922:	9a06      	ldr	r2, [sp, #24]
 800c924:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800c92e:	4413      	add	r3, r2
 800c930:	9a07      	ldr	r2, [sp, #28]
 800c932:	fb91 f1fe 	sdiv	r1, r1, lr
 800c936:	fb9c fcfe 	sdiv	ip, ip, lr
 800c93a:	4401      	add	r1, r0
 800c93c:	1a58      	subs	r0, r3, r1
 800c93e:	9b02      	ldr	r3, [sp, #8]
 800c940:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c944:	4413      	add	r3, r2
 800c946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c948:	448c      	add	ip, r1
 800c94a:	eba3 030c 	sub.w	r3, r3, ip
 800c94e:	435b      	muls	r3, r3
 800c950:	fb00 3300 	mla	r3, r0, r0, r3
 800c954:	42ab      	cmp	r3, r5
 800c956:	d208      	bcs.n	800c96a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800c958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c95a:	461d      	mov	r5, r3
 800c95c:	9803      	ldr	r0, [sp, #12]
 800c95e:	6001      	str	r1, [r0, #0]
 800c960:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c962:	9805      	ldr	r0, [sp, #20]
 800c964:	8008      	strh	r0, [r1, #0]
 800c966:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c968:	800f      	strh	r7, [r1, #0]
 800c96a:	4692      	mov	sl, r2
 800c96c:	f10b 0b01 	add.w	fp, fp, #1
 800c970:	3408      	adds	r4, #8
 800c972:	f1bb 0f04 	cmp.w	fp, #4
 800c976:	d19d      	bne.n	800c8b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800c978:	9b00      	ldr	r3, [sp, #0]
 800c97a:	9c08      	ldr	r4, [sp, #32]
 800c97c:	444b      	add	r3, r9
 800c97e:	4544      	cmp	r4, r8
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	d188      	bne.n	800c896 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800c984:	b021      	add	sp, #132	; 0x84
 800c986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98a:	f04f 35ff 	mov.w	r5, #4294967295
 800c98e:	e767      	b.n	800c860 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800c990:	24006c68 	.word	0x24006c68
 800c994:	0801d448 	.word	0x0801d448

0800c998 <_ZN8touchgfx4RectaNERKS0_>:
 800c998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c99c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c9a0:	888c      	ldrh	r4, [r1, #4]
 800c9a2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c9a6:	443c      	add	r4, r7
 800c9a8:	b2a4      	uxth	r4, r4
 800c9aa:	fa0f f884 	sxth.w	r8, r4
 800c9ae:	45c1      	cmp	r9, r8
 800c9b0:	da2f      	bge.n	800ca12 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c9b2:	8882      	ldrh	r2, [r0, #4]
 800c9b4:	444a      	add	r2, r9
 800c9b6:	b292      	uxth	r2, r2
 800c9b8:	fa0f fe82 	sxth.w	lr, r2
 800c9bc:	4577      	cmp	r7, lr
 800c9be:	da28      	bge.n	800ca12 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c9c0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c9c4:	88cb      	ldrh	r3, [r1, #6]
 800c9c6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c9ca:	442b      	add	r3, r5
 800c9cc:	b21b      	sxth	r3, r3
 800c9ce:	429e      	cmp	r6, r3
 800c9d0:	da1f      	bge.n	800ca12 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c9d2:	88c3      	ldrh	r3, [r0, #6]
 800c9d4:	4433      	add	r3, r6
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	fa0f fc83 	sxth.w	ip, r3
 800c9dc:	4565      	cmp	r5, ip
 800c9de:	da18      	bge.n	800ca12 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c9e0:	454f      	cmp	r7, r9
 800c9e2:	bfb8      	it	lt
 800c9e4:	464f      	movlt	r7, r9
 800c9e6:	42b5      	cmp	r5, r6
 800c9e8:	bfb8      	it	lt
 800c9ea:	4635      	movlt	r5, r6
 800c9ec:	45f0      	cmp	r8, lr
 800c9ee:	bfd8      	it	le
 800c9f0:	4622      	movle	r2, r4
 800c9f2:	1bd2      	subs	r2, r2, r7
 800c9f4:	8082      	strh	r2, [r0, #4]
 800c9f6:	884a      	ldrh	r2, [r1, #2]
 800c9f8:	88c9      	ldrh	r1, [r1, #6]
 800c9fa:	8007      	strh	r7, [r0, #0]
 800c9fc:	440a      	add	r2, r1
 800c9fe:	8045      	strh	r5, [r0, #2]
 800ca00:	b292      	uxth	r2, r2
 800ca02:	b211      	sxth	r1, r2
 800ca04:	458c      	cmp	ip, r1
 800ca06:	bfa8      	it	ge
 800ca08:	4613      	movge	r3, r2
 800ca0a:	1b5b      	subs	r3, r3, r5
 800ca0c:	80c3      	strh	r3, [r0, #6]
 800ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca12:	2300      	movs	r3, #0
 800ca14:	8003      	strh	r3, [r0, #0]
 800ca16:	8043      	strh	r3, [r0, #2]
 800ca18:	8083      	strh	r3, [r0, #4]
 800ca1a:	80c3      	strh	r3, [r0, #6]
 800ca1c:	e7f7      	b.n	800ca0e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ca1e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dd06      	ble.n	800ca34 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ca26:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	bfcc      	ite	gt
 800ca2e:	2000      	movgt	r0, #0
 800ca30:	2001      	movle	r0, #1
 800ca32:	4770      	bx	lr
 800ca34:	2001      	movs	r0, #1
 800ca36:	4770      	bx	lr

0800ca38 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4604      	mov	r4, r0
 800ca40:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ca42:	8003      	strh	r3, [r0, #0]
 800ca44:	8043      	strh	r3, [r0, #2]
 800ca46:	8083      	strh	r3, [r0, #4]
 800ca48:	80c3      	strh	r3, [r0, #6]
 800ca4a:	2d00      	cmp	r5, #0
 800ca4c:	d040      	beq.n	800cad0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ca4e:	1d28      	adds	r0, r5, #4
 800ca50:	f7ff ffe5 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca54:	b988      	cbnz	r0, 800ca7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ca56:	4620      	mov	r0, r4
 800ca58:	f7ff ffe1 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca5c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ca60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ca64:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ca68:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ca6c:	b138      	cbz	r0, 800ca7e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ca6e:	8022      	strh	r2, [r4, #0]
 800ca70:	8063      	strh	r3, [r4, #2]
 800ca72:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ca76:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ca7a:	69ad      	ldr	r5, [r5, #24]
 800ca7c:	e7e5      	b.n	800ca4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ca7e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ca82:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ca86:	4290      	cmp	r0, r2
 800ca88:	4607      	mov	r7, r0
 800ca8a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ca8e:	460e      	mov	r6, r1
 800ca90:	bfa8      	it	ge
 800ca92:	4617      	movge	r7, r2
 800ca94:	4299      	cmp	r1, r3
 800ca96:	4472      	add	r2, lr
 800ca98:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ca9c:	bfa8      	it	ge
 800ca9e:	461e      	movge	r6, r3
 800caa0:	4440      	add	r0, r8
 800caa2:	4471      	add	r1, lr
 800caa4:	4463      	add	r3, ip
 800caa6:	b200      	sxth	r0, r0
 800caa8:	8027      	strh	r7, [r4, #0]
 800caaa:	b212      	sxth	r2, r2
 800caac:	8066      	strh	r6, [r4, #2]
 800caae:	b209      	sxth	r1, r1
 800cab0:	b21b      	sxth	r3, r3
 800cab2:	4290      	cmp	r0, r2
 800cab4:	bfac      	ite	ge
 800cab6:	ebc7 0200 	rsbge	r2, r7, r0
 800caba:	ebc7 0202 	rsblt	r2, r7, r2
 800cabe:	4299      	cmp	r1, r3
 800cac0:	bfac      	ite	ge
 800cac2:	ebc6 0301 	rsbge	r3, r6, r1
 800cac6:	ebc6 0303 	rsblt	r3, r6, r3
 800caca:	80a2      	strh	r2, [r4, #4]
 800cacc:	80e3      	strh	r3, [r4, #6]
 800cace:	e7d4      	b.n	800ca7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800cad0:	4620      	mov	r0, r4
 800cad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cad6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800cad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cada:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cade:	b383      	cbz	r3, 800cb42 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cae0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cae2:	b374      	cbz	r4, 800cb42 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cae4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800cae8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800caec:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800caf0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800caf4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800caf8:	b303      	cbz	r3, 800cb3c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800cafa:	4668      	mov	r0, sp
 800cafc:	1d21      	adds	r1, r4, #4
 800cafe:	f8ad 5000 	strh.w	r5, [sp]
 800cb02:	f8ad 6002 	strh.w	r6, [sp, #2]
 800cb06:	f8ad 7004 	strh.w	r7, [sp, #4]
 800cb0a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800cb0e:	f7ff ff43 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800cb12:	4668      	mov	r0, sp
 800cb14:	f7ff ff83 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cb18:	b980      	cbnz	r0, 800cb3c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800cb1a:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb1e:	4669      	mov	r1, sp
 800cb20:	88a2      	ldrh	r2, [r4, #4]
 800cb22:	4620      	mov	r0, r4
 800cb24:	1a9b      	subs	r3, r3, r2
 800cb26:	88e2      	ldrh	r2, [r4, #6]
 800cb28:	f8ad 3000 	strh.w	r3, [sp]
 800cb2c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cb30:	1a9b      	subs	r3, r3, r2
 800cb32:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	4798      	blx	r3
 800cb3c:	69a4      	ldr	r4, [r4, #24]
 800cb3e:	2c00      	cmp	r4, #0
 800cb40:	d1d8      	bne.n	800caf4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800cb42:	b002      	add	sp, #8
 800cb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb48 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800cb48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb4a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cb4e:	460d      	mov	r5, r1
 800cb50:	4616      	mov	r6, r2
 800cb52:	b323      	cbz	r3, 800cb9e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800cb54:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cb56:	b314      	cbz	r4, 800cb9e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800cb58:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cb5c:	b1eb      	cbz	r3, 800cb9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cb5e:	6828      	ldr	r0, [r5, #0]
 800cb60:	466b      	mov	r3, sp
 800cb62:	6869      	ldr	r1, [r5, #4]
 800cb64:	c303      	stmia	r3!, {r0, r1}
 800cb66:	4668      	mov	r0, sp
 800cb68:	1d21      	adds	r1, r4, #4
 800cb6a:	f7ff ff15 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800cb6e:	4668      	mov	r0, sp
 800cb70:	f7ff ff55 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cb74:	b988      	cbnz	r0, 800cb9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cb76:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb7a:	4669      	mov	r1, sp
 800cb7c:	88a2      	ldrh	r2, [r4, #4]
 800cb7e:	4620      	mov	r0, r4
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	88e2      	ldrh	r2, [r4, #6]
 800cb84:	f8ad 3000 	strh.w	r3, [sp]
 800cb88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cb8c:	1a9b      	subs	r3, r3, r2
 800cb8e:	4632      	mov	r2, r6
 800cb90:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb98:	4798      	blx	r3
 800cb9a:	69a4      	ldr	r4, [r4, #24]
 800cb9c:	e7db      	b.n	800cb56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800cb9e:	b002      	add	sp, #8
 800cba0:	bd70      	pop	{r4, r5, r6, pc}

0800cba2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800cba2:	6803      	ldr	r3, [r0, #0]
 800cba4:	b513      	push	{r0, r1, r4, lr}
 800cba6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e9cd 3300 	strd	r3, r3, [sp]
 800cbb0:	466b      	mov	r3, sp
 800cbb2:	47a0      	blx	r4
 800cbb4:	b002      	add	sp, #8
 800cbb6:	bd10      	pop	{r4, pc}

0800cbb8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800cbb8:	2301      	movs	r3, #1
 800cbba:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cbbe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cbc2:	4770      	bx	lr

0800cbc4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cbca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cbce:	4770      	bx	lr

0800cbd0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800cbd0:	6843      	ldr	r3, [r0, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	725a      	strb	r2, [r3, #9]
 800cbd6:	6840      	ldr	r0, [r0, #4]
 800cbd8:	6803      	ldr	r3, [r0, #0]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	4718      	bx	r3

0800cbde <_ZN8touchgfx3HAL8flushDMAEv>:
 800cbde:	6840      	ldr	r0, [r0, #4]
 800cbe0:	6803      	ldr	r3, [r0, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	4718      	bx	r3

0800cbe6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800cbe6:	b530      	push	{r4, r5, lr}
 800cbe8:	b08b      	sub	sp, #44	; 0x2c
 800cbea:	6804      	ldr	r4, [r0, #0]
 800cbec:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800cbf0:	9509      	str	r5, [sp, #36]	; 0x24
 800cbf2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800cbf6:	9508      	str	r5, [sp, #32]
 800cbf8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800cbfc:	9507      	str	r5, [sp, #28]
 800cbfe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800cc02:	9506      	str	r5, [sp, #24]
 800cc04:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800cc08:	9505      	str	r5, [sp, #20]
 800cc0a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800cc0e:	9504      	str	r5, [sp, #16]
 800cc10:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800cc14:	9503      	str	r5, [sp, #12]
 800cc16:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800cc1a:	9502      	str	r5, [sp, #8]
 800cc1c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800cc20:	e9cd 3500 	strd	r3, r5, [sp]
 800cc24:	4613      	mov	r3, r2
 800cc26:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800cc28:	2200      	movs	r2, #0
 800cc2a:	47a0      	blx	r4
 800cc2c:	b00b      	add	sp, #44	; 0x2c
 800cc2e:	bd30      	pop	{r4, r5, pc}

0800cc30 <_ZN8touchgfx3HAL10beginFrameEv>:
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	b123      	cbz	r3, 800cc40 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800cc36:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800cc3a:	f080 0001 	eor.w	r0, r0, #1
 800cc3e:	4770      	bx	lr
 800cc40:	2001      	movs	r0, #1
 800cc42:	4770      	bx	lr
 800cc44:	24006c66 	.word	0x24006c66

0800cc48 <_ZN8touchgfx3HAL8endFrameEv>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	6840      	ldr	r0, [r0, #4]
 800cc4e:	6803      	ldr	r3, [r0, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	4798      	blx	r3
 800cc54:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800cc58:	b113      	cbz	r3, 800cc60 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cc60:	bd10      	pop	{r4, pc}

0800cc62 <_ZN8touchgfx3HAL10initializeEv>:
 800cc62:	b510      	push	{r4, lr}
 800cc64:	4604      	mov	r4, r0
 800cc66:	f7f5 facf 	bl	8002208 <_ZN8touchgfx10OSWrappers10initializeEv>
 800cc6a:	6860      	ldr	r0, [r4, #4]
 800cc6c:	6803      	ldr	r3, [r0, #0]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4798      	blx	r3
 800cc72:	68e0      	ldr	r0, [r4, #12]
 800cc74:	6803      	ldr	r3, [r0, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	4798      	blx	r3
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc84:	4718      	bx	r3
	...

0800cc88 <_ZN8touchgfx3HAL4tickEv>:
 800cc88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cc8a:	6803      	ldr	r3, [r0, #0]
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	4d5c      	ldr	r5, [pc, #368]	; (800ce00 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800cc90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc94:	4798      	blx	r3
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 8097 	beq.w	800cdca <_ZN8touchgfx3HAL4tickEv+0x142>
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	2600      	movs	r6, #0
 800cca0:	f7f5 f930 	bl	8001f04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cca4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800cca8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800ccac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ccb0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800ccb4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800ccb8:	b133      	cbz	r3, 800ccc8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ccc2:	4798      	blx	r3
 800ccc4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800ccc8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800cccc:	2601      	movs	r6, #1
 800ccce:	6862      	ldr	r2, [r4, #4]
 800ccd0:	f083 0301 	eor.w	r3, r3, #1
 800ccd4:	702e      	strb	r6, [r5, #0]
 800ccd6:	7253      	strb	r3, [r2, #9]
 800ccd8:	f003 fd6e 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 800ccdc:	6803      	ldr	r3, [r0, #0]
 800ccde:	4631      	mov	r1, r6
 800cce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce2:	4798      	blx	r3
 800cce4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cce8:	b90b      	cbnz	r3, 800ccee <_ZN8touchgfx3HAL4tickEv+0x66>
 800ccea:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800ccee:	f003 fd63 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 800ccf2:	6803      	ldr	r3, [r0, #0]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	4798      	blx	r3
 800ccf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccfa:	6803      	ldr	r3, [r0, #0]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	4798      	blx	r3
 800cd00:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cd04:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cd10:	b10a      	cbz	r2, 800cd16 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1eb      	bne.n	800ccee <_ZN8touchgfx3HAL4tickEv+0x66>
 800cd16:	4a3b      	ldr	r2, [pc, #236]	; (800ce04 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800cd18:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800cd1c:	7813      	ldrb	r3, [r2, #0]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	b25b      	sxtb	r3, r3
 800cd22:	4299      	cmp	r1, r3
 800cd24:	7013      	strb	r3, [r2, #0]
 800cd26:	dc10      	bgt.n	800cd4a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	68e0      	ldr	r0, [r4, #12]
 800cd2c:	a902      	add	r1, sp, #8
 800cd2e:	7013      	strb	r3, [r2, #0]
 800cd30:	aa03      	add	r2, sp, #12
 800cd32:	6803      	ldr	r3, [r0, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	4798      	blx	r3
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d051      	beq.n	800cde2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800cd3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd42:	4620      	mov	r0, r4
 800cd44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cd48:	4798      	blx	r3
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	6960      	ldr	r0, [r4, #20]
 800cd4e:	f88d 3007 	strb.w	r3, [sp, #7]
 800cd52:	b158      	cbz	r0, 800cd6c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800cd54:	6803      	ldr	r3, [r0, #0]
 800cd56:	f10d 0107 	add.w	r1, sp, #7
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	4798      	blx	r3
 800cd5e:	b128      	cbz	r0, 800cd6c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cd66:	6803      	ldr	r3, [r0, #0]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	4798      	blx	r3
 800cd6c:	f104 001c 	add.w	r0, r4, #28
 800cd70:	f00f f8f6 	bl	801bf60 <_ZN8touchgfx8Gestures4tickEv>
 800cd74:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800cd78:	b30b      	cbz	r3, 800cdbe <_ZN8touchgfx3HAL4tickEv+0x136>
 800cd7a:	6920      	ldr	r0, [r4, #16]
 800cd7c:	6803      	ldr	r3, [r0, #0]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	4798      	blx	r3
 800cd82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd84:	4606      	mov	r6, r0
 800cd86:	b903      	cbnz	r3, 800cd8a <_ZN8touchgfx3HAL4tickEv+0x102>
 800cd88:	6720      	str	r0, [r4, #112]	; 0x70
 800cd8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd8c:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800cd8e:	1af3      	subs	r3, r6, r3
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d914      	bls.n	800cdbe <_ZN8touchgfx3HAL4tickEv+0x136>
 800cd94:	6920      	ldr	r0, [r4, #16]
 800cd96:	6803      	ldr	r3, [r0, #0]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	4798      	blx	r3
 800cd9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd9e:	2264      	movs	r2, #100	; 0x64
 800cda0:	1af3      	subs	r3, r6, r3
 800cda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cda6:	fbb0 f0f3 	udiv	r0, r0, r3
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	dc1e      	bgt.n	800cdec <_ZN8touchgfx3HAL4tickEv+0x164>
 800cdae:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800cdb2:	6920      	ldr	r0, [r4, #16]
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	6803      	ldr	r3, [r0, #0]
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	4798      	blx	r3
 800cdbc:	6726      	str	r6, [r4, #112]	; 0x70
 800cdbe:	f003 fcfb 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 800cdc2:	6803      	ldr	r3, [r0, #0]
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc8:	4798      	blx	r3
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cdd2:	4798      	blx	r3
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f7f5 f8ad 	bl	8001f34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cdda:	2300      	movs	r3, #0
 800cddc:	702b      	strb	r3, [r5, #0]
 800cdde:	b004      	add	sp, #16
 800cde0:	bd70      	pop	{r4, r5, r6, pc}
 800cde2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cde6:	4620      	mov	r0, r4
 800cde8:	4798      	blx	r3
 800cdea:	e7ae      	b.n	800cd4a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800cdec:	2863      	cmp	r0, #99	; 0x63
 800cdee:	bfcb      	itete	gt
 800cdf0:	2300      	movgt	r3, #0
 800cdf2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800cdf6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800cdfa:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800cdfe:	e7d8      	b.n	800cdb2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800ce00:	24006c6c 	.word	0x24006c6c
 800ce04:	24006c6d 	.word	0x24006c6d
 800ce08:	05f5e100 	.word	0x05f5e100

0800ce0c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ce0c:	f7f5 ba2c 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ce10 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800ce10:	6581      	str	r1, [r0, #88]	; 0x58
 800ce12:	301c      	adds	r0, #28
 800ce14:	f00f b8a2 	b.w	801bf5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800ce18 <_ZN8touchgfx3HAL5touchEll>:
 800ce18:	b530      	push	{r4, r5, lr}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	a804      	add	r0, sp, #16
 800ce20:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ce24:	f003 fa62 	bl	80102ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800ce28:	9b04      	ldr	r3, [sp, #16]
 800ce2a:	a906      	add	r1, sp, #24
 800ce2c:	a803      	add	r0, sp, #12
 800ce2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ce38:	f003 faaa 	bl	8010390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ce3c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ce40:	f104 001c 	add.w	r0, r4, #28
 800ce44:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ce48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ce4c:	b189      	cbz	r1, 800ce72 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ce4e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4613      	mov	r3, r2
 800ce56:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	f00f f88e 	bl	801bf7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ce60:	b128      	cbz	r0, 800ce6e <_ZN8touchgfx3HAL5touchEll+0x56>
 800ce62:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ce66:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ce68:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ce6c:	6623      	str	r3, [r4, #96]	; 0x60
 800ce6e:	b007      	add	sp, #28
 800ce70:	bd30      	pop	{r4, r5, pc}
 800ce72:	f00f f8c7 	bl	801c004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ce76:	2301      	movs	r3, #1
 800ce78:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ce7c:	e7f1      	b.n	800ce62 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ce7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d046      	beq.n	800cf12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce84:	ea81 0002 	eor.w	r0, r1, r2
 800ce88:	07c4      	lsls	r4, r0, #31
 800ce8a:	d508      	bpl.n	800ce9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ce8c:	440b      	add	r3, r1
 800ce8e:	3a01      	subs	r2, #1
 800ce90:	428b      	cmp	r3, r1
 800ce92:	d93e      	bls.n	800cf12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce98:	f801 0b01 	strb.w	r0, [r1], #1
 800ce9c:	e7f8      	b.n	800ce90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ce9e:	07d0      	lsls	r0, r2, #31
 800cea0:	bf42      	ittt	mi
 800cea2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800cea6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800ceaa:	f801 0b01 	strbmi.w	r0, [r1], #1
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d911      	bls.n	800ced6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ceb2:	ea81 0402 	eor.w	r4, r1, r2
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	07a4      	lsls	r4, r4, #30
 800ceba:	d022      	beq.n	800cf02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800cebc:	f023 0401 	bic.w	r4, r3, #1
 800cec0:	440c      	add	r4, r1
 800cec2:	428c      	cmp	r4, r1
 800cec4:	4602      	mov	r2, r0
 800cec6:	d904      	bls.n	800ced2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800cec8:	8812      	ldrh	r2, [r2, #0]
 800ceca:	3002      	adds	r0, #2
 800cecc:	f821 2b02 	strh.w	r2, [r1], #2
 800ced0:	e7f7      	b.n	800cec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	f023 0003 	bic.w	r0, r3, #3
 800ceda:	4408      	add	r0, r1
 800cedc:	4288      	cmp	r0, r1
 800cede:	4614      	mov	r4, r2
 800cee0:	d904      	bls.n	800ceec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800cee2:	6824      	ldr	r4, [r4, #0]
 800cee4:	3204      	adds	r2, #4
 800cee6:	f841 4b04 	str.w	r4, [r1], #4
 800ceea:	e7f7      	b.n	800cedc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ceec:	f003 0303 	and.w	r3, r3, #3
 800cef0:	3a01      	subs	r2, #1
 800cef2:	440b      	add	r3, r1
 800cef4:	428b      	cmp	r3, r1
 800cef6:	d90c      	bls.n	800cf12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800cef8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800cefc:	f801 0b01 	strb.w	r0, [r1], #1
 800cf00:	e7f8      	b.n	800cef4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800cf02:	0790      	lsls	r0, r2, #30
 800cf04:	d0e7      	beq.n	800ced6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800cf06:	f832 0b02 	ldrh.w	r0, [r2], #2
 800cf0a:	3b02      	subs	r3, #2
 800cf0c:	f821 0b02 	strh.w	r0, [r1], #2
 800cf10:	e7e1      	b.n	800ced6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800cf12:	2001      	movs	r0, #1
 800cf14:	bd10      	pop	{r4, pc}

0800cf16 <_ZN8touchgfx3HAL7noTouchEv>:
 800cf16:	b510      	push	{r4, lr}
 800cf18:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	b153      	cbz	r3, 800cf36 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800cf20:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800cf24:	2101      	movs	r1, #1
 800cf26:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800cf2a:	301c      	adds	r0, #28
 800cf2c:	f00f f86a 	bl	801c004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800cf36:	bd10      	pop	{r4, pc}

0800cf38 <_ZN8touchgfx3HAL3lcdEv>:
 800cf38:	4b04      	ldr	r3, [pc, #16]	; (800cf4c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cf40:	b10a      	cbz	r2, 800cf46 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800cf42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf44:	b900      	cbnz	r0, 800cf48 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800cf46:	6898      	ldr	r0, [r3, #8]
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	24006c68 	.word	0x24006c68

0800cf50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cf50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	6980      	ldr	r0, [r0, #24]
 800cf58:	b085      	sub	sp, #20
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	4690      	mov	r8, r2
 800cf5e:	4699      	mov	r9, r3
 800cf60:	b930      	cbnz	r0, 800cf70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800cf62:	4b1c      	ldr	r3, [pc, #112]	; (800cfd4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800cf64:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800cf68:	4a1b      	ldr	r2, [pc, #108]	; (800cfd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cf6a:	481c      	ldr	r0, [pc, #112]	; (800cfdc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800cf6c:	f00f f9e6 	bl	801c33c <__assert_func>
 800cf70:	ad04      	add	r5, sp, #16
 800cf72:	2600      	movs	r6, #0
 800cf74:	f845 6d04 	str.w	r6, [r5, #-4]!
 800cf78:	6806      	ldr	r6, [r0, #0]
 800cf7a:	9501      	str	r5, [sp, #4]
 800cf7c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800cf80:	9500      	str	r5, [sp, #0]
 800cf82:	6835      	ldr	r5, [r6, #0]
 800cf84:	47a8      	blx	r5
 800cf86:	4d16      	ldr	r5, [pc, #88]	; (800cfe0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cf88:	4606      	mov	r6, r0
 800cf8a:	f8a5 9000 	strh.w	r9, [r5]
 800cf8e:	f7ff ffd3 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800cf92:	6803      	ldr	r3, [r0, #0]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	4798      	blx	r3
 800cf98:	2801      	cmp	r0, #1
 800cf9a:	d012      	beq.n	800cfc2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800cf9c:	d306      	bcc.n	800cfac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800cf9e:	280d      	cmp	r0, #13
 800cfa0:	d80b      	bhi.n	800cfba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cfa2:	4b10      	ldr	r3, [pc, #64]	; (800cfe4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800cfa4:	f240 1167 	movw	r1, #359	; 0x167
 800cfa8:	4a0b      	ldr	r2, [pc, #44]	; (800cfd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cfaa:	e7de      	b.n	800cf6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800cfac:	882b      	ldrh	r3, [r5, #0]
 800cfae:	fb08 7203 	mla	r2, r8, r3, r7
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800cfb8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cfba:	4630      	mov	r0, r6
 800cfbc:	b005      	add	sp, #20
 800cfbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc2:	882a      	ldrh	r2, [r5, #0]
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	fb08 7202 	mla	r2, r8, r2, r7
 800cfca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cfce:	1a9a      	subs	r2, r3, r2
 800cfd0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cfd2:	e7f2      	b.n	800cfba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cfd4:	0801ebac 	.word	0x0801ebac
 800cfd8:	0801ee6a 	.word	0x0801ee6a
 800cfdc:	0801ebf1 	.word	0x0801ebf1
 800cfe0:	24006c62 	.word	0x24006c62
 800cfe4:	0801ec17 	.word	0x0801ec17

0800cfe8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800cfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfea:	b08b      	sub	sp, #44	; 0x2c
 800cfec:	4617      	mov	r7, r2
 800cfee:	4604      	mov	r4, r0
 800cff0:	460e      	mov	r6, r1
 800cff2:	461d      	mov	r5, r3
 800cff4:	f7ff ffa0 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800cff8:	6803      	ldr	r3, [r0, #0]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	4798      	blx	r3
 800cffe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d002:	9007      	str	r0, [sp, #28]
 800d004:	4631      	mov	r1, r6
 800d006:	6822      	ldr	r2, [r4, #0]
 800d008:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d00c:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d00e:	4620      	mov	r0, r4
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	9306      	str	r3, [sp, #24]
 800d014:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d018:	9305      	str	r3, [sp, #20]
 800d01a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d01e:	9304      	str	r3, [sp, #16]
 800d020:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d024:	9303      	str	r3, [sp, #12]
 800d026:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d02a:	9302      	str	r3, [sp, #8]
 800d02c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d030:	e9cd 5300 	strd	r5, r3, [sp]
 800d034:	463b      	mov	r3, r7
 800d036:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d038:	2200      	movs	r2, #0
 800d03a:	47a8      	blx	r5
 800d03c:	b00b      	add	sp, #44	; 0x2c
 800d03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d040:	24006c62 	.word	0x24006c62

0800d044 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d048:	4698      	mov	r8, r3
 800d04a:	6803      	ldr	r3, [r0, #0]
 800d04c:	b08b      	sub	sp, #44	; 0x2c
 800d04e:	4617      	mov	r7, r2
 800d050:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d052:	460e      	mov	r6, r1
 800d054:	4b13      	ldr	r3, [pc, #76]	; (800d0a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d056:	4604      	mov	r4, r0
 800d058:	f8b3 9000 	ldrh.w	r9, [r3]
 800d05c:	f7ff ff6c 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d060:	6803      	ldr	r3, [r0, #0]
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	4798      	blx	r3
 800d066:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d06a:	2200      	movs	r2, #0
 800d06c:	4631      	mov	r1, r6
 800d06e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d072:	2302      	movs	r3, #2
 800d074:	4620      	mov	r0, r4
 800d076:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d07a:	2301      	movs	r3, #1
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d08e:	9302      	str	r3, [sp, #8]
 800d090:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d094:	e9cd 8300 	strd	r8, r3, [sp]
 800d098:	463b      	mov	r3, r7
 800d09a:	47a8      	blx	r5
 800d09c:	b00b      	add	sp, #44	; 0x2c
 800d09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a2:	bf00      	nop
 800d0a4:	24006c62 	.word	0x24006c62

0800d0a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0ac:	4698      	mov	r8, r3
 800d0ae:	6803      	ldr	r3, [r0, #0]
 800d0b0:	b087      	sub	sp, #28
 800d0b2:	460e      	mov	r6, r1
 800d0b4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d0b6:	4617      	mov	r7, r2
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	f8b3 9000 	ldrh.w	r9, [r3]
 800d0c0:	f7ff ff3a 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d0c4:	6803      	ldr	r3, [r0, #0]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c8:	4798      	blx	r3
 800d0ca:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d0ce:	463a      	mov	r2, r7
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0d6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d0da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d0de:	4620      	mov	r0, r4
 800d0e0:	9302      	str	r3, [sp, #8]
 800d0e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	4643      	mov	r3, r8
 800d0f0:	47a8      	blx	r5
 800d0f2:	b007      	add	sp, #28
 800d0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0f8:	24006c62 	.word	0x24006c62

0800d0fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	b08f      	sub	sp, #60	; 0x3c
 800d104:	4610      	mov	r0, r2
 800d106:	460d      	mov	r5, r1
 800d108:	4691      	mov	r9, r2
 800d10a:	461e      	mov	r6, r3
 800d10c:	f006 fc4a 	bl	80139a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d110:	2800      	cmp	r0, #0
 800d112:	f000 809c 	beq.w	800d24e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	4620      	mov	r0, r4
 800d11a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d2b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800d11e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d124:	4798      	blx	r3
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	4620      	mov	r0, r4
 800d12a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d2b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	4798      	blx	r3
 800d132:	f8bb 3000 	ldrh.w	r3, [fp]
 800d136:	4f5b      	ldr	r7, [pc, #364]	; (800d2a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d13e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d142:	4640      	mov	r0, r8
 800d144:	9302      	str	r3, [sp, #8]
 800d146:	883b      	ldrh	r3, [r7, #0]
 800d148:	9303      	str	r3, [sp, #12]
 800d14a:	4b57      	ldr	r3, [pc, #348]	; (800d2a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d14c:	881a      	ldrh	r2, [r3, #0]
 800d14e:	9305      	str	r3, [sp, #20]
 800d150:	9204      	str	r2, [sp, #16]
 800d152:	f006 fce1 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d156:	8038      	strh	r0, [r7, #0]
 800d158:	4640      	mov	r0, r8
 800d15a:	f006 fd17 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d15e:	9b05      	ldr	r3, [sp, #20]
 800d160:	8018      	strh	r0, [r3, #0]
 800d162:	4b52      	ldr	r3, [pc, #328]	; (800d2ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d174      	bne.n	800d254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800d16a:	883b      	ldrh	r3, [r7, #0]
 800d16c:	f8aa 0000 	strh.w	r0, [sl]
 800d170:	f8ab 3000 	strh.w	r3, [fp]
 800d174:	4648      	mov	r0, r9
 800d176:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d17a:	f006 fc13 	bl	80139a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d17e:	2200      	movs	r2, #0
 800d180:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d184:	4611      	mov	r1, r2
 800d186:	4628      	mov	r0, r5
 800d188:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d18c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d190:	f7f6 f866 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 800d194:	2301      	movs	r3, #1
 800d196:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d19a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d19e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dd5c      	ble.n	800d260 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d1a6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	dd58      	ble.n	800d260 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	ab0a      	add	r3, sp, #40	; 0x28
 800d1b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d1b6:	6851      	ldr	r1, [r2, #4]
 800d1b8:	c303      	stmia	r3!, {r0, r1}
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	a80a      	add	r0, sp, #40	; 0x28
 800d1be:	f7ff fbeb 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800d1c2:	4b38      	ldr	r3, [pc, #224]	; (800d2a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d1ca:	4b37      	ldr	r3, [pc, #220]	; (800d2a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d1cc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d1d0:	aa0a      	add	r2, sp, #40	; 0x28
 800d1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1d6:	910c      	str	r1, [sp, #48]	; 0x30
 800d1d8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d1dc:	ab08      	add	r3, sp, #32
 800d1de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	a90c      	add	r1, sp, #48	; 0x30
 800d1ea:	f7ff fbd5 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800d1ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d13c      	bne.n	800d26e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	696b      	ldr	r3, [r5, #20]
 800d1fe:	a908      	add	r1, sp, #32
 800d200:	682a      	ldr	r2, [r5, #0]
 800d202:	4628      	mov	r0, r5
 800d204:	9305      	str	r3, [sp, #20]
 800d206:	616e      	str	r6, [r5, #20]
 800d208:	6892      	ldr	r2, [r2, #8]
 800d20a:	4790      	blx	r2
 800d20c:	9b05      	ldr	r3, [sp, #20]
 800d20e:	4652      	mov	r2, sl
 800d210:	4649      	mov	r1, r9
 800d212:	616b      	str	r3, [r5, #20]
 800d214:	4628      	mov	r0, r5
 800d216:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d21a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d21e:	f7f6 f81f 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 800d222:	9a01      	ldr	r2, [sp, #4]
 800d224:	4b22      	ldr	r3, [pc, #136]	; (800d2b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d226:	4620      	mov	r0, r4
 800d228:	801a      	strh	r2, [r3, #0]
 800d22a:	9a02      	ldr	r2, [sp, #8]
 800d22c:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d22e:	801a      	strh	r2, [r3, #0]
 800d230:	9a03      	ldr	r2, [sp, #12]
 800d232:	4b1c      	ldr	r3, [pc, #112]	; (800d2a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d234:	801a      	strh	r2, [r3, #0]
 800d236:	4b1c      	ldr	r3, [pc, #112]	; (800d2a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d238:	9a04      	ldr	r2, [sp, #16]
 800d23a:	801a      	strh	r2, [r3, #0]
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d244:	4798      	blx	r3
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	4620      	mov	r0, r4
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	4798      	blx	r3
 800d24e:	b00f      	add	sp, #60	; 0x3c
 800d250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d254:	883b      	ldrh	r3, [r7, #0]
 800d256:	f8ab 0000 	strh.w	r0, [fp]
 800d25a:	f8aa 3000 	strh.w	r3, [sl]
 800d25e:	e789      	b.n	800d174 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800d260:	462a      	mov	r2, r5
 800d262:	ab0a      	add	r3, sp, #40	; 0x28
 800d264:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d268:	6851      	ldr	r1, [r2, #4]
 800d26a:	c303      	stmia	r3!, {r0, r1}
 800d26c:	e7a9      	b.n	800d1c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d26e:	a807      	add	r0, sp, #28
 800d270:	f006 fde4 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d274:	4606      	mov	r6, r0
 800d276:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d278:	6803      	ldr	r3, [r0, #0]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	4798      	blx	r3
 800d27e:	4286      	cmp	r6, r0
 800d280:	d1b8      	bne.n	800d1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800d282:	f7ff fe59 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d286:	6803      	ldr	r3, [r0, #0]
 800d288:	4606      	mov	r6, r0
 800d28a:	a807      	add	r0, sp, #28
 800d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	f006 fdd4 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d294:	9b05      	ldr	r3, [sp, #20]
 800d296:	4601      	mov	r1, r0
 800d298:	4630      	mov	r0, r6
 800d29a:	4798      	blx	r3
 800d29c:	f080 0001 	eor.w	r0, r0, #1
 800d2a0:	b2c0      	uxtb	r0, r0
 800d2a2:	e7a8      	b.n	800d1f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d2a4:	24006c5c 	.word	0x24006c5c
 800d2a8:	24006c5e 	.word	0x24006c5e
 800d2ac:	24006c60 	.word	0x24006c60
 800d2b0:	24006c62 	.word	0x24006c62
 800d2b4:	24006c64 	.word	0x24006c64

0800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d2b8:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	4604      	mov	r4, r0
 800d2c0:	b13b      	cbz	r3, 800d2d2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d2c2:	6803      	ldr	r3, [r0, #0]
 800d2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c6:	4798      	blx	r3
 800d2c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d2ca:	4283      	cmp	r3, r0
 800d2cc:	d101      	bne.n	800d2d2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d2ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d2d4:	e7fc      	b.n	800d2d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d2d6:	bf00      	nop
 800d2d8:	24006c66 	.word	0x24006c66

0800d2dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e0:	b088      	sub	sp, #32
 800d2e2:	4692      	mov	sl, r2
 800d2e4:	461d      	mov	r5, r3
 800d2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ea:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800d2fa:	fb09 a505 	mla	r5, r9, r5, sl
 800d2fe:	9403      	str	r4, [sp, #12]
 800d300:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d304:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d308:	f88d 401c 	strb.w	r4, [sp, #28]
 800d30c:	e9cd 3100 	strd	r3, r1, [sp]
 800d310:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d314:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d318:	f7ff ffce 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d31c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d320:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d324:	f88d 401e 	strb.w	r4, [sp, #30]
 800d328:	9504      	str	r5, [sp, #16]
 800d32a:	f88d 401d 	strb.w	r4, [sp, #29]
 800d32e:	f88d 401f 	strb.w	r4, [sp, #31]
 800d332:	f1b8 0f00 	cmp.w	r8, #0
 800d336:	d000      	beq.n	800d33a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800d338:	b937      	cbnz	r7, 800d348 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800d33a:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800d33c:	f240 210b 	movw	r1, #523	; 0x20b
 800d340:	4a0c      	ldr	r2, [pc, #48]	; (800d374 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d342:	480d      	ldr	r0, [pc, #52]	; (800d378 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d344:	f00e fffa 	bl	801c33c <__assert_func>
 800d348:	6833      	ldr	r3, [r6, #0]
 800d34a:	4630      	mov	r0, r6
 800d34c:	9c00      	ldr	r4, [sp, #0]
 800d34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d350:	4798      	blx	r3
 800d352:	4220      	tst	r0, r4
 800d354:	d104      	bne.n	800d360 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800d356:	4b09      	ldr	r3, [pc, #36]	; (800d37c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800d358:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800d35c:	4a05      	ldr	r2, [pc, #20]	; (800d374 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d35e:	e7f0      	b.n	800d342 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800d360:	6870      	ldr	r0, [r6, #4]
 800d362:	4669      	mov	r1, sp
 800d364:	6803      	ldr	r3, [r0, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	4798      	blx	r3
 800d36a:	b008      	add	sp, #32
 800d36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d370:	0801ea3f 	.word	0x0801ea3f
 800d374:	0801ec9f 	.word	0x0801ec9f
 800d378:	0801ebf1 	.word	0x0801ebf1
 800d37c:	0801ea77 	.word	0x0801ea77

0800d380 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	b089      	sub	sp, #36	; 0x24
 800d386:	4693      	mov	fp, r2
 800d388:	461d      	mov	r5, r3
 800d38a:	2400      	movs	r4, #0
 800d38c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800d390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d394:	468a      	mov	sl, r1
 800d396:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800d39a:	fb09 b505 	mla	r5, r9, r5, fp
 800d39e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	9403      	str	r4, [sp, #12]
 800d3a6:	e9cd 3400 	strd	r3, r4, [sp]
 800d3aa:	f7ff ff85 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d3ae:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d3b2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d3b6:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d3ba:	f8ad 4018 	strh.w	r4, [sp, #24]
 800d3be:	9504      	str	r5, [sp, #16]
 800d3c0:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d3c4:	f8cd a00c 	str.w	sl, [sp, #12]
 800d3c8:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d3cc:	f88d 401e 	strb.w	r4, [sp, #30]
 800d3d0:	f88d 401f 	strb.w	r4, [sp, #31]
 800d3d4:	f1b8 0f00 	cmp.w	r8, #0
 800d3d8:	d000      	beq.n	800d3dc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800d3da:	b937      	cbnz	r7, 800d3ea <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800d3de:	f240 2121 	movw	r1, #545	; 0x221
 800d3e2:	4a0d      	ldr	r2, [pc, #52]	; (800d418 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d3e4:	480d      	ldr	r0, [pc, #52]	; (800d41c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800d3e6:	f00e ffa9 	bl	801c33c <__assert_func>
 800d3ea:	6833      	ldr	r3, [r6, #0]
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	9c00      	ldr	r4, [sp, #0]
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f2:	4798      	blx	r3
 800d3f4:	4220      	tst	r0, r4
 800d3f6:	d104      	bne.n	800d402 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800d3f8:	4b09      	ldr	r3, [pc, #36]	; (800d420 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800d3fa:	f240 2122 	movw	r1, #546	; 0x222
 800d3fe:	4a06      	ldr	r2, [pc, #24]	; (800d418 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d400:	e7f0      	b.n	800d3e4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800d402:	6870      	ldr	r0, [r6, #4]
 800d404:	4669      	mov	r1, sp
 800d406:	6803      	ldr	r3, [r0, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	4798      	blx	r3
 800d40c:	b009      	add	sp, #36	; 0x24
 800d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d412:	bf00      	nop
 800d414:	0801eabc 	.word	0x0801eabc
 800d418:	0801ed15 	.word	0x0801ed15
 800d41c:	0801ebf1 	.word	0x0801ebf1
 800d420:	0801eaf4 	.word	0x0801eaf4

0800d424 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800d424:	b508      	push	{r3, lr}
 800d426:	290d      	cmp	r1, #13
 800d428:	d817      	bhi.n	800d45a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800d42a:	e8df f001 	tbb	[pc, r1]
 800d42e:	090b      	.short	0x090b
 800d430:	0d0d0d07 	.word	0x0d0d0d07
 800d434:	1414140d 	.word	0x1414140d
 800d438:	0d0d1414 	.word	0x0d0d1414
 800d43c:	2020      	movs	r0, #32
 800d43e:	bd08      	pop	{r3, pc}
 800d440:	2018      	movs	r0, #24
 800d442:	e7fc      	b.n	800d43e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d444:	2010      	movs	r0, #16
 800d446:	e7fa      	b.n	800d43e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800d44a:	f240 2182 	movw	r1, #642	; 0x282
 800d44e:	4a05      	ldr	r2, [pc, #20]	; (800d464 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800d450:	4805      	ldr	r0, [pc, #20]	; (800d468 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800d452:	f00e ff73 	bl	801c33c <__assert_func>
 800d456:	2008      	movs	r0, #8
 800d458:	e7f1      	b.n	800d43e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d45a:	2000      	movs	r0, #0
 800d45c:	e7ef      	b.n	800d43e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d45e:	bf00      	nop
 800d460:	0801ec6d 	.word	0x0801ec6d
 800d464:	0801f040 	.word	0x0801f040
 800d468:	0801ebf1 	.word	0x0801ebf1

0800d46c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	460d      	mov	r5, r1
 800d470:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d474:	4616      	mov	r6, r2
 800d476:	461c      	mov	r4, r3
 800d478:	f7ff ffd4 	bl	800d424 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800d47c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d480:	10c0      	asrs	r0, r0, #3
 800d482:	fb06 5101 	mla	r1, r6, r1, r5
 800d486:	fb00 4001 	mla	r0, r0, r1, r4
 800d48a:	bd70      	pop	{r4, r5, r6, pc}

0800d48c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	b08a      	sub	sp, #40	; 0x28
 800d492:	f04f 0c00 	mov.w	ip, #0
 800d496:	4604      	mov	r4, r0
 800d498:	469a      	mov	sl, r3
 800d49a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800d49e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d4a2:	2d0b      	cmp	r5, #11
 800d4a4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800d4a8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d4ac:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800d4b0:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800d4b4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800d4b8:	f8cd c014 	str.w	ip, [sp, #20]
 800d4bc:	d12d      	bne.n	800d51a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800d4be:	2080      	movs	r0, #128	; 0x80
 800d4c0:	9204      	str	r2, [sp, #16]
 800d4c2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800d4c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d4ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d4ce:	f8ad 701c 	strh.w	r7, [sp, #28]
 800d4d2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d4d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7ff feec 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d4e0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	4651      	mov	r1, sl
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	e9cd 9800 	strd	r9, r8, [sp]
 800d4ee:	f7ff ffbd 	bl	800d46c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d4f2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800d4f6:	9006      	str	r0, [sp, #24]
 800d4f8:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800d4fc:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d500:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800d504:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d508:	b107      	cbz	r7, 800d50c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800d50a:	b9d6      	cbnz	r6, 800d542 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800d50c:	4b17      	ldr	r3, [pc, #92]	; (800d56c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800d50e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d512:	4a17      	ldr	r2, [pc, #92]	; (800d570 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d514:	4817      	ldr	r0, [pc, #92]	; (800d574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800d516:	f00e ff11 	bl	801c33c <__assert_func>
 800d51a:	2d02      	cmp	r5, #2
 800d51c:	d108      	bne.n	800d530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800d51e:	2bff      	cmp	r3, #255	; 0xff
 800d520:	d104      	bne.n	800d52c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800d522:	2800      	cmp	r0, #0
 800d524:	bf14      	ite	ne
 800d526:	2040      	movne	r0, #64	; 0x40
 800d528:	2020      	moveq	r0, #32
 800d52a:	e7c9      	b.n	800d4c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d52c:	2040      	movs	r0, #64	; 0x40
 800d52e:	e7c7      	b.n	800d4c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d530:	2bff      	cmp	r3, #255	; 0xff
 800d532:	d104      	bne.n	800d53e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800d534:	2800      	cmp	r0, #0
 800d536:	bf14      	ite	ne
 800d538:	2004      	movne	r0, #4
 800d53a:	2001      	moveq	r0, #1
 800d53c:	e7c0      	b.n	800d4c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d53e:	2004      	movs	r0, #4
 800d540:	e7be      	b.n	800d4c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	4620      	mov	r0, r4
 800d546:	9d02      	ldr	r5, [sp, #8]
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	4798      	blx	r3
 800d54c:	4228      	tst	r0, r5
 800d54e:	d104      	bne.n	800d55a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800d550:	4b09      	ldr	r3, [pc, #36]	; (800d578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800d552:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d556:	4a06      	ldr	r2, [pc, #24]	; (800d570 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d558:	e7dc      	b.n	800d514 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800d55a:	6860      	ldr	r0, [r4, #4]
 800d55c:	a902      	add	r1, sp, #8
 800d55e:	6803      	ldr	r3, [r0, #0]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4798      	blx	r3
 800d564:	b00a      	add	sp, #40	; 0x28
 800d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56a:	bf00      	nop
 800d56c:	0801ea3f 	.word	0x0801ea3f
 800d570:	0801eece 	.word	0x0801eece
 800d574:	0801ebf1 	.word	0x0801ebf1
 800d578:	0801ea77 	.word	0x0801ea77

0800d57c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d580:	b08b      	sub	sp, #44	; 0x2c
 800d582:	469b      	mov	fp, r3
 800d584:	4604      	mov	r4, r0
 800d586:	4692      	mov	sl, r2
 800d588:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800d58c:	2600      	movs	r6, #0
 800d58e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800d592:	4689      	mov	r9, r1
 800d594:	2fff      	cmp	r7, #255	; 0xff
 800d596:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800d59a:	9605      	str	r6, [sp, #20]
 800d59c:	bf14      	ite	ne
 800d59e:	2308      	movne	r3, #8
 800d5a0:	2302      	moveq	r3, #2
 800d5a2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800d5a6:	f7ff fe87 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d5aa:	465a      	mov	r2, fp
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	4651      	mov	r1, sl
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	e9cd 8500 	strd	r8, r5, [sp]
 800d5b6:	f7ff ff59 	bl	800d46c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d5ba:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d5be:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d5c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d5c6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d5ca:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800d5ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d5d2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d5d6:	9d02      	ldr	r5, [sp, #8]
 800d5d8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	9006      	str	r0, [sp, #24]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f8ad 6020 	strh.w	r6, [sp, #32]
 800d5e6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800d5ea:	f8cd 9014 	str.w	r9, [sp, #20]
 800d5ee:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	4798      	blx	r3
 800d5f6:	4228      	tst	r0, r5
 800d5f8:	d106      	bne.n	800d608 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800d5fa:	4b07      	ldr	r3, [pc, #28]	; (800d618 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800d5fc:	f240 2137 	movw	r1, #567	; 0x237
 800d600:	4a06      	ldr	r2, [pc, #24]	; (800d61c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800d602:	4807      	ldr	r0, [pc, #28]	; (800d620 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800d604:	f00e fe9a 	bl	801c33c <__assert_func>
 800d608:	6860      	ldr	r0, [r4, #4]
 800d60a:	a902      	add	r1, sp, #8
 800d60c:	6803      	ldr	r3, [r0, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	4798      	blx	r3
 800d612:	b00b      	add	sp, #44	; 0x2c
 800d614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d618:	0801ea77 	.word	0x0801ea77
 800d61c:	0801efa5 	.word	0x0801efa5
 800d620:	0801ebf1 	.word	0x0801ebf1

0800d624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d624:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d628:	461f      	mov	r7, r3
 800d62a:	4b0b      	ldr	r3, [pc, #44]	; (800d658 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d62c:	460d      	mov	r5, r1
 800d62e:	4616      	mov	r6, r2
 800d630:	f8b3 8000 	ldrh.w	r8, [r3]
 800d634:	4604      	mov	r4, r0
 800d636:	f7ff fc7f 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d63a:	6803      	ldr	r3, [r0, #0]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	4798      	blx	r3
 800d640:	463b      	mov	r3, r7
 800d642:	4632      	mov	r2, r6
 800d644:	4629      	mov	r1, r5
 800d646:	e9cd 8000 	strd	r8, r0, [sp]
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7ff ff0e 	bl	800d46c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d650:	b002      	add	sp, #8
 800d652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d656:	bf00      	nop
 800d658:	24006c62 	.word	0x24006c62

0800d65c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	4698      	mov	r8, r3
 800d662:	b088      	sub	sp, #32
 800d664:	2300      	movs	r3, #0
 800d666:	4617      	mov	r7, r2
 800d668:	4604      	mov	r4, r0
 800d66a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d66e:	9303      	str	r3, [sp, #12]
 800d670:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d674:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d678:	f8ad 6014 	strh.w	r6, [sp, #20]
 800d67c:	f8ad 5016 	strh.w	r5, [sp, #22]
 800d680:	e9cd 3100 	strd	r3, r1, [sp]
 800d684:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d688:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d68c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d690:	f88d 301c 	strb.w	r3, [sp, #28]
 800d694:	f7ff fe10 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d698:	4642      	mov	r2, r8
 800d69a:	4603      	mov	r3, r0
 800d69c:	4639      	mov	r1, r7
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f7ff ffc0 	bl	800d624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d6a4:	4b18      	ldr	r3, [pc, #96]	; (800d708 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800d6a6:	9004      	str	r0, [sp, #16]
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d6ae:	f7ff fc43 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d6b2:	6803      	ldr	r3, [r0, #0]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b6:	4798      	blx	r3
 800d6b8:	f88d 001e 	strb.w	r0, [sp, #30]
 800d6bc:	f88d 001d 	strb.w	r0, [sp, #29]
 800d6c0:	b106      	cbz	r6, 800d6c4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800d6c2:	b935      	cbnz	r5, 800d6d2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800d6c4:	4b11      	ldr	r3, [pc, #68]	; (800d70c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800d6c6:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d6ca:	4a11      	ldr	r2, [pc, #68]	; (800d710 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d6cc:	4811      	ldr	r0, [pc, #68]	; (800d714 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800d6ce:	f00e fe35 	bl	801c33c <__assert_func>
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	9d00      	ldr	r5, [sp, #0]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	4798      	blx	r3
 800d6dc:	4228      	tst	r0, r5
 800d6de:	d104      	bne.n	800d6ea <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800d6e2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d6e6:	4a0a      	ldr	r2, [pc, #40]	; (800d710 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d6e8:	e7f0      	b.n	800d6cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800d6ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6ec:	4669      	mov	r1, sp
 800d6ee:	6860      	ldr	r0, [r4, #4]
 800d6f0:	9303      	str	r3, [sp, #12]
 800d6f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d6f6:	f88d 301f 	strb.w	r3, [sp, #31]
 800d6fa:	6803      	ldr	r3, [r0, #0]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	4798      	blx	r3
 800d700:	b008      	add	sp, #32
 800d702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d706:	bf00      	nop
 800d708:	24006c62 	.word	0x24006c62
 800d70c:	0801ea3f 	.word	0x0801ea3f
 800d710:	0801ed7a 	.word	0x0801ed7a
 800d714:	0801ebf1 	.word	0x0801ebf1
 800d718:	0801ea77 	.word	0x0801ea77

0800d71c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d71e:	b08b      	sub	sp, #44	; 0x2c
 800d720:	4604      	mov	r4, r0
 800d722:	466b      	mov	r3, sp
 800d724:	e883 0006 	stmia.w	r3, {r1, r2}
 800d728:	4b20      	ldr	r3, [pc, #128]	; (800d7ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	b933      	cbnz	r3, 800d73c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d72e:	4b20      	ldr	r3, [pc, #128]	; (800d7b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800d730:	f44f 7112 	mov.w	r1, #584	; 0x248
 800d734:	4a1f      	ldr	r2, [pc, #124]	; (800d7b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800d736:	4820      	ldr	r0, [pc, #128]	; (800d7b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800d738:	f00e fe00 	bl	801c33c <__assert_func>
 800d73c:	2301      	movs	r3, #1
 800d73e:	2500      	movs	r5, #0
 800d740:	f8bd 6000 	ldrh.w	r6, [sp]
 800d744:	9302      	str	r3, [sp, #8]
 800d746:	6803      	ldr	r3, [r0, #0]
 800d748:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d74c:	9505      	str	r5, [sp, #20]
 800d74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d750:	4798      	blx	r3
 800d752:	463a      	mov	r2, r7
 800d754:	4631      	mov	r1, r6
 800d756:	4603      	mov	r3, r0
 800d758:	4620      	mov	r0, r4
 800d75a:	f7ff ff63 	bl	800d624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d75e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d760:	9003      	str	r0, [sp, #12]
 800d762:	9306      	str	r3, [sp, #24]
 800d764:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d768:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d76c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d770:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d774:	4b11      	ldr	r3, [pc, #68]	; (800d7bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d77c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d780:	f7ff fbda 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d784:	6803      	ldr	r3, [r0, #0]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	4798      	blx	r3
 800d78a:	23ff      	movs	r3, #255	; 0xff
 800d78c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d790:	a902      	add	r1, sp, #8
 800d792:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d796:	6860      	ldr	r0, [r4, #4]
 800d798:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d79c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800d7a0:	6803      	ldr	r3, [r0, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	4798      	blx	r3
 800d7a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d7a8:	b00b      	add	sp, #44	; 0x2c
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	24006c67 	.word	0x24006c67
 800d7b0:	0801eb3e 	.word	0x0801eb3e
 800d7b4:	0801ee24 	.word	0x0801ee24
 800d7b8:	0801ebf1 	.word	0x0801ebf1
 800d7bc:	24006c62 	.word	0x24006c62

0800d7c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c4:	b08a      	sub	sp, #40	; 0x28
 800d7c6:	2600      	movs	r6, #0
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	466d      	mov	r5, sp
 800d7cc:	9605      	str	r6, [sp, #20]
 800d7ce:	e885 0006 	stmia.w	r5, {r1, r2}
 800d7d2:	461d      	mov	r5, r3
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	f8bd 7000 	ldrh.w	r7, [sp]
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	6803      	ldr	r3, [r0, #0]
 800d7de:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800d7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e4:	4798      	blx	r3
 800d7e6:	4642      	mov	r2, r8
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff ff19 	bl	800d624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d7f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d7f6:	9003      	str	r0, [sp, #12]
 800d7f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d7fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d800:	9506      	str	r5, [sp, #24]
 800d802:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d806:	4b0f      	ldr	r3, [pc, #60]	; (800d844 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d80e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d810:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d814:	f7ff fb90 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800d818:	6803      	ldr	r3, [r0, #0]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81c:	4798      	blx	r3
 800d81e:	23ff      	movs	r3, #255	; 0xff
 800d820:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d824:	a902      	add	r1, sp, #8
 800d826:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d82a:	6860      	ldr	r0, [r4, #4]
 800d82c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d830:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800d834:	6803      	ldr	r3, [r0, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	4798      	blx	r3
 800d83a:	4628      	mov	r0, r5
 800d83c:	b00a      	add	sp, #40	; 0x28
 800d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d842:	bf00      	nop
 800d844:	24006c62 	.word	0x24006c62

0800d848 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d848:	b570      	push	{r4, r5, r6, lr}
 800d84a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d84e:	4604      	mov	r4, r0
 800d850:	b19b      	cbz	r3, 800d87a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d852:	2002      	movs	r0, #2
 800d854:	f7f4 fb86 	bl	8001f64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d858:	2300      	movs	r3, #0
 800d85a:	4620      	mov	r0, r4
 800d85c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d860:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800d864:	6823      	ldr	r3, [r4, #0]
 800d866:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800d86a:	f7ff fd25 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d86e:	4601      	mov	r1, r0
 800d870:	4620      	mov	r0, r4
 800d872:	462b      	mov	r3, r5
 800d874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d878:	4718      	bx	r3
 800d87a:	bd70      	pop	{r4, r5, r6, pc}

0800d87c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4605      	mov	r5, r0
 800d880:	460c      	mov	r4, r1
 800d882:	2003      	movs	r0, #3
 800d884:	b149      	cbz	r1, 800d89a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800d886:	f7f4 fb3d 	bl	8001f04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d88a:	6928      	ldr	r0, [r5, #16]
 800d88c:	b168      	cbz	r0, 800d8aa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d88e:	6803      	ldr	r3, [r0, #0]
 800d890:	2101      	movs	r1, #1
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d898:	4718      	bx	r3
 800d89a:	f7f4 fb4b 	bl	8001f34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d89e:	6928      	ldr	r0, [r5, #16]
 800d8a0:	b118      	cbz	r0, 800d8aa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d8a2:	6803      	ldr	r3, [r0, #0]
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	e7f4      	b.n	800d894 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}

0800d8ac <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	428a      	cmp	r2, r1
 800d8b8:	d008      	beq.n	800d8cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800d8ba:	2a01      	cmp	r2, #1
 800d8bc:	6803      	ldr	r3, [r0, #0]
 800d8be:	d106      	bne.n	800d8ce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d8c0:	b929      	cbnz	r1, 800d8ce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d8c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d8c6:	4798      	blx	r3
 800d8c8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800d8cc:	bd38      	pop	{r3, r4, r5, pc}
 800d8ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	e7f7      	b.n	800d8c6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800d8d8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d8d8:	4b0d      	ldr	r3, [pc, #52]	; (800d910 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	4604      	mov	r4, r0
 800d8e0:	b95b      	cbnz	r3, 800d8fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d8e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d007      	beq.n	800d8fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d8ea:	6840      	ldr	r0, [r0, #4]
 800d8ec:	f000 f93a 	bl	800db64 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d8f0:	b118      	cbz	r0, 800d8fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d8f2:	6862      	ldr	r2, [r4, #4]
 800d8f4:	7a53      	ldrb	r3, [r2, #9]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0fc      	beq.n	800d8f4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800d8fa:	f7f4 fcad 	bl	8002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d8fe:	4620      	mov	r0, r4
 800d900:	2100      	movs	r1, #0
 800d902:	f7ff ffd3 	bl	800d8ac <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d906:	4620      	mov	r0, r4
 800d908:	f7ff fcd6 	bl	800d2b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d90c:	bd10      	pop	{r4, pc}
 800d90e:	bf00      	nop
 800d910:	24006c66 	.word	0x24006c66

0800d914 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d914:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800d918:	1a13      	subs	r3, r2, r0
 800d91a:	4258      	negs	r0, r3
 800d91c:	4158      	adcs	r0, r3
 800d91e:	4770      	bx	lr

0800d920 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d920:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfdc      	itt	le
 800d92a:	6882      	ldrle	r2, [r0, #8]
 800d92c:	189b      	addle	r3, r3, r2
 800d92e:	2b01      	cmp	r3, #1
 800d930:	bfcc      	ite	gt
 800d932:	2000      	movgt	r0, #0
 800d934:	2001      	movle	r0, #1
 800d936:	4770      	bx	lr

0800d938 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d938:	6902      	ldr	r2, [r0, #16]
 800d93a:	6840      	ldr	r0, [r0, #4]
 800d93c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800d940:	4770      	bx	lr

0800d942 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d942:	6803      	ldr	r3, [r0, #0]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	4718      	bx	r3

0800d948 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d948:	4770      	bx	lr

0800d94a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d94a:	4770      	bx	lr

0800d94c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800d94c:	4770      	bx	lr
	...

0800d950 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d950:	2301      	movs	r3, #1
 800d952:	b570      	push	{r4, r5, r6, lr}
 800d954:	7203      	strb	r3, [r0, #8]
 800d956:	4604      	mov	r4, r0
 800d958:	6840      	ldr	r0, [r0, #4]
 800d95a:	6803      	ldr	r3, [r0, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	4798      	blx	r3
 800d960:	6803      	ldr	r3, [r0, #0]
 800d962:	4605      	mov	r5, r0
 800d964:	2b40      	cmp	r3, #64	; 0x40
 800d966:	d039      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d968:	d815      	bhi.n	800d996 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800d96a:	2b04      	cmp	r3, #4
 800d96c:	d022      	beq.n	800d9b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d96e:	d808      	bhi.n	800d982 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d970:	2b01      	cmp	r3, #1
 800d972:	d033      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d974:	2b02      	cmp	r3, #2
 800d976:	d108      	bne.n	800d98a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	4620      	mov	r0, r4
 800d97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97e:	4798      	blx	r3
 800d980:	e025      	b.n	800d9ce <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800d982:	2b08      	cmp	r3, #8
 800d984:	d01e      	beq.n	800d9c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800d986:	2b20      	cmp	r3, #32
 800d988:	d028      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d98a:	4b17      	ldr	r3, [pc, #92]	; (800d9e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800d98c:	218b      	movs	r1, #139	; 0x8b
 800d98e:	4a17      	ldr	r2, [pc, #92]	; (800d9ec <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800d990:	4817      	ldr	r0, [pc, #92]	; (800d9f0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800d992:	f00e fcd3 	bl	801c33c <__assert_func>
 800d996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d99a:	d01f      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d99c:	d804      	bhi.n	800d9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800d99e:	2b80      	cmp	r3, #128	; 0x80
 800d9a0:	d01c      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9a6:	e7ef      	b.n	800d988 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800d9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9ac:	d016      	beq.n	800d9dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d9ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9b2:	e7e0      	b.n	800d976 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	7f01      	ldrb	r1, [r0, #28]
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	4798      	blx	r3
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c2:	e006      	b.n	800d9d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	7f01      	ldrb	r1, [r0, #28]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	4798      	blx	r3
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9da:	4718      	bx	r3
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	4620      	mov	r0, r4
 800d9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e2:	4798      	blx	r3
 800d9e4:	e7eb      	b.n	800d9be <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d9e6:	bf00      	nop
 800d9e8:	0801f089 	.word	0x0801f089
 800d9ec:	0801f148 	.word	0x0801f148
 800d9f0:	0801f0ae 	.word	0x0801f0ae

0800d9f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460e      	mov	r6, r1
 800d9fa:	6860      	ldr	r0, [r4, #4]
 800d9fc:	6803      	ldr	r3, [r0, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4798      	blx	r3
 800da02:	2800      	cmp	r0, #0
 800da04:	d1f9      	bne.n	800d9fa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800da06:	4d0d      	ldr	r5, [pc, #52]	; (800da3c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800da08:	6828      	ldr	r0, [r5, #0]
 800da0a:	6803      	ldr	r3, [r0, #0]
 800da0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da0e:	4798      	blx	r3
 800da10:	f7f4 fc30 	bl	8002274 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800da14:	6828      	ldr	r0, [r5, #0]
 800da16:	2101      	movs	r1, #1
 800da18:	f7ff ff48 	bl	800d8ac <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800da1c:	6860      	ldr	r0, [r4, #4]
 800da1e:	4631      	mov	r1, r6
 800da20:	6803      	ldr	r3, [r0, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	4798      	blx	r3
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	4620      	mov	r0, r4
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	4798      	blx	r3
 800da2e:	6828      	ldr	r0, [r5, #0]
 800da30:	6803      	ldr	r3, [r0, #0]
 800da32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da38:	4718      	bx	r3
 800da3a:	bf00      	nop
 800da3c:	24006c68 	.word	0x24006c68

0800da40 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800da40:	b508      	push	{r3, lr}
 800da42:	f7f4 fc09 	bl	8002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800da46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800da4a:	f7f4 bc0d 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800da4e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800da4e:	b510      	push	{r4, lr}
 800da50:	4604      	mov	r4, r0
 800da52:	2114      	movs	r1, #20
 800da54:	f00e fb5c 	bl	801c110 <_ZdlPvj>
 800da58:	4620      	mov	r0, r4
 800da5a:	bd10      	pop	{r4, pc}

0800da5c <_ZN8touchgfx13DMA_Interface5startEv>:
 800da5c:	b510      	push	{r4, lr}
 800da5e:	4604      	mov	r4, r0
 800da60:	6840      	ldr	r0, [r0, #4]
 800da62:	6803      	ldr	r3, [r0, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4798      	blx	r3
 800da68:	b948      	cbnz	r0, 800da7e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da6a:	7a63      	ldrb	r3, [r4, #9]
 800da6c:	b13b      	cbz	r3, 800da7e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da6e:	7a23      	ldrb	r3, [r4, #8]
 800da70:	b92b      	cbnz	r3, 800da7e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	4620      	mov	r0, r4
 800da76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da7c:	4718      	bx	r3
 800da7e:	bd10      	pop	{r4, pc}

0800da80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800da86:	4606      	mov	r6, r0
 800da88:	1a9b      	subs	r3, r3, r2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfdc      	itt	le
 800da8e:	6880      	ldrle	r0, [r0, #8]
 800da90:	181b      	addle	r3, r3, r0
 800da92:	2b01      	cmp	r3, #1
 800da94:	dd13      	ble.n	800dabe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800da96:	6874      	ldr	r4, [r6, #4]
 800da98:	460d      	mov	r5, r1
 800da9a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800da9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800daa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800daaa:	68f3      	ldr	r3, [r6, #12]
 800daac:	68b2      	ldr	r2, [r6, #8]
 800daae:	f3bf 8f5b 	dmb	ish
 800dab2:	3301      	adds	r3, #1
 800dab4:	429a      	cmp	r2, r3
 800dab6:	bfd8      	it	le
 800dab8:	1a9b      	suble	r3, r3, r2
 800daba:	60f3      	str	r3, [r6, #12]
 800dabc:	bd70      	pop	{r4, r5, r6, pc}
 800dabe:	4b03      	ldr	r3, [pc, #12]	; (800dacc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800dac0:	2139      	movs	r1, #57	; 0x39
 800dac2:	4a03      	ldr	r2, [pc, #12]	; (800dad0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800dac4:	4803      	ldr	r0, [pc, #12]	; (800dad4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800dac6:	f00e fc39 	bl	801c33c <__assert_func>
 800daca:	bf00      	nop
 800dacc:	0801f0d4 	.word	0x0801f0d4
 800dad0:	0801f178 	.word	0x0801f178
 800dad4:	0801f0ae 	.word	0x0801f0ae

0800dad8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800dad8:	b510      	push	{r4, lr}
 800dada:	6803      	ldr	r3, [r0, #0]
 800dadc:	4604      	mov	r4, r0
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4798      	blx	r3
 800dae2:	b128      	cbz	r0, 800daf0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800dae4:	4b07      	ldr	r3, [pc, #28]	; (800db04 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800dae6:	213f      	movs	r1, #63	; 0x3f
 800dae8:	4a07      	ldr	r2, [pc, #28]	; (800db08 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800daea:	4808      	ldr	r0, [pc, #32]	; (800db0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800daec:	f00e fc26 	bl	801c33c <__assert_func>
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	68a2      	ldr	r2, [r4, #8]
 800daf4:	f3bf 8f5b 	dmb	ish
 800daf8:	3301      	adds	r3, #1
 800dafa:	429a      	cmp	r2, r3
 800dafc:	bfd8      	it	le
 800dafe:	1a9b      	suble	r3, r3, r2
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	bd10      	pop	{r4, pc}
 800db04:	0801f0f7 	.word	0x0801f0f7
 800db08:	0801f1c6 	.word	0x0801f1c6
 800db0c:	0801f0ae 	.word	0x0801f0ae

0800db10 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	4604      	mov	r4, r0
 800db14:	6840      	ldr	r0, [r0, #4]
 800db16:	6803      	ldr	r3, [r0, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4798      	blx	r3
 800db1c:	4605      	mov	r5, r0
 800db1e:	b930      	cbnz	r0, 800db2e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800db20:	7a23      	ldrb	r3, [r4, #8]
 800db22:	b123      	cbz	r3, 800db2e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800db24:	6860      	ldr	r0, [r4, #4]
 800db26:	6803      	ldr	r3, [r0, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	4798      	blx	r3
 800db2c:	7225      	strb	r5, [r4, #8]
 800db2e:	6860      	ldr	r0, [r4, #4]
 800db30:	6803      	ldr	r3, [r0, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4798      	blx	r3
 800db36:	b928      	cbnz	r0, 800db44 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	4620      	mov	r0, r4
 800db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db42:	4718      	bx	r3
 800db44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db48:	f7f4 bb9c 	b.w	8002284 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800db4c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	6082      	str	r2, [r0, #8]
 800db50:	2200      	movs	r2, #0
 800db52:	4c03      	ldr	r4, [pc, #12]	; (800db60 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800db54:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800db58:	e9c0 4100 	strd	r4, r1, [r0]
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	bf00      	nop
 800db60:	0801f12c 	.word	0x0801f12c

0800db64 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800db64:	6840      	ldr	r0, [r0, #4]
 800db66:	6803      	ldr	r3, [r0, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4718      	bx	r3

0800db6c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800db6c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800db70:	4770      	bx	lr

0800db72 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800db72:	4770      	bx	lr

0800db74 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800db74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800db78:	b133      	cbz	r3, 800db88 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800db7a:	790b      	ldrb	r3, [r1, #4]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	bf01      	itttt	eq
 800db80:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800db82:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800db84:	8603      	strheq	r3, [r0, #48]	; 0x30
 800db86:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800db88:	f00e ba9e 	b.w	801c0c8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800db8c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800db8c:	8813      	ldrh	r3, [r2, #0]
 800db8e:	8683      	strh	r3, [r0, #52]	; 0x34
 800db90:	f000 bcb2 	b.w	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800db94 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800db94:	b510      	push	{r4, lr}
 800db96:	4604      	mov	r4, r0
 800db98:	2138      	movs	r1, #56	; 0x38
 800db9a:	f00e fab9 	bl	801c110 <_ZdlPvj>
 800db9e:	4620      	mov	r0, r4
 800dba0:	bd10      	pop	{r4, pc}

0800dba2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800dba2:	b510      	push	{r4, lr}
 800dba4:	4604      	mov	r4, r0
 800dba6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800dba8:	b150      	cbz	r0, 800dbc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800dbaa:	6803      	ldr	r3, [r0, #0]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	4798      	blx	r3
 800dbb0:	b130      	cbz	r0, 800dbc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800dbb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dbb4:	4621      	mov	r1, r4
 800dbb6:	6803      	ldr	r3, [r0, #0]
 800dbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	4718      	bx	r3
 800dbc0:	bd10      	pop	{r4, pc}
	...

0800dbc4 <_ZNK8touchgfx6Bitmap5getIdEv>:
 800dbc4:	b508      	push	{r3, lr}
 800dbc6:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	b92b      	cbnz	r3, 800dbd8 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 800dbcc:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800dbce:	2187      	movs	r1, #135	; 0x87
 800dbd0:	4a04      	ldr	r2, [pc, #16]	; (800dbe4 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800dbd2:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 800dbd4:	f00e fbb2 	bl	801c33c <__assert_func>
 800dbd8:	8800      	ldrh	r0, [r0, #0]
 800dbda:	bd08      	pop	{r3, pc}
 800dbdc:	24006cf0 	.word	0x24006cf0
 800dbe0:	0801f1f6 	.word	0x0801f1f6
 800dbe4:	0801f2c8 	.word	0x0801f2c8
 800dbe8:	0801f232 	.word	0x0801f232

0800dbec <_ZN8touchgfx12ToggleButton10forceStateEb>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	4604      	mov	r4, r0
 800dbf0:	f100 0534 	add.w	r5, r0, #52	; 0x34
 800dbf4:	b169      	cbz	r1, 800dc12 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 800dbf6:	302e      	adds	r0, #46	; 0x2e
 800dbf8:	f7ff ffe4 	bl	800dbc4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f7ff ffe0 	bl	800dbc4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dc04:	4286      	cmp	r6, r0
 800dc06:	d003      	beq.n	800dc10 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 800dc08:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800dc0a:	8623      	strh	r3, [r4, #48]	; 0x30
 800dc0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800dc0e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800dc10:	bd70      	pop	{r4, r5, r6, pc}
 800dc12:	3030      	adds	r0, #48	; 0x30
 800dc14:	f7ff ffd6 	bl	800dbc4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dc18:	4606      	mov	r6, r0
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7ff ffd2 	bl	800dbc4 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dc20:	4286      	cmp	r6, r0
 800dc22:	bf1f      	itttt	ne
 800dc24:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 800dc26:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 800dc28:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 800dc2a:	8623      	strhne	r3, [r4, #48]	; 0x30
 800dc2c:	e7f0      	b.n	800dc10 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0800dc2e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800dc2e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800dc32:	4770      	bx	lr

0800dc34 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800dc34:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800dc38:	4770      	bx	lr

0800dc3a <_ZN8touchgfx13ScalableImageD1Ev>:
 800dc3a:	4770      	bx	lr

0800dc3c <_ZN8touchgfx13ScalableImageD0Ev>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4604      	mov	r4, r0
 800dc40:	212c      	movs	r1, #44	; 0x2c
 800dc42:	f00e fa65 	bl	801c110 <_ZdlPvj>
 800dc46:	4620      	mov	r0, r4
 800dc48:	bd10      	pop	{r4, pc}

0800dc4a <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800dc4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc4c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800dc50:	4605      	mov	r5, r0
 800dc52:	2bff      	cmp	r3, #255	; 0xff
 800dc54:	d007      	beq.n	800dc66 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800dc56:	2300      	movs	r3, #0
 800dc58:	802b      	strh	r3, [r5, #0]
 800dc5a:	806b      	strh	r3, [r5, #2]
 800dc5c:	80ab      	strh	r3, [r5, #4]
 800dc5e:	80eb      	strh	r3, [r5, #6]
 800dc60:	4628      	mov	r0, r5
 800dc62:	b004      	add	sp, #16
 800dc64:	bd70      	pop	{r4, r5, r6, pc}
 800dc66:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800dc6a:	4668      	mov	r0, sp
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f005 ffc7 	bl	8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc72:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800dc76:	4620      	mov	r0, r4
 800dc78:	f005 ff4e 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dc7c:	4286      	cmp	r6, r0
 800dc7e:	d1ea      	bne.n	800dc56 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dc80:	4621      	mov	r1, r4
 800dc82:	a802      	add	r0, sp, #8
 800dc84:	f005 ffbc 	bl	8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc88:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f005 ff7d 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dc92:	4286      	cmp	r6, r0
 800dc94:	d1df      	bne.n	800dc56 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dc96:	4621      	mov	r1, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	f005 ffb1 	bl	8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc9e:	e7df      	b.n	800dc60 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800dca0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	2300      	movs	r3, #0
 800dca4:	2501      	movs	r5, #1
 800dca6:	4604      	mov	r4, r0
 800dca8:	8083      	strh	r3, [r0, #4]
 800dcaa:	80c3      	strh	r3, [r0, #6]
 800dcac:	8103      	strh	r3, [r0, #8]
 800dcae:	8143      	strh	r3, [r0, #10]
 800dcb0:	8183      	strh	r3, [r0, #12]
 800dcb2:	81c3      	strh	r3, [r0, #14]
 800dcb4:	8203      	strh	r3, [r0, #16]
 800dcb6:	8243      	strh	r3, [r0, #18]
 800dcb8:	61c3      	str	r3, [r0, #28]
 800dcba:	8403      	strh	r3, [r0, #32]
 800dcbc:	8443      	strh	r3, [r0, #34]	; 0x22
 800dcbe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800dcc2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800dcc6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800dcca:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800dccc:	6003      	str	r3, [r0, #0]
 800dcce:	880b      	ldrh	r3, [r1, #0]
 800dcd0:	84c3      	strh	r3, [r0, #38]	; 0x26
 800dcd2:	23ff      	movs	r3, #255	; 0xff
 800dcd4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800dcd8:	f000 ff35 	bl	800eb46 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800dcdc:	4b03      	ldr	r3, [pc, #12]	; (800dcec <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800dcde:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800dce2:	4620      	mov	r0, r4
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	0801f668 	.word	0x0801f668
 800dcec:	0801f304 	.word	0x0801f304

0800dcf0 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	3026      	adds	r0, #38	; 0x26
 800dcf4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dcf8:	b90b      	cbnz	r3, 800dcfe <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800dcfa:	f003 be15 	b.w	8011928 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800dcfe:	f003 be23 	b.w	8011948 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800dd04 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	4604      	mov	r4, r0
 800dd0a:	469b      	mov	fp, r3
 800dd0c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800dd10:	b0b3      	sub	sp, #204	; 0xcc
 800dd12:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800dd16:	f9b1 6000 	ldrsh.w	r6, [r1]
 800dd1a:	8888      	ldrh	r0, [r1, #4]
 800dd1c:	9206      	str	r2, [sp, #24]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	4430      	add	r0, r6
 800dd22:	9211      	str	r2, [sp, #68]	; 0x44
 800dd24:	b280      	uxth	r0, r0
 800dd26:	fa0f fe80 	sxth.w	lr, r0
 800dd2a:	4596      	cmp	lr, r2
 800dd2c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800dd30:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800dd34:	f340 811a 	ble.w	800df6c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dd38:	45b4      	cmp	ip, r6
 800dd3a:	f340 8117 	ble.w	800df6c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dd3e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dd42:	88ca      	ldrh	r2, [r1, #6]
 800dd44:	442a      	add	r2, r5
 800dd46:	b292      	uxth	r2, r2
 800dd48:	b211      	sxth	r1, r2
 800dd4a:	2900      	cmp	r1, #0
 800dd4c:	f340 810e 	ble.w	800df6c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dd50:	42ab      	cmp	r3, r5
 800dd52:	f340 810b 	ble.w	800df6c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dd56:	45f4      	cmp	ip, lr
 800dd58:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800dd5c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800dd60:	bfb8      	it	lt
 800dd62:	fa1f f08c 	uxthlt.w	r0, ip
 800dd66:	428b      	cmp	r3, r1
 800dd68:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800dd6c:	bfb8      	it	lt
 800dd6e:	b29a      	uxthlt	r2, r3
 800dd70:	1b80      	subs	r0, r0, r6
 800dd72:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800dd76:	1b52      	subs	r2, r2, r5
 800dd78:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800dd7c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800dd80:	ab11      	add	r3, sp, #68	; 0x44
 800dd82:	ad13      	add	r5, sp, #76	; 0x4c
 800dd84:	6822      	ldr	r2, [r4, #0]
 800dd86:	1d26      	adds	r6, r4, #4
 800dd88:	9307      	str	r3, [sp, #28]
 800dd8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dd8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd90:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd94:	4629      	mov	r1, r5
 800dd96:	4620      	mov	r0, r4
 800dd98:	4790      	blx	r2
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	a815      	add	r0, sp, #84	; 0x54
 800dd9e:	f003 fd25 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dda2:	a815      	add	r0, sp, #84	; 0x54
 800dda4:	f002 fb22 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dda8:	9b07      	ldr	r3, [sp, #28]
 800ddaa:	4631      	mov	r1, r6
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 fb61 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800ddb8:	f002 fb18 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f005 ffb3 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 800ddc2:	9007      	str	r0, [sp, #28]
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f000 80ce 	beq.w	800df66 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800ddca:	f8db 2000 	ldr.w	r2, [fp]
 800ddce:	a90d      	add	r1, sp, #52	; 0x34
 800ddd0:	a809      	add	r0, sp, #36	; 0x24
 800ddd2:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd4:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ddd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ddda:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ddde:	920b      	str	r2, [sp, #44]	; 0x2c
 800dde0:	f8db 200c 	ldr.w	r2, [fp, #12]
 800dde4:	920c      	str	r2, [sp, #48]	; 0x30
 800dde6:	f8da 2000 	ldr.w	r2, [sl]
 800ddea:	920d      	str	r2, [sp, #52]	; 0x34
 800ddec:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ddf0:	920e      	str	r2, [sp, #56]	; 0x38
 800ddf2:	f8da 2008 	ldr.w	r2, [sl, #8]
 800ddf6:	920f      	str	r2, [sp, #60]	; 0x3c
 800ddf8:	f8da 200c 	ldr.w	r2, [sl, #12]
 800ddfc:	9210      	str	r2, [sp, #64]	; 0x40
 800ddfe:	4632      	mov	r2, r6
 800de00:	f002 fb1c 	bl	801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800de04:	4632      	mov	r2, r6
 800de06:	a90e      	add	r1, sp, #56	; 0x38
 800de08:	a80a      	add	r0, sp, #40	; 0x28
 800de0a:	f002 fb17 	bl	801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800de0e:	4632      	mov	r2, r6
 800de10:	a90f      	add	r1, sp, #60	; 0x3c
 800de12:	a80b      	add	r0, sp, #44	; 0x2c
 800de14:	f002 fb12 	bl	801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800de18:	4632      	mov	r2, r6
 800de1a:	a910      	add	r1, sp, #64	; 0x40
 800de1c:	a80c      	add	r0, sp, #48	; 0x30
 800de1e:	f002 fb0d 	bl	801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800de22:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800de26:	edd7 3a00 	vldr	s7, [r7]
 800de2a:	eef0 6a67 	vmov.f32	s13, s15
 800de2e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800de32:	ed97 5a01 	vldr	s10, [r7, #4]
 800de36:	eeb0 7a67 	vmov.f32	s14, s15
 800de3a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800de3e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800de42:	edd9 2a00 	vldr	s5, [r9]
 800de46:	eeb0 6a67 	vmov.f32	s12, s15
 800de4a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800de4e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800de52:	ed98 3a00 	vldr	s6, [r8]
 800de56:	ed99 4a01 	vldr	s8, [r9, #4]
 800de5a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de5e:	edd8 4a01 	vldr	s9, [r8, #4]
 800de62:	edd9 5a02 	vldr	s11, [r9, #8]
 800de66:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800de6a:	ee16 6a10 	vmov	r6, s12
 800de6e:	eeb0 6a67 	vmov.f32	s12, s15
 800de72:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800de76:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800de7a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de7e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800de82:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800de86:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800de8a:	ee16 0a10 	vmov	r0, s12
 800de8e:	eeb0 6a67 	vmov.f32	s12, s15
 800de92:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800de96:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800de9a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de9e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800dea2:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800dea6:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800deaa:	ee16 1a10 	vmov	r1, s12
 800deae:	eeb0 6a67 	vmov.f32	s12, s15
 800deb2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800deb6:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800deba:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800debe:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800dec2:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800dec6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800deca:	68ff      	ldr	r7, [r7, #12]
 800decc:	ee16 2a10 	vmov	r2, s12
 800ded0:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800ded4:	9624      	str	r6, [sp, #144]	; 0x90
 800ded6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800deda:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800dede:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800dee2:	4628      	mov	r0, r5
 800dee4:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800dee8:	9b06      	ldr	r3, [sp, #24]
 800deea:	922d      	str	r2, [sp, #180]	; 0xb4
 800deec:	4a21      	ldr	r2, [pc, #132]	; (800df74 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800deee:	9317      	str	r3, [sp, #92]	; 0x5c
 800def0:	8812      	ldrh	r2, [r2, #0]
 800def2:	9b07      	ldr	r3, [sp, #28]
 800def4:	9218      	str	r2, [sp, #96]	; 0x60
 800def6:	9319      	str	r3, [sp, #100]	; 0x64
 800def8:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800defc:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800df00:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800df04:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800df08:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800df0c:	9731      	str	r7, [sp, #196]	; 0xc4
 800df0e:	f005 ff3d 	bl	8013d8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800df12:	901a      	str	r0, [sp, #104]	; 0x68
 800df14:	4628      	mov	r0, r5
 800df16:	f005 fdff 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800df1a:	901b      	str	r0, [sp, #108]	; 0x6c
 800df1c:	4628      	mov	r0, r5
 800df1e:	f005 fe35 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800df22:	901c      	str	r0, [sp, #112]	; 0x70
 800df24:	4628      	mov	r0, r5
 800df26:	f005 fdf7 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800df2a:	4b13      	ldr	r3, [pc, #76]	; (800df78 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800df2c:	901d      	str	r0, [sp, #116]	; 0x74
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800df34:	b10a      	cbz	r2, 800df3a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800df36:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800df38:	b905      	cbnz	r5, 800df3c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800df3a:	689d      	ldr	r5, [r3, #8]
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	4620      	mov	r0, r4
 800df40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800df42:	f7ff fed5 	bl	800dcf0 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800df46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df4a:	aa1e      	add	r2, sp, #120	; 0x78
 800df4c:	a917      	add	r1, sp, #92	; 0x5c
 800df4e:	9304      	str	r3, [sp, #16]
 800df50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800df54:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800df58:	ab13      	add	r3, sp, #76	; 0x4c
 800df5a:	4628      	mov	r0, r5
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	ab15      	add	r3, sp, #84	; 0x54
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	ab19      	add	r3, sp, #100	; 0x64
 800df64:	47b0      	blx	r6
 800df66:	b033      	add	sp, #204	; 0xcc
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	2300      	movs	r3, #0
 800df6e:	9312      	str	r3, [sp, #72]	; 0x48
 800df70:	e706      	b.n	800dd80 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800df72:	bf00      	nop
 800df74:	24006c62 	.word	0x24006c62
 800df78:	24006c68 	.word	0x24006c68

0800df7c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	ed2d 8b04 	vpush	{d8-d9}
 800df82:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800df86:	b098      	sub	sp, #96	; 0x60
 800df88:	4604      	mov	r4, r0
 800df8a:	460e      	mov	r6, r1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d065      	beq.n	800e05c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800df90:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800df94:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800df98:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800e078 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800df9c:	ee09 3a10 	vmov	s18, r3
 800dfa0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	ee08 3a90 	vmov	s17, r3
 800dfaa:	4b34      	ldr	r3, [pc, #208]	; (800e07c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800dfac:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800dfb0:	930c      	str	r3, [sp, #48]	; 0x30
 800dfb2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800dfb6:	930d      	str	r3, [sp, #52]	; 0x34
 800dfb8:	930e      	str	r3, [sp, #56]	; 0x38
 800dfba:	ee39 9a08 	vadd.f32	s18, s18, s16
 800dfbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfc0:	f005 fdaa 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dfc4:	ee07 0a90 	vmov	s15, r0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	ee78 8a88 	vadd.f32	s17, s17, s16
 800dfce:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800dfd2:	f005 fddb 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dfd6:	4b2a      	ldr	r3, [pc, #168]	; (800e080 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800dfd8:	ee07 0a90 	vmov	s15, r0
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dfe2:	eef0 7a48 	vmov.f32	s15, s16
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d13c      	bne.n	800e064 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800dfea:	eef0 6a69 	vmov.f32	s13, s19
 800dfee:	ee19 3a90 	vmov	r3, s19
 800dff2:	eeb0 6a47 	vmov.f32	s12, s14
 800dff6:	eef0 5a47 	vmov.f32	s11, s14
 800dffa:	eef0 9a48 	vmov.f32	s19, s16
 800dffe:	eeb0 7a48 	vmov.f32	s14, s16
 800e002:	9314      	str	r3, [sp, #80]	; 0x50
 800e004:	ab14      	add	r3, sp, #80	; 0x50
 800e006:	2200      	movs	r2, #0
 800e008:	4631      	mov	r1, r6
 800e00a:	9303      	str	r3, [sp, #12]
 800e00c:	ab10      	add	r3, sp, #64	; 0x40
 800e00e:	4620      	mov	r0, r4
 800e010:	edcd 7a04 	vstr	s15, [sp, #16]
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	ab0c      	add	r3, sp, #48	; 0x30
 800e018:	ed8d 9a05 	vstr	s18, [sp, #20]
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	ab08      	add	r3, sp, #32
 800e020:	ed8d 9a06 	vstr	s18, [sp, #24]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	ab04      	add	r3, sp, #16
 800e028:	edcd 7a07 	vstr	s15, [sp, #28]
 800e02c:	edcd 7a08 	vstr	s15, [sp, #32]
 800e030:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800e034:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800e038:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800e03c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800e040:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800e044:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800e048:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800e04c:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800e050:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800e054:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800e058:	f7ff fe54 	bl	800dd04 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800e05c:	b018      	add	sp, #96	; 0x60
 800e05e:	ecbd 8b04 	vpop	{d8-d9}
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	eef0 6a47 	vmov.f32	s13, s14
 800e068:	ee18 3a10 	vmov	r3, s16
 800e06c:	eef0 5a69 	vmov.f32	s11, s19
 800e070:	eeb0 6a48 	vmov.f32	s12, s16
 800e074:	e7c5      	b.n	800e002 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800e076:	bf00      	nop
 800e078:	00000000 	.word	0x00000000
 800e07c:	42c80000 	.word	0x42c80000
 800e080:	24006c60 	.word	0x24006c60

0800e084 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800e084:	2200      	movs	r2, #0
 800e086:	8002      	strh	r2, [r0, #0]
 800e088:	8042      	strh	r2, [r0, #2]
 800e08a:	8082      	strh	r2, [r0, #4]
 800e08c:	80c2      	strh	r2, [r0, #6]
 800e08e:	4770      	bx	lr

0800e090 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	6803      	ldr	r3, [r0, #0]
 800e094:	4604      	mov	r4, r0
 800e096:	4615      	mov	r5, r2
 800e098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09a:	4798      	blx	r3
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0a8:	4718      	bx	r3

0800e0aa <_ZN8touchgfx8TextAreaD1Ev>:
 800e0aa:	4770      	bx	lr

0800e0ac <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800e0ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0b2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e0b4:	4299      	cmp	r1, r3
 800e0b6:	d029      	beq.n	800e10c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800e0b8:	4b15      	ldr	r3, [pc, #84]	; (800e110 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	b92b      	cbnz	r3, 800e0ca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800e0be:	4b15      	ldr	r3, [pc, #84]	; (800e114 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800e0c0:	21ae      	movs	r1, #174	; 0xae
 800e0c2:	4a15      	ldr	r2, [pc, #84]	; (800e118 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e0c4:	4815      	ldr	r0, [pc, #84]	; (800e11c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800e0c6:	f00e f939 	bl	801c33c <__assert_func>
 800e0ca:	4a15      	ldr	r2, [pc, #84]	; (800e120 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800e0cc:	8812      	ldrh	r2, [r2, #0]
 800e0ce:	428a      	cmp	r2, r1
 800e0d0:	d803      	bhi.n	800e0da <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800e0d2:	4b14      	ldr	r3, [pc, #80]	; (800e124 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800e0d4:	21af      	movs	r1, #175	; 0xaf
 800e0d6:	4a10      	ldr	r2, [pc, #64]	; (800e118 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e0d8:	e7f4      	b.n	800e0c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800e0da:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e0de:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e0e2:	4b11      	ldr	r3, [pc, #68]	; (800e128 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800e0e4:	7854      	ldrb	r4, [r2, #1]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e0ec:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e0f0:	682b      	ldr	r3, [r5, #0]
 800e0f2:	69de      	ldr	r6, [r3, #28]
 800e0f4:	4b0d      	ldr	r3, [pc, #52]	; (800e12c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800e0f6:	6818      	ldr	r0, [r3, #0]
 800e0f8:	f7f6 fbf2 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4602      	mov	r2, r0
 800e100:	4621      	mov	r1, r4
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	4628      	mov	r0, r5
 800e106:	47b0      	blx	r6
 800e108:	b002      	add	sp, #8
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	2000      	movs	r0, #0
 800e10e:	e7fb      	b.n	800e108 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800e110:	24006cb8 	.word	0x24006cb8
 800e114:	0801e108 	.word	0x0801e108
 800e118:	0801f3e4 	.word	0x0801f3e4
 800e11c:	0801e196 	.word	0x0801e196
 800e120:	24006cbc 	.word	0x24006cbc
 800e124:	0801e1bf 	.word	0x0801e1bf
 800e128:	24006cc0 	.word	0x24006cc0
 800e12c:	24006cc4 	.word	0x24006cc4

0800e130 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	6803      	ldr	r3, [r0, #0]
 800e134:	4604      	mov	r4, r0
 800e136:	b28d      	uxth	r5, r1
 800e138:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e13a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800e13c:	4b10      	ldr	r3, [pc, #64]	; (800e180 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	b92b      	cbnz	r3, 800e14e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800e144:	21ae      	movs	r1, #174	; 0xae
 800e146:	4a10      	ldr	r2, [pc, #64]	; (800e188 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e148:	4810      	ldr	r0, [pc, #64]	; (800e18c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800e14a:	f00e f8f7 	bl	801c33c <__assert_func>
 800e14e:	4910      	ldr	r1, [pc, #64]	; (800e190 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800e150:	8809      	ldrh	r1, [r1, #0]
 800e152:	4291      	cmp	r1, r2
 800e154:	d803      	bhi.n	800e15e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800e156:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800e158:	21af      	movs	r1, #175	; 0xaf
 800e15a:	4a0b      	ldr	r2, [pc, #44]	; (800e188 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e15c:	e7f4      	b.n	800e148 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800e15e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800e162:	4b0d      	ldr	r3, [pc, #52]	; (800e198 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e16a:	6803      	ldr	r3, [r0, #0]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	4798      	blx	r3
 800e170:	1a29      	subs	r1, r5, r0
 800e172:	4633      	mov	r3, r6
 800e174:	4620      	mov	r0, r4
 800e176:	b209      	sxth	r1, r1
 800e178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e17c:	4718      	bx	r3
 800e17e:	bf00      	nop
 800e180:	24006cb8 	.word	0x24006cb8
 800e184:	0801e108 	.word	0x0801e108
 800e188:	0801f3e4 	.word	0x0801f3e4
 800e18c:	0801e196 	.word	0x0801e196
 800e190:	24006cbc 	.word	0x24006cbc
 800e194:	0801e1bf 	.word	0x0801e1bf
 800e198:	24006cc0 	.word	0x24006cc0

0800e19c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1a4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e1a6:	b08c      	sub	sp, #48	; 0x30
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	4688      	mov	r8, r1
 800e1ae:	d05f      	beq.n	800e270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e1b0:	4e31      	ldr	r6, [pc, #196]	; (800e278 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800e1b2:	6832      	ldr	r2, [r6, #0]
 800e1b4:	b92a      	cbnz	r2, 800e1c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800e1b6:	4b31      	ldr	r3, [pc, #196]	; (800e27c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800e1b8:	21ae      	movs	r1, #174	; 0xae
 800e1ba:	4a31      	ldr	r2, [pc, #196]	; (800e280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e1bc:	4831      	ldr	r0, [pc, #196]	; (800e284 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800e1be:	f00e f8bd 	bl	801c33c <__assert_func>
 800e1c2:	4d31      	ldr	r5, [pc, #196]	; (800e288 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800e1c4:	8829      	ldrh	r1, [r5, #0]
 800e1c6:	4299      	cmp	r1, r3
 800e1c8:	d803      	bhi.n	800e1d2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800e1ca:	4b30      	ldr	r3, [pc, #192]	; (800e28c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800e1cc:	21af      	movs	r1, #175	; 0xaf
 800e1ce:	4a2c      	ldr	r2, [pc, #176]	; (800e280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e1d0:	e7f4      	b.n	800e1bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800e1d2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e1d6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e1da:	4b2d      	ldr	r3, [pc, #180]	; (800e290 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d044      	beq.n	800e270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e1e6:	784b      	ldrb	r3, [r1, #1]
 800e1e8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e1ec:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e1f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e1f4:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e1f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e1fc:	4b25      	ldr	r3, [pc, #148]	; (800e294 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800e1fe:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800e208:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e20c:	9207      	str	r2, [sp, #28]
 800e20e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e210:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e214:	f88d a020 	strb.w	sl, [sp, #32]
 800e218:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e21c:	9009      	str	r0, [sp, #36]	; 0x24
 800e21e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e222:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e226:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800e22a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e22e:	b10a      	cbz	r2, 800e234 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800e230:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800e232:	b907      	cbnz	r7, 800e236 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800e234:	689f      	ldr	r7, [r3, #8]
 800e236:	f10d 0914 	add.w	r9, sp, #20
 800e23a:	4621      	mov	r1, r4
 800e23c:	4648      	mov	r0, r9
 800e23e:	f003 fad5 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e242:	6833      	ldr	r3, [r6, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d0b6      	beq.n	800e1b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800e248:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e24a:	882b      	ldrh	r3, [r5, #0]
 800e24c:	428b      	cmp	r3, r1
 800e24e:	d9bc      	bls.n	800e1ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800e250:	4b11      	ldr	r3, [pc, #68]	; (800e298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800e252:	6818      	ldr	r0, [r3, #0]
 800e254:	f7f6 fb44 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e258:	2300      	movs	r3, #0
 800e25a:	9001      	str	r0, [sp, #4]
 800e25c:	4638      	mov	r0, r7
 800e25e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e262:	ab07      	add	r3, sp, #28
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	4643      	mov	r3, r8
 800e268:	e899 0006 	ldmia.w	r9, {r1, r2}
 800e26c:	f7f6 faea 	bl	8004844 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e270:	b00c      	add	sp, #48	; 0x30
 800e272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e276:	bf00      	nop
 800e278:	24006cb8 	.word	0x24006cb8
 800e27c:	0801e108 	.word	0x0801e108
 800e280:	0801f3e4 	.word	0x0801f3e4
 800e284:	0801e196 	.word	0x0801e196
 800e288:	24006cbc 	.word	0x24006cbc
 800e28c:	0801e1bf 	.word	0x0801e1bf
 800e290:	24006cc0 	.word	0x24006cc0
 800e294:	24006c68 	.word	0x24006c68
 800e298:	24006cc4 	.word	0x24006cc4

0800e29c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800e29c:	b40e      	push	{r1, r2, r3}
 800e29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e2a8:	b09c      	sub	sp, #112	; 0x70
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d06b      	beq.n	800e388 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800e2b0:	aa26      	add	r2, sp, #152	; 0x98
 800e2b2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800e39c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800e2b6:	9202      	str	r2, [sp, #8]
 800e2b8:	f8da 2000 	ldr.w	r2, [sl]
 800e2bc:	b92a      	cbnz	r2, 800e2ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800e2be:	4b33      	ldr	r3, [pc, #204]	; (800e38c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800e2c0:	21ae      	movs	r1, #174	; 0xae
 800e2c2:	4a33      	ldr	r2, [pc, #204]	; (800e390 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e2c4:	4833      	ldr	r0, [pc, #204]	; (800e394 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800e2c6:	f00e f839 	bl	801c33c <__assert_func>
 800e2ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e3a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800e2ce:	f8b8 1000 	ldrh.w	r1, [r8]
 800e2d2:	4299      	cmp	r1, r3
 800e2d4:	d803      	bhi.n	800e2de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800e2d6:	4b30      	ldr	r3, [pc, #192]	; (800e398 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800e2d8:	21af      	movs	r1, #175	; 0xaf
 800e2da:	4a2d      	ldr	r2, [pc, #180]	; (800e390 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e2dc:	e7f2      	b.n	800e2c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800e2de:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800e3a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800e2e2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e2e6:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e2ee:	682b      	ldr	r3, [r5, #0]
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f4:	4798      	blx	r3
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	b207      	sxth	r7, r0
 800e2fa:	a803      	add	r0, sp, #12
 800e2fc:	f003 fe50 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 800e300:	682b      	ldr	r3, [r5, #0]
 800e302:	4628      	mov	r0, r5
 800e304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e306:	4798      	blx	r3
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	4683      	mov	fp, r0
 800e30c:	4628      	mov	r0, r5
 800e30e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e310:	4798      	blx	r3
 800e312:	465b      	mov	r3, fp
 800e314:	9000      	str	r0, [sp, #0]
 800e316:	a803      	add	r0, sp, #12
 800e318:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e31a:	9a02      	ldr	r2, [sp, #8]
 800e31c:	f003 fe93 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e320:	f8da 3000 	ldr.w	r3, [sl]
 800e324:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0c8      	beq.n	800e2be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800e32c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e32e:	f8b8 0000 	ldrh.w	r0, [r8]
 800e332:	4290      	cmp	r0, r2
 800e334:	d9cf      	bls.n	800e2d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800e336:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e33a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800e33e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800e342:	786a      	ldrb	r2, [r5, #1]
 800e344:	8925      	ldrh	r5, [r4, #8]
 800e346:	f8d9 3000 	ldr.w	r3, [r9]
 800e34a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800e34e:	eba5 050c 	sub.w	r5, r5, ip
 800e352:	b22d      	sxth	r5, r5
 800e354:	9500      	str	r5, [sp, #0]
 800e356:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e35a:	a803      	add	r0, sp, #12
 800e35c:	f001 fd61 	bl	800fe22 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800e360:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800e364:	b203      	sxth	r3, r0
 800e366:	18b9      	adds	r1, r7, r2
 800e368:	2900      	cmp	r1, #0
 800e36a:	dd0b      	ble.n	800e384 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800e36c:	3b01      	subs	r3, #1
 800e36e:	fb13 f302 	smulbb	r3, r3, r2
 800e372:	fb16 3300 	smlabb	r3, r6, r0, r3
 800e376:	b21f      	sxth	r7, r3
 800e378:	4638      	mov	r0, r7
 800e37a:	b01c      	add	sp, #112	; 0x70
 800e37c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	b003      	add	sp, #12
 800e382:	4770      	bx	lr
 800e384:	2b00      	cmp	r3, #0
 800e386:	dcf7      	bgt.n	800e378 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e388:	2700      	movs	r7, #0
 800e38a:	e7f5      	b.n	800e378 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e38c:	0801e108 	.word	0x0801e108
 800e390:	0801f3e4 	.word	0x0801f3e4
 800e394:	0801e196 	.word	0x0801e196
 800e398:	0801e1bf 	.word	0x0801e1bf
 800e39c:	24006cb8 	.word	0x24006cb8
 800e3a0:	24006cbc 	.word	0x24006cbc
 800e3a4:	24006cc0 	.word	0x24006cc0

0800e3a8 <_ZN8touchgfx8TextAreaD0Ev>:
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	213c      	movs	r1, #60	; 0x3c
 800e3ae:	f00d feaf 	bl	801c110 <_ZdlPvj>
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	bd10      	pop	{r4, pc}
	...

0800e3b8 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3be:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4299      	cmp	r1, r3
 800e3c4:	d01e      	beq.n	800e404 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800e3c6:	6803      	ldr	r3, [r0, #0]
 800e3c8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e3ca:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	b92b      	cbnz	r3, 800e3dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800e3d0:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800e3d2:	21ae      	movs	r1, #174	; 0xae
 800e3d4:	4a0e      	ldr	r2, [pc, #56]	; (800e410 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e3d6:	480f      	ldr	r0, [pc, #60]	; (800e414 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800e3d8:	f00d ffb0 	bl	801c33c <__assert_func>
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	; (800e418 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	428b      	cmp	r3, r1
 800e3e2:	d803      	bhi.n	800e3ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800e3e4:	4b0d      	ldr	r3, [pc, #52]	; (800e41c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800e3e6:	21af      	movs	r1, #175	; 0xaf
 800e3e8:	4a09      	ldr	r2, [pc, #36]	; (800e410 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e3ea:	e7f4      	b.n	800e3d6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800e3ec:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800e3ee:	6818      	ldr	r0, [r3, #0]
 800e3f0:	f7f6 fa76 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	46ac      	mov	ip, r5
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e402:	4760      	bx	ip
 800e404:	2000      	movs	r0, #0
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	24006cb8 	.word	0x24006cb8
 800e40c:	0801e108 	.word	0x0801e108
 800e410:	0801f3e4 	.word	0x0801f3e4
 800e414:	0801e196 	.word	0x0801e196
 800e418:	24006cbc 	.word	0x24006cbc
 800e41c:	0801e1bf 	.word	0x0801e1bf
 800e420:	24006cc4 	.word	0x24006cc4

0800e424 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	6803      	ldr	r3, [r0, #0]
 800e428:	4604      	mov	r4, r0
 800e42a:	4615      	mov	r5, r2
 800e42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e42e:	4798      	blx	r3
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	4629      	mov	r1, r5
 800e434:	4620      	mov	r0, r4
 800e436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e43c:	4718      	bx	r3

0800e43e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800e43e:	b538      	push	{r3, r4, r5, lr}
 800e440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e444:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e446:	4604      	mov	r4, r0
 800e448:	429a      	cmp	r2, r3
 800e44a:	d014      	beq.n	800e476 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800e44c:	6803      	ldr	r3, [r0, #0]
 800e44e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e450:	4798      	blx	r3
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	4605      	mov	r5, r0
 800e456:	4620      	mov	r0, r4
 800e458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e45a:	4798      	blx	r3
 800e45c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e460:	b22d      	sxth	r5, r5
 800e462:	4601      	mov	r1, r0
 800e464:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e468:	bf06      	itte	eq
 800e46a:	4602      	moveq	r2, r0
 800e46c:	4629      	moveq	r1, r5
 800e46e:	462a      	movne	r2, r5
 800e470:	4620      	mov	r0, r4
 800e472:	f7ff ffd7 	bl	800e424 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e476:	bd38      	pop	{r3, r4, r5, pc}

0800e478 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800e478:	888a      	ldrh	r2, [r1, #4]
 800e47a:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e47c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800e480:	b922      	cbnz	r2, 800e48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e482:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e486:	b90b      	cbnz	r3, 800e48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e488:	f7ff bfd9 	b.w	800e43e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800e48c:	4770      	bx	lr

0800e48e <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e48e:	2300      	movs	r3, #0
 800e490:	8083      	strh	r3, [r0, #4]
 800e492:	80c3      	strh	r3, [r0, #6]
 800e494:	8003      	strh	r3, [r0, #0]
 800e496:	8043      	strh	r3, [r0, #2]
 800e498:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800e49c:	2bff      	cmp	r3, #255	; 0xff
 800e49e:	bf01      	itttt	eq
 800e4a0:	890b      	ldrheq	r3, [r1, #8]
 800e4a2:	8083      	strheq	r3, [r0, #4]
 800e4a4:	894b      	ldrheq	r3, [r1, #10]
 800e4a6:	80c3      	strheq	r3, [r0, #6]
 800e4a8:	4770      	bx	lr
	...

0800e4ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	466b      	mov	r3, sp
 800e4b2:	6808      	ldr	r0, [r1, #0]
 800e4b4:	6849      	ldr	r1, [r1, #4]
 800e4b6:	c303      	stmia	r3!, {r0, r1}
 800e4b8:	6823      	ldr	r3, [r4, #0]
 800e4ba:	4669      	mov	r1, sp
 800e4bc:	4620      	mov	r0, r4
 800e4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c0:	4798      	blx	r3
 800e4c2:	4b08      	ldr	r3, [pc, #32]	; (800e4e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e4ca:	b10a      	cbz	r2, 800e4d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e4cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e4ce:	b900      	cbnz	r0, 800e4d2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e4d0:	6898      	ldr	r0, [r3, #8]
 800e4d2:	6803      	ldr	r3, [r0, #0]
 800e4d4:	4669      	mov	r1, sp
 800e4d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e4d8:	699d      	ldr	r5, [r3, #24]
 800e4da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e4de:	47a8      	blx	r5
 800e4e0:	b003      	add	sp, #12
 800e4e2:	bd30      	pop	{r4, r5, pc}
 800e4e4:	24006c68 	.word	0x24006c68

0800e4e8 <_ZN8touchgfx3BoxD1Ev>:
 800e4e8:	4770      	bx	lr

0800e4ea <_ZN8touchgfx3BoxD0Ev>:
 800e4ea:	b510      	push	{r4, lr}
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	212c      	movs	r1, #44	; 0x2c
 800e4f0:	f00d fe0e 	bl	801c110 <_ZdlPvj>
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	bd10      	pop	{r4, pc}

0800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	880b      	ldrh	r3, [r1, #0]
 800e4fc:	4605      	mov	r5, r0
 800e4fe:	4604      	mov	r4, r0
 800e500:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e502:	8813      	ldrh	r3, [r2, #0]
 800e504:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e508:	4628      	mov	r0, r5
 800e50a:	f005 fb05 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e50e:	4606      	mov	r6, r0
 800e510:	4628      	mov	r0, r5
 800e512:	f005 fb3b 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	4605      	mov	r5, r0
 800e51a:	b231      	sxth	r1, r6
 800e51c:	4620      	mov	r0, r4
 800e51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e520:	4798      	blx	r3
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	b229      	sxth	r1, r5
 800e526:	4620      	mov	r0, r4
 800e528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e52e:	4718      	bx	r3

0800e530 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e530:	b510      	push	{r4, lr}
 800e532:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800e536:	4604      	mov	r4, r0
 800e538:	2bff      	cmp	r3, #255	; 0xff
 800e53a:	d006      	beq.n	800e54a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e53c:	2300      	movs	r3, #0
 800e53e:	8003      	strh	r3, [r0, #0]
 800e540:	8043      	strh	r3, [r0, #2]
 800e542:	8083      	strh	r3, [r0, #4]
 800e544:	80c3      	strh	r3, [r0, #6]
 800e546:	4620      	mov	r0, r4
 800e548:	bd10      	pop	{r4, pc}
 800e54a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800e54e:	b11b      	cbz	r3, 800e558 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e550:	3130      	adds	r1, #48	; 0x30
 800e552:	f005 fb55 	bl	8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e556:	e7f6      	b.n	800e546 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e558:	312e      	adds	r1, #46	; 0x2e
 800e55a:	e7fa      	b.n	800e552 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e55c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e564:	b08a      	sub	sp, #40	; 0x28
 800e566:	4604      	mov	r4, r0
 800e568:	4688      	mov	r8, r1
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d044      	beq.n	800e5f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800e56e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e570:	a805      	add	r0, sp, #20
 800e572:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e576:	f005 facf 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e57a:	4605      	mov	r5, r0
 800e57c:	b206      	sxth	r6, r0
 800e57e:	a805      	add	r0, sp, #20
 800e580:	f005 fb04 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e584:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e588:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800e58c:	2300      	movs	r3, #0
 800e58e:	fa0f fc80 	sxth.w	ip, r0
 800e592:	4417      	add	r7, r2
 800e594:	9306      	str	r3, [sp, #24]
 800e596:	b2bf      	uxth	r7, r7
 800e598:	fa0f fe87 	sxth.w	lr, r7
 800e59c:	459e      	cmp	lr, r3
 800e59e:	dd2d      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e5a0:	4296      	cmp	r6, r2
 800e5a2:	dd2b      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e5a4:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800e5a8:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800e5ac:	4419      	add	r1, r3
 800e5ae:	b289      	uxth	r1, r1
 800e5b0:	fa0f f881 	sxth.w	r8, r1
 800e5b4:	f1b8 0f00 	cmp.w	r8, #0
 800e5b8:	dd20      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e5ba:	459c      	cmp	ip, r3
 800e5bc:	dd1e      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e5be:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e5c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e5c6:	4576      	cmp	r6, lr
 800e5c8:	bfa8      	it	ge
 800e5ca:	463d      	movge	r5, r7
 800e5cc:	45c4      	cmp	ip, r8
 800e5ce:	bfa8      	it	ge
 800e5d0:	4608      	movge	r0, r1
 800e5d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e5d6:	1aad      	subs	r5, r5, r2
 800e5d8:	1ac0      	subs	r0, r0, r3
 800e5da:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e5de:	f8ad 501c 	strh.w	r5, [sp, #28]
 800e5e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e5e6:	4b1f      	ldr	r3, [pc, #124]	; (800e664 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	b953      	cbnz	r3, 800e602 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800e5ec:	4b1e      	ldr	r3, [pc, #120]	; (800e668 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800e5ee:	2187      	movs	r1, #135	; 0x87
 800e5f0:	4a1e      	ldr	r2, [pc, #120]	; (800e66c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800e5f2:	481f      	ldr	r0, [pc, #124]	; (800e670 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800e5f4:	f00d fea2 	bl	801c33c <__assert_func>
 800e5f8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e5fa:	e7b9      	b.n	800e570 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9307      	str	r3, [sp, #28]
 800e600:	e7f1      	b.n	800e5e6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e602:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d026      	beq.n	800e65c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e60e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e612:	2b00      	cmp	r3, #0
 800e614:	dd22      	ble.n	800e65c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e616:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dd1e      	ble.n	800e65c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e61e:	2300      	movs	r3, #0
 800e620:	a908      	add	r1, sp, #32
 800e622:	4620      	mov	r0, r4
 800e624:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62c:	4798      	blx	r3
 800e62e:	4b11      	ldr	r3, [pc, #68]	; (800e674 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e636:	b10a      	cbz	r2, 800e63c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e638:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e63a:	b900      	cbnz	r0, 800e63e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800e63c:	6898      	ldr	r0, [r3, #8]
 800e63e:	2501      	movs	r5, #1
 800e640:	6801      	ldr	r1, [r0, #0]
 800e642:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800e646:	9502      	str	r5, [sp, #8]
 800e648:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800e64c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e650:	9401      	str	r4, [sp, #4]
 800e652:	ac06      	add	r4, sp, #24
 800e654:	9400      	str	r4, [sp, #0]
 800e656:	688c      	ldr	r4, [r1, #8]
 800e658:	a905      	add	r1, sp, #20
 800e65a:	47a0      	blx	r4
 800e65c:	b00a      	add	sp, #40	; 0x28
 800e65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e662:	bf00      	nop
 800e664:	24006cf0 	.word	0x24006cf0
 800e668:	0801f1f6 	.word	0x0801f1f6
 800e66c:	0801f478 	.word	0x0801f478
 800e670:	0801f232 	.word	0x0801f232
 800e674:	24006c68 	.word	0x24006c68

0800e678 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800e678:	4770      	bx	lr
	...

0800e67c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800e67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e67e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e682:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e684:	4606      	mov	r6, r0
 800e686:	4299      	cmp	r1, r3
 800e688:	d02a      	beq.n	800e6e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800e68a:	4b16      	ldr	r3, [pc, #88]	; (800e6e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	b92b      	cbnz	r3, 800e69c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800e690:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800e692:	21ae      	movs	r1, #174	; 0xae
 800e694:	4a15      	ldr	r2, [pc, #84]	; (800e6ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e696:	4816      	ldr	r0, [pc, #88]	; (800e6f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800e698:	f00d fe50 	bl	801c33c <__assert_func>
 800e69c:	4a15      	ldr	r2, [pc, #84]	; (800e6f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800e69e:	8812      	ldrh	r2, [r2, #0]
 800e6a0:	428a      	cmp	r2, r1
 800e6a2:	d803      	bhi.n	800e6ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800e6a4:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800e6a6:	21af      	movs	r1, #175	; 0xaf
 800e6a8:	4a10      	ldr	r2, [pc, #64]	; (800e6ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e6aa:	e7f4      	b.n	800e696 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800e6ac:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e6b0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e6b4:	4b11      	ldr	r3, [pc, #68]	; (800e6fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800e6b6:	7854      	ldrb	r4, [r2, #1]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e6be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e6c2:	682b      	ldr	r3, [r5, #0]
 800e6c4:	69df      	ldr	r7, [r3, #28]
 800e6c6:	4b0e      	ldr	r3, [pc, #56]	; (800e700 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800e6c8:	6818      	ldr	r0, [r3, #0]
 800e6ca:	f7f6 f909 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e6da:	47b8      	blx	r7
 800e6dc:	b003      	add	sp, #12
 800e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e7fb      	b.n	800e6dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800e6e4:	24006cb8 	.word	0x24006cb8
 800e6e8:	0801e108 	.word	0x0801e108
 800e6ec:	0801f524 	.word	0x0801f524
 800e6f0:	0801e196 	.word	0x0801e196
 800e6f4:	24006cbc 	.word	0x24006cbc
 800e6f8:	0801e1bf 	.word	0x0801e1bf
 800e6fc:	24006cc0 	.word	0x24006cc0
 800e700:	24006cc4 	.word	0x24006cc4

0800e704 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e70a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e70c:	4604      	mov	r4, r0
 800e70e:	4299      	cmp	r1, r3
 800e710:	d01e      	beq.n	800e750 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800e712:	6803      	ldr	r3, [r0, #0]
 800e714:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e716:	4b0f      	ldr	r3, [pc, #60]	; (800e754 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	b92b      	cbnz	r3, 800e728 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800e71c:	4b0e      	ldr	r3, [pc, #56]	; (800e758 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800e71e:	21ae      	movs	r1, #174	; 0xae
 800e720:	4a0e      	ldr	r2, [pc, #56]	; (800e75c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e722:	480f      	ldr	r0, [pc, #60]	; (800e760 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800e724:	f00d fe0a 	bl	801c33c <__assert_func>
 800e728:	4b0e      	ldr	r3, [pc, #56]	; (800e764 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	428b      	cmp	r3, r1
 800e72e:	d803      	bhi.n	800e738 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800e730:	4b0d      	ldr	r3, [pc, #52]	; (800e768 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800e732:	21af      	movs	r1, #175	; 0xaf
 800e734:	4a09      	ldr	r2, [pc, #36]	; (800e75c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e736:	e7f4      	b.n	800e722 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800e738:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800e73a:	6818      	ldr	r0, [r3, #0]
 800e73c:	f7f6 f8d0 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e740:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e742:	4601      	mov	r1, r0
 800e744:	46ac      	mov	ip, r5
 800e746:	4620      	mov	r0, r4
 800e748:	2300      	movs	r3, #0
 800e74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e74e:	4760      	bx	ip
 800e750:	2000      	movs	r0, #0
 800e752:	bd70      	pop	{r4, r5, r6, pc}
 800e754:	24006cb8 	.word	0x24006cb8
 800e758:	0801e108 	.word	0x0801e108
 800e75c:	0801f524 	.word	0x0801f524
 800e760:	0801e196 	.word	0x0801e196
 800e764:	24006cbc 	.word	0x24006cbc
 800e768:	0801e1bf 	.word	0x0801e1bf
 800e76c:	24006cc4 	.word	0x24006cc4

0800e770 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e770:	b510      	push	{r4, lr}
 800e772:	4604      	mov	r4, r0
 800e774:	2140      	movs	r1, #64	; 0x40
 800e776:	f00d fccb 	bl	801c110 <_ZdlPvj>
 800e77a:	4620      	mov	r0, r4
 800e77c:	bd10      	pop	{r4, pc}
	...

0800e780 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800e780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e788:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e78a:	b08c      	sub	sp, #48	; 0x30
 800e78c:	4604      	mov	r4, r0
 800e78e:	4293      	cmp	r3, r2
 800e790:	460e      	mov	r6, r1
 800e792:	d05d      	beq.n	800e850 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e794:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800e874 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800e798:	f8d8 2000 	ldr.w	r2, [r8]
 800e79c:	b92a      	cbnz	r2, 800e7aa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800e79e:	4b2e      	ldr	r3, [pc, #184]	; (800e858 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800e7a0:	21ae      	movs	r1, #174	; 0xae
 800e7a2:	4a2e      	ldr	r2, [pc, #184]	; (800e85c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e7a4:	482e      	ldr	r0, [pc, #184]	; (800e860 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800e7a6:	f00d fdc9 	bl	801c33c <__assert_func>
 800e7aa:	4f2e      	ldr	r7, [pc, #184]	; (800e864 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800e7ac:	8839      	ldrh	r1, [r7, #0]
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	d803      	bhi.n	800e7ba <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800e7b2:	4b2d      	ldr	r3, [pc, #180]	; (800e868 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800e7b4:	21af      	movs	r1, #175	; 0xaf
 800e7b6:	4a29      	ldr	r2, [pc, #164]	; (800e85c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e7b8:	e7f4      	b.n	800e7a4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800e7ba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e7be:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e7c2:	4b2a      	ldr	r3, [pc, #168]	; (800e86c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7ca:	2a00      	cmp	r2, #0
 800e7cc:	d040      	beq.n	800e850 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e7ce:	784b      	ldrb	r3, [r1, #1]
 800e7d0:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800e7d4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e7d8:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e7dc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e7e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e7e4:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e7e8:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e7ec:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e7f0:	ad05      	add	r5, sp, #20
 800e7f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e7f4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e7f8:	9207      	str	r2, [sp, #28]
 800e7fa:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e7fe:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e802:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e806:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e80a:	f88d a020 	strb.w	sl, [sp, #32]
 800e80e:	9009      	str	r0, [sp, #36]	; 0x24
 800e810:	f7fe fb92 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800e814:	4621      	mov	r1, r4
 800e816:	4681      	mov	r9, r0
 800e818:	4628      	mov	r0, r5
 800e81a:	f002 ffe7 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e81e:	f8d8 3000 	ldr.w	r3, [r8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d0bb      	beq.n	800e79e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800e826:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e828:	883b      	ldrh	r3, [r7, #0]
 800e82a:	428b      	cmp	r3, r1
 800e82c:	d9c1      	bls.n	800e7b2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800e82e:	4b10      	ldr	r3, [pc, #64]	; (800e870 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	f7f6 f855 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800e836:	2300      	movs	r3, #0
 800e838:	9303      	str	r3, [sp, #12]
 800e83a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e83c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800e840:	ab07      	add	r3, sp, #28
 800e842:	4648      	mov	r0, r9
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	4633      	mov	r3, r6
 800e848:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e84c:	f7f5 fffa 	bl	8004844 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e850:	b00c      	add	sp, #48	; 0x30
 800e852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e856:	bf00      	nop
 800e858:	0801e108 	.word	0x0801e108
 800e85c:	0801f524 	.word	0x0801f524
 800e860:	0801e196 	.word	0x0801e196
 800e864:	24006cbc 	.word	0x24006cbc
 800e868:	0801e1bf 	.word	0x0801e1bf
 800e86c:	24006cc0 	.word	0x24006cc0
 800e870:	24006cc4 	.word	0x24006cc4
 800e874:	24006cb8 	.word	0x24006cb8

0800e878 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800e878:	4770      	bx	lr

0800e87a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800e87a:	b510      	push	{r4, lr}
 800e87c:	4604      	mov	r4, r0
 800e87e:	2134      	movs	r1, #52	; 0x34
 800e880:	f00d fc46 	bl	801c110 <_ZdlPvj>
 800e884:	4620      	mov	r0, r4
 800e886:	bd10      	pop	{r4, pc}

0800e888 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800e888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e88e:	4604      	mov	r4, r0
 800e890:	460e      	mov	r6, r1
 800e892:	b08e      	sub	sp, #56	; 0x38
 800e894:	b218      	sxth	r0, r3
 800e896:	8921      	ldrh	r1, [r4, #8]
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	8962      	ldrh	r2, [r4, #10]
 800e89c:	f8ad 0000 	strh.w	r0, [sp]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	f8ad 0002 	strh.w	r0, [sp, #2]
 800e8a6:	1ac9      	subs	r1, r1, r3
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	b209      	sxth	r1, r1
 800e8ac:	b21b      	sxth	r3, r3
 800e8ae:	2900      	cmp	r1, #0
 800e8b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e8b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e8b8:	dd5e      	ble.n	800e978 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	dd5c      	ble.n	800e978 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e8be:	6830      	ldr	r0, [r6, #0]
 800e8c0:	ab02      	add	r3, sp, #8
 800e8c2:	6871      	ldr	r1, [r6, #4]
 800e8c4:	c303      	stmia	r3!, {r0, r1}
 800e8c6:	4669      	mov	r1, sp
 800e8c8:	a802      	add	r0, sp, #8
 800e8ca:	f7fe f865 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	a902      	add	r1, sp, #8
 800e8d2:	f7ff fdeb 	bl	800e4ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800e8d6:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	d05f      	beq.n	800e99c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e8dc:	8963      	ldrh	r3, [r4, #10]
 800e8de:	b202      	sxth	r2, r0
 800e8e0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e8e4:	2500      	movs	r5, #0
 800e8e6:	1a1f      	subs	r7, r3, r0
 800e8e8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800e8ec:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e8f0:	b21b      	sxth	r3, r3
 800e8f2:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e8f6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800e8fa:	af04      	add	r7, sp, #16
 800e8fc:	1a09      	subs	r1, r1, r0
 800e8fe:	9506      	str	r5, [sp, #24]
 800e900:	f8ad 201e 	strh.w	r2, [sp, #30]
 800e904:	f8ad 5020 	strh.w	r5, [sp, #32]
 800e908:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e90c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800e910:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e914:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e918:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e91c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800e920:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800e924:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e928:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e92c:	ab06      	add	r3, sp, #24
 800e92e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e932:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e936:	e887 0003 	stmia.w	r7, {r0, r1}
 800e93a:	4631      	mov	r1, r6
 800e93c:	4638      	mov	r0, r7
 800e93e:	f7fe f82b 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800e942:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e946:	2b00      	cmp	r3, #0
 800e948:	dd12      	ble.n	800e970 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e94a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	dd0e      	ble.n	800e970 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e952:	6823      	ldr	r3, [r4, #0]
 800e954:	4639      	mov	r1, r7
 800e956:	4620      	mov	r0, r4
 800e958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95a:	4798      	blx	r3
 800e95c:	f7fe faec 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800e960:	6803      	ldr	r3, [r0, #0]
 800e962:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e964:	4639      	mov	r1, r7
 800e966:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e96a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e96e:	47c0      	blx	r8
 800e970:	3501      	adds	r5, #1
 800e972:	2d04      	cmp	r5, #4
 800e974:	d1da      	bne.n	800e92c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800e976:	e011      	b.n	800e99c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e978:	6830      	ldr	r0, [r6, #0]
 800e97a:	ab06      	add	r3, sp, #24
 800e97c:	6871      	ldr	r1, [r6, #4]
 800e97e:	c303      	stmia	r3!, {r0, r1}
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	a906      	add	r1, sp, #24
 800e984:	4620      	mov	r0, r4
 800e986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e988:	4798      	blx	r3
 800e98a:	f7fe fad5 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 800e98e:	6803      	ldr	r3, [r0, #0]
 800e990:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e992:	a906      	add	r1, sp, #24
 800e994:	699d      	ldr	r5, [r3, #24]
 800e996:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e99a:	47a8      	blx	r5
 800e99c:	b00e      	add	sp, #56	; 0x38
 800e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e9a2 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 800e9a2:	4770      	bx	lr

0800e9a4 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	213c      	movs	r1, #60	; 0x3c
 800e9aa:	f00d fbb1 	bl	801c110 <_ZdlPvj>
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	bd10      	pop	{r4, pc}

0800e9b2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 800e9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b6:	461c      	mov	r4, r3
 800e9b8:	4606      	mov	r6, r0
 800e9ba:	9f06      	ldr	r7, [sp, #24]
 800e9bc:	f7ff fd9c 	bl	800e4f8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800e9c0:	8823      	ldrh	r3, [r4, #0]
 800e9c2:	f04f 0802 	mov.w	r8, #2
 800e9c6:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	86b3      	strh	r3, [r6, #52]	; 0x34
 800e9ce:	883b      	ldrh	r3, [r7, #0]
 800e9d0:	fb95 f5f8 	sdiv	r5, r5, r8
 800e9d4:	86f3      	strh	r3, [r6, #54]	; 0x36
 800e9d6:	b2ad      	uxth	r5, r5
 800e9d8:	f005 f89e 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e9dc:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800e9e0:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 800e9e4:	fb94 f4f8 	sdiv	r4, r4, r8
 800e9e8:	b2a4      	uxth	r4, r4
 800e9ea:	8730      	strh	r0, [r6, #56]	; 0x38
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	f005 f8cd 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e9f2:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800e9f6:	8770      	strh	r0, [r6, #58]	; 0x3a
 800e9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e9fc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 800e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea00:	4604      	mov	r4, r0
 800ea02:	b08c      	sub	sp, #48	; 0x30
 800ea04:	460d      	mov	r5, r1
 800ea06:	f7ff fda9 	bl	800e55c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800ea0a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ea0e:	b33b      	cbz	r3, 800ea60 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 800ea10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ea12:	a805      	add	r0, sp, #20
 800ea14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea18:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 800ea1c:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 800ea20:	f005 f87a 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ea24:	4606      	mov	r6, r0
 800ea26:	a805      	add	r0, sp, #20
 800ea28:	f005 f8b0 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ea2c:	6869      	ldr	r1, [r5, #4]
 800ea2e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ea32:	ab08      	add	r3, sp, #32
 800ea34:	6828      	ldr	r0, [r5, #0]
 800ea36:	ad08      	add	r5, sp, #32
 800ea38:	f8ad 8018 	strh.w	r8, [sp, #24]
 800ea3c:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ea40:	f8ad 601c 	strh.w	r6, [sp, #28]
 800ea44:	c303      	stmia	r3!, {r0, r1}
 800ea46:	a906      	add	r1, sp, #24
 800ea48:	4628      	mov	r0, r5
 800ea4a:	f7fd ffa5 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800ea4e:	4b25      	ldr	r3, [pc, #148]	; (800eae4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	b93b      	cbnz	r3, 800ea64 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 800ea54:	4b24      	ldr	r3, [pc, #144]	; (800eae8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 800ea56:	2187      	movs	r1, #135	; 0x87
 800ea58:	4a24      	ldr	r2, [pc, #144]	; (800eaec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 800ea5a:	4825      	ldr	r0, [pc, #148]	; (800eaf0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 800ea5c:	f00d fc6e 	bl	801c33c <__assert_func>
 800ea60:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ea62:	e7d6      	b.n	800ea12 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 800ea64:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ea68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d035      	beq.n	800eadc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea70:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	dd31      	ble.n	800eadc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea78:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd2d      	ble.n	800eadc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea80:	2300      	movs	r3, #0
 800ea82:	a90a      	add	r1, sp, #40	; 0x28
 800ea84:	4620      	mov	r0, r4
 800ea86:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8e:	4798      	blx	r3
 800ea90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ea94:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800ea96:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ea9a:	1a9b      	subs	r3, r3, r2
 800ea9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eaa0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800eaa2:	1ac9      	subs	r1, r1, r3
 800eaa4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800eaa8:	4912      	ldr	r1, [pc, #72]	; (800eaf4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 800eaaa:	6809      	ldr	r1, [r1, #0]
 800eaac:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 800eab0:	b108      	cbz	r0, 800eab6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 800eab2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800eab4:	b900      	cbnz	r0, 800eab8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 800eab6:	6888      	ldr	r0, [r1, #8]
 800eab8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800eabc:	2601      	movs	r6, #1
 800eabe:	440b      	add	r3, r1
 800eac0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800eac4:	440a      	add	r2, r1
 800eac6:	6801      	ldr	r1, [r0, #0]
 800eac8:	9602      	str	r6, [sp, #8]
 800eaca:	b21b      	sxth	r3, r3
 800eacc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800ead0:	b212      	sxth	r2, r2
 800ead2:	e9cd 5400 	strd	r5, r4, [sp]
 800ead6:	688c      	ldr	r4, [r1, #8]
 800ead8:	a905      	add	r1, sp, #20
 800eada:	47a0      	blx	r4
 800eadc:	b00c      	add	sp, #48	; 0x30
 800eade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae2:	bf00      	nop
 800eae4:	24006cf0 	.word	0x24006cf0
 800eae8:	0801f1f6 	.word	0x0801f1f6
 800eaec:	0801f62c 	.word	0x0801f62c
 800eaf0:	0801f232 	.word	0x0801f232
 800eaf4:	24006c68 	.word	0x24006c68

0800eaf8 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 800eaf8:	2101      	movs	r1, #1
 800eafa:	2200      	movs	r2, #0
 800eafc:	b510      	push	{r4, lr}
 800eafe:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800eb02:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800eb06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb0a:	4c0d      	ldr	r4, [pc, #52]	; (800eb40 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800eb0c:	8082      	strh	r2, [r0, #4]
 800eb0e:	80c2      	strh	r2, [r0, #6]
 800eb10:	8102      	strh	r2, [r0, #8]
 800eb12:	8142      	strh	r2, [r0, #10]
 800eb14:	8182      	strh	r2, [r0, #12]
 800eb16:	81c2      	strh	r2, [r0, #14]
 800eb18:	8202      	strh	r2, [r0, #16]
 800eb1a:	8242      	strh	r2, [r0, #18]
 800eb1c:	61c2      	str	r2, [r0, #28]
 800eb1e:	8402      	strh	r2, [r0, #32]
 800eb20:	8442      	strh	r2, [r0, #34]	; 0x22
 800eb22:	6282      	str	r2, [r0, #40]	; 0x28
 800eb24:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800eb28:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800eb2a:	8601      	strh	r1, [r0, #48]	; 0x30
 800eb2c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800eb30:	6004      	str	r4, [r0, #0]
 800eb32:	8681      	strh	r1, [r0, #52]	; 0x34
 800eb34:	86c1      	strh	r1, [r0, #54]	; 0x36
 800eb36:	8702      	strh	r2, [r0, #56]	; 0x38
 800eb38:	8742      	strh	r2, [r0, #58]	; 0x3a
 800eb3a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	0801f5c0 	.word	0x0801f5c0

0800eb44 <_ZN8touchgfx5ImageD1Ev>:
 800eb44:	4770      	bx	lr

0800eb46 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800eb46:	b570      	push	{r4, r5, r6, lr}
 800eb48:	880b      	ldrh	r3, [r1, #0]
 800eb4a:	460d      	mov	r5, r1
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	84c3      	strh	r3, [r0, #38]	; 0x26
 800eb50:	4608      	mov	r0, r1
 800eb52:	f004 ffe1 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eb56:	4606      	mov	r6, r0
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f005 f817 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	4605      	mov	r5, r0
 800eb62:	b231      	sxth	r1, r6
 800eb64:	4620      	mov	r0, r4
 800eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb68:	4798      	blx	r3
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	b229      	sxth	r1, r5
 800eb6e:	4620      	mov	r0, r4
 800eb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb76:	4718      	bx	r3

0800eb78 <_ZN8touchgfx5ImageD0Ev>:
 800eb78:	b510      	push	{r4, lr}
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	212c      	movs	r1, #44	; 0x2c
 800eb7e:	f00d fac7 	bl	801c110 <_ZdlPvj>
 800eb82:	4620      	mov	r0, r4
 800eb84:	bd10      	pop	{r4, pc}

0800eb86 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800eb86:	b510      	push	{r4, lr}
 800eb88:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	2bff      	cmp	r3, #255	; 0xff
 800eb90:	d006      	beq.n	800eba0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800eb92:	2300      	movs	r3, #0
 800eb94:	8003      	strh	r3, [r0, #0]
 800eb96:	8043      	strh	r3, [r0, #2]
 800eb98:	8083      	strh	r3, [r0, #4]
 800eb9a:	80c3      	strh	r3, [r0, #6]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	bd10      	pop	{r4, pc}
 800eba0:	3126      	adds	r1, #38	; 0x26
 800eba2:	f005 f82d 	bl	8013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800eba6:	e7f9      	b.n	800eb9c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800eba8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800eba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebac:	4604      	mov	r4, r0
 800ebae:	b088      	sub	sp, #32
 800ebb0:	2500      	movs	r5, #0
 800ebb2:	460f      	mov	r7, r1
 800ebb4:	f854 3b26 	ldr.w	r3, [r4], #38
 800ebb8:	a904      	add	r1, sp, #16
 800ebba:	4606      	mov	r6, r0
 800ebbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ebc2:	4798      	blx	r3
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f004 ffa7 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ebca:	4680      	mov	r8, r0
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f004 ffdd 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ebd2:	9506      	str	r5, [sp, #24]
 800ebd4:	ad06      	add	r5, sp, #24
 800ebd6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ebda:	4639      	mov	r1, r7
 800ebdc:	f8ad 801c 	strh.w	r8, [sp, #28]
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f7fd fed9 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800ebe6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	dd19      	ble.n	800ec22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ebee:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	dd15      	ble.n	800ec22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ebfe:	b10a      	cbz	r2, 800ec04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800ec00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec02:	b900      	cbnz	r0, 800ec06 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800ec04:	6898      	ldr	r0, [r3, #8]
 800ec06:	2701      	movs	r7, #1
 800ec08:	6801      	ldr	r1, [r0, #0]
 800ec0a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ec0e:	9702      	str	r7, [sp, #8]
 800ec10:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800ec14:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800ec18:	e9cd 5600 	strd	r5, r6, [sp]
 800ec1c:	688d      	ldr	r5, [r1, #8]
 800ec1e:	4621      	mov	r1, r4
 800ec20:	47a8      	blx	r5
 800ec22:	b008      	add	sp, #32
 800ec24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec28:	24006c68 	.word	0x24006c68

0800ec2c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 800ec2c:	4770      	bx	lr

0800ec2e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800ec2e:	b510      	push	{r4, lr}
 800ec30:	4604      	mov	r4, r0
 800ec32:	2148      	movs	r1, #72	; 0x48
 800ec34:	f00d fa6c 	bl	801c110 <_ZdlPvj>
 800ec38:	4620      	mov	r0, r4
 800ec3a:	bd10      	pop	{r4, pc}

0800ec3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	4604      	mov	r4, r0
 800ec42:	b08c      	sub	sp, #48	; 0x30
 800ec44:	4688      	mov	r8, r1
 800ec46:	f7ff fc89 	bl	800e55c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800ec4a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ec4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec50:	4293      	cmp	r3, r2
 800ec52:	f000 809a 	beq.w	800ed8a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ec56:	4e55      	ldr	r6, [pc, #340]	; (800edac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800ec58:	6832      	ldr	r2, [r6, #0]
 800ec5a:	b92a      	cbnz	r2, 800ec68 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800ec5c:	4b54      	ldr	r3, [pc, #336]	; (800edb0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800ec5e:	21ae      	movs	r1, #174	; 0xae
 800ec60:	4a54      	ldr	r2, [pc, #336]	; (800edb4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ec62:	4855      	ldr	r0, [pc, #340]	; (800edb8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800ec64:	f00d fb6a 	bl	801c33c <__assert_func>
 800ec68:	4d54      	ldr	r5, [pc, #336]	; (800edbc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800ec6a:	8829      	ldrh	r1, [r5, #0]
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	d803      	bhi.n	800ec78 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800ec70:	4b53      	ldr	r3, [pc, #332]	; (800edc0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800ec72:	21af      	movs	r1, #175	; 0xaf
 800ec74:	4a4f      	ldr	r2, [pc, #316]	; (800edb4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ec76:	e7f4      	b.n	800ec62 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800ec78:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ec7c:	f04f 0c02 	mov.w	ip, #2
 800ec80:	4b50      	ldr	r3, [pc, #320]	; (800edc4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800ec82:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec8c:	f1be 0f01 	cmp.w	lr, #1
 800ec90:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ec94:	f04f 0300 	mov.w	r3, #0
 800ec98:	b208      	sxth	r0, r1
 800ec9a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ec9e:	9303      	str	r3, [sp, #12]
 800eca0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800eca4:	d074      	beq.n	800ed90 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800eca6:	f1be 0f03 	cmp.w	lr, #3
 800ecaa:	d071      	beq.n	800ed90 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ecac:	1a52      	subs	r2, r2, r1
 800ecae:	f8ad 3010 	strh.w	r3, [sp, #16]
 800ecb2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ecb6:	fb92 f2fc 	sdiv	r2, r2, ip
 800ecba:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ecbe:	f10d 090c 	add.w	r9, sp, #12
 800ecc2:	f10d 0a14 	add.w	sl, sp, #20
 800ecc6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ecca:	e88a 0003 	stmia.w	sl, {r0, r1}
 800ecce:	4641      	mov	r1, r8
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	f7fd fe61 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 800ecd6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	dd55      	ble.n	800ed8a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ecde:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	dd51      	ble.n	800ed8a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ece6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ecea:	4649      	mov	r1, r9
 800ecec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	1a9b      	subs	r3, r3, r2
 800ecf4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800ecf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ecfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ed00:	1a9b      	subs	r3, r3, r2
 800ed02:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed06:	6823      	ldr	r3, [r4, #0]
 800ed08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0a:	4798      	blx	r3
 800ed0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d047      	beq.n	800eda4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800ed14:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800ed18:	6833      	ldr	r3, [r6, #0]
 800ed1a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d09c      	beq.n	800ec5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800ed22:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800ed24:	882d      	ldrh	r5, [r5, #0]
 800ed26:	428d      	cmp	r5, r1
 800ed28:	d9a2      	bls.n	800ec70 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800ed2a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ed2e:	6812      	ldr	r2, [r2, #0]
 800ed30:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800ed34:	785b      	ldrb	r3, [r3, #1]
 800ed36:	9209      	str	r2, [sp, #36]	; 0x24
 800ed38:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800ed3c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ed40:	9707      	str	r7, [sp, #28]
 800ed42:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800ed46:	2300      	movs	r3, #0
 800ed48:	f88d 5020 	strb.w	r5, [sp, #32]
 800ed4c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800ed50:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ed54:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ed58:	4b1b      	ldr	r3, [pc, #108]	; (800edc8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800ed5a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ed64:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ed68:	b10a      	cbz	r2, 800ed6e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800ed6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ed6c:	b904      	cbnz	r4, 800ed70 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800ed6e:	689c      	ldr	r4, [r3, #8]
 800ed70:	4b16      	ldr	r3, [pc, #88]	; (800edcc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800ed72:	6818      	ldr	r0, [r3, #0]
 800ed74:	f7f5 fdb4 	bl	80048e0 <_ZNK8touchgfx5Texts7getTextEt>
 800ed78:	ab07      	add	r3, sp, #28
 800ed7a:	9001      	str	r0, [sp, #4]
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	4653      	mov	r3, sl
 800ed82:	e899 0006 	ldmia.w	r9, {r1, r2}
 800ed86:	f7f5 fd5d 	bl	8004844 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ed8a:	b00c      	add	sp, #48	; 0x30
 800ed8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed90:	1a5b      	subs	r3, r3, r1
 800ed92:	f8ad 0010 	strh.w	r0, [sp, #16]
 800ed96:	f8ad 2012 	strh.w	r2, [sp, #18]
 800ed9a:	fb93 f3fc 	sdiv	r3, r3, ip
 800ed9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eda2:	e78c      	b.n	800ecbe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800eda4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800eda8:	e7b6      	b.n	800ed18 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800edaa:	bf00      	nop
 800edac:	24006cb8 	.word	0x24006cb8
 800edb0:	0801e108 	.word	0x0801e108
 800edb4:	0801f738 	.word	0x0801f738
 800edb8:	0801e196 	.word	0x0801e196
 800edbc:	24006cbc 	.word	0x24006cbc
 800edc0:	0801e1bf 	.word	0x0801e1bf
 800edc4:	24006cc0 	.word	0x24006cc0
 800edc8:	24006c68 	.word	0x24006c68
 800edcc:	24006cc4 	.word	0x24006cc4

0800edd0 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800edd0:	2101      	movs	r1, #1
 800edd2:	2200      	movs	r2, #0
 800edd4:	b510      	push	{r4, lr}
 800edd6:	4c13      	ldr	r4, [pc, #76]	; (800ee24 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800edd8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800eddc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ede0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ede4:	6004      	str	r4, [r0, #0]
 800ede6:	4c10      	ldr	r4, [pc, #64]	; (800ee28 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800ede8:	8082      	strh	r2, [r0, #4]
 800edea:	80c2      	strh	r2, [r0, #6]
 800edec:	8102      	strh	r2, [r0, #8]
 800edee:	8142      	strh	r2, [r0, #10]
 800edf0:	8182      	strh	r2, [r0, #12]
 800edf2:	81c2      	strh	r2, [r0, #14]
 800edf4:	8202      	strh	r2, [r0, #16]
 800edf6:	8242      	strh	r2, [r0, #18]
 800edf8:	61c2      	str	r2, [r0, #28]
 800edfa:	8402      	strh	r2, [r0, #32]
 800edfc:	8442      	strh	r2, [r0, #34]	; 0x22
 800edfe:	6282      	str	r2, [r0, #40]	; 0x28
 800ee00:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800ee04:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800ee06:	8601      	strh	r1, [r0, #48]	; 0x30
 800ee08:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800ee0c:	6344      	str	r4, [r0, #52]	; 0x34
 800ee0e:	8701      	strh	r1, [r0, #56]	; 0x38
 800ee10:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800ee14:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800ee18:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800ee1c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	bf00      	nop
 800ee24:	0801f6d0 	.word	0x0801f6d0
 800ee28:	0801dc04 	.word	0x0801dc04

0800ee2c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	6803      	ldr	r3, [r0, #0]
 800ee30:	460c      	mov	r4, r1
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	4798      	blx	r3
 800ee36:	1b03      	subs	r3, r0, r4
 800ee38:	4258      	negs	r0, r3
 800ee3a:	4158      	adcs	r0, r3
 800ee3c:	bd10      	pop	{r4, pc}
	...

0800ee40 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800ee40:	4b01      	ldr	r3, [pc, #4]	; (800ee48 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800ee42:	6019      	str	r1, [r3, #0]
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	24006c70 	.word	0x24006c70

0800ee4c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	4696      	mov	lr, r2
 800ee52:	b097      	sub	sp, #92	; 0x5c
 800ee54:	4605      	mov	r5, r0
 800ee56:	4614      	mov	r4, r2
 800ee58:	460e      	mov	r6, r1
 800ee5a:	461f      	mov	r7, r3
 800ee5c:	f10d 0c1c 	add.w	ip, sp, #28
 800ee60:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800ee64:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800ee68:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800ee6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee74:	f8de 3000 	ldr.w	r3, [lr]
 800ee78:	f104 0e14 	add.w	lr, r4, #20
 800ee7c:	f8cc 3000 	str.w	r3, [ip]
 800ee80:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ee84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee8c:	f8de 3000 	ldr.w	r3, [lr]
 800ee90:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ee94:	f8cc 3000 	str.w	r3, [ip]
 800ee98:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ee9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eea4:	f8de 3000 	ldr.w	r3, [lr]
 800eea8:	4631      	mov	r1, r6
 800eeaa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eeac:	4628      	mov	r0, r5
 800eeae:	f8cc 3000 	str.w	r3, [ip]
 800eeb2:	682b      	ldr	r3, [r5, #0]
 800eeb4:	9201      	str	r2, [sp, #4]
 800eeb6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eeb8:	f8cd 8008 	str.w	r8, [sp, #8]
 800eebc:	9200      	str	r2, [sp, #0]
 800eebe:	aa07      	add	r2, sp, #28
 800eec0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800eec4:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800eec8:	463b      	mov	r3, r7
 800eeca:	47d8      	blx	fp
 800eecc:	46a6      	mov	lr, r4
 800eece:	f10d 0c1c 	add.w	ip, sp, #28
 800eed2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eed6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eeda:	f8de 3000 	ldr.w	r3, [lr]
 800eede:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800eee2:	343c      	adds	r4, #60	; 0x3c
 800eee4:	f8cc 3000 	str.w	r3, [ip]
 800eee8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800eeec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eef4:	f8de 3000 	ldr.w	r3, [lr]
 800eef8:	f8cc 3000 	str.w	r3, [ip]
 800eefc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ef00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	4631      	mov	r1, r6
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f8cc 3000 	str.w	r3, [ip]
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ef16:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef18:	f8cd 8008 	str.w	r8, [sp, #8]
 800ef1c:	9201      	str	r2, [sp, #4]
 800ef1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef20:	9200      	str	r2, [sp, #0]
 800ef22:	aa07      	add	r2, sp, #28
 800ef24:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ef26:	463b      	mov	r3, r7
 800ef28:	47a0      	blx	r4
 800ef2a:	b017      	add	sp, #92	; 0x5c
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	b08d      	sub	sp, #52	; 0x34
 800ef36:	4688      	mov	r8, r1
 800ef38:	f8d3 c000 	ldr.w	ip, [r3]
 800ef3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef3e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800ef42:	680f      	ldr	r7, [r1, #0]
 800ef44:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800ef48:	eba7 070c 	sub.w	r7, r7, ip
 800ef4c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800ef50:	edd3 6a07 	vldr	s13, [r3, #28]
 800ef54:	42bc      	cmp	r4, r7
 800ef56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef58:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800ef5c:	bfa8      	it	ge
 800ef5e:	463c      	movge	r4, r7
 800ef60:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ef64:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ef68:	ee07 4a90 	vmov	s15, r4
 800ef6c:	eb09 0e0c 	add.w	lr, r9, ip
 800ef70:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800ef74:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ef78:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ef7c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800ef80:	4571      	cmp	r1, lr
 800ef82:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ef86:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ef8a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ef8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef92:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ef96:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ef9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ef9e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800efa2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800efa6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800efaa:	f340 808c 	ble.w	800f0c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800efae:	eba1 060e 	sub.w	r6, r1, lr
 800efb2:	fb96 f5f4 	sdiv	r5, r6, r4
 800efb6:	ee07 5a10 	vmov	s14, r5
 800efba:	2d00      	cmp	r5, #0
 800efbc:	fb04 6615 	mls	r6, r4, r5, r6
 800efc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efc4:	eea7 0a04 	vfma.f32	s0, s14, s8
 800efc8:	eee7 0a24 	vfma.f32	s1, s14, s9
 800efcc:	eea7 1a05 	vfma.f32	s2, s14, s10
 800efd0:	dd12      	ble.n	800eff8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800efd2:	ee70 6a44 	vsub.f32	s13, s0, s8
 800efd6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800efda:	ee31 2a45 	vsub.f32	s4, s2, s10
 800efde:	eef5 6a40 	vcmp.f32	s13, #0.0
 800efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe6:	bf14      	ite	ne
 800efe8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800efec:	eeb0 7a67 	vmoveq.f32	s14, s15
 800eff0:	ee61 1a87 	vmul.f32	s3, s3, s14
 800eff4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800eff8:	fb05 f204 	mul.w	r2, r5, r4
 800effc:	1abf      	subs	r7, r7, r2
 800effe:	4494      	add	ip, r2
 800f000:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800f004:	4411      	add	r1, r2
 800f006:	eb09 020c 	add.w	r2, r9, ip
 800f00a:	b209      	sxth	r1, r1
 800f00c:	443a      	add	r2, r7
 800f00e:	428a      	cmp	r2, r1
 800f010:	bfc4      	itt	gt
 800f012:	eba1 0209 	subgt.w	r2, r1, r9
 800f016:	eba2 070c 	subgt.w	r7, r2, ip
 800f01a:	2f00      	cmp	r7, #0
 800f01c:	dd50      	ble.n	800f0c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800f01e:	fb97 f1f4 	sdiv	r1, r7, r4
 800f022:	fb04 7211 	mls	r2, r4, r1, r7
 800f026:	b90a      	cbnz	r2, 800f02c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f028:	3901      	subs	r1, #1
 800f02a:	4622      	mov	r2, r4
 800f02c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f030:	6840      	ldr	r0, [r0, #4]
 800f032:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800f036:	44b6      	add	lr, r6
 800f038:	f8d0 a000 	ldr.w	sl, [r0]
 800f03c:	2900      	cmp	r1, #0
 800f03e:	bfcc      	ite	gt
 800f040:	46a1      	movgt	r9, r4
 800f042:	4691      	movle	r9, r2
 800f044:	900b      	str	r0, [sp, #44]	; 0x2c
 800f046:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f048:	fb04 e505 	mla	r5, r4, r5, lr
 800f04c:	eef0 6a42 	vmov.f32	s13, s4
 800f050:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f054:	9008      	str	r0, [sp, #32]
 800f056:	eeb0 7a61 	vmov.f32	s14, s3
 800f05a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f05c:	695b      	ldr	r3, [r3, #20]
 800f05e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f062:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800f066:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f06a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f06c:	445b      	add	r3, fp
 800f06e:	9307      	str	r3, [sp, #28]
 800f070:	ee16 3a90 	vmov	r3, s13
 800f074:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800f078:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f07c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f080:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f084:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f088:	ee17 7a90 	vmov	r7, s15
 800f08c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f090:	fb97 f7f4 	sdiv	r7, r7, r4
 800f094:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f098:	ee17 ca90 	vmov	ip, s15
 800f09c:	fb9c fcf4 	sdiv	ip, ip, r4
 800f0a0:	fb0c 3306 	mla	r3, ip, r6, r3
 800f0a4:	9302      	str	r3, [sp, #8]
 800f0a6:	ee17 3a10 	vmov	r3, s14
 800f0aa:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f0ae:	fb07 3706 	mla	r7, r7, r6, r3
 800f0b2:	eba9 0306 	sub.w	r3, r9, r6
 800f0b6:	e9cd 4700 	strd	r4, r7, [sp]
 800f0ba:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f0be:	47a0      	blx	r4
 800f0c0:	b00d      	add	sp, #52	; 0x34
 800f0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c6:	2500      	movs	r5, #0
 800f0c8:	462e      	mov	r6, r5
 800f0ca:	e799      	b.n	800f000 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f0cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d0:	b0db      	sub	sp, #364	; 0x16c
 800f0d2:	461d      	mov	r5, r3
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f0da:	910f      	str	r1, [sp, #60]	; 0x3c
 800f0dc:	4629      	mov	r1, r5
 800f0de:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f0e4:	9009      	str	r0, [sp, #36]	; 0x24
 800f0e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0e8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f0ec:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f0f0:	9310      	str	r3, [sp, #64]	; 0x40
 800f0f2:	6803      	ldr	r3, [r0, #0]
 800f0f4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800f0f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f0fa:	47b8      	blx	r7
 800f0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0fe:	6058      	str	r0, [r3, #4]
 800f100:	2800      	cmp	r0, #0
 800f102:	f000 83a1 	beq.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f106:	682b      	ldr	r3, [r5, #0]
 800f108:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f10c:	ed94 7a02 	vldr	s14, [r4, #8]
 800f110:	9314      	str	r3, [sp, #80]	; 0x50
 800f112:	686b      	ldr	r3, [r5, #4]
 800f114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f118:	9315      	str	r3, [sp, #84]	; 0x54
 800f11a:	4bc1      	ldr	r3, [pc, #772]	; (800f420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f11c:	7819      	ldrb	r1, [r3, #0]
 800f11e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f122:	2900      	cmp	r1, #0
 800f124:	bf16      	itet	ne
 800f126:	4619      	movne	r1, r3
 800f128:	4611      	moveq	r1, r2
 800f12a:	4613      	movne	r3, r2
 800f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f130:	9116      	str	r1, [sp, #88]	; 0x58
 800f132:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f136:	f240 8387 	bls.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f13a:	ed94 7a07 	vldr	s14, [r4, #28]
 800f13e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	f240 837f 	bls.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f14a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f14e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f156:	f240 8377 	bls.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f15a:	6822      	ldr	r2, [r4, #0]
 800f15c:	4bb1      	ldr	r3, [pc, #708]	; (800f424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f15e:	429a      	cmp	r2, r3
 800f160:	f2c0 8372 	blt.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f164:	49b0      	ldr	r1, [pc, #704]	; (800f428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f166:	6963      	ldr	r3, [r4, #20]
 800f168:	428a      	cmp	r2, r1
 800f16a:	f300 836d 	bgt.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f16e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f172:	48ae      	ldr	r0, [pc, #696]	; (800f42c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f174:	33ff      	adds	r3, #255	; 0xff
 800f176:	4283      	cmp	r3, r0
 800f178:	f200 8366 	bhi.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f17c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f17e:	4dac      	ldr	r5, [pc, #688]	; (800f430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f180:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f184:	33ff      	adds	r3, #255	; 0xff
 800f186:	42ab      	cmp	r3, r5
 800f188:	f200 835e 	bhi.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f18c:	6862      	ldr	r2, [r4, #4]
 800f18e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f192:	33ff      	adds	r3, #255	; 0xff
 800f194:	4283      	cmp	r3, r0
 800f196:	f200 8357 	bhi.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f19a:	69a1      	ldr	r1, [r4, #24]
 800f19c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f1a0:	33ff      	adds	r3, #255	; 0xff
 800f1a2:	4283      	cmp	r3, r0
 800f1a4:	f200 8350 	bhi.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f1a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f1aa:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f1ae:	30ff      	adds	r0, #255	; 0xff
 800f1b0:	42a8      	cmp	r0, r5
 800f1b2:	f200 8349 	bhi.w	800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f1b6:	428a      	cmp	r2, r1
 800f1b8:	f280 8110 	bge.w	800f3dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	f300 8119 	bgt.w	800f3f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f1c2:	4299      	cmp	r1, r3
 800f1c4:	f280 811d 	bge.w	800f402 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f1c8:	2502      	movs	r5, #2
 800f1ca:	2701      	movs	r7, #1
 800f1cc:	46a9      	mov	r9, r5
 800f1ce:	46b8      	mov	r8, r7
 800f1d0:	f04f 0a00 	mov.w	sl, #0
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	a849      	add	r0, sp, #292	; 0x124
 800f1d8:	f003 fcb2 	bl	8012b40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f1dc:	4622      	mov	r2, r4
 800f1de:	4653      	mov	r3, sl
 800f1e0:	a949      	add	r1, sp, #292	; 0x124
 800f1e2:	f8cd 9000 	str.w	r9, [sp]
 800f1e6:	a819      	add	r0, sp, #100	; 0x64
 800f1e8:	f003 fdda 	bl	8012da0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f1ec:	4622      	mov	r2, r4
 800f1ee:	4653      	mov	r3, sl
 800f1f0:	a949      	add	r1, sp, #292	; 0x124
 800f1f2:	f8cd 8000 	str.w	r8, [sp]
 800f1f6:	a829      	add	r0, sp, #164	; 0xa4
 800f1f8:	f003 fdd2 	bl	8012da0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f1fc:	4643      	mov	r3, r8
 800f1fe:	4622      	mov	r2, r4
 800f200:	a949      	add	r1, sp, #292	; 0x124
 800f202:	f8cd 9000 	str.w	r9, [sp]
 800f206:	a839      	add	r0, sp, #228	; 0xe4
 800f208:	f003 fdca 	bl	8012da0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f20c:	42af      	cmp	r7, r5
 800f20e:	af12      	add	r7, sp, #72	; 0x48
 800f210:	bfb7      	itett	lt
 800f212:	2300      	movlt	r3, #0
 800f214:	2301      	movge	r3, #1
 800f216:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f218:	ac19      	addlt	r4, sp, #100	; 0x64
 800f21a:	bfb1      	iteee	lt
 800f21c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f21e:	ad19      	addge	r5, sp, #100	; 0x64
 800f220:	930e      	strge	r3, [sp, #56]	; 0x38
 800f222:	ac29      	addge	r4, sp, #164	; 0xa4
 800f224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f22a:	e887 0003 	stmia.w	r7, {r0, r1}
 800f22e:	b928      	cbnz	r0, 800f23c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f230:	4b80      	ldr	r3, [pc, #512]	; (800f434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f232:	6818      	ldr	r0, [r3, #0]
 800f234:	6803      	ldr	r3, [r0, #0]
 800f236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f238:	4798      	blx	r3
 800f23a:	6038      	str	r0, [r7, #0]
 800f23c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f23e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f246:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f248:	930c      	str	r3, [sp, #48]	; 0x30
 800f24a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f24c:	6963      	ldr	r3, [r4, #20]
 800f24e:	440b      	add	r3, r1
 800f250:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f254:	4408      	add	r0, r1
 800f256:	b200      	sxth	r0, r0
 800f258:	4283      	cmp	r3, r0
 800f25a:	900d      	str	r0, [sp, #52]	; 0x34
 800f25c:	f280 80dd 	bge.w	800f41a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f260:	428b      	cmp	r3, r1
 800f262:	da08      	bge.n	800f276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f264:	2a00      	cmp	r2, #0
 800f266:	dd06      	ble.n	800f276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f268:	1acb      	subs	r3, r1, r3
 800f26a:	429a      	cmp	r2, r3
 800f26c:	f2c0 80e4 	blt.w	800f438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f270:	2b00      	cmp	r3, #0
 800f272:	f300 80e2 	bgt.w	800f43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f276:	6967      	ldr	r7, [r4, #20]
 800f278:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f27c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f27e:	443b      	add	r3, r7
 800f280:	461f      	mov	r7, r3
 800f282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f284:	1bdf      	subs	r7, r3, r7
 800f286:	4297      	cmp	r7, r2
 800f288:	bfa8      	it	ge
 800f28a:	4617      	movge	r7, r2
 800f28c:	2f00      	cmp	r7, #0
 800f28e:	f340 8166 	ble.w	800f55e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f292:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f294:	6829      	ldr	r1, [r5, #0]
 800f296:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f29a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f29e:	4411      	add	r1, r2
 800f2a0:	6820      	ldr	r0, [r4, #0]
 800f2a2:	4299      	cmp	r1, r3
 800f2a4:	dd1a      	ble.n	800f2dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f2a6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f2aa:	4402      	add	r2, r0
 800f2ac:	440b      	add	r3, r1
 800f2ae:	b21b      	sxth	r3, r3
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	dc13      	bgt.n	800f2dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2b6:	a912      	add	r1, sp, #72	; 0x48
 800f2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	9206      	str	r2, [sp, #24]
 800f2c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2c2:	9500      	str	r5, [sp, #0]
 800f2c4:	9205      	str	r2, [sp, #20]
 800f2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2c8:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f2cc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f2ce:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f2d2:	aa49      	add	r2, sp, #292	; 0x124
 800f2d4:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f2d8:	4623      	mov	r3, r4
 800f2da:	47c8      	blx	r9
 800f2dc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f2e0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f2e4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f2e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2ec:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f2f0:	68a1      	ldr	r1, [r4, #8]
 800f2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2f6:	ed94 6a08 	vldr	s12, [r4, #32]
 800f2fa:	edd4 6a07 	vldr	s13, [r4, #28]
 800f2fe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f302:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f306:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f30a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f30e:	edc4 6a07 	vstr	s13, [r4, #28]
 800f312:	441a      	add	r2, r3
 800f314:	6963      	ldr	r3, [r4, #20]
 800f316:	3301      	adds	r3, #1
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	6163      	str	r3, [r4, #20]
 800f31c:	69a3      	ldr	r3, [r4, #24]
 800f31e:	3b01      	subs	r3, #1
 800f320:	61a3      	str	r3, [r4, #24]
 800f322:	6923      	ldr	r3, [r4, #16]
 800f324:	440b      	add	r3, r1
 800f326:	68e1      	ldr	r1, [r4, #12]
 800f328:	428b      	cmp	r3, r1
 800f32a:	6123      	str	r3, [r4, #16]
 800f32c:	db15      	blt.n	800f35a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f32e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f332:	3201      	adds	r2, #1
 800f334:	1a5b      	subs	r3, r3, r1
 800f336:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f33a:	6022      	str	r2, [r4, #0]
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	edc4 6a07 	vstr	s13, [r4, #28]
 800f342:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f346:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f34a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f34e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f352:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f356:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f35a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f35e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f362:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f36a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f36e:	68a9      	ldr	r1, [r5, #8]
 800f370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f374:	ed95 6a08 	vldr	s12, [r5, #32]
 800f378:	edd5 6a07 	vldr	s13, [r5, #28]
 800f37c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f380:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f384:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f38c:	edc5 6a07 	vstr	s13, [r5, #28]
 800f390:	441a      	add	r2, r3
 800f392:	696b      	ldr	r3, [r5, #20]
 800f394:	3301      	adds	r3, #1
 800f396:	602a      	str	r2, [r5, #0]
 800f398:	616b      	str	r3, [r5, #20]
 800f39a:	69ab      	ldr	r3, [r5, #24]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	61ab      	str	r3, [r5, #24]
 800f3a0:	692b      	ldr	r3, [r5, #16]
 800f3a2:	440b      	add	r3, r1
 800f3a4:	68e9      	ldr	r1, [r5, #12]
 800f3a6:	428b      	cmp	r3, r1
 800f3a8:	612b      	str	r3, [r5, #16]
 800f3aa:	db15      	blt.n	800f3d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f3ac:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	1a5b      	subs	r3, r3, r1
 800f3b4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f3b8:	602a      	str	r2, [r5, #0]
 800f3ba:	612b      	str	r3, [r5, #16]
 800f3bc:	edc5 6a07 	vstr	s13, [r5, #28]
 800f3c0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f3c4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f3c8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f3cc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f3d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3d4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f3d8:	3f01      	subs	r7, #1
 800f3da:	e757      	b.n	800f28c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f3dc:	4299      	cmp	r1, r3
 800f3de:	dc13      	bgt.n	800f408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	da14      	bge.n	800f40e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f3e4:	2502      	movs	r5, #2
 800f3e6:	2703      	movs	r7, #3
 800f3e8:	f04f 0800 	mov.w	r8, #0
 800f3ec:	46a9      	mov	r9, r5
 800f3ee:	f04f 0a01 	mov.w	sl, #1
 800f3f2:	e6ef      	b.n	800f1d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f3f4:	2501      	movs	r5, #1
 800f3f6:	2700      	movs	r7, #0
 800f3f8:	46a9      	mov	r9, r5
 800f3fa:	46b8      	mov	r8, r7
 800f3fc:	f04f 0a02 	mov.w	sl, #2
 800f400:	e6e8      	b.n	800f1d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f402:	2501      	movs	r5, #1
 800f404:	2702      	movs	r7, #2
 800f406:	e6e1      	b.n	800f1cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f408:	2500      	movs	r5, #0
 800f40a:	2701      	movs	r7, #1
 800f40c:	e7f4      	b.n	800f3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f40e:	2702      	movs	r7, #2
 800f410:	2503      	movs	r5, #3
 800f412:	f04f 0900 	mov.w	r9, #0
 800f416:	46b8      	mov	r8, r7
 800f418:	e7e9      	b.n	800f3ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f41a:	4613      	mov	r3, r2
 800f41c:	e728      	b.n	800f270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f41e:	bf00      	nop
 800f420:	24006c60 	.word	0x24006c60
 800f424:	fffd8f01 	.word	0xfffd8f01
 800f428:	00027100 	.word	0x00027100
 800f42c:	0004e1ff 	.word	0x0004e1ff
 800f430:	0004e1fe 	.word	0x0004e1fe
 800f434:	24006c68 	.word	0x24006c68
 800f438:	4613      	mov	r3, r2
 800f43a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f43c:	469e      	mov	lr, r3
 800f43e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f440:	469c      	mov	ip, r3
 800f442:	9111      	str	r1, [sp, #68]	; 0x44
 800f444:	f04f 0900 	mov.w	r9, #0
 800f448:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f44c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f450:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f454:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f458:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f45c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f460:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f464:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f468:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f46c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f470:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f474:	f1bc 0f00 	cmp.w	ip, #0
 800f478:	d147      	bne.n	800f50a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f47a:	eb03 0c07 	add.w	ip, r3, r7
 800f47e:	1ad7      	subs	r7, r2, r3
 800f480:	f1b9 0f00 	cmp.w	r9, #0
 800f484:	d009      	beq.n	800f49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f486:	9029      	str	r0, [sp, #164]	; 0xa4
 800f488:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f48c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f490:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f494:	912d      	str	r1, [sp, #180]	; 0xb4
 800f496:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f49a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f49c:	f04f 0800 	mov.w	r8, #0
 800f4a0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f4a4:	9111      	str	r1, [sp, #68]	; 0x44
 800f4a6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f4aa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f4ae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f4b2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f4b6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f4ba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f4be:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f4c2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f4c6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f4ca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f4ce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f4d2:	f1be 0f00 	cmp.w	lr, #0
 800f4d6:	d031      	beq.n	800f53c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f4d8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f4da:	4450      	add	r0, sl
 800f4dc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f4e0:	4431      	add	r1, r6
 800f4e2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f4e6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f4ea:	4549      	cmp	r1, r9
 800f4ec:	db08      	blt.n	800f500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f4ee:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f4f8:	eba1 0109 	sub.w	r1, r1, r9
 800f4fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f500:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f504:	f04f 0801 	mov.w	r8, #1
 800f508:	e7e3      	b.n	800f4d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f50a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f50c:	4450      	add	r0, sl
 800f50e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f512:	4431      	add	r1, r6
 800f514:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f518:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f51c:	4541      	cmp	r1, r8
 800f51e:	db08      	blt.n	800f532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f520:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f524:	3001      	adds	r0, #1
 800f526:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f52a:	eba1 0108 	sub.w	r1, r1, r8
 800f52e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f532:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f536:	f04f 0901 	mov.w	r9, #1
 800f53a:	e79b      	b.n	800f474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f53c:	449c      	add	ip, r3
 800f53e:	1aff      	subs	r7, r7, r3
 800f540:	f1b8 0f00 	cmp.w	r8, #0
 800f544:	d009      	beq.n	800f55a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f546:	9019      	str	r0, [sp, #100]	; 0x64
 800f548:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f54c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f550:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f554:	911d      	str	r1, [sp, #116]	; 0x74
 800f556:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f55a:	1ad2      	subs	r2, r2, r3
 800f55c:	e68b      	b.n	800f276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f560:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 80d1 	beq.w	800f70a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f568:	ad19      	add	r5, sp, #100	; 0x64
 800f56a:	ac39      	add	r4, sp, #228	; 0xe4
 800f56c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f56e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f576:	930c      	str	r3, [sp, #48]	; 0x30
 800f578:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f57a:	6963      	ldr	r3, [r4, #20]
 800f57c:	440b      	add	r3, r1
 800f57e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f582:	4408      	add	r0, r1
 800f584:	b200      	sxth	r0, r0
 800f586:	4283      	cmp	r3, r0
 800f588:	900d      	str	r0, [sp, #52]	; 0x34
 800f58a:	f280 80c1 	bge.w	800f710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f58e:	428b      	cmp	r3, r1
 800f590:	da08      	bge.n	800f5a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f592:	2a00      	cmp	r2, #0
 800f594:	dd06      	ble.n	800f5a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f596:	1acb      	subs	r3, r1, r3
 800f598:	429a      	cmp	r2, r3
 800f59a:	f2c0 80bb 	blt.w	800f714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f300 80b9 	bgt.w	800f716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f5a4:	6967      	ldr	r7, [r4, #20]
 800f5a6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f5aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ac:	443b      	add	r3, r7
 800f5ae:	461f      	mov	r7, r3
 800f5b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5b2:	1bdf      	subs	r7, r3, r7
 800f5b4:	4297      	cmp	r7, r2
 800f5b6:	bfa8      	it	ge
 800f5b8:	4617      	movge	r7, r2
 800f5ba:	2f00      	cmp	r7, #0
 800f5bc:	f340 813c 	ble.w	800f838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f5c0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f5c2:	6829      	ldr	r1, [r5, #0]
 800f5c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f5c8:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f5cc:	4411      	add	r1, r2
 800f5ce:	6820      	ldr	r0, [r4, #0]
 800f5d0:	4299      	cmp	r1, r3
 800f5d2:	dd1a      	ble.n	800f60a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f5d4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f5d8:	4402      	add	r2, r0
 800f5da:	440b      	add	r3, r1
 800f5dc:	b21b      	sxth	r3, r3
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	dc13      	bgt.n	800f60a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f5e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5e4:	a912      	add	r1, sp, #72	; 0x48
 800f5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	9206      	str	r2, [sp, #24]
 800f5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5f0:	9500      	str	r5, [sp, #0]
 800f5f2:	9205      	str	r2, [sp, #20]
 800f5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5f6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f5fa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f5fc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f600:	aa49      	add	r2, sp, #292	; 0x124
 800f602:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f606:	4623      	mov	r3, r4
 800f608:	47c8      	blx	r9
 800f60a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f60e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f612:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f61a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f61e:	68a1      	ldr	r1, [r4, #8]
 800f620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f624:	ed94 6a08 	vldr	s12, [r4, #32]
 800f628:	edd4 6a07 	vldr	s13, [r4, #28]
 800f62c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f630:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f634:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f638:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f63c:	edc4 6a07 	vstr	s13, [r4, #28]
 800f640:	441a      	add	r2, r3
 800f642:	6963      	ldr	r3, [r4, #20]
 800f644:	3301      	adds	r3, #1
 800f646:	6022      	str	r2, [r4, #0]
 800f648:	6163      	str	r3, [r4, #20]
 800f64a:	69a3      	ldr	r3, [r4, #24]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	61a3      	str	r3, [r4, #24]
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	440b      	add	r3, r1
 800f654:	68e1      	ldr	r1, [r4, #12]
 800f656:	428b      	cmp	r3, r1
 800f658:	6123      	str	r3, [r4, #16]
 800f65a:	db15      	blt.n	800f688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f65c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f660:	3201      	adds	r2, #1
 800f662:	1a5b      	subs	r3, r3, r1
 800f664:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f668:	6022      	str	r2, [r4, #0]
 800f66a:	6123      	str	r3, [r4, #16]
 800f66c:	edc4 6a07 	vstr	s13, [r4, #28]
 800f670:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f674:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f678:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f67c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f680:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f684:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f688:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f68c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f690:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f694:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f698:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f69c:	68a9      	ldr	r1, [r5, #8]
 800f69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6a2:	ed95 6a08 	vldr	s12, [r5, #32]
 800f6a6:	edd5 6a07 	vldr	s13, [r5, #28]
 800f6aa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f6ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f6b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f6b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6ba:	edc5 6a07 	vstr	s13, [r5, #28]
 800f6be:	441a      	add	r2, r3
 800f6c0:	696b      	ldr	r3, [r5, #20]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	602a      	str	r2, [r5, #0]
 800f6c6:	616b      	str	r3, [r5, #20]
 800f6c8:	69ab      	ldr	r3, [r5, #24]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	61ab      	str	r3, [r5, #24]
 800f6ce:	692b      	ldr	r3, [r5, #16]
 800f6d0:	440b      	add	r3, r1
 800f6d2:	68e9      	ldr	r1, [r5, #12]
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	612b      	str	r3, [r5, #16]
 800f6d8:	db15      	blt.n	800f706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f6da:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f6de:	3201      	adds	r2, #1
 800f6e0:	1a5b      	subs	r3, r3, r1
 800f6e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f6e6:	602a      	str	r2, [r5, #0]
 800f6e8:	612b      	str	r3, [r5, #16]
 800f6ea:	edc5 6a07 	vstr	s13, [r5, #28]
 800f6ee:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f6f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f6f6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f6fa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f6fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f702:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f706:	3f01      	subs	r7, #1
 800f708:	e757      	b.n	800f5ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f70a:	ad39      	add	r5, sp, #228	; 0xe4
 800f70c:	ac19      	add	r4, sp, #100	; 0x64
 800f70e:	e72d      	b.n	800f56c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f710:	4613      	mov	r3, r2
 800f712:	e744      	b.n	800f59e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f714:	4613      	mov	r3, r2
 800f716:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f718:	469e      	mov	lr, r3
 800f71a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f71e:	461f      	mov	r7, r3
 800f720:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f724:	f04f 0900 	mov.w	r9, #0
 800f728:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f72c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f730:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f734:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f738:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f73c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f73e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f742:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f746:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f74a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f74e:	960e      	str	r6, [sp, #56]	; 0x38
 800f750:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f754:	2f00      	cmp	r7, #0
 800f756:	d146      	bne.n	800f7e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f758:	449c      	add	ip, r3
 800f75a:	1ad7      	subs	r7, r2, r3
 800f75c:	f1b9 0f00 	cmp.w	r9, #0
 800f760:	d009      	beq.n	800f776 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f762:	9039      	str	r0, [sp, #228]	; 0xe4
 800f764:	913d      	str	r1, [sp, #244]	; 0xf4
 800f766:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f76a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f76e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f772:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f776:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f778:	f04f 0800 	mov.w	r8, #0
 800f77c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f780:	910e      	str	r1, [sp, #56]	; 0x38
 800f782:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f786:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f78a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f78e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f792:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f796:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f79a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f79e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f7a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f7a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f7aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f7ae:	f1be 0f00 	cmp.w	lr, #0
 800f7b2:	d030      	beq.n	800f816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f7b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f7b6:	4450      	add	r0, sl
 800f7b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f7bc:	4431      	add	r1, r6
 800f7be:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f7c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f7c6:	4549      	cmp	r1, r9
 800f7c8:	db08      	blt.n	800f7dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f7ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f7d4:	eba1 0109 	sub.w	r1, r1, r9
 800f7d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f7dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f7e0:	f04f 0801 	mov.w	r8, #1
 800f7e4:	e7e3      	b.n	800f7ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f7e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f7e8:	4450      	add	r0, sl
 800f7ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f7ee:	4431      	add	r1, r6
 800f7f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f7f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f7f8:	4541      	cmp	r1, r8
 800f7fa:	db08      	blt.n	800f80e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f7fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f800:	3001      	adds	r0, #1
 800f802:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f806:	eba1 0108 	sub.w	r1, r1, r8
 800f80a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f80e:	3f01      	subs	r7, #1
 800f810:	f04f 0901 	mov.w	r9, #1
 800f814:	e79e      	b.n	800f754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f816:	449c      	add	ip, r3
 800f818:	1aff      	subs	r7, r7, r3
 800f81a:	f1b8 0f00 	cmp.w	r8, #0
 800f81e:	d009      	beq.n	800f834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f820:	9019      	str	r0, [sp, #100]	; 0x64
 800f822:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f826:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f82a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f82e:	911d      	str	r1, [sp, #116]	; 0x74
 800f830:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f834:	1ad2      	subs	r2, r2, r3
 800f836:	e6b5      	b.n	800f5a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	b923      	cbnz	r3, 800f848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f83e:	4b04      	ldr	r3, [pc, #16]	; (800f850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f840:	6818      	ldr	r0, [r3, #0]
 800f842:	6803      	ldr	r3, [r0, #0]
 800f844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f846:	4798      	blx	r3
 800f848:	b05b      	add	sp, #364	; 0x16c
 800f84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84e:	bf00      	nop
 800f850:	24006c68 	.word	0x24006c68

0800f854 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	4604      	mov	r4, r0
 800f858:	2500      	movs	r5, #0
 800f85a:	9804      	ldr	r0, [sp, #16]
 800f85c:	7223      	strb	r3, [r4, #8]
 800f85e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f862:	8025      	strh	r5, [r4, #0]
 800f864:	6061      	str	r1, [r4, #4]
 800f866:	7263      	strb	r3, [r4, #9]
 800f868:	60e0      	str	r0, [r4, #12]
 800f86a:	8222      	strh	r2, [r4, #16]
 800f86c:	8265      	strh	r5, [r4, #18]
 800f86e:	82a5      	strh	r5, [r4, #20]
 800f870:	82e5      	strh	r5, [r4, #22]
 800f872:	8325      	strh	r5, [r4, #24]
 800f874:	8365      	strh	r5, [r4, #26]
 800f876:	83a5      	strh	r5, [r4, #28]
 800f878:	77a5      	strb	r5, [r4, #30]
 800f87a:	6803      	ldr	r3, [r0, #0]
 800f87c:	695b      	ldr	r3, [r3, #20]
 800f87e:	4798      	blx	r3
 800f880:	4606      	mov	r6, r0
 800f882:	b1f8      	cbz	r0, 800f8c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f884:	68e0      	ldr	r0, [r4, #12]
 800f886:	4631      	mov	r1, r6
 800f888:	6803      	ldr	r3, [r0, #0]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	4798      	blx	r3
 800f88e:	7b43      	ldrb	r3, [r0, #13]
 800f890:	7a82      	ldrb	r2, [r0, #10]
 800f892:	4605      	mov	r5, r0
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f89a:	4313      	orrs	r3, r2
 800f89c:	83a3      	strh	r3, [r4, #28]
 800f89e:	7a63      	ldrb	r3, [r4, #9]
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	d10f      	bne.n	800f8c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f8a4:	68e0      	ldr	r0, [r4, #12]
 800f8a6:	462a      	mov	r2, r5
 800f8a8:	4631      	mov	r1, r6
 800f8aa:	6803      	ldr	r3, [r0, #0]
 800f8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ae:	4798      	blx	r3
 800f8b0:	7b6b      	ldrb	r3, [r5, #13]
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f8b8:	7aab      	ldrb	r3, [r5, #10]
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	4418      	add	r0, r3
 800f8be:	8ba3      	ldrh	r3, [r4, #28]
 800f8c0:	4418      	add	r0, r3
 800f8c2:	83a0      	strh	r0, [r4, #28]
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}

0800f8c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	2400      	movs	r4, #0
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	4681      	mov	r9, r0
 800f8d2:	4688      	mov	r8, r1
 800f8d4:	4692      	mov	sl, r2
 800f8d6:	469b      	mov	fp, r3
 800f8d8:	4627      	mov	r7, r4
 800f8da:	4625      	mov	r5, r4
 800f8dc:	4626      	mov	r6, r4
 800f8de:	4554      	cmp	r4, sl
 800f8e0:	da2a      	bge.n	800f938 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f8ea:	429d      	cmp	r5, r3
 800f8ec:	d004      	beq.n	800f8f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f8ee:	f242 030b 	movw	r3, #8203	; 0x200b
 800f8f2:	429d      	cmp	r5, r3
 800f8f4:	bf18      	it	ne
 800f8f6:	462f      	movne	r7, r5
 800f8f8:	ab03      	add	r3, sp, #12
 800f8fa:	4642      	mov	r2, r8
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	4648      	mov	r0, r9
 800f900:	f002 fea2 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f904:	4605      	mov	r5, r0
 800f906:	b1b8      	cbz	r0, 800f938 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f908:	280a      	cmp	r0, #10
 800f90a:	d015      	beq.n	800f938 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f90c:	9a03      	ldr	r2, [sp, #12]
 800f90e:	b18a      	cbz	r2, 800f934 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f910:	7b50      	ldrb	r0, [r2, #13]
 800f912:	4639      	mov	r1, r7
 800f914:	7a93      	ldrb	r3, [r2, #10]
 800f916:	0040      	lsls	r0, r0, #1
 800f918:	8895      	ldrh	r5, [r2, #4]
 800f91a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f91e:	4303      	orrs	r3, r0
 800f920:	4640      	mov	r0, r8
 800f922:	9301      	str	r3, [sp, #4]
 800f924:	f8d8 3000 	ldr.w	r3, [r8]
 800f928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f92a:	4798      	blx	r3
 800f92c:	9b01      	ldr	r3, [sp, #4]
 800f92e:	4418      	add	r0, r3
 800f930:	4406      	add	r6, r0
 800f932:	b2b6      	uxth	r6, r6
 800f934:	3401      	adds	r4, #1
 800f936:	e7d2      	b.n	800f8de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800f938:	4630      	mov	r0, r6
 800f93a:	b005      	add	sp, #20
 800f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f940 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f940:	2a02      	cmp	r2, #2
 800f942:	b530      	push	{r4, r5, lr}
 800f944:	d011      	beq.n	800f96a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f946:	2a03      	cmp	r2, #3
 800f948:	d01c      	beq.n	800f984 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f94a:	2a01      	cmp	r2, #1
 800f94c:	d10c      	bne.n	800f968 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f94e:	888b      	ldrh	r3, [r1, #4]
 800f950:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f954:	8801      	ldrh	r1, [r0, #0]
 800f956:	1a9b      	subs	r3, r3, r2
 800f958:	8844      	ldrh	r4, [r0, #2]
 800f95a:	1a5b      	subs	r3, r3, r1
 800f95c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f960:	8004      	strh	r4, [r0, #0]
 800f962:	8043      	strh	r3, [r0, #2]
 800f964:	8081      	strh	r1, [r0, #4]
 800f966:	80c2      	strh	r2, [r0, #6]
 800f968:	bd30      	pop	{r4, r5, pc}
 800f96a:	88cb      	ldrh	r3, [r1, #6]
 800f96c:	88c2      	ldrh	r2, [r0, #6]
 800f96e:	1a9b      	subs	r3, r3, r2
 800f970:	8842      	ldrh	r2, [r0, #2]
 800f972:	1a9b      	subs	r3, r3, r2
 800f974:	888a      	ldrh	r2, [r1, #4]
 800f976:	8881      	ldrh	r1, [r0, #4]
 800f978:	8043      	strh	r3, [r0, #2]
 800f97a:	1a52      	subs	r2, r2, r1
 800f97c:	8801      	ldrh	r1, [r0, #0]
 800f97e:	1a52      	subs	r2, r2, r1
 800f980:	8002      	strh	r2, [r0, #0]
 800f982:	e7f1      	b.n	800f968 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f984:	88cb      	ldrh	r3, [r1, #6]
 800f986:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f98a:	8841      	ldrh	r1, [r0, #2]
 800f98c:	1a9b      	subs	r3, r3, r2
 800f98e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f992:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f996:	1a5b      	subs	r3, r3, r1
 800f998:	8045      	strh	r5, [r0, #2]
 800f99a:	8082      	strh	r2, [r0, #4]
 800f99c:	8003      	strh	r3, [r0, #0]
 800f99e:	80c4      	strh	r4, [r0, #6]
 800f9a0:	e7e2      	b.n	800f968 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f9a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f9a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a6:	b09f      	sub	sp, #124	; 0x7c
 800f9a8:	9116      	str	r1, [sp, #88]	; 0x58
 800f9aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800f9ac:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f9ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f9b0:	8809      	ldrh	r1, [r1, #0]
 800f9b2:	889b      	ldrh	r3, [r3, #4]
 800f9b4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800f9b8:	440b      	add	r3, r1
 800f9ba:	9212      	str	r2, [sp, #72]	; 0x48
 800f9bc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800f9c0:	b21b      	sxth	r3, r3
 800f9c2:	9011      	str	r0, [sp, #68]	; 0x44
 800f9c4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800f9c8:	9310      	str	r3, [sp, #64]	; 0x40
 800f9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ce:	7a59      	ldrb	r1, [r3, #9]
 800f9d0:	7a1b      	ldrb	r3, [r3, #8]
 800f9d2:	9114      	str	r1, [sp, #80]	; 0x50
 800f9d4:	9315      	str	r3, [sp, #84]	; 0x54
 800f9d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f9d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f9dc:	2a00      	cmp	r2, #0
 800f9de:	d067      	beq.n	800fab0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800f9e0:	f898 3010 	ldrb.w	r3, [r8, #16]
 800f9e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	bf14      	ite	ne
 800f9ea:	2301      	movne	r3, #1
 800f9ec:	2302      	moveq	r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	f04f 0900 	mov.w	r9, #0
 800f9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9f6:	464c      	mov	r4, r9
 800f9f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f9fc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800fa00:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800fa04:	4293      	cmp	r3, r2
 800fa06:	f280 808c 	bge.w	800fb22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	931c      	str	r3, [sp, #112]	; 0x70
 800fa0e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fa12:	429c      	cmp	r4, r3
 800fa14:	d006      	beq.n	800fa24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800fa16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa18:	f242 020b 	movw	r2, #8203	; 0x200b
 800fa1c:	4294      	cmp	r4, r2
 800fa1e:	bf18      	it	ne
 800fa20:	4623      	movne	r3, r4
 800fa22:	930d      	str	r3, [sp, #52]	; 0x34
 800fa24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa26:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fa28:	f8d8 2000 	ldr.w	r2, [r8]
 800fa2c:	428b      	cmp	r3, r1
 800fa2e:	db41      	blt.n	800fab4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800fa30:	6813      	ldr	r3, [r2, #0]
 800fa32:	4610      	mov	r0, r2
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	4798      	blx	r3
 800fa38:	4604      	mov	r4, r0
 800fa3a:	f8d8 0000 	ldr.w	r0, [r8]
 800fa3e:	aa1d      	add	r2, sp, #116	; 0x74
 800fa40:	4621      	mov	r1, r4
 800fa42:	6803      	ldr	r3, [r0, #0]
 800fa44:	689e      	ldr	r6, [r3, #8]
 800fa46:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fa4a:	47b0      	blx	r6
 800fa4c:	901c      	str	r0, [sp, #112]	; 0x70
 800fa4e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fa52:	429c      	cmp	r4, r3
 800fa54:	f000 80ea 	beq.w	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa58:	f242 030b 	movw	r3, #8203	; 0x200b
 800fa5c:	429c      	cmp	r4, r3
 800fa5e:	f000 80e5 	beq.w	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa62:	2c00      	cmp	r4, #0
 800fa64:	f000 80f7 	beq.w	800fc56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fa68:	2c0a      	cmp	r4, #10
 800fa6a:	d060      	beq.n	800fb2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fa6c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa6e:	b36a      	cbz	r2, 800facc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800fa70:	8894      	ldrh	r4, [r2, #4]
 800fa72:	f1bb 0f00 	cmp.w	fp, #0
 800fa76:	d03b      	beq.n	800faf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800fa78:	f892 900d 	ldrb.w	r9, [r2, #13]
 800fa7c:	f1bb 0f01 	cmp.w	fp, #1
 800fa80:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fa84:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800fa88:	f892 900a 	ldrb.w	r9, [r2, #10]
 800fa8c:	ea49 0903 	orr.w	r9, r9, r3
 800fa90:	d134      	bne.n	800fafc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800fa92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa94:	eba5 0509 	sub.w	r5, r5, r9
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d14f      	bne.n	800fb3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fa9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa9e:	eb09 0305 	add.w	r3, r9, r5
 800faa2:	4413      	add	r3, r2
 800faa4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800faa6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800faaa:	4293      	cmp	r3, r2
 800faac:	da51      	bge.n	800fb52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800faae:	e038      	b.n	800fb22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fab0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fab2:	e79d      	b.n	800f9f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800fab4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fab8:	4659      	mov	r1, fp
 800faba:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	ab1d      	add	r3, sp, #116	; 0x74
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	ab1c      	add	r3, sp, #112	; 0x70
 800fac4:	f002 fe18 	bl	80126f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800fac8:	4604      	mov	r4, r0
 800faca:	e7c0      	b.n	800fa4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800facc:	f8d8 0000 	ldr.w	r0, [r8]
 800fad0:	6803      	ldr	r3, [r0, #0]
 800fad2:	691b      	ldr	r3, [r3, #16]
 800fad4:	4798      	blx	r3
 800fad6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fada:	4298      	cmp	r0, r3
 800fadc:	f000 80a6 	beq.w	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fae0:	f242 030b 	movw	r3, #8203	; 0x200b
 800fae4:	4298      	cmp	r0, r3
 800fae6:	f000 80a1 	beq.w	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800faea:	f1bb 0f00 	cmp.w	fp, #0
 800faee:	d100      	bne.n	800faf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800faf0:	444d      	add	r5, r9
 800faf2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800faf4:	2a00      	cmp	r2, #0
 800faf6:	d1bf      	bne.n	800fa78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800faf8:	4691      	mov	r9, r2
 800fafa:	e097      	b.n	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fafc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80ab 	beq.w	800fc5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fb04:	f1bb 0f00 	cmp.w	fp, #0
 800fb08:	d118      	bne.n	800fb3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fb0a:	f8d8 0000 	ldr.w	r0, [r8]
 800fb0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb10:	6803      	ldr	r3, [r0, #0]
 800fb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb14:	4798      	blx	r3
 800fb16:	4405      	add	r5, r0
 800fb18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb1c:	1aeb      	subs	r3, r5, r3
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	dd17      	ble.n	800fb52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fb22:	2c00      	cmp	r4, #0
 800fb24:	f000 8097 	beq.w	800fc56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fb28:	2c0a      	cmp	r4, #10
 800fb2a:	f040 8085 	bne.w	800fc38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800fb2e:	240a      	movs	r4, #10
 800fb30:	fab4 f084 	clz	r0, r4
 800fb34:	0940      	lsrs	r0, r0, #5
 800fb36:	b01f      	add	sp, #124	; 0x7c
 800fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3c:	f8d8 0000 	ldr.w	r0, [r8]
 800fb40:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb42:	6803      	ldr	r3, [r0, #0]
 800fb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb46:	4798      	blx	r3
 800fb48:	f1bb 0f01 	cmp.w	fp, #1
 800fb4c:	eba5 0500 	sub.w	r5, r5, r0
 800fb50:	d0a4      	beq.n	800fa9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800fb52:	981c      	ldr	r0, [sp, #112]	; 0x70
 800fb54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fb56:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800fb5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb5e:	7b43      	ldrb	r3, [r0, #13]
 800fb60:	4429      	add	r1, r5
 800fb62:	015b      	lsls	r3, r3, #5
 800fb64:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fb68:	7983      	ldrb	r3, [r0, #6]
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	440b      	add	r3, r1
 800fb6e:	42b3      	cmp	r3, r6
 800fb70:	db5c      	blt.n	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb74:	4299      	cmp	r1, r3
 800fb76:	da59      	bge.n	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb78:	f8d8 0000 	ldr.w	r0, [r8]
 800fb7c:	42ae      	cmp	r6, r5
 800fb7e:	6803      	ldr	r3, [r0, #0]
 800fb80:	bfcc      	ite	gt
 800fb82:	1b76      	subgt	r6, r6, r5
 800fb84:	2600      	movle	r6, #0
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	bfc8      	it	gt
 800fb8a:	b2b6      	uxthgt	r6, r6
 800fb8c:	4798      	blx	r3
 800fb8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fb90:	7b5a      	ldrb	r2, [r3, #13]
 800fb92:	00d1      	lsls	r1, r2, #3
 800fb94:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800fb98:	7a19      	ldrb	r1, [r3, #8]
 800fb9a:	4339      	orrs	r1, r7
 800fb9c:	0657      	lsls	r7, r2, #25
 800fb9e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fba0:	bf48      	it	mi
 800fba2:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800fba6:	4407      	add	r7, r0
 800fba8:	bf48      	it	mi
 800fbaa:	b209      	sxthmi	r1, r1
 800fbac:	1a7f      	subs	r7, r7, r1
 800fbae:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fbb0:	b2bf      	uxth	r7, r7
 800fbb2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800fbb6:	fa0f fa87 	sxth.w	sl, r7
 800fbba:	4551      	cmp	r1, sl
 800fbbc:	dd3a      	ble.n	800fc34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800fbbe:	0112      	lsls	r2, r2, #4
 800fbc0:	79d8      	ldrb	r0, [r3, #7]
 800fbc2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fbc6:	4302      	orrs	r2, r0
 800fbc8:	4492      	add	sl, r2
 800fbca:	4551      	cmp	r1, sl
 800fbcc:	dc2e      	bgt.n	800fc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fbce:	1bcf      	subs	r7, r1, r7
 800fbd0:	468a      	mov	sl, r1
 800fbd2:	b2bf      	uxth	r7, r7
 800fbd4:	9319      	str	r3, [sp, #100]	; 0x64
 800fbd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbd8:	f8d8 0000 	ldr.w	r0, [r8]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	6801      	ldr	r1, [r0, #0]
 800fbe0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fbe2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fbe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbe6:	9218      	str	r2, [sp, #96]	; 0x60
 800fbe8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800fbea:	4788      	blx	r1
 800fbec:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fbf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fbf2:	910b      	str	r1, [sp, #44]	; 0x2c
 800fbf4:	f898 100e 	ldrb.w	r1, [r8, #14]
 800fbf8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fbfa:	910a      	str	r1, [sp, #40]	; 0x28
 800fbfc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800fc00:	9109      	str	r1, [sp, #36]	; 0x24
 800fc02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fc06:	9305      	str	r3, [sp, #20]
 800fc08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fc0a:	9206      	str	r2, [sp, #24]
 800fc0c:	e9cd a601 	strd	sl, r6, [sp, #4]
 800fc10:	442e      	add	r6, r5
 800fc12:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800fc16:	b236      	sxth	r6, r6
 800fc18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc1a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800fc1e:	9600      	str	r6, [sp, #0]
 800fc20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fc2a:	47b0      	blx	r6
 800fc2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc2e:	3301      	adds	r3, #1
 800fc30:	930e      	str	r3, [sp, #56]	; 0x38
 800fc32:	e6e5      	b.n	800fa00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800fc34:	2700      	movs	r7, #0
 800fc36:	e7cd      	b.n	800fbd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800fc38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fc3a:	3501      	adds	r5, #1
 800fc3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fc3e:	429d      	cmp	r5, r3
 800fc40:	f6bf af76 	bge.w	800fb30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fc44:	4659      	mov	r1, fp
 800fc46:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fc48:	f7f4 fdb8 	bl	80047bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	b110      	cbz	r0, 800fc56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fc50:	280a      	cmp	r0, #10
 800fc52:	d1f2      	bne.n	800fc3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800fc54:	e76b      	b.n	800fb2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fc56:	2400      	movs	r4, #0
 800fc58:	e76a      	b.n	800fb30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fc5a:	f1bb 0f00 	cmp.w	fp, #0
 800fc5e:	f43f af5b 	beq.w	800fb18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800fc62:	e776      	b.n	800fb52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800fc64 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800fc64:	b530      	push	{r4, r5, lr}
 800fc66:	8a44      	ldrh	r4, [r0, #18]
 800fc68:	8ac5      	ldrh	r5, [r0, #22]
 800fc6a:	82c3      	strh	r3, [r0, #22]
 800fc6c:	442c      	add	r4, r5
 800fc6e:	1ae4      	subs	r4, r4, r3
 800fc70:	8b03      	ldrh	r3, [r0, #24]
 800fc72:	8244      	strh	r4, [r0, #18]
 800fc74:	8a84      	ldrh	r4, [r0, #20]
 800fc76:	4422      	add	r2, r4
 800fc78:	440c      	add	r4, r1
 800fc7a:	1a59      	subs	r1, r3, r1
 800fc7c:	8342      	strh	r2, [r0, #26]
 800fc7e:	8284      	strh	r4, [r0, #20]
 800fc80:	8301      	strh	r1, [r0, #24]
 800fc82:	bd30      	pop	{r4, r5, pc}

0800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800fc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc88:	7a43      	ldrb	r3, [r0, #9]
 800fc8a:	b087      	sub	sp, #28
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460f      	mov	r7, r1
 800fc90:	1eda      	subs	r2, r3, #3
 800fc92:	b2d2      	uxtb	r2, r2
 800fc94:	2900      	cmp	r1, #0
 800fc96:	d036      	beq.n	800fd06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800fc98:	2a01      	cmp	r2, #1
 800fc9a:	d932      	bls.n	800fd02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800fc9c:	1e58      	subs	r0, r3, #1
 800fc9e:	f1d0 0b00 	rsbs	fp, r0, #0
 800fca2:	eb4b 0b00 	adc.w	fp, fp, r0
 800fca6:	1e99      	subs	r1, r3, #2
 800fca8:	424b      	negs	r3, r1
 800fcaa:	414b      	adcs	r3, r1
 800fcac:	9303      	str	r3, [sp, #12]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fcb4:	2500      	movs	r5, #0
 800fcb6:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800fcba:	46a9      	mov	r9, r5
 800fcbc:	8265      	strh	r5, [r4, #18]
 800fcbe:	82a5      	strh	r5, [r4, #20]
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	9305      	str	r3, [sp, #20]
 800fcc4:	8823      	ldrh	r3, [r4, #0]
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	d02b      	beq.n	800fd22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800fcca:	eba3 020a 	sub.w	r2, r3, sl
 800fcce:	4256      	negs	r6, r2
 800fcd0:	4156      	adcs	r6, r2
 800fcd2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d004      	beq.n	800fce4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fcda:	4553      	cmp	r3, sl
 800fcdc:	bf16      	itet	ne
 800fcde:	4699      	movne	r9, r3
 800fce0:	2601      	moveq	r6, #1
 800fce2:	2600      	movne	r6, #0
 800fce4:	ab05      	add	r3, sp, #20
 800fce6:	68e2      	ldr	r2, [r4, #12]
 800fce8:	7a21      	ldrb	r1, [r4, #8]
 800fcea:	6860      	ldr	r0, [r4, #4]
 800fcec:	f002 fcac 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fcf0:	8020      	strh	r0, [r4, #0]
 800fcf2:	b9c8      	cbnz	r0, 800fd28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800fcf4:	8b22      	ldrh	r2, [r4, #24]
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f7ff ffb2 	bl	800fc64 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fd00:	e066      	b.n	800fdd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fd02:	468b      	mov	fp, r1
 800fd04:	e7cf      	b.n	800fca6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800fd06:	3b01      	subs	r3, #1
 800fd08:	2a01      	cmp	r2, #1
 800fd0a:	9103      	str	r1, [sp, #12]
 800fd0c:	468b      	mov	fp, r1
 800fd0e:	bf8c      	ite	hi
 800fd10:	2200      	movhi	r2, #0
 800fd12:	2201      	movls	r2, #1
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	9202      	str	r2, [sp, #8]
 800fd18:	bf8c      	ite	hi
 800fd1a:	2300      	movhi	r3, #0
 800fd1c:	2301      	movls	r3, #1
 800fd1e:	9301      	str	r3, [sp, #4]
 800fd20:	e7c8      	b.n	800fcb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800fd22:	4699      	mov	r9, r3
 800fd24:	2601      	movs	r6, #1
 800fd26:	e7dd      	b.n	800fce4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fd28:	8ae3      	ldrh	r3, [r4, #22]
 800fd2a:	280a      	cmp	r0, #10
 800fd2c:	f103 0301 	add.w	r3, r3, #1
 800fd30:	82e3      	strh	r3, [r4, #22]
 800fd32:	d0df      	beq.n	800fcf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800fd34:	9a05      	ldr	r2, [sp, #20]
 800fd36:	bb42      	cbnz	r2, 800fd8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800fd38:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fd3c:	4298      	cmp	r0, r3
 800fd3e:	d001      	beq.n	800fd44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fd40:	4550      	cmp	r0, sl
 800fd42:	d1bd      	bne.n	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd44:	8823      	ldrh	r3, [r4, #0]
 800fd46:	8b21      	ldrh	r1, [r4, #24]
 800fd48:	2b20      	cmp	r3, #32
 800fd4a:	d001      	beq.n	800fd50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800fd4c:	4553      	cmp	r3, sl
 800fd4e:	d131      	bne.n	800fdb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800fd50:	2e00      	cmp	r6, #0
 800fd52:	bf0a      	itet	eq
 800fd54:	460d      	moveq	r5, r1
 800fd56:	4630      	movne	r0, r6
 800fd58:	2001      	moveq	r0, #1
 800fd5a:	440a      	add	r2, r1
 800fd5c:	8aa3      	ldrh	r3, [r4, #20]
 800fd5e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fd62:	b292      	uxth	r2, r2
 800fd64:	8322      	strh	r2, [r4, #24]
 800fd66:	4413      	add	r3, r2
 800fd68:	2f00      	cmp	r7, #0
 800fd6a:	d03a      	beq.n	800fde2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800fd6c:	f1bb 0f00 	cmp.w	fp, #0
 800fd70:	d102      	bne.n	800fd78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800fd72:	9903      	ldr	r1, [sp, #12]
 800fd74:	b301      	cbz	r1, 800fdb8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fd76:	b1f8      	cbz	r0, 800fdb8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fd78:	8ba1      	ldrh	r1, [r4, #28]
 800fd7a:	4419      	add	r1, r3
 800fd7c:	458c      	cmp	ip, r1
 800fd7e:	da2a      	bge.n	800fdd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fd80:	8a61      	ldrh	r1, [r4, #18]
 800fd82:	b341      	cbz	r1, 800fdd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fd84:	4563      	cmp	r3, ip
 800fd86:	dd9b      	ble.n	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd88:	e01c      	b.n	800fdc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800fd8a:	8893      	ldrh	r3, [r2, #4]
 800fd8c:	4649      	mov	r1, r9
 800fd8e:	8023      	strh	r3, [r4, #0]
 800fd90:	f892 800d 	ldrb.w	r8, [r2, #13]
 800fd94:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800fd98:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800fd9c:	f892 800a 	ldrb.w	r8, [r2, #10]
 800fda0:	ea48 0800 	orr.w	r8, r8, r0
 800fda4:	68e0      	ldr	r0, [r4, #12]
 800fda6:	6803      	ldr	r3, [r0, #0]
 800fda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdaa:	4798      	blx	r3
 800fdac:	eb08 0200 	add.w	r2, r8, r0
 800fdb0:	b292      	uxth	r2, r2
 800fdb2:	e7c7      	b.n	800fd44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	e7d0      	b.n	800fd5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800fdb8:	4563      	cmp	r3, ip
 800fdba:	dd81      	ble.n	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdbc:	8a63      	ldrh	r3, [r4, #18]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f43f af7e 	beq.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	8ba2      	ldrh	r2, [r4, #28]
 800fdc8:	77a3      	strb	r3, [r4, #30]
 800fdca:	8b63      	ldrh	r3, [r4, #26]
 800fdcc:	4413      	add	r3, r2
 800fdce:	8363      	strh	r3, [r4, #26]
 800fdd0:	b007      	add	sp, #28
 800fdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	4611      	mov	r1, r2
 800fdda:	4620      	mov	r0, r4
 800fddc:	f7ff ff42 	bl	800fc64 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fde0:	e76e      	b.n	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fde2:	4563      	cmp	r3, ip
 800fde4:	dd14      	ble.n	800fe10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800fde6:	9b02      	ldr	r3, [sp, #8]
 800fde8:	b113      	cbz	r3, 800fdf0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800fdea:	2301      	movs	r3, #1
 800fdec:	460a      	mov	r2, r1
 800fdee:	e783      	b.n	800fcf8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800fdf0:	9b01      	ldr	r3, [sp, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f43f af64 	beq.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	f47f af61 	bne.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdfe:	b116      	cbz	r6, 800fe06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800fe00:	2301      	movs	r3, #1
 800fe02:	462a      	mov	r2, r5
 800fe04:	e779      	b.n	800fcfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800fe06:	8a63      	ldrh	r3, [r4, #18]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f43f af59 	beq.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe0e:	e7df      	b.n	800fdd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	f47f af55 	bne.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe16:	2e00      	cmp	r6, #0
 800fe18:	f43f af52 	beq.w	800fcc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	462a      	mov	r2, r5
 800fe20:	e7db      	b.n	800fdda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800fe22 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800fe22:	b530      	push	{r4, r5, lr}
 800fe24:	4605      	mov	r5, r0
 800fe26:	b08b      	sub	sp, #44	; 0x2c
 800fe28:	b191      	cbz	r1, 800fe50 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800fe2a:	2401      	movs	r4, #1
 800fe2c:	e9cd 3100 	strd	r3, r1, [sp]
 800fe30:	4613      	mov	r3, r2
 800fe32:	4601      	mov	r1, r0
 800fe34:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800fe38:	a802      	add	r0, sp, #8
 800fe3a:	f7ff fd0b 	bl	800f854 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fe3e:	2100      	movs	r1, #0
 800fe40:	a802      	add	r0, sp, #8
 800fe42:	f7ff ff1f 	bl	800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fe46:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fe4a:	b163      	cbz	r3, 800fe66 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800fe4c:	3401      	adds	r4, #1
 800fe4e:	e7f6      	b.n	800fe3e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800fe50:	2401      	movs	r4, #1
 800fe52:	f002 fcf3 	bl	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fe56:	280a      	cmp	r0, #10
 800fe58:	4628      	mov	r0, r5
 800fe5a:	bf08      	it	eq
 800fe5c:	3401      	addeq	r4, #1
 800fe5e:	f002 fced 	bl	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d1f7      	bne.n	800fe56 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800fe66:	b2a0      	uxth	r0, r4
 800fe68:	b00b      	add	sp, #44	; 0x2c
 800fe6a:	bd30      	pop	{r4, r5, pc}

0800fe6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	b0e5      	sub	sp, #404	; 0x194
 800fe72:	4689      	mov	r9, r1
 800fe74:	461c      	mov	r4, r3
 800fe76:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800fe7a:	900a      	str	r0, [sp, #40]	; 0x28
 800fe7c:	f1ba 0f00 	cmp.w	sl, #0
 800fe80:	f000 80b4 	beq.w	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 80b0 	beq.w	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe8c:	7ba3      	ldrb	r3, [r4, #14]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f000 80ac 	beq.w	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe94:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800fe98:	6810      	ldr	r0, [r2, #0]
 800fe9a:	6851      	ldr	r1, [r2, #4]
 800fe9c:	2500      	movs	r5, #0
 800fe9e:	4643      	mov	r3, r8
 800fea0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800fea4:	950f      	str	r5, [sp, #60]	; 0x3c
 800fea6:	af19      	add	r7, sp, #100	; 0x64
 800fea8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800feac:	79a2      	ldrb	r2, [r4, #6]
 800feae:	c303      	stmia	r3!, {r0, r1}
 800feb0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800feb4:	a90f      	add	r1, sp, #60	; 0x3c
 800feb6:	4640      	mov	r0, r8
 800feb8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800febc:	f7ff fd40 	bl	800f940 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fec0:	a90f      	add	r1, sp, #60	; 0x3c
 800fec2:	79a2      	ldrb	r2, [r4, #6]
 800fec4:	4608      	mov	r0, r1
 800fec6:	f7ff fd3b 	bl	800f940 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800feca:	4638      	mov	r0, r7
 800fecc:	f002 f868 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 800fed0:	6820      	ldr	r0, [r4, #0]
 800fed2:	6803      	ldr	r3, [r0, #0]
 800fed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fed6:	4798      	blx	r3
 800fed8:	4606      	mov	r6, r0
 800feda:	6820      	ldr	r0, [r4, #0]
 800fedc:	6803      	ldr	r3, [r0, #0]
 800fede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fee0:	4798      	blx	r3
 800fee2:	4633      	mov	r3, r6
 800fee4:	9000      	str	r0, [sp, #0]
 800fee6:	4651      	mov	r1, sl
 800fee8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800feea:	4638      	mov	r0, r7
 800feec:	f002 f8ab 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fef0:	7923      	ldrb	r3, [r4, #4]
 800fef2:	6820      	ldr	r0, [r4, #0]
 800fef4:	9308      	str	r3, [sp, #32]
 800fef6:	6803      	ldr	r3, [r0, #0]
 800fef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fefa:	4798      	blx	r3
 800fefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff00:	181e      	adds	r6, r3, r0
 800ff02:	42ae      	cmp	r6, r5
 800ff04:	dd06      	ble.n	800ff14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800ff06:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800ff0a:	4282      	cmp	r2, r0
 800ff0c:	bfa4      	itt	ge
 800ff0e:	189d      	addge	r5, r3, r2
 800ff10:	fb95 f5f6 	sdivge	r5, r5, r6
 800ff14:	a832      	add	r0, sp, #200	; 0xc8
 800ff16:	f002 f843 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 800ff1a:	7c23      	ldrb	r3, [r4, #16]
 800ff1c:	b17b      	cbz	r3, 800ff3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800ff1e:	6820      	ldr	r0, [r4, #0]
 800ff20:	6803      	ldr	r3, [r0, #0]
 800ff22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff24:	4798      	blx	r3
 800ff26:	4683      	mov	fp, r0
 800ff28:	6820      	ldr	r0, [r4, #0]
 800ff2a:	6803      	ldr	r3, [r0, #0]
 800ff2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff2e:	4798      	blx	r3
 800ff30:	465b      	mov	r3, fp
 800ff32:	9000      	str	r0, [sp, #0]
 800ff34:	4651      	mov	r1, sl
 800ff36:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ff38:	a832      	add	r0, sp, #200	; 0xc8
 800ff3a:	f002 f884 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ff3e:	7be1      	ldrb	r1, [r4, #15]
 800ff40:	a811      	add	r0, sp, #68	; 0x44
 800ff42:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ff46:	7963      	ldrb	r3, [r4, #5]
 800ff48:	1a52      	subs	r2, r2, r1
 800ff4a:	7c21      	ldrb	r1, [r4, #16]
 800ff4c:	9101      	str	r1, [sp, #4]
 800ff4e:	b292      	uxth	r2, r2
 800ff50:	6821      	ldr	r1, [r4, #0]
 800ff52:	9100      	str	r1, [sp, #0]
 800ff54:	a932      	add	r1, sp, #200	; 0xc8
 800ff56:	f7ff fc7d 	bl	800f854 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800ff5a:	7c23      	ldrb	r3, [r4, #16]
 800ff5c:	b9bb      	cbnz	r3, 800ff8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800ff5e:	fa1f fa86 	uxth.w	sl, r6
 800ff62:	2d00      	cmp	r5, #0
 800ff64:	dd45      	ble.n	800fff2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ff66:	4638      	mov	r0, r7
 800ff68:	f002 fc68 	bl	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d03d      	beq.n	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ff70:	280a      	cmp	r0, #10
 800ff72:	d1f6      	bne.n	800ff62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ff74:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ff78:	3d01      	subs	r5, #1
 800ff7a:	4453      	add	r3, sl
 800ff7c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ff80:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ff84:	eba3 030a 	sub.w	r3, r3, sl
 800ff88:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ff8c:	e7e9      	b.n	800ff62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ff8e:	0073      	lsls	r3, r6, #1
 800ff90:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ff94:	fa1f fa86 	uxth.w	sl, r6
 800ff98:	9309      	str	r3, [sp, #36]	; 0x24
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	dd29      	ble.n	800fff2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ff9e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ffa2:	a811      	add	r0, sp, #68	; 0x44
 800ffa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa6:	428b      	cmp	r3, r1
 800ffa8:	bfd4      	ite	le
 800ffaa:	2100      	movle	r1, #0
 800ffac:	2101      	movgt	r1, #1
 800ffae:	f7ff fe69 	bl	800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ffb2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	455b      	cmp	r3, fp
 800ffbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffbe:	d005      	beq.n	800ffcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800ffc0:	7961      	ldrb	r1, [r4, #5]
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7f4 fbfa 	bl	80047bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ffc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffca:	e7f4      	b.n	800ffb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800ffcc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ffd0:	3d01      	subs	r5, #1
 800ffd2:	4453      	add	r3, sl
 800ffd4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ffd8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ffdc:	eba3 030a 	sub.w	r3, r3, sl
 800ffe0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ffe4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1d6      	bne.n	800ff9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800ffec:	b065      	add	sp, #404	; 0x194
 800ffee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800fff6:	ad4b      	add	r5, sp, #300	; 0x12c
 800fff8:	f04f 0b00 	mov.w	fp, #0
 800fffc:	7c23      	ldrb	r3, [r4, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d067      	beq.n	80100d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8010002:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010006:	a811      	add	r0, sp, #68	; 0x44
 8010008:	458a      	cmp	sl, r1
 801000a:	bfd4      	ite	le
 801000c:	2100      	movle	r1, #0
 801000e:	2101      	movgt	r1, #1
 8010010:	f7ff fe38 	bl	800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8010014:	9b08      	ldr	r3, [sp, #32]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d056      	beq.n	80100c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801001a:	7c23      	ldrb	r3, [r4, #16]
 801001c:	2264      	movs	r2, #100	; 0x64
 801001e:	4639      	mov	r1, r7
 8010020:	4628      	mov	r0, r5
 8010022:	9309      	str	r3, [sp, #36]	; 0x24
 8010024:	f00c fa08 	bl	801c438 <memcpy>
 8010028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002a:	2b00      	cmp	r3, #0
 801002c:	d059      	beq.n	80100e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801002e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8010032:	7922      	ldrb	r2, [r4, #4]
 8010034:	2a01      	cmp	r2, #1
 8010036:	d13d      	bne.n	80100b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8010038:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801003c:	1ac0      	subs	r0, r0, r3
 801003e:	2302      	movs	r3, #2
 8010040:	fb90 f0f3 	sdiv	r0, r0, r3
 8010044:	b200      	sxth	r0, r0
 8010046:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801004a:	4418      	add	r0, r3
 801004c:	7c23      	ldrb	r3, [r4, #16]
 801004e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d03a      	beq.n	80100cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8010056:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801005a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801005e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8010062:	9500      	str	r5, [sp, #0]
 8010064:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010066:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801006a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801006e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8010072:	464a      	mov	r2, r9
 8010074:	2100      	movs	r1, #0
 8010076:	f7ff fc94 	bl	800f9a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801007a:	2800      	cmp	r0, #0
 801007c:	d1b6      	bne.n	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801007e:	b2b2      	uxth	r2, r6
 8010080:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010084:	4611      	mov	r1, r2
 8010086:	4413      	add	r3, r2
 8010088:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801008c:	b21b      	sxth	r3, r3
 801008e:	1a52      	subs	r2, r2, r1
 8010090:	7c21      	ldrb	r1, [r4, #16]
 8010092:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010096:	b212      	sxth	r2, r2
 8010098:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801009c:	b109      	cbz	r1, 80100a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801009e:	42b2      	cmp	r2, r6
 80100a0:	dba4      	blt.n	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80100a2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80100a6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80100aa:	440a      	add	r2, r1
 80100ac:	b212      	sxth	r2, r2
 80100ae:	4293      	cmp	r3, r2
 80100b0:	dda4      	ble.n	800fffc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 80100b2:	e79b      	b.n	800ffec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80100b4:	2a02      	cmp	r2, #2
 80100b6:	d105      	bne.n	80100c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80100b8:	7be2      	ldrb	r2, [r4, #15]
 80100ba:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80100be:	1a80      	subs	r0, r0, r2
 80100c0:	1ac0      	subs	r0, r0, r3
 80100c2:	e7bf      	b.n	8010044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 80100c4:	2000      	movs	r0, #0
 80100c6:	e7be      	b.n	8010046 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 80100c8:	7be0      	ldrb	r0, [r4, #15]
 80100ca:	e7bc      	b.n	8010046 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 80100cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100d0:	e7c3      	b.n	801005a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 80100d2:	9b08      	ldr	r3, [sp, #32]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d0f7      	beq.n	80100c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80100d8:	2264      	movs	r2, #100	; 0x64
 80100da:	4639      	mov	r1, r7
 80100dc:	4628      	mov	r0, r5
 80100de:	f00c f9ab 	bl	801c438 <memcpy>
 80100e2:	2300      	movs	r3, #0
 80100e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100e8:	6821      	ldr	r1, [r4, #0]
 80100ea:	4628      	mov	r0, r5
 80100ec:	f7ff fbec 	bl	800f8c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80100f0:	b203      	sxth	r3, r0
 80100f2:	e79e      	b.n	8010032 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

080100f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	b510      	push	{r4, lr}
 80100f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80100fc:	d00b      	beq.n	8010116 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d00e      	beq.n	8010120 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8010102:	2b01      	cmp	r3, #1
 8010104:	d001      	beq.n	801010a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8010106:	1860      	adds	r0, r4, r1
 8010108:	bd10      	pop	{r4, pc}
 801010a:	8880      	ldrh	r0, [r0, #4]
 801010c:	4420      	add	r0, r4
 801010e:	b200      	sxth	r0, r0
 8010110:	1a80      	subs	r0, r0, r2
 8010112:	3801      	subs	r0, #1
 8010114:	e7f8      	b.n	8010108 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8010116:	8880      	ldrh	r0, [r0, #4]
 8010118:	4420      	add	r0, r4
 801011a:	b200      	sxth	r0, r0
 801011c:	1a40      	subs	r0, r0, r1
 801011e:	e7f8      	b.n	8010112 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8010120:	18a0      	adds	r0, r4, r2
 8010122:	e7f1      	b.n	8010108 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08010124 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8010124:	2b02      	cmp	r3, #2
 8010126:	b510      	push	{r4, lr}
 8010128:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801012c:	d006      	beq.n	801013c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801012e:	2b03      	cmp	r3, #3
 8010130:	d00a      	beq.n	8010148 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8010132:	2b01      	cmp	r3, #1
 8010134:	bf14      	ite	ne
 8010136:	18a0      	addne	r0, r4, r2
 8010138:	1860      	addeq	r0, r4, r1
 801013a:	bd10      	pop	{r4, pc}
 801013c:	88c0      	ldrh	r0, [r0, #6]
 801013e:	4420      	add	r0, r4
 8010140:	b200      	sxth	r0, r0
 8010142:	1a80      	subs	r0, r0, r2
 8010144:	3801      	subs	r0, #1
 8010146:	e7f8      	b.n	801013a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8010148:	88c0      	ldrh	r0, [r0, #6]
 801014a:	4420      	add	r0, r4
 801014c:	b200      	sxth	r0, r0
 801014e:	1a40      	subs	r0, r0, r1
 8010150:	e7f8      	b.n	8010144 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08010154 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8010154:	4b01      	ldr	r3, [pc, #4]	; (801015c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
 801015a:	4770      	bx	lr
 801015c:	24006c70 	.word	0x24006c70

08010160 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8010160:	4603      	mov	r3, r0
 8010162:	b1c8      	cbz	r0, 8010198 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8010164:	0c02      	lsrs	r2, r0, #16
 8010166:	0412      	lsls	r2, r2, #16
 8010168:	b9a2      	cbnz	r2, 8010194 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801016a:	0403      	lsls	r3, r0, #16
 801016c:	2010      	movs	r0, #16
 801016e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010172:	bf04      	itt	eq
 8010174:	021b      	lsleq	r3, r3, #8
 8010176:	3008      	addeq	r0, #8
 8010178:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801017c:	bf04      	itt	eq
 801017e:	011b      	lsleq	r3, r3, #4
 8010180:	3004      	addeq	r0, #4
 8010182:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010186:	bf04      	itt	eq
 8010188:	009b      	lsleq	r3, r3, #2
 801018a:	3002      	addeq	r0, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	db04      	blt.n	801019a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8010190:	3001      	adds	r0, #1
 8010192:	4770      	bx	lr
 8010194:	2000      	movs	r0, #0
 8010196:	e7ea      	b.n	801016e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8010198:	2020      	movs	r0, #32
 801019a:	4770      	bx	lr

0801019c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a0:	b087      	sub	sp, #28
 80101a2:	4681      	mov	r9, r0
 80101a4:	4698      	mov	r8, r3
 80101a6:	4610      	mov	r0, r2
 80101a8:	460d      	mov	r5, r1
 80101aa:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80101ae:	b981      	cbnz	r1, 80101d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80101b0:	b14b      	cbz	r3, 80101c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80101b2:	460b      	mov	r3, r1
 80101b4:	464a      	mov	r2, r9
 80101b6:	4641      	mov	r1, r8
 80101b8:	e9cd 4700 	strd	r4, r7, [sp]
 80101bc:	f7ff ffee 	bl	801019c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80101c0:	b007      	add	sp, #28
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	f04f 33ff 	mov.w	r3, #4294967295
 80101ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80101ce:	603b      	str	r3, [r7, #0]
 80101d0:	e7f6      	b.n	80101c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80101d2:	fa32 fa01 	lsrs.w	sl, r2, r1
 80101d6:	d107      	bne.n	80101e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80101d8:	fb09 f602 	mul.w	r6, r9, r2
 80101dc:	fbb6 f0f4 	udiv	r0, r6, r4
 80101e0:	fb04 6610 	mls	r6, r4, r0, r6
 80101e4:	603e      	str	r6, [r7, #0]
 80101e6:	e7eb      	b.n	80101c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80101e8:	2601      	movs	r6, #1
 80101ea:	fa09 fb01 	lsl.w	fp, r9, r1
 80101ee:	408e      	lsls	r6, r1
 80101f0:	fbbb f3f4 	udiv	r3, fp, r4
 80101f4:	3e01      	subs	r6, #1
 80101f6:	9302      	str	r3, [sp, #8]
 80101f8:	fb0a f303 	mul.w	r3, sl, r3
 80101fc:	4016      	ands	r6, r2
 80101fe:	9303      	str	r3, [sp, #12]
 8010200:	4630      	mov	r0, r6
 8010202:	f7ff ffad 	bl	8010160 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010206:	464a      	mov	r2, r9
 8010208:	460b      	mov	r3, r1
 801020a:	4601      	mov	r1, r0
 801020c:	4630      	mov	r0, r6
 801020e:	e9cd 4700 	strd	r4, r7, [sp]
 8010212:	f7ff ffc3 	bl	801019c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010216:	9b02      	ldr	r3, [sp, #8]
 8010218:	4606      	mov	r6, r0
 801021a:	eb05 0108 	add.w	r1, r5, r8
 801021e:	fb04 bb13 	mls	fp, r4, r3, fp
 8010222:	4658      	mov	r0, fp
 8010224:	f7ff ff9c 	bl	8010160 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010228:	ab05      	add	r3, sp, #20
 801022a:	465a      	mov	r2, fp
 801022c:	e9cd 4300 	strd	r4, r3, [sp]
 8010230:	4603      	mov	r3, r0
 8010232:	4650      	mov	r0, sl
 8010234:	f7ff ffb2 	bl	801019c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010238:	6839      	ldr	r1, [r7, #0]
 801023a:	9a05      	ldr	r2, [sp, #20]
 801023c:	9b03      	ldr	r3, [sp, #12]
 801023e:	4411      	add	r1, r2
 8010240:	fbb1 f2f4 	udiv	r2, r1, r4
 8010244:	18d3      	adds	r3, r2, r3
 8010246:	fb04 1412 	mls	r4, r4, r2, r1
 801024a:	441e      	add	r6, r3
 801024c:	603c      	str	r4, [r7, #0]
 801024e:	4430      	add	r0, r6
 8010250:	e7b6      	b.n	80101c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08010252 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8010252:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010256:	b085      	sub	sp, #20
 8010258:	f1b0 0900 	subs.w	r9, r0, #0
 801025c:	461d      	mov	r5, r3
 801025e:	4617      	mov	r7, r2
 8010260:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010262:	bfbb      	ittet	lt
 8010264:	f1c9 0900 	rsblt	r9, r9, #0
 8010268:	f04f 36ff 	movlt.w	r6, #4294967295
 801026c:	2601      	movge	r6, #1
 801026e:	6823      	ldrlt	r3, [r4, #0]
 8010270:	bfbc      	itt	lt
 8010272:	425b      	neglt	r3, r3
 8010274:	6023      	strlt	r3, [r4, #0]
 8010276:	2a00      	cmp	r2, #0
 8010278:	da04      	bge.n	8010284 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	4257      	negs	r7, r2
 801027e:	4276      	negs	r6, r6
 8010280:	425b      	negs	r3, r3
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	2d00      	cmp	r5, #0
 8010286:	4638      	mov	r0, r7
 8010288:	bfba      	itte	lt
 801028a:	426d      	neglt	r5, r5
 801028c:	f04f 38ff 	movlt.w	r8, #4294967295
 8010290:	f04f 0801 	movge.w	r8, #1
 8010294:	f7ff ff64 	bl	8010160 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010298:	ab03      	add	r3, sp, #12
 801029a:	463a      	mov	r2, r7
 801029c:	e9cd 5300 	strd	r5, r3, [sp]
 80102a0:	4603      	mov	r3, r0
 80102a2:	4648      	mov	r0, r9
 80102a4:	f7ff ff7a 	bl	801019c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80102a8:	6823      	ldr	r3, [r4, #0]
 80102aa:	9a03      	ldr	r2, [sp, #12]
 80102ac:	4546      	cmp	r6, r8
 80102ae:	441a      	add	r2, r3
 80102b0:	fb92 f3f5 	sdiv	r3, r2, r5
 80102b4:	4418      	add	r0, r3
 80102b6:	fb05 2313 	mls	r3, r5, r3, r2
 80102ba:	bf18      	it	ne
 80102bc:	4240      	negne	r0, r0
 80102be:	1c72      	adds	r2, r6, #1
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	d105      	bne.n	80102d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f1c3 0200 	rsb	r2, r3, #0
 80102ca:	db0b      	blt.n	80102e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80102cc:	6022      	str	r2, [r4, #0]
 80102ce:	e006      	b.n	80102de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80102d0:	2e01      	cmp	r6, #1
 80102d2:	d104      	bne.n	80102de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	da02      	bge.n	80102de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80102d8:	442b      	add	r3, r5
 80102da:	3801      	subs	r0, #1
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	b005      	add	sp, #20
 80102e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e4:	3801      	subs	r0, #1
 80102e6:	1b52      	subs	r2, r2, r5
 80102e8:	e7f0      	b.n	80102cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080102ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80102ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80102f0:	4c1c      	ldr	r4, [pc, #112]	; (8010364 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80102f2:	4605      	mov	r5, r0
 80102f4:	6807      	ldr	r7, [r0, #0]
 80102f6:	69a3      	ldr	r3, [r4, #24]
 80102f8:	b92b      	cbnz	r3, 8010306 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80102fa:	6840      	ldr	r0, [r0, #4]
 80102fc:	e9c5 7000 	strd	r7, r0, [r5]
 8010300:	b004      	add	sp, #16
 8010302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010306:	f04f 0802 	mov.w	r8, #2
 801030a:	68a2      	ldr	r2, [r4, #8]
 801030c:	ae04      	add	r6, sp, #16
 801030e:	6820      	ldr	r0, [r4, #0]
 8010310:	fb93 f1f8 	sdiv	r1, r3, r8
 8010314:	440a      	add	r2, r1
 8010316:	69e1      	ldr	r1, [r4, #28]
 8010318:	f846 2d04 	str.w	r2, [r6, #-4]!
 801031c:	463a      	mov	r2, r7
 801031e:	9600      	str	r6, [sp, #0]
 8010320:	f7ff ff97 	bl	8010252 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010324:	69a3      	ldr	r3, [r4, #24]
 8010326:	4607      	mov	r7, r0
 8010328:	686a      	ldr	r2, [r5, #4]
 801032a:	6a21      	ldr	r1, [r4, #32]
 801032c:	9600      	str	r6, [sp, #0]
 801032e:	6860      	ldr	r0, [r4, #4]
 8010330:	f7ff ff8f 	bl	8010252 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010334:	69a3      	ldr	r3, [r4, #24]
 8010336:	6962      	ldr	r2, [r4, #20]
 8010338:	4407      	add	r7, r0
 801033a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801033c:	9600      	str	r6, [sp, #0]
 801033e:	68e0      	ldr	r0, [r4, #12]
 8010340:	fb93 f8f8 	sdiv	r8, r3, r8
 8010344:	4442      	add	r2, r8
 8010346:	9203      	str	r2, [sp, #12]
 8010348:	682a      	ldr	r2, [r5, #0]
 801034a:	f7ff ff82 	bl	8010252 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801034e:	4680      	mov	r8, r0
 8010350:	9600      	str	r6, [sp, #0]
 8010352:	69a3      	ldr	r3, [r4, #24]
 8010354:	686a      	ldr	r2, [r5, #4]
 8010356:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010358:	6920      	ldr	r0, [r4, #16]
 801035a:	f7ff ff7a 	bl	8010252 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801035e:	4440      	add	r0, r8
 8010360:	e7cc      	b.n	80102fc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8010362:	bf00      	nop
 8010364:	24006c74 	.word	0x24006c74

08010368 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010368:	4b07      	ldr	r3, [pc, #28]	; (8010388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d109      	bne.n	8010384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8010370:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010374:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010378:	8003      	strh	r3, [r0, #0]
 801037a:	4b04      	ldr	r3, [pc, #16]	; (801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801037c:	881b      	ldrh	r3, [r3, #0]
 801037e:	3b01      	subs	r3, #1
 8010380:	1a9b      	subs	r3, r3, r2
 8010382:	800b      	strh	r3, [r1, #0]
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop
 8010388:	24006c60 	.word	0x24006c60
 801038c:	24006c64 	.word	0x24006c64

08010390 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8010390:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8010392:	b510      	push	{r4, lr}
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b01      	cmp	r3, #1
 8010398:	d108      	bne.n	80103ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801039a:	4b06      	ldr	r3, [pc, #24]	; (80103b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801039c:	880c      	ldrh	r4, [r1, #0]
 801039e:	881b      	ldrh	r3, [r3, #0]
 80103a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	1b1b      	subs	r3, r3, r4
 80103a8:	8003      	strh	r3, [r0, #0]
 80103aa:	800a      	strh	r2, [r1, #0]
 80103ac:	bd10      	pop	{r4, pc}
 80103ae:	bf00      	nop
 80103b0:	24006c60 	.word	0x24006c60
 80103b4:	24006c64 	.word	0x24006c64

080103b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80103b8:	4b0a      	ldr	r3, [pc, #40]	; (80103e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80103ba:	b510      	push	{r4, lr}
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d10e      	bne.n	80103e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80103c2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80103c6:	8843      	ldrh	r3, [r0, #2]
 80103c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80103cc:	18ca      	adds	r2, r1, r3
 80103ce:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80103d0:	8044      	strh	r4, [r0, #2]
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	1a9b      	subs	r3, r3, r2
 80103d6:	8003      	strh	r3, [r0, #0]
 80103d8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80103dc:	8081      	strh	r1, [r0, #4]
 80103de:	80c3      	strh	r3, [r0, #6]
 80103e0:	bd10      	pop	{r4, pc}
 80103e2:	bf00      	nop
 80103e4:	24006c60 	.word	0x24006c60
 80103e8:	24006c64 	.word	0x24006c64

080103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80103ec:	4b08      	ldr	r3, [pc, #32]	; (8010410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d10c      	bne.n	801040e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80103f4:	8803      	ldrh	r3, [r0, #0]
 80103f6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80103fa:	8842      	ldrh	r2, [r0, #2]
 80103fc:	8002      	strh	r2, [r0, #0]
 80103fe:	185a      	adds	r2, r3, r1
 8010400:	4b04      	ldr	r3, [pc, #16]	; (8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	8043      	strh	r3, [r0, #2]
 8010408:	88c3      	ldrh	r3, [r0, #6]
 801040a:	80c1      	strh	r1, [r0, #6]
 801040c:	8083      	strh	r3, [r0, #4]
 801040e:	4770      	bx	lr
 8010410:	24006c60 	.word	0x24006c60
 8010414:	24006c64 	.word	0x24006c64

08010418 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8010418:	4b07      	ldr	r3, [pc, #28]	; (8010438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801041a:	b510      	push	{r4, lr}
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b01      	cmp	r3, #1
 8010420:	d108      	bne.n	8010434 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8010422:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010426:	f9b0 4000 	ldrsh.w	r4, [r0]
 801042a:	8003      	strh	r3, [r0, #0]
 801042c:	8893      	ldrh	r3, [r2, #4]
 801042e:	3b01      	subs	r3, #1
 8010430:	1b1b      	subs	r3, r3, r4
 8010432:	800b      	strh	r3, [r1, #0]
 8010434:	bd10      	pop	{r4, pc}
 8010436:	bf00      	nop
 8010438:	24006c60 	.word	0x24006c60

0801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801043c:	4b0b      	ldr	r3, [pc, #44]	; (801046c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d111      	bne.n	8010468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8010444:	680b      	ldr	r3, [r1, #0]
 8010446:	ed90 7a00 	vldr	s14, [r0]
 801044a:	6003      	str	r3, [r0, #0]
 801044c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8010450:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8010454:	ee07 3a90 	vmov	s15, r3
 8010458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801045c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010464:	edc1 7a00 	vstr	s15, [r1]
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	24006c60 	.word	0x24006c60
 8010470:	38d1b717 	.word	0x38d1b717

08010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8010474:	4b0a      	ldr	r3, [pc, #40]	; (80104a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8010476:	460a      	mov	r2, r1
 8010478:	b510      	push	{r4, lr}
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d10d      	bne.n	801049c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8010480:	8881      	ldrh	r1, [r0, #4]
 8010482:	8803      	ldrh	r3, [r0, #0]
 8010484:	440b      	add	r3, r1
 8010486:	4601      	mov	r1, r0
 8010488:	3b01      	subs	r3, #1
 801048a:	f821 3b02 	strh.w	r3, [r1], #2
 801048e:	f7ff ffc3 	bl	8010418 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010492:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010496:	88c2      	ldrh	r2, [r0, #6]
 8010498:	80c3      	strh	r3, [r0, #6]
 801049a:	8082      	strh	r2, [r0, #4]
 801049c:	bd10      	pop	{r4, pc}
 801049e:	bf00      	nop
 80104a0:	24006c60 	.word	0x24006c60

080104a4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80104a4:	4b06      	ldr	r3, [pc, #24]	; (80104c0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80104a6:	2100      	movs	r1, #0
 80104a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80104ac:	4b05      	ldr	r3, [pc, #20]	; (80104c4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80104ae:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80104b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104b6:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80104ba:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80104be:	4770      	bx	lr
 80104c0:	24006c5c 	.word	0x24006c5c
 80104c4:	24006c5e 	.word	0x24006c5e

080104c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80104c8:	4b03      	ldr	r3, [pc, #12]	; (80104d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80104ca:	6818      	ldr	r0, [r3, #0]
 80104cc:	b110      	cbz	r0, 80104d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80104ce:	6803      	ldr	r3, [r0, #0]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	4718      	bx	r3
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	24006ca4 	.word	0x24006ca4

080104dc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80104dc:	4770      	bx	lr
	...

080104e0 <_ZN8touchgfx11Application4drawEv>:
 80104e0:	4b09      	ldr	r3, [pc, #36]	; (8010508 <_ZN8touchgfx11Application4drawEv+0x28>)
 80104e2:	b507      	push	{r0, r1, r2, lr}
 80104e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80104e8:	2100      	movs	r1, #0
 80104ea:	4b08      	ldr	r3, [pc, #32]	; (801050c <_ZN8touchgfx11Application4drawEv+0x2c>)
 80104ec:	9100      	str	r1, [sp, #0]
 80104ee:	4669      	mov	r1, sp
 80104f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80104f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80104fc:	6803      	ldr	r3, [r0, #0]
 80104fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010500:	4798      	blx	r3
 8010502:	b003      	add	sp, #12
 8010504:	f85d fb04 	ldr.w	pc, [sp], #4
 8010508:	24006c5c 	.word	0x24006c5c
 801050c:	24006c5e 	.word	0x24006c5e

08010510 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8010510:	4b03      	ldr	r3, [pc, #12]	; (8010520 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8010512:	6818      	ldr	r0, [r3, #0]
 8010514:	b110      	cbz	r0, 801051c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8010516:	6803      	ldr	r3, [r0, #0]
 8010518:	69db      	ldr	r3, [r3, #28]
 801051a:	4718      	bx	r3
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	24006ca4 	.word	0x24006ca4

08010524 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8010524:	4b03      	ldr	r3, [pc, #12]	; (8010534 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	b110      	cbz	r0, 8010530 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801052a:	6803      	ldr	r3, [r0, #0]
 801052c:	6a1b      	ldr	r3, [r3, #32]
 801052e:	4718      	bx	r3
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	24006ca4 	.word	0x24006ca4

08010538 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8010538:	4b03      	ldr	r3, [pc, #12]	; (8010548 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801053a:	6818      	ldr	r0, [r3, #0]
 801053c:	b110      	cbz	r0, 8010544 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801053e:	6803      	ldr	r3, [r0, #0]
 8010540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010542:	4718      	bx	r3
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	24006ca4 	.word	0x24006ca4

0801054c <_ZN8touchgfx11ApplicationD1Ev>:
 801054c:	4770      	bx	lr

0801054e <_ZN8touchgfx11ApplicationD0Ev>:
 801054e:	b510      	push	{r4, lr}
 8010550:	4604      	mov	r4, r0
 8010552:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010556:	f00b fddb 	bl	801c110 <_ZdlPvj>
 801055a:	4620      	mov	r0, r4
 801055c:	bd10      	pop	{r4, pc}
	...

08010560 <_ZN8touchgfx11Application15handleTickEventEv>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	4d38      	ldr	r5, [pc, #224]	; (8010644 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8010564:	4604      	mov	r4, r0
 8010566:	6828      	ldr	r0, [r5, #0]
 8010568:	b140      	cbz	r0, 801057c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801056a:	7a03      	ldrb	r3, [r0, #8]
 801056c:	b933      	cbnz	r3, 801057c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801056e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8010572:	6803      	ldr	r3, [r0, #0]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801057a:	4718      	bx	r3
 801057c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8010580:	b97b      	cbnz	r3, 80105a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010582:	b170      	cbz	r0, 80105a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010584:	7a03      	ldrb	r3, [r0, #8]
 8010586:	b163      	cbz	r3, 80105a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010588:	4b2f      	ldr	r3, [pc, #188]	; (8010648 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801058a:	6818      	ldr	r0, [r3, #0]
 801058c:	b110      	cbz	r0, 8010594 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801058e:	6803      	ldr	r3, [r0, #0]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	4798      	blx	r3
 8010594:	6828      	ldr	r0, [r5, #0]
 8010596:	6803      	ldr	r3, [r0, #0]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	4798      	blx	r3
 801059c:	2301      	movs	r3, #1
 801059e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80105a2:	2500      	movs	r5, #0
 80105a4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80105a8:	42a8      	cmp	r0, r5
 80105aa:	dd0c      	ble.n	80105c6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80105ac:	1963      	adds	r3, r4, r5
 80105ae:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80105b2:	b132      	cbz	r2, 80105c2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80105b4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80105b8:	4413      	add	r3, r2
 80105ba:	6858      	ldr	r0, [r3, #4]
 80105bc:	6803      	ldr	r3, [r0, #0]
 80105be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105c0:	4798      	blx	r3
 80105c2:	3501      	adds	r5, #1
 80105c4:	e7ee      	b.n	80105a4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80105c6:	2300      	movs	r3, #0
 80105c8:	461a      	mov	r2, r3
 80105ca:	4298      	cmp	r0, r3
 80105cc:	d10f      	bne.n	80105ee <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 80105ce:	1d25      	adds	r5, r4, #4
 80105d0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80105d4:	4291      	cmp	r1, r2
 80105d6:	dd2d      	ble.n	8010634 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 80105d8:	1e48      	subs	r0, r1, #1
 80105da:	b280      	uxth	r0, r0
 80105dc:	4288      	cmp	r0, r1
 80105de:	d31a      	bcc.n	8010616 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 80105e0:	4b1a      	ldr	r3, [pc, #104]	; (801064c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 80105e2:	f240 11a9 	movw	r1, #425	; 0x1a9
 80105e6:	4a1a      	ldr	r2, [pc, #104]	; (8010650 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 80105e8:	481a      	ldr	r0, [pc, #104]	; (8010654 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80105ea:	f00b fea7 	bl	801c33c <__assert_func>
 80105ee:	18e1      	adds	r1, r4, r3
 80105f0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80105f4:	b16d      	cbz	r5, 8010612 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d00a      	beq.n	8010610 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 80105fa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80105fe:	4431      	add	r1, r6
 8010600:	684e      	ldr	r6, [r1, #4]
 8010602:	b291      	uxth	r1, r2
 8010604:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010608:	604e      	str	r6, [r1, #4]
 801060a:	18a1      	adds	r1, r4, r2
 801060c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8010610:	3201      	adds	r2, #1
 8010612:	3301      	adds	r3, #1
 8010614:	e7d9      	b.n	80105ca <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8010616:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801061a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801061e:	3304      	adds	r3, #4
 8010620:	428b      	cmp	r3, r1
 8010622:	d004      	beq.n	801062e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8010624:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8010628:	f843 6c04 	str.w	r6, [r3, #-4]
 801062c:	e7f8      	b.n	8010620 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801062e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8010632:	e7cd      	b.n	80105d0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8010634:	4b04      	ldr	r3, [pc, #16]	; (8010648 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8010636:	6818      	ldr	r0, [r3, #0]
 8010638:	b110      	cbz	r0, 8010640 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801063a:	6803      	ldr	r3, [r0, #0]
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063e:	e79a      	b.n	8010576 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8010640:	bd70      	pop	{r4, r5, r6, pc}
 8010642:	bf00      	nop
 8010644:	24006ca8 	.word	0x24006ca8
 8010648:	24006ca4 	.word	0x24006ca4
 801064c:	0801f79a 	.word	0x0801f79a
 8010650:	0801f984 	.word	0x0801f984
 8010654:	0801f7a8 	.word	0x0801f7a8

08010658 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	4606      	mov	r6, r0
 801065c:	460c      	mov	r4, r1
 801065e:	b929      	cbnz	r1, 801066c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8010660:	4b0c      	ldr	r3, [pc, #48]	; (8010694 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8010662:	2167      	movs	r1, #103	; 0x67
 8010664:	4a0c      	ldr	r2, [pc, #48]	; (8010698 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8010666:	480d      	ldr	r0, [pc, #52]	; (801069c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8010668:	f00b fe68 	bl	801c33c <__assert_func>
 801066c:	2300      	movs	r3, #0
 801066e:	4d0c      	ldr	r5, [pc, #48]	; (80106a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8010670:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010674:	6828      	ldr	r0, [r5, #0]
 8010676:	b110      	cbz	r0, 801067e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8010678:	6803      	ldr	r3, [r0, #0]
 801067a:	695b      	ldr	r3, [r3, #20]
 801067c:	4798      	blx	r3
 801067e:	602c      	str	r4, [r5, #0]
 8010680:	4620      	mov	r0, r4
 8010682:	6823      	ldr	r3, [r4, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	4798      	blx	r3
 8010688:	6833      	ldr	r3, [r6, #0]
 801068a:	4630      	mov	r0, r6
 801068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801068e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010692:	4718      	bx	r3
 8010694:	0801f766 	.word	0x0801f766
 8010698:	0801f844 	.word	0x0801f844
 801069c:	0801f770 	.word	0x0801f770
 80106a0:	24006ca4 	.word	0x24006ca4

080106a4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80106a4:	b510      	push	{r4, lr}
 80106a6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80106aa:	888a      	ldrh	r2, [r1, #4]
 80106ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80106b0:	4422      	add	r2, r4
 80106b2:	b212      	sxth	r2, r2
 80106b4:	4293      	cmp	r3, r2
 80106b6:	da15      	bge.n	80106e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80106b8:	8882      	ldrh	r2, [r0, #4]
 80106ba:	4413      	add	r3, r2
 80106bc:	b21b      	sxth	r3, r3
 80106be:	429c      	cmp	r4, r3
 80106c0:	da10      	bge.n	80106e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80106c2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80106c6:	88c9      	ldrh	r1, [r1, #6]
 80106c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80106cc:	4419      	add	r1, r3
 80106ce:	b209      	sxth	r1, r1
 80106d0:	428a      	cmp	r2, r1
 80106d2:	da07      	bge.n	80106e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80106d4:	88c0      	ldrh	r0, [r0, #6]
 80106d6:	4410      	add	r0, r2
 80106d8:	b200      	sxth	r0, r0
 80106da:	4283      	cmp	r3, r0
 80106dc:	bfac      	ite	ge
 80106de:	2000      	movge	r0, #0
 80106e0:	2001      	movlt	r0, #1
 80106e2:	bd10      	pop	{r4, pc}
 80106e4:	2000      	movs	r0, #0
 80106e6:	e7fc      	b.n	80106e2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080106e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 80106ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 80106f2:	42ac      	cmp	r4, r5
 80106f4:	db18      	blt.n	8010728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80106f6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80106fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80106fe:	429a      	cmp	r2, r3
 8010700:	db12      	blt.n	8010728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010702:	8886      	ldrh	r6, [r0, #4]
 8010704:	4435      	add	r5, r6
 8010706:	888e      	ldrh	r6, [r1, #4]
 8010708:	4434      	add	r4, r6
 801070a:	b22d      	sxth	r5, r5
 801070c:	b224      	sxth	r4, r4
 801070e:	42a5      	cmp	r5, r4
 8010710:	db0a      	blt.n	8010728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010712:	88c0      	ldrh	r0, [r0, #6]
 8010714:	4418      	add	r0, r3
 8010716:	88cb      	ldrh	r3, [r1, #6]
 8010718:	441a      	add	r2, r3
 801071a:	b200      	sxth	r0, r0
 801071c:	b212      	sxth	r2, r2
 801071e:	4290      	cmp	r0, r2
 8010720:	bfb4      	ite	lt
 8010722:	2000      	movlt	r0, #0
 8010724:	2001      	movge	r0, #1
 8010726:	bd70      	pop	{r4, r5, r6, pc}
 8010728:	2000      	movs	r0, #0
 801072a:	e7fc      	b.n	8010726 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801072c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	4604      	mov	r4, r0
 8010730:	4608      	mov	r0, r1
 8010732:	460d      	mov	r5, r1
 8010734:	f7fc f973 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010738:	b978      	cbnz	r0, 801075a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801073a:	4620      	mov	r0, r4
 801073c:	f7fc f96f 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010740:	f9b5 6000 	ldrsh.w	r6, [r5]
 8010744:	b150      	cbz	r0, 801075c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8010746:	8026      	strh	r6, [r4, #0]
 8010748:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801074c:	8063      	strh	r3, [r4, #2]
 801074e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8010752:	80a3      	strh	r3, [r4, #4]
 8010754:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010758:	80e3      	strh	r3, [r4, #6]
 801075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010760:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010764:	42b1      	cmp	r1, r6
 8010766:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801076a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801076e:	460f      	mov	r7, r1
 8010770:	88ed      	ldrh	r5, [r5, #6]
 8010772:	bfa8      	it	ge
 8010774:	4637      	movge	r7, r6
 8010776:	4293      	cmp	r3, r2
 8010778:	4618      	mov	r0, r3
 801077a:	4466      	add	r6, ip
 801077c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010780:	bfa8      	it	ge
 8010782:	4610      	movge	r0, r2
 8010784:	442a      	add	r2, r5
 8010786:	88e5      	ldrh	r5, [r4, #6]
 8010788:	4461      	add	r1, ip
 801078a:	b236      	sxth	r6, r6
 801078c:	8027      	strh	r7, [r4, #0]
 801078e:	442b      	add	r3, r5
 8010790:	b209      	sxth	r1, r1
 8010792:	b212      	sxth	r2, r2
 8010794:	8060      	strh	r0, [r4, #2]
 8010796:	b21b      	sxth	r3, r3
 8010798:	428e      	cmp	r6, r1
 801079a:	bfac      	ite	ge
 801079c:	ebc7 0106 	rsbge	r1, r7, r6
 80107a0:	ebc7 0101 	rsblt	r1, r7, r1
 80107a4:	429a      	cmp	r2, r3
 80107a6:	bfac      	ite	ge
 80107a8:	ebc0 0202 	rsbge	r2, r0, r2
 80107ac:	ebc0 0203 	rsblt	r2, r0, r3
 80107b0:	80a1      	strh	r1, [r4, #4]
 80107b2:	80e2      	strh	r2, [r4, #6]
 80107b4:	e7d1      	b.n	801075a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080107b8 <_ZN8touchgfx11Application11getInstanceEv>:
 80107b8:	4b01      	ldr	r3, [pc, #4]	; (80107c0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80107ba:	6818      	ldr	r0, [r3, #0]
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	24006cb4 	.word	0x24006cb4

080107c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80107c4:	2300      	movs	r3, #0
 80107c6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80107ca:	30a8      	adds	r0, #168	; 0xa8
 80107cc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80107d0:	f802 3b01 	strb.w	r3, [r2], #1
 80107d4:	4282      	cmp	r2, r0
 80107d6:	d1fb      	bne.n	80107d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80107d8:	4770      	bx	lr

080107da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80107da:	4603      	mov	r3, r0
 80107dc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80107e0:	2200      	movs	r2, #0
 80107e2:	801a      	strh	r2, [r3, #0]
 80107e4:	3308      	adds	r3, #8
 80107e6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80107ea:	f823 2c04 	strh.w	r2, [r3, #-4]
 80107ee:	f823 2c02 	strh.w	r2, [r3, #-2]
 80107f2:	428b      	cmp	r3, r1
 80107f4:	d1f5      	bne.n	80107e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80107f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80107fa:	4770      	bx	lr

080107fc <_ZN8touchgfx11ApplicationC1Ev>:
 80107fc:	b570      	push	{r4, r5, r6, lr}
 80107fe:	4b1a      	ldr	r3, [pc, #104]	; (8010868 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8010800:	2500      	movs	r5, #0
 8010802:	4604      	mov	r4, r0
 8010804:	30a8      	adds	r0, #168	; 0xa8
 8010806:	f840 3ca8 	str.w	r3, [r0, #-168]
 801080a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801080e:	f7ff ffe4 	bl	80107da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010812:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8010816:	f7ff ffe0 	bl	80107da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801081a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801081e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8010822:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8010826:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801082a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801082e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8010832:	490e      	ldr	r1, [pc, #56]	; (801086c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8010834:	480e      	ldr	r0, [pc, #56]	; (8010870 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8010836:	f00b fb3f 	bl	801beb8 <CRC_Lock>
 801083a:	4e0e      	ldr	r6, [pc, #56]	; (8010874 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801083c:	4b0e      	ldr	r3, [pc, #56]	; (8010878 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801083e:	b158      	cbz	r0, 8010858 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8010840:	801d      	strh	r5, [r3, #0]
 8010842:	2300      	movs	r3, #0
 8010844:	4a0d      	ldr	r2, [pc, #52]	; (801087c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8010846:	4620      	mov	r0, r4
 8010848:	6013      	str	r3, [r2, #0]
 801084a:	4a0d      	ldr	r2, [pc, #52]	; (8010880 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801084c:	6033      	str	r3, [r6, #0]
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	f7ff ffb8 	bl	80107c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8010854:	4620      	mov	r0, r4
 8010856:	bd70      	pop	{r4, r5, r6, pc}
 8010858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801085c:	2002      	movs	r0, #2
 801085e:	801a      	strh	r2, [r3, #0]
 8010860:	6030      	str	r0, [r6, #0]
 8010862:	f001 fa23 	bl	8011cac <_ZN8touchgfx6Screen4drawEv>
 8010866:	e7ec      	b.n	8010842 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8010868:	0801f808 	.word	0x0801f808
 801086c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010870:	f407a5c2 	.word	0xf407a5c2
 8010874:	24006ca4 	.word	0x24006ca4
 8010878:	24000080 	.word	0x24000080
 801087c:	24006cb4 	.word	0x24006cb4
 8010880:	24006ca8 	.word	0x24006ca8

08010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010884:	b510      	push	{r4, lr}
 8010886:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801088a:	428b      	cmp	r3, r1
 801088c:	d806      	bhi.n	801089c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801088e:	4b0b      	ldr	r3, [pc, #44]	; (80108bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8010890:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8010894:	4a0a      	ldr	r2, [pc, #40]	; (80108c0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8010896:	480b      	ldr	r0, [pc, #44]	; (80108c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8010898:	f00b fd50 	bl	801c33c <__assert_func>
 801089c:	3b01      	subs	r3, #1
 801089e:	b29b      	uxth	r3, r3
 80108a0:	428b      	cmp	r3, r1
 80108a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80108a6:	d908      	bls.n	80108ba <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 80108a8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80108ac:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80108b6:	685a      	ldr	r2, [r3, #4]
 80108b8:	6062      	str	r2, [r4, #4]
 80108ba:	bd10      	pop	{r4, pc}
 80108bc:	0801f79a 	.word	0x0801f79a
 80108c0:	0801f888 	.word	0x0801f888
 80108c4:	0801f7a8 	.word	0x0801f7a8

080108c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80108c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108ca:	466b      	mov	r3, sp
 80108cc:	4604      	mov	r4, r0
 80108ce:	e883 0006 	stmia.w	r3, {r1, r2}
 80108d2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80108d6:	2a07      	cmp	r2, #7
 80108d8:	d906      	bls.n	80108e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80108da:	4b09      	ldr	r3, [pc, #36]	; (8010900 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80108dc:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80108e0:	4a08      	ldr	r2, [pc, #32]	; (8010904 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80108e2:	4809      	ldr	r0, [pc, #36]	; (8010908 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80108e4:	f00b fd2a 	bl	801c33c <__assert_func>
 80108e8:	1c51      	adds	r1, r2, #1
 80108ea:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80108ee:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80108f2:	cb03      	ldmia	r3!, {r0, r1}
 80108f4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80108f8:	6069      	str	r1, [r5, #4]
 80108fa:	b003      	add	sp, #12
 80108fc:	bd30      	pop	{r4, r5, pc}
 80108fe:	bf00      	nop
 8010900:	0801f7d1 	.word	0x0801f7d1
 8010904:	0801f91e 	.word	0x0801f91e
 8010908:	0801f7a8 	.word	0x0801f7a8

0801090c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801090c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010910:	b08d      	sub	sp, #52	; 0x34
 8010912:	4683      	mov	fp, r0
 8010914:	ac08      	add	r4, sp, #32
 8010916:	4620      	mov	r0, r4
 8010918:	e884 0006 	stmia.w	r4, {r1, r2}
 801091c:	f7fc f87f 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010920:	2800      	cmp	r0, #0
 8010922:	d16a      	bne.n	80109fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010924:	9402      	str	r4, [sp, #8]
 8010926:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801092a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801092e:	2400      	movs	r4, #0
 8010930:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	36a0      	adds	r6, #160	; 0xa0
 8010938:	42a5      	cmp	r5, r4
 801093a:	d00d      	beq.n	8010958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801093c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8010940:	9802      	ldr	r0, [sp, #8]
 8010942:	f7ff fed1 	bl	80106e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010946:	b128      	cbz	r0, 8010954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8010948:	1e69      	subs	r1, r5, #1
 801094a:	9801      	ldr	r0, [sp, #4]
 801094c:	1b09      	subs	r1, r1, r4
 801094e:	b289      	uxth	r1, r1
 8010950:	f7ff ff98 	bl	8010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010954:	3401      	adds	r4, #1
 8010956:	e7ef      	b.n	8010938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010958:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801095c:	1e7b      	subs	r3, r7, #1
 801095e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8010962:	9703      	str	r7, [sp, #12]
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	2400      	movs	r4, #0
 8010968:	4655      	mov	r5, sl
 801096a:	9704      	str	r7, [sp, #16]
 801096c:	4626      	mov	r6, r4
 801096e:	9b04      	ldr	r3, [sp, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d078      	beq.n	8010a66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8010974:	9902      	ldr	r1, [sp, #8]
 8010976:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801097a:	f7ff fe93 	bl	80106a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801097e:	b360      	cbz	r0, 80109da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010980:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8010984:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8010988:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801098c:	45e6      	cmp	lr, ip
 801098e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010992:	db35      	blt.n	8010a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010994:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010998:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801099c:	4472      	add	r2, lr
 801099e:	4463      	add	r3, ip
 80109a0:	b212      	sxth	r2, r2
 80109a2:	b21b      	sxth	r3, r3
 80109a4:	429a      	cmp	r2, r3
 80109a6:	dc2b      	bgt.n	8010a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80109a8:	fa1f f288 	uxth.w	r2, r8
 80109ac:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80109b0:	45c1      	cmp	r9, r8
 80109b2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80109b6:	4413      	add	r3, r2
 80109b8:	fa1f fc89 	uxth.w	ip, r9
 80109bc:	b29b      	uxth	r3, r3
 80109be:	fa0f fe83 	sxth.w	lr, r3
 80109c2:	db0f      	blt.n	80109e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80109c4:	eba3 030c 	sub.w	r3, r3, ip
 80109c8:	1ac9      	subs	r1, r1, r3
 80109ca:	b209      	sxth	r1, r1
 80109cc:	2900      	cmp	r1, #0
 80109ce:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80109d2:	dd12      	ble.n	80109fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80109d4:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80109d8:	4604      	mov	r4, r0
 80109da:	9b04      	ldr	r3, [sp, #16]
 80109dc:	3d08      	subs	r5, #8
 80109de:	3b01      	subs	r3, #1
 80109e0:	9304      	str	r3, [sp, #16]
 80109e2:	e7c4      	b.n	801096e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80109e4:	4461      	add	r1, ip
 80109e6:	b209      	sxth	r1, r1
 80109e8:	4571      	cmp	r1, lr
 80109ea:	dc3a      	bgt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80109ec:	eba2 020c 	sub.w	r2, r2, ip
 80109f0:	b212      	sxth	r2, r2
 80109f2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80109f6:	2a00      	cmp	r2, #0
 80109f8:	dcee      	bgt.n	80109d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80109fa:	b00d      	add	sp, #52	; 0x34
 80109fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a00:	45c1      	cmp	r9, r8
 8010a02:	db2e      	blt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010a04:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010a08:	4499      	add	r9, r3
 8010a0a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010a0e:	4498      	add	r8, r3
 8010a10:	fa0f f989 	sxth.w	r9, r9
 8010a14:	fa0f f888 	sxth.w	r8, r8
 8010a18:	45c1      	cmp	r9, r8
 8010a1a:	dc22      	bgt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010a1c:	fa1f f28c 	uxth.w	r2, ip
 8010a20:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010a24:	45e6      	cmp	lr, ip
 8010a26:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8010a2a:	4413      	add	r3, r2
 8010a2c:	fa1f f88e 	uxth.w	r8, lr
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	fa0f f983 	sxth.w	r9, r3
 8010a36:	db0a      	blt.n	8010a4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8010a38:	eba3 0308 	sub.w	r3, r3, r8
 8010a3c:	1ac9      	subs	r1, r1, r3
 8010a3e:	b209      	sxth	r1, r1
 8010a40:	2900      	cmp	r1, #0
 8010a42:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8010a46:	ddd8      	ble.n	80109fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010a48:	f8ad 9020 	strh.w	r9, [sp, #32]
 8010a4c:	e7c4      	b.n	80109d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8010a4e:	4441      	add	r1, r8
 8010a50:	b209      	sxth	r1, r1
 8010a52:	4549      	cmp	r1, r9
 8010a54:	dc05      	bgt.n	8010a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010a56:	eba2 0208 	sub.w	r2, r2, r8
 8010a5a:	b212      	sxth	r2, r2
 8010a5c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010a60:	e7c9      	b.n	80109f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010a62:	4606      	mov	r6, r0
 8010a64:	e7b9      	b.n	80109da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010a66:	2c00      	cmp	r4, #0
 8010a68:	f47f af7d 	bne.w	8010966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8010a6c:	2e00      	cmp	r6, #0
 8010a6e:	f000 81dc 	beq.w	8010e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010a72:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8010a76:	4655      	mov	r5, sl
 8010a78:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8010a7c:	b2b9      	uxth	r1, r7
 8010a7e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010a82:	b2b3      	uxth	r3, r6
 8010a84:	9104      	str	r1, [sp, #16]
 8010a86:	9804      	ldr	r0, [sp, #16]
 8010a88:	441a      	add	r2, r3
 8010a8a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010a8e:	b292      	uxth	r2, r2
 8010a90:	4401      	add	r1, r0
 8010a92:	fa0f f882 	sxth.w	r8, r2
 8010a96:	b289      	uxth	r1, r1
 8010a98:	9105      	str	r1, [sp, #20]
 8010a9a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010a9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010aa2:	9b03      	ldr	r3, [sp, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d054      	beq.n	8010b52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8010aa8:	9902      	ldr	r1, [sp, #8]
 8010aaa:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010aae:	f7ff fdf9 	bl	80106a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ab6:	b1d8      	cbz	r0, 8010af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ab8:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010abc:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010ac0:	4576      	cmp	r6, lr
 8010ac2:	dc26      	bgt.n	8010b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010ac4:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8010ac8:	44f4      	add	ip, lr
 8010aca:	fa0f fc8c 	sxth.w	ip, ip
 8010ace:	45e0      	cmp	r8, ip
 8010ad0:	db1f      	blt.n	8010b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010ad2:	428f      	cmp	r7, r1
 8010ad4:	fa1f fc81 	uxth.w	ip, r1
 8010ad8:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010adc:	dc0f      	bgt.n	8010afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010ade:	9805      	ldr	r0, [sp, #20]
 8010ae0:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010ae4:	eba0 0c0c 	sub.w	ip, r0, ip
 8010ae8:	eba1 010c 	sub.w	r1, r1, ip
 8010aec:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010af0:	4620      	mov	r0, r4
 8010af2:	9903      	ldr	r1, [sp, #12]
 8010af4:	3d08      	subs	r5, #8
 8010af6:	4604      	mov	r4, r0
 8010af8:	3901      	subs	r1, #1
 8010afa:	9103      	str	r1, [sp, #12]
 8010afc:	e7cf      	b.n	8010a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8010afe:	4461      	add	r1, ip
 8010b00:	b209      	sxth	r1, r1
 8010b02:	4549      	cmp	r1, r9
 8010b04:	dcf5      	bgt.n	8010af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010b06:	9904      	ldr	r1, [sp, #16]
 8010b08:	eba1 0c0c 	sub.w	ip, r1, ip
 8010b0c:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010b10:	e7ee      	b.n	8010af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010b12:	428f      	cmp	r7, r1
 8010b14:	dced      	bgt.n	8010af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010b16:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8010b1a:	4461      	add	r1, ip
 8010b1c:	b209      	sxth	r1, r1
 8010b1e:	4589      	cmp	r9, r1
 8010b20:	dbe7      	blt.n	8010af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010b22:	4576      	cmp	r6, lr
 8010b24:	fa1f fc8e 	uxth.w	ip, lr
 8010b28:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010b2c:	dc08      	bgt.n	8010b40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8010b2e:	eba2 0c0c 	sub.w	ip, r2, ip
 8010b32:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8010b36:	eba1 010c 	sub.w	r1, r1, ip
 8010b3a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8010b3e:	e7d7      	b.n	8010af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010b40:	4461      	add	r1, ip
 8010b42:	b209      	sxth	r1, r1
 8010b44:	4588      	cmp	r8, r1
 8010b46:	dbd4      	blt.n	8010af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010b48:	eba3 0c0c 	sub.w	ip, r3, ip
 8010b4c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010b50:	e7ce      	b.n	8010af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010b52:	2c00      	cmp	r4, #0
 8010b54:	f000 8169 	beq.w	8010e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010b58:	9b00      	ldr	r3, [sp, #0]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	f000 8165 	beq.w	8010e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010b60:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010b64:	9802      	ldr	r0, [sp, #8]
 8010b66:	4621      	mov	r1, r4
 8010b68:	f7ff fdbe 	bl	80106e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010b6c:	b120      	cbz	r0, 8010b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8010b6e:	f8bd 1000 	ldrh.w	r1, [sp]
 8010b72:	9801      	ldr	r0, [sp, #4]
 8010b74:	f7ff fe86 	bl	8010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010b78:	9902      	ldr	r1, [sp, #8]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f7ff fd92 	bl	80106a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	f000 809b 	beq.w	8010cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8010b86:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8010b8a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8010b8e:	fa1f f288 	uxth.w	r2, r8
 8010b92:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8010b96:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8010b9a:	19d5      	adds	r5, r2, r7
 8010b9c:	b2a1      	uxth	r1, r4
 8010b9e:	45a0      	cmp	r8, r4
 8010ba0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010ba4:	fa1f f985 	uxth.w	r9, r5
 8010ba8:	440b      	add	r3, r1
 8010baa:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8010bae:	fa0f f589 	sxth.w	r5, r9
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	9503      	str	r5, [sp, #12]
 8010bb6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010bba:	9507      	str	r5, [sp, #28]
 8010bbc:	f340 809d 	ble.w	8010cfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8010bc0:	1a52      	subs	r2, r2, r1
 8010bc2:	4584      	cmp	ip, r0
 8010bc4:	fa0f fe83 	sxth.w	lr, r3
 8010bc8:	b292      	uxth	r2, r2
 8010bca:	b215      	sxth	r5, r2
 8010bcc:	dd2f      	ble.n	8010c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8010bce:	9e00      	ldr	r6, [sp, #0]
 8010bd0:	fa1f fc8c 	uxth.w	ip, ip
 8010bd4:	b280      	uxth	r0, r0
 8010bd6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010bda:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8010bde:	9e03      	ldr	r6, [sp, #12]
 8010be0:	ebac 0300 	sub.w	r3, ip, r0
 8010be4:	448c      	add	ip, r1
 8010be6:	eba6 060e 	sub.w	r6, r6, lr
 8010bea:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	4470      	add	r0, lr
 8010bf2:	fa0f fc8c 	sxth.w	ip, ip
 8010bf6:	b21c      	sxth	r4, r3
 8010bf8:	b200      	sxth	r0, r0
 8010bfa:	4366      	muls	r6, r4
 8010bfc:	ebac 0000 	sub.w	r0, ip, r0
 8010c00:	4368      	muls	r0, r5
 8010c02:	4286      	cmp	r6, r0
 8010c04:	db09      	blt.n	8010c1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8010c06:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8010c0a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010c0e:	4417      	add	r7, r2
 8010c10:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010c14:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010c18:	e685      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c1a:	440b      	add	r3, r1
 8010c1c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8010c20:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010c24:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8010c28:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010c2c:	e67b      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c2e:	9e03      	ldr	r6, [sp, #12]
 8010c30:	45b6      	cmp	lr, r6
 8010c32:	da28      	bge.n	8010c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8010c34:	9b00      	ldr	r3, [sp, #0]
 8010c36:	eba6 060e 	sub.w	r6, r6, lr
 8010c3a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8010c3e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8010c42:	eb04 030c 	add.w	r3, r4, ip
 8010c46:	fa1f f883 	uxth.w	r8, r3
 8010c4a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8010c4e:	4403      	add	r3, r0
 8010c50:	fa0f f988 	sxth.w	r9, r8
 8010c54:	eba0 000c 	sub.w	r0, r0, ip
 8010c58:	eba3 0308 	sub.w	r3, r3, r8
 8010c5c:	4368      	muls	r0, r5
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	fa0f f883 	sxth.w	r8, r3
 8010c64:	fb08 f606 	mul.w	r6, r8, r6
 8010c68:	42b0      	cmp	r0, r6
 8010c6a:	dc06      	bgt.n	8010c7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8010c6c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8010c70:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8010c74:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8010c78:	e7c9      	b.n	8010c0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8010c7a:	4423      	add	r3, r4
 8010c7c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8010c80:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010c84:	e64f      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c86:	eba3 0309 	sub.w	r3, r3, r9
 8010c8a:	9807      	ldr	r0, [sp, #28]
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	2806      	cmp	r0, #6
 8010c90:	fa0f fc83 	sxth.w	ip, r3
 8010c94:	d818      	bhi.n	8010cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8010c96:	4652      	mov	r2, sl
 8010c98:	ab0a      	add	r3, sp, #40	; 0x28
 8010c9a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8010c9e:	6851      	ldr	r1, [r2, #4]
 8010ca0:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010ca4:	c303      	stmia	r3!, {r0, r1}
 8010ca6:	9b03      	ldr	r3, [sp, #12]
 8010ca8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8010cac:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010cb0:	ab0a      	add	r3, sp, #40	; 0x28
 8010cb2:	9801      	ldr	r0, [sp, #4]
 8010cb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010cb8:	f7ff fe06 	bl	80108c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010cbc:	9b00      	ldr	r3, [sp, #0]
 8010cbe:	f1aa 0a08 	sub.w	sl, sl, #8
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	e747      	b.n	8010b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8010cc8:	9800      	ldr	r0, [sp, #0]
 8010cca:	45ac      	cmp	ip, r5
 8010ccc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010cd0:	db0c      	blt.n	8010cec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8010cd2:	4417      	add	r7, r2
 8010cd4:	4458      	add	r0, fp
 8010cd6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010cda:	b2bf      	uxth	r7, r7
 8010cdc:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8010ce0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010ce4:	440f      	add	r7, r1
 8010ce6:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8010cea:	e61c      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010cec:	4458      	add	r0, fp
 8010cee:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8010cf2:	443b      	add	r3, r7
 8010cf4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010cf8:	e615      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010cfa:	fa1f f18c 	uxth.w	r1, ip
 8010cfe:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8010d02:	b282      	uxth	r2, r0
 8010d04:	4584      	cmp	ip, r0
 8010d06:	eb01 0e05 	add.w	lr, r1, r5
 8010d0a:	9204      	str	r2, [sp, #16]
 8010d0c:	fa1f fe8e 	uxth.w	lr, lr
 8010d10:	9e04      	ldr	r6, [sp, #16]
 8010d12:	fa0f f28e 	sxth.w	r2, lr
 8010d16:	9205      	str	r2, [sp, #20]
 8010d18:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8010d1c:	4432      	add	r2, r6
 8010d1e:	b292      	uxth	r2, r2
 8010d20:	9206      	str	r2, [sp, #24]
 8010d22:	da26      	bge.n	8010d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8010d24:	eba3 0309 	sub.w	r3, r3, r9
 8010d28:	eba2 020e 	sub.w	r2, r2, lr
 8010d2c:	eba0 000c 	sub.w	r0, r0, ip
 8010d30:	eba4 0408 	sub.w	r4, r4, r8
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	b292      	uxth	r2, r2
 8010d38:	fa0f fa83 	sxth.w	sl, r3
 8010d3c:	b211      	sxth	r1, r2
 8010d3e:	fb0a f000 	mul.w	r0, sl, r0
 8010d42:	434c      	muls	r4, r1
 8010d44:	42a0      	cmp	r0, r4
 8010d46:	9800      	ldr	r0, [sp, #0]
 8010d48:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010d4c:	dc06      	bgt.n	8010d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8010d4e:	4458      	add	r0, fp
 8010d50:	9a05      	ldr	r2, [sp, #20]
 8010d52:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8010d56:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8010d5a:	e7ca      	b.n	8010cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010d5c:	eb0b 0300 	add.w	r3, fp, r0
 8010d60:	9903      	ldr	r1, [sp, #12]
 8010d62:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8010d66:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8010d6a:	442a      	add	r2, r5
 8010d6c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010d70:	e5d9      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010d72:	9e04      	ldr	r6, [sp, #16]
 8010d74:	9a03      	ldr	r2, [sp, #12]
 8010d76:	1b89      	subs	r1, r1, r6
 8010d78:	b21e      	sxth	r6, r3
 8010d7a:	b289      	uxth	r1, r1
 8010d7c:	4296      	cmp	r6, r2
 8010d7e:	fa0f fc81 	sxth.w	ip, r1
 8010d82:	dd25      	ble.n	8010dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8010d84:	eba3 0309 	sub.w	r3, r3, r9
 8010d88:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010d8c:	9e05      	ldr	r6, [sp, #20]
 8010d8e:	eba4 0408 	sub.w	r4, r4, r8
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	eba6 0902 	sub.w	r9, r6, r2
 8010d98:	fb0c f404 	mul.w	r4, ip, r4
 8010d9c:	b218      	sxth	r0, r3
 8010d9e:	9a00      	ldr	r2, [sp, #0]
 8010da0:	fb00 f909 	mul.w	r9, r0, r9
 8010da4:	00d2      	lsls	r2, r2, #3
 8010da6:	454c      	cmp	r4, r9
 8010da8:	db03      	blt.n	8010db2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8010daa:	445a      	add	r2, fp
 8010dac:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010db0:	e79f      	b.n	8010cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010db2:	eb0b 0302 	add.w	r3, fp, r2
 8010db6:	9a03      	ldr	r2, [sp, #12]
 8010db8:	4429      	add	r1, r5
 8010dba:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010dbe:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010dc2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010dc6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010dca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010dce:	e5aa      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010dd0:	9b06      	ldr	r3, [sp, #24]
 8010dd2:	9c07      	ldr	r4, [sp, #28]
 8010dd4:	eba3 020e 	sub.w	r2, r3, lr
 8010dd8:	2c06      	cmp	r4, #6
 8010dda:	b292      	uxth	r2, r2
 8010ddc:	b213      	sxth	r3, r2
 8010dde:	d80d      	bhi.n	8010dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8010de0:	4651      	mov	r1, sl
 8010de2:	aa0a      	add	r2, sp, #40	; 0x28
 8010de4:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8010de8:	6849      	ldr	r1, [r1, #4]
 8010dea:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010dee:	9b05      	ldr	r3, [sp, #20]
 8010df0:	c203      	stmia	r2!, {r0, r1}
 8010df2:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010df6:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8010dfa:	e759      	b.n	8010cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8010dfc:	9c00      	ldr	r4, [sp, #0]
 8010dfe:	4563      	cmp	r3, ip
 8010e00:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010e04:	db0d      	blt.n	8010e22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8010e06:	4429      	add	r1, r5
 8010e08:	9a04      	ldr	r2, [sp, #16]
 8010e0a:	445c      	add	r4, fp
 8010e0c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010e10:	b289      	uxth	r1, r1
 8010e12:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8010e16:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010e1a:	4411      	add	r1, r2
 8010e1c:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010e20:	e581      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010e22:	445c      	add	r4, fp
 8010e24:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8010e28:	e79f      	b.n	8010d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8010e2a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010e2e:	2f07      	cmp	r7, #7
 8010e30:	d806      	bhi.n	8010e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8010e32:	ab08      	add	r3, sp, #32
 8010e34:	9801      	ldr	r0, [sp, #4]
 8010e36:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010e3a:	f7ff fd45 	bl	80108c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010e3e:	e5dc      	b.n	80109fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010e40:	f107 39ff 	add.w	r9, r7, #4294967295
 8010e44:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010e48:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8010e4c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010e50:	f04f 35ff 	mov.w	r5, #4294967295
 8010e54:	2400      	movs	r4, #0
 8010e56:	9304      	str	r3, [sp, #16]
 8010e58:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8010e5c:	f109 32ff 	add.w	r2, r9, #4294967295
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	4690      	mov	r8, r2
 8010e64:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8010e68:	9303      	str	r3, [sp, #12]
 8010e6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e6e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010e72:	6818      	ldr	r0, [r3, #0]
 8010e74:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010e78:	9206      	str	r2, [sp, #24]
 8010e7a:	bf16      	itet	ne
 8010e7c:	9904      	ldrne	r1, [sp, #16]
 8010e7e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8010e82:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8010e86:	9305      	str	r3, [sp, #20]
 8010e88:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010e8c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8010e90:	fb16 f601 	smulbb	r6, r6, r1
 8010e94:	6859      	ldr	r1, [r3, #4]
 8010e96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010e9a:	4671      	mov	r1, lr
 8010e9c:	a80a      	add	r0, sp, #40	; 0x28
 8010e9e:	f7ff fc45 	bl	801072c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010ea2:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8010ea6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8010eaa:	9b03      	ldr	r3, [sp, #12]
 8010eac:	9a00      	ldr	r2, [sp, #0]
 8010eae:	fb11 f100 	smulbb	r1, r1, r0
 8010eb2:	2008      	movs	r0, #8
 8010eb4:	fb02 6603 	mla	r6, r2, r3, r6
 8010eb8:	1b8e      	subs	r6, r1, r6
 8010eba:	fb91 f1f0 	sdiv	r1, r1, r0
 8010ebe:	42b1      	cmp	r1, r6
 8010ec0:	dc21      	bgt.n	8010f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010ec2:	4556      	cmp	r6, sl
 8010ec4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8010ec8:	da03      	bge.n	8010ed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8010eca:	b1e6      	cbz	r6, 8010f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010ecc:	46b2      	mov	sl, r6
 8010ece:	4645      	mov	r5, r8
 8010ed0:	464c      	mov	r4, r9
 8010ed2:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ed6:	f118 0f02 	cmn.w	r8, #2
 8010eda:	d1c8      	bne.n	8010e6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8010edc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ee0:	f1a7 0708 	sub.w	r7, r7, #8
 8010ee4:	4691      	mov	r9, r2
 8010ee6:	d1b7      	bne.n	8010e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8010ee8:	9b01      	ldr	r3, [sp, #4]
 8010eea:	b2a6      	uxth	r6, r4
 8010eec:	00e4      	lsls	r4, r4, #3
 8010eee:	1918      	adds	r0, r3, r4
 8010ef0:	1c6b      	adds	r3, r5, #1
 8010ef2:	d10b      	bne.n	8010f0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8010ef4:	4601      	mov	r1, r0
 8010ef6:	9802      	ldr	r0, [sp, #8]
 8010ef8:	f7ff fc18 	bl	801072c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010efc:	4631      	mov	r1, r6
 8010efe:	9801      	ldr	r0, [sp, #4]
 8010f00:	f7ff fcc0 	bl	8010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010f04:	e50f      	b.n	8010926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010f06:	4645      	mov	r5, r8
 8010f08:	464c      	mov	r4, r9
 8010f0a:	e7ed      	b.n	8010ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	00ed      	lsls	r5, r5, #3
 8010f10:	445c      	add	r4, fp
 8010f12:	1959      	adds	r1, r3, r5
 8010f14:	445d      	add	r5, fp
 8010f16:	f7ff fc09 	bl	801072c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010f1a:	9b02      	ldr	r3, [sp, #8]
 8010f1c:	cb03      	ldmia	r3!, {r0, r1}
 8010f1e:	9b02      	ldr	r3, [sp, #8]
 8010f20:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8010f24:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8010f28:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8010f2c:	6861      	ldr	r1, [r4, #4]
 8010f2e:	c303      	stmia	r3!, {r0, r1}
 8010f30:	e7e4      	b.n	8010efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08010f34 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8010f34:	4b1d      	ldr	r3, [pc, #116]	; (8010fac <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8010f36:	b530      	push	{r4, r5, lr}
 8010f38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f3c:	b085      	sub	sp, #20
 8010f3e:	4b1c      	ldr	r3, [pc, #112]	; (8010fb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8010f40:	460c      	mov	r4, r1
 8010f42:	2100      	movs	r1, #0
 8010f44:	4605      	mov	r5, r0
 8010f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f4a:	6820      	ldr	r0, [r4, #0]
 8010f4c:	9100      	str	r1, [sp, #0]
 8010f4e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010f52:	ab02      	add	r3, sp, #8
 8010f54:	6861      	ldr	r1, [r4, #4]
 8010f56:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010f5a:	c303      	stmia	r3!, {r0, r1}
 8010f5c:	4669      	mov	r1, sp
 8010f5e:	a802      	add	r0, sp, #8
 8010f60:	f7fb fd1a 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 8010f64:	ab02      	add	r3, sp, #8
 8010f66:	cb03      	ldmia	r3!, {r0, r1}
 8010f68:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8010f6a:	6020      	str	r0, [r4, #0]
 8010f6c:	6818      	ldr	r0, [r3, #0]
 8010f6e:	6061      	str	r1, [r4, #4]
 8010f70:	b138      	cbz	r0, 8010f82 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010f72:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8010f76:	b133      	cbz	r3, 8010f86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8010f78:	6821      	ldr	r1, [r4, #0]
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	6862      	ldr	r2, [r4, #4]
 8010f7e:	f7ff fcc5 	bl	801090c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010f82:	b005      	add	sp, #20
 8010f84:	bd30      	pop	{r4, r5, pc}
 8010f86:	6803      	ldr	r3, [r0, #0]
 8010f88:	4621      	mov	r1, r4
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	4798      	blx	r3
 8010f8e:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8010f90:	6818      	ldr	r0, [r3, #0]
 8010f92:	b118      	cbz	r0, 8010f9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	4621      	mov	r1, r4
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	4798      	blx	r3
 8010f9c:	4b07      	ldr	r3, [pc, #28]	; (8010fbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	6818      	ldr	r0, [r3, #0]
 8010fa2:	6803      	ldr	r3, [r0, #0]
 8010fa4:	69db      	ldr	r3, [r3, #28]
 8010fa6:	4798      	blx	r3
 8010fa8:	e7eb      	b.n	8010f82 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010faa:	bf00      	nop
 8010fac:	24006c5c 	.word	0x24006c5c
 8010fb0:	24006c5e 	.word	0x24006c5e
 8010fb4:	24006ca4 	.word	0x24006ca4
 8010fb8:	24006ca0 	.word	0x24006ca0
 8010fbc:	24006c68 	.word	0x24006c68

08010fc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8010fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	b09b      	sub	sp, #108	; 0x6c
 8010fc8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8010fcc:	b129      	cbz	r1, 8010fda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010fd4:	b01b      	add	sp, #108	; 0x6c
 8010fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fda:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f7fb fd1d 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	b940      	cbnz	r0, 8010ffa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8010fe8:	4620      	mov	r0, r4
 8010fea:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010fee:	f7ff fc8d 	bl	801090c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010ff2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8010ff6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8010ffa:	4ba6      	ldr	r3, [pc, #664]	; (8011294 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	b33b      	cbz	r3, 8011050 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8011000:	4da5      	ldr	r5, [pc, #660]	; (8011298 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8011002:	4628      	mov	r0, r5
 8011004:	f7fb fd0b 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011008:	4606      	mov	r6, r0
 801100a:	bb08      	cbnz	r0, 8011050 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801100c:	4628      	mov	r0, r5
 801100e:	f7ff f9d3 	bl	80103b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8011012:	6829      	ldr	r1, [r5, #0]
 8011014:	686a      	ldr	r2, [r5, #4]
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff fc78 	bl	801090c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801101c:	802e      	strh	r6, [r5, #0]
 801101e:	806e      	strh	r6, [r5, #2]
 8011020:	80ae      	strh	r6, [r5, #4]
 8011022:	80ee      	strh	r6, [r5, #6]
 8011024:	4f9d      	ldr	r7, [pc, #628]	; (801129c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8011026:	a809      	add	r0, sp, #36	; 0x24
 8011028:	f7ff fbd7 	bl	80107da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801102c:	883d      	ldrh	r5, [r7, #0]
 801102e:	462e      	mov	r6, r5
 8011030:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011034:	42b3      	cmp	r3, r6
 8011036:	d910      	bls.n	801105a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8011038:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801103c:	3601      	adds	r6, #1
 801103e:	a809      	add	r0, sp, #36	; 0x24
 8011040:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8011044:	b2b6      	uxth	r6, r6
 8011046:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801104a:	f7ff fc3d 	bl	80108c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801104e:	e7ef      	b.n	8011030 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8011050:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e5      	bne.n	8011024 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8011058:	e7bc      	b.n	8010fd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801105a:	462e      	mov	r6, r5
 801105c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8011060:	42b3      	cmp	r3, r6
 8011062:	d90b      	bls.n	801107c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8011064:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011068:	3601      	adds	r6, #1
 801106a:	4620      	mov	r0, r4
 801106c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8011070:	b2b6      	uxth	r6, r6
 8011072:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8011076:	f7ff fc49 	bl	801090c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801107a:	e7ef      	b.n	801105c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801107c:	4a88      	ldr	r2, [pc, #544]	; (80112a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801107e:	6813      	ldr	r3, [r2, #0]
 8011080:	4690      	mov	r8, r2
 8011082:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011086:	2b01      	cmp	r3, #1
 8011088:	f040 8094 	bne.w	80111b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801108c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8011090:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011094:	f04f 0900 	mov.w	r9, #0
 8011098:	33aa      	adds	r3, #170	; 0xaa
 801109a:	42a8      	cmp	r0, r5
 801109c:	f103 0308 	add.w	r3, r3, #8
 80110a0:	dd0a      	ble.n	80110b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80110a2:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80110a6:	3501      	adds	r5, #1
 80110a8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80110ac:	440a      	add	r2, r1
 80110ae:	b212      	sxth	r2, r2
 80110b0:	4591      	cmp	r9, r2
 80110b2:	bfb8      	it	lt
 80110b4:	4691      	movlt	r9, r2
 80110b6:	e7f0      	b.n	801109a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80110b8:	4b7a      	ldr	r3, [pc, #488]	; (80112a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80110ba:	4e7b      	ldr	r6, [pc, #492]	; (80112a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80110bc:	881d      	ldrh	r5, [r3, #0]
 80110be:	2300      	movs	r3, #0
 80110c0:	2d0f      	cmp	r5, #15
 80110c2:	bf8c      	ite	hi
 80110c4:	08ed      	lsrhi	r5, r5, #3
 80110c6:	2501      	movls	r5, #1
 80110c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80110cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80110d0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80110d4:	f8d8 0000 	ldr.w	r0, [r8]
 80110d8:	440b      	add	r3, r1
 80110da:	6802      	ldr	r2, [r0, #0]
 80110dc:	b21b      	sxth	r3, r3
 80110de:	4599      	cmp	r9, r3
 80110e0:	dd4b      	ble.n	801117a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 80110e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80110e6:	4798      	blx	r3
 80110e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80110ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80110f0:	4413      	add	r3, r2
 80110f2:	b21b      	sxth	r3, r3
 80110f4:	195a      	adds	r2, r3, r5
 80110f6:	4290      	cmp	r0, r2
 80110f8:	da07      	bge.n	801110a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80110fa:	4581      	cmp	r9, r0
 80110fc:	dd05      	ble.n	801110a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80110fe:	4298      	cmp	r0, r3
 8011100:	da33      	bge.n	801116a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8011102:	2b00      	cmp	r3, #0
 8011104:	dd31      	ble.n	801116a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8011106:	4648      	mov	r0, r9
 8011108:	e004      	b.n	8011114 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801110a:	4298      	cmp	r0, r3
 801110c:	dbfb      	blt.n	8011106 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801110e:	4548      	cmp	r0, r9
 8011110:	bfa8      	it	ge
 8011112:	4648      	movge	r0, r9
 8011114:	f9b6 2000 	ldrsh.w	r2, [r6]
 8011118:	2100      	movs	r1, #0
 801111a:	1ac0      	subs	r0, r0, r3
 801111c:	f8b7 a000 	ldrh.w	sl, [r7]
 8011120:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011124:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011128:	f8ad 2018 	strh.w	r2, [sp, #24]
 801112c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011130:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011134:	4553      	cmp	r3, sl
 8011136:	d9c9      	bls.n	80110cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8011138:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801113c:	ab07      	add	r3, sp, #28
 801113e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011142:	6851      	ldr	r1, [r2, #4]
 8011144:	c303      	stmia	r3!, {r0, r1}
 8011146:	a807      	add	r0, sp, #28
 8011148:	a905      	add	r1, sp, #20
 801114a:	f7fb fc25 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 801114e:	a807      	add	r0, sp, #28
 8011150:	f7fb fc65 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011154:	b920      	cbnz	r0, 8011160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	a907      	add	r1, sp, #28
 801115a:	4620      	mov	r0, r4
 801115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801115e:	4798      	blx	r3
 8011160:	f10a 0a01 	add.w	sl, sl, #1
 8011164:	fa1f fa8a 	uxth.w	sl, sl
 8011168:	e7e2      	b.n	8011130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801116a:	f8d8 0000 	ldr.w	r0, [r8]
 801116e:	2101      	movs	r1, #1
 8011170:	6803      	ldr	r3, [r0, #0]
 8011172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011176:	4798      	blx	r3
 8011178:	e7a8      	b.n	80110cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801117a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801117c:	4798      	blx	r3
 801117e:	4b4b      	ldr	r3, [pc, #300]	; (80112ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	f43f af26 	beq.w	8010fd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011188:	2300      	movs	r3, #0
 801118a:	883d      	ldrh	r5, [r7, #0]
 801118c:	34ea      	adds	r4, #234	; 0xea
 801118e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8011192:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8011196:	42ab      	cmp	r3, r5
 8011198:	f67f af1c 	bls.w	8010fd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801119c:	ab1a      	add	r3, sp, #104	; 0x68
 801119e:	4620      	mov	r0, r4
 80111a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80111a4:	3501      	adds	r5, #1
 80111a6:	3b44      	subs	r3, #68	; 0x44
 80111a8:	b2ad      	uxth	r5, r5
 80111aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80111ae:	f7ff fb8b 	bl	80108c8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80111b2:	e7ee      	b.n	8011192 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	f040 813d 	bne.w	8011434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80111ba:	4b3d      	ldr	r3, [pc, #244]	; (80112b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d02c      	beq.n	801121c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80111c2:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80111c6:	883a      	ldrh	r2, [r7, #0]
 80111c8:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80111cc:	3201      	adds	r2, #1
 80111ce:	b292      	uxth	r2, r2
 80111d0:	2900      	cmp	r1, #0
 80111d2:	d0d4      	beq.n	801117e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80111d4:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80111d8:	4610      	mov	r0, r2
 80111da:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80111de:	f04f 0a00 	mov.w	sl, #0
 80111e2:	441d      	add	r5, r3
 80111e4:	b22d      	sxth	r5, r5
 80111e6:	b283      	uxth	r3, r0
 80111e8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 80111ec:	4299      	cmp	r1, r3
 80111ee:	f240 80c3 	bls.w	8011378 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 80111f2:	4426      	add	r6, r4
 80111f4:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 80111f8:	4684      	mov	ip, r0
 80111fa:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80111fe:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8011202:	4573      	cmp	r3, lr
 8011204:	f340 80a5 	ble.w	8011352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8011208:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801120c:	4475      	add	r5, lr
 801120e:	b22d      	sxth	r5, r5
 8011210:	429d      	cmp	r5, r3
 8011212:	bfa8      	it	ge
 8011214:	461d      	movge	r5, r3
 8011216:	3001      	adds	r0, #1
 8011218:	46e2      	mov	sl, ip
 801121a:	e7e4      	b.n	80111e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801121c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8011220:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8011224:	f1bb 0f00 	cmp.w	fp, #0
 8011228:	d0a9      	beq.n	801117e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801122a:	883b      	ldrh	r3, [r7, #0]
 801122c:	2600      	movs	r6, #0
 801122e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8011232:	3301      	adds	r3, #1
 8011234:	b29b      	uxth	r3, r3
 8011236:	b299      	uxth	r1, r3
 8011238:	00f5      	lsls	r5, r6, #3
 801123a:	458b      	cmp	fp, r1
 801123c:	d93a      	bls.n	80112b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801123e:	4425      	add	r5, r4
 8011240:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8011244:	469c      	mov	ip, r3
 8011246:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801124a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801124e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8011252:	4408      	add	r0, r1
 8011254:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8011258:	4471      	add	r1, lr
 801125a:	b200      	sxth	r0, r0
 801125c:	b209      	sxth	r1, r1
 801125e:	4288      	cmp	r0, r1
 8011260:	da06      	bge.n	8011270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8011262:	4586      	cmp	lr, r0
 8011264:	4672      	mov	r2, lr
 8011266:	bfb8      	it	lt
 8011268:	4602      	movlt	r2, r0
 801126a:	3301      	adds	r3, #1
 801126c:	4666      	mov	r6, ip
 801126e:	e7e2      	b.n	8011236 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8011270:	d10b      	bne.n	801128a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8011272:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8011276:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801127a:	458c      	cmp	ip, r1
 801127c:	bfb4      	ite	lt
 801127e:	469c      	movlt	ip, r3
 8011280:	46b4      	movge	ip, r6
 8011282:	4572      	cmp	r2, lr
 8011284:	bfb8      	it	lt
 8011286:	4672      	movlt	r2, lr
 8011288:	e7ef      	b.n	801126a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801128a:	428a      	cmp	r2, r1
 801128c:	46b4      	mov	ip, r6
 801128e:	bfb8      	it	lt
 8011290:	460a      	movlt	r2, r1
 8011292:	e7ea      	b.n	801126a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8011294:	24006ca0 	.word	0x24006ca0
 8011298:	24006cac 	.word	0x24006cac
 801129c:	24000080 	.word	0x24000080
 80112a0:	24006c68 	.word	0x24006c68
 80112a4:	24006c5e 	.word	0x24006c5e
 80112a8:	24006c5c 	.word	0x24006c5c
 80112ac:	24006c66 	.word	0x24006c66
 80112b0:	24006c60 	.word	0x24006c60
 80112b4:	1961      	adds	r1, r4, r5
 80112b6:	ab07      	add	r3, sp, #28
 80112b8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80112bc:	6849      	ldr	r1, [r1, #4]
 80112be:	c303      	stmia	r3!, {r0, r1}
 80112c0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80112c4:	a807      	add	r0, sp, #28
 80112c6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80112ca:	2b13      	cmp	r3, #19
 80112cc:	440b      	add	r3, r1
 80112ce:	bfd8      	it	le
 80112d0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80112da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80112de:	f7ff f885 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80112e2:	a807      	add	r0, sp, #28
 80112e4:	f7fb fb9b 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d199      	bne.n	8011220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80112ec:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80112f0:	4425      	add	r5, r4
 80112f2:	f8d8 0000 	ldr.w	r0, [r8]
 80112f6:	f1bc 0f14 	cmp.w	ip, #20
 80112fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80112fe:	f8d0 e000 	ldr.w	lr, [r0]
 8011302:	bfa8      	it	ge
 8011304:	f04f 0c14 	movge.w	ip, #20
 8011308:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801130c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011310:	fa1f fc8c 	uxth.w	ip, ip
 8011314:	f8cd c000 	str.w	ip, [sp]
 8011318:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801131c:	47d0      	blx	sl
 801131e:	4682      	mov	sl, r0
 8011320:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011324:	a807      	add	r0, sp, #28
 8011326:	f7ff f847 	bl	80103b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	4620      	mov	r0, r4
 801132e:	a907      	add	r1, sp, #28
 8011330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011332:	4798      	blx	r3
 8011334:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8011338:	eba0 000a 	sub.w	r0, r0, sl
 801133c:	b200      	sxth	r0, r0
 801133e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8011342:	2800      	cmp	r0, #0
 8011344:	f47f af6c 	bne.w	8011220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8011348:	b2b1      	uxth	r1, r6
 801134a:	4648      	mov	r0, r9
 801134c:	f7ff fa9a 	bl	8010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011350:	e766      	b.n	8011220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8011352:	d10c      	bne.n	801136e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8011354:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8011358:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801135c:	45b4      	cmp	ip, r6
 801135e:	bfb4      	ite	lt
 8011360:	4684      	movlt	ip, r0
 8011362:	46d4      	movge	ip, sl
 8011364:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8011368:	4433      	add	r3, r6
 801136a:	b21b      	sxth	r3, r3
 801136c:	e750      	b.n	8011210 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801136e:	4575      	cmp	r5, lr
 8011370:	46d4      	mov	ip, sl
 8011372:	bfa8      	it	ge
 8011374:	4675      	movge	r5, lr
 8011376:	e74e      	b.n	8011216 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8011378:	eb0b 0006 	add.w	r0, fp, r6
 801137c:	4426      	add	r6, r4
 801137e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8011382:	f1b9 0f13 	cmp.w	r9, #19
 8011386:	bfdc      	itt	le
 8011388:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801138c:	444d      	addle	r5, r9
 801138e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011392:	bfd8      	it	le
 8011394:	b22d      	sxthle	r5, r5
 8011396:	f7fb fb42 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 801139a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801139e:	2800      	cmp	r0, #0
 80113a0:	f47f af16 	bne.w	80111d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80113a4:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80113a8:	fa1f f989 	uxth.w	r9, r9
 80113ac:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80113b0:	eba5 050c 	sub.w	r5, r5, ip
 80113b4:	fa1f f28c 	uxth.w	r2, ip
 80113b8:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80113bc:	eb02 0009 	add.w	r0, r2, r9
 80113c0:	2d14      	cmp	r5, #20
 80113c2:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80113c6:	bfa8      	it	ge
 80113c8:	2514      	movge	r5, #20
 80113ca:	b200      	sxth	r0, r0
 80113cc:	f8ad 101c 	strh.w	r1, [sp, #28]
 80113d0:	b289      	uxth	r1, r1
 80113d2:	fa1f fe85 	uxth.w	lr, r5
 80113d6:	eba0 000c 	sub.w	r0, r0, ip
 80113da:	f8ad c01e 	strh.w	ip, [sp, #30]
 80113de:	4586      	cmp	lr, r0
 80113e0:	f8d8 0000 	ldr.w	r0, [r8]
 80113e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	bfb8      	it	lt
 80113ec:	46f1      	movlt	r9, lr
 80113ee:	6805      	ldr	r5, [r0, #0]
 80113f0:	f8cd 9000 	str.w	r9, [sp]
 80113f4:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 80113f8:	47a8      	blx	r5
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011400:	a907      	add	r1, sp, #28
 8011402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011404:	4620      	mov	r0, r4
 8011406:	4798      	blx	r3
 8011408:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801140c:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8011410:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8011414:	1a5b      	subs	r3, r3, r1
 8011416:	440a      	add	r2, r1
 8011418:	b21b      	sxth	r3, r3
 801141a:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801141e:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8011422:	2b00      	cmp	r3, #0
 8011424:	f47f aecf 	bne.w	80111c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8011428:	fa1f f18a 	uxth.w	r1, sl
 801142c:	4658      	mov	r0, fp
 801142e:	f7ff fa29 	bl	8010884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011432:	e6c8      	b.n	80111c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8011434:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011438:	42ab      	cmp	r3, r5
 801143a:	f67f aea0 	bls.w	801117e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801143e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8011442:	ab07      	add	r3, sp, #28
 8011444:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011448:	6851      	ldr	r1, [r2, #4]
 801144a:	c303      	stmia	r3!, {r0, r1}
 801144c:	a807      	add	r0, sp, #28
 801144e:	f7fb fae6 	bl	800ca1e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011452:	b920      	cbnz	r0, 801145e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	a907      	add	r1, sp, #28
 8011458:	4620      	mov	r0, r4
 801145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801145c:	4798      	blx	r3
 801145e:	3501      	adds	r5, #1
 8011460:	b2ad      	uxth	r5, r5
 8011462:	e7e7      	b.n	8011434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08011464 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011464:	4b03      	ldr	r3, [pc, #12]	; (8011474 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011466:	2200      	movs	r2, #0
 8011468:	801a      	strh	r2, [r3, #0]
 801146a:	805a      	strh	r2, [r3, #2]
 801146c:	809a      	strh	r2, [r3, #4]
 801146e:	80da      	strh	r2, [r3, #6]
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	24006cac 	.word	0x24006cac

08011478 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147c:	b09d      	sub	sp, #116	; 0x74
 801147e:	4606      	mov	r6, r0
 8011480:	4614      	mov	r4, r2
 8011482:	468a      	mov	sl, r1
 8011484:	a803      	add	r0, sp, #12
 8011486:	461d      	mov	r5, r3
 8011488:	f000 fd8a 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 801148c:	6833      	ldr	r3, [r6, #0]
 801148e:	4630      	mov	r0, r6
 8011490:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011496:	4798      	blx	r3
 8011498:	6833      	ldr	r3, [r6, #0]
 801149a:	4607      	mov	r7, r0
 801149c:	4630      	mov	r0, r6
 801149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114a0:	4798      	blx	r3
 80114a2:	462a      	mov	r2, r5
 80114a4:	2500      	movs	r5, #0
 80114a6:	4621      	mov	r1, r4
 80114a8:	9000      	str	r0, [sp, #0]
 80114aa:	463b      	mov	r3, r7
 80114ac:	462c      	mov	r4, r5
 80114ae:	46a9      	mov	r9, r5
 80114b0:	46a8      	mov	r8, r5
 80114b2:	a803      	add	r0, sp, #12
 80114b4:	f000 fdc7 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80114b8:	2300      	movs	r3, #0
 80114ba:	9302      	str	r3, [sp, #8]
 80114bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80114c0:	429c      	cmp	r4, r3
 80114c2:	d002      	beq.n	80114ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80114c4:	455c      	cmp	r4, fp
 80114c6:	bf18      	it	ne
 80114c8:	4625      	movne	r5, r4
 80114ca:	ab02      	add	r3, sp, #8
 80114cc:	4632      	mov	r2, r6
 80114ce:	4651      	mov	r1, sl
 80114d0:	a803      	add	r0, sp, #12
 80114d2:	f001 f8b9 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80114d6:	4604      	mov	r4, r0
 80114d8:	b108      	cbz	r0, 80114de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80114da:	280a      	cmp	r0, #10
 80114dc:	d10a      	bne.n	80114f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80114de:	45c1      	cmp	r9, r8
 80114e0:	bf38      	it	cc
 80114e2:	46c1      	movcc	r9, r8
 80114e4:	f04f 0800 	mov.w	r8, #0
 80114e8:	2c00      	cmp	r4, #0
 80114ea:	d1e5      	bne.n	80114b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80114ec:	4648      	mov	r0, r9
 80114ee:	b01d      	add	sp, #116	; 0x74
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	9a02      	ldr	r2, [sp, #8]
 80114f6:	2a00      	cmp	r2, #0
 80114f8:	d0de      	beq.n	80114b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80114fa:	7b57      	ldrb	r7, [r2, #13]
 80114fc:	4629      	mov	r1, r5
 80114fe:	6833      	ldr	r3, [r6, #0]
 8011500:	007f      	lsls	r7, r7, #1
 8011502:	8894      	ldrh	r4, [r2, #4]
 8011504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011506:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801150a:	7a97      	ldrb	r7, [r2, #10]
 801150c:	4307      	orrs	r7, r0
 801150e:	4630      	mov	r0, r6
 8011510:	4798      	blx	r3
 8011512:	4438      	add	r0, r7
 8011514:	4480      	add	r8, r0
 8011516:	fa1f f888 	uxth.w	r8, r8
 801151a:	e7e5      	b.n	80114e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801151c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801151c:	b508      	push	{r3, lr}
 801151e:	6803      	ldr	r3, [r0, #0]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	4798      	blx	r3
 8011524:	b128      	cbz	r0, 8011532 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8011526:	7b43      	ldrb	r3, [r0, #13]
 8011528:	7a80      	ldrb	r0, [r0, #10]
 801152a:	005b      	lsls	r3, r3, #1
 801152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011530:	4318      	orrs	r0, r3
 8011532:	bd08      	pop	{r3, pc}

08011534 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8011534:	b40e      	push	{r1, r2, r3}
 8011536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011538:	b09e      	sub	sp, #120	; 0x78
 801153a:	4605      	mov	r5, r0
 801153c:	ab23      	add	r3, sp, #140	; 0x8c
 801153e:	a805      	add	r0, sp, #20
 8011540:	f853 4b04 	ldr.w	r4, [r3], #4
 8011544:	9303      	str	r3, [sp, #12]
 8011546:	f000 fd2b 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 801154a:	682b      	ldr	r3, [r5, #0]
 801154c:	4628      	mov	r0, r5
 801154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011550:	4798      	blx	r3
 8011552:	682b      	ldr	r3, [r5, #0]
 8011554:	4606      	mov	r6, r0
 8011556:	4628      	mov	r0, r5
 8011558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801155a:	4798      	blx	r3
 801155c:	4633      	mov	r3, r6
 801155e:	4621      	mov	r1, r4
 8011560:	ae1e      	add	r6, sp, #120	; 0x78
 8011562:	2400      	movs	r4, #0
 8011564:	9000      	str	r0, [sp, #0]
 8011566:	9a03      	ldr	r2, [sp, #12]
 8011568:	a805      	add	r0, sp, #20
 801156a:	f000 fd6c 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801156e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8011572:	462a      	mov	r2, r5
 8011574:	4633      	mov	r3, r6
 8011576:	4621      	mov	r1, r4
 8011578:	a805      	add	r0, sp, #20
 801157a:	f001 f865 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801157e:	b300      	cbz	r0, 80115c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8011580:	280a      	cmp	r0, #10
 8011582:	d01a      	beq.n	80115ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011584:	9f04      	ldr	r7, [sp, #16]
 8011586:	b1c7      	cbz	r7, 80115ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011588:	7b78      	ldrb	r0, [r7, #13]
 801158a:	7a3b      	ldrb	r3, [r7, #8]
 801158c:	00c1      	lsls	r1, r0, #3
 801158e:	88aa      	ldrh	r2, [r5, #4]
 8011590:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011594:	4319      	orrs	r1, r3
 8011596:	0643      	lsls	r3, r0, #25
 8011598:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801159c:	bf48      	it	mi
 801159e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80115a2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80115a6:	bf48      	it	mi
 80115a8:	b219      	sxthmi	r1, r3
 80115aa:	79fb      	ldrb	r3, [r7, #7]
 80115ac:	4303      	orrs	r3, r0
 80115ae:	4413      	add	r3, r2
 80115b0:	1a5b      	subs	r3, r3, r1
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	42a3      	cmp	r3, r4
 80115b6:	bfc8      	it	gt
 80115b8:	b21c      	sxthgt	r4, r3
 80115ba:	4633      	mov	r3, r6
 80115bc:	462a      	mov	r2, r5
 80115be:	2100      	movs	r1, #0
 80115c0:	e7da      	b.n	8011578 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80115c2:	b2a0      	uxth	r0, r4
 80115c4:	b01e      	add	sp, #120	; 0x78
 80115c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80115ca:	b003      	add	sp, #12
 80115cc:	4770      	bx	lr

080115ce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80115ce:	b40e      	push	{r1, r2, r3}
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	b09d      	sub	sp, #116	; 0x74
 80115d4:	4604      	mov	r4, r0
 80115d6:	ab21      	add	r3, sp, #132	; 0x84
 80115d8:	a803      	add	r0, sp, #12
 80115da:	f853 5b04 	ldr.w	r5, [r3], #4
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	f000 fcde 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	4620      	mov	r0, r4
 80115e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ea:	4798      	blx	r3
 80115ec:	6823      	ldr	r3, [r4, #0]
 80115ee:	4606      	mov	r6, r0
 80115f0:	4620      	mov	r0, r4
 80115f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115f4:	2401      	movs	r4, #1
 80115f6:	4798      	blx	r3
 80115f8:	4633      	mov	r3, r6
 80115fa:	9000      	str	r0, [sp, #0]
 80115fc:	4629      	mov	r1, r5
 80115fe:	9a02      	ldr	r2, [sp, #8]
 8011600:	a803      	add	r0, sp, #12
 8011602:	f000 fd20 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011606:	a803      	add	r0, sp, #12
 8011608:	f001 f918 	bl	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801160c:	b2a3      	uxth	r3, r4
 801160e:	b138      	cbz	r0, 8011620 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8011610:	280a      	cmp	r0, #10
 8011612:	a803      	add	r0, sp, #12
 8011614:	bf04      	itt	eq
 8011616:	3301      	addeq	r3, #1
 8011618:	b21c      	sxtheq	r4, r3
 801161a:	f001 f90f 	bl	801283c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801161e:	e7f5      	b.n	801160c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8011620:	4618      	mov	r0, r3
 8011622:	b01d      	add	sp, #116	; 0x74
 8011624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011628:	b003      	add	sp, #12
 801162a:	4770      	bx	lr

0801162c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801162c:	b40e      	push	{r1, r2, r3}
 801162e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011630:	b09e      	sub	sp, #120	; 0x78
 8011632:	4604      	mov	r4, r0
 8011634:	ab23      	add	r3, sp, #140	; 0x8c
 8011636:	a805      	add	r0, sp, #20
 8011638:	f853 5b04 	ldr.w	r5, [r3], #4
 801163c:	9303      	str	r3, [sp, #12]
 801163e:	f000 fcaf 	bl	8011fa0 <_ZN8touchgfx12TextProviderC1Ev>
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	4620      	mov	r0, r4
 8011646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011648:	4798      	blx	r3
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	4606      	mov	r6, r0
 801164e:	4620      	mov	r0, r4
 8011650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011652:	4798      	blx	r3
 8011654:	4633      	mov	r3, r6
 8011656:	4629      	mov	r1, r5
 8011658:	9000      	str	r0, [sp, #0]
 801165a:	9a03      	ldr	r2, [sp, #12]
 801165c:	a805      	add	r0, sp, #20
 801165e:	f000 fcf2 	bl	8012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011662:	ad1e      	add	r5, sp, #120	; 0x78
 8011664:	2100      	movs	r1, #0
 8011666:	26ff      	movs	r6, #255	; 0xff
 8011668:	4622      	mov	r2, r4
 801166a:	a805      	add	r0, sp, #20
 801166c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8011670:	462b      	mov	r3, r5
 8011672:	f000 ffe9 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011676:	b1d8      	cbz	r0, 80116b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8011678:	280a      	cmp	r0, #10
 801167a:	d012      	beq.n	80116a2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801167c:	9804      	ldr	r0, [sp, #16]
 801167e:	b180      	cbz	r0, 80116a2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011680:	7b47      	ldrb	r7, [r0, #13]
 8011682:	7922      	ldrb	r2, [r4, #4]
 8011684:	00fb      	lsls	r3, r7, #3
 8011686:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801168a:	7a03      	ldrb	r3, [r0, #8]
 801168c:	430b      	orrs	r3, r1
 801168e:	0679      	lsls	r1, r7, #25
 8011690:	bf44      	itt	mi
 8011692:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011696:	b21b      	sxthmi	r3, r3
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	b2db      	uxtb	r3, r3
 801169c:	429e      	cmp	r6, r3
 801169e:	bf28      	it	cs
 80116a0:	461e      	movcs	r6, r3
 80116a2:	462b      	mov	r3, r5
 80116a4:	4622      	mov	r2, r4
 80116a6:	2100      	movs	r1, #0
 80116a8:	a805      	add	r0, sp, #20
 80116aa:	f000 ffcd 	bl	8012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80116ae:	e7e2      	b.n	8011676 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80116b0:	4630      	mov	r0, r6
 80116b2:	b01e      	add	sp, #120	; 0x78
 80116b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80116b8:	b003      	add	sp, #12
 80116ba:	4770      	bx	lr

080116bc <_ZNK8touchgfx8Drawable10invalidateEv>:
 80116bc:	b513      	push	{r0, r1, r4, lr}
 80116be:	6803      	ldr	r3, [r0, #0]
 80116c0:	2400      	movs	r4, #0
 80116c2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80116c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80116ca:	f8ad 1004 	strh.w	r1, [sp, #4]
 80116ce:	4669      	mov	r1, sp
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	9400      	str	r4, [sp, #0]
 80116d4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80116d8:	4798      	blx	r3
 80116da:	b002      	add	sp, #8
 80116dc:	bd10      	pop	{r4, pc}

080116de <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80116de:	b538      	push	{r3, r4, r5, lr}
 80116e0:	680b      	ldr	r3, [r1, #0]
 80116e2:	460c      	mov	r4, r1
 80116e4:	4605      	mov	r5, r0
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	4798      	blx	r3
 80116ea:	6823      	ldr	r3, [r4, #0]
 80116ec:	4620      	mov	r0, r4
 80116ee:	4629      	mov	r1, r5
 80116f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f2:	4798      	blx	r3
 80116f4:	4628      	mov	r0, r5
 80116f6:	bd38      	pop	{r3, r4, r5, pc}

080116f8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80116f8:	b410      	push	{r4}
 80116fa:	880a      	ldrh	r2, [r1, #0]
 80116fc:	8884      	ldrh	r4, [r0, #4]
 80116fe:	4422      	add	r2, r4
 8011700:	800a      	strh	r2, [r1, #0]
 8011702:	884a      	ldrh	r2, [r1, #2]
 8011704:	88c4      	ldrh	r4, [r0, #6]
 8011706:	4422      	add	r2, r4
 8011708:	804a      	strh	r2, [r1, #2]
 801170a:	6940      	ldr	r0, [r0, #20]
 801170c:	b120      	cbz	r0, 8011718 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801170e:	6803      	ldr	r3, [r0, #0]
 8011710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011716:	4718      	bx	r3
 8011718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801171c:	4770      	bx	lr

0801171e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801171e:	b570      	push	{r4, r5, r6, lr}
 8011720:	8882      	ldrh	r2, [r0, #4]
 8011722:	460c      	mov	r4, r1
 8011724:	880b      	ldrh	r3, [r1, #0]
 8011726:	4605      	mov	r5, r0
 8011728:	4413      	add	r3, r2
 801172a:	800b      	strh	r3, [r1, #0]
 801172c:	884b      	ldrh	r3, [r1, #2]
 801172e:	88c2      	ldrh	r2, [r0, #6]
 8011730:	4413      	add	r3, r2
 8011732:	804b      	strh	r3, [r1, #2]
 8011734:	1d01      	adds	r1, r0, #4
 8011736:	4620      	mov	r0, r4
 8011738:	f7fb f92e 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 801173c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	dd0b      	ble.n	801175c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011744:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011748:	2b00      	cmp	r3, #0
 801174a:	dd07      	ble.n	801175c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801174c:	6968      	ldr	r0, [r5, #20]
 801174e:	b128      	cbz	r0, 801175c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011750:	6803      	ldr	r3, [r0, #0]
 8011752:	4621      	mov	r1, r4
 8011754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801175a:	4718      	bx	r3
 801175c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011760 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8011760:	b570      	push	{r4, r5, r6, lr}
 8011762:	8882      	ldrh	r2, [r0, #4]
 8011764:	460c      	mov	r4, r1
 8011766:	880b      	ldrh	r3, [r1, #0]
 8011768:	4605      	mov	r5, r0
 801176a:	4413      	add	r3, r2
 801176c:	800b      	strh	r3, [r1, #0]
 801176e:	884b      	ldrh	r3, [r1, #2]
 8011770:	88c2      	ldrh	r2, [r0, #6]
 8011772:	4413      	add	r3, r2
 8011774:	804b      	strh	r3, [r1, #2]
 8011776:	1d01      	adds	r1, r0, #4
 8011778:	4620      	mov	r0, r4
 801177a:	f7fb f90d 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 801177e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	dd15      	ble.n	80117b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8011786:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801178a:	2b00      	cmp	r3, #0
 801178c:	dd11      	ble.n	80117b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801178e:	6968      	ldr	r0, [r5, #20]
 8011790:	b128      	cbz	r0, 801179e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8011792:	6803      	ldr	r3, [r0, #0]
 8011794:	691b      	ldr	r3, [r3, #16]
 8011796:	4621      	mov	r1, r4
 8011798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801179c:	4718      	bx	r3
 801179e:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3304      	adds	r3, #4
 80117a4:	429d      	cmp	r5, r3
 80117a6:	d104      	bne.n	80117b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 80117a8:	f7ff f806 	bl	80107b8 <_ZN8touchgfx11Application11getInstanceEv>
 80117ac:	6803      	ldr	r3, [r0, #0]
 80117ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b0:	e7f1      	b.n	8011796 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 80117b2:	bd70      	pop	{r4, r5, r6, pc}
 80117b4:	24006ca4 	.word	0x24006ca4

080117b8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80117b8:	b570      	push	{r4, r5, r6, lr}
 80117ba:	4604      	mov	r4, r0
 80117bc:	4616      	mov	r6, r2
 80117be:	460d      	mov	r5, r1
 80117c0:	b901      	cbnz	r1, 80117c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80117c2:	b192      	cbz	r2, 80117ea <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	4620      	mov	r0, r4
 80117c8:	695b      	ldr	r3, [r3, #20]
 80117ca:	4798      	blx	r3
 80117cc:	88e2      	ldrh	r2, [r4, #6]
 80117ce:	88a1      	ldrh	r1, [r4, #4]
 80117d0:	4620      	mov	r0, r4
 80117d2:	4432      	add	r2, r6
 80117d4:	4429      	add	r1, r5
 80117d6:	b212      	sxth	r2, r2
 80117d8:	b209      	sxth	r1, r1
 80117da:	f7f1 fd41 	bl	8003260 <_ZN8touchgfx8Drawable5setXYEss>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	4620      	mov	r0, r4
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117e8:	4718      	bx	r3
 80117ea:	bd70      	pop	{r4, r5, r6, pc}

080117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80117ec:	b510      	push	{r4, lr}
 80117ee:	2300      	movs	r3, #0
 80117f0:	4604      	mov	r4, r0
 80117f2:	4608      	mov	r0, r1
 80117f4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80117f8:	8023      	strh	r3, [r4, #0]
 80117fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80117fe:	8063      	strh	r3, [r4, #2]
 8011800:	6803      	ldr	r3, [r0, #0]
 8011802:	80a1      	strh	r1, [r4, #4]
 8011804:	4621      	mov	r1, r4
 8011806:	80e2      	strh	r2, [r4, #6]
 8011808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801180a:	4798      	blx	r3
 801180c:	4620      	mov	r0, r4
 801180e:	bd10      	pop	{r4, pc}

08011810 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8011810:	b530      	push	{r4, r5, lr}
 8011812:	8083      	strh	r3, [r0, #4]
 8011814:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011818:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801181c:	7183      	strb	r3, [r0, #6]
 801181e:	79c3      	ldrb	r3, [r0, #7]
 8011820:	6101      	str	r1, [r0, #16]
 8011822:	f365 0306 	bfi	r3, r5, #0, #7
 8011826:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801182a:	8282      	strh	r2, [r0, #20]
 801182c:	f365 13c7 	bfi	r3, r5, #7, #1
 8011830:	71c3      	strb	r3, [r0, #7]
 8011832:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8011836:	7203      	strb	r3, [r0, #8]
 8011838:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801183c:	7243      	strb	r3, [r0, #9]
 801183e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011842:	8143      	strh	r3, [r0, #10]
 8011844:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011848:	8183      	strh	r3, [r0, #12]
 801184a:	4b01      	ldr	r3, [pc, #4]	; (8011850 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801184c:	6003      	str	r3, [r0, #0]
 801184e:	bd30      	pop	{r4, r5, pc}
 8011850:	0801fa84 	.word	0x0801fa84

08011854 <_ZNK8touchgfx9ConstFont4findEt>:
 8011854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011856:	6904      	ldr	r4, [r0, #16]
 8011858:	b3bc      	cbz	r4, 80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801185a:	88a3      	ldrh	r3, [r4, #4]
 801185c:	8a82      	ldrh	r2, [r0, #20]
 801185e:	1acb      	subs	r3, r1, r3
 8011860:	f102 32ff 	add.w	r2, r2, #4294967295
 8011864:	d431      	bmi.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011866:	4293      	cmp	r3, r2
 8011868:	dd0c      	ble.n	8011884 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801186a:	230e      	movs	r3, #14
 801186c:	fb03 4302 	mla	r3, r3, r2, r4
 8011870:	889b      	ldrh	r3, [r3, #4]
 8011872:	1a5b      	subs	r3, r3, r1
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	429a      	cmp	r2, r3
 8011878:	db27      	blt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801187a:	2b00      	cmp	r3, #0
 801187c:	bfbc      	itt	lt
 801187e:	2302      	movlt	r3, #2
 8011880:	fb92 f3f3 	sdivlt	r3, r2, r3
 8011884:	2500      	movs	r5, #0
 8011886:	260e      	movs	r6, #14
 8011888:	4295      	cmp	r5, r2
 801188a:	dc1e      	bgt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801188c:	fb06 4003 	mla	r0, r6, r3, r4
 8011890:	8887      	ldrh	r7, [r0, #4]
 8011892:	42b9      	cmp	r1, r7
 8011894:	d01a      	beq.n	80118cc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011896:	d20d      	bcs.n	80118b4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011898:	1e5a      	subs	r2, r3, #1
 801189a:	4295      	cmp	r5, r2
 801189c:	dc15      	bgt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801189e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80118a2:	1a5b      	subs	r3, r3, r1
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	429a      	cmp	r2, r3
 80118a8:	db0f      	blt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80118aa:	429d      	cmp	r5, r3
 80118ac:	ddec      	ble.n	8011888 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80118ae:	1953      	adds	r3, r2, r5
 80118b0:	105b      	asrs	r3, r3, #1
 80118b2:	e7e9      	b.n	8011888 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80118b4:	1c5d      	adds	r5, r3, #1
 80118b6:	42aa      	cmp	r2, r5
 80118b8:	db07      	blt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80118ba:	8a43      	ldrh	r3, [r0, #18]
 80118bc:	1acb      	subs	r3, r1, r3
 80118be:	442b      	add	r3, r5
 80118c0:	429d      	cmp	r5, r3
 80118c2:	dc02      	bgt.n	80118ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80118c4:	429a      	cmp	r2, r3
 80118c6:	dadf      	bge.n	8011888 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80118c8:	e7f1      	b.n	80118ae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80118ca:	2000      	movs	r0, #0
 80118cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80118ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118d0:	4604      	mov	r4, r0
 80118d2:	4617      	mov	r7, r2
 80118d4:	461e      	mov	r6, r3
 80118d6:	b911      	cbnz	r1, 80118de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80118d8:	2500      	movs	r5, #0
 80118da:	4628      	mov	r0, r5
 80118dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118de:	290a      	cmp	r1, #10
 80118e0:	d0fa      	beq.n	80118d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80118e2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80118e6:	4291      	cmp	r1, r2
 80118e8:	d0f6      	beq.n	80118d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80118ea:	f242 020b 	movw	r2, #8203	; 0x200b
 80118ee:	4291      	cmp	r1, r2
 80118f0:	d0f2      	beq.n	80118d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80118f2:	f7ff ffaf 	bl	8011854 <_ZNK8touchgfx9ConstFont4findEt>
 80118f6:	4605      	mov	r5, r0
 80118f8:	b950      	cbnz	r0, 8011910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80118fa:	6823      	ldr	r3, [r4, #0]
 80118fc:	4620      	mov	r0, r4
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	4798      	blx	r3
 8011902:	4601      	mov	r1, r0
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff ffa5 	bl	8011854 <_ZNK8touchgfx9ConstFont4findEt>
 801190a:	4605      	mov	r5, r0
 801190c:	2800      	cmp	r0, #0
 801190e:	d0e3      	beq.n	80118d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	4629      	mov	r1, r5
 8011914:	4620      	mov	r0, r4
 8011916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011918:	4798      	blx	r3
 801191a:	6038      	str	r0, [r7, #0]
 801191c:	6823      	ldr	r3, [r4, #0]
 801191e:	4620      	mov	r0, r4
 8011920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011922:	4798      	blx	r3
 8011924:	7030      	strb	r0, [r6, #0]
 8011926:	e7d8      	b.n	80118da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08011928 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4605      	mov	r5, r0
 801192c:	f002 fa86 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011930:	4604      	mov	r4, r0
 8011932:	4628      	mov	r0, r5
 8011934:	f002 f9be 	bl	8013cb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011938:	2800      	cmp	r0, #0
 801193a:	bf14      	ite	ne
 801193c:	2002      	movne	r0, #2
 801193e:	2000      	moveq	r0, #0
 8011940:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8011944:	b280      	uxth	r0, r0
 8011946:	bd38      	pop	{r3, r4, r5, pc}

08011948 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	4605      	mov	r5, r0
 801194c:	f002 fa76 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011950:	4604      	mov	r4, r0
 8011952:	4628      	mov	r0, r5
 8011954:	f002 f9ae 	bl	8013cb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011958:	2800      	cmp	r0, #0
 801195a:	bf14      	ite	ne
 801195c:	2002      	movne	r0, #2
 801195e:	2000      	moveq	r0, #0
 8011960:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8011964:	f040 0001 	orr.w	r0, r0, #1
 8011968:	b280      	uxth	r0, r0
 801196a:	bd38      	pop	{r3, r4, r5, pc}

0801196c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801196c:	2000      	movs	r0, #0
 801196e:	4770      	bx	lr

08011970 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8011970:	2001      	movs	r0, #1
 8011972:	4770      	bx	lr

08011974 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8011974:	2002      	movs	r0, #2
 8011976:	4770      	bx	lr

08011978 <_ZN8touchgfx6ScreenD1Ev>:
 8011978:	4770      	bx	lr

0801197a <_ZN8touchgfx12GestureEventD1Ev>:
 801197a:	4770      	bx	lr

0801197c <_ZN8touchgfx9DragEventD1Ev>:
 801197c:	4770      	bx	lr

0801197e <_ZN8touchgfx10ClickEventD1Ev>:
 801197e:	4770      	bx	lr

08011980 <_ZN8touchgfx10ClickEventD0Ev>:
 8011980:	b510      	push	{r4, lr}
 8011982:	4604      	mov	r4, r0
 8011984:	210c      	movs	r1, #12
 8011986:	f00a fbc3 	bl	801c110 <_ZdlPvj>
 801198a:	4620      	mov	r0, r4
 801198c:	bd10      	pop	{r4, pc}

0801198e <_ZN8touchgfx9DragEventD0Ev>:
 801198e:	b510      	push	{r4, lr}
 8011990:	4604      	mov	r4, r0
 8011992:	2110      	movs	r1, #16
 8011994:	f00a fbbc 	bl	801c110 <_ZdlPvj>
 8011998:	4620      	mov	r0, r4
 801199a:	bd10      	pop	{r4, pc}

0801199c <_ZN8touchgfx12GestureEventD0Ev>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4604      	mov	r4, r0
 80119a0:	210c      	movs	r1, #12
 80119a2:	f00a fbb5 	bl	801c110 <_ZdlPvj>
 80119a6:	4620      	mov	r0, r4
 80119a8:	bd10      	pop	{r4, pc}

080119aa <_ZN8touchgfx6ScreenD0Ev>:
 80119aa:	b510      	push	{r4, lr}
 80119ac:	4604      	mov	r4, r0
 80119ae:	213c      	movs	r1, #60	; 0x3c
 80119b0:	f00a fbae 	bl	801c110 <_ZdlPvj>
 80119b4:	4620      	mov	r0, r4
 80119b6:	bd10      	pop	{r4, pc}

080119b8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80119b8:	b530      	push	{r4, r5, lr}
 80119ba:	460d      	mov	r5, r1
 80119bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80119be:	b087      	sub	sp, #28
 80119c0:	4604      	mov	r4, r0
 80119c2:	b301      	cbz	r1, 8011a06 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80119c4:	a801      	add	r0, sp, #4
 80119c6:	f7ff ff11 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80119ca:	892a      	ldrh	r2, [r5, #8]
 80119cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80119d0:	7928      	ldrb	r0, [r5, #4]
 80119d2:	1ad2      	subs	r2, r2, r3
 80119d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80119d6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80119da:	441a      	add	r2, r3
 80119dc:	896b      	ldrh	r3, [r5, #10]
 80119de:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80119e2:	f88d 0010 	strb.w	r0, [sp, #16]
 80119e6:	1b5b      	subs	r3, r3, r5
 80119e8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80119ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119ec:	442b      	add	r3, r5
 80119ee:	4d07      	ldr	r5, [pc, #28]	; (8011a0c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80119f0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80119f4:	a903      	add	r1, sp, #12
 80119f6:	9503      	str	r5, [sp, #12]
 80119f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80119fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a00:	6803      	ldr	r3, [r0, #0]
 8011a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a04:	4798      	blx	r3
 8011a06:	b007      	add	sp, #28
 8011a08:	bd30      	pop	{r4, r5, pc}
 8011a0a:	bf00      	nop
 8011a0c:	0801fb04 	.word	0x0801fb04

08011a10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011a16:	b08a      	sub	sp, #40	; 0x28
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	b113      	cbz	r3, 8011a24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8011a1e:	790b      	ldrb	r3, [r1, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d044      	beq.n	8011aae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011a24:	f104 0804 	add.w	r8, r4, #4
 8011a28:	a803      	add	r0, sp, #12
 8011a2a:	4641      	mov	r1, r8
 8011a2c:	f7ff fede 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a30:	792b      	ldrb	r3, [r5, #4]
 8011a32:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8011a36:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8011a3a:	b983      	cbnz	r3, 8011a5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8011a3c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8011a40:	892a      	ldrh	r2, [r5, #8]
 8011a42:	88e9      	ldrh	r1, [r5, #6]
 8011a44:	4640      	mov	r0, r8
 8011a46:	1b92      	subs	r2, r2, r6
 8011a48:	9301      	str	r3, [sp, #4]
 8011a4a:	1bc9      	subs	r1, r1, r7
 8011a4c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8011a50:	b212      	sxth	r2, r2
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	b209      	sxth	r1, r1
 8011a56:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8011a5a:	f7fa febb 	bl	800c7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8011a5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011a60:	b329      	cbz	r1, 8011aae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011a62:	a805      	add	r0, sp, #20
 8011a64:	f7ff fec2 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a68:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011a6c:	792b      	ldrb	r3, [r5, #4]
 8011a6e:	a907      	add	r1, sp, #28
 8011a70:	1abf      	subs	r7, r7, r2
 8011a72:	88ea      	ldrh	r2, [r5, #6]
 8011a74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011a76:	4417      	add	r7, r2
 8011a78:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8011a7a:	f88d 3020 	strb.w	r3, [sp, #32]
 8011a7e:	4417      	add	r7, r2
 8011a80:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011a84:	1ab6      	subs	r6, r6, r2
 8011a86:	892a      	ldrh	r2, [r5, #8]
 8011a88:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8011a8c:	4416      	add	r6, r2
 8011a8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011a90:	4416      	add	r6, r2
 8011a92:	4a08      	ldr	r2, [pc, #32]	; (8011ab4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011a94:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8011a98:	2600      	movs	r6, #0
 8011a9a:	9207      	str	r2, [sp, #28]
 8011a9c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8011aa0:	6803      	ldr	r3, [r0, #0]
 8011aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa4:	4798      	blx	r3
 8011aa6:	792b      	ldrb	r3, [r5, #4]
 8011aa8:	b10b      	cbz	r3, 8011aae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011aaa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011aae:	b00a      	add	sp, #40	; 0x28
 8011ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab4:	0801fadc 	.word	0x0801fadc

08011ab8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011abc:	460c      	mov	r4, r1
 8011abe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011ac0:	b088      	sub	sp, #32
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	2900      	cmp	r1, #0
 8011ac6:	d06d      	beq.n	8011ba4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8011ac8:	4668      	mov	r0, sp
 8011aca:	f7ff fe8f 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ace:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8011ad0:	88e3      	ldrh	r3, [r4, #6]
 8011ad2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8011ad6:	440b      	add	r3, r1
 8011ad8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011adc:	b21b      	sxth	r3, r3
 8011ade:	4543      	cmp	r3, r8
 8011ae0:	db31      	blt.n	8011b46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011ae2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8011ae6:	44c4      	add	ip, r8
 8011ae8:	fa0f fc8c 	sxth.w	ip, ip
 8011aec:	4563      	cmp	r3, ip
 8011aee:	da2a      	bge.n	8011b46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011af0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011af2:	8926      	ldrh	r6, [r4, #8]
 8011af4:	4416      	add	r6, r2
 8011af6:	b236      	sxth	r6, r6
 8011af8:	42be      	cmp	r6, r7
 8011afa:	db24      	blt.n	8011b46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011afc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011b00:	4438      	add	r0, r7
 8011b02:	b200      	sxth	r0, r0
 8011b04:	4286      	cmp	r6, r0
 8011b06:	da1e      	bge.n	8011b46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011b08:	8963      	ldrh	r3, [r4, #10]
 8011b0a:	4419      	add	r1, r3
 8011b0c:	b209      	sxth	r1, r1
 8011b0e:	4541      	cmp	r1, r8
 8011b10:	db08      	blt.n	8011b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011b12:	4561      	cmp	r1, ip
 8011b14:	da06      	bge.n	8011b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	441a      	add	r2, r3
 8011b1a:	b212      	sxth	r2, r2
 8011b1c:	42ba      	cmp	r2, r7
 8011b1e:	db01      	blt.n	8011b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011b20:	4282      	cmp	r2, r0
 8011b22:	db10      	blt.n	8011b46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011b24:	4b21      	ldr	r3, [pc, #132]	; (8011bac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8011b26:	a904      	add	r1, sp, #16
 8011b28:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b32:	2300      	movs	r3, #0
 8011b34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b38:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011b3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011b40:	6803      	ldr	r3, [r0, #0]
 8011b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b44:	4798      	blx	r3
 8011b46:	1d29      	adds	r1, r5, #4
 8011b48:	a802      	add	r0, sp, #8
 8011b4a:	f7ff fe4f 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011b52:	88e0      	ldrh	r0, [r4, #6]
 8011b54:	eba3 0808 	sub.w	r8, r3, r8
 8011b58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011b5c:	7921      	ldrb	r1, [r4, #4]
 8011b5e:	fa1f f888 	uxth.w	r8, r8
 8011b62:	1bdf      	subs	r7, r3, r7
 8011b64:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011b68:	b2bb      	uxth	r3, r7
 8011b6a:	4440      	add	r0, r8
 8011b6c:	8922      	ldrh	r2, [r4, #8]
 8011b6e:	8967      	ldrh	r7, [r4, #10]
 8011b70:	4460      	add	r0, ip
 8011b72:	89a4      	ldrh	r4, [r4, #12]
 8011b74:	441a      	add	r2, r3
 8011b76:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011b78:	44b8      	add	r8, r7
 8011b7a:	4423      	add	r3, r4
 8011b7c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011b80:	4432      	add	r2, r6
 8011b82:	44e0      	add	r8, ip
 8011b84:	4433      	add	r3, r6
 8011b86:	4c0a      	ldr	r4, [pc, #40]	; (8011bb0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011b88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011b8a:	f88d 1014 	strb.w	r1, [sp, #20]
 8011b8e:	a904      	add	r1, sp, #16
 8011b90:	9404      	str	r4, [sp, #16]
 8011b92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011b96:	f8ad 801a 	strh.w	r8, [sp, #26]
 8011b9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ba2:	4798      	blx	r3
 8011ba4:	b008      	add	sp, #32
 8011ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011baa:	bf00      	nop
 8011bac:	0801fadc 	.word	0x0801fadc
 8011bb0:	0801faf0 	.word	0x0801faf0

08011bb4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011bbc:	3201      	adds	r2, #1
 8011bbe:	d112      	bne.n	8011be6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011bc0:	2500      	movs	r5, #0
 8011bc2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011bc6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011bca:	6803      	ldr	r3, [r0, #0]
 8011bcc:	9500      	str	r5, [sp, #0]
 8011bce:	466d      	mov	r5, sp
 8011bd0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011bd4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011bd8:	4629      	mov	r1, r5
 8011bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bdc:	4798      	blx	r3
 8011bde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011be2:	e884 0003 	stmia.w	r4, {r0, r1}
 8011be6:	4620      	mov	r0, r4
 8011be8:	b003      	add	sp, #12
 8011bea:	bd30      	pop	{r4, r5, pc}

08011bec <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011bec:	b513      	push	{r0, r1, r4, lr}
 8011bee:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	d109      	bne.n	8011c0c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011bf8:	4601      	mov	r1, r0
 8011bfa:	4668      	mov	r0, sp
 8011bfc:	f7ff fdf6 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c00:	f8bd 3000 	ldrh.w	r3, [sp]
 8011c04:	8423      	strh	r3, [r4, #32]
 8011c06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011c0a:	8463      	strh	r3, [r4, #34]	; 0x22
 8011c0c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011c10:	b002      	add	sp, #8
 8011c12:	bd10      	pop	{r4, pc}

08011c14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011c14:	b513      	push	{r0, r1, r4, lr}
 8011c16:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	d109      	bne.n	8011c34 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011c20:	4601      	mov	r1, r0
 8011c22:	4668      	mov	r0, sp
 8011c24:	f7ff fde2 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8011c2c:	8423      	strh	r3, [r4, #32]
 8011c2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011c32:	8463      	strh	r3, [r4, #34]	; 0x22
 8011c34:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011c38:	b002      	add	sp, #8
 8011c3a:	bd10      	pop	{r4, pc}

08011c3c <_ZN8touchgfx6ScreenC1Ev>:
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	4b17      	ldr	r3, [pc, #92]	; (8011c9c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011c40:	4605      	mov	r5, r0
 8011c42:	4a17      	ldr	r2, [pc, #92]	; (8011ca0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011c44:	2101      	movs	r1, #1
 8011c46:	f845 3b04 	str.w	r3, [r5], #4
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	6042      	str	r2, [r0, #4]
 8011c4e:	4604      	mov	r4, r0
 8011c50:	8103      	strh	r3, [r0, #8]
 8011c52:	8143      	strh	r3, [r0, #10]
 8011c54:	8183      	strh	r3, [r0, #12]
 8011c56:	81c3      	strh	r3, [r0, #14]
 8011c58:	8203      	strh	r3, [r0, #16]
 8011c5a:	8243      	strh	r3, [r0, #18]
 8011c5c:	8283      	strh	r3, [r0, #20]
 8011c5e:	82c3      	strh	r3, [r0, #22]
 8011c60:	6203      	str	r3, [r0, #32]
 8011c62:	8483      	strh	r3, [r0, #36]	; 0x24
 8011c64:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011c66:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8011c6a:	6343      	str	r3, [r0, #52]	; 0x34
 8011c6c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011c70:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011c74:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011c78:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011c7c:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011c84:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011c86:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011c88:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011c8c:	4798      	blx	r3
 8011c8e:	6863      	ldr	r3, [r4, #4]
 8011c90:	4628      	mov	r0, r5
 8011c92:	4631      	mov	r1, r6
 8011c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c96:	4798      	blx	r3
 8011c98:	4620      	mov	r0, r4
 8011c9a:	bd70      	pop	{r4, r5, r6, pc}
 8011c9c:	0801fb18 	.word	0x0801fb18
 8011ca0:	0801e980 	.word	0x0801e980
 8011ca4:	24006c5e 	.word	0x24006c5e
 8011ca8:	24006c5c 	.word	0x24006c5c

08011cac <_ZN8touchgfx6Screen4drawEv>:
 8011cac:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011cae:	b507      	push	{r0, r1, r2, lr}
 8011cb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	4b08      	ldr	r3, [pc, #32]	; (8011cd8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011cb8:	9100      	str	r1, [sp, #0]
 8011cba:	4669      	mov	r1, sp
 8011cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cc0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011cc4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011cc8:	6803      	ldr	r3, [r0, #0]
 8011cca:	689b      	ldr	r3, [r3, #8]
 8011ccc:	4798      	blx	r3
 8011cce:	b003      	add	sp, #12
 8011cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cd4:	24006c5c 	.word	0x24006c5c
 8011cd8:	24006c5e 	.word	0x24006c5e

08011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011ce4:	b089      	sub	sp, #36	; 0x24
 8011ce6:	4680      	mov	r8, r0
 8011ce8:	460c      	mov	r4, r1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	4615      	mov	r5, r2
 8011cee:	dd0e      	ble.n	8011d0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011cf0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	dd0a      	ble.n	8011d0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f7ff ff5b 	bl	8011bb4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011cfe:	4621      	mov	r1, r4
 8011d00:	f7fe fcd0 	bl	80106a4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011d04:	69eb      	ldr	r3, [r5, #28]
 8011d06:	b928      	cbnz	r0, 8011d14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011d08:	461d      	mov	r5, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1f4      	bne.n	8011cf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011d0e:	b009      	add	sp, #36	; 0x24
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d14:	ae04      	add	r6, sp, #16
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f000 80b5 	beq.w	8011e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011d1c:	682b      	ldr	r3, [r5, #0]
 8011d1e:	4629      	mov	r1, r5
 8011d20:	a802      	add	r0, sp, #8
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	4798      	blx	r3
 8011d26:	4628      	mov	r0, r5
 8011d28:	f7ff ff60 	bl	8011bec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011d2c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011d30:	4407      	add	r7, r0
 8011d32:	4628      	mov	r0, r5
 8011d34:	f7ff ff6e 	bl	8011c14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011d38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011d3c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011d40:	b23f      	sxth	r7, r7
 8011d42:	4418      	add	r0, r3
 8011d44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011d48:	4621      	mov	r1, r4
 8011d4a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011d4e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011d52:	4630      	mov	r0, r6
 8011d54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d58:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011d5c:	f7fa fe1c 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 8011d60:	4628      	mov	r0, r5
 8011d62:	f7ff ff27 	bl	8011bb4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011d66:	ab06      	add	r3, sp, #24
 8011d68:	4602      	mov	r2, r0
 8011d6a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011d6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d72:	4611      	mov	r1, r2
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fa fe0f 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 8011d7a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011d7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011d82:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011d86:	4299      	cmp	r1, r3
 8011d88:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011d8c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011d90:	d10b      	bne.n	8011daa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d96:	4552      	cmp	r2, sl
 8011d98:	d107      	bne.n	8011daa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d9a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011d9e:	455a      	cmp	r2, fp
 8011da0:	d103      	bne.n	8011daa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011da2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011da6:	454a      	cmp	r2, r9
 8011da8:	d06d      	beq.n	8011e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011daa:	f1bb 0f00 	cmp.w	fp, #0
 8011dae:	dd65      	ble.n	8011e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011db0:	f1b9 0f00 	cmp.w	r9, #0
 8011db4:	dd62      	ble.n	8011e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011db6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011dba:	fa1f f08a 	uxth.w	r0, sl
 8011dbe:	4552      	cmp	r2, sl
 8011dc0:	9000      	str	r0, [sp, #0]
 8011dc2:	da12      	bge.n	8011dea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	9b00      	ldr	r3, [sp, #0]
 8011dc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011dcc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011dd0:	1a9a      	subs	r2, r3, r2
 8011dd2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011dd6:	4631      	mov	r1, r6
 8011dd8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011ddc:	4640      	mov	r0, r8
 8011dde:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011de2:	69ea      	ldr	r2, [r5, #28]
 8011de4:	f7ff ff7a 	bl	8011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011de8:	9b01      	ldr	r3, [sp, #4]
 8011dea:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011dee:	b29f      	uxth	r7, r3
 8011df0:	429a      	cmp	r2, r3
 8011df2:	da0d      	bge.n	8011e10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011df4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011df8:	1aba      	subs	r2, r7, r2
 8011dfa:	f8ad a012 	strh.w	sl, [sp, #18]
 8011dfe:	4631      	mov	r1, r6
 8011e00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011e04:	4640      	mov	r0, r8
 8011e06:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011e0a:	69ea      	ldr	r2, [r5, #28]
 8011e0c:	f7ff ff66 	bl	8011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011e10:	8822      	ldrh	r2, [r4, #0]
 8011e12:	445f      	add	r7, fp
 8011e14:	88a3      	ldrh	r3, [r4, #4]
 8011e16:	b2bf      	uxth	r7, r7
 8011e18:	4413      	add	r3, r2
 8011e1a:	b23a      	sxth	r2, r7
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	b219      	sxth	r1, r3
 8011e20:	4291      	cmp	r1, r2
 8011e22:	dd0d      	ble.n	8011e40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011e24:	1bdb      	subs	r3, r3, r7
 8011e26:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011e2a:	f8ad a012 	strh.w	sl, [sp, #18]
 8011e2e:	4631      	mov	r1, r6
 8011e30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e34:	4640      	mov	r0, r8
 8011e36:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011e3a:	69ea      	ldr	r2, [r5, #28]
 8011e3c:	f7ff ff4e 	bl	8011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011e40:	88e2      	ldrh	r2, [r4, #6]
 8011e42:	8863      	ldrh	r3, [r4, #2]
 8011e44:	4413      	add	r3, r2
 8011e46:	9a00      	ldr	r2, [sp, #0]
 8011e48:	444a      	add	r2, r9
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	fa1f f982 	uxth.w	r9, r2
 8011e50:	b219      	sxth	r1, r3
 8011e52:	fa0f f289 	sxth.w	r2, r9
 8011e56:	428a      	cmp	r2, r1
 8011e58:	da15      	bge.n	8011e86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011e5a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011e5e:	eba3 0309 	sub.w	r3, r3, r9
 8011e62:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011e66:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011e6a:	4631      	mov	r1, r6
 8011e6c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011e70:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011e74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e78:	69ea      	ldr	r2, [r5, #28]
 8011e7a:	e001      	b.n	8011e80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011e7c:	69ea      	ldr	r2, [r5, #28]
 8011e7e:	4621      	mov	r1, r4
 8011e80:	4640      	mov	r0, r8
 8011e82:	f7ff ff2b 	bl	8011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011e86:	4628      	mov	r0, r5
 8011e88:	f7ff fe94 	bl	8011bb4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011e8c:	6861      	ldr	r1, [r4, #4]
 8011e8e:	4602      	mov	r2, r0
 8011e90:	4633      	mov	r3, r6
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	c303      	stmia	r3!, {r0, r1}
 8011e96:	4611      	mov	r1, r2
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f7fa fd7d 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 8011e9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f77f af33 	ble.w	8011d0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011ea8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f77f af2e 	ble.w	8011d0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	f7ff fe9a 	bl	8011bec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011eb8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011ebc:	1a18      	subs	r0, r3, r0
 8011ebe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f7ff fea6 	bl	8011c14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011ec8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011ecc:	4631      	mov	r1, r6
 8011ece:	1a18      	subs	r0, r3, r0
 8011ed0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	682b      	ldr	r3, [r5, #0]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	4798      	blx	r3
 8011edc:	e717      	b.n	8011d0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08011ede <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011ede:	b570      	push	{r4, r5, r6, lr}
 8011ee0:	1d06      	adds	r6, r0, #4
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	460c      	mov	r4, r1
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	4631      	mov	r1, r6
 8011eea:	4605      	mov	r5, r0
 8011eec:	a802      	add	r0, sp, #8
 8011eee:	9301      	str	r3, [sp, #4]
 8011ef0:	f7ff fc7c 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ef4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011ef8:	8822      	ldrh	r2, [r4, #0]
 8011efa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8011efe:	1ad2      	subs	r2, r2, r3
 8011f00:	8863      	ldrh	r3, [r4, #2]
 8011f02:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011f06:	1a5b      	subs	r3, r3, r1
 8011f08:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011f0c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011f10:	aa01      	add	r2, sp, #4
 8011f12:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011f16:	4630      	mov	r0, r6
 8011f18:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011f1c:	a904      	add	r1, sp, #16
 8011f1e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011f22:	f7fa fe11 	bl	800cb48 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011f26:	9a01      	ldr	r2, [sp, #4]
 8011f28:	b11a      	cbz	r2, 8011f32 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f7ff fed5 	bl	8011cdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f32:	b006      	add	sp, #24
 8011f34:	bd70      	pop	{r4, r5, r6, pc}

08011f36 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011f36:	4602      	mov	r2, r0
 8011f38:	b530      	push	{r4, r5, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	b085      	sub	sp, #20
 8011f3e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011f42:	460d      	mov	r5, r1
 8011f44:	466b      	mov	r3, sp
 8011f46:	6851      	ldr	r1, [r2, #4]
 8011f48:	c303      	stmia	r3!, {r0, r1}
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	4668      	mov	r0, sp
 8011f4e:	f7fa fd23 	bl	800c998 <_ZN8touchgfx4RectaNERKS0_>
 8011f52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011f56:	b12b      	cbz	r3, 8011f64 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011f58:	4669      	mov	r1, sp
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f7ff ffbf 	bl	8011ede <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011f60:	b005      	add	sp, #20
 8011f62:	bd30      	pop	{r4, r5, pc}
 8011f64:	3404      	adds	r4, #4
 8011f66:	a802      	add	r0, sp, #8
 8011f68:	4621      	mov	r1, r4
 8011f6a:	f7ff fc3f 	bl	80117ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011f6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f72:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011f76:	4669      	mov	r1, sp
 8011f78:	4620      	mov	r0, r4
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011f80:	f8ad 3000 	strh.w	r3, [sp]
 8011f84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f88:	1a9b      	subs	r3, r3, r2
 8011f8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f8e:	f7fa fda2 	bl	800cad6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8011f92:	e7e5      	b.n	8011f60 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011f94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011f94:	460b      	mov	r3, r1
 8011f96:	680a      	ldr	r2, [r1, #0]
 8011f98:	1d01      	adds	r1, r0, #4
 8011f9a:	6992      	ldr	r2, [r2, #24]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	4710      	bx	r2

08011fa0 <_ZN8touchgfx12TextProviderC1Ev>:
 8011fa0:	b538      	push	{r3, r4, r5, lr}
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	2302      	movs	r3, #2
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	220e      	movs	r2, #14
 8011faa:	7403      	strb	r3, [r0, #16]
 8011fac:	4629      	mov	r1, r5
 8011fae:	6145      	str	r5, [r0, #20]
 8011fb0:	7605      	strb	r5, [r0, #24]
 8011fb2:	83c5      	strh	r5, [r0, #30]
 8011fb4:	8405      	strh	r5, [r0, #32]
 8011fb6:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011fb8:	8705      	strh	r5, [r0, #56]	; 0x38
 8011fba:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8011fbc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8011fc0:	e9c0 5500 	strd	r5, r5, [r0]
 8011fc4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8011fc8:	304c      	adds	r0, #76	; 0x4c
 8011fca:	f00a fa43 	bl	801c454 <memset>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8011fd6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011fda:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8011fde:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8011fe2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8011fe6:	f7f2 fc2b 	bl	8004840 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011fea:	4620      	mov	r0, r4
 8011fec:	bd38      	pop	{r3, r4, r5, pc}

08011fee <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011fee:	b530      	push	{r4, r5, lr}
 8011ff0:	2500      	movs	r5, #0
 8011ff2:	2401      	movs	r4, #1
 8011ff4:	6843      	ldr	r3, [r0, #4]
 8011ff6:	b913      	cbnz	r3, 8011ffe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011ff8:	6803      	ldr	r3, [r0, #0]
 8011ffa:	b313      	cbz	r3, 8012042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011ffc:	6043      	str	r3, [r0, #4]
 8011ffe:	7e03      	ldrb	r3, [r0, #24]
 8012000:	b143      	cbz	r3, 8012014 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8012002:	6943      	ldr	r3, [r0, #20]
 8012004:	b12b      	cbz	r3, 8012012 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012006:	881a      	ldrh	r2, [r3, #0]
 8012008:	b11a      	cbz	r2, 8012012 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801200a:	1c9a      	adds	r2, r3, #2
 801200c:	6142      	str	r2, [r0, #20]
 801200e:	8818      	ldrh	r0, [r3, #0]
 8012010:	bd30      	pop	{r4, r5, pc}
 8012012:	7605      	strb	r5, [r0, #24]
 8012014:	6843      	ldr	r3, [r0, #4]
 8012016:	8819      	ldrh	r1, [r3, #0]
 8012018:	b199      	cbz	r1, 8012042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801201a:	1c9a      	adds	r2, r3, #2
 801201c:	2902      	cmp	r1, #2
 801201e:	6042      	str	r2, [r0, #4]
 8012020:	d1f5      	bne.n	801200e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8012022:	7c03      	ldrb	r3, [r0, #16]
 8012024:	2b01      	cmp	r3, #1
 8012026:	d8e5      	bhi.n	8011ff4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012028:	1c5a      	adds	r2, r3, #1
 801202a:	3302      	adds	r3, #2
 801202c:	7402      	strb	r2, [r0, #16]
 801202e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012032:	6143      	str	r3, [r0, #20]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d0dd      	beq.n	8011ff4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d0da      	beq.n	8011ff4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801203e:	7604      	strb	r4, [r0, #24]
 8012040:	e7d8      	b.n	8011ff4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012042:	2000      	movs	r0, #0
 8012044:	e7e4      	b.n	8012010 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08012046 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8012046:	b430      	push	{r4, r5}
 8012048:	6815      	ldr	r5, [r2, #0]
 801204a:	6085      	str	r5, [r0, #8]
 801204c:	6852      	ldr	r2, [r2, #4]
 801204e:	6443      	str	r3, [r0, #68]	; 0x44
 8012050:	60c2      	str	r2, [r0, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	9b02      	ldr	r3, [sp, #8]
 8012056:	7402      	strb	r2, [r0, #16]
 8012058:	6001      	str	r1, [r0, #0]
 801205a:	6483      	str	r3, [r0, #72]	; 0x48
 801205c:	6042      	str	r2, [r0, #4]
 801205e:	6142      	str	r2, [r0, #20]
 8012060:	7602      	strb	r2, [r0, #24]
 8012062:	8702      	strh	r2, [r0, #56]	; 0x38
 8012064:	8402      	strh	r2, [r0, #32]
 8012066:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801206a:	bc30      	pop	{r4, r5}
 801206c:	f7f2 bbe8 	b.w	8004840 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08012070 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8012070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012072:	4605      	mov	r5, r0
 8012074:	4608      	mov	r0, r1
 8012076:	b1f1      	cbz	r1, 80120b6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8012078:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801207c:	460b      	mov	r3, r1
 801207e:	f101 0708 	add.w	r7, r1, #8
 8012082:	4622      	mov	r2, r4
 8012084:	6818      	ldr	r0, [r3, #0]
 8012086:	3308      	adds	r3, #8
 8012088:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801208c:	4626      	mov	r6, r4
 801208e:	42bb      	cmp	r3, r7
 8012090:	c603      	stmia	r6!, {r0, r1}
 8012092:	4634      	mov	r4, r6
 8012094:	d1f6      	bne.n	8012084 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8012096:	6818      	ldr	r0, [r3, #0]
 8012098:	6030      	str	r0, [r6, #0]
 801209a:	4610      	mov	r0, r2
 801209c:	889b      	ldrh	r3, [r3, #4]
 801209e:	80b3      	strh	r3, [r6, #4]
 80120a0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80120a4:	015b      	lsls	r3, r3, #5
 80120a6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80120aa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80120ae:	430b      	orrs	r3, r1
 80120b0:	425b      	negs	r3, r3
 80120b2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80120b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120b8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	460c      	mov	r4, r1
 80120bc:	6811      	ldr	r1, [r2, #0]
 80120be:	4610      	mov	r0, r2
 80120c0:	68cd      	ldr	r5, [r1, #12]
 80120c2:	4619      	mov	r1, r3
 80120c4:	47a8      	blx	r5
 80120c6:	2800      	cmp	r0, #0
 80120c8:	bf08      	it	eq
 80120ca:	4620      	moveq	r0, r4
 80120cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080120d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d2:	4604      	mov	r4, r0
 80120d4:	4615      	mov	r5, r2
 80120d6:	4608      	mov	r0, r1
 80120d8:	b93a      	cbnz	r2, 80120ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80120da:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80120de:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80120e2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80120e6:	4628      	mov	r0, r5
 80120e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ea:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80120ee:	8893      	ldrh	r3, [r2, #4]
 80120f0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80120f4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80120f8:	79ee      	ldrb	r6, [r5, #7]
 80120fa:	4316      	orrs	r6, r2
 80120fc:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8012100:	189a      	adds	r2, r3, r2
 8012102:	b2b7      	uxth	r7, r6
 8012104:	b291      	uxth	r1, r2
 8012106:	291d      	cmp	r1, #29
 8012108:	f200 8084 	bhi.w	8012214 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801210c:	2201      	movs	r2, #1
 801210e:	10f6      	asrs	r6, r6, #3
 8012110:	408a      	lsls	r2, r1
 8012112:	4978      	ldr	r1, [pc, #480]	; (80122f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8012114:	420a      	tst	r2, r1
 8012116:	d12e      	bne.n	8012176 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8012118:	f412 7f60 	tst.w	r2, #896	; 0x380
 801211c:	d07a      	beq.n	8012214 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801211e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8012122:	462b      	mov	r3, r5
 8012124:	f105 0e08 	add.w	lr, r5, #8
 8012128:	4615      	mov	r5, r2
 801212a:	6818      	ldr	r0, [r3, #0]
 801212c:	3308      	adds	r3, #8
 801212e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012132:	4694      	mov	ip, r2
 8012134:	4573      	cmp	r3, lr
 8012136:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801213a:	4662      	mov	r2, ip
 801213c:	d1f5      	bne.n	801212a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801213e:	6818      	ldr	r0, [r3, #0]
 8012140:	f8cc 0000 	str.w	r0, [ip]
 8012144:	889b      	ldrh	r3, [r3, #4]
 8012146:	f8ac 3004 	strh.w	r3, [ip, #4]
 801214a:	b2b3      	uxth	r3, r6
 801214c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012150:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8012154:	1aca      	subs	r2, r1, r3
 8012156:	1bcf      	subs	r7, r1, r7
 8012158:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801215c:	b292      	uxth	r2, r2
 801215e:	1afb      	subs	r3, r7, r3
 8012160:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8012164:	10d2      	asrs	r2, r2, #3
 8012166:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801216a:	4302      	orrs	r2, r0
 801216c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8012170:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012174:	e7b7      	b.n	80120e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012176:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012178:	b92b      	cbnz	r3, 8012186 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801217a:	4b5f      	ldr	r3, [pc, #380]	; (80122f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801217c:	21c0      	movs	r1, #192	; 0xc0
 801217e:	4a5f      	ldr	r2, [pc, #380]	; (80122fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8012180:	485f      	ldr	r0, [pc, #380]	; (8012300 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8012182:	f00a f8db 	bl	801c33c <__assert_func>
 8012186:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012188:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801218c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801218e:	f640 6333 	movw	r3, #3635	; 0xe33
 8012192:	4299      	cmp	r1, r3
 8012194:	d110      	bne.n	80121b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8012196:	6803      	ldr	r3, [r0, #0]
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	4798      	blx	r3
 801219c:	7b41      	ldrb	r1, [r0, #13]
 801219e:	00cb      	lsls	r3, r1, #3
 80121a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80121a4:	7a03      	ldrb	r3, [r0, #8]
 80121a6:	0648      	lsls	r0, r1, #25
 80121a8:	ea43 0302 	orr.w	r3, r3, r2
 80121ac:	bf44      	itt	mi
 80121ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80121b2:	b21b      	sxthmi	r3, r3
 80121b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80121b8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80121bc:	462a      	mov	r2, r5
 80121be:	f105 0c08 	add.w	ip, r5, #8
 80121c2:	443b      	add	r3, r7
 80121c4:	4433      	add	r3, r6
 80121c6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	4635      	mov	r5, r6
 80121ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80121d2:	6810      	ldr	r0, [r2, #0]
 80121d4:	3208      	adds	r2, #8
 80121d6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80121da:	4637      	mov	r7, r6
 80121dc:	4562      	cmp	r2, ip
 80121de:	c703      	stmia	r7!, {r0, r1}
 80121e0:	463e      	mov	r6, r7
 80121e2:	d1f6      	bne.n	80121d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80121e4:	6810      	ldr	r0, [r2, #0]
 80121e6:	6038      	str	r0, [r7, #0]
 80121e8:	8892      	ldrh	r2, [r2, #4]
 80121ea:	80ba      	strh	r2, [r7, #4]
 80121ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80121f0:	10db      	asrs	r3, r3, #3
 80121f2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80121f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80121fe:	4313      	orrs	r3, r2
 8012200:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8012204:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8012208:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801220c:	1a9b      	subs	r3, r3, r2
 801220e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8012212:	e768      	b.n	80120e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012214:	f023 0204 	bic.w	r2, r3, #4
 8012218:	f640 611b 	movw	r1, #3611	; 0xe1b
 801221c:	428a      	cmp	r2, r1
 801221e:	d003      	beq.n	8012228 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8012220:	f640 621d 	movw	r2, #3613	; 0xe1d
 8012224:	4293      	cmp	r3, r2
 8012226:	d120      	bne.n	801226a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8012228:	3b01      	subs	r3, #1
 801222a:	4602      	mov	r2, r0
 801222c:	4629      	mov	r1, r5
 801222e:	4620      	mov	r0, r4
 8012230:	b29b      	uxth	r3, r3
 8012232:	f7ff ff41 	bl	80120b8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012236:	7b41      	ldrb	r1, [r0, #13]
 8012238:	00cb      	lsls	r3, r1, #3
 801223a:	0649      	lsls	r1, r1, #25
 801223c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012240:	7a03      	ldrb	r3, [r0, #8]
 8012242:	ea43 0302 	orr.w	r3, r3, r2
 8012246:	bf44      	itt	mi
 8012248:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801224c:	b21b      	sxthmi	r3, r3
 801224e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012252:	7b6b      	ldrb	r3, [r5, #13]
 8012254:	7aaa      	ldrb	r2, [r5, #10]
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801225c:	4313      	orrs	r3, r2
 801225e:	115a      	asrs	r2, r3, #5
 8012260:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8012264:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8012268:	e035      	b.n	80122d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801226a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801226e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8012272:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8012276:	7a2a      	ldrb	r2, [r5, #8]
 8012278:	ea42 0201 	orr.w	r2, r2, r1
 801227c:	f640 6109 	movw	r1, #3593	; 0xe09
 8012280:	bf1c      	itt	ne
 8012282:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8012286:	b212      	sxthne	r2, r2
 8012288:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801228c:	f023 0210 	bic.w	r2, r3, #16
 8012290:	428a      	cmp	r2, r1
 8012292:	d003      	beq.n	801229c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8012294:	f640 6213 	movw	r2, #3603	; 0xe13
 8012298:	4293      	cmp	r3, r2
 801229a:	d129      	bne.n	80122f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801229c:	7b6e      	ldrb	r6, [r5, #13]
 801229e:	4629      	mov	r1, r5
 80122a0:	0076      	lsls	r6, r6, #1
 80122a2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80122a6:	7aae      	ldrb	r6, [r5, #10]
 80122a8:	4316      	orrs	r6, r2
 80122aa:	f640 6213 	movw	r2, #3603	; 0xe13
 80122ae:	4293      	cmp	r3, r2
 80122b0:	4602      	mov	r2, r0
 80122b2:	4620      	mov	r0, r4
 80122b4:	bf16      	itet	ne
 80122b6:	f103 33ff 	addne.w	r3, r3, #4294967295
 80122ba:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80122be:	b29b      	uxthne	r3, r3
 80122c0:	f7ff fefa 	bl	80120b8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80122c4:	7b43      	ldrb	r3, [r0, #13]
 80122c6:	7a82      	ldrb	r2, [r0, #10]
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122ce:	4313      	orrs	r3, r2
 80122d0:	1af6      	subs	r6, r6, r3
 80122d2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80122d6:	7b69      	ldrb	r1, [r5, #13]
 80122d8:	00cb      	lsls	r3, r1, #3
 80122da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80122de:	7a2b      	ldrb	r3, [r5, #8]
 80122e0:	4313      	orrs	r3, r2
 80122e2:	064a      	lsls	r2, r1, #25
 80122e4:	bf44      	itt	mi
 80122e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80122ea:	b21b      	sxthmi	r3, r3
 80122ec:	1bdb      	subs	r3, r3, r7
 80122ee:	e73f      	b.n	8012170 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 80122f0:	2300      	movs	r3, #0
 80122f2:	e7b7      	b.n	8012264 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 80122f4:	3fc00079 	.word	0x3fc00079
 80122f8:	0801e32c 	.word	0x0801e32c
 80122fc:	0801fd73 	.word	0x0801fd73
 8012300:	0801e3fe 	.word	0x0801e3fe

08012304 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012308:	4604      	mov	r4, r0
 801230a:	b942      	cbnz	r2, 801231e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801230c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012310:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8012314:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012318:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801231c:	e046      	b.n	80123ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801231e:	7b51      	ldrb	r1, [r2, #13]
 8012320:	8893      	ldrh	r3, [r2, #4]
 8012322:	010f      	lsls	r7, r1, #4
 8012324:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8012328:	79d7      	ldrb	r7, [r2, #7]
 801232a:	4307      	orrs	r7, r0
 801232c:	2f04      	cmp	r7, #4
 801232e:	b2bd      	uxth	r5, r7
 8012330:	bfcc      	ite	gt
 8012332:	08bf      	lsrgt	r7, r7, #2
 8012334:	2701      	movle	r7, #1
 8012336:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801233a:	f200 80ab 	bhi.w	8012494 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801233e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8012342:	4283      	cmp	r3, r0
 8012344:	d216      	bcs.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012346:	f240 605b 	movw	r0, #1627	; 0x65b
 801234a:	4283      	cmp	r3, r0
 801234c:	d859      	bhi.n	8012402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801234e:	f240 6057 	movw	r0, #1623	; 0x657
 8012352:	4283      	cmp	r3, r0
 8012354:	d20e      	bcs.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012356:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801235a:	d24a      	bcs.n	80123f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801235c:	f240 604e 	movw	r0, #1614	; 0x64e
 8012360:	4283      	cmp	r3, r0
 8012362:	d207      	bcs.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012364:	f240 601a 	movw	r0, #1562	; 0x61a
 8012368:	4283      	cmp	r3, r0
 801236a:	d02a      	beq.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801236c:	d821      	bhi.n	80123b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801236e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8012372:	d35b      	bcc.n	801242c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012374:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8012378:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801237c:	f040 80d0 	bne.w	8012520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012380:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8012384:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012388:	f040 80ca 	bne.w	8012520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801238c:	00cb      	lsls	r3, r1, #3
 801238e:	0649      	lsls	r1, r1, #25
 8012390:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012394:	7a13      	ldrb	r3, [r2, #8]
 8012396:	ea43 0300 	orr.w	r3, r3, r0
 801239a:	bf44      	itt	mi
 801239c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123a0:	b21b      	sxthmi	r3, r3
 80123a2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80123a6:	1b5d      	subs	r5, r3, r5
 80123a8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80123ac:	4610      	mov	r0, r2
 80123ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123b2:	f240 604b 	movw	r0, #1611	; 0x64b
 80123b6:	4283      	cmp	r3, r0
 80123b8:	d338      	bcc.n	801242c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80123ba:	f240 604c 	movw	r0, #1612	; 0x64c
 80123be:	4283      	cmp	r3, r0
 80123c0:	d9d8      	bls.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123c2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80123c6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80123ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80123ce:	f040 80f2 	bne.w	80125b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80123d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80123d6:	f040 80ee 	bne.w	80125b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80123da:	00cb      	lsls	r3, r1, #3
 80123dc:	064e      	lsls	r6, r1, #25
 80123de:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80123e2:	7a13      	ldrb	r3, [r2, #8]
 80123e4:	ea43 0300 	orr.w	r3, r3, r0
 80123e8:	bf44      	itt	mi
 80123ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123ee:	b21b      	sxthmi	r3, r3
 80123f0:	e7d9      	b.n	80123a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 80123f2:	f240 6054 	movw	r0, #1620	; 0x654
 80123f6:	4283      	cmp	r3, r0
 80123f8:	d8e3      	bhi.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80123fa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80123fe:	d9e0      	bls.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012400:	e7b8      	b.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012402:	f240 6074 	movw	r0, #1652	; 0x674
 8012406:	4283      	cmp	r3, r0
 8012408:	d0b4      	beq.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801240a:	d82d      	bhi.n	8012468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801240c:	f240 605e 	movw	r0, #1630	; 0x65e
 8012410:	4283      	cmp	r3, r0
 8012412:	d804      	bhi.n	801241e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8012414:	f240 605d 	movw	r0, #1629	; 0x65d
 8012418:	4283      	cmp	r3, r0
 801241a:	d3d2      	bcc.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801241c:	e7aa      	b.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801241e:	f240 605f 	movw	r0, #1631	; 0x65f
 8012422:	4283      	cmp	r3, r0
 8012424:	d0cd      	beq.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012426:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801242a:	d0a3      	beq.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801242c:	00cb      	lsls	r3, r1, #3
 801242e:	0649      	lsls	r1, r1, #25
 8012430:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012434:	7a13      	ldrb	r3, [r2, #8]
 8012436:	ea43 0300 	orr.w	r3, r3, r0
 801243a:	bf44      	itt	mi
 801243c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012440:	b21b      	sxthmi	r3, r3
 8012442:	1b5d      	subs	r5, r3, r5
 8012444:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012448:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801244c:	7b53      	ldrb	r3, [r2, #13]
 801244e:	015b      	lsls	r3, r3, #5
 8012450:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012454:	7993      	ldrb	r3, [r2, #6]
 8012456:	430b      	orrs	r3, r1
 8012458:	2105      	movs	r1, #5
 801245a:	005b      	lsls	r3, r3, #1
 801245c:	fb93 f3f1 	sdiv	r3, r3, r1
 8012460:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8012464:	440b      	add	r3, r1
 8012466:	e757      	b.n	8012318 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8012468:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801246c:	4283      	cmp	r3, r0
 801246e:	d809      	bhi.n	8012484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8012470:	f240 60df 	movw	r0, #1759	; 0x6df
 8012474:	4283      	cmp	r3, r0
 8012476:	f4bf af7d 	bcs.w	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801247a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801247e:	2b05      	cmp	r3, #5
 8012480:	d8d4      	bhi.n	801242c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012482:	e777      	b.n	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012484:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8012488:	4283      	cmp	r3, r0
 801248a:	d09a      	beq.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801248c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012490:	4283      	cmp	r3, r0
 8012492:	e7ca      	b.n	801242a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8012494:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8012498:	d22b      	bcs.n	80124f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801249a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801249e:	4283      	cmp	r3, r0
 80124a0:	d28f      	bcs.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80124a2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80124a6:	4283      	cmp	r3, r0
 80124a8:	d816      	bhi.n	80124d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 80124aa:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80124ae:	4283      	cmp	r3, r0
 80124b0:	f4bf af60 	bcs.w	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80124b4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80124b8:	4283      	cmp	r3, r0
 80124ba:	d80a      	bhi.n	80124d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 80124bc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80124c0:	4283      	cmp	r3, r0
 80124c2:	f4bf af57 	bcs.w	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80124c6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80124ca:	4283      	cmp	r3, r0
 80124cc:	f43f af79 	beq.w	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80124d0:	e7ac      	b.n	801242c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80124d2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80124d6:	e7f8      	b.n	80124ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 80124d8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80124dc:	4283      	cmp	r3, r0
 80124de:	d802      	bhi.n	80124e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 80124e0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80124e4:	e798      	b.n	8012418 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 80124e6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80124ea:	4283      	cmp	r3, r0
 80124ec:	f47f af42 	bne.w	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80124f0:	e767      	b.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80124f2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80124f6:	4283      	cmp	r3, r0
 80124f8:	f43f af63 	beq.w	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80124fc:	d802      	bhi.n	8012504 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 80124fe:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012502:	e7f2      	b.n	80124ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8012504:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8012508:	4283      	cmp	r3, r0
 801250a:	d805      	bhi.n	8012518 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801250c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8012510:	4283      	cmp	r3, r0
 8012512:	f4ff af2f 	bcc.w	8012374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012516:	e754      	b.n	80123c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012518:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801251c:	4283      	cmp	r3, r0
 801251e:	e7af      	b.n	8012480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8012520:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8012524:	4617      	mov	r7, r2
 8012526:	f102 0808 	add.w	r8, r2, #8
 801252a:	4666      	mov	r6, ip
 801252c:	6838      	ldr	r0, [r7, #0]
 801252e:	3708      	adds	r7, #8
 8012530:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8012534:	46e6      	mov	lr, ip
 8012536:	4547      	cmp	r7, r8
 8012538:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801253c:	46f4      	mov	ip, lr
 801253e:	d1f5      	bne.n	801252c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8012540:	6838      	ldr	r0, [r7, #0]
 8012542:	f8ce 0000 	str.w	r0, [lr]
 8012546:	88b9      	ldrh	r1, [r7, #4]
 8012548:	f8ae 1004 	strh.w	r1, [lr, #4]
 801254c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8012550:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012554:	d009      	beq.n	801256a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8012556:	7b51      	ldrb	r1, [r2, #13]
 8012558:	7992      	ldrb	r2, [r2, #6]
 801255a:	0149      	lsls	r1, r1, #5
 801255c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012560:	4311      	orrs	r1, r2
 8012562:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012566:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801256a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801256e:	d00d      	beq.n	801258c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8012570:	442b      	add	r3, r5
 8012572:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012576:	b29b      	uxth	r3, r3
 8012578:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801257c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012580:	10db      	asrs	r3, r3, #3
 8012582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012586:	4313      	orrs	r3, r2
 8012588:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801258c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012590:	00cb      	lsls	r3, r1, #3
 8012592:	064f      	lsls	r7, r1, #25
 8012594:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012598:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801259c:	ea43 0302 	orr.w	r3, r3, r2
 80125a0:	bf44      	itt	mi
 80125a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80125a6:	b21b      	sxthmi	r3, r3
 80125a8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80125ac:	1b5d      	subs	r5, r3, r5
 80125ae:	4632      	mov	r2, r6
 80125b0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80125b4:	e6fa      	b.n	80123ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80125b6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80125ba:	4694      	mov	ip, r2
 80125bc:	f102 0908 	add.w	r9, r2, #8
 80125c0:	4676      	mov	r6, lr
 80125c2:	f8dc 0000 	ldr.w	r0, [ip]
 80125c6:	f10c 0c08 	add.w	ip, ip, #8
 80125ca:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80125ce:	46f0      	mov	r8, lr
 80125d0:	45cc      	cmp	ip, r9
 80125d2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80125d6:	46c6      	mov	lr, r8
 80125d8:	d1f3      	bne.n	80125c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 80125da:	f8dc 0000 	ldr.w	r0, [ip]
 80125de:	f8c8 0000 	str.w	r0, [r8]
 80125e2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80125e6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80125ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80125ee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80125f2:	d009      	beq.n	8012608 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 80125f4:	7b51      	ldrb	r1, [r2, #13]
 80125f6:	7992      	ldrb	r2, [r2, #6]
 80125f8:	0149      	lsls	r1, r1, #5
 80125fa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80125fe:	4311      	orrs	r1, r2
 8012600:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012604:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8012608:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801260c:	d00d      	beq.n	801262a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801260e:	1bdb      	subs	r3, r3, r7
 8012610:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012614:	b29b      	uxth	r3, r3
 8012616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801261a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801261e:	10db      	asrs	r3, r3, #3
 8012620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012624:	4313      	orrs	r3, r2
 8012626:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801262a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801262e:	00cb      	lsls	r3, r1, #3
 8012630:	0648      	lsls	r0, r1, #25
 8012632:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012636:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801263a:	ea43 0302 	orr.w	r3, r3, r2
 801263e:	bf44      	itt	mi
 8012640:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012644:	b21b      	sxthmi	r3, r3
 8012646:	e7b1      	b.n	80125ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08012648 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8012648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801264c:	461e      	mov	r6, r3
 801264e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8012650:	4604      	mov	r4, r0
 8012652:	4617      	mov	r7, r2
 8012654:	b92b      	cbnz	r3, 8012662 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8012656:	4b25      	ldr	r3, [pc, #148]	; (80126ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8012658:	21c0      	movs	r1, #192	; 0xc0
 801265a:	4a25      	ldr	r2, [pc, #148]	; (80126f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801265c:	4825      	ldr	r0, [pc, #148]	; (80126f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801265e:	f009 fe6d 	bl	801c33c <__assert_func>
 8012662:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012664:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012668:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801266c:	f7f2 f8a6 	bl	80047bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012670:	4605      	mov	r5, r0
 8012672:	b918      	cbnz	r0, 801267c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8012674:	6030      	str	r0, [r6, #0]
 8012676:	4628      	mov	r0, r5
 8012678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	4601      	mov	r1, r0
 8012680:	4638      	mov	r0, r7
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	4798      	blx	r3
 8012686:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801268a:	4602      	mov	r2, r0
 801268c:	6030      	str	r0, [r6, #0]
 801268e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012692:	d213      	bcs.n	80126bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8012694:	4643      	mov	r3, r8
 8012696:	4639      	mov	r1, r7
 8012698:	4620      	mov	r0, r4
 801269a:	f7ff fe33 	bl	8012304 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801269e:	6030      	str	r0, [r6, #0]
 80126a0:	6833      	ldr	r3, [r6, #0]
 80126a2:	b143      	cbz	r3, 80126b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80126a4:	7b5a      	ldrb	r2, [r3, #13]
 80126a6:	7a9b      	ldrb	r3, [r3, #10]
 80126a8:	0052      	lsls	r2, r2, #1
 80126aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80126ae:	4313      	orrs	r3, r2
 80126b0:	bf0c      	ite	eq
 80126b2:	2301      	moveq	r3, #1
 80126b4:	2300      	movne	r3, #0
 80126b6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80126ba:	e7dc      	b.n	8012676 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80126bc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	2b7f      	cmp	r3, #127	; 0x7f
 80126c4:	d804      	bhi.n	80126d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80126c6:	4639      	mov	r1, r7
 80126c8:	4620      	mov	r0, r4
 80126ca:	f7ff fd01 	bl	80120d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80126ce:	e7e6      	b.n	801269e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80126d0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d0e3      	beq.n	80126a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80126d8:	f640 1302 	movw	r3, #2306	; 0x902
 80126dc:	429d      	cmp	r5, r3
 80126de:	d1df      	bne.n	80126a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80126e0:	4601      	mov	r1, r0
 80126e2:	4620      	mov	r0, r4
 80126e4:	f7ff fcc4 	bl	8012070 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80126e8:	e7d9      	b.n	801269e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80126ea:	bf00      	nop
 80126ec:	0801e32c 	.word	0x0801e32c
 80126f0:	0801fd73 	.word	0x0801fd73
 80126f4:	0801e3fe 	.word	0x0801e3fe

080126f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80126f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126fc:	461e      	mov	r6, r3
 80126fe:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8012700:	4604      	mov	r4, r0
 8012702:	4617      	mov	r7, r2
 8012704:	b92b      	cbnz	r3, 8012712 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8012706:	4b26      	ldr	r3, [pc, #152]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8012708:	21c0      	movs	r1, #192	; 0xc0
 801270a:	4a26      	ldr	r2, [pc, #152]	; (80127a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801270c:	4826      	ldr	r0, [pc, #152]	; (80127a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801270e:	f009 fe15 	bl	801c33c <__assert_func>
 8012712:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012714:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012718:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801271c:	f7f2 f84e 	bl	80047bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012720:	4605      	mov	r5, r0
 8012722:	b918      	cbnz	r0, 801272c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8012724:	6030      	str	r0, [r6, #0]
 8012726:	4628      	mov	r0, r5
 8012728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	4601      	mov	r1, r0
 8012730:	4638      	mov	r0, r7
 8012732:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8012736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801273a:	47c8      	blx	r9
 801273c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8012740:	4602      	mov	r2, r0
 8012742:	6030      	str	r0, [r6, #0]
 8012744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012748:	d213      	bcs.n	8012772 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801274a:	4643      	mov	r3, r8
 801274c:	4639      	mov	r1, r7
 801274e:	4620      	mov	r0, r4
 8012750:	f7ff fdd8 	bl	8012304 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012754:	6030      	str	r0, [r6, #0]
 8012756:	6833      	ldr	r3, [r6, #0]
 8012758:	b143      	cbz	r3, 801276c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801275a:	7b5a      	ldrb	r2, [r3, #13]
 801275c:	7a9b      	ldrb	r3, [r3, #10]
 801275e:	0052      	lsls	r2, r2, #1
 8012760:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012764:	4313      	orrs	r3, r2
 8012766:	bf0c      	ite	eq
 8012768:	2301      	moveq	r3, #1
 801276a:	2300      	movne	r3, #0
 801276c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8012770:	e7d9      	b.n	8012726 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8012772:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012776:	b29b      	uxth	r3, r3
 8012778:	2b7f      	cmp	r3, #127	; 0x7f
 801277a:	d804      	bhi.n	8012786 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801277c:	4639      	mov	r1, r7
 801277e:	4620      	mov	r0, r4
 8012780:	f7ff fca6 	bl	80120d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012784:	e7e6      	b.n	8012754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8012786:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801278a:	2b00      	cmp	r3, #0
 801278c:	d0e3      	beq.n	8012756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801278e:	f640 1302 	movw	r3, #2306	; 0x902
 8012792:	429d      	cmp	r5, r3
 8012794:	d1df      	bne.n	8012756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8012796:	4601      	mov	r1, r0
 8012798:	4620      	mov	r0, r4
 801279a:	f7ff fc69 	bl	8012070 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801279e:	e7d9      	b.n	8012754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80127a0:	0801e32c 	.word	0x0801e32c
 80127a4:	0801fd73 	.word	0x0801fd73
 80127a8:	0801e3fe 	.word	0x0801e3fe

080127ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80127ac:	b510      	push	{r4, lr}
 80127ae:	4604      	mov	r4, r0
 80127b0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80127b4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80127b6:	b9d9      	cbnz	r1, 80127f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80127b8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80127ba:	2b0a      	cmp	r3, #10
 80127bc:	d037      	beq.n	801282e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80127be:	4620      	mov	r0, r4
 80127c0:	f7ff fc15 	bl	8011fee <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80127c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80127c6:	2b09      	cmp	r3, #9
 80127c8:	d906      	bls.n	80127d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80127ca:	4b19      	ldr	r3, [pc, #100]	; (8012830 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80127cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80127d0:	4a18      	ldr	r2, [pc, #96]	; (8012834 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80127d2:	4819      	ldr	r0, [pc, #100]	; (8012838 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80127d4:	f009 fdb2 	bl	801c33c <__assert_func>
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	8722      	strh	r2, [r4, #56]	; 0x38
 80127dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80127de:	4413      	add	r3, r2
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	2b09      	cmp	r3, #9
 80127e4:	bf88      	it	hi
 80127e6:	3b0a      	subhi	r3, #10
 80127e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80127ec:	8458      	strh	r0, [r3, #34]	; 0x22
 80127ee:	e7e3      	b.n	80127b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80127f0:	2b0a      	cmp	r3, #10
 80127f2:	d01c      	beq.n	801282e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80127f4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80127f6:	3901      	subs	r1, #1
 80127f8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80127fc:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80127fe:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8012802:	1c51      	adds	r1, r2, #1
 8012804:	b289      	uxth	r1, r1
 8012806:	2901      	cmp	r1, #1
 8012808:	bf8a      	itet	hi
 801280a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801280e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8012810:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8012812:	2b09      	cmp	r3, #9
 8012814:	d8d9      	bhi.n	80127ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8012816:	1c5a      	adds	r2, r3, #1
 8012818:	8722      	strh	r2, [r4, #56]	; 0x38
 801281a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801281c:	4413      	add	r3, r2
 801281e:	b29b      	uxth	r3, r3
 8012820:	2b09      	cmp	r3, #9
 8012822:	bf88      	it	hi
 8012824:	3b0a      	subhi	r3, #10
 8012826:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801282a:	8458      	strh	r0, [r3, #34]	; 0x22
 801282c:	e7c0      	b.n	80127b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801282e:	bd10      	pop	{r4, pc}
 8012830:	0801fb44 	.word	0x0801fb44
 8012834:	0801fec9 	.word	0x0801fec9
 8012838:	0801e3fe 	.word	0x0801e3fe

0801283c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801283c:	b538      	push	{r3, r4, r5, lr}
 801283e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8012840:	4604      	mov	r4, r0
 8012842:	b92a      	cbnz	r2, 8012850 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8012844:	4b13      	ldr	r3, [pc, #76]	; (8012894 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8012846:	21d5      	movs	r1, #213	; 0xd5
 8012848:	4a13      	ldr	r2, [pc, #76]	; (8012898 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801284a:	4814      	ldr	r0, [pc, #80]	; (801289c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801284c:	f009 fd76 	bl	801c33c <__assert_func>
 8012850:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012852:	3a01      	subs	r2, #1
 8012854:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8012858:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801285a:	8702      	strh	r2, [r0, #56]	; 0x38
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	b292      	uxth	r2, r2
 8012860:	2a09      	cmp	r2, #9
 8012862:	bf8a      	itet	hi
 8012864:	3b09      	subhi	r3, #9
 8012866:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8012868:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801286a:	f7ff ff9f 	bl	80127ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801286e:	8c23      	ldrh	r3, [r4, #32]
 8012870:	2b01      	cmp	r3, #1
 8012872:	bf9c      	itt	ls
 8012874:	3301      	addls	r3, #1
 8012876:	8423      	strhls	r3, [r4, #32]
 8012878:	8be3      	ldrh	r3, [r4, #30]
 801287a:	b90b      	cbnz	r3, 8012880 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801287c:	2302      	movs	r3, #2
 801287e:	83e3      	strh	r3, [r4, #30]
 8012880:	8be3      	ldrh	r3, [r4, #30]
 8012882:	4628      	mov	r0, r5
 8012884:	3b01      	subs	r3, #1
 8012886:	b29b      	uxth	r3, r3
 8012888:	83e3      	strh	r3, [r4, #30]
 801288a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801288e:	8365      	strh	r5, [r4, #26]
 8012890:	bd38      	pop	{r3, r4, r5, pc}
 8012892:	bf00      	nop
 8012894:	0801e32c 	.word	0x0801e32c
 8012898:	0801fe1e 	.word	0x0801fe1e
 801289c:	0801e3fe 	.word	0x0801e3fe

080128a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80128a0:	428a      	cmp	r2, r1
 80128a2:	b538      	push	{r3, r4, r5, lr}
 80128a4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80128a6:	d90c      	bls.n	80128c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80128a8:	b92c      	cbnz	r4, 80128b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80128aa:	4b1c      	ldr	r3, [pc, #112]	; (801291c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80128ac:	21e1      	movs	r1, #225	; 0xe1
 80128ae:	4a1c      	ldr	r2, [pc, #112]	; (8012920 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80128b0:	481c      	ldr	r0, [pc, #112]	; (8012924 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80128b2:	f009 fd43 	bl	801c33c <__assert_func>
 80128b6:	3c01      	subs	r4, #1
 80128b8:	4b1b      	ldr	r3, [pc, #108]	; (8012928 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80128ba:	4a1c      	ldr	r2, [pc, #112]	; (801292c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80128bc:	21c5      	movs	r1, #197	; 0xc5
 80128be:	8704      	strh	r4, [r0, #56]	; 0x38
 80128c0:	e7f6      	b.n	80128b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80128c2:	428c      	cmp	r4, r1
 80128c4:	d203      	bcs.n	80128ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80128c6:	4b1a      	ldr	r3, [pc, #104]	; (8012930 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80128c8:	21cb      	movs	r1, #203	; 0xcb
 80128ca:	4a1a      	ldr	r2, [pc, #104]	; (8012934 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80128cc:	e7f0      	b.n	80128b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80128ce:	1a64      	subs	r4, r4, r1
 80128d0:	250a      	movs	r5, #10
 80128d2:	8704      	strh	r4, [r0, #56]	; 0x38
 80128d4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80128d6:	4421      	add	r1, r4
 80128d8:	b289      	uxth	r1, r1
 80128da:	2909      	cmp	r1, #9
 80128dc:	bf88      	it	hi
 80128de:	390a      	subhi	r1, #10
 80128e0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80128e2:	b1ba      	cbz	r2, 8012914 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80128e4:	3a01      	subs	r2, #1
 80128e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80128e8:	b292      	uxth	r2, r2
 80128ea:	2909      	cmp	r1, #9
 80128ec:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80128f0:	d903      	bls.n	80128fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80128f2:	4b11      	ldr	r3, [pc, #68]	; (8012938 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80128f4:	21e6      	movs	r1, #230	; 0xe6
 80128f6:	4a11      	ldr	r2, [pc, #68]	; (801293c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80128f8:	e7da      	b.n	80128b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80128fa:	3101      	adds	r1, #1
 80128fc:	8701      	strh	r1, [r0, #56]	; 0x38
 80128fe:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012900:	b901      	cbnz	r1, 8012904 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8012902:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012904:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012906:	3901      	subs	r1, #1
 8012908:	b289      	uxth	r1, r1
 801290a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801290c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012910:	844c      	strh	r4, [r1, #34]	; 0x22
 8012912:	e7e6      	b.n	80128e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8012914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012918:	f7ff bf48 	b.w	80127ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801291c:	0801e32c 	.word	0x0801e32c
 8012920:	0801fbf7 	.word	0x0801fbf7
 8012924:	0801e3fe 	.word	0x0801e3fe
 8012928:	0801e42a 	.word	0x0801e42a
 801292c:	0801fca1 	.word	0x0801fca1
 8012930:	0801fb50 	.word	0x0801fb50
 8012934:	0801ff78 	.word	0x0801ff78
 8012938:	0801fb5c 	.word	0x0801fb5c
 801293c:	0801fb6f 	.word	0x0801fb6f

08012940 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012940:	3a01      	subs	r2, #1
 8012942:	b570      	push	{r4, r5, r6, lr}
 8012944:	b292      	uxth	r2, r2
 8012946:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801294a:	42b2      	cmp	r2, r6
 801294c:	d019      	beq.n	8012982 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801294e:	8c04      	ldrh	r4, [r0, #32]
 8012950:	f831 5b02 	ldrh.w	r5, [r1], #2
 8012954:	4294      	cmp	r4, r2
 8012956:	d805      	bhi.n	8012964 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8012958:	4b19      	ldr	r3, [pc, #100]	; (80129c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801295a:	4a1a      	ldr	r2, [pc, #104]	; (80129c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801295c:	21c5      	movs	r1, #197	; 0xc5
 801295e:	481a      	ldr	r0, [pc, #104]	; (80129c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8012960:	f009 fcec 	bl	801c33c <__assert_func>
 8012964:	8bc4      	ldrh	r4, [r0, #30]
 8012966:	4414      	add	r4, r2
 8012968:	3a01      	subs	r2, #1
 801296a:	b2a4      	uxth	r4, r4
 801296c:	b292      	uxth	r2, r2
 801296e:	2c01      	cmp	r4, #1
 8012970:	bf88      	it	hi
 8012972:	3c02      	subhi	r4, #2
 8012974:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012978:	8b64      	ldrh	r4, [r4, #26]
 801297a:	42ac      	cmp	r4, r5
 801297c:	d0e5      	beq.n	801294a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801297e:	2000      	movs	r0, #0
 8012980:	bd70      	pop	{r4, r5, r6, pc}
 8012982:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012986:	2400      	movs	r4, #0
 8012988:	4413      	add	r3, r2
 801298a:	b2a2      	uxth	r2, r4
 801298c:	429a      	cmp	r2, r3
 801298e:	da14      	bge.n	80129ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8012990:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8012992:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012996:	4296      	cmp	r6, r2
 8012998:	d802      	bhi.n	80129a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801299a:	4b09      	ldr	r3, [pc, #36]	; (80129c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801299c:	4a0b      	ldr	r2, [pc, #44]	; (80129cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801299e:	e7dd      	b.n	801295c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80129a0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80129a2:	3401      	adds	r4, #1
 80129a4:	4432      	add	r2, r6
 80129a6:	b292      	uxth	r2, r2
 80129a8:	2a09      	cmp	r2, #9
 80129aa:	bf88      	it	hi
 80129ac:	3a0a      	subhi	r2, #10
 80129ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80129b2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80129b4:	42aa      	cmp	r2, r5
 80129b6:	d0e8      	beq.n	801298a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80129b8:	e7e1      	b.n	801297e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80129ba:	2001      	movs	r0, #1
 80129bc:	e7e0      	b.n	8012980 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80129be:	bf00      	nop
 80129c0:	0801e42a 	.word	0x0801e42a
 80129c4:	0801fffc 	.word	0x0801fffc
 80129c8:	0801e3fe 	.word	0x0801e3fe
 80129cc:	0801fca1 	.word	0x0801fca1

080129d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80129d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d4:	4605      	mov	r5, r0
 80129d6:	4616      	mov	r6, r2
 80129d8:	1c8c      	adds	r4, r1, #2
 80129da:	8809      	ldrh	r1, [r1, #0]
 80129dc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80129e0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80129e4:	42b3      	cmp	r3, r6
 80129e6:	d124      	bne.n	8012a32 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80129e8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80129ec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80129f0:	f001 070f 	and.w	r7, r1, #15
 80129f4:	4652      	mov	r2, sl
 80129f6:	f8cd 8000 	str.w	r8, [sp]
 80129fa:	464b      	mov	r3, r9
 80129fc:	4621      	mov	r1, r4
 80129fe:	4628      	mov	r0, r5
 8012a00:	f7ff ff9e 	bl	8012940 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012a04:	4683      	mov	fp, r0
 8012a06:	b168      	cbz	r0, 8012a24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8012a08:	eb0a 0109 	add.w	r1, sl, r9
 8012a0c:	463a      	mov	r2, r7
 8012a0e:	4628      	mov	r0, r5
 8012a10:	4441      	add	r1, r8
 8012a12:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012a16:	4649      	mov	r1, r9
 8012a18:	f7ff ff42 	bl	80128a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8012a1c:	4658      	mov	r0, fp
 8012a1e:	b003      	add	sp, #12
 8012a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a24:	eb07 010a 	add.w	r1, r7, sl
 8012a28:	4449      	add	r1, r9
 8012a2a:	4441      	add	r1, r8
 8012a2c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012a30:	e7d2      	b.n	80129d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012a32:	f04f 0b00 	mov.w	fp, #0
 8012a36:	e7f1      	b.n	8012a1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012a38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012a38:	b570      	push	{r4, r5, r6, lr}
 8012a3a:	8810      	ldrh	r0, [r2, #0]
 8012a3c:	4298      	cmp	r0, r3
 8012a3e:	d817      	bhi.n	8012a70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012a40:	1e48      	subs	r0, r1, #1
 8012a42:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012a46:	4298      	cmp	r0, r3
 8012a48:	d312      	bcc.n	8012a70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012a4a:	2400      	movs	r4, #0
 8012a4c:	428c      	cmp	r4, r1
 8012a4e:	d20f      	bcs.n	8012a70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012a50:	1860      	adds	r0, r4, r1
 8012a52:	1040      	asrs	r0, r0, #1
 8012a54:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012a58:	0085      	lsls	r5, r0, #2
 8012a5a:	42b3      	cmp	r3, r6
 8012a5c:	d902      	bls.n	8012a64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8012a5e:	3001      	adds	r0, #1
 8012a60:	b284      	uxth	r4, r0
 8012a62:	e7f3      	b.n	8012a4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012a64:	d201      	bcs.n	8012a6a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012a66:	b281      	uxth	r1, r0
 8012a68:	e7f0      	b.n	8012a4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012a6a:	442a      	add	r2, r5
 8012a6c:	8850      	ldrh	r0, [r2, #2]
 8012a6e:	bd70      	pop	{r4, r5, r6, pc}
 8012a70:	2000      	movs	r0, #0
 8012a72:	e7fc      	b.n	8012a6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012a74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a78:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	260b      	movs	r6, #11
 8012a7e:	886f      	ldrh	r7, [r5, #2]
 8012a80:	087f      	lsrs	r7, r7, #1
 8012a82:	3e01      	subs	r6, #1
 8012a84:	d01b      	beq.n	8012abe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012a86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012a88:	b92b      	cbnz	r3, 8012a96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8012a8a:	4b0e      	ldr	r3, [pc, #56]	; (8012ac4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8012a8c:	21c0      	movs	r1, #192	; 0xc0
 8012a8e:	4a0e      	ldr	r2, [pc, #56]	; (8012ac8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8012a90:	480e      	ldr	r0, [pc, #56]	; (8012acc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8012a92:	f009 fc53 	bl	801c33c <__assert_func>
 8012a96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012a98:	462a      	mov	r2, r5
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012aa2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012aa6:	4643      	mov	r3, r8
 8012aa8:	f7ff ffc6 	bl	8012a38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012aac:	b138      	cbz	r0, 8012abe <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012aae:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012ab2:	4642      	mov	r2, r8
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f7ff ff8b 	bl	80129d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d1e1      	bne.n	8012a82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac2:	bf00      	nop
 8012ac4:	0801e32c 	.word	0x0801e32c
 8012ac8:	0801fd73 	.word	0x0801fd73
 8012acc:	0801e3fe 	.word	0x0801e3fe

08012ad0 <_ZN8touchgfx8ceil28_4El>:
 8012ad0:	f110 030f 	adds.w	r3, r0, #15
 8012ad4:	d401      	bmi.n	8012ada <_ZN8touchgfx8ceil28_4El+0xa>
 8012ad6:	1118      	asrs	r0, r3, #4
 8012ad8:	4770      	bx	lr
 8012ada:	2210      	movs	r2, #16
 8012adc:	f1c0 0001 	rsb	r0, r0, #1
 8012ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ae4:	f010 000f 	ands.w	r0, r0, #15
 8012ae8:	bf18      	it	ne
 8012aea:	2001      	movne	r0, #1
 8012aec:	1a18      	subs	r0, r3, r0
 8012aee:	4770      	bx	lr

08012af0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8012af0:	2900      	cmp	r1, #0
 8012af2:	b538      	push	{r3, r4, r5, lr}
 8012af4:	dc05      	bgt.n	8012b02 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8012af6:	4b0f      	ldr	r3, [pc, #60]	; (8012b34 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8012af8:	21f7      	movs	r1, #247	; 0xf7
 8012afa:	4a0f      	ldr	r2, [pc, #60]	; (8012b38 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8012afc:	480f      	ldr	r0, [pc, #60]	; (8012b3c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8012afe:	f009 fc1d 	bl	801c33c <__assert_func>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	db06      	blt.n	8012b14 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8012b06:	fb90 f4f1 	sdiv	r4, r0, r1
 8012b0a:	fb01 0114 	mls	r1, r1, r4, r0
 8012b0e:	6014      	str	r4, [r2, #0]
 8012b10:	6019      	str	r1, [r3, #0]
 8012b12:	bd38      	pop	{r3, r4, r5, pc}
 8012b14:	4240      	negs	r0, r0
 8012b16:	fb90 f4f1 	sdiv	r4, r0, r1
 8012b1a:	4265      	negs	r5, r4
 8012b1c:	fb01 0014 	mls	r0, r1, r4, r0
 8012b20:	6015      	str	r5, [r2, #0]
 8012b22:	6018      	str	r0, [r3, #0]
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d0f4      	beq.n	8012b12 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8012b28:	6810      	ldr	r0, [r2, #0]
 8012b2a:	3801      	subs	r0, #1
 8012b2c:	6010      	str	r0, [r2, #0]
 8012b2e:	6818      	ldr	r0, [r3, #0]
 8012b30:	1a09      	subs	r1, r1, r0
 8012b32:	e7ed      	b.n	8012b10 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8012b34:	080200cd 	.word	0x080200cd
 8012b38:	0802010c 	.word	0x0802010c
 8012b3c:	080200dd 	.word	0x080200dd

08012b40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012b40:	b570      	push	{r4, r5, r6, lr}
 8012b42:	694a      	ldr	r2, [r1, #20]
 8012b44:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012b46:	684b      	ldr	r3, [r1, #4]
 8012b48:	1b54      	subs	r4, r2, r5
 8012b4a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012b4c:	f000 8106 	beq.w	8012d5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012b50:	1b9b      	subs	r3, r3, r6
 8012b52:	d003      	beq.n	8012b5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012b54:	4363      	muls	r3, r4
 8012b56:	2210      	movs	r2, #16
 8012b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b5c:	680c      	ldr	r4, [r1, #0]
 8012b5e:	698a      	ldr	r2, [r1, #24]
 8012b60:	1b65      	subs	r5, r4, r5
 8012b62:	f000 80fd 	beq.w	8012d60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012b66:	1b92      	subs	r2, r2, r6
 8012b68:	d003      	beq.n	8012b72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012b6a:	436a      	muls	r2, r5
 8012b6c:	2410      	movs	r4, #16
 8012b6e:	fb92 f2f4 	sdiv	r2, r2, r4
 8012b72:	1a9b      	subs	r3, r3, r2
 8012b74:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012d9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b7c:	460a      	mov	r2, r1
 8012b7e:	ee07 3a90 	vmov	s15, r3
 8012b82:	f100 040c 	add.w	r4, r0, #12
 8012b86:	4603      	mov	r3, r0
 8012b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b90:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012b94:	eeb1 6a43 	vneg.f32	s12, s6
 8012b98:	edd2 7a02 	vldr	s15, [r2, #8]
 8012b9c:	3214      	adds	r2, #20
 8012b9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012ba2:	ece3 6a01 	vstmia	r3!, {s13}
 8012ba6:	429c      	cmp	r4, r3
 8012ba8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8012bb4:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012bb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bbc:	edc3 7a05 	vstr	s15, [r3, #20]
 8012bc0:	d1ea      	bne.n	8012b98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012bc2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012bc4:	698b      	ldr	r3, [r1, #24]
 8012bc6:	edd0 4a02 	vldr	s9, [r0, #8]
 8012bca:	1a9b      	subs	r3, r3, r2
 8012bcc:	edd0 3a00 	vldr	s7, [r0]
 8012bd0:	edd0 6a01 	vldr	s13, [r0, #4]
 8012bd4:	ee07 3a90 	vmov	s15, r3
 8012bd8:	684b      	ldr	r3, [r1, #4]
 8012bda:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012bde:	ed90 5a05 	vldr	s10, [r0, #20]
 8012be2:	1a9b      	subs	r3, r3, r2
 8012be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012be8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012bec:	ed90 2a03 	vldr	s4, [r0, #12]
 8012bf0:	ee07 3a10 	vmov	s14, r3
 8012bf4:	edd0 5a04 	vldr	s11, [r0, #16]
 8012bf8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012bfc:	ed90 1a07 	vldr	s2, [r0, #28]
 8012c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c04:	edd0 2a06 	vldr	s5, [r0, #24]
 8012c08:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012c0c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012c10:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c14:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012c18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012c1c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012c20:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012c24:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c26:	694a      	ldr	r2, [r1, #20]
 8012c28:	1b13      	subs	r3, r2, r4
 8012c2a:	ee07 3a10 	vmov	s14, r3
 8012c2e:	680b      	ldr	r3, [r1, #0]
 8012c30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c34:	1b1b      	subs	r3, r3, r4
 8012c36:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c3a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012c3e:	ee07 3a10 	vmov	s14, r3
 8012c42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c4a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012c4e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012c52:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012c56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012c58:	698b      	ldr	r3, [r1, #24]
 8012c5a:	1a9b      	subs	r3, r3, r2
 8012c5c:	ee06 3a90 	vmov	s13, r3
 8012c60:	684b      	ldr	r3, [r1, #4]
 8012c62:	1a9b      	subs	r3, r3, r2
 8012c64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c68:	ee07 3a10 	vmov	s14, r3
 8012c6c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012c70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c74:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012c78:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c7c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012c80:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012c84:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012c88:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c8a:	694a      	ldr	r2, [r1, #20]
 8012c8c:	1b13      	subs	r3, r2, r4
 8012c8e:	ee07 3a10 	vmov	s14, r3
 8012c92:	680b      	ldr	r3, [r1, #0]
 8012c94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c98:	1b1b      	subs	r3, r3, r4
 8012c9a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c9e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012ca2:	ee07 3a10 	vmov	s14, r3
 8012ca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012caa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012cae:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012cb2:	edd0 5a08 	vldr	s11, [r0, #32]
 8012cb6:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012cba:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012cbe:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012cc2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012cc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012cc8:	698b      	ldr	r3, [r1, #24]
 8012cca:	1a9b      	subs	r3, r3, r2
 8012ccc:	ee07 3a10 	vmov	s14, r3
 8012cd0:	684b      	ldr	r3, [r1, #4]
 8012cd2:	1a9b      	subs	r3, r3, r2
 8012cd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012cd8:	ee01 3a90 	vmov	s3, r3
 8012cdc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012ce0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012ce4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012ce8:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012cec:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012cf0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012cf4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012cf8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012cfa:	694a      	ldr	r2, [r1, #20]
 8012cfc:	1b13      	subs	r3, r2, r4
 8012cfe:	ee03 3a10 	vmov	s6, r3
 8012d02:	680b      	ldr	r3, [r1, #0]
 8012d04:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012d08:	1b1b      	subs	r3, r3, r4
 8012d0a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012d0e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012d12:	ee03 3a10 	vmov	s6, r3
 8012d16:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012d1a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012d1e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012d22:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012d26:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8012d2a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8012d2e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012d32:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3a:	dd13      	ble.n	8012d64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d40:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012d44:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012d46:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	dd15      	ble.n	8012d80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d58:	6403      	str	r3, [r0, #64]	; 0x40
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}
 8012d5c:	4623      	mov	r3, r4
 8012d5e:	e6fd      	b.n	8012b5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012d60:	462a      	mov	r2, r5
 8012d62:	e706      	b.n	8012b72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012d64:	d502      	bpl.n	8012d6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012d66:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012d6a:	e7e9      	b.n	8012d40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012d6c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012d70:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012d74:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7c:	dade      	bge.n	8012d3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012d7e:	e7f2      	b.n	8012d66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012d80:	d502      	bpl.n	8012d88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012d82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012d86:	e7e7      	b.n	8012d58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012d88:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012d8c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012d90:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d98:	dadc      	bge.n	8012d54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012d9a:	e7f2      	b.n	8012d82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012d9c:	3d800000 	.word	0x3d800000

08012da0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da4:	f04f 0814 	mov.w	r8, #20
 8012da8:	4604      	mov	r4, r0
 8012daa:	4617      	mov	r7, r2
 8012dac:	460d      	mov	r5, r1
 8012dae:	fb08 f903 	mul.w	r9, r8, r3
 8012db2:	461e      	mov	r6, r3
 8012db4:	eb02 0a09 	add.w	sl, r2, r9
 8012db8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8012dbc:	f7ff fe88 	bl	8012ad0 <_ZN8touchgfx8ceil28_4El>
 8012dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dc2:	6160      	str	r0, [r4, #20]
 8012dc4:	fb08 f803 	mul.w	r8, r8, r3
 8012dc8:	9001      	str	r0, [sp, #4]
 8012dca:	eb07 0b08 	add.w	fp, r7, r8
 8012dce:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012dd2:	f7ff fe7d 	bl	8012ad0 <_ZN8touchgfx8ceil28_4El>
 8012dd6:	9a01      	ldr	r2, [sp, #4]
 8012dd8:	1a80      	subs	r0, r0, r2
 8012dda:	61a0      	str	r0, [r4, #24]
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	f000 8088 	beq.w	8012ef2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8012de2:	f857 3009 	ldr.w	r3, [r7, r9]
 8012de6:	f857 c008 	ldr.w	ip, [r7, r8]
 8012dea:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012dee:	ebac 0c03 	sub.w	ip, ip, r3
 8012df2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012df6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8012dfa:	1a40      	subs	r0, r0, r1
 8012dfc:	fb0b f202 	mul.w	r2, fp, r2
 8012e00:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8012e04:	fb0c 2211 	mls	r2, ip, r1, r2
 8012e08:	4641      	mov	r1, r8
 8012e0a:	fb00 2003 	mla	r0, r0, r3, r2
 8012e0e:	f104 0310 	add.w	r3, r4, #16
 8012e12:	4622      	mov	r2, r4
 8012e14:	3801      	subs	r0, #1
 8012e16:	4440      	add	r0, r8
 8012e18:	f7ff fe6a 	bl	8012af0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012e1c:	f104 0308 	add.w	r3, r4, #8
 8012e20:	1d22      	adds	r2, r4, #4
 8012e22:	4641      	mov	r1, r8
 8012e24:	4658      	mov	r0, fp
 8012e26:	f7ff fe63 	bl	8012af0 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012e2a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012e2e:	6962      	ldr	r2, [r4, #20]
 8012e30:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012e34:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012efc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012e38:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012e3c:	6822      	ldr	r2, [r4, #0]
 8012e3e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012e42:	ee07 3a10 	vmov	s14, r3
 8012e46:	f857 3009 	ldr.w	r3, [r7, r9]
 8012e4a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012e4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e52:	ee07 3a90 	vmov	s15, r3
 8012e56:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8012e5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e66:	edd3 6a00 	vldr	s13, [r3]
 8012e6a:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012e6e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012e72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012e76:	edc4 6a07 	vstr	s13, [r4, #28]
 8012e7a:	edd4 6a01 	vldr	s13, [r4, #4]
 8012e7e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8012e82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e86:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012e8a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012e8e:	ed84 6a08 	vstr	s12, [r4, #32]
 8012e92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012e94:	6262      	str	r2, [r4, #36]	; 0x24
 8012e96:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8012e9a:	ed93 6a03 	vldr	s12, [r3, #12]
 8012e9e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012ea2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012ea6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012eaa:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8012eae:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012eb2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8012eb6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012eba:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8012ebe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8012ec0:	6322      	str	r2, [r4, #48]	; 0x30
 8012ec2:	ed93 6a06 	vldr	s12, [r3, #24]
 8012ec6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8012eca:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012ece:	eeb0 7a46 	vmov.f32	s14, s12
 8012ed2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8012ed6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012eda:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8012ede:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8012ee2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8012ee6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012eea:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8012eee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012ef0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	b003      	add	sp, #12
 8012ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efa:	bf00      	nop
 8012efc:	3d800000 	.word	0x3d800000

08012f00 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8012f00:	4602      	mov	r2, r0
 8012f02:	b148      	cbz	r0, 8012f18 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8012f04:	2300      	movs	r3, #0
 8012f06:	b298      	uxth	r0, r3
 8012f08:	3301      	adds	r3, #1
 8012f0a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8012f0e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8012f12:	2900      	cmp	r1, #0
 8012f14:	d1f7      	bne.n	8012f06 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8012f16:	4770      	bx	lr
 8012f18:	4770      	bx	lr

08012f1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8012f1a:	b530      	push	{r4, r5, lr}
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	b159      	cbz	r1, 8012f38 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8012f20:	b148      	cbz	r0, 8012f36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012f22:	2300      	movs	r3, #0
 8012f24:	b298      	uxth	r0, r3
 8012f26:	4282      	cmp	r2, r0
 8012f28:	d905      	bls.n	8012f36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012f2a:	5ccd      	ldrb	r5, [r1, r3]
 8012f2c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8012f30:	3301      	adds	r3, #1
 8012f32:	2d00      	cmp	r5, #0
 8012f34:	d1f6      	bne.n	8012f24 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8012f36:	bd30      	pop	{r4, r5, pc}
 8012f38:	4608      	mov	r0, r1
 8012f3a:	e7fc      	b.n	8012f36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08012f3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8012f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f3e:	468c      	mov	ip, r1
 8012f40:	b08b      	sub	sp, #44	; 0x2c
 8012f42:	2100      	movs	r1, #0
 8012f44:	ae01      	add	r6, sp, #4
 8012f46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012f4a:	211f      	movs	r1, #31
 8012f4c:	fbb0 f7f3 	udiv	r7, r0, r3
 8012f50:	fb03 0517 	mls	r5, r3, r7, r0
 8012f54:	4638      	mov	r0, r7
 8012f56:	b2ec      	uxtb	r4, r5
 8012f58:	2d09      	cmp	r5, #9
 8012f5a:	bfd4      	ite	le
 8012f5c:	3430      	addle	r4, #48	; 0x30
 8012f5e:	3457      	addgt	r4, #87	; 0x57
 8012f60:	b2e4      	uxtb	r4, r4
 8012f62:	558c      	strb	r4, [r1, r6]
 8012f64:	1e4c      	subs	r4, r1, #1
 8012f66:	b92f      	cbnz	r7, 8012f74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8012f68:	4431      	add	r1, r6
 8012f6a:	4660      	mov	r0, ip
 8012f6c:	f7ff ffd5 	bl	8012f1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012f70:	b00b      	add	sp, #44	; 0x2c
 8012f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f74:	4621      	mov	r1, r4
 8012f76:	e7e9      	b.n	8012f4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08012f78 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f7a:	4607      	mov	r7, r0
 8012f7c:	b08b      	sub	sp, #44	; 0x2c
 8012f7e:	4608      	mov	r0, r1
 8012f80:	b341      	cbz	r1, 8012fd4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012f82:	1e99      	subs	r1, r3, #2
 8012f84:	2922      	cmp	r1, #34	; 0x22
 8012f86:	d825      	bhi.n	8012fd4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012f88:	2100      	movs	r1, #0
 8012f8a:	463c      	mov	r4, r7
 8012f8c:	261f      	movs	r6, #31
 8012f8e:	f10d 0c04 	add.w	ip, sp, #4
 8012f92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012f96:	1e71      	subs	r1, r6, #1
 8012f98:	fb94 fef3 	sdiv	lr, r4, r3
 8012f9c:	fb03 441e 	mls	r4, r3, lr, r4
 8012fa0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8012fa4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8012fa8:	b2ec      	uxtb	r4, r5
 8012faa:	2d09      	cmp	r5, #9
 8012fac:	bfd4      	ite	le
 8012fae:	3430      	addle	r4, #48	; 0x30
 8012fb0:	3457      	addgt	r4, #87	; 0x57
 8012fb2:	b2e4      	uxtb	r4, r4
 8012fb4:	f80c 4006 	strb.w	r4, [ip, r6]
 8012fb8:	4674      	mov	r4, lr
 8012fba:	b96c      	cbnz	r4, 8012fd8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8012fbc:	2f00      	cmp	r7, #0
 8012fbe:	da05      	bge.n	8012fcc <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8012fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8012fc2:	4419      	add	r1, r3
 8012fc4:	232d      	movs	r3, #45	; 0x2d
 8012fc6:	f801 3c24 	strb.w	r3, [r1, #-36]
 8012fca:	1eb1      	subs	r1, r6, #2
 8012fcc:	3101      	adds	r1, #1
 8012fce:	4461      	add	r1, ip
 8012fd0:	f7ff ffa3 	bl	8012f1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012fd4:	b00b      	add	sp, #44	; 0x2c
 8012fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fd8:	460e      	mov	r6, r1
 8012fda:	e7dc      	b.n	8012f96 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08012fdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8012fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe0:	b085      	sub	sp, #20
 8012fe2:	4691      	mov	r9, r2
 8012fe4:	6802      	ldr	r2, [r0, #0]
 8012fe6:	4688      	mov	r8, r1
 8012fe8:	461c      	mov	r4, r3
 8012fea:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8012fee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012ff2:	4683      	mov	fp, r0
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	9103      	str	r1, [sp, #12]
 8012ff8:	9302      	str	r3, [sp, #8]
 8012ffa:	9201      	str	r2, [sp, #4]
 8012ffc:	f7ff ff80 	bl	8012f00 <_ZN8touchgfx7Unicode6strlenEPKt>
 8013000:	f1b8 0f00 	cmp.w	r8, #0
 8013004:	bf0c      	ite	eq
 8013006:	4684      	moveq	ip, r0
 8013008:	f100 0c01 	addne.w	ip, r0, #1
 801300c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8013010:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8013014:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013016:	fa1f fc8c 	uxth.w	ip, ip
 801301a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801301c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8013020:	9903      	ldr	r1, [sp, #12]
 8013022:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013026:	d041      	beq.n	80130ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8013028:	d834      	bhi.n	8013094 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801302a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801302e:	d059      	beq.n	80130e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8013030:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8013034:	d03a      	beq.n	80130ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8013036:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801303a:	d034      	beq.n	80130a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801303c:	2400      	movs	r4, #0
 801303e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8013042:	3a01      	subs	r2, #1
 8013044:	b169      	cbz	r1, 8013062 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013046:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013048:	458c      	cmp	ip, r1
 801304a:	da09      	bge.n	8013060 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801304c:	eba1 010c 	sub.w	r1, r1, ip
 8013050:	b289      	uxth	r1, r1
 8013052:	b933      	cbnz	r3, 8013062 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013054:	2e00      	cmp	r6, #0
 8013056:	d051      	beq.n	80130fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8013058:	2800      	cmp	r0, #0
 801305a:	d04f      	beq.n	80130fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801305c:	440c      	add	r4, r1
 801305e:	b2a4      	uxth	r4, r4
 8013060:	2100      	movs	r1, #0
 8013062:	682b      	ldr	r3, [r5, #0]
 8013064:	4293      	cmp	r3, r2
 8013066:	da07      	bge.n	8013078 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8013068:	f1b8 0f00 	cmp.w	r8, #0
 801306c:	d004      	beq.n	8013078 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801306e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8013072:	682b      	ldr	r3, [r5, #0]
 8013074:	3301      	adds	r3, #1
 8013076:	602b      	str	r3, [r5, #0]
 8013078:	2730      	movs	r7, #48	; 0x30
 801307a:	2c00      	cmp	r4, #0
 801307c:	d04e      	beq.n	801311c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801307e:	682e      	ldr	r6, [r5, #0]
 8013080:	3c01      	subs	r4, #1
 8013082:	42b2      	cmp	r2, r6
 8013084:	b2a4      	uxth	r4, r4
 8013086:	dd49      	ble.n	801311c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8013088:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801308c:	682b      	ldr	r3, [r5, #0]
 801308e:	3301      	adds	r3, #1
 8013090:	602b      	str	r3, [r5, #0]
 8013092:	e7f2      	b.n	801307a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8013094:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8013098:	d01d      	beq.n	80130d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801309a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801309e:	d002      	beq.n	80130a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80130a0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80130a4:	e7c9      	b.n	801303a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80130a6:	4684      	mov	ip, r0
 80130a8:	f04f 0800 	mov.w	r8, #0
 80130ac:	2c00      	cmp	r4, #0
 80130ae:	d0c6      	beq.n	801303e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80130b0:	b947      	cbnz	r7, 80130c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80130b2:	2801      	cmp	r0, #1
 80130b4:	d106      	bne.n	80130c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80130b6:	8814      	ldrh	r4, [r2, #0]
 80130b8:	2c30      	cmp	r4, #48	; 0x30
 80130ba:	bf02      	ittt	eq
 80130bc:	3202      	addeq	r2, #2
 80130be:	4638      	moveq	r0, r7
 80130c0:	f8cb 2000 	streq.w	r2, [fp]
 80130c4:	45bc      	cmp	ip, r7
 80130c6:	da14      	bge.n	80130f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80130c8:	b2bf      	uxth	r7, r7
 80130ca:	eba7 040c 	sub.w	r4, r7, ip
 80130ce:	46bc      	mov	ip, r7
 80130d0:	b2a4      	uxth	r4, r4
 80130d2:	2600      	movs	r6, #0
 80130d4:	e7b3      	b.n	801303e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80130d6:	4684      	mov	ip, r0
 80130d8:	b16c      	cbz	r4, 80130f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80130da:	42b8      	cmp	r0, r7
 80130dc:	dd00      	ble.n	80130e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80130de:	b2b8      	uxth	r0, r7
 80130e0:	2400      	movs	r4, #0
 80130e2:	e003      	b.n	80130ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80130e4:	f04f 0c01 	mov.w	ip, #1
 80130e8:	2400      	movs	r4, #0
 80130ea:	4660      	mov	r0, ip
 80130ec:	4626      	mov	r6, r4
 80130ee:	46a0      	mov	r8, r4
 80130f0:	e7a5      	b.n	801303e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80130f2:	2400      	movs	r4, #0
 80130f4:	e7ed      	b.n	80130d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80130f6:	4626      	mov	r6, r4
 80130f8:	46a0      	mov	r8, r4
 80130fa:	e7a0      	b.n	801303e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80130fc:	2900      	cmp	r1, #0
 80130fe:	d0b0      	beq.n	8013062 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013100:	2720      	movs	r7, #32
 8013102:	682e      	ldr	r6, [r5, #0]
 8013104:	2900      	cmp	r1, #0
 8013106:	d0ac      	beq.n	8013062 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013108:	3901      	subs	r1, #1
 801310a:	4296      	cmp	r6, r2
 801310c:	b289      	uxth	r1, r1
 801310e:	daa7      	bge.n	8013060 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8013110:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8013114:	682b      	ldr	r3, [r5, #0]
 8013116:	3301      	adds	r3, #1
 8013118:	602b      	str	r3, [r5, #0]
 801311a:	e7f2      	b.n	8013102 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801311c:	b188      	cbz	r0, 8013142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801311e:	682b      	ldr	r3, [r5, #0]
 8013120:	3801      	subs	r0, #1
 8013122:	429a      	cmp	r2, r3
 8013124:	b280      	uxth	r0, r0
 8013126:	dd0c      	ble.n	8013142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8013128:	f8db 3000 	ldr.w	r3, [fp]
 801312c:	1c9c      	adds	r4, r3, #2
 801312e:	f8cb 4000 	str.w	r4, [fp]
 8013132:	881c      	ldrh	r4, [r3, #0]
 8013134:	682b      	ldr	r3, [r5, #0]
 8013136:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801313a:	682b      	ldr	r3, [r5, #0]
 801313c:	3301      	adds	r3, #1
 801313e:	602b      	str	r3, [r5, #0]
 8013140:	e7ec      	b.n	801311c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8013142:	2620      	movs	r6, #32
 8013144:	b151      	cbz	r1, 801315c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8013146:	6828      	ldr	r0, [r5, #0]
 8013148:	3901      	subs	r1, #1
 801314a:	4282      	cmp	r2, r0
 801314c:	b289      	uxth	r1, r1
 801314e:	dd05      	ble.n	801315c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8013150:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8013154:	682b      	ldr	r3, [r5, #0]
 8013156:	3301      	adds	r3, #1
 8013158:	602b      	str	r3, [r5, #0]
 801315a:	e7f3      	b.n	8013144 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801315c:	b005      	add	sp, #20
 801315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8013162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013166:	2400      	movs	r4, #0
 8013168:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801316c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8013170:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8013174:	8014      	strh	r4, [r2, #0]
 8013176:	701c      	strb	r4, [r3, #0]
 8013178:	f888 4000 	strb.w	r4, [r8]
 801317c:	f88c 4000 	strb.w	r4, [ip]
 8013180:	f88e 4000 	strb.w	r4, [lr]
 8013184:	703c      	strb	r4, [r7, #0]
 8013186:	6804      	ldr	r4, [r0, #0]
 8013188:	b1a4      	cbz	r4, 80131b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801318a:	8824      	ldrh	r4, [r4, #0]
 801318c:	f04f 0901 	mov.w	r9, #1
 8013190:	b314      	cbz	r4, 80131d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013192:	2c2b      	cmp	r4, #43	; 0x2b
 8013194:	d001      	beq.n	801319a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8013196:	2c20      	cmp	r4, #32
 8013198:	d110      	bne.n	80131bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801319a:	8014      	strh	r4, [r2, #0]
 801319c:	6804      	ldr	r4, [r0, #0]
 801319e:	b10c      	cbz	r4, 80131a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80131a0:	3402      	adds	r4, #2
 80131a2:	6004      	str	r4, [r0, #0]
 80131a4:	680c      	ldr	r4, [r1, #0]
 80131a6:	b10c      	cbz	r4, 80131ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80131a8:	3401      	adds	r4, #1
 80131aa:	600c      	str	r4, [r1, #0]
 80131ac:	6804      	ldr	r4, [r0, #0]
 80131ae:	b17c      	cbz	r4, 80131d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80131b0:	8824      	ldrh	r4, [r4, #0]
 80131b2:	e7ed      	b.n	8013190 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80131b4:	680c      	ldr	r4, [r1, #0]
 80131b6:	b17c      	cbz	r4, 80131d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80131b8:	7824      	ldrb	r4, [r4, #0]
 80131ba:	e7e7      	b.n	801318c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80131bc:	2c2d      	cmp	r4, #45	; 0x2d
 80131be:	d102      	bne.n	80131c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80131c0:	f883 9000 	strb.w	r9, [r3]
 80131c4:	e7ea      	b.n	801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80131c6:	2c23      	cmp	r4, #35	; 0x23
 80131c8:	d107      	bne.n	80131da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80131ca:	f888 9000 	strb.w	r9, [r8]
 80131ce:	e7e5      	b.n	801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80131d0:	680c      	ldr	r4, [r1, #0]
 80131d2:	b10c      	cbz	r4, 80131d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80131d4:	7824      	ldrb	r4, [r4, #0]
 80131d6:	e7db      	b.n	8013190 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80131d8:	2400      	movs	r4, #0
 80131da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80131de:	2b09      	cmp	r3, #9
 80131e0:	d901      	bls.n	80131e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80131e2:	2c2a      	cmp	r4, #42	; 0x2a
 80131e4:	d122      	bne.n	801322c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80131e6:	2301      	movs	r3, #1
 80131e8:	2c30      	cmp	r4, #48	; 0x30
 80131ea:	f88e 3000 	strb.w	r3, [lr]
 80131ee:	d10d      	bne.n	801320c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80131f0:	f88c 3000 	strb.w	r3, [ip]
 80131f4:	6803      	ldr	r3, [r0, #0]
 80131f6:	b10b      	cbz	r3, 80131fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80131f8:	3302      	adds	r3, #2
 80131fa:	6003      	str	r3, [r0, #0]
 80131fc:	680b      	ldr	r3, [r1, #0]
 80131fe:	b10b      	cbz	r3, 8013204 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8013200:	3301      	adds	r3, #1
 8013202:	600b      	str	r3, [r1, #0]
 8013204:	6803      	ldr	r3, [r0, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d02f      	beq.n	801326a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801320a:	881c      	ldrh	r4, [r3, #0]
 801320c:	2c2a      	cmp	r4, #42	; 0x2a
 801320e:	d135      	bne.n	801327c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	6033      	str	r3, [r6, #0]
 8013216:	6803      	ldr	r3, [r0, #0]
 8013218:	b10b      	cbz	r3, 801321e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801321a:	3302      	adds	r3, #2
 801321c:	6003      	str	r3, [r0, #0]
 801321e:	680b      	ldr	r3, [r1, #0]
 8013220:	b10b      	cbz	r3, 8013226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8013222:	3301      	adds	r3, #1
 8013224:	600b      	str	r3, [r1, #0]
 8013226:	6803      	ldr	r3, [r0, #0]
 8013228:	b31b      	cbz	r3, 8013272 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801322a:	881c      	ldrh	r4, [r3, #0]
 801322c:	2c2e      	cmp	r4, #46	; 0x2e
 801322e:	d11a      	bne.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013230:	2301      	movs	r3, #1
 8013232:	703b      	strb	r3, [r7, #0]
 8013234:	6803      	ldr	r3, [r0, #0]
 8013236:	b10b      	cbz	r3, 801323c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8013238:	3302      	adds	r3, #2
 801323a:	6003      	str	r3, [r0, #0]
 801323c:	680b      	ldr	r3, [r1, #0]
 801323e:	b10b      	cbz	r3, 8013244 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8013240:	3301      	adds	r3, #1
 8013242:	600b      	str	r3, [r1, #0]
 8013244:	6803      	ldr	r3, [r0, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d036      	beq.n	80132b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	2b2a      	cmp	r3, #42	; 0x2a
 801324e:	d137      	bne.n	80132c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8013250:	f04f 33ff 	mov.w	r3, #4294967295
 8013254:	602b      	str	r3, [r5, #0]
 8013256:	6803      	ldr	r3, [r0, #0]
 8013258:	b10b      	cbz	r3, 801325e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801325a:	3302      	adds	r3, #2
 801325c:	6003      	str	r3, [r0, #0]
 801325e:	680b      	ldr	r3, [r1, #0]
 8013260:	b10b      	cbz	r3, 8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013262:	3301      	adds	r3, #1
 8013264:	600b      	str	r3, [r1, #0]
 8013266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801326a:	680c      	ldr	r4, [r1, #0]
 801326c:	b134      	cbz	r4, 801327c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801326e:	7824      	ldrb	r4, [r4, #0]
 8013270:	e7cc      	b.n	801320c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8013272:	680b      	ldr	r3, [r1, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d0f6      	beq.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013278:	781c      	ldrb	r4, [r3, #0]
 801327a:	e7d7      	b.n	801322c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801327c:	2300      	movs	r3, #0
 801327e:	220a      	movs	r2, #10
 8013280:	6033      	str	r3, [r6, #0]
 8013282:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013286:	fa1f f38c 	uxth.w	r3, ip
 801328a:	2b09      	cmp	r3, #9
 801328c:	d8ce      	bhi.n	801322c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801328e:	6833      	ldr	r3, [r6, #0]
 8013290:	fb02 c303 	mla	r3, r2, r3, ip
 8013294:	6033      	str	r3, [r6, #0]
 8013296:	6803      	ldr	r3, [r0, #0]
 8013298:	b10b      	cbz	r3, 801329e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801329a:	3302      	adds	r3, #2
 801329c:	6003      	str	r3, [r0, #0]
 801329e:	680b      	ldr	r3, [r1, #0]
 80132a0:	b10b      	cbz	r3, 80132a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80132a2:	3301      	adds	r3, #1
 80132a4:	600b      	str	r3, [r1, #0]
 80132a6:	6803      	ldr	r3, [r0, #0]
 80132a8:	b10b      	cbz	r3, 80132ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80132aa:	881c      	ldrh	r4, [r3, #0]
 80132ac:	e7e9      	b.n	8013282 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80132ae:	680c      	ldr	r4, [r1, #0]
 80132b0:	2c00      	cmp	r4, #0
 80132b2:	d0e6      	beq.n	8013282 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80132b4:	7824      	ldrb	r4, [r4, #0]
 80132b6:	e7e4      	b.n	8013282 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80132b8:	680b      	ldr	r3, [r1, #0]
 80132ba:	b10b      	cbz	r3, 80132c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	e7c5      	b.n	801324c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80132c0:	2200      	movs	r2, #0
 80132c2:	240a      	movs	r4, #10
 80132c4:	602a      	str	r2, [r5, #0]
 80132c6:	3b30      	subs	r3, #48	; 0x30
 80132c8:	682a      	ldr	r2, [r5, #0]
 80132ca:	b29e      	uxth	r6, r3
 80132cc:	2e09      	cmp	r6, #9
 80132ce:	d813      	bhi.n	80132f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80132d0:	fb04 3302 	mla	r3, r4, r2, r3
 80132d4:	602b      	str	r3, [r5, #0]
 80132d6:	6803      	ldr	r3, [r0, #0]
 80132d8:	b10b      	cbz	r3, 80132de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80132da:	3302      	adds	r3, #2
 80132dc:	6003      	str	r3, [r0, #0]
 80132de:	680b      	ldr	r3, [r1, #0]
 80132e0:	b10b      	cbz	r3, 80132e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80132e2:	3301      	adds	r3, #1
 80132e4:	600b      	str	r3, [r1, #0]
 80132e6:	6803      	ldr	r3, [r0, #0]
 80132e8:	b10b      	cbz	r3, 80132ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	e7eb      	b.n	80132c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80132ee:	680b      	ldr	r3, [r1, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d0e8      	beq.n	80132c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	e7e6      	b.n	80132c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80132f8:	2a06      	cmp	r2, #6
 80132fa:	bfa8      	it	ge
 80132fc:	2206      	movge	r2, #6
 80132fe:	602a      	str	r2, [r5, #0]
 8013300:	e7b1      	b.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08013302 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8013302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013306:	b0a3      	sub	sp, #140	; 0x8c
 8013308:	2600      	movs	r6, #0
 801330a:	4607      	mov	r7, r0
 801330c:	4688      	mov	r8, r1
 801330e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8013312:	4631      	mov	r1, r6
 8013314:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8013316:	4648      	mov	r0, r9
 8013318:	960d      	str	r6, [sp, #52]	; 0x34
 801331a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801331e:	2242      	movs	r2, #66	; 0x42
 8013320:	f009 f898 	bl	801c454 <memset>
 8013324:	b15f      	cbz	r7, 801333e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8013326:	f108 3aff 	add.w	sl, r8, #4294967295
 801332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801332c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801332e:	b152      	cbz	r2, 8013346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8013330:	8812      	ldrh	r2, [r2, #0]
 8013332:	b10a      	cbz	r2, 8013338 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8013334:	459a      	cmp	sl, r3
 8013336:	dc2e      	bgt.n	8013396 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8013338:	2200      	movs	r2, #0
 801333a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801333e:	4638      	mov	r0, r7
 8013340:	b023      	add	sp, #140	; 0x8c
 8013342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013346:	9a08      	ldr	r2, [sp, #32]
 8013348:	2a00      	cmp	r2, #0
 801334a:	d0f5      	beq.n	8013338 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801334c:	7812      	ldrb	r2, [r2, #0]
 801334e:	e7f0      	b.n	8013332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8013350:	2d00      	cmp	r5, #0
 8013352:	d0ea      	beq.n	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013354:	782a      	ldrb	r2, [r5, #0]
 8013356:	b142      	cbz	r2, 801336a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8013358:	2a25      	cmp	r2, #37	; 0x25
 801335a:	d001      	beq.n	8013360 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801335c:	459a      	cmp	sl, r3
 801335e:	dc08      	bgt.n	8013372 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8013360:	f1bb 0f00 	cmp.w	fp, #0
 8013364:	d121      	bne.n	80133aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8013366:	2d00      	cmp	r5, #0
 8013368:	d0df      	beq.n	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801336a:	782a      	ldrb	r2, [r5, #0]
 801336c:	f04f 0b00 	mov.w	fp, #0
 8013370:	e01d      	b.n	80133ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8013372:	f1bb 0f00 	cmp.w	fp, #0
 8013376:	d077      	beq.n	8013468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8013378:	f8bb 2000 	ldrh.w	r2, [fp]
 801337c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013380:	f1bb 0f00 	cmp.w	fp, #0
 8013384:	d002      	beq.n	801338c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8013386:	f10b 0202 	add.w	r2, fp, #2
 801338a:	9209      	str	r2, [sp, #36]	; 0x24
 801338c:	b10d      	cbz	r5, 8013392 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801338e:	3501      	adds	r5, #1
 8013390:	9508      	str	r5, [sp, #32]
 8013392:	3301      	adds	r3, #1
 8013394:	930d      	str	r3, [sp, #52]	; 0x34
 8013396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013398:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801339c:	f1bb 0f00 	cmp.w	fp, #0
 80133a0:	d0d6      	beq.n	8013350 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80133a2:	f8bb 2000 	ldrh.w	r2, [fp]
 80133a6:	2a00      	cmp	r2, #0
 80133a8:	d1d6      	bne.n	8013358 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80133aa:	f8bb 2000 	ldrh.w	r2, [fp]
 80133ae:	2a00      	cmp	r2, #0
 80133b0:	d0bb      	beq.n	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80133b2:	459a      	cmp	sl, r3
 80133b4:	ddb9      	ble.n	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80133b6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80133ba:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80133be:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80133c2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80133c6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80133ca:	960e      	str	r6, [sp, #56]	; 0x38
 80133cc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80133d0:	960f      	str	r6, [sp, #60]	; 0x3c
 80133d2:	f1bb 0f00 	cmp.w	fp, #0
 80133d6:	d002      	beq.n	80133de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80133d8:	f10b 0302 	add.w	r3, fp, #2
 80133dc:	9309      	str	r3, [sp, #36]	; 0x24
 80133de:	b10d      	cbz	r5, 80133e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80133e0:	1c6b      	adds	r3, r5, #1
 80133e2:	9308      	str	r3, [sp, #32]
 80133e4:	ab0f      	add	r3, sp, #60	; 0x3c
 80133e6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80133ea:	a908      	add	r1, sp, #32
 80133ec:	a809      	add	r0, sp, #36	; 0x24
 80133ee:	9305      	str	r3, [sp, #20]
 80133f0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80133f4:	9304      	str	r3, [sp, #16]
 80133f6:	ab0e      	add	r3, sp, #56	; 0x38
 80133f8:	9303      	str	r3, [sp, #12]
 80133fa:	ab0c      	add	r3, sp, #48	; 0x30
 80133fc:	9302      	str	r3, [sp, #8]
 80133fe:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8013402:	9301      	str	r3, [sp, #4]
 8013404:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801340e:	f7ff fea8 	bl	8013162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8013412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013414:	2b00      	cmp	r3, #0
 8013416:	bfbf      	itttt	lt
 8013418:	6823      	ldrlt	r3, [r4, #0]
 801341a:	3404      	addlt	r4, #4
 801341c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8013420:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013424:	2b00      	cmp	r3, #0
 8013426:	bfbe      	ittt	lt
 8013428:	6823      	ldrlt	r3, [r4, #0]
 801342a:	3404      	addlt	r4, #4
 801342c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8013430:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8013434:	bfb8      	it	lt
 8013436:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8013438:	b1d9      	cbz	r1, 8013472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801343a:	880b      	ldrh	r3, [r1, #0]
 801343c:	2b69      	cmp	r3, #105	; 0x69
 801343e:	d01f      	beq.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013440:	d82f      	bhi.n	80134a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8013442:	2b58      	cmp	r3, #88	; 0x58
 8013444:	d01c      	beq.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013446:	d818      	bhi.n	801347a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8013448:	2b25      	cmp	r3, #37	; 0x25
 801344a:	d034      	beq.n	80134b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801344c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801344e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8013452:	f1bb 0f00 	cmp.w	fp, #0
 8013456:	f000 80b7 	beq.w	80135c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801345a:	f8bb 5000 	ldrh.w	r5, [fp]
 801345e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8013462:	3301      	adds	r3, #1
 8013464:	930d      	str	r3, [sp, #52]	; 0x34
 8013466:	e029      	b.n	80134bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8013468:	b10d      	cbz	r5, 801346e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801346a:	782a      	ldrb	r2, [r5, #0]
 801346c:	e786      	b.n	801337c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801346e:	462a      	mov	r2, r5
 8013470:	e784      	b.n	801337c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8013472:	2a00      	cmp	r2, #0
 8013474:	d0ea      	beq.n	801344c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8013476:	7813      	ldrb	r3, [r2, #0]
 8013478:	e7e0      	b.n	801343c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801347a:	3b63      	subs	r3, #99	; 0x63
 801347c:	2b01      	cmp	r3, #1
 801347e:	d8e5      	bhi.n	801344c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8013480:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8013484:	b329      	cbz	r1, 80134d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8013486:	880b      	ldrh	r3, [r1, #0]
 8013488:	2b69      	cmp	r3, #105	; 0x69
 801348a:	d063      	beq.n	8013554 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801348c:	d825      	bhi.n	80134da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801348e:	2b63      	cmp	r3, #99	; 0x63
 8013490:	d038      	beq.n	8013504 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8013492:	2b64      	cmp	r3, #100	; 0x64
 8013494:	d05e      	beq.n	8013554 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8013496:	2b58      	cmp	r3, #88	; 0x58
 8013498:	d07a      	beq.n	8013590 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801349a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801349e:	4625      	mov	r5, r4
 80134a0:	e036      	b.n	8013510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80134a2:	2b73      	cmp	r3, #115	; 0x73
 80134a4:	d0ec      	beq.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80134a6:	d802      	bhi.n	80134ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80134a8:	2b6f      	cmp	r3, #111	; 0x6f
 80134aa:	d1cf      	bne.n	801344c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80134ac:	e7e8      	b.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80134ae:	2b75      	cmp	r3, #117	; 0x75
 80134b0:	d0e6      	beq.n	8013480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80134b2:	2b78      	cmp	r3, #120	; 0x78
 80134b4:	e7f9      	b.n	80134aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80134b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134b8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80134bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134be:	b10b      	cbz	r3, 80134c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80134c0:	3302      	adds	r3, #2
 80134c2:	9309      	str	r3, [sp, #36]	; 0x24
 80134c4:	9b08      	ldr	r3, [sp, #32]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	f43f af2f 	beq.w	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80134cc:	3301      	adds	r3, #1
 80134ce:	9308      	str	r3, [sp, #32]
 80134d0:	e72b      	b.n	801332a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80134d2:	2a00      	cmp	r2, #0
 80134d4:	d0e1      	beq.n	801349a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80134d6:	7813      	ldrb	r3, [r2, #0]
 80134d8:	e7d6      	b.n	8013488 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80134da:	2b73      	cmp	r3, #115	; 0x73
 80134dc:	d036      	beq.n	801354c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80134de:	d807      	bhi.n	80134f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80134e0:	2b6f      	cmp	r3, #111	; 0x6f
 80134e2:	d1da      	bne.n	801349a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80134e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134e6:	1d25      	adds	r5, r4, #4
 80134e8:	2308      	movs	r3, #8
 80134ea:	eba8 0202 	sub.w	r2, r8, r2
 80134ee:	e049      	b.n	8013584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80134f0:	2b75      	cmp	r3, #117	; 0x75
 80134f2:	d042      	beq.n	801357a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80134f4:	2b78      	cmp	r3, #120	; 0x78
 80134f6:	d1d0      	bne.n	801349a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80134f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134fa:	1d25      	adds	r5, r4, #4
 80134fc:	2310      	movs	r3, #16
 80134fe:	eba8 0202 	sub.w	r2, r8, r2
 8013502:	e03f      	b.n	8013584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8013504:	7823      	ldrb	r3, [r4, #0]
 8013506:	1d25      	adds	r5, r4, #4
 8013508:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801350c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013512:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013516:	2b00      	cmp	r3, #0
 8013518:	d051      	beq.n	80135be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801351a:	881a      	ldrh	r2, [r3, #0]
 801351c:	a80d      	add	r0, sp, #52	; 0x34
 801351e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8013522:	462c      	mov	r4, r5
 8013524:	9005      	str	r0, [sp, #20]
 8013526:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801352a:	9004      	str	r0, [sp, #16]
 801352c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801352e:	9003      	str	r0, [sp, #12]
 8013530:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8013534:	9002      	str	r0, [sp, #8]
 8013536:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013538:	9001      	str	r0, [sp, #4]
 801353a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801353e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8013542:	9000      	str	r0, [sp, #0]
 8013544:	a810      	add	r0, sp, #64	; 0x40
 8013546:	f7ff fd49 	bl	8012fdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801354a:	e7b7      	b.n	80134bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801354c:	1d25      	adds	r5, r4, #4
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	9310      	str	r3, [sp, #64]	; 0x40
 8013552:	e7dd      	b.n	8013510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013556:	230a      	movs	r3, #10
 8013558:	4649      	mov	r1, r9
 801355a:	6820      	ldr	r0, [r4, #0]
 801355c:	eba8 0202 	sub.w	r2, r8, r2
 8013560:	1d25      	adds	r5, r4, #4
 8013562:	b292      	uxth	r2, r2
 8013564:	f7ff fd08 	bl	8012f78 <_ZN8touchgfx7Unicode4itoaElPtti>
 8013568:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801356c:	2b2d      	cmp	r3, #45	; 0x2d
 801356e:	d1cf      	bne.n	8013510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013570:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013576:	3302      	adds	r3, #2
 8013578:	e7ea      	b.n	8013550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801357a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801357c:	1d25      	adds	r5, r4, #4
 801357e:	230a      	movs	r3, #10
 8013580:	eba8 0202 	sub.w	r2, r8, r2
 8013584:	b292      	uxth	r2, r2
 8013586:	4649      	mov	r1, r9
 8013588:	6820      	ldr	r0, [r4, #0]
 801358a:	f7ff fcd7 	bl	8012f3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801358e:	e7bf      	b.n	8013510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013592:	2310      	movs	r3, #16
 8013594:	4649      	mov	r1, r9
 8013596:	6820      	ldr	r0, [r4, #0]
 8013598:	eba8 0202 	sub.w	r2, r8, r2
 801359c:	1d25      	adds	r5, r4, #4
 801359e:	b292      	uxth	r2, r2
 80135a0:	f7ff fccc 	bl	8012f3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80135a4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80135a8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d0af      	beq.n	8013510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80135b0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80135b4:	2919      	cmp	r1, #25
 80135b6:	d8f7      	bhi.n	80135a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80135b8:	3b20      	subs	r3, #32
 80135ba:	8013      	strh	r3, [r2, #0]
 80135bc:	e7f4      	b.n	80135a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80135be:	9a08      	ldr	r2, [sp, #32]
 80135c0:	2a00      	cmp	r2, #0
 80135c2:	d0ab      	beq.n	801351c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80135c4:	7812      	ldrb	r2, [r2, #0]
 80135c6:	e7a9      	b.n	801351c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80135c8:	2d00      	cmp	r5, #0
 80135ca:	f43f af48 	beq.w	801345e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80135ce:	782d      	ldrb	r5, [r5, #0]
 80135d0:	e745      	b.n	801345e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080135d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80135d2:	b507      	push	{r0, r1, r2, lr}
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	4613      	mov	r3, r2
 80135d8:	2200      	movs	r2, #0
 80135da:	f7ff fe92 	bl	8013302 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80135de:	b003      	add	sp, #12
 80135e0:	f85d fb04 	ldr.w	pc, [sp], #4

080135e4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80135e4:	b40c      	push	{r2, r3}
 80135e6:	b507      	push	{r0, r1, r2, lr}
 80135e8:	ab04      	add	r3, sp, #16
 80135ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ee:	9301      	str	r3, [sp, #4]
 80135f0:	f7ff ffef 	bl	80135d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80135f4:	b003      	add	sp, #12
 80135f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80135fa:	b002      	add	sp, #8
 80135fc:	4770      	bx	lr
	...

08013600 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 8013600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013604:	b0c3      	sub	sp, #268	; 0x10c
 8013606:	2600      	movs	r6, #0
 8013608:	4607      	mov	r7, r0
 801360a:	4689      	mov	r9, r1
 801360c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8013610:	4631      	mov	r1, r6
 8013612:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8013616:	4640      	mov	r0, r8
 8013618:	960c      	str	r6, [sp, #48]	; 0x30
 801361a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801361e:	22c8      	movs	r2, #200	; 0xc8
 8013620:	f008 ff18 	bl	801c454 <memset>
 8013624:	b16f      	cbz	r7, 8013642 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 8013626:	f04f 0b0a 	mov.w	fp, #10
 801362a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801362c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801362e:	b162      	cbz	r2, 801364a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 8013630:	8812      	ldrh	r2, [r2, #0]
 8013632:	b11a      	cbz	r2, 801363c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 8013634:	f109 31ff 	add.w	r1, r9, #4294967295
 8013638:	4299      	cmp	r1, r3
 801363a:	dc26      	bgt.n	801368a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801363c:	2200      	movs	r2, #0
 801363e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013642:	4638      	mov	r0, r7
 8013644:	b043      	add	sp, #268	; 0x10c
 8013646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364a:	9a08      	ldr	r2, [sp, #32]
 801364c:	2a00      	cmp	r2, #0
 801364e:	d0f5      	beq.n	801363c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 8013650:	7812      	ldrb	r2, [r2, #0]
 8013652:	e7ee      	b.n	8013632 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 8013654:	2c00      	cmp	r4, #0
 8013656:	d0e8      	beq.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013658:	7822      	ldrb	r2, [r4, #0]
 801365a:	b132      	cbz	r2, 801366a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801365c:	2a25      	cmp	r2, #37	; 0x25
 801365e:	d001      	beq.n	8013664 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 8013660:	4299      	cmp	r1, r3
 8013662:	dc05      	bgt.n	8013670 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 8013664:	b9cd      	cbnz	r5, 801369a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 8013666:	2c00      	cmp	r4, #0
 8013668:	d0df      	beq.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801366a:	7822      	ldrb	r2, [r4, #0]
 801366c:	2500      	movs	r5, #0
 801366e:	e015      	b.n	801369c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 8013670:	2d00      	cmp	r5, #0
 8013672:	d073      	beq.n	801375c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 8013674:	882a      	ldrh	r2, [r5, #0]
 8013676:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801367a:	b10d      	cbz	r5, 8013680 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801367c:	3502      	adds	r5, #2
 801367e:	9509      	str	r5, [sp, #36]	; 0x24
 8013680:	b10c      	cbz	r4, 8013686 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 8013682:	3401      	adds	r4, #1
 8013684:	9408      	str	r4, [sp, #32]
 8013686:	3301      	adds	r3, #1
 8013688:	930c      	str	r3, [sp, #48]	; 0x30
 801368a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801368c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8013690:	2d00      	cmp	r5, #0
 8013692:	d0df      	beq.n	8013654 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 8013694:	882a      	ldrh	r2, [r5, #0]
 8013696:	2a00      	cmp	r2, #0
 8013698:	d1e0      	bne.n	801365c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801369a:	882a      	ldrh	r2, [r5, #0]
 801369c:	2a00      	cmp	r2, #0
 801369e:	d0c4      	beq.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80136a0:	4299      	cmp	r1, r3
 80136a2:	ddc2      	ble.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80136a4:	2300      	movs	r3, #0
 80136a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80136aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136b2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80136b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80136ba:	930d      	str	r3, [sp, #52]	; 0x34
 80136bc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80136c0:	930e      	str	r3, [sp, #56]	; 0x38
 80136c2:	b10d      	cbz	r5, 80136c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 80136c4:	1cab      	adds	r3, r5, #2
 80136c6:	9309      	str	r3, [sp, #36]	; 0x24
 80136c8:	b10c      	cbz	r4, 80136ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 80136ca:	1c63      	adds	r3, r4, #1
 80136cc:	9308      	str	r3, [sp, #32]
 80136ce:	ab0e      	add	r3, sp, #56	; 0x38
 80136d0:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 80136d4:	a908      	add	r1, sp, #32
 80136d6:	a809      	add	r0, sp, #36	; 0x24
 80136d8:	9305      	str	r3, [sp, #20]
 80136da:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80136de:	9304      	str	r3, [sp, #16]
 80136e0:	ab0d      	add	r3, sp, #52	; 0x34
 80136e2:	9303      	str	r3, [sp, #12]
 80136e4:	ab0b      	add	r3, sp, #44	; 0x2c
 80136e6:	9302      	str	r3, [sp, #8]
 80136e8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80136ec:	9301      	str	r3, [sp, #4]
 80136ee:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80136f8:	f7ff fd33 	bl	8013162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80136fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136fe:	2b00      	cmp	r3, #0
 8013700:	da0b      	bge.n	801371a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 8013702:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013706:	3601      	adds	r6, #1
 8013708:	edd3 7a00 	vldr	s15, [r3]
 801370c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013710:	ee17 3a90 	vmov	r3, s15
 8013714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013718:	930d      	str	r3, [sp, #52]	; 0x34
 801371a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801371c:	2b00      	cmp	r3, #0
 801371e:	da0b      	bge.n	8013738 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 8013720:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013724:	3601      	adds	r6, #1
 8013726:	edd3 7a00 	vldr	s15, [r3]
 801372a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801372e:	ee17 3a90 	vmov	r3, s15
 8013732:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013736:	930e      	str	r3, [sp, #56]	; 0x38
 8013738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801373a:	b1a3      	cbz	r3, 8013766 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801373c:	881a      	ldrh	r2, [r3, #0]
 801373e:	2a25      	cmp	r2, #37	; 0x25
 8013740:	d016      	beq.n	8013770 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 8013742:	2a66      	cmp	r2, #102	; 0x66
 8013744:	d01a      	beq.n	801377c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 8013746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013748:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801374c:	2d00      	cmp	r5, #0
 801374e:	f000 80fc 	beq.w	801394a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34a>
 8013752:	882c      	ldrh	r4, [r5, #0]
 8013754:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8013758:	3301      	adds	r3, #1
 801375a:	e00d      	b.n	8013778 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801375c:	b10c      	cbz	r4, 8013762 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801375e:	7822      	ldrb	r2, [r4, #0]
 8013760:	e789      	b.n	8013676 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 8013762:	4622      	mov	r2, r4
 8013764:	e787      	b.n	8013676 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 8013766:	9b08      	ldr	r3, [sp, #32]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d0ec      	beq.n	8013746 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801376c:	781a      	ldrb	r2, [r3, #0]
 801376e:	e7e6      	b.n	801373e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 8013770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013772:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013776:	3302      	adds	r3, #2
 8013778:	930c      	str	r3, [sp, #48]	; 0x30
 801377a:	e049      	b.n	8013810 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x210>
 801377c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013780:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8013784:	3601      	adds	r6, #1
 8013786:	ed93 7a00 	vldr	s14, [r3]
 801378a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801378e:	b923      	cbnz	r3, 801379a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 8013790:	2301      	movs	r3, #1
 8013792:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8013796:	2306      	movs	r3, #6
 8013798:	930e      	str	r3, [sp, #56]	; 0x38
 801379a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801379e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a6:	bf42      	ittt	mi
 80137a8:	eeb1 7a47 	vnegmi.f32	s14, s14
 80137ac:	232d      	movmi	r3, #45	; 0x2d
 80137ae:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 80137b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80137b6:	eef4 6a47 	vcmp.f32	s13, s14
 80137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137be:	d132      	bne.n	8013826 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 80137c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137c4:	eef4 7a47 	vcmp.f32	s15, s14
 80137c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137cc:	d12b      	bne.n	8013826 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 80137ce:	4b61      	ldr	r3, [pc, #388]	; (8013954 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x354>)
 80137d0:	9310      	str	r3, [sp, #64]	; 0x40
 80137d2:	2366      	movs	r3, #102	; 0x66
 80137d4:	9311      	str	r3, [sp, #68]	; 0x44
 80137d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f000 80ae 	beq.w	801393e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 80137e2:	881a      	ldrh	r2, [r3, #0]
 80137e4:	a80c      	add	r0, sp, #48	; 0x30
 80137e6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80137ea:	9005      	str	r0, [sp, #20]
 80137ec:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80137f0:	9004      	str	r0, [sp, #16]
 80137f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80137f4:	9003      	str	r0, [sp, #12]
 80137f6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 80137fa:	9002      	str	r0, [sp, #8]
 80137fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80137fe:	9001      	str	r0, [sp, #4]
 8013800:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8013804:	e9cd 9706 	strd	r9, r7, [sp, #24]
 8013808:	9000      	str	r0, [sp, #0]
 801380a:	a80f      	add	r0, sp, #60	; 0x3c
 801380c:	f7ff fbe6 	bl	8012fdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8013810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013812:	b10b      	cbz	r3, 8013818 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 8013814:	3302      	adds	r3, #2
 8013816:	9309      	str	r3, [sp, #36]	; 0x24
 8013818:	9b08      	ldr	r3, [sp, #32]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f43f af05 	beq.w	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013820:	3301      	adds	r3, #1
 8013822:	9308      	str	r3, [sp, #32]
 8013824:	e701      	b.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013826:	eeb4 7a47 	vcmp.f32	s14, s14
 801382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382e:	d10b      	bne.n	8013848 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x248>
 8013830:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8013834:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013836:	2300      	movs	r3, #0
 8013838:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013958 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>
 801383c:	4283      	cmp	r3, r0
 801383e:	da07      	bge.n	8013850 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x250>
 8013840:	eec7 7a86 	vdiv.f32	s15, s15, s12
 8013844:	3301      	adds	r3, #1
 8013846:	e7f9      	b.n	801383c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23c>
 8013848:	4b44      	ldr	r3, [pc, #272]	; (801395c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>)
 801384a:	9310      	str	r3, [sp, #64]	; 0x40
 801384c:	236e      	movs	r3, #110	; 0x6e
 801384e:	e7c1      	b.n	80137d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d4>
 8013850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013858:	eeb0 7a67 	vmov.f32	s14, s15
 801385c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013864:	da27      	bge.n	80138b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b6>
 8013866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013868:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801386c:	2100      	movs	r1, #0
 801386e:	eba9 0202 	sub.w	r2, r9, r2
 8013872:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013876:	b28c      	uxth	r4, r1
 8013878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387c:	db21      	blt.n	80138c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 801387e:	1a53      	subs	r3, r2, r1
 8013880:	2b00      	cmp	r3, #0
 8013882:	dd1e      	ble.n	80138c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 8013884:	2963      	cmp	r1, #99	; 0x63
 8013886:	d01b      	beq.n	80138c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 8013888:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801388c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013890:	ee17 3a10 	vmov	r3, s14
 8013894:	2b09      	cmp	r3, #9
 8013896:	bfa8      	it	ge
 8013898:	2309      	movge	r3, #9
 801389a:	ee07 3a10 	vmov	s14, r3
 801389e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80138a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138a6:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 80138aa:	3101      	adds	r1, #1
 80138ac:	eee7 7a66 	vfms.f32	s15, s14, s13
 80138b0:	eec6 6a86 	vdiv.f32	s13, s13, s12
 80138b4:	e7dd      	b.n	8013872 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x272>
 80138b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80138ba:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80138be:	e7cd      	b.n	801385c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x25c>
 80138c0:	460c      	mov	r4, r1
 80138c2:	2a63      	cmp	r2, #99	; 0x63
 80138c4:	bfd4      	ite	le
 80138c6:	ebc4 0202 	rsble	r2, r4, r2
 80138ca:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 80138ce:	2a00      	cmp	r2, #0
 80138d0:	dd30      	ble.n	8013934 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x334>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2501      	movs	r5, #1
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	dd0d      	ble.n	80138f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f6>
 80138da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80138de:	3b01      	subs	r3, #1
 80138e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80138e4:	ee17 1a10 	vmov	r1, s14
 80138e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138ec:	fb0b 1505 	mla	r5, fp, r5, r1
 80138f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80138f4:	e7ef      	b.n	80138d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d6>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80138fc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013900:	bfac      	ite	ge
 8013902:	1a18      	subge	r0, r3, r0
 8013904:	4618      	movlt	r0, r3
 8013906:	b292      	uxth	r2, r2
 8013908:	230a      	movs	r3, #10
 801390a:	900e      	str	r0, [sp, #56]	; 0x38
 801390c:	eb08 0104 	add.w	r1, r8, r4
 8013910:	4628      	mov	r0, r5
 8013912:	f7ff fb31 	bl	8012f78 <_ZN8touchgfx7Unicode4itoaElPtti>
 8013916:	2d01      	cmp	r5, #1
 8013918:	dc0a      	bgt.n	8013930 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 801391a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801391e:	2b00      	cmp	r3, #0
 8013920:	bf0c      	ite	eq
 8013922:	2300      	moveq	r3, #0
 8013924:	232e      	movne	r3, #46	; 0x2e
 8013926:	aa42      	add	r2, sp, #264	; 0x108
 8013928:	4414      	add	r4, r2
 801392a:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801392e:	e752      	b.n	80137d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 8013930:	232e      	movs	r3, #46	; 0x2e
 8013932:	e7f8      	b.n	8013926 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x326>
 8013934:	ab42      	add	r3, sp, #264	; 0x108
 8013936:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801393a:	2300      	movs	r3, #0
 801393c:	e7f5      	b.n	801392a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32a>
 801393e:	9a08      	ldr	r2, [sp, #32]
 8013940:	2a00      	cmp	r2, #0
 8013942:	f43f af4f 	beq.w	80137e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 8013946:	7812      	ldrb	r2, [r2, #0]
 8013948:	e74c      	b.n	80137e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 801394a:	2c00      	cmp	r4, #0
 801394c:	f43f af02 	beq.w	8013754 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 8013950:	7824      	ldrb	r4, [r4, #0]
 8013952:	e6ff      	b.n	8013754 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 8013954:	006e0069 	.word	0x006e0069
 8013958:	3f000002 	.word	0x3f000002
 801395c:	0061006e 	.word	0x0061006e

08013960 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8013960:	b507      	push	{r0, r1, r2, lr}
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4613      	mov	r3, r2
 8013966:	2200      	movs	r2, #0
 8013968:	f7ff fe4a 	bl	8013600 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801396c:	b003      	add	sp, #12
 801396e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013974 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013974:	4b01      	ldr	r3, [pc, #4]	; (801397c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013976:	6018      	str	r0, [r3, #0]
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop
 801397c:	24006cc8 	.word	0x24006cc8

08013980 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013980:	4b06      	ldr	r3, [pc, #24]	; (801399c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013982:	881a      	ldrh	r2, [r3, #0]
 8013984:	4282      	cmp	r2, r0
 8013986:	d807      	bhi.n	8013998 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013988:	4b05      	ldr	r3, [pc, #20]	; (80139a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801398a:	881b      	ldrh	r3, [r3, #0]
 801398c:	4413      	add	r3, r2
 801398e:	4298      	cmp	r0, r3
 8013990:	bfac      	ite	ge
 8013992:	2000      	movge	r0, #0
 8013994:	2001      	movlt	r0, #1
 8013996:	4770      	bx	lr
 8013998:	2000      	movs	r0, #0
 801399a:	4770      	bx	lr
 801399c:	24006ce8 	.word	0x24006ce8
 80139a0:	24006cec 	.word	0x24006cec

080139a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80139a4:	b508      	push	{r3, lr}
 80139a6:	4601      	mov	r1, r0
 80139a8:	f7ff ffea 	bl	8013980 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80139ac:	b118      	cbz	r0, 80139b6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80139ae:	4b02      	ldr	r3, [pc, #8]	; (80139b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80139b6:	bd08      	pop	{r3, pc}
 80139b8:	24006ccc 	.word	0x24006ccc

080139bc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80139bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c0:	4d28      	ldr	r5, [pc, #160]	; (8013a64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80139c2:	682b      	ldr	r3, [r5, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d04a      	beq.n	8013a5e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80139c8:	4a27      	ldr	r2, [pc, #156]	; (8013a68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80139ca:	4e28      	ldr	r6, [pc, #160]	; (8013a6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80139cc:	8810      	ldrh	r0, [r2, #0]
 80139ce:	f8b6 8000 	ldrh.w	r8, [r6]
 80139d2:	4c27      	ldr	r4, [pc, #156]	; (8013a70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80139d4:	4440      	add	r0, r8
 80139d6:	4f27      	ldr	r7, [pc, #156]	; (8013a74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80139d8:	1c41      	adds	r1, r0, #1
 80139da:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80139de:	f021 0101 	bic.w	r1, r1, #1
 80139e2:	eb03 020e 	add.w	r2, r3, lr
 80139e6:	0409      	lsls	r1, r1, #16
 80139e8:	6022      	str	r2, [r4, #0]
 80139ea:	0c09      	lsrs	r1, r1, #16
 80139ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80139f0:	eb0e 010c 	add.w	r1, lr, ip
 80139f4:	185a      	adds	r2, r3, r1
 80139f6:	603a      	str	r2, [r7, #0]
 80139f8:	220e      	movs	r2, #14
 80139fa:	fb02 f208 	mul.w	r2, r2, r8
 80139fe:	3203      	adds	r2, #3
 8013a00:	f022 0203 	bic.w	r2, r2, #3
 8013a04:	4411      	add	r1, r2
 8013a06:	440b      	add	r3, r1
 8013a08:	491b      	ldr	r1, [pc, #108]	; (8013a78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8013a0a:	600b      	str	r3, [r1, #0]
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	491b      	ldr	r1, [pc, #108]	; (8013a7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8013a10:	800b      	strh	r3, [r1, #0]
 8013a12:	491b      	ldr	r1, [pc, #108]	; (8013a80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8013a14:	6809      	ldr	r1, [r1, #0]
 8013a16:	eba1 010e 	sub.w	r1, r1, lr
 8013a1a:	eba1 010c 	sub.w	r1, r1, ip
 8013a1e:	469c      	mov	ip, r3
 8013a20:	1a8a      	subs	r2, r1, r2
 8013a22:	4918      	ldr	r1, [pc, #96]	; (8013a84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8013a24:	600a      	str	r2, [r1, #0]
 8013a26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a2a:	4a17      	ldr	r2, [pc, #92]	; (8013a88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8013a2c:	8013      	strh	r3, [r2, #0]
 8013a2e:	4283      	cmp	r3, r0
 8013a30:	d10d      	bne.n	8013a4e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8013a32:	8835      	ldrh	r5, [r6, #0]
 8013a34:	2300      	movs	r3, #0
 8013a36:	6838      	ldr	r0, [r7, #0]
 8013a38:	240e      	movs	r4, #14
 8013a3a:	429d      	cmp	r5, r3
 8013a3c:	d90f      	bls.n	8013a5e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8013a3e:	fb04 0203 	mla	r2, r4, r3, r0
 8013a42:	3301      	adds	r3, #1
 8013a44:	7b11      	ldrb	r1, [r2, #12]
 8013a46:	f36f 1145 	bfc	r1, #5, #1
 8013a4a:	7311      	strb	r1, [r2, #12]
 8013a4c:	e7f5      	b.n	8013a3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8013a4e:	682a      	ldr	r2, [r5, #0]
 8013a50:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8013a54:	6822      	ldr	r2, [r4, #0]
 8013a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	e7e7      	b.n	8013a2e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8013a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a62:	bf00      	nop
 8013a64:	24006ccc 	.word	0x24006ccc
 8013a68:	24006ce8 	.word	0x24006ce8
 8013a6c:	24006cec 	.word	0x24006cec
 8013a70:	24006ce0 	.word	0x24006ce0
 8013a74:	24006cd0 	.word	0x24006cd0
 8013a78:	24006cd8 	.word	0x24006cd8
 8013a7c:	24006cea 	.word	0x24006cea
 8013a80:	24006cd4 	.word	0x24006cd4
 8013a84:	24006ce4 	.word	0x24006ce4
 8013a88:	24006cdc 	.word	0x24006cdc

08013a8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8013a8c:	4b10      	ldr	r3, [pc, #64]	; (8013ad0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8013a8e:	b510      	push	{r4, lr}
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	b9db      	cbnz	r3, 8013acc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a94:	b1d1      	cbz	r1, 8013acc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a96:	4b0f      	ldr	r3, [pc, #60]	; (8013ad4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8013a98:	240e      	movs	r4, #14
 8013a9a:	801a      	strh	r2, [r3, #0]
 8013a9c:	b292      	uxth	r2, r2
 8013a9e:	4b0e      	ldr	r3, [pc, #56]	; (8013ad8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	4362      	muls	r2, r4
 8013aa6:	2406      	movs	r4, #6
 8013aa8:	fb04 2203 	mla	r2, r4, r3, r2
 8013aac:	428a      	cmp	r2, r1
 8013aae:	d305      	bcc.n	8013abc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8013ab0:	4b0a      	ldr	r3, [pc, #40]	; (8013adc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8013ab2:	2135      	movs	r1, #53	; 0x35
 8013ab4:	4a0a      	ldr	r2, [pc, #40]	; (8013ae0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8013ab6:	480b      	ldr	r0, [pc, #44]	; (8013ae4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8013ab8:	f008 fc40 	bl	801c33c <__assert_func>
 8013abc:	4b0a      	ldr	r3, [pc, #40]	; (8013ae8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8013abe:	6019      	str	r1, [r3, #0]
 8013ac0:	4b0a      	ldr	r3, [pc, #40]	; (8013aec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8013ac2:	6018      	str	r0, [r3, #0]
 8013ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ac8:	f7ff bf78 	b.w	80139bc <_ZN8touchgfx6Bitmap10clearCacheEv>
 8013acc:	bd10      	pop	{r4, pc}
 8013ace:	bf00      	nop
 8013ad0:	24006cd8 	.word	0x24006cd8
 8013ad4:	24006cec 	.word	0x24006cec
 8013ad8:	24006ce8 	.word	0x24006ce8
 8013adc:	080201aa 	.word	0x080201aa
 8013ae0:	08020203 	.word	0x08020203
 8013ae4:	08020185 	.word	0x08020185
 8013ae8:	24006cd4 	.word	0x24006cd4
 8013aec:	24006ccc 	.word	0x24006ccc

08013af0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8013af0:	b470      	push	{r4, r5, r6}
 8013af2:	4c07      	ldr	r4, [pc, #28]	; (8013b10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8013af4:	4605      	mov	r5, r0
 8013af6:	4610      	mov	r0, r2
 8013af8:	9a03      	ldr	r2, [sp, #12]
 8013afa:	6826      	ldr	r6, [r4, #0]
 8013afc:	b936      	cbnz	r6, 8013b0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8013afe:	6025      	str	r5, [r4, #0]
 8013b00:	4c04      	ldr	r4, [pc, #16]	; (8013b14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8013b02:	8021      	strh	r1, [r4, #0]
 8013b04:	4619      	mov	r1, r3
 8013b06:	bc70      	pop	{r4, r5, r6}
 8013b08:	f7ff bfc0 	b.w	8013a8c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8013b0c:	bc70      	pop	{r4, r5, r6}
 8013b0e:	4770      	bx	lr
 8013b10:	24006cf0 	.word	0x24006cf0
 8013b14:	24006ce8 	.word	0x24006ce8

08013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8013b18:	b508      	push	{r3, lr}
 8013b1a:	4b14      	ldr	r3, [pc, #80]	; (8013b6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8013b1c:	6819      	ldr	r1, [r3, #0]
 8013b1e:	b931      	cbnz	r1, 8013b2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8013b20:	4b13      	ldr	r3, [pc, #76]	; (8013b70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8013b22:	f240 4185 	movw	r1, #1157	; 0x485
 8013b26:	4a13      	ldr	r2, [pc, #76]	; (8013b74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013b28:	4813      	ldr	r0, [pc, #76]	; (8013b78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8013b2a:	f008 fc07 	bl	801c33c <__assert_func>
 8013b2e:	4a13      	ldr	r2, [pc, #76]	; (8013b7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8013b30:	8803      	ldrh	r3, [r0, #0]
 8013b32:	8812      	ldrh	r2, [r2, #0]
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d204      	bcs.n	8013b42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8013b38:	2214      	movs	r2, #20
 8013b3a:	fb02 1303 	mla	r3, r2, r3, r1
 8013b3e:	8918      	ldrh	r0, [r3, #8]
 8013b40:	bd08      	pop	{r3, pc}
 8013b42:	490f      	ldr	r1, [pc, #60]	; (8013b80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8013b44:	8809      	ldrh	r1, [r1, #0]
 8013b46:	4411      	add	r1, r2
 8013b48:	428b      	cmp	r3, r1
 8013b4a:	da06      	bge.n	8013b5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8013b4c:	1a9b      	subs	r3, r3, r2
 8013b4e:	4a0d      	ldr	r2, [pc, #52]	; (8013b84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8013b50:	210e      	movs	r1, #14
 8013b52:	6812      	ldr	r2, [r2, #0]
 8013b54:	fb01 2303 	mla	r3, r1, r3, r2
 8013b58:	e7f1      	b.n	8013b3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8013b5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	bf0a      	itet	eq
 8013b62:	4b09      	ldreq	r3, [pc, #36]	; (8013b88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013b64:	2000      	movne	r0, #0
 8013b66:	8818      	ldrheq	r0, [r3, #0]
 8013b68:	e7ea      	b.n	8013b40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8013b6a:	bf00      	nop
 8013b6c:	24006cf0 	.word	0x24006cf0
 8013b70:	0801f1f6 	.word	0x0801f1f6
 8013b74:	080202b0 	.word	0x080202b0
 8013b78:	08020185 	.word	0x08020185
 8013b7c:	24006ce8 	.word	0x24006ce8
 8013b80:	24006cec 	.word	0x24006cec
 8013b84:	24006cd0 	.word	0x24006cd0
 8013b88:	24006c5c 	.word	0x24006c5c

08013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013b8c:	b508      	push	{r3, lr}
 8013b8e:	4b14      	ldr	r3, [pc, #80]	; (8013be0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8013b90:	6819      	ldr	r1, [r3, #0]
 8013b92:	b931      	cbnz	r1, 8013ba2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013b94:	4b13      	ldr	r3, [pc, #76]	; (8013be4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013b96:	f240 4199 	movw	r1, #1177	; 0x499
 8013b9a:	4a13      	ldr	r2, [pc, #76]	; (8013be8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013b9c:	4813      	ldr	r0, [pc, #76]	; (8013bec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8013b9e:	f008 fbcd 	bl	801c33c <__assert_func>
 8013ba2:	4a13      	ldr	r2, [pc, #76]	; (8013bf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013ba4:	8803      	ldrh	r3, [r0, #0]
 8013ba6:	8812      	ldrh	r2, [r2, #0]
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d204      	bcs.n	8013bb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8013bac:	2214      	movs	r2, #20
 8013bae:	fb02 1303 	mla	r3, r2, r3, r1
 8013bb2:	8958      	ldrh	r0, [r3, #10]
 8013bb4:	bd08      	pop	{r3, pc}
 8013bb6:	490f      	ldr	r1, [pc, #60]	; (8013bf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013bb8:	8809      	ldrh	r1, [r1, #0]
 8013bba:	4411      	add	r1, r2
 8013bbc:	428b      	cmp	r3, r1
 8013bbe:	da06      	bge.n	8013bce <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8013bc0:	1a9b      	subs	r3, r3, r2
 8013bc2:	4a0d      	ldr	r2, [pc, #52]	; (8013bf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8013bc4:	210e      	movs	r1, #14
 8013bc6:	6812      	ldr	r2, [r2, #0]
 8013bc8:	fb01 2303 	mla	r3, r1, r3, r2
 8013bcc:	e7f1      	b.n	8013bb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8013bce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	bf0a      	itet	eq
 8013bd6:	4b09      	ldreq	r3, [pc, #36]	; (8013bfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8013bd8:	2000      	movne	r0, #0
 8013bda:	8818      	ldrheq	r0, [r3, #0]
 8013bdc:	e7ea      	b.n	8013bb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8013bde:	bf00      	nop
 8013be0:	24006cf0 	.word	0x24006cf0
 8013be4:	0801f1f6 	.word	0x0801f1f6
 8013be8:	080202dc 	.word	0x080202dc
 8013bec:	08020185 	.word	0x08020185
 8013bf0:	24006ce8 	.word	0x24006ce8
 8013bf4:	24006cec 	.word	0x24006cec
 8013bf8:	24006cd0 	.word	0x24006cd0
 8013bfc:	24006c5e 	.word	0x24006c5e

08013c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8013c00:	4b23      	ldr	r3, [pc, #140]	; (8013c90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8013c02:	b510      	push	{r4, lr}
 8013c04:	681c      	ldr	r4, [r3, #0]
 8013c06:	b934      	cbnz	r4, 8013c16 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8013c08:	4b22      	ldr	r3, [pc, #136]	; (8013c94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8013c0a:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8013c0e:	4a22      	ldr	r2, [pc, #136]	; (8013c98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8013c10:	4822      	ldr	r0, [pc, #136]	; (8013c9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8013c12:	f008 fb93 	bl	801c33c <__assert_func>
 8013c16:	4a22      	ldr	r2, [pc, #136]	; (8013ca0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8013c18:	880b      	ldrh	r3, [r1, #0]
 8013c1a:	8812      	ldrh	r2, [r2, #0]
 8013c1c:	4293      	cmp	r3, r2
 8013c1e:	d211      	bcs.n	8013c44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8013c20:	2214      	movs	r2, #20
 8013c22:	fb02 4303 	mla	r3, r2, r3, r4
 8013c26:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8013c2a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013c2e:	8a1a      	ldrh	r2, [r3, #16]
 8013c30:	8a5b      	ldrh	r3, [r3, #18]
 8013c32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013c36:	8004      	strh	r4, [r0, #0]
 8013c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c3c:	8041      	strh	r1, [r0, #2]
 8013c3e:	8082      	strh	r2, [r0, #4]
 8013c40:	80c3      	strh	r3, [r0, #6]
 8013c42:	e00e      	b.n	8013c62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013c44:	4917      	ldr	r1, [pc, #92]	; (8013ca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8013c46:	8809      	ldrh	r1, [r1, #0]
 8013c48:	4411      	add	r1, r2
 8013c4a:	428b      	cmp	r3, r1
 8013c4c:	da0a      	bge.n	8013c64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8013c4e:	1a9b      	subs	r3, r3, r2
 8013c50:	4a15      	ldr	r2, [pc, #84]	; (8013ca8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8013c52:	210e      	movs	r1, #14
 8013c54:	6812      	ldr	r2, [r2, #0]
 8013c56:	fb01 2303 	mla	r3, r1, r3, r2
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	6002      	str	r2, [r0, #0]
 8013c5e:	685a      	ldr	r2, [r3, #4]
 8013c60:	6042      	str	r2, [r0, #4]
 8013c62:	bd10      	pop	{r4, pc}
 8013c64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d10b      	bne.n	8013c84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8013c6c:	4b0f      	ldr	r3, [pc, #60]	; (8013cac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8013c6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013c72:	4b0f      	ldr	r3, [pc, #60]	; (8013cb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013c74:	8081      	strh	r1, [r0, #4]
 8013c76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	80c2      	strh	r2, [r0, #6]
 8013c7e:	8003      	strh	r3, [r0, #0]
 8013c80:	8043      	strh	r3, [r0, #2]
 8013c82:	e7ee      	b.n	8013c62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013c84:	2300      	movs	r3, #0
 8013c86:	8003      	strh	r3, [r0, #0]
 8013c88:	8043      	strh	r3, [r0, #2]
 8013c8a:	8083      	strh	r3, [r0, #4]
 8013c8c:	e7d8      	b.n	8013c40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8013c8e:	bf00      	nop
 8013c90:	24006cf0 	.word	0x24006cf0
 8013c94:	0801f1f6 	.word	0x0801f1f6
 8013c98:	08020249 	.word	0x08020249
 8013c9c:	08020185 	.word	0x08020185
 8013ca0:	24006ce8 	.word	0x24006ce8
 8013ca4:	24006cec 	.word	0x24006cec
 8013ca8:	24006cd0 	.word	0x24006cd0
 8013cac:	24006c5c 	.word	0x24006c5c
 8013cb0:	24006c5e 	.word	0x24006c5e

08013cb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8013cb4:	4b18      	ldr	r3, [pc, #96]	; (8013d18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	b34b      	cbz	r3, 8013d0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013cba:	4a18      	ldr	r2, [pc, #96]	; (8013d1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8013cbc:	8800      	ldrh	r0, [r0, #0]
 8013cbe:	8812      	ldrh	r2, [r2, #0]
 8013cc0:	4290      	cmp	r0, r2
 8013cc2:	d211      	bcs.n	8013ce8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8013cc4:	2214      	movs	r2, #20
 8013cc6:	fb02 3300 	mla	r3, r2, r0, r3
 8013cca:	8a1a      	ldrh	r2, [r3, #16]
 8013ccc:	8919      	ldrh	r1, [r3, #8]
 8013cce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013cd2:	428a      	cmp	r2, r1
 8013cd4:	db1d      	blt.n	8013d12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013cd6:	8a58      	ldrh	r0, [r3, #18]
 8013cd8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013cdc:	895b      	ldrh	r3, [r3, #10]
 8013cde:	4298      	cmp	r0, r3
 8013ce0:	bfac      	ite	ge
 8013ce2:	2000      	movge	r0, #0
 8013ce4:	2001      	movlt	r0, #1
 8013ce6:	4770      	bx	lr
 8013ce8:	4b0d      	ldr	r3, [pc, #52]	; (8013d20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8013cea:	881b      	ldrh	r3, [r3, #0]
 8013cec:	4413      	add	r3, r2
 8013cee:	4298      	cmp	r0, r3
 8013cf0:	da0d      	bge.n	8013d0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013cf2:	4b0c      	ldr	r3, [pc, #48]	; (8013d24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8013cf4:	1a80      	subs	r0, r0, r2
 8013cf6:	220e      	movs	r2, #14
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	fb02 3300 	mla	r3, r2, r0, r3
 8013cfe:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8013d02:	891a      	ldrh	r2, [r3, #8]
 8013d04:	4291      	cmp	r1, r2
 8013d06:	db04      	blt.n	8013d12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013d08:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8013d0c:	e7e6      	b.n	8013cdc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8013d0e:	2000      	movs	r0, #0
 8013d10:	4770      	bx	lr
 8013d12:	2001      	movs	r0, #1
 8013d14:	4770      	bx	lr
 8013d16:	bf00      	nop
 8013d18:	24006cf0 	.word	0x24006cf0
 8013d1c:	24006ce8 	.word	0x24006ce8
 8013d20:	24006cec 	.word	0x24006cec
 8013d24:	24006cd0 	.word	0x24006cd0

08013d28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013d28:	b508      	push	{r3, lr}
 8013d2a:	4b12      	ldr	r3, [pc, #72]	; (8013d74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013d2c:	6819      	ldr	r1, [r3, #0]
 8013d2e:	b931      	cbnz	r1, 8013d3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013d30:	4b11      	ldr	r3, [pc, #68]	; (8013d78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8013d32:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8013d36:	4a11      	ldr	r2, [pc, #68]	; (8013d7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013d38:	4811      	ldr	r0, [pc, #68]	; (8013d80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013d3a:	f008 faff 	bl	801c33c <__assert_func>
 8013d3e:	8803      	ldrh	r3, [r0, #0]
 8013d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d012      	beq.n	8013d6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8013d48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d103      	bne.n	8013d58 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8013d50:	4b0c      	ldr	r3, [pc, #48]	; (8013d84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8013d56:	bd08      	pop	{r3, pc}
 8013d58:	4a0b      	ldr	r2, [pc, #44]	; (8013d88 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8013d5a:	6812      	ldr	r2, [r2, #0]
 8013d5c:	b11a      	cbz	r2, 8013d66 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8013d5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013d62:	2800      	cmp	r0, #0
 8013d64:	d1f7      	bne.n	8013d56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d66:	2214      	movs	r2, #20
 8013d68:	4353      	muls	r3, r2
 8013d6a:	58c8      	ldr	r0, [r1, r3]
 8013d6c:	e7f3      	b.n	8013d56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d6e:	2000      	movs	r0, #0
 8013d70:	e7f1      	b.n	8013d56 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d72:	bf00      	nop
 8013d74:	24006cf0 	.word	0x24006cf0
 8013d78:	0801f1f6 	.word	0x0801f1f6
 8013d7c:	0802027f 	.word	0x0802027f
 8013d80:	08020185 	.word	0x08020185
 8013d84:	24006c68 	.word	0x24006c68
 8013d88:	24006ccc 	.word	0x24006ccc

08013d8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013d8c:	8802      	ldrh	r2, [r0, #0]
 8013d8e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d845      	bhi.n	8013e22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d96:	4b24      	ldr	r3, [pc, #144]	; (8013e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013d98:	8818      	ldrh	r0, [r3, #0]
 8013d9a:	4282      	cmp	r2, r0
 8013d9c:	d221      	bcs.n	8013de2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8013d9e:	4b23      	ldr	r3, [pc, #140]	; (8013e2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013da0:	6819      	ldr	r1, [r3, #0]
 8013da2:	2314      	movs	r3, #20
 8013da4:	fb03 1302 	mla	r3, r3, r2, r1
 8013da8:	6858      	ldr	r0, [r3, #4]
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d03a      	beq.n	8013e24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013dae:	4920      	ldr	r1, [pc, #128]	; (8013e30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013db0:	6809      	ldr	r1, [r1, #0]
 8013db2:	2900      	cmp	r1, #0
 8013db4:	d036      	beq.n	8013e24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013db6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013dba:	2900      	cmp	r1, #0
 8013dbc:	d032      	beq.n	8013e24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013dbe:	891a      	ldrh	r2, [r3, #8]
 8013dc0:	8958      	ldrh	r0, [r3, #10]
 8013dc2:	4350      	muls	r0, r2
 8013dc4:	7c5a      	ldrb	r2, [r3, #17]
 8013dc6:	7cdb      	ldrb	r3, [r3, #19]
 8013dc8:	0952      	lsrs	r2, r2, #5
 8013dca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013dce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013dd2:	2b0b      	cmp	r3, #11
 8013dd4:	bf18      	it	ne
 8013dd6:	0040      	lslne	r0, r0, #1
 8013dd8:	3003      	adds	r0, #3
 8013dda:	f020 0003 	bic.w	r0, r0, #3
 8013dde:	4408      	add	r0, r1
 8013de0:	4770      	bx	lr
 8013de2:	4b14      	ldr	r3, [pc, #80]	; (8013e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	4403      	add	r3, r0
 8013de8:	429a      	cmp	r2, r3
 8013dea:	da1a      	bge.n	8013e22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013dec:	4b12      	ldr	r3, [pc, #72]	; (8013e38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8013dee:	1a10      	subs	r0, r2, r0
 8013df0:	210e      	movs	r1, #14
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	fb01 3000 	mla	r0, r1, r0, r3
 8013df8:	7b03      	ldrb	r3, [r0, #12]
 8013dfa:	f003 031f 	and.w	r3, r3, #31
 8013dfe:	2b0b      	cmp	r3, #11
 8013e00:	d10b      	bne.n	8013e1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013e02:	8903      	ldrh	r3, [r0, #8]
 8013e04:	8940      	ldrh	r0, [r0, #10]
 8013e06:	4358      	muls	r0, r3
 8013e08:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013e0a:	3003      	adds	r0, #3
 8013e0c:	6819      	ldr	r1, [r3, #0]
 8013e0e:	f020 0303 	bic.w	r3, r0, #3
 8013e12:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8013e16:	4418      	add	r0, r3
 8013e18:	4770      	bx	lr
 8013e1a:	2b0d      	cmp	r3, #13
 8013e1c:	d101      	bne.n	8013e22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013e1e:	300d      	adds	r0, #13
 8013e20:	4770      	bx	lr
 8013e22:	2000      	movs	r0, #0
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	24006ce8 	.word	0x24006ce8
 8013e2c:	24006cf0 	.word	0x24006cf0
 8013e30:	24006ccc 	.word	0x24006ccc
 8013e34:	24006cec 	.word	0x24006cec
 8013e38:	24006cd0 	.word	0x24006cd0

08013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8013e3c:	4b17      	ldr	r3, [pc, #92]	; (8013e9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8013e3e:	b510      	push	{r4, lr}
 8013e40:	6819      	ldr	r1, [r3, #0]
 8013e42:	8803      	ldrh	r3, [r0, #0]
 8013e44:	b1e9      	cbz	r1, 8013e82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013e46:	4a16      	ldr	r2, [pc, #88]	; (8013ea0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8013e48:	8812      	ldrh	r2, [r2, #0]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d90a      	bls.n	8013e64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8013e4e:	2214      	movs	r2, #20
 8013e50:	fb02 1303 	mla	r3, r2, r3, r1
 8013e54:	7c58      	ldrb	r0, [r3, #17]
 8013e56:	0942      	lsrs	r2, r0, #5
 8013e58:	7cd8      	ldrb	r0, [r3, #19]
 8013e5a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8013e5e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8013e62:	bd10      	pop	{r4, pc}
 8013e64:	490f      	ldr	r1, [pc, #60]	; (8013ea4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8013e66:	8809      	ldrh	r1, [r1, #0]
 8013e68:	4411      	add	r1, r2
 8013e6a:	428b      	cmp	r3, r1
 8013e6c:	da09      	bge.n	8013e82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013e6e:	1a9b      	subs	r3, r3, r2
 8013e70:	4a0d      	ldr	r2, [pc, #52]	; (8013ea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8013e72:	210e      	movs	r1, #14
 8013e74:	6812      	ldr	r2, [r2, #0]
 8013e76:	fb01 2303 	mla	r3, r1, r3, r2
 8013e7a:	7b18      	ldrb	r0, [r3, #12]
 8013e7c:	f000 001f 	and.w	r0, r0, #31
 8013e80:	e7ef      	b.n	8013e62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013e82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d106      	bne.n	8013e98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8013e8a:	f7f9 f855 	bl	800cf38 <_ZN8touchgfx3HAL3lcdEv>
 8013e8e:	6803      	ldr	r3, [r0, #0]
 8013e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e96:	4718      	bx	r3
 8013e98:	2000      	movs	r0, #0
 8013e9a:	e7e2      	b.n	8013e62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013e9c:	24006cf0 	.word	0x24006cf0
 8013ea0:	24006ce8 	.word	0x24006ce8
 8013ea4:	24006cec 	.word	0x24006cec
 8013ea8:	24006cd0 	.word	0x24006cd0

08013eac <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013eac:	2018      	movs	r0, #24
 8013eae:	4770      	bx	lr

08013eb0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8013eb0:	2001      	movs	r0, #1
 8013eb2:	4770      	bx	lr

08013eb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb8:	b085      	sub	sp, #20
 8013eba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013ebc:	9203      	str	r2, [sp, #12]
 8013ebe:	6870      	ldr	r0, [r6, #4]
 8013ec0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013ec4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013ec8:	9101      	str	r1, [sp, #4]
 8013eca:	fa1f f885 	uxth.w	r8, r5
 8013ece:	43ed      	mvns	r5, r5
 8013ed0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013ed4:	b2ed      	uxtb	r5, r5
 8013ed6:	fb00 2404 	mla	r4, r0, r4, r2
 8013eda:	6832      	ldr	r2, [r6, #0]
 8013edc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013ee0:	4414      	add	r4, r2
 8013ee2:	f8dc 2000 	ldr.w	r2, [ip]
 8013ee6:	9202      	str	r2, [sp, #8]
 8013ee8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013eec:	f102 0e04 	add.w	lr, r2, #4
 8013ef0:	9a01      	ldr	r2, [sp, #4]
 8013ef2:	2a00      	cmp	r2, #0
 8013ef4:	dc03      	bgt.n	8013efe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8013ef6:	9a03      	ldr	r2, [sp, #12]
 8013ef8:	2a00      	cmp	r2, #0
 8013efa:	f340 8116 	ble.w	801412a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f00:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8013f04:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013f08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013f0a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013f0e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	dd0e      	ble.n	8013f34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013f16:	1406      	asrs	r6, r0, #16
 8013f18:	d405      	bmi.n	8013f26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f1a:	4556      	cmp	r6, sl
 8013f1c:	da03      	bge.n	8013f26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f1e:	1416      	asrs	r6, r2, #16
 8013f20:	d401      	bmi.n	8013f26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013f22:	454e      	cmp	r6, r9
 8013f24:	db07      	blt.n	8013f36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8013f26:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013f28:	3b01      	subs	r3, #1
 8013f2a:	3403      	adds	r4, #3
 8013f2c:	4430      	add	r0, r6
 8013f2e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013f30:	4432      	add	r2, r6
 8013f32:	e7ee      	b.n	8013f12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8013f34:	d063      	beq.n	8013ffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013f36:	1e5e      	subs	r6, r3, #1
 8013f38:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013f3a:	fb07 0706 	mla	r7, r7, r6, r0
 8013f3e:	143f      	asrs	r7, r7, #16
 8013f40:	d454      	bmi.n	8013fec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013f42:	4557      	cmp	r7, sl
 8013f44:	da52      	bge.n	8013fec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013f46:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013f48:	fb07 2606 	mla	r6, r7, r6, r2
 8013f4c:	1436      	asrs	r6, r6, #16
 8013f4e:	d44d      	bmi.n	8013fec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013f50:	454e      	cmp	r6, r9
 8013f52:	da4b      	bge.n	8013fec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013f54:	1ce6      	adds	r6, r4, #3
 8013f56:	4699      	mov	r9, r3
 8013f58:	f1b9 0f00 	cmp.w	r9, #0
 8013f5c:	f106 0603 	add.w	r6, r6, #3
 8013f60:	dd48      	ble.n	8013ff4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8013f62:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8013f66:	1417      	asrs	r7, r2, #16
 8013f68:	9902      	ldr	r1, [sp, #8]
 8013f6a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013f6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f72:	fb0b 1707 	mla	r7, fp, r7, r1
 8013f76:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013f7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013f7c:	f817 700a 	ldrb.w	r7, [r7, sl]
 8013f80:	fb1b fb05 	smulbb	fp, fp, r5
 8013f84:	4408      	add	r0, r1
 8013f86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013f88:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013f8c:	440a      	add	r2, r1
 8013f8e:	eb0e 0a07 	add.w	sl, lr, r7
 8013f92:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8013f96:	fb07 b708 	mla	r7, r7, r8, fp
 8013f9a:	b2bf      	uxth	r7, r7
 8013f9c:	f107 0b01 	add.w	fp, r7, #1
 8013fa0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013fa4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013fa8:	fb1b fb05 	smulbb	fp, fp, r5
 8013fac:	123f      	asrs	r7, r7, #8
 8013fae:	f806 7c06 	strb.w	r7, [r6, #-6]
 8013fb2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013fb6:	fb07 b708 	mla	r7, r7, r8, fp
 8013fba:	b2bf      	uxth	r7, r7
 8013fbc:	f107 0b01 	add.w	fp, r7, #1
 8013fc0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013fc4:	123f      	asrs	r7, r7, #8
 8013fc6:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013fca:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013fce:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8013fd2:	fb1a fa05 	smulbb	sl, sl, r5
 8013fd6:	fb07 a708 	mla	r7, r7, r8, sl
 8013fda:	b2bf      	uxth	r7, r7
 8013fdc:	f107 0a01 	add.w	sl, r7, #1
 8013fe0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8013fe4:	123f      	asrs	r7, r7, #8
 8013fe6:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013fea:	e7b5      	b.n	8013f58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8013fec:	2700      	movs	r7, #0
 8013fee:	1bde      	subs	r6, r3, r7
 8013ff0:	2e00      	cmp	r6, #0
 8013ff2:	dc42      	bgt.n	801407a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8013ff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ffc:	441c      	add	r4, r3
 8013ffe:	9b01      	ldr	r3, [sp, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	f340 8092 	ble.w	801412a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8014006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801400a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801400c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014010:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014014:	eef0 6a62 	vmov.f32	s13, s5
 8014018:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801401c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014020:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014024:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8014028:	eef0 6a43 	vmov.f32	s13, s6
 801402c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014030:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8014034:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014038:	ee61 7a27 	vmul.f32	s15, s2, s15
 801403c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014040:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014044:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014048:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801404c:	ee12 2a90 	vmov	r2, s5
 8014050:	eef0 2a47 	vmov.f32	s5, s14
 8014054:	fb92 f3f3 	sdiv	r3, r2, r3
 8014058:	ee13 2a10 	vmov	r2, s6
 801405c:	9311      	str	r3, [sp, #68]	; 0x44
 801405e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014060:	eeb0 3a67 	vmov.f32	s6, s15
 8014064:	fb92 f3f3 	sdiv	r3, r2, r3
 8014068:	9312      	str	r3, [sp, #72]	; 0x48
 801406a:	9b01      	ldr	r3, [sp, #4]
 801406c:	9a03      	ldr	r2, [sp, #12]
 801406e:	3b01      	subs	r3, #1
 8014070:	9301      	str	r3, [sp, #4]
 8014072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014074:	bf08      	it	eq
 8014076:	4613      	moveq	r3, r2
 8014078:	e73a      	b.n	8013ef0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801407a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801407e:	d44e      	bmi.n	801411e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014080:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014084:	4556      	cmp	r6, sl
 8014086:	dd4a      	ble.n	801411e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014088:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801408c:	d447      	bmi.n	801411e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801408e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014092:	4559      	cmp	r1, fp
 8014094:	dd43      	ble.n	801411e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014096:	fa0f f986 	sxth.w	r9, r6
 801409a:	9902      	ldr	r1, [sp, #8]
 801409c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80140a0:	fb0b 1909 	mla	r9, fp, r9, r1
 80140a4:	f814 b006 	ldrb.w	fp, [r4, r6]
 80140a8:	f819 900a 	ldrb.w	r9, [r9, sl]
 80140ac:	fb1b fb05 	smulbb	fp, fp, r5
 80140b0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80140b4:	eb0e 0a09 	add.w	sl, lr, r9
 80140b8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80140bc:	fb09 b908 	mla	r9, r9, r8, fp
 80140c0:	fa1f f989 	uxth.w	r9, r9
 80140c4:	f109 0b01 	add.w	fp, r9, #1
 80140c8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80140cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80140d0:	f804 9006 	strb.w	r9, [r4, r6]
 80140d4:	4426      	add	r6, r4
 80140d6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80140da:	f896 b001 	ldrb.w	fp, [r6, #1]
 80140de:	fb1b fb05 	smulbb	fp, fp, r5
 80140e2:	fb09 b908 	mla	r9, r9, r8, fp
 80140e6:	fa1f f989 	uxth.w	r9, r9
 80140ea:	f109 0b01 	add.w	fp, r9, #1
 80140ee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80140f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80140f6:	f886 9001 	strb.w	r9, [r6, #1]
 80140fa:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80140fe:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014102:	fb1a fa05 	smulbb	sl, sl, r5
 8014106:	fb09 a908 	mla	r9, r9, r8, sl
 801410a:	fa1f f989 	uxth.w	r9, r9
 801410e:	f109 0a01 	add.w	sl, r9, #1
 8014112:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014116:	ea4f 2929 	mov.w	r9, r9, asr #8
 801411a:	f886 9002 	strb.w	r9, [r6, #2]
 801411e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014120:	3701      	adds	r7, #1
 8014122:	4408      	add	r0, r1
 8014124:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014126:	440a      	add	r2, r1
 8014128:	e761      	b.n	8013fee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801412a:	b005      	add	sp, #20
 801412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014134:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014136:	4693      	mov	fp, r2
 8014138:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801413a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801413e:	6868      	ldr	r0, [r5, #4]
 8014140:	6877      	ldr	r7, [r6, #4]
 8014142:	9100      	str	r1, [sp, #0]
 8014144:	3704      	adds	r7, #4
 8014146:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801414a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801414e:	fb00 2404 	mla	r4, r0, r4, r2
 8014152:	682a      	ldr	r2, [r5, #0]
 8014154:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014158:	4414      	add	r4, r2
 801415a:	6832      	ldr	r2, [r6, #0]
 801415c:	9201      	str	r2, [sp, #4]
 801415e:	9a00      	ldr	r2, [sp, #0]
 8014160:	2a00      	cmp	r2, #0
 8014162:	dc03      	bgt.n	801416c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014164:	f1bb 0f00 	cmp.w	fp, #0
 8014168:	f340 80bc 	ble.w	80142e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801416c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801416e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8014172:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014178:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801417c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014180:	2b00      	cmp	r3, #0
 8014182:	dd0c      	ble.n	801419e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014184:	1405      	asrs	r5, r0, #16
 8014186:	d405      	bmi.n	8014194 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014188:	4555      	cmp	r5, sl
 801418a:	da03      	bge.n	8014194 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801418c:	1415      	asrs	r5, r2, #16
 801418e:	d401      	bmi.n	8014194 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014190:	454d      	cmp	r5, r9
 8014192:	db05      	blt.n	80141a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014194:	4440      	add	r0, r8
 8014196:	4472      	add	r2, lr
 8014198:	3b01      	subs	r3, #1
 801419a:	3403      	adds	r4, #3
 801419c:	e7f0      	b.n	8014180 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801419e:	d03f      	beq.n	8014220 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80141a0:	1e5d      	subs	r5, r3, #1
 80141a2:	fb08 0c05 	mla	ip, r8, r5, r0
 80141a6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80141aa:	d42e      	bmi.n	801420a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80141ac:	45d4      	cmp	ip, sl
 80141ae:	da2c      	bge.n	801420a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80141b0:	fb0e 2505 	mla	r5, lr, r5, r2
 80141b4:	142d      	asrs	r5, r5, #16
 80141b6:	d428      	bmi.n	801420a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80141b8:	454d      	cmp	r5, r9
 80141ba:	da26      	bge.n	801420a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80141bc:	1ce5      	adds	r5, r4, #3
 80141be:	469c      	mov	ip, r3
 80141c0:	f1bc 0f00 	cmp.w	ip, #0
 80141c4:	f105 0503 	add.w	r5, r5, #3
 80141c8:	dd25      	ble.n	8014216 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80141ca:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80141ce:	ea4f 4922 	mov.w	r9, r2, asr #16
 80141d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80141d6:	4472      	add	r2, lr
 80141d8:	468a      	mov	sl, r1
 80141da:	9901      	ldr	r1, [sp, #4]
 80141dc:	fb0a 1909 	mla	r9, sl, r9, r1
 80141e0:	1401      	asrs	r1, r0, #16
 80141e2:	4440      	add	r0, r8
 80141e4:	f819 9001 	ldrb.w	r9, [r9, r1]
 80141e8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80141ec:	eb07 0a09 	add.w	sl, r7, r9
 80141f0:	f817 9009 	ldrb.w	r9, [r7, r9]
 80141f4:	f805 9c06 	strb.w	r9, [r5, #-6]
 80141f8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80141fc:	f805 9c05 	strb.w	r9, [r5, #-5]
 8014200:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014204:	f805 9c04 	strb.w	r9, [r5, #-4]
 8014208:	e7da      	b.n	80141c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801420a:	2500      	movs	r5, #0
 801420c:	eba3 0c05 	sub.w	ip, r3, r5
 8014210:	f1bc 0f00 	cmp.w	ip, #0
 8014214:	dc3b      	bgt.n	801428e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8014216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801421a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801421e:	441c      	add	r4, r3
 8014220:	9b00      	ldr	r3, [sp, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	dd5e      	ble.n	80142e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014226:	ee30 0a04 	vadd.f32	s0, s0, s8
 801422a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801422c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014230:	eeb0 6a62 	vmov.f32	s12, s5
 8014234:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014238:	ee31 1a05 	vadd.f32	s2, s2, s10
 801423c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014240:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014244:	eeb0 6a43 	vmov.f32	s12, s6
 8014248:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801424c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014250:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014254:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014258:	ee77 2a62 	vsub.f32	s5, s14, s5
 801425c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014260:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014264:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014268:	ee12 2a90 	vmov	r2, s5
 801426c:	eef0 2a47 	vmov.f32	s5, s14
 8014270:	fb92 f8f3 	sdiv	r8, r2, r3
 8014274:	ee13 2a10 	vmov	r2, s6
 8014278:	eeb0 3a67 	vmov.f32	s6, s15
 801427c:	fb92 fef3 	sdiv	lr, r2, r3
 8014280:	9b00      	ldr	r3, [sp, #0]
 8014282:	3b01      	subs	r3, #1
 8014284:	9300      	str	r3, [sp, #0]
 8014286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014288:	bf08      	it	eq
 801428a:	465b      	moveq	r3, fp
 801428c:	e767      	b.n	801415e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801428e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014292:	d423      	bmi.n	80142dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014294:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8014298:	45cc      	cmp	ip, r9
 801429a:	dd1f      	ble.n	80142dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801429c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80142a0:	d41c      	bmi.n	80142dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80142a2:	68f1      	ldr	r1, [r6, #12]
 80142a4:	4551      	cmp	r1, sl
 80142a6:	dd19      	ble.n	80142dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80142a8:	fa0f fc8c 	sxth.w	ip, ip
 80142ac:	9901      	ldr	r1, [sp, #4]
 80142ae:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80142b2:	f81c c009 	ldrb.w	ip, [ip, r9]
 80142b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80142ba:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80142be:	eb07 090c 	add.w	r9, r7, ip
 80142c2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80142c6:	f804 a00c 	strb.w	sl, [r4, ip]
 80142ca:	44a4      	add	ip, r4
 80142cc:	f899 a001 	ldrb.w	sl, [r9, #1]
 80142d0:	f88c a001 	strb.w	sl, [ip, #1]
 80142d4:	f899 9002 	ldrb.w	r9, [r9, #2]
 80142d8:	f88c 9002 	strb.w	r9, [ip, #2]
 80142dc:	4440      	add	r0, r8
 80142de:	4472      	add	r2, lr
 80142e0:	3501      	adds	r5, #1
 80142e2:	e793      	b.n	801420c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80142e4:	b003      	add	sp, #12
 80142e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80142ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ee:	b085      	sub	sp, #20
 80142f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80142f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80142f6:	9202      	str	r2, [sp, #8]
 80142f8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80142fc:	6860      	ldr	r0, [r4, #4]
 80142fe:	9203      	str	r2, [sp, #12]
 8014300:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014304:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014308:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801430c:	fb00 2505 	mla	r5, r0, r5, r2
 8014310:	6822      	ldr	r2, [r4, #0]
 8014312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014316:	4415      	add	r5, r2
 8014318:	f8dc 2000 	ldr.w	r2, [ip]
 801431c:	9200      	str	r2, [sp, #0]
 801431e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014322:	3204      	adds	r2, #4
 8014324:	9201      	str	r2, [sp, #4]
 8014326:	2900      	cmp	r1, #0
 8014328:	dc03      	bgt.n	8014332 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801432a:	9a02      	ldr	r2, [sp, #8]
 801432c:	2a00      	cmp	r2, #0
 801432e:	f340 8127 	ble.w	8014580 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014334:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014338:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801433c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801433e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014342:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014346:	2b00      	cmp	r3, #0
 8014348:	dd0d      	ble.n	8014366 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801434a:	1422      	asrs	r2, r4, #16
 801434c:	d405      	bmi.n	801435a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801434e:	4542      	cmp	r2, r8
 8014350:	da03      	bge.n	801435a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014352:	1402      	asrs	r2, r0, #16
 8014354:	d401      	bmi.n	801435a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014356:	42ba      	cmp	r2, r7
 8014358:	db06      	blt.n	8014368 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801435a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801435c:	4474      	add	r4, lr
 801435e:	3b01      	subs	r3, #1
 8014360:	3503      	adds	r5, #3
 8014362:	4410      	add	r0, r2
 8014364:	e7ef      	b.n	8014346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014366:	d075      	beq.n	8014454 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8014368:	1e5a      	subs	r2, r3, #1
 801436a:	fb0e 4602 	mla	r6, lr, r2, r4
 801436e:	1436      	asrs	r6, r6, #16
 8014370:	d465      	bmi.n	801443e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014372:	4546      	cmp	r6, r8
 8014374:	da63      	bge.n	801443e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014376:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014378:	fb06 0202 	mla	r2, r6, r2, r0
 801437c:	1412      	asrs	r2, r2, #16
 801437e:	d45e      	bmi.n	801443e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014380:	42ba      	cmp	r2, r7
 8014382:	da5c      	bge.n	801443e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014384:	1cef      	adds	r7, r5, #3
 8014386:	4699      	mov	r9, r3
 8014388:	f1b9 0f00 	cmp.w	r9, #0
 801438c:	dd5d      	ble.n	801444a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801438e:	1402      	asrs	r2, r0, #16
 8014390:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014394:	1426      	asrs	r6, r4, #16
 8014396:	4692      	mov	sl, r2
 8014398:	9a00      	ldr	r2, [sp, #0]
 801439a:	fb08 220a 	mla	r2, r8, sl, r2
 801439e:	5d92      	ldrb	r2, [r2, r6]
 80143a0:	9e01      	ldr	r6, [sp, #4]
 80143a2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80143a6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80143aa:	d041      	beq.n	8014430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80143ac:	9a03      	ldr	r2, [sp, #12]
 80143ae:	fa5f fb86 	uxtb.w	fp, r6
 80143b2:	fb02 f808 	mul.w	r8, r2, r8
 80143b6:	f108 0201 	add.w	r2, r8, #1
 80143ba:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80143be:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80143c2:	1212      	asrs	r2, r2, #8
 80143c4:	fa1f fa82 	uxth.w	sl, r2
 80143c8:	43d2      	mvns	r2, r2
 80143ca:	fb1b fb0a 	smulbb	fp, fp, sl
 80143ce:	b2d2      	uxtb	r2, r2
 80143d0:	fb08 b802 	mla	r8, r8, r2, fp
 80143d4:	fa1f f888 	uxth.w	r8, r8
 80143d8:	f108 0b01 	add.w	fp, r8, #1
 80143dc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80143e0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80143e4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80143e8:	fb1b fb0a 	smulbb	fp, fp, sl
 80143ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80143f0:	fb16 fa0a 	smulbb	sl, r6, sl
 80143f4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80143f8:	f807 8c03 	strb.w	r8, [r7, #-3]
 80143fc:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014400:	fb06 aa02 	mla	sl, r6, r2, sl
 8014404:	fb08 b802 	mla	r8, r8, r2, fp
 8014408:	fa1f fa8a 	uxth.w	sl, sl
 801440c:	fa1f f888 	uxth.w	r8, r8
 8014410:	f10a 0601 	add.w	r6, sl, #1
 8014414:	f108 0b01 	add.w	fp, r8, #1
 8014418:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801441c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014420:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014424:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014428:	f807 ac01 	strb.w	sl, [r7, #-1]
 801442c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014430:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014432:	4474      	add	r4, lr
 8014434:	3703      	adds	r7, #3
 8014436:	f109 39ff 	add.w	r9, r9, #4294967295
 801443a:	4410      	add	r0, r2
 801443c:	e7a4      	b.n	8014388 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801443e:	f04f 0800 	mov.w	r8, #0
 8014442:	eba3 0208 	sub.w	r2, r3, r8
 8014446:	2a00      	cmp	r2, #0
 8014448:	dc3b      	bgt.n	80144c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801444a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801444e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014452:	441d      	add	r5, r3
 8014454:	2900      	cmp	r1, #0
 8014456:	f340 8093 	ble.w	8014580 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801445a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014460:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014464:	3901      	subs	r1, #1
 8014466:	eeb0 6a62 	vmov.f32	s12, s5
 801446a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801446e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014472:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014476:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801447a:	eeb0 6a43 	vmov.f32	s12, s6
 801447e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014482:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014486:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801448a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801448e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014492:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014496:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801449a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801449e:	ee12 2a90 	vmov	r2, s5
 80144a2:	eef0 2a47 	vmov.f32	s5, s14
 80144a6:	fb92 fef3 	sdiv	lr, r2, r3
 80144aa:	ee13 2a10 	vmov	r2, s6
 80144ae:	eeb0 3a67 	vmov.f32	s6, s15
 80144b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80144b6:	9a02      	ldr	r2, [sp, #8]
 80144b8:	9312      	str	r3, [sp, #72]	; 0x48
 80144ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144bc:	bf08      	it	eq
 80144be:	4613      	moveq	r3, r2
 80144c0:	e731      	b.n	8014326 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80144c2:	1427      	asrs	r7, r4, #16
 80144c4:	d456      	bmi.n	8014574 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80144c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80144ca:	42be      	cmp	r6, r7
 80144cc:	dd52      	ble.n	8014574 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80144ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 80144d2:	d44f      	bmi.n	8014574 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80144d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80144d8:	454a      	cmp	r2, r9
 80144da:	dd4b      	ble.n	8014574 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80144dc:	9a00      	ldr	r2, [sp, #0]
 80144de:	b236      	sxth	r6, r6
 80144e0:	fb09 2606 	mla	r6, r9, r6, r2
 80144e4:	5df2      	ldrb	r2, [r6, r7]
 80144e6:	9e01      	ldr	r6, [sp, #4]
 80144e8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80144ec:	0e3a      	lsrs	r2, r7, #24
 80144ee:	d041      	beq.n	8014574 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80144f0:	9e03      	ldr	r6, [sp, #12]
 80144f2:	fa5f fb87 	uxtb.w	fp, r7
 80144f6:	4372      	muls	r2, r6
 80144f8:	1c56      	adds	r6, r2, #1
 80144fa:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80144fe:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014502:	1212      	asrs	r2, r2, #8
 8014504:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014508:	fa1f fa82 	uxth.w	sl, r2
 801450c:	43d2      	mvns	r2, r2
 801450e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014512:	b2d2      	uxtb	r2, r2
 8014514:	fb09 b902 	mla	r9, r9, r2, fp
 8014518:	fa1f f989 	uxth.w	r9, r9
 801451c:	f109 0b01 	add.w	fp, r9, #1
 8014520:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014524:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014528:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801452c:	fb1b fb0a 	smulbb	fp, fp, sl
 8014530:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014534:	fb17 fa0a 	smulbb	sl, r7, sl
 8014538:	f805 9006 	strb.w	r9, [r5, r6]
 801453c:	442e      	add	r6, r5
 801453e:	78b7      	ldrb	r7, [r6, #2]
 8014540:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014544:	fb07 aa02 	mla	sl, r7, r2, sl
 8014548:	fb09 b902 	mla	r9, r9, r2, fp
 801454c:	fa1f fa8a 	uxth.w	sl, sl
 8014550:	fa1f f989 	uxth.w	r9, r9
 8014554:	f10a 0701 	add.w	r7, sl, #1
 8014558:	f109 0b01 	add.w	fp, r9, #1
 801455c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014560:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014564:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014568:	ea4f 2929 	mov.w	r9, r9, asr #8
 801456c:	f886 a002 	strb.w	sl, [r6, #2]
 8014570:	f886 9001 	strb.w	r9, [r6, #1]
 8014574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014576:	4474      	add	r4, lr
 8014578:	f108 0801 	add.w	r8, r8, #1
 801457c:	4410      	add	r0, r2
 801457e:	e760      	b.n	8014442 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014580:	b005      	add	sp, #20
 8014582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014586 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458a:	b085      	sub	sp, #20
 801458c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014590:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014592:	9203      	str	r2, [sp, #12]
 8014594:	6868      	ldr	r0, [r5, #4]
 8014596:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801459a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801459e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80145a2:	fb00 2404 	mla	r4, r0, r4, r2
 80145a6:	682a      	ldr	r2, [r5, #0]
 80145a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80145ac:	4414      	add	r4, r2
 80145ae:	f8dc 2000 	ldr.w	r2, [ip]
 80145b2:	9201      	str	r2, [sp, #4]
 80145b4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80145b8:	3204      	adds	r2, #4
 80145ba:	9202      	str	r2, [sp, #8]
 80145bc:	2900      	cmp	r1, #0
 80145be:	dc03      	bgt.n	80145c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80145c0:	9a03      	ldr	r2, [sp, #12]
 80145c2:	2a00      	cmp	r2, #0
 80145c4:	f340 8137 	ble.w	8014836 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80145c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145ca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80145ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80145d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80145d4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80145d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80145dc:	2b00      	cmp	r3, #0
 80145de:	dd0d      	ble.n	80145fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80145e0:	1405      	asrs	r5, r0, #16
 80145e2:	d405      	bmi.n	80145f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145e4:	4545      	cmp	r5, r8
 80145e6:	da03      	bge.n	80145f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145e8:	1415      	asrs	r5, r2, #16
 80145ea:	d401      	bmi.n	80145f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80145ec:	42bd      	cmp	r5, r7
 80145ee:	db06      	blt.n	80145fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80145f0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80145f2:	4470      	add	r0, lr
 80145f4:	3b01      	subs	r3, #1
 80145f6:	3403      	adds	r4, #3
 80145f8:	442a      	add	r2, r5
 80145fa:	e7ef      	b.n	80145dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80145fc:	d070      	beq.n	80146e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80145fe:	1e5d      	subs	r5, r3, #1
 8014600:	fb0e 0605 	mla	r6, lr, r5, r0
 8014604:	1436      	asrs	r6, r6, #16
 8014606:	d462      	bmi.n	80146ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014608:	4546      	cmp	r6, r8
 801460a:	da60      	bge.n	80146ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801460c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801460e:	fb06 2505 	mla	r5, r6, r5, r2
 8014612:	142d      	asrs	r5, r5, #16
 8014614:	d45b      	bmi.n	80146ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014616:	42bd      	cmp	r5, r7
 8014618:	da59      	bge.n	80146ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801461a:	1ce5      	adds	r5, r4, #3
 801461c:	469a      	mov	sl, r3
 801461e:	f1ba 0f00 	cmp.w	sl, #0
 8014622:	dd58      	ble.n	80146d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014624:	1416      	asrs	r6, r2, #16
 8014626:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801462a:	1407      	asrs	r7, r0, #16
 801462c:	46b1      	mov	r9, r6
 801462e:	9e01      	ldr	r6, [sp, #4]
 8014630:	fb08 6609 	mla	r6, r8, r9, r6
 8014634:	5df6      	ldrb	r6, [r6, r7]
 8014636:	9f02      	ldr	r7, [sp, #8]
 8014638:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801463c:	0e37      	lsrs	r7, r6, #24
 801463e:	2fff      	cmp	r7, #255	; 0xff
 8014640:	f000 80f0 	beq.w	8014824 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8014644:	fa5f f887 	uxtb.w	r8, r7
 8014648:	b3d7      	cbz	r7, 80146c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801464a:	fa1f f788 	uxth.w	r7, r8
 801464e:	ea6f 0808 	mvn.w	r8, r8
 8014652:	fa5f fb86 	uxtb.w	fp, r6
 8014656:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801465a:	fa5f f888 	uxtb.w	r8, r8
 801465e:	fb1b fb07 	smulbb	fp, fp, r7
 8014662:	fb09 b908 	mla	r9, r9, r8, fp
 8014666:	fa1f f989 	uxth.w	r9, r9
 801466a:	f109 0b01 	add.w	fp, r9, #1
 801466e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014672:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014676:	fb1b fb08 	smulbb	fp, fp, r8
 801467a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801467e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014682:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014686:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801468a:	fb09 b907 	mla	r9, r9, r7, fp
 801468e:	fa1f f989 	uxth.w	r9, r9
 8014692:	f109 0b01 	add.w	fp, r9, #1
 8014696:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801469a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801469e:	f805 9c02 	strb.w	r9, [r5, #-2]
 80146a2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80146a6:	fb19 f808 	smulbb	r8, r9, r8
 80146aa:	fb06 8607 	mla	r6, r6, r7, r8
 80146ae:	b2b6      	uxth	r6, r6
 80146b0:	f106 0801 	add.w	r8, r6, #1
 80146b4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80146b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80146bc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80146c0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80146c2:	4470      	add	r0, lr
 80146c4:	3503      	adds	r5, #3
 80146c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ca:	4432      	add	r2, r6
 80146cc:	e7a7      	b.n	801461e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80146ce:	2600      	movs	r6, #0
 80146d0:	1b9d      	subs	r5, r3, r6
 80146d2:	2d00      	cmp	r5, #0
 80146d4:	dc3b      	bgt.n	801474e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80146d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146de:	441c      	add	r4, r3
 80146e0:	2900      	cmp	r1, #0
 80146e2:	f340 80a8 	ble.w	8014836 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80146e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80146ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80146f0:	3901      	subs	r1, #1
 80146f2:	eeb0 6a62 	vmov.f32	s12, s5
 80146f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80146fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80146fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014702:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014706:	eeb0 6a43 	vmov.f32	s12, s6
 801470a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801470e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014712:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014716:	ee61 7a27 	vmul.f32	s15, s2, s15
 801471a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801471e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014722:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014726:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801472a:	ee12 2a90 	vmov	r2, s5
 801472e:	eef0 2a47 	vmov.f32	s5, s14
 8014732:	fb92 fef3 	sdiv	lr, r2, r3
 8014736:	ee13 2a10 	vmov	r2, s6
 801473a:	eeb0 3a67 	vmov.f32	s6, s15
 801473e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014742:	9a03      	ldr	r2, [sp, #12]
 8014744:	9312      	str	r3, [sp, #72]	; 0x48
 8014746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014748:	bf08      	it	eq
 801474a:	4613      	moveq	r3, r2
 801474c:	e736      	b.n	80145bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801474e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014752:	d457      	bmi.n	8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014754:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8014758:	4547      	cmp	r7, r8
 801475a:	dd53      	ble.n	8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801475c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014760:	d450      	bmi.n	8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014762:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014766:	454d      	cmp	r5, r9
 8014768:	dd4c      	ble.n	8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801476a:	9d01      	ldr	r5, [sp, #4]
 801476c:	b23f      	sxth	r7, r7
 801476e:	fb09 5707 	mla	r7, r9, r7, r5
 8014772:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014776:	9f02      	ldr	r7, [sp, #8]
 8014778:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801477c:	0e2f      	lsrs	r7, r5, #24
 801477e:	2fff      	cmp	r7, #255	; 0xff
 8014780:	d045      	beq.n	801480e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014782:	fa5f f987 	uxtb.w	r9, r7
 8014786:	b3ef      	cbz	r7, 8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014788:	fa1f f889 	uxth.w	r8, r9
 801478c:	ea6f 0909 	mvn.w	r9, r9
 8014790:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014794:	fa5f fb85 	uxtb.w	fp, r5
 8014798:	f814 a007 	ldrb.w	sl, [r4, r7]
 801479c:	fa5f f989 	uxtb.w	r9, r9
 80147a0:	fb1b fb08 	smulbb	fp, fp, r8
 80147a4:	fb0a ba09 	mla	sl, sl, r9, fp
 80147a8:	fa1f fa8a 	uxth.w	sl, sl
 80147ac:	f10a 0b01 	add.w	fp, sl, #1
 80147b0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80147b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80147b8:	f804 a007 	strb.w	sl, [r4, r7]
 80147bc:	4427      	add	r7, r4
 80147be:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80147c2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80147c6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80147ca:	fb1b fb09 	smulbb	fp, fp, r9
 80147ce:	fb0a ba08 	mla	sl, sl, r8, fp
 80147d2:	fa1f fa8a 	uxth.w	sl, sl
 80147d6:	f10a 0b01 	add.w	fp, sl, #1
 80147da:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80147de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80147e2:	f887 a001 	strb.w	sl, [r7, #1]
 80147e6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80147ea:	fb1a f909 	smulbb	r9, sl, r9
 80147ee:	fb05 9508 	mla	r5, r5, r8, r9
 80147f2:	b2ad      	uxth	r5, r5
 80147f4:	f105 0901 	add.w	r9, r5, #1
 80147f8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80147fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014800:	f887 9002 	strb.w	r9, [r7, #2]
 8014804:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014806:	4470      	add	r0, lr
 8014808:	3601      	adds	r6, #1
 801480a:	442a      	add	r2, r5
 801480c:	e760      	b.n	80146d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801480e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014812:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8014816:	55e5      	strb	r5, [r4, r7]
 8014818:	4427      	add	r7, r4
 801481a:	0c2d      	lsrs	r5, r5, #16
 801481c:	f887 8001 	strb.w	r8, [r7, #1]
 8014820:	70bd      	strb	r5, [r7, #2]
 8014822:	e7ef      	b.n	8014804 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014824:	0a37      	lsrs	r7, r6, #8
 8014826:	f805 6c03 	strb.w	r6, [r5, #-3]
 801482a:	0c36      	lsrs	r6, r6, #16
 801482c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8014830:	f805 6c01 	strb.w	r6, [r5, #-1]
 8014834:	e744      	b.n	80146c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014836:	b005      	add	sp, #20
 8014838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801483c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801483c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014840:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014842:	9201      	str	r2, [sp, #4]
 8014844:	6870      	ldr	r0, [r6, #4]
 8014846:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801484a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801484e:	fa1f fe85 	uxth.w	lr, r5
 8014852:	43ed      	mvns	r5, r5
 8014854:	f8dc 8000 	ldr.w	r8, [ip]
 8014858:	b2ed      	uxtb	r5, r5
 801485a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801485e:	fb00 2404 	mla	r4, r0, r4, r2
 8014862:	6832      	ldr	r2, [r6, #0]
 8014864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014868:	4414      	add	r4, r2
 801486a:	2900      	cmp	r1, #0
 801486c:	dc03      	bgt.n	8014876 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801486e:	9a01      	ldr	r2, [sp, #4]
 8014870:	2a00      	cmp	r2, #0
 8014872:	f340 810d 	ble.w	8014a90 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014878:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801487c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014882:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014886:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801488a:	2b00      	cmp	r3, #0
 801488c:	dd0e      	ble.n	80148ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801488e:	1406      	asrs	r6, r0, #16
 8014890:	d405      	bmi.n	801489e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014892:	4556      	cmp	r6, sl
 8014894:	da03      	bge.n	801489e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014896:	1416      	asrs	r6, r2, #16
 8014898:	d401      	bmi.n	801489e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801489a:	454e      	cmp	r6, r9
 801489c:	db07      	blt.n	80148ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801489e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80148a0:	3b01      	subs	r3, #1
 80148a2:	3403      	adds	r4, #3
 80148a4:	4430      	add	r0, r6
 80148a6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80148a8:	4432      	add	r2, r6
 80148aa:	e7ee      	b.n	801488a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80148ac:	d060      	beq.n	8014970 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80148ae:	1e5e      	subs	r6, r3, #1
 80148b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80148b2:	fb07 0706 	mla	r7, r7, r6, r0
 80148b6:	143f      	asrs	r7, r7, #16
 80148b8:	d451      	bmi.n	801495e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80148ba:	4557      	cmp	r7, sl
 80148bc:	da4f      	bge.n	801495e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80148be:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80148c0:	fb07 2606 	mla	r6, r7, r6, r2
 80148c4:	1436      	asrs	r6, r6, #16
 80148c6:	d44a      	bmi.n	801495e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80148c8:	454e      	cmp	r6, r9
 80148ca:	da48      	bge.n	801495e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80148cc:	1ce6      	adds	r6, r4, #3
 80148ce:	4699      	mov	r9, r3
 80148d0:	f1b9 0f00 	cmp.w	r9, #0
 80148d4:	f106 0603 	add.w	r6, r6, #3
 80148d8:	dd45      	ble.n	8014966 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80148da:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80148de:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80148e2:	1417      	asrs	r7, r2, #16
 80148e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80148e8:	fb0b a707 	mla	r7, fp, r7, sl
 80148ec:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80148f0:	fb1b fb05 	smulbb	fp, fp, r5
 80148f4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80148f8:	eb08 0a07 	add.w	sl, r8, r7
 80148fc:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014900:	fb07 b70e 	mla	r7, r7, lr, fp
 8014904:	b2bf      	uxth	r7, r7
 8014906:	f107 0b01 	add.w	fp, r7, #1
 801490a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801490e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014912:	fb1b fb05 	smulbb	fp, fp, r5
 8014916:	123f      	asrs	r7, r7, #8
 8014918:	f806 7c06 	strb.w	r7, [r6, #-6]
 801491c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014920:	fb07 b70e 	mla	r7, r7, lr, fp
 8014924:	b2bf      	uxth	r7, r7
 8014926:	f107 0b01 	add.w	fp, r7, #1
 801492a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801492e:	123f      	asrs	r7, r7, #8
 8014930:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014934:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014938:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801493c:	fb1a fa05 	smulbb	sl, sl, r5
 8014940:	fb07 a70e 	mla	r7, r7, lr, sl
 8014944:	b2bf      	uxth	r7, r7
 8014946:	f107 0a01 	add.w	sl, r7, #1
 801494a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801494e:	123f      	asrs	r7, r7, #8
 8014950:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014954:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014956:	4438      	add	r0, r7
 8014958:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801495a:	443a      	add	r2, r7
 801495c:	e7b8      	b.n	80148d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801495e:	2700      	movs	r7, #0
 8014960:	1bde      	subs	r6, r3, r7
 8014962:	2e00      	cmp	r6, #0
 8014964:	dc3f      	bgt.n	80149e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801496a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801496e:	441c      	add	r4, r3
 8014970:	2900      	cmp	r1, #0
 8014972:	f340 808d 	ble.w	8014a90 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801497a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801497c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014980:	3901      	subs	r1, #1
 8014982:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014986:	eef0 6a62 	vmov.f32	s13, s5
 801498a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801498e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014992:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014996:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801499a:	eef0 6a43 	vmov.f32	s13, s6
 801499e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80149a2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80149a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80149aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80149ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80149b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80149b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80149ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80149be:	ee12 2a90 	vmov	r2, s5
 80149c2:	eef0 2a47 	vmov.f32	s5, s14
 80149c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80149ca:	ee13 2a10 	vmov	r2, s6
 80149ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80149d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149d2:	eeb0 3a67 	vmov.f32	s6, s15
 80149d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80149da:	9a01      	ldr	r2, [sp, #4]
 80149dc:	9310      	str	r3, [sp, #64]	; 0x40
 80149de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149e0:	bf08      	it	eq
 80149e2:	4613      	moveq	r3, r2
 80149e4:	e741      	b.n	801486a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80149e6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80149ea:	d44b      	bmi.n	8014a84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80149ec:	f8dc b008 	ldr.w	fp, [ip, #8]
 80149f0:	45cb      	cmp	fp, r9
 80149f2:	dd47      	ble.n	8014a84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80149f4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80149f8:	d444      	bmi.n	8014a84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80149fa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80149fe:	4556      	cmp	r6, sl
 8014a00:	dd40      	ble.n	8014a84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014a02:	fa0f f68b 	sxth.w	r6, fp
 8014a06:	fb0a 9906 	mla	r9, sl, r6, r9
 8014a0a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014a0e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014a12:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014a16:	fb1b fb05 	smulbb	fp, fp, r5
 8014a1a:	eb08 0a09 	add.w	sl, r8, r9
 8014a1e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8014a22:	fb09 b90e 	mla	r9, r9, lr, fp
 8014a26:	fa1f f989 	uxth.w	r9, r9
 8014a2a:	f109 0b01 	add.w	fp, r9, #1
 8014a2e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014a32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a36:	f804 9006 	strb.w	r9, [r4, r6]
 8014a3a:	4426      	add	r6, r4
 8014a3c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014a40:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014a44:	fb1b fb05 	smulbb	fp, fp, r5
 8014a48:	fb09 b90e 	mla	r9, r9, lr, fp
 8014a4c:	fa1f f989 	uxth.w	r9, r9
 8014a50:	f109 0b01 	add.w	fp, r9, #1
 8014a54:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014a58:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a5c:	f886 9001 	strb.w	r9, [r6, #1]
 8014a60:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014a64:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014a68:	fb1a fa05 	smulbb	sl, sl, r5
 8014a6c:	fb09 a90e 	mla	r9, r9, lr, sl
 8014a70:	fa1f f989 	uxth.w	r9, r9
 8014a74:	f109 0a01 	add.w	sl, r9, #1
 8014a78:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014a7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a80:	f886 9002 	strb.w	r9, [r6, #2]
 8014a84:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014a86:	3701      	adds	r7, #1
 8014a88:	4430      	add	r0, r6
 8014a8a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014a8c:	4432      	add	r2, r6
 8014a8e:	e767      	b.n	8014960 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8014a90:	b003      	add	sp, #12
 8014a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014a96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014aa0:	9201      	str	r2, [sp, #4]
 8014aa2:	6868      	ldr	r0, [r5, #4]
 8014aa4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014aa6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014aaa:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8014aae:	fb00 2404 	mla	r4, r0, r4, r2
 8014ab2:	682a      	ldr	r2, [r5, #0]
 8014ab4:	f8d7 8000 	ldr.w	r8, [r7]
 8014ab8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014abc:	4414      	add	r4, r2
 8014abe:	2900      	cmp	r1, #0
 8014ac0:	dc03      	bgt.n	8014aca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014ac2:	9a01      	ldr	r2, [sp, #4]
 8014ac4:	2a00      	cmp	r2, #0
 8014ac6:	f340 80af 	ble.w	8014c28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014aca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014acc:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8014ad0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ad6:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8014ada:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd0c      	ble.n	8014afc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014ae2:	1405      	asrs	r5, r0, #16
 8014ae4:	d405      	bmi.n	8014af2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014ae6:	4555      	cmp	r5, sl
 8014ae8:	da03      	bge.n	8014af2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014aea:	1415      	asrs	r5, r2, #16
 8014aec:	d401      	bmi.n	8014af2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014aee:	454d      	cmp	r5, r9
 8014af0:	db05      	blt.n	8014afe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014af2:	4470      	add	r0, lr
 8014af4:	4462      	add	r2, ip
 8014af6:	3b01      	subs	r3, #1
 8014af8:	3403      	adds	r4, #3
 8014afa:	e7f0      	b.n	8014ade <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014afc:	d038      	beq.n	8014b70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014afe:	1e5d      	subs	r5, r3, #1
 8014b00:	fb0e 0605 	mla	r6, lr, r5, r0
 8014b04:	1436      	asrs	r6, r6, #16
 8014b06:	d42a      	bmi.n	8014b5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014b08:	4556      	cmp	r6, sl
 8014b0a:	da28      	bge.n	8014b5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014b0c:	fb0c 2505 	mla	r5, ip, r5, r2
 8014b10:	142d      	asrs	r5, r5, #16
 8014b12:	d424      	bmi.n	8014b5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014b14:	454d      	cmp	r5, r9
 8014b16:	da22      	bge.n	8014b5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014b18:	1ce6      	adds	r6, r4, #3
 8014b1a:	4699      	mov	r9, r3
 8014b1c:	f1b9 0f00 	cmp.w	r9, #0
 8014b20:	f106 0603 	add.w	r6, r6, #3
 8014b24:	dd1f      	ble.n	8014b66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8014b26:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8014b2a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014b2e:	1415      	asrs	r5, r2, #16
 8014b30:	4470      	add	r0, lr
 8014b32:	4462      	add	r2, ip
 8014b34:	f109 39ff 	add.w	r9, r9, #4294967295
 8014b38:	fb0b a505 	mla	r5, fp, r5, sl
 8014b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b40:	eb08 0a05 	add.w	sl, r8, r5
 8014b44:	f818 5005 	ldrb.w	r5, [r8, r5]
 8014b48:	f806 5c06 	strb.w	r5, [r6, #-6]
 8014b4c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8014b50:	f806 5c05 	strb.w	r5, [r6, #-5]
 8014b54:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8014b58:	f806 5c04 	strb.w	r5, [r6, #-4]
 8014b5c:	e7de      	b.n	8014b1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8014b5e:	2600      	movs	r6, #0
 8014b60:	1b9d      	subs	r5, r3, r6
 8014b62:	2d00      	cmp	r5, #0
 8014b64:	dc38      	bgt.n	8014bd8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b6e:	441c      	add	r4, r3
 8014b70:	2900      	cmp	r1, #0
 8014b72:	dd59      	ble.n	8014c28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014b74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b7e:	3901      	subs	r1, #1
 8014b80:	eeb0 6a62 	vmov.f32	s12, s5
 8014b84:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b90:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014b94:	eeb0 6a43 	vmov.f32	s12, s6
 8014b98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b9c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014ba0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014ba4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014ba8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014bac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014bb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014bb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014bb8:	ee12 2a90 	vmov	r2, s5
 8014bbc:	eef0 2a47 	vmov.f32	s5, s14
 8014bc0:	fb92 fef3 	sdiv	lr, r2, r3
 8014bc4:	ee13 2a10 	vmov	r2, s6
 8014bc8:	eeb0 3a67 	vmov.f32	s6, s15
 8014bcc:	fb92 fcf3 	sdiv	ip, r2, r3
 8014bd0:	9a01      	ldr	r2, [sp, #4]
 8014bd2:	bf08      	it	eq
 8014bd4:	4613      	moveq	r3, r2
 8014bd6:	e772      	b.n	8014abe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8014bd8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014bdc:	d420      	bmi.n	8014c20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014bde:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8014be2:	45cb      	cmp	fp, r9
 8014be4:	dd1c      	ble.n	8014c20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014be6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014bea:	d419      	bmi.n	8014c20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014bec:	68fd      	ldr	r5, [r7, #12]
 8014bee:	4555      	cmp	r5, sl
 8014bf0:	dd16      	ble.n	8014c20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014bf2:	fa0f f58b 	sxth.w	r5, fp
 8014bf6:	fb0a 9505 	mla	r5, sl, r5, r9
 8014bfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bfe:	f818 9005 	ldrb.w	r9, [r8, r5]
 8014c02:	eb08 0b05 	add.w	fp, r8, r5
 8014c06:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8014c0a:	f804 9005 	strb.w	r9, [r4, r5]
 8014c0e:	4425      	add	r5, r4
 8014c10:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8014c14:	f885 9001 	strb.w	r9, [r5, #1]
 8014c18:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8014c1c:	f885 9002 	strb.w	r9, [r5, #2]
 8014c20:	4470      	add	r0, lr
 8014c22:	4462      	add	r2, ip
 8014c24:	3601      	adds	r6, #1
 8014c26:	e79b      	b.n	8014b60 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8014c28:	b003      	add	sp, #12
 8014c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c32:	b085      	sub	sp, #20
 8014c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014c3a:	9202      	str	r2, [sp, #8]
 8014c3c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014c40:	6860      	ldr	r0, [r4, #4]
 8014c42:	9203      	str	r2, [sp, #12]
 8014c44:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014c48:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014c4c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014c50:	fb00 2505 	mla	r5, r0, r5, r2
 8014c54:	6822      	ldr	r2, [r4, #0]
 8014c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c5a:	4415      	add	r5, r2
 8014c5c:	f8dc 2000 	ldr.w	r2, [ip]
 8014c60:	9201      	str	r2, [sp, #4]
 8014c62:	2900      	cmp	r1, #0
 8014c64:	dc03      	bgt.n	8014c6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8014c66:	9a02      	ldr	r2, [sp, #8]
 8014c68:	2a00      	cmp	r2, #0
 8014c6a:	f340 8122 	ble.w	8014eb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c70:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c74:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014c78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c7a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014c7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	dd0d      	ble.n	8014ca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014c86:	1422      	asrs	r2, r4, #16
 8014c88:	d405      	bmi.n	8014c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c8a:	4542      	cmp	r2, r8
 8014c8c:	da03      	bge.n	8014c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c8e:	1402      	asrs	r2, r0, #16
 8014c90:	d401      	bmi.n	8014c96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c92:	42ba      	cmp	r2, r7
 8014c94:	db06      	blt.n	8014ca4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c98:	4474      	add	r4, lr
 8014c9a:	3b01      	subs	r3, #1
 8014c9c:	3503      	adds	r5, #3
 8014c9e:	4410      	add	r0, r2
 8014ca0:	e7ef      	b.n	8014c82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8014ca2:	d072      	beq.n	8014d8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8014ca4:	1e5a      	subs	r2, r3, #1
 8014ca6:	fb0e 4602 	mla	r6, lr, r2, r4
 8014caa:	1436      	asrs	r6, r6, #16
 8014cac:	d462      	bmi.n	8014d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014cae:	4546      	cmp	r6, r8
 8014cb0:	da60      	bge.n	8014d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014cb2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014cb4:	fb06 0202 	mla	r2, r6, r2, r0
 8014cb8:	1412      	asrs	r2, r2, #16
 8014cba:	d45b      	bmi.n	8014d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014cbc:	42ba      	cmp	r2, r7
 8014cbe:	da59      	bge.n	8014d74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014cc0:	1cef      	adds	r7, r5, #3
 8014cc2:	4699      	mov	r9, r3
 8014cc4:	f1b9 0f00 	cmp.w	r9, #0
 8014cc8:	dd5a      	ble.n	8014d80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014cca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014cce:	1426      	asrs	r6, r4, #16
 8014cd0:	1402      	asrs	r2, r0, #16
 8014cd2:	fb08 6202 	mla	r2, r8, r2, r6
 8014cd6:	9e01      	ldr	r6, [sp, #4]
 8014cd8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014cdc:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014ce0:	d041      	beq.n	8014d66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014ce2:	9a03      	ldr	r2, [sp, #12]
 8014ce4:	fa5f fb86 	uxtb.w	fp, r6
 8014ce8:	fb02 f808 	mul.w	r8, r2, r8
 8014cec:	f108 0201 	add.w	r2, r8, #1
 8014cf0:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8014cf4:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014cf8:	1212      	asrs	r2, r2, #8
 8014cfa:	fa1f fa82 	uxth.w	sl, r2
 8014cfe:	43d2      	mvns	r2, r2
 8014d00:	fb1b fb0a 	smulbb	fp, fp, sl
 8014d04:	b2d2      	uxtb	r2, r2
 8014d06:	fb08 b802 	mla	r8, r8, r2, fp
 8014d0a:	fa1f f888 	uxth.w	r8, r8
 8014d0e:	f108 0b01 	add.w	fp, r8, #1
 8014d12:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014d16:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014d1a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014d1e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014d22:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014d26:	fb16 fa0a 	smulbb	sl, r6, sl
 8014d2a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014d2e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014d32:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014d36:	fb06 aa02 	mla	sl, r6, r2, sl
 8014d3a:	fb08 b802 	mla	r8, r8, r2, fp
 8014d3e:	fa1f fa8a 	uxth.w	sl, sl
 8014d42:	fa1f f888 	uxth.w	r8, r8
 8014d46:	f10a 0601 	add.w	r6, sl, #1
 8014d4a:	f108 0b01 	add.w	fp, r8, #1
 8014d4e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014d52:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014d56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014d5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014d5e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014d62:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d68:	4474      	add	r4, lr
 8014d6a:	3703      	adds	r7, #3
 8014d6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d70:	4410      	add	r0, r2
 8014d72:	e7a7      	b.n	8014cc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014d74:	f04f 0800 	mov.w	r8, #0
 8014d78:	eba3 0208 	sub.w	r2, r3, r8
 8014d7c:	2a00      	cmp	r2, #0
 8014d7e:	dc3b      	bgt.n	8014df8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014d80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d88:	441d      	add	r5, r3
 8014d8a:	2900      	cmp	r1, #0
 8014d8c:	f340 8091 	ble.w	8014eb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014d90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d9a:	3901      	subs	r1, #1
 8014d9c:	eeb0 6a62 	vmov.f32	s12, s5
 8014da0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014da4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014da8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014dac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014db0:	eeb0 6a43 	vmov.f32	s12, s6
 8014db4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014db8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014dbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014dc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014dc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014dc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014dcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014dd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014dd4:	ee12 2a90 	vmov	r2, s5
 8014dd8:	eef0 2a47 	vmov.f32	s5, s14
 8014ddc:	fb92 fef3 	sdiv	lr, r2, r3
 8014de0:	ee13 2a10 	vmov	r2, s6
 8014de4:	eeb0 3a67 	vmov.f32	s6, s15
 8014de8:	fb92 f3f3 	sdiv	r3, r2, r3
 8014dec:	9a02      	ldr	r2, [sp, #8]
 8014dee:	9312      	str	r3, [sp, #72]	; 0x48
 8014df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014df2:	bf08      	it	eq
 8014df4:	4613      	moveq	r3, r2
 8014df6:	e734      	b.n	8014c62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014df8:	1427      	asrs	r7, r4, #16
 8014dfa:	d454      	bmi.n	8014ea6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014dfc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014e00:	42be      	cmp	r6, r7
 8014e02:	dd50      	ble.n	8014ea6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014e04:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014e08:	d44d      	bmi.n	8014ea6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014e0a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014e0e:	454a      	cmp	r2, r9
 8014e10:	dd49      	ble.n	8014ea6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014e12:	b236      	sxth	r6, r6
 8014e14:	9a01      	ldr	r2, [sp, #4]
 8014e16:	fb09 7606 	mla	r6, r9, r6, r7
 8014e1a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014e1e:	0e3a      	lsrs	r2, r7, #24
 8014e20:	d041      	beq.n	8014ea6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014e22:	9e03      	ldr	r6, [sp, #12]
 8014e24:	fa5f fb87 	uxtb.w	fp, r7
 8014e28:	4372      	muls	r2, r6
 8014e2a:	1c56      	adds	r6, r2, #1
 8014e2c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014e30:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014e34:	1212      	asrs	r2, r2, #8
 8014e36:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014e3a:	fa1f fa82 	uxth.w	sl, r2
 8014e3e:	43d2      	mvns	r2, r2
 8014e40:	fb1b fb0a 	smulbb	fp, fp, sl
 8014e44:	b2d2      	uxtb	r2, r2
 8014e46:	fb09 b902 	mla	r9, r9, r2, fp
 8014e4a:	fa1f f989 	uxth.w	r9, r9
 8014e4e:	f109 0b01 	add.w	fp, r9, #1
 8014e52:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014e56:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014e5a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014e5e:	fb1b fb0a 	smulbb	fp, fp, sl
 8014e62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e66:	fb17 fa0a 	smulbb	sl, r7, sl
 8014e6a:	f805 9006 	strb.w	r9, [r5, r6]
 8014e6e:	442e      	add	r6, r5
 8014e70:	78b7      	ldrb	r7, [r6, #2]
 8014e72:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014e76:	fb07 aa02 	mla	sl, r7, r2, sl
 8014e7a:	fb09 b902 	mla	r9, r9, r2, fp
 8014e7e:	fa1f fa8a 	uxth.w	sl, sl
 8014e82:	fa1f f989 	uxth.w	r9, r9
 8014e86:	f10a 0701 	add.w	r7, sl, #1
 8014e8a:	f109 0b01 	add.w	fp, r9, #1
 8014e8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014e92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014e96:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e9e:	f886 a002 	strb.w	sl, [r6, #2]
 8014ea2:	f886 9001 	strb.w	r9, [r6, #1]
 8014ea6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ea8:	4474      	add	r4, lr
 8014eaa:	f108 0801 	add.w	r8, r8, #1
 8014eae:	4410      	add	r0, r2
 8014eb0:	e762      	b.n	8014d78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014eb2:	b005      	add	sp, #20
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014eb8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ebc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ec2:	9201      	str	r2, [sp, #4]
 8014ec4:	6860      	ldr	r0, [r4, #4]
 8014ec6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014eca:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8014ece:	fb00 2505 	mla	r5, r0, r5, r2
 8014ed2:	6822      	ldr	r2, [r4, #0]
 8014ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ed8:	4415      	add	r5, r2
 8014eda:	f8dc 2000 	ldr.w	r2, [ip]
 8014ede:	9200      	str	r2, [sp, #0]
 8014ee0:	2900      	cmp	r1, #0
 8014ee2:	dc03      	bgt.n	8014eec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014ee4:	9a01      	ldr	r2, [sp, #4]
 8014ee6:	2a00      	cmp	r2, #0
 8014ee8:	f340 812b 	ble.w	8015142 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014eee:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014ef2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ef8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014efc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	dd0e      	ble.n	8014f22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014f04:	1422      	asrs	r2, r4, #16
 8014f06:	d405      	bmi.n	8014f14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f08:	4572      	cmp	r2, lr
 8014f0a:	da03      	bge.n	8014f14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f0c:	1402      	asrs	r2, r0, #16
 8014f0e:	d401      	bmi.n	8014f14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f10:	42ba      	cmp	r2, r7
 8014f12:	db07      	blt.n	8014f24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f16:	3b01      	subs	r3, #1
 8014f18:	3503      	adds	r5, #3
 8014f1a:	4414      	add	r4, r2
 8014f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f1e:	4410      	add	r0, r2
 8014f20:	e7ee      	b.n	8014f00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014f22:	d06f      	beq.n	8015004 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014f24:	1e5a      	subs	r2, r3, #1
 8014f26:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014f28:	fb06 4602 	mla	r6, r6, r2, r4
 8014f2c:	1436      	asrs	r6, r6, #16
 8014f2e:	d45e      	bmi.n	8014fee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014f30:	4576      	cmp	r6, lr
 8014f32:	da5c      	bge.n	8014fee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014f34:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014f36:	fb06 0202 	mla	r2, r6, r2, r0
 8014f3a:	1412      	asrs	r2, r2, #16
 8014f3c:	d457      	bmi.n	8014fee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014f3e:	42ba      	cmp	r2, r7
 8014f40:	da55      	bge.n	8014fee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014f42:	1cee      	adds	r6, r5, #3
 8014f44:	469a      	mov	sl, r3
 8014f46:	f1ba 0f00 	cmp.w	sl, #0
 8014f4a:	dd56      	ble.n	8014ffa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014f4c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014f50:	1427      	asrs	r7, r4, #16
 8014f52:	1402      	asrs	r2, r0, #16
 8014f54:	fb0e 7202 	mla	r2, lr, r2, r7
 8014f58:	9f00      	ldr	r7, [sp, #0]
 8014f5a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8014f5e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8014f62:	d03c      	beq.n	8014fde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014f64:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014f68:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014f6c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014f70:	fa5f f28e 	uxtb.w	r2, lr
 8014f74:	b2ff      	uxtb	r7, r7
 8014f76:	f000 80dd 	beq.w	8015134 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014f7a:	fa1f f882 	uxth.w	r8, r2
 8014f7e:	43d2      	mvns	r2, r2
 8014f80:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8014f84:	fb17 f708 	smulbb	r7, r7, r8
 8014f88:	b2d2      	uxtb	r2, r2
 8014f8a:	fb19 f908 	smulbb	r9, r9, r8
 8014f8e:	fb0e 7702 	mla	r7, lr, r2, r7
 8014f92:	fb1b f808 	smulbb	r8, fp, r8
 8014f96:	b2bf      	uxth	r7, r7
 8014f98:	f107 0e01 	add.w	lr, r7, #1
 8014f9c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014fa0:	123f      	asrs	r7, r7, #8
 8014fa2:	f806 7c03 	strb.w	r7, [r6, #-3]
 8014fa6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8014faa:	fb07 9902 	mla	r9, r7, r2, r9
 8014fae:	fa1f f989 	uxth.w	r9, r9
 8014fb2:	f109 0701 	add.w	r7, r9, #1
 8014fb6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014fba:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014fbe:	fb07 8802 	mla	r8, r7, r2, r8
 8014fc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014fc6:	fa1f f888 	uxth.w	r8, r8
 8014fca:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014fce:	f108 0201 	add.w	r2, r8, #1
 8014fd2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014fd6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014fda:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014fde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fe0:	3603      	adds	r6, #3
 8014fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014fe6:	4414      	add	r4, r2
 8014fe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014fea:	4410      	add	r0, r2
 8014fec:	e7ab      	b.n	8014f46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8014fee:	f04f 0e00 	mov.w	lr, #0
 8014ff2:	eba3 020e 	sub.w	r2, r3, lr
 8014ff6:	2a00      	cmp	r2, #0
 8014ff8:	dc3d      	bgt.n	8015076 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8014ffa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ffe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015002:	441d      	add	r5, r3
 8015004:	2900      	cmp	r1, #0
 8015006:	f340 809c 	ble.w	8015142 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801500a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801500e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015010:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015014:	3901      	subs	r1, #1
 8015016:	eeb0 6a62 	vmov.f32	s12, s5
 801501a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801501e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015022:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015026:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801502a:	eeb0 6a43 	vmov.f32	s12, s6
 801502e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015032:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015036:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801503a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801503e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015042:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015046:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801504a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801504e:	ee12 2a90 	vmov	r2, s5
 8015052:	eef0 2a47 	vmov.f32	s5, s14
 8015056:	fb92 f3f3 	sdiv	r3, r2, r3
 801505a:	ee13 2a10 	vmov	r2, s6
 801505e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015062:	eeb0 3a67 	vmov.f32	s6, s15
 8015066:	fb92 f3f3 	sdiv	r3, r2, r3
 801506a:	9a01      	ldr	r2, [sp, #4]
 801506c:	9310      	str	r3, [sp, #64]	; 0x40
 801506e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015070:	bf08      	it	eq
 8015072:	4613      	moveq	r3, r2
 8015074:	e734      	b.n	8014ee0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8015076:	1427      	asrs	r7, r4, #16
 8015078:	d44d      	bmi.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801507a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801507e:	42be      	cmp	r6, r7
 8015080:	dd49      	ble.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015082:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015086:	d446      	bmi.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015088:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801508c:	4542      	cmp	r2, r8
 801508e:	dd42      	ble.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015090:	b236      	sxth	r6, r6
 8015092:	9a00      	ldr	r2, [sp, #0]
 8015094:	fb08 7606 	mla	r6, r8, r6, r7
 8015098:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801509c:	0e3a      	lsrs	r2, r7, #24
 801509e:	d03a      	beq.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80150a0:	2aff      	cmp	r2, #255	; 0xff
 80150a2:	b2d6      	uxtb	r6, r2
 80150a4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80150a8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80150ac:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80150b0:	b2ff      	uxtb	r7, r7
 80150b2:	d037      	beq.n	8015124 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80150b4:	fa1f f986 	uxth.w	r9, r6
 80150b8:	4472      	add	r2, lr
 80150ba:	43f6      	mvns	r6, r6
 80150bc:	f815 8002 	ldrb.w	r8, [r5, r2]
 80150c0:	fb17 f709 	smulbb	r7, r7, r9
 80150c4:	fb1a fa09 	smulbb	sl, sl, r9
 80150c8:	b2f6      	uxtb	r6, r6
 80150ca:	fb1b f909 	smulbb	r9, fp, r9
 80150ce:	fb08 7706 	mla	r7, r8, r6, r7
 80150d2:	b2bf      	uxth	r7, r7
 80150d4:	f107 0801 	add.w	r8, r7, #1
 80150d8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80150dc:	123f      	asrs	r7, r7, #8
 80150de:	54af      	strb	r7, [r5, r2]
 80150e0:	442a      	add	r2, r5
 80150e2:	7857      	ldrb	r7, [r2, #1]
 80150e4:	fb07 aa06 	mla	sl, r7, r6, sl
 80150e8:	fa1f fa8a 	uxth.w	sl, sl
 80150ec:	f10a 0701 	add.w	r7, sl, #1
 80150f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80150f4:	7897      	ldrb	r7, [r2, #2]
 80150f6:	fb07 9906 	mla	r9, r7, r6, r9
 80150fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80150fe:	fa1f f989 	uxth.w	r9, r9
 8015102:	f882 a001 	strb.w	sl, [r2, #1]
 8015106:	f109 0601 	add.w	r6, r9, #1
 801510a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801510e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015112:	f882 9002 	strb.w	r9, [r2, #2]
 8015116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015118:	f10e 0e01 	add.w	lr, lr, #1
 801511c:	4414      	add	r4, r2
 801511e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015120:	4410      	add	r0, r2
 8015122:	e766      	b.n	8014ff2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015124:	4472      	add	r2, lr
 8015126:	54af      	strb	r7, [r5, r2]
 8015128:	442a      	add	r2, r5
 801512a:	f882 a001 	strb.w	sl, [r2, #1]
 801512e:	f882 b002 	strb.w	fp, [r2, #2]
 8015132:	e7f0      	b.n	8015116 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015134:	f806 7c03 	strb.w	r7, [r6, #-3]
 8015138:	f806 9c02 	strb.w	r9, [r6, #-2]
 801513c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8015140:	e74d      	b.n	8014fde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015142:	b003      	add	sp, #12
 8015144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	b087      	sub	sp, #28
 801514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015152:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015154:	9204      	str	r2, [sp, #16]
 8015156:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801515a:	6860      	ldr	r0, [r4, #4]
 801515c:	9205      	str	r2, [sp, #20]
 801515e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8015162:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8015166:	9101      	str	r1, [sp, #4]
 8015168:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801516c:	fb00 2505 	mla	r5, r0, r5, r2
 8015170:	6822      	ldr	r2, [r4, #0]
 8015172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015176:	4415      	add	r5, r2
 8015178:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801517c:	3201      	adds	r2, #1
 801517e:	f022 0201 	bic.w	r2, r2, #1
 8015182:	9202      	str	r2, [sp, #8]
 8015184:	f8dc 2000 	ldr.w	r2, [ip]
 8015188:	9203      	str	r2, [sp, #12]
 801518a:	9a01      	ldr	r2, [sp, #4]
 801518c:	2a00      	cmp	r2, #0
 801518e:	dc03      	bgt.n	8015198 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015190:	9a04      	ldr	r2, [sp, #16]
 8015192:	2a00      	cmp	r2, #0
 8015194:	f340 8135 	ble.w	8015402 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015198:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801519a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801519e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80151a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80151a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	dd0d      	ble.n	80151cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80151b0:	1422      	asrs	r2, r4, #16
 80151b2:	d405      	bmi.n	80151c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80151b4:	4542      	cmp	r2, r8
 80151b6:	da03      	bge.n	80151c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80151b8:	1402      	asrs	r2, r0, #16
 80151ba:	d401      	bmi.n	80151c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80151bc:	42ba      	cmp	r2, r7
 80151be:	db06      	blt.n	80151ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80151c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151c2:	4474      	add	r4, lr
 80151c4:	3b01      	subs	r3, #1
 80151c6:	3503      	adds	r5, #3
 80151c8:	4410      	add	r0, r2
 80151ca:	e7ef      	b.n	80151ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80151cc:	d077      	beq.n	80152be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80151ce:	1e5a      	subs	r2, r3, #1
 80151d0:	fb0e 4602 	mla	r6, lr, r2, r4
 80151d4:	1436      	asrs	r6, r6, #16
 80151d6:	d469      	bmi.n	80152ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80151d8:	4546      	cmp	r6, r8
 80151da:	da67      	bge.n	80152ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80151dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80151de:	fb06 0202 	mla	r2, r6, r2, r0
 80151e2:	1412      	asrs	r2, r2, #16
 80151e4:	d462      	bmi.n	80152ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80151e6:	42ba      	cmp	r2, r7
 80151e8:	da60      	bge.n	80152ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80151ea:	1cee      	adds	r6, r5, #3
 80151ec:	4699      	mov	r9, r3
 80151ee:	f1b9 0f00 	cmp.w	r9, #0
 80151f2:	dd5f      	ble.n	80152b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80151f4:	1422      	asrs	r2, r4, #16
 80151f6:	9902      	ldr	r1, [sp, #8]
 80151f8:	1407      	asrs	r7, r0, #16
 80151fa:	fb01 2707 	mla	r7, r1, r7, r2
 80151fe:	9903      	ldr	r1, [sp, #12]
 8015200:	087a      	lsrs	r2, r7, #1
 8015202:	5c8a      	ldrb	r2, [r1, r2]
 8015204:	07f9      	lsls	r1, r7, #31
 8015206:	bf54      	ite	pl
 8015208:	f002 020f 	andpl.w	r2, r2, #15
 801520c:	1112      	asrmi	r2, r2, #4
 801520e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015212:	b2d2      	uxtb	r2, r2
 8015214:	2a00      	cmp	r2, #0
 8015216:	d042      	beq.n	801529e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015218:	497b      	ldr	r1, [pc, #492]	; (8015408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801521a:	680f      	ldr	r7, [r1, #0]
 801521c:	9905      	ldr	r1, [sp, #20]
 801521e:	fa5f fb87 	uxtb.w	fp, r7
 8015222:	434a      	muls	r2, r1
 8015224:	f102 0801 	add.w	r8, r2, #1
 8015228:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801522c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8015230:	1212      	asrs	r2, r2, #8
 8015232:	fa1f fa82 	uxth.w	sl, r2
 8015236:	43d2      	mvns	r2, r2
 8015238:	fb1b fb0a 	smulbb	fp, fp, sl
 801523c:	b2d2      	uxtb	r2, r2
 801523e:	fb08 b802 	mla	r8, r8, r2, fp
 8015242:	fa1f f888 	uxth.w	r8, r8
 8015246:	f108 0b01 	add.w	fp, r8, #1
 801524a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801524e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015252:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015256:	fb1b fb0a 	smulbb	fp, fp, sl
 801525a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801525e:	fb17 fa0a 	smulbb	sl, r7, sl
 8015262:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8015266:	f806 8c03 	strb.w	r8, [r6, #-3]
 801526a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801526e:	fb07 aa02 	mla	sl, r7, r2, sl
 8015272:	fb08 b802 	mla	r8, r8, r2, fp
 8015276:	fa1f fa8a 	uxth.w	sl, sl
 801527a:	fa1f f888 	uxth.w	r8, r8
 801527e:	f10a 0701 	add.w	r7, sl, #1
 8015282:	f108 0b01 	add.w	fp, r8, #1
 8015286:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801528a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801528e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015292:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015296:	f806 ac01 	strb.w	sl, [r6, #-1]
 801529a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801529e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152a0:	4474      	add	r4, lr
 80152a2:	3603      	adds	r6, #3
 80152a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80152a8:	4410      	add	r0, r2
 80152aa:	e7a0      	b.n	80151ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80152ac:	2700      	movs	r7, #0
 80152ae:	1bda      	subs	r2, r3, r7
 80152b0:	2a00      	cmp	r2, #0
 80152b2:	dc3e      	bgt.n	8015332 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80152b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80152bc:	441d      	add	r5, r3
 80152be:	9b01      	ldr	r3, [sp, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	f340 809e 	ble.w	8015402 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80152c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80152ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80152d0:	eeb0 6a62 	vmov.f32	s12, s5
 80152d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80152d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80152dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80152e0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80152e4:	eeb0 6a43 	vmov.f32	s12, s6
 80152e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80152ec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80152f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80152f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80152f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80152fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015300:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015304:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015308:	ee12 2a90 	vmov	r2, s5
 801530c:	eef0 2a47 	vmov.f32	s5, s14
 8015310:	fb92 fef3 	sdiv	lr, r2, r3
 8015314:	ee13 2a10 	vmov	r2, s6
 8015318:	eeb0 3a67 	vmov.f32	s6, s15
 801531c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015320:	9314      	str	r3, [sp, #80]	; 0x50
 8015322:	9b01      	ldr	r3, [sp, #4]
 8015324:	9a04      	ldr	r2, [sp, #16]
 8015326:	3b01      	subs	r3, #1
 8015328:	9301      	str	r3, [sp, #4]
 801532a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801532c:	bf08      	it	eq
 801532e:	4613      	moveq	r3, r2
 8015330:	e72b      	b.n	801518a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8015332:	1426      	asrs	r6, r4, #16
 8015334:	d460      	bmi.n	80153f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015336:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801533a:	42b2      	cmp	r2, r6
 801533c:	dd5c      	ble.n	80153f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801533e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015342:	d459      	bmi.n	80153f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015344:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015348:	4542      	cmp	r2, r8
 801534a:	dd55      	ble.n	80153f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801534c:	9a02      	ldr	r2, [sp, #8]
 801534e:	9903      	ldr	r1, [sp, #12]
 8015350:	fb08 6602 	mla	r6, r8, r2, r6
 8015354:	0872      	lsrs	r2, r6, #1
 8015356:	07f6      	lsls	r6, r6, #31
 8015358:	5c8a      	ldrb	r2, [r1, r2]
 801535a:	bf54      	ite	pl
 801535c:	f002 020f 	andpl.w	r2, r2, #15
 8015360:	1112      	asrmi	r2, r2, #4
 8015362:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015366:	b2d2      	uxtb	r2, r2
 8015368:	2a00      	cmp	r2, #0
 801536a:	d045      	beq.n	80153f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801536c:	4926      	ldr	r1, [pc, #152]	; (8015408 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801536e:	f8d1 8000 	ldr.w	r8, [r1]
 8015372:	9905      	ldr	r1, [sp, #20]
 8015374:	fa5f fb88 	uxtb.w	fp, r8
 8015378:	434a      	muls	r2, r1
 801537a:	1c56      	adds	r6, r2, #1
 801537c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015380:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015384:	1212      	asrs	r2, r2, #8
 8015386:	f815 9006 	ldrb.w	r9, [r5, r6]
 801538a:	fa1f fa82 	uxth.w	sl, r2
 801538e:	43d2      	mvns	r2, r2
 8015390:	fb1b fb0a 	smulbb	fp, fp, sl
 8015394:	b2d2      	uxtb	r2, r2
 8015396:	fb09 b902 	mla	r9, r9, r2, fp
 801539a:	fa1f f989 	uxth.w	r9, r9
 801539e:	f109 0b01 	add.w	fp, r9, #1
 80153a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80153a6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80153aa:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80153ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80153b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80153b6:	fb18 fa0a 	smulbb	sl, r8, sl
 80153ba:	f805 9006 	strb.w	r9, [r5, r6]
 80153be:	442e      	add	r6, r5
 80153c0:	f896 8002 	ldrb.w	r8, [r6, #2]
 80153c4:	f896 9001 	ldrb.w	r9, [r6, #1]
 80153c8:	fb08 aa02 	mla	sl, r8, r2, sl
 80153cc:	fb09 b902 	mla	r9, r9, r2, fp
 80153d0:	fa1f fa8a 	uxth.w	sl, sl
 80153d4:	fa1f f989 	uxth.w	r9, r9
 80153d8:	f10a 0801 	add.w	r8, sl, #1
 80153dc:	f109 0b01 	add.w	fp, r9, #1
 80153e0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80153e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80153e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80153ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 80153f0:	f886 a002 	strb.w	sl, [r6, #2]
 80153f4:	f886 9001 	strb.w	r9, [r6, #1]
 80153f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153fa:	4474      	add	r4, lr
 80153fc:	3701      	adds	r7, #1
 80153fe:	4410      	add	r0, r2
 8015400:	e755      	b.n	80152ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8015402:	b007      	add	sp, #28
 8015404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015408:	24006c70 	.word	0x24006c70

0801540c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015410:	b085      	sub	sp, #20
 8015412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015416:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015418:	9203      	str	r2, [sp, #12]
 801541a:	6860      	ldr	r0, [r4, #4]
 801541c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015420:	9100      	str	r1, [sp, #0]
 8015422:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8015426:	fb00 2606 	mla	r6, r0, r6, r2
 801542a:	6822      	ldr	r2, [r4, #0]
 801542c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015430:	4416      	add	r6, r2
 8015432:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015436:	3201      	adds	r2, #1
 8015438:	f022 0201 	bic.w	r2, r2, #1
 801543c:	9201      	str	r2, [sp, #4]
 801543e:	f8dc 2000 	ldr.w	r2, [ip]
 8015442:	9202      	str	r2, [sp, #8]
 8015444:	9a00      	ldr	r2, [sp, #0]
 8015446:	2a00      	cmp	r2, #0
 8015448:	dc03      	bgt.n	8015452 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801544a:	9a03      	ldr	r2, [sp, #12]
 801544c:	2a00      	cmp	r2, #0
 801544e:	f340 8140 	ble.w	80156d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015454:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015458:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801545c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801545e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015462:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015466:	2b00      	cmp	r3, #0
 8015468:	dd0e      	ble.n	8015488 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801546a:	142a      	asrs	r2, r5, #16
 801546c:	d405      	bmi.n	801547a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801546e:	4572      	cmp	r2, lr
 8015470:	da03      	bge.n	801547a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015472:	1422      	asrs	r2, r4, #16
 8015474:	d401      	bmi.n	801547a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015476:	42ba      	cmp	r2, r7
 8015478:	db07      	blt.n	801548a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801547a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801547c:	3b01      	subs	r3, #1
 801547e:	3603      	adds	r6, #3
 8015480:	4415      	add	r5, r2
 8015482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015484:	4414      	add	r4, r2
 8015486:	e7ee      	b.n	8015466 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015488:	d072      	beq.n	8015570 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801548a:	1e5a      	subs	r2, r3, #1
 801548c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801548e:	fb00 5002 	mla	r0, r0, r2, r5
 8015492:	1400      	asrs	r0, r0, #16
 8015494:	d463      	bmi.n	801555e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015496:	4570      	cmp	r0, lr
 8015498:	da61      	bge.n	801555e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801549a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801549c:	fb00 4202 	mla	r2, r0, r2, r4
 80154a0:	1412      	asrs	r2, r2, #16
 80154a2:	d45c      	bmi.n	801555e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80154a4:	42ba      	cmp	r2, r7
 80154a6:	da5a      	bge.n	801555e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80154a8:	1cf0      	adds	r0, r6, #3
 80154aa:	469a      	mov	sl, r3
 80154ac:	f1ba 0f00 	cmp.w	sl, #0
 80154b0:	dd59      	ble.n	8015566 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80154b2:	142a      	asrs	r2, r5, #16
 80154b4:	9901      	ldr	r1, [sp, #4]
 80154b6:	1427      	asrs	r7, r4, #16
 80154b8:	fb01 2707 	mla	r7, r1, r7, r2
 80154bc:	9902      	ldr	r1, [sp, #8]
 80154be:	087a      	lsrs	r2, r7, #1
 80154c0:	5c8a      	ldrb	r2, [r1, r2]
 80154c2:	07f9      	lsls	r1, r7, #31
 80154c4:	bf54      	ite	pl
 80154c6:	f002 020f 	andpl.w	r2, r2, #15
 80154ca:	1112      	asrmi	r2, r2, #4
 80154cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80154d0:	b2d2      	uxtb	r2, r2
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	d03b      	beq.n	801554e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80154d6:	4980      	ldr	r1, [pc, #512]	; (80156d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80154d8:	2aff      	cmp	r2, #255	; 0xff
 80154da:	680f      	ldr	r7, [r1, #0]
 80154dc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80154e0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80154e4:	b2ff      	uxtb	r7, r7
 80154e6:	f000 80ed 	beq.w	80156c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80154ea:	fa1f f882 	uxth.w	r8, r2
 80154ee:	43d2      	mvns	r2, r2
 80154f0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80154f4:	fb17 f708 	smulbb	r7, r7, r8
 80154f8:	b2d2      	uxtb	r2, r2
 80154fa:	fb19 f908 	smulbb	r9, r9, r8
 80154fe:	fb0e 7702 	mla	r7, lr, r2, r7
 8015502:	fb1b f808 	smulbb	r8, fp, r8
 8015506:	b2bf      	uxth	r7, r7
 8015508:	f107 0e01 	add.w	lr, r7, #1
 801550c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015510:	123f      	asrs	r7, r7, #8
 8015512:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015516:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801551a:	fb07 9902 	mla	r9, r7, r2, r9
 801551e:	fa1f f989 	uxth.w	r9, r9
 8015522:	f109 0701 	add.w	r7, r9, #1
 8015526:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801552a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801552e:	fb07 8802 	mla	r8, r7, r2, r8
 8015532:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015536:	fa1f f888 	uxth.w	r8, r8
 801553a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801553e:	f108 0201 	add.w	r2, r8, #1
 8015542:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015546:	ea4f 2828 	mov.w	r8, r8, asr #8
 801554a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801554e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015550:	3003      	adds	r0, #3
 8015552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015556:	4415      	add	r5, r2
 8015558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801555a:	4414      	add	r4, r2
 801555c:	e7a6      	b.n	80154ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801555e:	2700      	movs	r7, #0
 8015560:	1bda      	subs	r2, r3, r7
 8015562:	2a00      	cmp	r2, #0
 8015564:	dc40      	bgt.n	80155e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801556a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801556e:	441e      	add	r6, r3
 8015570:	9b00      	ldr	r3, [sp, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	f340 80ad 	ble.w	80156d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015578:	ee30 0a04 	vadd.f32	s0, s0, s8
 801557c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801557e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015582:	eeb0 6a62 	vmov.f32	s12, s5
 8015586:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801558a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801558e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015592:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015596:	eeb0 6a43 	vmov.f32	s12, s6
 801559a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801559e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80155a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80155a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80155aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80155ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80155b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80155b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80155ba:	ee12 2a90 	vmov	r2, s5
 80155be:	eef0 2a47 	vmov.f32	s5, s14
 80155c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80155c6:	ee13 2a10 	vmov	r2, s6
 80155ca:	9311      	str	r3, [sp, #68]	; 0x44
 80155cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155ce:	eeb0 3a67 	vmov.f32	s6, s15
 80155d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80155d6:	9312      	str	r3, [sp, #72]	; 0x48
 80155d8:	9b00      	ldr	r3, [sp, #0]
 80155da:	9a03      	ldr	r2, [sp, #12]
 80155dc:	3b01      	subs	r3, #1
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155e2:	bf08      	it	eq
 80155e4:	4613      	moveq	r3, r2
 80155e6:	e72d      	b.n	8015444 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80155e8:	1428      	asrs	r0, r5, #16
 80155ea:	d45c      	bmi.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80155ec:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80155f0:	4282      	cmp	r2, r0
 80155f2:	dd58      	ble.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80155f4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80155f8:	d455      	bmi.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80155fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80155fe:	4572      	cmp	r2, lr
 8015600:	dd51      	ble.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015602:	9a01      	ldr	r2, [sp, #4]
 8015604:	9902      	ldr	r1, [sp, #8]
 8015606:	fb0e 0002 	mla	r0, lr, r2, r0
 801560a:	0842      	lsrs	r2, r0, #1
 801560c:	07c0      	lsls	r0, r0, #31
 801560e:	5c8a      	ldrb	r2, [r1, r2]
 8015610:	bf54      	ite	pl
 8015612:	f002 020f 	andpl.w	r2, r2, #15
 8015616:	1112      	asrmi	r2, r2, #4
 8015618:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801561c:	b2d2      	uxtb	r2, r2
 801561e:	2a00      	cmp	r2, #0
 8015620:	d041      	beq.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015622:	492d      	ldr	r1, [pc, #180]	; (80156d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015624:	2aff      	cmp	r2, #255	; 0xff
 8015626:	6808      	ldr	r0, [r1, #0]
 8015628:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801562c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015630:	fa5f fe80 	uxtb.w	lr, r0
 8015634:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8015638:	d03b      	beq.n	80156b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801563a:	fa1f f982 	uxth.w	r9, r2
 801563e:	4438      	add	r0, r7
 8015640:	43d2      	mvns	r2, r2
 8015642:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015646:	fb1e fe09 	smulbb	lr, lr, r9
 801564a:	fb1a fa09 	smulbb	sl, sl, r9
 801564e:	b2d2      	uxtb	r2, r2
 8015650:	fb1b f909 	smulbb	r9, fp, r9
 8015654:	fb08 ee02 	mla	lr, r8, r2, lr
 8015658:	fa1f fe8e 	uxth.w	lr, lr
 801565c:	f10e 0801 	add.w	r8, lr, #1
 8015660:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015664:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015668:	f806 e000 	strb.w	lr, [r6, r0]
 801566c:	4430      	add	r0, r6
 801566e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015672:	fb0e aa02 	mla	sl, lr, r2, sl
 8015676:	fa1f fa8a 	uxth.w	sl, sl
 801567a:	f10a 0e01 	add.w	lr, sl, #1
 801567e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015682:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015686:	fb0e 9902 	mla	r9, lr, r2, r9
 801568a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801568e:	fa1f f989 	uxth.w	r9, r9
 8015692:	f880 a001 	strb.w	sl, [r0, #1]
 8015696:	f109 0201 	add.w	r2, r9, #1
 801569a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801569e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80156a2:	f880 9002 	strb.w	r9, [r0, #2]
 80156a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80156a8:	3701      	adds	r7, #1
 80156aa:	4415      	add	r5, r2
 80156ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156ae:	4414      	add	r4, r2
 80156b0:	e756      	b.n	8015560 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80156b2:	4438      	add	r0, r7
 80156b4:	f806 e000 	strb.w	lr, [r6, r0]
 80156b8:	4430      	add	r0, r6
 80156ba:	f880 a001 	strb.w	sl, [r0, #1]
 80156be:	f880 b002 	strb.w	fp, [r0, #2]
 80156c2:	e7f0      	b.n	80156a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80156c4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80156c8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80156cc:	f800 bc01 	strb.w	fp, [r0, #-1]
 80156d0:	e73d      	b.n	801554e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80156d2:	b005      	add	sp, #20
 80156d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156d8:	24006c70 	.word	0x24006c70

080156dc <_ZN8touchgfx8LCD24bppD1Ev>:
 80156dc:	4770      	bx	lr

080156de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80156de:	4770      	bx	lr

080156e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80156e0:	4770      	bx	lr

080156e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80156e2:	4770      	bx	lr

080156e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80156e4:	4770      	bx	lr

080156e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80156e6:	4770      	bx	lr

080156e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80156e8:	4770      	bx	lr

080156ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80156ea:	4770      	bx	lr

080156ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80156ec:	4770      	bx	lr

080156ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80156ee:	4770      	bx	lr

080156f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80156f0:	4770      	bx	lr

080156f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80156f2:	4770      	bx	lr

080156f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80156f4:	4770      	bx	lr

080156f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80156f6:	4770      	bx	lr

080156f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80156f8:	4770      	bx	lr

080156fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80156fa:	4770      	bx	lr

080156fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80156fc:	4770      	bx	lr

080156fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80156fe:	4770      	bx	lr

08015700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015700:	4770      	bx	lr

08015702 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015702:	4770      	bx	lr

08015704 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015704:	4770      	bx	lr
	...

08015708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015708:	2bff      	cmp	r3, #255	; 0xff
 801570a:	b508      	push	{r3, lr}
 801570c:	d04f      	beq.n	80157ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801570e:	2a2c      	cmp	r2, #44	; 0x2c
 8015710:	d032      	beq.n	8015778 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8015712:	d80f      	bhi.n	8015734 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8015714:	2a08      	cmp	r2, #8
 8015716:	d046      	beq.n	80157a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015718:	d805      	bhi.n	8015726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801571a:	2a04      	cmp	r2, #4
 801571c:	d041      	beq.n	80157a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801571e:	2a05      	cmp	r2, #5
 8015720:	d03d      	beq.n	801579e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8015722:	2000      	movs	r0, #0
 8015724:	e027      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015726:	2a0a      	cmp	r2, #10
 8015728:	d03d      	beq.n	80157a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801572a:	d301      	bcc.n	8015730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801572c:	2a0b      	cmp	r2, #11
 801572e:	d1f8      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015730:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015732:	e020      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015734:	2a30      	cmp	r2, #48	; 0x30
 8015736:	d038      	beq.n	80157aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015738:	d808      	bhi.n	801574c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801573a:	2a2e      	cmp	r2, #46	; 0x2e
 801573c:	684b      	ldr	r3, [r1, #4]
 801573e:	d029      	beq.n	8015794 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8015740:	d90b      	bls.n	801575a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d1ec      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015748:	6a00      	ldr	r0, [r0, #32]
 801574a:	e014      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801574c:	2a32      	cmp	r2, #50	; 0x32
 801574e:	d02c      	beq.n	80157aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8015750:	d301      	bcc.n	8015756 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8015752:	2a33      	cmp	r2, #51	; 0x33
 8015754:	d1e5      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015756:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015758:	e00d      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d009      	beq.n	8015774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015760:	d3f2      	bcc.n	8015748 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8015762:	2b02      	cmp	r3, #2
 8015764:	d1dd      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015766:	4b39      	ldr	r3, [pc, #228]	; (801584c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015768:	f240 4109 	movw	r1, #1033	; 0x409
 801576c:	4a38      	ldr	r2, [pc, #224]	; (8015850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801576e:	4839      	ldr	r0, [pc, #228]	; (8015854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8015770:	f006 fde4 	bl	801c33c <__assert_func>
 8015774:	6900      	ldr	r0, [r0, #16]
 8015776:	bd08      	pop	{r3, pc}
 8015778:	684b      	ldr	r3, [r1, #4]
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	2b01      	cmp	r3, #1
 801577e:	d007      	beq.n	8015790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8015780:	d30b      	bcc.n	801579a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8015782:	2b02      	cmp	r3, #2
 8015784:	d1cd      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015786:	4b31      	ldr	r3, [pc, #196]	; (801584c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015788:	f240 4115 	movw	r1, #1045	; 0x415
 801578c:	4a30      	ldr	r2, [pc, #192]	; (8015850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801578e:	e7ee      	b.n	801576e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015790:	6880      	ldr	r0, [r0, #8]
 8015792:	e7f0      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d1c3      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801579a:	6980      	ldr	r0, [r0, #24]
 801579c:	e7eb      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801579e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80157a0:	e7e9      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80157a4:	e7e7      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80157a8:	e7e5      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80157ac:	e7e3      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157ae:	2a2c      	cmp	r2, #44	; 0x2c
 80157b0:	d030      	beq.n	8015814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80157b2:	d80f      	bhi.n	80157d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80157b4:	2a08      	cmp	r2, #8
 80157b6:	d044      	beq.n	8015842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80157b8:	d805      	bhi.n	80157c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80157ba:	2a04      	cmp	r2, #4
 80157bc:	d03f      	beq.n	801583e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80157be:	2a05      	cmp	r2, #5
 80157c0:	d1af      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80157c4:	e7d7      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157c6:	2a0a      	cmp	r2, #10
 80157c8:	d03b      	beq.n	8015842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80157ca:	d301      	bcc.n	80157d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80157cc:	2a0b      	cmp	r2, #11
 80157ce:	d1a8      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80157d2:	e7d0      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157d4:	2a30      	cmp	r2, #48	; 0x30
 80157d6:	d036      	beq.n	8015846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80157d8:	d808      	bhi.n	80157ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80157da:	2a2e      	cmp	r2, #46	; 0x2e
 80157dc:	684b      	ldr	r3, [r1, #4]
 80157de:	d028      	beq.n	8015832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80157e0:	d90b      	bls.n	80157fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80157e2:	781b      	ldrb	r3, [r3, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d19c      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80157ea:	e7c4      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157ec:	2a32      	cmp	r2, #50	; 0x32
 80157ee:	d02a      	beq.n	8015846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80157f0:	d301      	bcc.n	80157f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80157f2:	2a33      	cmp	r2, #51	; 0x33
 80157f4:	d195      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80157f8:	e7bd      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	2b01      	cmp	r3, #1
 80157fe:	d007      	beq.n	8015810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8015800:	d3f2      	bcc.n	80157e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015802:	2b02      	cmp	r3, #2
 8015804:	d18d      	bne.n	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015806:	4b11      	ldr	r3, [pc, #68]	; (801584c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015808:	f240 4146 	movw	r1, #1094	; 0x446
 801580c:	4a10      	ldr	r2, [pc, #64]	; (8015850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801580e:	e7ae      	b.n	801576e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015810:	6940      	ldr	r0, [r0, #20]
 8015812:	e7b0      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015814:	684b      	ldr	r3, [r1, #4]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	2b01      	cmp	r3, #1
 801581a:	d008      	beq.n	801582e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801581c:	d30d      	bcc.n	801583a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801581e:	2b02      	cmp	r3, #2
 8015820:	f47f af7f 	bne.w	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015824:	4b09      	ldr	r3, [pc, #36]	; (801584c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015826:	f240 4152 	movw	r1, #1106	; 0x452
 801582a:	4a09      	ldr	r2, [pc, #36]	; (8015850 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801582c:	e79f      	b.n	801576e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801582e:	68c0      	ldr	r0, [r0, #12]
 8015830:	e7a1      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	f47f af74 	bne.w	8015722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801583a:	69c0      	ldr	r0, [r0, #28]
 801583c:	e79b      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801583e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015840:	e799      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015842:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8015844:	e797      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015846:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015848:	e795      	b.n	8015776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801584a:	bf00      	nop
 801584c:	08020425 	.word	0x08020425
 8015850:	08020b97 	.word	0x08020b97
 8015854:	08020471 	.word	0x08020471

08015858 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015858:	b508      	push	{r3, lr}
 801585a:	4b06      	ldr	r3, [pc, #24]	; (8015874 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801585c:	8818      	ldrh	r0, [r3, #0]
 801585e:	b928      	cbnz	r0, 801586c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8015860:	4b05      	ldr	r3, [pc, #20]	; (8015878 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8015862:	214d      	movs	r1, #77	; 0x4d
 8015864:	4a05      	ldr	r2, [pc, #20]	; (801587c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8015866:	4806      	ldr	r0, [pc, #24]	; (8015880 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8015868:	f006 fd68 	bl	801c33c <__assert_func>
 801586c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015870:	b280      	uxth	r0, r0
 8015872:	bd08      	pop	{r3, pc}
 8015874:	24006c62 	.word	0x24006c62
 8015878:	0802067d 	.word	0x0802067d
 801587c:	08020b5c 	.word	0x08020b5c
 8015880:	080206bf 	.word	0x080206bf

08015884 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015888:	b08b      	sub	sp, #44	; 0x2c
 801588a:	460d      	mov	r5, r1
 801588c:	4616      	mov	r6, r2
 801588e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015892:	f1b8 0f00 	cmp.w	r8, #0
 8015896:	d047      	beq.n	8015928 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015898:	6810      	ldr	r0, [r2, #0]
 801589a:	ac06      	add	r4, sp, #24
 801589c:	6851      	ldr	r1, [r2, #4]
 801589e:	4f51      	ldr	r7, [pc, #324]	; (80159e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80158a0:	c403      	stmia	r4!, {r0, r1}
 80158a2:	6818      	ldr	r0, [r3, #0]
 80158a4:	ac08      	add	r4, sp, #32
 80158a6:	6859      	ldr	r1, [r3, #4]
 80158a8:	c403      	stmia	r4!, {r0, r1}
 80158aa:	a806      	add	r0, sp, #24
 80158ac:	f7fa fd9e 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80158b0:	4631      	mov	r1, r6
 80158b2:	a808      	add	r0, sp, #32
 80158b4:	f7fa fdde 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80158b8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80158bc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80158c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80158c4:	6838      	ldr	r0, [r7, #0]
 80158c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80158ca:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80158ce:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80158d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158d6:	440d      	add	r5, r1
 80158d8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80158dc:	440a      	add	r2, r1
 80158de:	f8ad 2020 	strh.w	r2, [sp, #32]
 80158e2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80158e6:	4413      	add	r3, r2
 80158e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80158ec:	6803      	ldr	r3, [r0, #0]
 80158ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158f0:	4798      	blx	r3
 80158f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80158f6:	d01a      	beq.n	801592e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80158f8:	f010 0f04 	tst.w	r0, #4
 80158fc:	6838      	ldr	r0, [r7, #0]
 80158fe:	d019      	beq.n	8015934 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8015900:	2100      	movs	r1, #0
 8015902:	6807      	ldr	r7, [r0, #0]
 8015904:	b2a4      	uxth	r4, r4
 8015906:	f8cd 800c 	str.w	r8, [sp, #12]
 801590a:	b2b6      	uxth	r6, r6
 801590c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015910:	9401      	str	r4, [sp, #4]
 8015912:	9600      	str	r6, [sp, #0]
 8015914:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015918:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801591c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015920:	9102      	str	r1, [sp, #8]
 8015922:	4629      	mov	r1, r5
 8015924:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8015926:	47a0      	blx	r4
 8015928:	b00b      	add	sp, #44	; 0x2c
 801592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801592e:	f010 0f01 	tst.w	r0, #1
 8015932:	e7e3      	b.n	80158fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8015934:	6803      	ldr	r3, [r0, #0]
 8015936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015938:	4798      	blx	r3
 801593a:	4a2b      	ldr	r2, [pc, #172]	; (80159e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801593c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8015940:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015944:	8813      	ldrh	r3, [r2, #0]
 8015946:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801594a:	fb03 f404 	mul.w	r4, r3, r4
 801594e:	fb03 c101 	mla	r1, r3, r1, ip
 8015952:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015956:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801595a:	4408      	add	r0, r1
 801595c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015960:	4404      	add	r4, r0
 8015962:	d02e      	beq.n	80159c2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015964:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015968:	1b9b      	subs	r3, r3, r6
 801596a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801596e:	1b96      	subs	r6, r2, r6
 8015970:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015974:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015978:	42a0      	cmp	r0, r4
 801597a:	d22d      	bcs.n	80159d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801597c:	eb00 0e01 	add.w	lr, r0, r1
 8015980:	4570      	cmp	r0, lr
 8015982:	d210      	bcs.n	80159a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8015984:	f890 9000 	ldrb.w	r9, [r0]
 8015988:	f815 2b01 	ldrb.w	r2, [r5], #1
 801598c:	fb19 f90c 	smulbb	r9, r9, ip
 8015990:	fb02 9208 	mla	r2, r2, r8, r9
 8015994:	b292      	uxth	r2, r2
 8015996:	f102 0901 	add.w	r9, r2, #1
 801599a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801599e:	1212      	asrs	r2, r2, #8
 80159a0:	f800 2b01 	strb.w	r2, [r0], #1
 80159a4:	e7ec      	b.n	8015980 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80159a6:	4418      	add	r0, r3
 80159a8:	4435      	add	r5, r6
 80159aa:	e7e5      	b.n	8015978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80159ac:	8813      	ldrh	r3, [r2, #0]
 80159ae:	1b9b      	subs	r3, r3, r6
 80159b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80159b4:	4418      	add	r0, r3
 80159b6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80159ba:	1b9b      	subs	r3, r3, r6
 80159bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80159c0:	441d      	add	r5, r3
 80159c2:	42a0      	cmp	r0, r4
 80159c4:	d208      	bcs.n	80159d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80159c6:	eb00 0c01 	add.w	ip, r0, r1
 80159ca:	4560      	cmp	r0, ip
 80159cc:	d2ee      	bcs.n	80159ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80159ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80159d2:	f800 3b01 	strb.w	r3, [r0], #1
 80159d6:	e7f8      	b.n	80159ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80159d8:	6838      	ldr	r0, [r7, #0]
 80159da:	6803      	ldr	r3, [r0, #0]
 80159dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159de:	4798      	blx	r3
 80159e0:	e7a2      	b.n	8015928 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80159e2:	bf00      	nop
 80159e4:	24006c68 	.word	0x24006c68
 80159e8:	24006c62 	.word	0x24006c62

080159ec <_ZN8touchgfx8LCD24bppD0Ev>:
 80159ec:	b510      	push	{r4, lr}
 80159ee:	4604      	mov	r4, r0
 80159f0:	2158      	movs	r1, #88	; 0x58
 80159f2:	f006 fb8d 	bl	801c110 <_ZdlPvj>
 80159f6:	4620      	mov	r0, r4
 80159f8:	bd10      	pop	{r4, pc}

080159fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80159fa:	b510      	push	{r4, lr}
 80159fc:	4604      	mov	r4, r0
 80159fe:	2104      	movs	r1, #4
 8015a00:	f006 fb86 	bl	801c110 <_ZdlPvj>
 8015a04:	4620      	mov	r0, r4
 8015a06:	bd10      	pop	{r4, pc}

08015a08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015a08:	b510      	push	{r4, lr}
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	2104      	movs	r1, #4
 8015a0e:	f006 fb7f 	bl	801c110 <_ZdlPvj>
 8015a12:	4620      	mov	r0, r4
 8015a14:	bd10      	pop	{r4, pc}

08015a16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015a16:	b510      	push	{r4, lr}
 8015a18:	4604      	mov	r4, r0
 8015a1a:	2104      	movs	r1, #4
 8015a1c:	f006 fb78 	bl	801c110 <_ZdlPvj>
 8015a20:	4620      	mov	r0, r4
 8015a22:	bd10      	pop	{r4, pc}

08015a24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015a24:	b510      	push	{r4, lr}
 8015a26:	4604      	mov	r4, r0
 8015a28:	2104      	movs	r1, #4
 8015a2a:	f006 fb71 	bl	801c110 <_ZdlPvj>
 8015a2e:	4620      	mov	r0, r4
 8015a30:	bd10      	pop	{r4, pc}

08015a32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015a32:	b510      	push	{r4, lr}
 8015a34:	4604      	mov	r4, r0
 8015a36:	2104      	movs	r1, #4
 8015a38:	f006 fb6a 	bl	801c110 <_ZdlPvj>
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	bd10      	pop	{r4, pc}

08015a40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015a40:	b510      	push	{r4, lr}
 8015a42:	4604      	mov	r4, r0
 8015a44:	2104      	movs	r1, #4
 8015a46:	f006 fb63 	bl	801c110 <_ZdlPvj>
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	bd10      	pop	{r4, pc}

08015a4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015a4e:	b510      	push	{r4, lr}
 8015a50:	4604      	mov	r4, r0
 8015a52:	2104      	movs	r1, #4
 8015a54:	f006 fb5c 	bl	801c110 <_ZdlPvj>
 8015a58:	4620      	mov	r0, r4
 8015a5a:	bd10      	pop	{r4, pc}

08015a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015a5c:	b510      	push	{r4, lr}
 8015a5e:	4604      	mov	r4, r0
 8015a60:	2104      	movs	r1, #4
 8015a62:	f006 fb55 	bl	801c110 <_ZdlPvj>
 8015a66:	4620      	mov	r0, r4
 8015a68:	bd10      	pop	{r4, pc}

08015a6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015a6a:	b510      	push	{r4, lr}
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	2104      	movs	r1, #4
 8015a70:	f006 fb4e 	bl	801c110 <_ZdlPvj>
 8015a74:	4620      	mov	r0, r4
 8015a76:	bd10      	pop	{r4, pc}

08015a78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015a78:	b510      	push	{r4, lr}
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	2104      	movs	r1, #4
 8015a7e:	f006 fb47 	bl	801c110 <_ZdlPvj>
 8015a82:	4620      	mov	r0, r4
 8015a84:	bd10      	pop	{r4, pc}

08015a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015a86:	b510      	push	{r4, lr}
 8015a88:	4604      	mov	r4, r0
 8015a8a:	2104      	movs	r1, #4
 8015a8c:	f006 fb40 	bl	801c110 <_ZdlPvj>
 8015a90:	4620      	mov	r0, r4
 8015a92:	bd10      	pop	{r4, pc}

08015a94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015a94:	b510      	push	{r4, lr}
 8015a96:	4604      	mov	r4, r0
 8015a98:	2104      	movs	r1, #4
 8015a9a:	f006 fb39 	bl	801c110 <_ZdlPvj>
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	bd10      	pop	{r4, pc}

08015aa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015aa2:	b510      	push	{r4, lr}
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	2104      	movs	r1, #4
 8015aa8:	f006 fb32 	bl	801c110 <_ZdlPvj>
 8015aac:	4620      	mov	r0, r4
 8015aae:	bd10      	pop	{r4, pc}

08015ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015ab0:	b510      	push	{r4, lr}
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	2104      	movs	r1, #4
 8015ab6:	f006 fb2b 	bl	801c110 <_ZdlPvj>
 8015aba:	4620      	mov	r0, r4
 8015abc:	bd10      	pop	{r4, pc}

08015abe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015abe:	b510      	push	{r4, lr}
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	2104      	movs	r1, #4
 8015ac4:	f006 fb24 	bl	801c110 <_ZdlPvj>
 8015ac8:	4620      	mov	r0, r4
 8015aca:	bd10      	pop	{r4, pc}

08015acc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015acc:	b510      	push	{r4, lr}
 8015ace:	4604      	mov	r4, r0
 8015ad0:	2104      	movs	r1, #4
 8015ad2:	f006 fb1d 	bl	801c110 <_ZdlPvj>
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	bd10      	pop	{r4, pc}

08015ada <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015ada:	b510      	push	{r4, lr}
 8015adc:	4604      	mov	r4, r0
 8015ade:	2104      	movs	r1, #4
 8015ae0:	f006 fb16 	bl	801c110 <_ZdlPvj>
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	bd10      	pop	{r4, pc}

08015ae8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015ae8:	b510      	push	{r4, lr}
 8015aea:	4604      	mov	r4, r0
 8015aec:	2104      	movs	r1, #4
 8015aee:	f006 fb0f 	bl	801c110 <_ZdlPvj>
 8015af2:	4620      	mov	r0, r4
 8015af4:	bd10      	pop	{r4, pc}

08015af6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015af6:	b510      	push	{r4, lr}
 8015af8:	4604      	mov	r4, r0
 8015afa:	2104      	movs	r1, #4
 8015afc:	f006 fb08 	bl	801c110 <_ZdlPvj>
 8015b00:	4620      	mov	r0, r4
 8015b02:	bd10      	pop	{r4, pc}

08015b04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015b04:	b510      	push	{r4, lr}
 8015b06:	4604      	mov	r4, r0
 8015b08:	2104      	movs	r1, #4
 8015b0a:	f006 fb01 	bl	801c110 <_ZdlPvj>
 8015b0e:	4620      	mov	r0, r4
 8015b10:	bd10      	pop	{r4, pc}
	...

08015b14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8015b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b18:	4db4      	ldr	r5, [pc, #720]	; (8015dec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 8015b1a:	4690      	mov	r8, r2
 8015b1c:	b08d      	sub	sp, #52	; 0x34
 8015b1e:	4604      	mov	r4, r0
 8015b20:	682a      	ldr	r2, [r5, #0]
 8015b22:	4689      	mov	r9, r1
 8015b24:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8015b28:	2a02      	cmp	r2, #2
 8015b2a:	d106      	bne.n	8015b3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015b2c:	4bb0      	ldr	r3, [pc, #704]	; (8015df0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8015b2e:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015b32:	4ab0      	ldr	r2, [pc, #704]	; (8015df4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015b34:	48b0      	ldr	r0, [pc, #704]	; (8015df8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8015b36:	f006 fc01 	bl	801c33c <__assert_func>
 8015b3a:	ae0c      	add	r6, sp, #48	; 0x30
 8015b3c:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8015b40:	4630      	mov	r0, r6
 8015b42:	f7fe f97b 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b46:	6823      	ldr	r3, [r4, #0]
 8015b48:	4607      	mov	r7, r0
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b4e:	4798      	blx	r3
 8015b50:	4287      	cmp	r7, r0
 8015b52:	d004      	beq.n	8015b5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015b54:	4ba9      	ldr	r3, [pc, #676]	; (8015dfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8015b56:	f240 11ef 	movw	r1, #495	; 0x1ef
 8015b5a:	4aa6      	ldr	r2, [pc, #664]	; (8015df4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015b5c:	e7ea      	b.n	8015b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f7fe f8e2 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015b64:	4607      	mov	r7, r0
 8015b66:	b920      	cbnz	r0, 8015b72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8015b68:	4ba5      	ldr	r3, [pc, #660]	; (8015e00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8015b6a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8015b6e:	4aa1      	ldr	r2, [pc, #644]	; (8015df4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015b70:	e7e0      	b.n	8015b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015b72:	f8d8 0000 	ldr.w	r0, [r8]
 8015b76:	ab06      	add	r3, sp, #24
 8015b78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b7c:	f9b8 a000 	ldrsh.w	sl, [r8]
 8015b80:	c303      	stmia	r3!, {r0, r1}
 8015b82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015b86:	ab08      	add	r3, sp, #32
 8015b88:	f8d9 0000 	ldr.w	r0, [r9]
 8015b8c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8015b90:	c303      	stmia	r3!, {r0, r1}
 8015b92:	4630      	mov	r0, r6
 8015b94:	f7fd ffc0 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015b98:	4680      	mov	r8, r0
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	f7fd fff6 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ba0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015ba4:	f10d 0920 	add.w	r9, sp, #32
 8015ba8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8015bac:	a806      	add	r0, sp, #24
 8015bae:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015bb2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8015bb6:	f7fa fc19 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015bba:	4648      	mov	r0, r9
 8015bbc:	f7fa fc16 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015bc0:	a80a      	add	r0, sp, #40	; 0x28
 8015bc2:	f7fa fc13 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015bc6:	4b8f      	ldr	r3, [pc, #572]	; (8015e04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015bc8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015bcc:	881e      	ldrh	r6, [r3, #0]
 8015bce:	4b8e      	ldr	r3, [pc, #568]	; (8015e08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015bd0:	fa0f fb86 	sxth.w	fp, r6
 8015bd4:	8819      	ldrh	r1, [r3, #0]
 8015bd6:	4593      	cmp	fp, r2
 8015bd8:	dd75      	ble.n	8015cc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015bda:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8015bde:	4494      	add	ip, r2
 8015be0:	fa1f fc8c 	uxth.w	ip, ip
 8015be4:	fa0f fa8c 	sxth.w	sl, ip
 8015be8:	f1ba 0f00 	cmp.w	sl, #0
 8015bec:	dd6b      	ble.n	8015cc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015bee:	fa0f f881 	sxth.w	r8, r1
 8015bf2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015bf6:	4598      	cmp	r8, r3
 8015bf8:	dd65      	ble.n	8015cc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015bfa:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8015bfe:	4418      	add	r0, r3
 8015c00:	b280      	uxth	r0, r0
 8015c02:	fa0f fe80 	sxth.w	lr, r0
 8015c06:	f1be 0f00 	cmp.w	lr, #0
 8015c0a:	dd5c      	ble.n	8015cc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015c0c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c14:	45d3      	cmp	fp, sl
 8015c16:	bfc8      	it	gt
 8015c18:	4666      	movgt	r6, ip
 8015c1a:	45f0      	cmp	r8, lr
 8015c1c:	bfc8      	it	gt
 8015c1e:	4601      	movgt	r1, r0
 8015c20:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015c24:	1ab6      	subs	r6, r6, r2
 8015c26:	1ac9      	subs	r1, r1, r3
 8015c28:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015c2c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015c30:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015c34:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8015c38:	f1bc 0f00 	cmp.w	ip, #0
 8015c3c:	f340 80aa 	ble.w	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015c40:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8015c44:	2e00      	cmp	r6, #0
 8015c46:	f340 80a5 	ble.w	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015c4a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015c4e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8015c52:	4288      	cmp	r0, r1
 8015c54:	db3b      	blt.n	8015cce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c56:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8015c5a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	db35      	blt.n	8015cce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c62:	4460      	add	r0, ip
 8015c64:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8015c68:	4461      	add	r1, ip
 8015c6a:	b200      	sxth	r0, r0
 8015c6c:	b209      	sxth	r1, r1
 8015c6e:	4288      	cmp	r0, r1
 8015c70:	dc2d      	bgt.n	8015cce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c72:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015c76:	4432      	add	r2, r6
 8015c78:	440b      	add	r3, r1
 8015c7a:	b212      	sxth	r2, r2
 8015c7c:	b21b      	sxth	r3, r3
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	dc25      	bgt.n	8015cce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c82:	6823      	ldr	r3, [r4, #0]
 8015c84:	4620      	mov	r0, r4
 8015c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c88:	4798      	blx	r3
 8015c8a:	4682      	mov	sl, r0
 8015c8c:	6828      	ldr	r0, [r5, #0]
 8015c8e:	6803      	ldr	r3, [r0, #0]
 8015c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c92:	4798      	blx	r3
 8015c94:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8015c98:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015c9c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015ca0:	9303      	str	r3, [sp, #12]
 8015ca2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015ca6:	1a9b      	subs	r3, r3, r2
 8015ca8:	b29b      	uxth	r3, r3
 8015caa:	b21c      	sxth	r4, r3
 8015cac:	2c00      	cmp	r4, #0
 8015cae:	dc13      	bgt.n	8015cd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8015cb0:	bf18      	it	ne
 8015cb2:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8015cb6:	463c      	mov	r4, r7
 8015cb8:	bf1e      	ittt	ne
 8015cba:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8015cbe:	189b      	addne	r3, r3, r2
 8015cc0:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8015cc4:	e00f      	b.n	8015ce6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015ccc:	e7b2      	b.n	8015c34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8015cce:	4b4f      	ldr	r3, [pc, #316]	; (8015e0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8015cd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8015cd4:	4a47      	ldr	r2, [pc, #284]	; (8015df4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015cd6:	e72d      	b.n	8015b34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015cd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015cdc:	ebab 0303 	sub.w	r3, fp, r3
 8015ce0:	443c      	add	r4, r7
 8015ce2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8015ce6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8015cea:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	b219      	sxth	r1, r3
 8015cf4:	2900      	cmp	r1, #0
 8015cf6:	dd51      	ble.n	8015d9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8015cf8:	9a03      	ldr	r2, [sp, #12]
 8015cfa:	fb02 4401 	mla	r4, r2, r1, r4
 8015cfe:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015d02:	1ad3      	subs	r3, r2, r3
 8015d04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015d08:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	dd41      	ble.n	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d10:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8015d14:	2e00      	cmp	r6, #0
 8015d16:	dd3d      	ble.n	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d18:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015d1c:	f04f 0803 	mov.w	r8, #3
 8015d20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015d24:	fb0a f10c 	mul.w	r1, sl, ip
 8015d28:	fb12 1808 	smlabb	r8, r2, r8, r1
 8015d2c:	4935      	ldr	r1, [pc, #212]	; (8015e04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015d2e:	4480      	add	r8, r0
 8015d30:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8015d34:	8809      	ldrh	r1, [r1, #0]
 8015d36:	4283      	cmp	r3, r0
 8015d38:	eba1 0202 	sub.w	r2, r1, r2
 8015d3c:	bfa8      	it	ge
 8015d3e:	4603      	movge	r3, r0
 8015d40:	4293      	cmp	r3, r2
 8015d42:	bfa8      	it	ge
 8015d44:	4613      	movge	r3, r2
 8015d46:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8015d4a:	4296      	cmp	r6, r2
 8015d4c:	bfa8      	it	ge
 8015d4e:	4616      	movge	r6, r2
 8015d50:	4a2d      	ldr	r2, [pc, #180]	; (8015e08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015d52:	8812      	ldrh	r2, [r2, #0]
 8015d54:	eba2 0c0c 	sub.w	ip, r2, ip
 8015d58:	4632      	mov	r2, r6
 8015d5a:	4566      	cmp	r6, ip
 8015d5c:	bfa8      	it	ge
 8015d5e:	4662      	movge	r2, ip
 8015d60:	4299      	cmp	r1, r3
 8015d62:	9202      	str	r2, [sp, #8]
 8015d64:	d12d      	bne.n	8015dc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015d66:	4559      	cmp	r1, fp
 8015d68:	d12b      	bne.n	8015dc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015d6a:	6828      	ldr	r0, [r5, #0]
 8015d6c:	6803      	ldr	r3, [r0, #0]
 8015d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d70:	4798      	blx	r3
 8015d72:	07c3      	lsls	r3, r0, #31
 8015d74:	d51b      	bpl.n	8015dae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8015d76:	6828      	ldr	r0, [r5, #0]
 8015d78:	9b02      	ldr	r3, [sp, #8]
 8015d7a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8015d7e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015d82:	6803      	ldr	r3, [r0, #0]
 8015d84:	f8cd b000 	str.w	fp, [sp]
 8015d88:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8015d8a:	4623      	mov	r3, r4
 8015d8c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015d90:	47a8      	blx	r5
 8015d92:	4607      	mov	r7, r0
 8015d94:	4638      	mov	r0, r7
 8015d96:	b00d      	add	sp, #52	; 0x34
 8015d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d9c:	bf1f      	itttt	ne
 8015d9e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8015da2:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8015da6:	189b      	addne	r3, r3, r2
 8015da8:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8015dac:	e7ac      	b.n	8015d08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8015dae:	6828      	ldr	r0, [r5, #0]
 8015db0:	4642      	mov	r2, r8
 8015db2:	4621      	mov	r1, r4
 8015db4:	6803      	ldr	r3, [r0, #0]
 8015db6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8015db8:	9b02      	ldr	r3, [sp, #8]
 8015dba:	fb03 f30a 	mul.w	r3, r3, sl
 8015dbe:	47a8      	blx	r5
 8015dc0:	e7e8      	b.n	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015dc2:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8015dc6:	f04f 0900 	mov.w	r9, #0
 8015dca:	9b02      	ldr	r3, [sp, #8]
 8015dcc:	454b      	cmp	r3, r9
 8015dce:	dde1      	ble.n	8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015dd0:	6828      	ldr	r0, [r5, #0]
 8015dd2:	4642      	mov	r2, r8
 8015dd4:	4621      	mov	r1, r4
 8015dd6:	44d0      	add	r8, sl
 8015dd8:	6803      	ldr	r3, [r0, #0]
 8015dda:	f109 0901 	add.w	r9, r9, #1
 8015dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015de0:	461e      	mov	r6, r3
 8015de2:	465b      	mov	r3, fp
 8015de4:	47b0      	blx	r6
 8015de6:	9b03      	ldr	r3, [sp, #12]
 8015de8:	441c      	add	r4, r3
 8015dea:	e7ee      	b.n	8015dca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8015dec:	24006c68 	.word	0x24006c68
 8015df0:	080204a3 	.word	0x080204a3
 8015df4:	08020c41 	.word	0x08020c41
 8015df8:	08020471 	.word	0x08020471
 8015dfc:	08020555 	.word	0x08020555
 8015e00:	080205aa 	.word	0x080205aa
 8015e04:	24006c62 	.word	0x24006c62
 8015e08:	24006c64 	.word	0x24006c64
 8015e0c:	080205e8 	.word	0x080205e8

08015e10 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e14:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8015e18:	9c06      	ldr	r4, [sp, #24]
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	d06e      	beq.n	8015efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e1e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015e22:	2d00      	cmp	r5, #0
 8015e24:	dd6a      	ble.n	8015efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e26:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8015e2a:	f1bc 0f00 	cmp.w	ip, #0
 8015e2e:	dd65      	ble.n	8015efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e30:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8015e34:	28ff      	cmp	r0, #255	; 0xff
 8015e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e3a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8015e3e:	fb02 3306 	mla	r3, r2, r6, r3
 8015e42:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015e46:	b2e4      	uxtb	r4, r4
 8015e48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e4c:	4419      	add	r1, r3
 8015e4e:	fb02 f30c 	mul.w	r3, r2, ip
 8015e52:	eba2 0205 	sub.w	r2, r2, r5
 8015e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015e62:	440b      	add	r3, r1
 8015e64:	d03e      	beq.n	8015ee4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8015e66:	fa1f fc80 	uxth.w	ip, r0
 8015e6a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8015e6e:	fb06 f60c 	mul.w	r6, r6, ip
 8015e72:	b280      	uxth	r0, r0
 8015e74:	fb07 f70c 	mul.w	r7, r7, ip
 8015e78:	fb04 f40c 	mul.w	r4, r4, ip
 8015e7c:	4299      	cmp	r1, r3
 8015e7e:	d23d      	bcs.n	8015efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e80:	eb01 0c05 	add.w	ip, r1, r5
 8015e84:	458c      	cmp	ip, r1
 8015e86:	f101 0e03 	add.w	lr, r1, #3
 8015e8a:	d928      	bls.n	8015ede <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8015e8c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8015e90:	fb11 f100 	smulbb	r1, r1, r0
 8015e94:	4421      	add	r1, r4
 8015e96:	b289      	uxth	r1, r1
 8015e98:	f101 0801 	add.w	r8, r1, #1
 8015e9c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015ea0:	1209      	asrs	r1, r1, #8
 8015ea2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8015ea6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8015eaa:	fb11 f100 	smulbb	r1, r1, r0
 8015eae:	4439      	add	r1, r7
 8015eb0:	b289      	uxth	r1, r1
 8015eb2:	f101 0801 	add.w	r8, r1, #1
 8015eb6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015eba:	1209      	asrs	r1, r1, #8
 8015ebc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8015ec0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8015ec4:	fb11 f100 	smulbb	r1, r1, r0
 8015ec8:	4431      	add	r1, r6
 8015eca:	b289      	uxth	r1, r1
 8015ecc:	f101 0801 	add.w	r8, r1, #1
 8015ed0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015ed4:	1209      	asrs	r1, r1, #8
 8015ed6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8015eda:	4671      	mov	r1, lr
 8015edc:	e7d2      	b.n	8015e84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8015ede:	4411      	add	r1, r2
 8015ee0:	e7cc      	b.n	8015e7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8015ee2:	4411      	add	r1, r2
 8015ee4:	4299      	cmp	r1, r3
 8015ee6:	d209      	bcs.n	8015efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015ee8:	1948      	adds	r0, r1, r5
 8015eea:	4281      	cmp	r1, r0
 8015eec:	d2f9      	bcs.n	8015ee2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8015eee:	700c      	strb	r4, [r1, #0]
 8015ef0:	3103      	adds	r1, #3
 8015ef2:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015ef6:	f801 6c01 	strb.w	r6, [r1, #-1]
 8015efa:	e7f6      	b.n	8015eea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8015efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f02:	4606      	mov	r6, r0
 8015f04:	b087      	sub	sp, #28
 8015f06:	4615      	mov	r5, r2
 8015f08:	461f      	mov	r7, r3
 8015f0a:	b353      	cbz	r3, 8015f62 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f0c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	dd26      	ble.n	8015f62 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f14:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	dd22      	ble.n	8015f62 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f1c:	6808      	ldr	r0, [r1, #0]
 8015f1e:	aa04      	add	r2, sp, #16
 8015f20:	6849      	ldr	r1, [r1, #4]
 8015f22:	4c1b      	ldr	r4, [pc, #108]	; (8015f90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015f24:	c203      	stmia	r2!, {r0, r1}
 8015f26:	a804      	add	r0, sp, #16
 8015f28:	f7fa fa60 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f2c:	6820      	ldr	r0, [r4, #0]
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f32:	4798      	blx	r3
 8015f34:	2fff      	cmp	r7, #255	; 0xff
 8015f36:	d016      	beq.n	8015f66 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015f38:	f010 0f08 	tst.w	r0, #8
 8015f3c:	6820      	ldr	r0, [r4, #0]
 8015f3e:	d015      	beq.n	8015f6c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015f40:	2400      	movs	r4, #0
 8015f42:	6801      	ldr	r1, [r0, #0]
 8015f44:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015f48:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015f4c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015f50:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015f54:	9401      	str	r4, [sp, #4]
 8015f56:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015f5a:	9400      	str	r4, [sp, #0]
 8015f5c:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8015f5e:	4629      	mov	r1, r5
 8015f60:	47a0      	blx	r4
 8015f62:	b007      	add	sp, #28
 8015f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f66:	f010 0f02 	tst.w	r0, #2
 8015f6a:	e7e7      	b.n	8015f3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015f6c:	6803      	ldr	r3, [r0, #0]
 8015f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f70:	4798      	blx	r3
 8015f72:	4b08      	ldr	r3, [pc, #32]	; (8015f94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015f74:	4601      	mov	r1, r0
 8015f76:	4630      	mov	r0, r6
 8015f78:	881a      	ldrh	r2, [r3, #0]
 8015f7a:	6833      	ldr	r3, [r6, #0]
 8015f7c:	e9cd 5700 	strd	r5, r7, [sp]
 8015f80:	69dd      	ldr	r5, [r3, #28]
 8015f82:	ab04      	add	r3, sp, #16
 8015f84:	47a8      	blx	r5
 8015f86:	6820      	ldr	r0, [r4, #0]
 8015f88:	6803      	ldr	r3, [r0, #0]
 8015f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f8c:	4798      	blx	r3
 8015f8e:	e7e8      	b.n	8015f62 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f90:	24006c68 	.word	0x24006c68
 8015f94:	24006c62 	.word	0x24006c62

08015f98 <_ZN8touchgfx8LCD24bppC1Ev>:
 8015f98:	2200      	movs	r2, #0
 8015f9a:	490c      	ldr	r1, [pc, #48]	; (8015fcc <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8015f9c:	6042      	str	r2, [r0, #4]
 8015f9e:	6001      	str	r1, [r0, #0]
 8015fa0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8015fa4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8015fa8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015fac:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015fb0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8015fb4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8015fb8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015fbc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8015fc0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8015fc4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop
 8015fcc:	0802088c 	.word	0x0802088c

08015fd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd4:	b091      	sub	sp, #68	; 0x44
 8015fd6:	880d      	ldrh	r5, [r1, #0]
 8015fd8:	4607      	mov	r7, r0
 8015fda:	4688      	mov	r8, r1
 8015fdc:	4616      	mov	r6, r2
 8015fde:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8015fe2:	b12d      	cbz	r5, 8015ff0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015fe4:	4b69      	ldr	r3, [pc, #420]	; (801618c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8015fe6:	2160      	movs	r1, #96	; 0x60
 8015fe8:	4a69      	ldr	r2, [pc, #420]	; (8016190 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8015fea:	486a      	ldr	r0, [pc, #424]	; (8016194 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8015fec:	f006 f9a6 	bl	801c33c <__assert_func>
 8015ff0:	6810      	ldr	r0, [r2, #0]
 8015ff2:	ac0c      	add	r4, sp, #48	; 0x30
 8015ff4:	6851      	ldr	r1, [r2, #4]
 8015ff6:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8016198 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015ffa:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 801619c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8015ffe:	c403      	stmia	r4!, {r0, r1}
 8016000:	6818      	ldr	r0, [r3, #0]
 8016002:	ac0e      	add	r4, sp, #56	; 0x38
 8016004:	6859      	ldr	r1, [r3, #4]
 8016006:	c403      	stmia	r4!, {r0, r1}
 8016008:	a80c      	add	r0, sp, #48	; 0x30
 801600a:	f7fa f9ef 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801600e:	4631      	mov	r1, r6
 8016010:	a80e      	add	r0, sp, #56	; 0x38
 8016012:	f7fa fa2f 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016016:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801601a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801601e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016022:	f8da 0000 	ldr.w	r0, [sl]
 8016026:	fb11 2103 	smlabb	r1, r1, r3, r2
 801602a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801602e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8016032:	440f      	add	r7, r1
 8016034:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8016038:	440a      	add	r2, r1
 801603a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801603e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016042:	4413      	add	r3, r2
 8016044:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016048:	6803      	ldr	r3, [r0, #0]
 801604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801604c:	4798      	blx	r3
 801604e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016052:	f8da 0000 	ldr.w	r0, [sl]
 8016056:	d01e      	beq.n	8016096 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8016058:	6801      	ldr	r1, [r0, #0]
 801605a:	2201      	movs	r2, #1
 801605c:	9509      	str	r5, [sp, #36]	; 0x24
 801605e:	250b      	movs	r5, #11
 8016060:	b2a4      	uxth	r4, r4
 8016062:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016066:	b2b6      	uxth	r6, r6
 8016068:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801606c:	f8bb 5000 	ldrh.w	r5, [fp]
 8016070:	f8cd 9010 	str.w	r9, [sp, #16]
 8016074:	9602      	str	r6, [sp, #8]
 8016076:	9401      	str	r4, [sp, #4]
 8016078:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801607c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8016080:	9203      	str	r2, [sp, #12]
 8016082:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016086:	9200      	str	r2, [sp, #0]
 8016088:	4642      	mov	r2, r8
 801608a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801608c:	4639      	mov	r1, r7
 801608e:	47a0      	blx	r4
 8016090:	b011      	add	sp, #68	; 0x44
 8016092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016096:	6803      	ldr	r3, [r0, #0]
 8016098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801609a:	4798      	blx	r3
 801609c:	f8bb 5000 	ldrh.w	r5, [fp]
 80160a0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80160a4:	f04f 0e04 	mov.w	lr, #4
 80160a8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80160ac:	436e      	muls	r6, r5
 80160ae:	fb05 2303 	mla	r3, r5, r3, r2
 80160b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80160b6:	1b2d      	subs	r5, r5, r4
 80160b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80160c0:	4418      	add	r0, r3
 80160c2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80160c6:	1982      	adds	r2, r0, r6
 80160c8:	1b1b      	subs	r3, r3, r4
 80160ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80160ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80160d0:	4290      	cmp	r0, r2
 80160d2:	d254      	bcs.n	801617e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80160d4:	eb00 0a04 	add.w	sl, r0, r4
 80160d8:	4550      	cmp	r0, sl
 80160da:	d24c      	bcs.n	8016176 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80160dc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80160e0:	fb1e e101 	smlabb	r1, lr, r1, lr
 80160e4:	eb08 0c01 	add.w	ip, r8, r1
 80160e8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80160ec:	b173      	cbz	r3, 801610c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80160ee:	2bff      	cmp	r3, #255	; 0xff
 80160f0:	f818 b001 	ldrb.w	fp, [r8, r1]
 80160f4:	d10c      	bne.n	8016110 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80160f6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80160fa:	d109      	bne.n	8016110 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80160fc:	f880 b000 	strb.w	fp, [r0]
 8016100:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016104:	7043      	strb	r3, [r0, #1]
 8016106:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801610a:	7083      	strb	r3, [r0, #2]
 801610c:	3003      	adds	r0, #3
 801610e:	e7e3      	b.n	80160d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8016110:	fb09 f103 	mul.w	r1, r9, r3
 8016114:	1c4b      	adds	r3, r1, #1
 8016116:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801611a:	7801      	ldrb	r1, [r0, #0]
 801611c:	121b      	asrs	r3, r3, #8
 801611e:	b29e      	uxth	r6, r3
 8016120:	43db      	mvns	r3, r3
 8016122:	fb1b fb06 	smulbb	fp, fp, r6
 8016126:	b2db      	uxtb	r3, r3
 8016128:	fb01 b103 	mla	r1, r1, r3, fp
 801612c:	b289      	uxth	r1, r1
 801612e:	f101 0b01 	add.w	fp, r1, #1
 8016132:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016136:	f890 b001 	ldrb.w	fp, [r0, #1]
 801613a:	fb1b fb03 	smulbb	fp, fp, r3
 801613e:	1209      	asrs	r1, r1, #8
 8016140:	7001      	strb	r1, [r0, #0]
 8016142:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8016146:	fb01 b106 	mla	r1, r1, r6, fp
 801614a:	b289      	uxth	r1, r1
 801614c:	f101 0b01 	add.w	fp, r1, #1
 8016150:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016154:	1209      	asrs	r1, r1, #8
 8016156:	7041      	strb	r1, [r0, #1]
 8016158:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801615c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8016160:	fb1c f303 	smulbb	r3, ip, r3
 8016164:	fb01 3606 	mla	r6, r1, r6, r3
 8016168:	b2b6      	uxth	r6, r6
 801616a:	1c73      	adds	r3, r6, #1
 801616c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8016170:	1236      	asrs	r6, r6, #8
 8016172:	7086      	strb	r6, [r0, #2]
 8016174:	e7ca      	b.n	801610c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8016176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016178:	4428      	add	r0, r5
 801617a:	441f      	add	r7, r3
 801617c:	e7a8      	b.n	80160d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801617e:	4b06      	ldr	r3, [pc, #24]	; (8016198 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8016180:	6818      	ldr	r0, [r3, #0]
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016186:	4798      	blx	r3
 8016188:	e782      	b.n	8016090 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801618a:	bf00      	nop
 801618c:	080203d5 	.word	0x080203d5
 8016190:	08020a63 	.word	0x08020a63
 8016194:	08020471 	.word	0x08020471
 8016198:	24006c68 	.word	0x24006c68
 801619c:	24006c62 	.word	0x24006c62

080161a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80161a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	f8b1 9000 	ldrh.w	r9, [r1]
 80161a8:	b091      	sub	sp, #68	; 0x44
 80161aa:	4604      	mov	r4, r0
 80161ac:	460e      	mov	r6, r1
 80161ae:	f1b9 0f01 	cmp.w	r9, #1
 80161b2:	4690      	mov	r8, r2
 80161b4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80161b8:	d005      	beq.n	80161c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 80161ba:	4b69      	ldr	r3, [pc, #420]	; (8016360 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80161bc:	21ae      	movs	r1, #174	; 0xae
 80161be:	4a69      	ldr	r2, [pc, #420]	; (8016364 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80161c0:	4869      	ldr	r0, [pc, #420]	; (8016368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80161c2:	f006 f8bb 	bl	801c33c <__assert_func>
 80161c6:	6810      	ldr	r0, [r2, #0]
 80161c8:	ad0c      	add	r5, sp, #48	; 0x30
 80161ca:	6851      	ldr	r1, [r2, #4]
 80161cc:	f8df a19c 	ldr.w	sl, [pc, #412]	; 801636c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80161d0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8016370 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80161d4:	c503      	stmia	r5!, {r0, r1}
 80161d6:	6818      	ldr	r0, [r3, #0]
 80161d8:	ad0e      	add	r5, sp, #56	; 0x38
 80161da:	6859      	ldr	r1, [r3, #4]
 80161dc:	c503      	stmia	r5!, {r0, r1}
 80161de:	a80c      	add	r0, sp, #48	; 0x30
 80161e0:	f7fa f904 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80161e4:	4641      	mov	r1, r8
 80161e6:	a80e      	add	r0, sp, #56	; 0x38
 80161e8:	f7fa f944 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80161ec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80161f0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80161f4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80161f8:	f8da 0000 	ldr.w	r0, [sl]
 80161fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016200:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8016204:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8016208:	440c      	add	r4, r1
 801620a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801620e:	440a      	add	r2, r1
 8016210:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016214:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016218:	4413      	add	r3, r2
 801621a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016222:	4798      	blx	r3
 8016224:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016228:	f8da 0000 	ldr.w	r0, [sl]
 801622c:	d020      	beq.n	8016270 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 801622e:	2200      	movs	r2, #0
 8016230:	f04f 0c0b 	mov.w	ip, #11
 8016234:	6801      	ldr	r1, [r0, #0]
 8016236:	b2ad      	uxth	r5, r5
 8016238:	f8cd c01c 	str.w	ip, [sp, #28]
 801623c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016240:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8016244:	f8bb c000 	ldrh.w	ip, [fp]
 8016248:	9704      	str	r7, [sp, #16]
 801624a:	9502      	str	r5, [sp, #8]
 801624c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8016250:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8016254:	9203      	str	r2, [sp, #12]
 8016256:	fa1f f288 	uxth.w	r2, r8
 801625a:	9201      	str	r2, [sp, #4]
 801625c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016260:	9200      	str	r2, [sp, #0]
 8016262:	4632      	mov	r2, r6
 8016264:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8016266:	4621      	mov	r1, r4
 8016268:	47a8      	blx	r5
 801626a:	b011      	add	sp, #68	; 0x44
 801626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016270:	6803      	ldr	r3, [r0, #0]
 8016272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016274:	4798      	blx	r3
 8016276:	f8bb 2000 	ldrh.w	r2, [fp]
 801627a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801627e:	f04f 0e03 	mov.w	lr, #3
 8016282:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8016286:	4355      	muls	r5, r2
 8016288:	fa1f fc87 	uxth.w	ip, r7
 801628c:	fb02 1303 	mla	r3, r2, r3, r1
 8016290:	eba2 0208 	sub.w	r2, r2, r8
 8016294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801629c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162a0:	4418      	add	r0, r3
 80162a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80162a4:	1943      	adds	r3, r0, r5
 80162a6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80162aa:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80162ae:	eba2 0208 	sub.w	r2, r2, r8
 80162b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162b6:	b2ad      	uxth	r5, r5
 80162b8:	4298      	cmp	r0, r3
 80162ba:	d24a      	bcs.n	8016352 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80162bc:	eb00 0908 	add.w	r9, r0, r8
 80162c0:	4621      	mov	r1, r4
 80162c2:	4548      	cmp	r0, r9
 80162c4:	460c      	mov	r4, r1
 80162c6:	d240      	bcs.n	801634a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80162c8:	f04f 0a04 	mov.w	sl, #4
 80162cc:	7824      	ldrb	r4, [r4, #0]
 80162ce:	2fff      	cmp	r7, #255	; 0xff
 80162d0:	f101 0101 	add.w	r1, r1, #1
 80162d4:	fb1e a404 	smlabb	r4, lr, r4, sl
 80162d8:	eb06 0a04 	add.w	sl, r6, r4
 80162dc:	f816 b004 	ldrb.w	fp, [r6, r4]
 80162e0:	d02b      	beq.n	801633a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80162e2:	7804      	ldrb	r4, [r0, #0]
 80162e4:	fb14 f405 	smulbb	r4, r4, r5
 80162e8:	fb0b 440c 	mla	r4, fp, ip, r4
 80162ec:	b2a4      	uxth	r4, r4
 80162ee:	f104 0b01 	add.w	fp, r4, #1
 80162f2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80162f6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80162fa:	fb1b fb05 	smulbb	fp, fp, r5
 80162fe:	1224      	asrs	r4, r4, #8
 8016300:	7004      	strb	r4, [r0, #0]
 8016302:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016306:	fb04 b40c 	mla	r4, r4, ip, fp
 801630a:	b2a4      	uxth	r4, r4
 801630c:	f104 0b01 	add.w	fp, r4, #1
 8016310:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016314:	1224      	asrs	r4, r4, #8
 8016316:	7044      	strb	r4, [r0, #1]
 8016318:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801631c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8016320:	fb1a fa05 	smulbb	sl, sl, r5
 8016324:	fb04 a40c 	mla	r4, r4, ip, sl
 8016328:	b2a4      	uxth	r4, r4
 801632a:	f104 0a01 	add.w	sl, r4, #1
 801632e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8016332:	1224      	asrs	r4, r4, #8
 8016334:	7084      	strb	r4, [r0, #2]
 8016336:	3003      	adds	r0, #3
 8016338:	e7c3      	b.n	80162c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801633a:	f880 b000 	strb.w	fp, [r0]
 801633e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016342:	7044      	strb	r4, [r0, #1]
 8016344:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8016348:	e7f4      	b.n	8016334 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 801634a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801634c:	4420      	add	r0, r4
 801634e:	188c      	adds	r4, r1, r2
 8016350:	e7b2      	b.n	80162b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8016352:	4b06      	ldr	r3, [pc, #24]	; (801636c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8016354:	6818      	ldr	r0, [r3, #0]
 8016356:	6803      	ldr	r3, [r0, #0]
 8016358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801635a:	4798      	blx	r3
 801635c:	e785      	b.n	801626a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 801635e:	bf00      	nop
 8016360:	08020354 	.word	0x08020354
 8016364:	08020956 	.word	0x08020956
 8016368:	08020471 	.word	0x08020471
 801636c:	24006c68 	.word	0x24006c68
 8016370:	24006c62 	.word	0x24006c62

08016374 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8016374:	b570      	push	{r4, r5, r6, lr}
 8016376:	780d      	ldrb	r5, [r1, #0]
 8016378:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801637c:	2d01      	cmp	r5, #1
 801637e:	d00d      	beq.n	801639c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8016380:	d307      	bcc.n	8016392 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8016382:	2d02      	cmp	r5, #2
 8016384:	d10f      	bne.n	80163a6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8016386:	4b08      	ldr	r3, [pc, #32]	; (80163a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8016388:	2153      	movs	r1, #83	; 0x53
 801638a:	4a08      	ldr	r2, [pc, #32]	; (80163ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801638c:	4808      	ldr	r0, [pc, #32]	; (80163b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801638e:	f005 ffd5 	bl	801c33c <__assert_func>
 8016392:	9404      	str	r4, [sp, #16]
 8016394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016398:	f7ff be1a 	b.w	8015fd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801639c:	9404      	str	r4, [sp, #16]
 801639e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a2:	f7ff befd 	b.w	80161a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80163a6:	bd70      	pop	{r4, r5, r6, pc}
 80163a8:	08020309 	.word	0x08020309
 80163ac:	080208d4 	.word	0x080208d4
 80163b0:	08020471 	.word	0x08020471

080163b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80163b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163b8:	4605      	mov	r5, r0
 80163ba:	b08f      	sub	sp, #60	; 0x3c
 80163bc:	460c      	mov	r4, r1
 80163be:	461f      	mov	r7, r3
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d052      	beq.n	801646a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80163c4:	6808      	ldr	r0, [r1, #0]
 80163c6:	ab0a      	add	r3, sp, #40	; 0x28
 80163c8:	6849      	ldr	r1, [r1, #4]
 80163ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8016594 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80163ce:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8016598 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80163d2:	c303      	stmia	r3!, {r0, r1}
 80163d4:	6810      	ldr	r0, [r2, #0]
 80163d6:	ab0c      	add	r3, sp, #48	; 0x30
 80163d8:	6851      	ldr	r1, [r2, #4]
 80163da:	c303      	stmia	r3!, {r0, r1}
 80163dc:	a80a      	add	r0, sp, #40	; 0x28
 80163de:	f7fa f805 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80163e2:	4621      	mov	r1, r4
 80163e4:	a80c      	add	r0, sp, #48	; 0x30
 80163e6:	f7fa f845 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80163ea:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80163ee:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80163f2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80163f6:	f8d8 0000 	ldr.w	r0, [r8]
 80163fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80163fe:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8016402:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8016406:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801640a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801640e:	440a      	add	r2, r1
 8016410:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8016414:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016418:	4413      	add	r3, r2
 801641a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801641e:	6803      	ldr	r3, [r0, #0]
 8016420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016422:	4798      	blx	r3
 8016424:	2fff      	cmp	r7, #255	; 0xff
 8016426:	d023      	beq.n	8016470 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8016428:	f010 0f04 	tst.w	r0, #4
 801642c:	f8d8 0000 	ldr.w	r0, [r8]
 8016430:	d021      	beq.n	8016476 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8016432:	2100      	movs	r1, #0
 8016434:	f04f 0e01 	mov.w	lr, #1
 8016438:	f8d0 c000 	ldr.w	ip, [r0]
 801643c:	b2a4      	uxth	r4, r4
 801643e:	9106      	str	r1, [sp, #24]
 8016440:	b2b6      	uxth	r6, r6
 8016442:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016446:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801644a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801644e:	f8b9 e000 	ldrh.w	lr, [r9]
 8016452:	9703      	str	r7, [sp, #12]
 8016454:	9401      	str	r4, [sp, #4]
 8016456:	9600      	str	r6, [sp, #0]
 8016458:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801645c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016460:	9102      	str	r1, [sp, #8]
 8016462:	4629      	mov	r1, r5
 8016464:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8016468:	47a0      	blx	r4
 801646a:	b00f      	add	sp, #60	; 0x3c
 801646c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016470:	f010 0f01 	tst.w	r0, #1
 8016474:	e7da      	b.n	801642c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8016476:	6803      	ldr	r3, [r0, #0]
 8016478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801647a:	4798      	blx	r3
 801647c:	f8b9 1000 	ldrh.w	r1, [r9]
 8016480:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016484:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8016488:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801648c:	434c      	muls	r4, r1
 801648e:	2fff      	cmp	r7, #255	; 0xff
 8016490:	fb01 2303 	mla	r3, r1, r3, r2
 8016494:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016498:	eba1 0106 	sub.w	r1, r1, r6
 801649c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80164a4:	4418      	add	r0, r3
 80164a6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80164aa:	eba3 0606 	sub.w	r6, r3, r6
 80164ae:	4404      	add	r4, r0
 80164b0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80164b4:	d04a      	beq.n	801654c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80164b6:	43fa      	mvns	r2, r7
 80164b8:	b2bb      	uxth	r3, r7
 80164ba:	b2d7      	uxtb	r7, r2
 80164bc:	42a0      	cmp	r0, r4
 80164be:	d263      	bcs.n	8016588 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80164c0:	eb00 0e0c 	add.w	lr, r0, ip
 80164c4:	4586      	cmp	lr, r0
 80164c6:	f100 0803 	add.w	r8, r0, #3
 80164ca:	d93a      	bls.n	8016542 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80164cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80164d0:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80164d4:	00d0      	lsls	r0, r2, #3
 80164d6:	fb19 f907 	smulbb	r9, r9, r7
 80164da:	b2c0      	uxtb	r0, r0
 80164dc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80164e0:	fb00 9003 	mla	r0, r0, r3, r9
 80164e4:	b280      	uxth	r0, r0
 80164e6:	f100 0901 	add.w	r9, r0, #1
 80164ea:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80164ee:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80164f2:	fb19 f907 	smulbb	r9, r9, r7
 80164f6:	1200      	asrs	r0, r0, #8
 80164f8:	f808 0c03 	strb.w	r0, [r8, #-3]
 80164fc:	10d0      	asrs	r0, r2, #3
 80164fe:	1212      	asrs	r2, r2, #8
 8016500:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8016504:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8016508:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801650c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016510:	fb00 9003 	mla	r0, r0, r3, r9
 8016514:	b280      	uxth	r0, r0
 8016516:	f100 0901 	add.w	r9, r0, #1
 801651a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801651e:	1200      	asrs	r0, r0, #8
 8016520:	f808 0c02 	strb.w	r0, [r8, #-2]
 8016524:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8016528:	fb10 f007 	smulbb	r0, r0, r7
 801652c:	fb02 0203 	mla	r2, r2, r3, r0
 8016530:	b292      	uxth	r2, r2
 8016532:	1c50      	adds	r0, r2, #1
 8016534:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016538:	4640      	mov	r0, r8
 801653a:	1212      	asrs	r2, r2, #8
 801653c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8016540:	e7c0      	b.n	80164c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8016542:	4408      	add	r0, r1
 8016544:	4435      	add	r5, r6
 8016546:	e7b9      	b.n	80164bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8016548:	4408      	add	r0, r1
 801654a:	4435      	add	r5, r6
 801654c:	42a0      	cmp	r0, r4
 801654e:	d21b      	bcs.n	8016588 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016550:	eb00 070c 	add.w	r7, r0, ip
 8016554:	42b8      	cmp	r0, r7
 8016556:	d2f7      	bcs.n	8016548 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8016558:	f835 3b02 	ldrh.w	r3, [r5], #2
 801655c:	3003      	adds	r0, #3
 801655e:	00da      	lsls	r2, r3, #3
 8016560:	b2d2      	uxtb	r2, r2
 8016562:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016566:	f800 2c03 	strb.w	r2, [r0, #-3]
 801656a:	10da      	asrs	r2, r3, #3
 801656c:	121b      	asrs	r3, r3, #8
 801656e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016572:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016576:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801657a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801657e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8016582:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016586:	e7e5      	b.n	8016554 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8016588:	4b02      	ldr	r3, [pc, #8]	; (8016594 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801658a:	6818      	ldr	r0, [r3, #0]
 801658c:	6803      	ldr	r3, [r0, #0]
 801658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016590:	4798      	blx	r3
 8016592:	e76a      	b.n	801646a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016594:	24006c68 	.word	0x24006c68
 8016598:	24006c62 	.word	0x24006c62

0801659c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165a0:	b08a      	sub	sp, #40	; 0x28
 80165a2:	460d      	mov	r5, r1
 80165a4:	4604      	mov	r4, r0
 80165a6:	461e      	mov	r6, r3
 80165a8:	6808      	ldr	r0, [r1, #0]
 80165aa:	ab06      	add	r3, sp, #24
 80165ac:	6849      	ldr	r1, [r1, #4]
 80165ae:	4f5d      	ldr	r7, [pc, #372]	; (8016724 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80165b0:	c303      	stmia	r3!, {r0, r1}
 80165b2:	6810      	ldr	r0, [r2, #0]
 80165b4:	ab08      	add	r3, sp, #32
 80165b6:	6851      	ldr	r1, [r2, #4]
 80165b8:	c303      	stmia	r3!, {r0, r1}
 80165ba:	a806      	add	r0, sp, #24
 80165bc:	f7f9 ff16 	bl	80103ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80165c0:	4629      	mov	r1, r5
 80165c2:	a808      	add	r0, sp, #32
 80165c4:	f7f9 ff56 	bl	8010474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80165c8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80165cc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80165d0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80165d4:	6838      	ldr	r0, [r7, #0]
 80165d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80165da:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80165de:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80165e2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80165e6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80165ea:	440a      	add	r2, r1
 80165ec:	f8ad 2020 	strh.w	r2, [sp, #32]
 80165f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80165f4:	4413      	add	r3, r2
 80165f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80165fa:	6803      	ldr	r3, [r0, #0]
 80165fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165fe:	4798      	blx	r3
 8016600:	2eff      	cmp	r6, #255	; 0xff
 8016602:	d119      	bne.n	8016638 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8016604:	f010 0f20 	tst.w	r0, #32
 8016608:	6838      	ldr	r0, [r7, #0]
 801660a:	d018      	beq.n	801663e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801660c:	b2ad      	uxth	r5, r5
 801660e:	2700      	movs	r7, #0
 8016610:	6801      	ldr	r1, [r0, #0]
 8016612:	9501      	str	r5, [sp, #4]
 8016614:	fa1f f588 	uxth.w	r5, r8
 8016618:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801661c:	9500      	str	r5, [sp, #0]
 801661e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016622:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016626:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801662a:	9602      	str	r6, [sp, #8]
 801662c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801662e:	4621      	mov	r1, r4
 8016630:	47a8      	blx	r5
 8016632:	b00a      	add	sp, #40	; 0x28
 8016634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016638:	f010 0f40 	tst.w	r0, #64	; 0x40
 801663c:	e7e4      	b.n	8016608 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801663e:	6803      	ldr	r3, [r0, #0]
 8016640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016642:	4798      	blx	r3
 8016644:	4b38      	ldr	r3, [pc, #224]	; (8016728 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8016646:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801664a:	f8b3 c000 	ldrh.w	ip, [r3]
 801664e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016652:	fb0c f505 	mul.w	r5, ip, r5
 8016656:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801665a:	fb0c 2303 	mla	r3, ip, r3, r2
 801665e:	ebac 0c08 	sub.w	ip, ip, r8
 8016662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016666:	ebae 0e08 	sub.w	lr, lr, r8
 801666a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801666e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016672:	4418      	add	r0, r3
 8016674:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016678:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801667c:	4405      	add	r5, r0
 801667e:	42a8      	cmp	r0, r5
 8016680:	d24a      	bcs.n	8016718 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016682:	eb00 0803 	add.w	r8, r0, r3
 8016686:	4540      	cmp	r0, r8
 8016688:	d243      	bcs.n	8016712 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801668a:	78e2      	ldrb	r2, [r4, #3]
 801668c:	b15a      	cbz	r2, 80166a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801668e:	2aff      	cmp	r2, #255	; 0xff
 8016690:	f894 9000 	ldrb.w	r9, [r4]
 8016694:	d10a      	bne.n	80166ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016696:	2eff      	cmp	r6, #255	; 0xff
 8016698:	d108      	bne.n	80166ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801669a:	f880 9000 	strb.w	r9, [r0]
 801669e:	7862      	ldrb	r2, [r4, #1]
 80166a0:	7042      	strb	r2, [r0, #1]
 80166a2:	78a2      	ldrb	r2, [r4, #2]
 80166a4:	7082      	strb	r2, [r0, #2]
 80166a6:	3003      	adds	r0, #3
 80166a8:	3404      	adds	r4, #4
 80166aa:	e7ec      	b.n	8016686 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80166ac:	4372      	muls	r2, r6
 80166ae:	1c51      	adds	r1, r2, #1
 80166b0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80166b4:	1209      	asrs	r1, r1, #8
 80166b6:	fa1f fa81 	uxth.w	sl, r1
 80166ba:	43c9      	mvns	r1, r1
 80166bc:	fb19 f90a 	smulbb	r9, r9, sl
 80166c0:	b2ca      	uxtb	r2, r1
 80166c2:	7801      	ldrb	r1, [r0, #0]
 80166c4:	fb01 9902 	mla	r9, r1, r2, r9
 80166c8:	fa1f f989 	uxth.w	r9, r9
 80166cc:	f109 0101 	add.w	r1, r9, #1
 80166d0:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80166d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166d8:	f880 9000 	strb.w	r9, [r0]
 80166dc:	f890 9001 	ldrb.w	r9, [r0, #1]
 80166e0:	7861      	ldrb	r1, [r4, #1]
 80166e2:	fb19 f902 	smulbb	r9, r9, r2
 80166e6:	fb01 910a 	mla	r1, r1, sl, r9
 80166ea:	b289      	uxth	r1, r1
 80166ec:	f101 0901 	add.w	r9, r1, #1
 80166f0:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80166f4:	1209      	asrs	r1, r1, #8
 80166f6:	7041      	strb	r1, [r0, #1]
 80166f8:	7881      	ldrb	r1, [r0, #2]
 80166fa:	f894 9002 	ldrb.w	r9, [r4, #2]
 80166fe:	fb11 f202 	smulbb	r2, r1, r2
 8016702:	fb09 220a 	mla	r2, r9, sl, r2
 8016706:	b292      	uxth	r2, r2
 8016708:	1c51      	adds	r1, r2, #1
 801670a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801670e:	1212      	asrs	r2, r2, #8
 8016710:	e7c8      	b.n	80166a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8016712:	4460      	add	r0, ip
 8016714:	4474      	add	r4, lr
 8016716:	e7b2      	b.n	801667e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8016718:	6838      	ldr	r0, [r7, #0]
 801671a:	6803      	ldr	r3, [r0, #0]
 801671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801671e:	4798      	blx	r3
 8016720:	e787      	b.n	8016632 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8016722:	bf00      	nop
 8016724:	24006c68 	.word	0x24006c68
 8016728:	24006c62 	.word	0x24006c62

0801672c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801672c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016730:	b085      	sub	sp, #20
 8016732:	4606      	mov	r6, r0
 8016734:	460c      	mov	r4, r1
 8016736:	4691      	mov	r9, r2
 8016738:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801673c:	4698      	mov	r8, r3
 801673e:	b31d      	cbz	r5, 8016788 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016740:	4608      	mov	r0, r1
 8016742:	f7fd f9e9 	bl	8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016746:	4607      	mov	r7, r0
 8016748:	4620      	mov	r0, r4
 801674a:	f7fd fa1f 	bl	8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801674e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016752:	4620      	mov	r0, r4
 8016754:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016758:	f8ad 800a 	strh.w	r8, [sp, #10]
 801675c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016760:	f7fd fb6c 	bl	8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016764:	280b      	cmp	r0, #11
 8016766:	d838      	bhi.n	80167da <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8016768:	e8df f000 	tbb	[pc, r0]
 801676c:	37062920 	.word	0x37062920
 8016770:	37373737 	.word	0x37373737
 8016774:	11373737 	.word	0x11373737
 8016778:	4620      	mov	r0, r4
 801677a:	f7fd fad5 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801677e:	462b      	mov	r3, r5
 8016780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016782:	a902      	add	r1, sp, #8
 8016784:	f7ff ff0a 	bl	801659c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016788:	b005      	add	sp, #20
 801678a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801678e:	4620      	mov	r0, r4
 8016790:	f7fd faca 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016794:	4606      	mov	r6, r0
 8016796:	4620      	mov	r0, r4
 8016798:	f7fd faf8 	bl	8013d8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801679c:	9500      	str	r5, [sp, #0]
 801679e:	4601      	mov	r1, r0
 80167a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167a2:	aa02      	add	r2, sp, #8
 80167a4:	4630      	mov	r0, r6
 80167a6:	f7ff fde5 	bl	8016374 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80167aa:	e7ed      	b.n	8016788 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80167ac:	4620      	mov	r0, r4
 80167ae:	f7fd fabb 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 80167b2:	462b      	mov	r3, r5
 80167b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80167b6:	a902      	add	r1, sp, #8
 80167b8:	f7ff fdfc 	bl	80163b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80167bc:	e7e4      	b.n	8016788 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80167be:	6833      	ldr	r3, [r6, #0]
 80167c0:	4620      	mov	r0, r4
 80167c2:	68df      	ldr	r7, [r3, #12]
 80167c4:	f7fd fab0 	bl	8013d28 <_ZNK8touchgfx6Bitmap7getDataEv>
 80167c8:	2300      	movs	r3, #0
 80167ca:	4601      	mov	r1, r0
 80167cc:	aa02      	add	r2, sp, #8
 80167ce:	4630      	mov	r0, r6
 80167d0:	e9cd 5300 	strd	r5, r3, [sp]
 80167d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167d6:	47b8      	blx	r7
 80167d8:	e7d6      	b.n	8016788 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80167da:	4b03      	ldr	r3, [pc, #12]	; (80167e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 80167dc:	2147      	movs	r1, #71	; 0x47
 80167de:	4a03      	ldr	r2, [pc, #12]	; (80167ec <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 80167e0:	4803      	ldr	r0, [pc, #12]	; (80167f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 80167e2:	f005 fdab 	bl	801c33c <__assert_func>
 80167e6:	bf00      	nop
 80167e8:	080203a2 	.word	0x080203a2
 80167ec:	080209df 	.word	0x080209df
 80167f0:	08020471 	.word	0x08020471

080167f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80167f4:	b570      	push	{r4, r5, r6, lr}
 80167f6:	9c04      	ldr	r4, [sp, #16]
 80167f8:	4605      	mov	r5, r0
 80167fa:	4608      	mov	r0, r1
 80167fc:	4619      	mov	r1, r3
 80167fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016802:	2a0d      	cmp	r2, #13
 8016804:	d826      	bhi.n	8016854 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8016806:	e8df f002 	tbb	[pc, r2]
 801680a:	1107      	.short	0x1107
 801680c:	1e1e1e0c 	.word	0x1e1e1e0c
 8016810:	1e1e1e1e 	.word	0x1e1e1e1e
 8016814:	1e1e1e1e 	.word	0x1e1e1e1e
 8016818:	4622      	mov	r2, r4
 801681a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801681e:	f7ff bdc9 	b.w	80163b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016822:	4622      	mov	r2, r4
 8016824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016828:	f7ff beb8 	b.w	801659c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801682c:	682a      	ldr	r2, [r5, #0]
 801682e:	2600      	movs	r6, #0
 8016830:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8016834:	68d6      	ldr	r6, [r2, #12]
 8016836:	4623      	mov	r3, r4
 8016838:	460a      	mov	r2, r1
 801683a:	4601      	mov	r1, r0
 801683c:	46b4      	mov	ip, r6
 801683e:	4628      	mov	r0, r5
 8016840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016844:	4760      	bx	ip
 8016846:	4b04      	ldr	r3, [pc, #16]	; (8016858 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8016848:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801684c:	4a03      	ldr	r2, [pc, #12]	; (801685c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801684e:	4804      	ldr	r0, [pc, #16]	; (8016860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8016850:	f005 fd74 	bl	801c33c <__assert_func>
 8016854:	bd70      	pop	{r4, r5, r6, pc}
 8016856:	bf00      	nop
 8016858:	08020648 	.word	0x08020648
 801685c:	08020cc7 	.word	0x08020cc7
 8016860:	08020471 	.word	0x08020471

08016864 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016864:	b158      	cbz	r0, 801687e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8016866:	2902      	cmp	r1, #2
 8016868:	d00f      	beq.n	801688a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801686a:	2903      	cmp	r1, #3
 801686c:	d010      	beq.n	8016890 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801686e:	2901      	cmp	r1, #1
 8016870:	d101      	bne.n	8016876 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016872:	2001      	movs	r0, #1
 8016874:	4770      	bx	lr
 8016876:	4b08      	ldr	r3, [pc, #32]	; (8016898 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8016878:	8819      	ldrh	r1, [r3, #0]
 801687a:	4248      	negs	r0, r1
 801687c:	4770      	bx	lr
 801687e:	2902      	cmp	r1, #2
 8016880:	d006      	beq.n	8016890 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8016882:	2903      	cmp	r1, #3
 8016884:	d0f7      	beq.n	8016876 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016886:	2901      	cmp	r1, #1
 8016888:	d1f3      	bne.n	8016872 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801688a:	4b03      	ldr	r3, [pc, #12]	; (8016898 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801688c:	8818      	ldrh	r0, [r3, #0]
 801688e:	4770      	bx	lr
 8016890:	f04f 30ff 	mov.w	r0, #4294967295
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	24006c62 	.word	0x24006c62

0801689c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801689c:	b170      	cbz	r0, 80168bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801689e:	2902      	cmp	r1, #2
 80168a0:	d012      	beq.n	80168c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80168a2:	2903      	cmp	r1, #3
 80168a4:	d006      	beq.n	80168b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80168a6:	2901      	cmp	r1, #1
 80168a8:	d001      	beq.n	80168ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80168aa:	2001      	movs	r0, #1
 80168ac:	4770      	bx	lr
 80168ae:	4b08      	ldr	r3, [pc, #32]	; (80168d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80168b0:	8818      	ldrh	r0, [r3, #0]
 80168b2:	4770      	bx	lr
 80168b4:	4b06      	ldr	r3, [pc, #24]	; (80168d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80168b6:	8818      	ldrh	r0, [r3, #0]
 80168b8:	4240      	negs	r0, r0
 80168ba:	4770      	bx	lr
 80168bc:	2902      	cmp	r1, #2
 80168be:	d0f9      	beq.n	80168b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80168c0:	2903      	cmp	r1, #3
 80168c2:	d0f2      	beq.n	80168aa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80168c4:	2901      	cmp	r1, #1
 80168c6:	d1f2      	bne.n	80168ae <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80168c8:	f04f 30ff 	mov.w	r0, #4294967295
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	24006c62 	.word	0x24006c62

080168d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80168d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d8:	b097      	sub	sp, #92	; 0x5c
 80168da:	910b      	str	r1, [sp, #44]	; 0x2c
 80168dc:	a912      	add	r1, sp, #72	; 0x48
 80168de:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80168e2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80168e6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80168ea:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80168ee:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80168f2:	e881 000c 	stmia.w	r1, {r2, r3}
 80168f6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80168fa:	930a      	str	r3, [sp, #40]	; 0x28
 80168fc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016900:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8016904:	9311      	str	r3, [sp, #68]	; 0x44
 8016906:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801690a:	798d      	ldrb	r5, [r1, #6]
 801690c:	930c      	str	r3, [sp, #48]	; 0x30
 801690e:	7b4b      	ldrb	r3, [r1, #13]
 8016910:	0158      	lsls	r0, r3, #5
 8016912:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016916:	4328      	orrs	r0, r5
 8016918:	9009      	str	r0, [sp, #36]	; 0x24
 801691a:	f000 817d 	beq.w	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801691e:	011b      	lsls	r3, r3, #4
 8016920:	79c8      	ldrb	r0, [r1, #7]
 8016922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016926:	4303      	orrs	r3, r0
 8016928:	930e      	str	r3, [sp, #56]	; 0x38
 801692a:	f000 8175 	beq.w	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801692e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8016932:	b29b      	uxth	r3, r3
 8016934:	2f00      	cmp	r7, #0
 8016936:	f000 8117 	beq.w	8016b68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801693a:	1aff      	subs	r7, r7, r3
 801693c:	b2bf      	uxth	r7, r7
 801693e:	043b      	lsls	r3, r7, #16
 8016940:	d502      	bpl.n	8016948 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016942:	1bf6      	subs	r6, r6, r7
 8016944:	2700      	movs	r7, #0
 8016946:	b236      	sxth	r6, r6
 8016948:	f9b2 1000 	ldrsh.w	r1, [r2]
 801694c:	a812      	add	r0, sp, #72	; 0x48
 801694e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8016952:	428e      	cmp	r6, r1
 8016954:	b28b      	uxth	r3, r1
 8016956:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801695a:	bfbf      	itttt	lt
 801695c:	18ff      	addlt	r7, r7, r3
 801695e:	1bbe      	sublt	r6, r7, r6
 8016960:	b2b7      	uxthlt	r7, r6
 8016962:	460e      	movlt	r6, r1
 8016964:	8891      	ldrh	r1, [r2, #4]
 8016966:	440b      	add	r3, r1
 8016968:	4631      	mov	r1, r6
 801696a:	b21b      	sxth	r3, r3
 801696c:	9310      	str	r3, [sp, #64]	; 0x40
 801696e:	88d3      	ldrh	r3, [r2, #6]
 8016970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016972:	449a      	add	sl, r3
 8016974:	fa0f f38a 	sxth.w	r3, sl
 8016978:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801697c:	930f      	str	r3, [sp, #60]	; 0x3c
 801697e:	4bb6      	ldr	r3, [pc, #728]	; (8016c58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016980:	f893 b000 	ldrb.w	fp, [r3]
 8016984:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016988:	f1dc 0300 	rsbs	r3, ip, #0
 801698c:	eb43 030c 	adc.w	r3, r3, ip
 8016990:	930d      	str	r3, [sp, #52]	; 0x34
 8016992:	464b      	mov	r3, r9
 8016994:	f7f9 fbae 	bl	80100f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016998:	4631      	mov	r1, r6
 801699a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801699e:	464b      	mov	r3, r9
 80169a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169a2:	a812      	add	r0, sp, #72	; 0x48
 80169a4:	f7f9 fbbe 	bl	8010124 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80169a8:	a916      	add	r1, sp, #88	; 0x58
 80169aa:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80169ae:	a815      	add	r0, sp, #84	; 0x54
 80169b0:	f7f9 fcda 	bl	8010368 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80169b4:	f1b9 0f00 	cmp.w	r9, #0
 80169b8:	f040 80d9 	bne.w	8016b6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 80169bc:	f1bb 0f01 	cmp.w	fp, #1
 80169c0:	f040 80dd 	bne.w	8016b7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80169c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80169c6:	b153      	cbz	r3, 80169de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80169c8:	2508      	movs	r5, #8
 80169ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169cc:	fb95 f3f8 	sdiv	r3, r5, r8
 80169d0:	1e5d      	subs	r5, r3, #1
 80169d2:	4415      	add	r5, r2
 80169d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80169d8:	fb15 f503 	smulbb	r5, r5, r3
 80169dc:	b2ad      	uxth	r5, r5
 80169de:	b907      	cbnz	r7, 80169e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80169e0:	b16c      	cbz	r4, 80169fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80169e2:	fb04 7305 	mla	r3, r4, r5, r7
 80169e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80169e8:	ebaa 0a04 	sub.w	sl, sl, r4
 80169ec:	fb08 f303 	mul.w	r3, r8, r3
 80169f0:	fa1f fa8a 	uxth.w	sl, sl
 80169f4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80169f8:	f003 0407 	and.w	r4, r3, #7
 80169fc:	9226      	str	r2, [sp, #152]	; 0x98
 80169fe:	4649      	mov	r1, r9
 8016a00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016a02:	f7ff ff2f 	bl	8016864 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8016a06:	4649      	mov	r1, r9
 8016a08:	4683      	mov	fp, r0
 8016a0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016a0c:	f7ff ff46 	bl	801689c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a14:	4681      	mov	r9, r0
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	459a      	cmp	sl, r3
 8016a1a:	bfa8      	it	ge
 8016a1c:	469a      	movge	sl, r3
 8016a1e:	f1ba 0f00 	cmp.w	sl, #0
 8016a22:	f340 80f9 	ble.w	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016a26:	1bf6      	subs	r6, r6, r7
 8016a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a2a:	1b9e      	subs	r6, r3, r6
 8016a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a2e:	429e      	cmp	r6, r3
 8016a30:	bfd4      	ite	le
 8016a32:	ebc7 0706 	rsble	r7, r7, r6
 8016a36:	ebc7 0703 	rsbgt	r7, r7, r3
 8016a3a:	2f00      	cmp	r7, #0
 8016a3c:	f340 80ec 	ble.w	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016a40:	1bed      	subs	r5, r5, r7
 8016a42:	fb08 f305 	mul.w	r3, r8, r5
 8016a46:	930d      	str	r3, [sp, #52]	; 0x34
 8016a48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a4a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8016a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8016a50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016a5a:	b2db      	uxtb	r3, r3
 8016a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8016a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f040 80de 	bne.w	8016c22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8016a66:	4b7d      	ldr	r3, [pc, #500]	; (8016c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8016a68:	6818      	ldr	r0, [r3, #0]
 8016a6a:	6803      	ldr	r3, [r0, #0]
 8016a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a6e:	4798      	blx	r3
 8016a70:	2301      	movs	r3, #1
 8016a72:	4a7b      	ldr	r2, [pc, #492]	; (8016c60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8016a74:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016a78:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016a7c:	fa03 f308 	lsl.w	r3, r3, r8
 8016a80:	8811      	ldrh	r1, [r2, #0]
 8016a82:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016a86:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	fb06 bb07 	mla	fp, r6, r7, fp
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	930a      	str	r3, [sp, #40]	; 0x28
 8016a94:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016a98:	fb01 2303 	mla	r3, r1, r3, r2
 8016a9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016aa0:	18c3      	adds	r3, r0, r3
 8016aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8016aa4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016aa6:	781a      	ldrb	r2, [r3, #0]
 8016aa8:	4122      	asrs	r2, r4
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016ab0:	f0c0 80d8 	bcc.w	8016c64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8016ab4:	46be      	mov	lr, r7
 8016ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ab8:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016abc:	f0c0 80ba 	bcc.w	8016c34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8016ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ac2:	4013      	ands	r3, r2
 8016ac4:	d041      	beq.n	8016b4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016ac6:	20ff      	movs	r0, #255	; 0xff
 8016ac8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016aca:	fb90 f5f5 	sdiv	r5, r0, r5
 8016ace:	436b      	muls	r3, r5
 8016ad0:	2bfe      	cmp	r3, #254	; 0xfe
 8016ad2:	dd03      	ble.n	8016adc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8016ad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ad6:	4285      	cmp	r5, r0
 8016ad8:	f000 80a5 	beq.w	8016c26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8016adc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ade:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016ae0:	fb15 f303 	smulbb	r3, r5, r3
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	1c5d      	adds	r5, r3, #1
 8016ae8:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016aec:	780d      	ldrb	r5, [r1, #0]
 8016aee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016af2:	fa1f fc83 	uxth.w	ip, r3
 8016af6:	43db      	mvns	r3, r3
 8016af8:	fb10 f90c 	smulbb	r9, r0, ip
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016b00:	fb05 9503 	mla	r5, r5, r3, r9
 8016b04:	b2ad      	uxth	r5, r5
 8016b06:	f105 0901 	add.w	r9, r5, #1
 8016b0a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016b0e:	fb10 f90c 	smulbb	r9, r0, ip
 8016b12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016b14:	122d      	asrs	r5, r5, #8
 8016b16:	fb10 fc0c 	smulbb	ip, r0, ip
 8016b1a:	700d      	strb	r5, [r1, #0]
 8016b1c:	784d      	ldrb	r5, [r1, #1]
 8016b1e:	fb05 9503 	mla	r5, r5, r3, r9
 8016b22:	b2ad      	uxth	r5, r5
 8016b24:	f105 0901 	add.w	r9, r5, #1
 8016b28:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016b2c:	122d      	asrs	r5, r5, #8
 8016b2e:	704d      	strb	r5, [r1, #1]
 8016b30:	788d      	ldrb	r5, [r1, #2]
 8016b32:	fb05 cc03 	mla	ip, r5, r3, ip
 8016b36:	fa1f fc8c 	uxth.w	ip, ip
 8016b3a:	f10c 0301 	add.w	r3, ip, #1
 8016b3e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016b42:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016b46:	f881 c002 	strb.w	ip, [r1, #2]
 8016b4a:	4444      	add	r4, r8
 8016b4c:	4431      	add	r1, r6
 8016b4e:	b2a4      	uxth	r4, r4
 8016b50:	2c07      	cmp	r4, #7
 8016b52:	bf89      	itett	hi
 8016b54:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8016b56:	fa42 f208 	asrls.w	r2, r2, r8
 8016b5a:	2400      	movhi	r4, #0
 8016b5c:	785a      	ldrbhi	r2, [r3, #1]
 8016b5e:	bf8a      	itet	hi
 8016b60:	3301      	addhi	r3, #1
 8016b62:	b2d2      	uxtbls	r2, r2
 8016b64:	9326      	strhi	r3, [sp, #152]	; 0x98
 8016b66:	e7a7      	b.n	8016ab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8016b68:	441e      	add	r6, r3
 8016b6a:	b236      	sxth	r6, r6
 8016b6c:	e6ec      	b.n	8016948 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016b6e:	f1b9 0f01 	cmp.w	r9, #1
 8016b72:	f47f af27 	bne.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b76:	f1bb 0f01 	cmp.w	fp, #1
 8016b7a:	f47f af23 	bne.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b7e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8016c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8016b82:	f8db 0000 	ldr.w	r0, [fp]
 8016b86:	6803      	ldr	r3, [r0, #0]
 8016b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b8a:	4798      	blx	r3
 8016b8c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8016b90:	465a      	mov	r2, fp
 8016b92:	d006      	beq.n	8016ba2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016b94:	f1b8 0f04 	cmp.w	r8, #4
 8016b98:	d141      	bne.n	8016c1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8016b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b9c:	3300      	adds	r3, #0
 8016b9e:	bf18      	it	ne
 8016ba0:	2301      	movne	r3, #1
 8016ba2:	0580      	lsls	r0, r0, #22
 8016ba4:	d567      	bpl.n	8016c76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016ba6:	f1b8 0f08 	cmp.w	r8, #8
 8016baa:	d164      	bne.n	8016c76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	bf0c      	ite	eq
 8016bb0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8016bb4:	f44f 7180 	movne.w	r1, #256	; 0x100
 8016bb8:	2f00      	cmp	r7, #0
 8016bba:	f47f af03 	bne.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bbe:	2c00      	cmp	r4, #0
 8016bc0:	f47f af00 	bne.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016bc8:	18f3      	adds	r3, r6, r3
 8016bca:	4283      	cmp	r3, r0
 8016bcc:	f73f aefa 	bgt.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd4:	4403      	add	r3, r0
 8016bd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016bd8:	4283      	cmp	r3, r0
 8016bda:	f73f aef3 	bgt.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bde:	f1b8 0f08 	cmp.w	r8, #8
 8016be2:	6810      	ldr	r0, [r2, #0]
 8016be4:	f04f 0600 	mov.w	r6, #0
 8016be8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016bec:	bf18      	it	ne
 8016bee:	3501      	addne	r5, #1
 8016bf0:	6804      	ldr	r4, [r0, #0]
 8016bf2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016bf6:	bf18      	it	ne
 8016bf8:	f025 0501 	bicne.w	r5, r5, #1
 8016bfc:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8016c00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c02:	bf18      	it	ne
 8016c04:	b2ad      	uxthne	r5, r5
 8016c06:	9104      	str	r1, [sp, #16]
 8016c08:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016c0a:	e9cd 5a00 	strd	r5, sl, [sp]
 8016c0e:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8016c12:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016c14:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8016c16:	47a0      	blx	r4
 8016c18:	b017      	add	sp, #92	; 0x5c
 8016c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c1e:	2300      	movs	r3, #0
 8016c20:	e7bf      	b.n	8016ba2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016c22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016c24:	e724      	b.n	8016a70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8016c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c28:	700b      	strb	r3, [r1, #0]
 8016c2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c2c:	704b      	strb	r3, [r1, #1]
 8016c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c30:	708b      	strb	r3, [r1, #2]
 8016c32:	e78a      	b.n	8016b4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c36:	b153      	cbz	r3, 8016c4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8016c38:	441c      	add	r4, r3
 8016c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c3c:	b2a4      	uxth	r4, r4
 8016c3e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8016c42:	f004 0407 	and.w	r4, r4, #7
 8016c46:	781a      	ldrb	r2, [r3, #0]
 8016c48:	9326      	str	r3, [sp, #152]	; 0x98
 8016c4a:	4122      	asrs	r2, r4
 8016c4c:	b2d2      	uxtb	r2, r2
 8016c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c50:	445b      	add	r3, fp
 8016c52:	9309      	str	r3, [sp, #36]	; 0x24
 8016c54:	e72a      	b.n	8016aac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8016c56:	bf00      	nop
 8016c58:	24006c60 	.word	0x24006c60
 8016c5c:	24006c68 	.word	0x24006c68
 8016c60:	24006c62 	.word	0x24006c62
 8016c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d1d6      	bne.n	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016c6a:	4b06      	ldr	r3, [pc, #24]	; (8016c84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8016c6c:	6818      	ldr	r0, [r3, #0]
 8016c6e:	6803      	ldr	r3, [r0, #0]
 8016c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c72:	4798      	blx	r3
 8016c74:	e7d0      	b.n	8016c18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	f43f aea4 	beq.w	80169c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016c80:	e79a      	b.n	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8016c82:	bf00      	nop
 8016c84:	24006c68 	.word	0x24006c68

08016c88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016c88:	b538      	push	{r3, r4, r5, lr}
 8016c8a:	4c15      	ldr	r4, [pc, #84]	; (8016ce0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016c8c:	4605      	mov	r5, r0
 8016c8e:	7823      	ldrb	r3, [r4, #0]
 8016c90:	f3bf 8f5b 	dmb	ish
 8016c94:	07da      	lsls	r2, r3, #31
 8016c96:	d40b      	bmi.n	8016cb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f005 fa3b 	bl	801c114 <__cxa_guard_acquire>
 8016c9e:	b138      	cbz	r0, 8016cb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f005 fa43 	bl	801c12c <__cxa_guard_release>
 8016ca6:	4a0f      	ldr	r2, [pc, #60]	; (8016ce4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016ca8:	490f      	ldr	r1, [pc, #60]	; (8016ce8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016caa:	4810      	ldr	r0, [pc, #64]	; (8016cec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016cac:	f005 fa2b 	bl	801c106 <__aeabi_atexit>
 8016cb0:	4c0f      	ldr	r4, [pc, #60]	; (8016cf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016cb2:	7823      	ldrb	r3, [r4, #0]
 8016cb4:	f3bf 8f5b 	dmb	ish
 8016cb8:	07db      	lsls	r3, r3, #31
 8016cba:	d40b      	bmi.n	8016cd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f005 fa29 	bl	801c114 <__cxa_guard_acquire>
 8016cc2:	b138      	cbz	r0, 8016cd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	f005 fa31 	bl	801c12c <__cxa_guard_release>
 8016cca:	4a06      	ldr	r2, [pc, #24]	; (8016ce4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016ccc:	4909      	ldr	r1, [pc, #36]	; (8016cf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016cce:	480a      	ldr	r0, [pc, #40]	; (8016cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016cd0:	f005 fa19 	bl	801c106 <__aeabi_atexit>
 8016cd4:	4b05      	ldr	r3, [pc, #20]	; (8016cec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016cd6:	612b      	str	r3, [r5, #16]
 8016cd8:	4b07      	ldr	r3, [pc, #28]	; (8016cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016cda:	616b      	str	r3, [r5, #20]
 8016cdc:	bd38      	pop	{r3, r4, r5, pc}
 8016cde:	bf00      	nop
 8016ce0:	24006d34 	.word	0x24006d34
 8016ce4:	24000000 	.word	0x24000000
 8016ce8:	08015701 	.word	0x08015701
 8016cec:	240000c4 	.word	0x240000c4
 8016cf0:	24006d38 	.word	0x24006d38
 8016cf4:	080156ff 	.word	0x080156ff
 8016cf8:	240000c8 	.word	0x240000c8

08016cfc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016cfc:	b538      	push	{r3, r4, r5, lr}
 8016cfe:	4c15      	ldr	r4, [pc, #84]	; (8016d54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016d00:	4605      	mov	r5, r0
 8016d02:	7823      	ldrb	r3, [r4, #0]
 8016d04:	f3bf 8f5b 	dmb	ish
 8016d08:	07da      	lsls	r2, r3, #31
 8016d0a:	d40b      	bmi.n	8016d24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f005 fa01 	bl	801c114 <__cxa_guard_acquire>
 8016d12:	b138      	cbz	r0, 8016d24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016d14:	4620      	mov	r0, r4
 8016d16:	f005 fa09 	bl	801c12c <__cxa_guard_release>
 8016d1a:	4a0f      	ldr	r2, [pc, #60]	; (8016d58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016d1c:	490f      	ldr	r1, [pc, #60]	; (8016d5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016d1e:	4810      	ldr	r0, [pc, #64]	; (8016d60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016d20:	f005 f9f1 	bl	801c106 <__aeabi_atexit>
 8016d24:	4c0f      	ldr	r4, [pc, #60]	; (8016d64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8016d26:	7823      	ldrb	r3, [r4, #0]
 8016d28:	f3bf 8f5b 	dmb	ish
 8016d2c:	07db      	lsls	r3, r3, #31
 8016d2e:	d40b      	bmi.n	8016d48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016d30:	4620      	mov	r0, r4
 8016d32:	f005 f9ef 	bl	801c114 <__cxa_guard_acquire>
 8016d36:	b138      	cbz	r0, 8016d48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f005 f9f7 	bl	801c12c <__cxa_guard_release>
 8016d3e:	4a06      	ldr	r2, [pc, #24]	; (8016d58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016d40:	4909      	ldr	r1, [pc, #36]	; (8016d68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016d42:	480a      	ldr	r0, [pc, #40]	; (8016d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016d44:	f005 f9df 	bl	801c106 <__aeabi_atexit>
 8016d48:	4b05      	ldr	r3, [pc, #20]	; (8016d60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016d4a:	60ab      	str	r3, [r5, #8]
 8016d4c:	4b07      	ldr	r3, [pc, #28]	; (8016d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016d4e:	60eb      	str	r3, [r5, #12]
 8016d50:	bd38      	pop	{r3, r4, r5, pc}
 8016d52:	bf00      	nop
 8016d54:	24006d14 	.word	0x24006d14
 8016d58:	24000000 	.word	0x24000000
 8016d5c:	08015705 	.word	0x08015705
 8016d60:	240000a4 	.word	0x240000a4
 8016d64:	24006d18 	.word	0x24006d18
 8016d68:	08015703 	.word	0x08015703
 8016d6c:	240000a8 	.word	0x240000a8

08016d70 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016d70:	b510      	push	{r4, lr}
 8016d72:	4604      	mov	r4, r0
 8016d74:	f7ff ff88 	bl	8016c88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d7e:	f7ff bfbd 	b.w	8016cfc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016d84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016d84:	b538      	push	{r3, r4, r5, lr}
 8016d86:	4c15      	ldr	r4, [pc, #84]	; (8016ddc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016d88:	4605      	mov	r5, r0
 8016d8a:	7823      	ldrb	r3, [r4, #0]
 8016d8c:	f3bf 8f5b 	dmb	ish
 8016d90:	07da      	lsls	r2, r3, #31
 8016d92:	d40b      	bmi.n	8016dac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d94:	4620      	mov	r0, r4
 8016d96:	f005 f9bd 	bl	801c114 <__cxa_guard_acquire>
 8016d9a:	b138      	cbz	r0, 8016dac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f005 f9c5 	bl	801c12c <__cxa_guard_release>
 8016da2:	4a0f      	ldr	r2, [pc, #60]	; (8016de0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016da4:	490f      	ldr	r1, [pc, #60]	; (8016de4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016da6:	4810      	ldr	r0, [pc, #64]	; (8016de8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016da8:	f005 f9ad 	bl	801c106 <__aeabi_atexit>
 8016dac:	4c0f      	ldr	r4, [pc, #60]	; (8016dec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016dae:	7823      	ldrb	r3, [r4, #0]
 8016db0:	f3bf 8f5b 	dmb	ish
 8016db4:	07db      	lsls	r3, r3, #31
 8016db6:	d40b      	bmi.n	8016dd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016db8:	4620      	mov	r0, r4
 8016dba:	f005 f9ab 	bl	801c114 <__cxa_guard_acquire>
 8016dbe:	b138      	cbz	r0, 8016dd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f005 f9b3 	bl	801c12c <__cxa_guard_release>
 8016dc6:	4a06      	ldr	r2, [pc, #24]	; (8016de0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016dc8:	4909      	ldr	r1, [pc, #36]	; (8016df0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016dca:	480a      	ldr	r0, [pc, #40]	; (8016df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016dcc:	f005 f99b 	bl	801c106 <__aeabi_atexit>
 8016dd0:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016dd2:	622b      	str	r3, [r5, #32]
 8016dd4:	4b07      	ldr	r3, [pc, #28]	; (8016df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016dd6:	626b      	str	r3, [r5, #36]	; 0x24
 8016dd8:	bd38      	pop	{r3, r4, r5, pc}
 8016dda:	bf00      	nop
 8016ddc:	24006d3c 	.word	0x24006d3c
 8016de0:	24000000 	.word	0x24000000
 8016de4:	080156f9 	.word	0x080156f9
 8016de8:	240000cc 	.word	0x240000cc
 8016dec:	24006d40 	.word	0x24006d40
 8016df0:	080156f7 	.word	0x080156f7
 8016df4:	240000d0 	.word	0x240000d0

08016df8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016df8:	b538      	push	{r3, r4, r5, lr}
 8016dfa:	4c15      	ldr	r4, [pc, #84]	; (8016e50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	7823      	ldrb	r3, [r4, #0]
 8016e00:	f3bf 8f5b 	dmb	ish
 8016e04:	07da      	lsls	r2, r3, #31
 8016e06:	d40b      	bmi.n	8016e20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f005 f983 	bl	801c114 <__cxa_guard_acquire>
 8016e0e:	b138      	cbz	r0, 8016e20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016e10:	4620      	mov	r0, r4
 8016e12:	f005 f98b 	bl	801c12c <__cxa_guard_release>
 8016e16:	4a0f      	ldr	r2, [pc, #60]	; (8016e54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016e18:	490f      	ldr	r1, [pc, #60]	; (8016e58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016e1a:	4810      	ldr	r0, [pc, #64]	; (8016e5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016e1c:	f005 f973 	bl	801c106 <__aeabi_atexit>
 8016e20:	4c0f      	ldr	r4, [pc, #60]	; (8016e60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016e22:	7823      	ldrb	r3, [r4, #0]
 8016e24:	f3bf 8f5b 	dmb	ish
 8016e28:	07db      	lsls	r3, r3, #31
 8016e2a:	d40b      	bmi.n	8016e44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	f005 f971 	bl	801c114 <__cxa_guard_acquire>
 8016e32:	b138      	cbz	r0, 8016e44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016e34:	4620      	mov	r0, r4
 8016e36:	f005 f979 	bl	801c12c <__cxa_guard_release>
 8016e3a:	4a06      	ldr	r2, [pc, #24]	; (8016e54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016e3c:	4909      	ldr	r1, [pc, #36]	; (8016e64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016e3e:	480a      	ldr	r0, [pc, #40]	; (8016e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016e40:	f005 f961 	bl	801c106 <__aeabi_atexit>
 8016e44:	4b05      	ldr	r3, [pc, #20]	; (8016e5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016e46:	61ab      	str	r3, [r5, #24]
 8016e48:	4b07      	ldr	r3, [pc, #28]	; (8016e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016e4a:	61eb      	str	r3, [r5, #28]
 8016e4c:	bd38      	pop	{r3, r4, r5, pc}
 8016e4e:	bf00      	nop
 8016e50:	24006d1c 	.word	0x24006d1c
 8016e54:	24000000 	.word	0x24000000
 8016e58:	080156fd 	.word	0x080156fd
 8016e5c:	240000ac 	.word	0x240000ac
 8016e60:	24006d20 	.word	0x24006d20
 8016e64:	080156fb 	.word	0x080156fb
 8016e68:	240000b0 	.word	0x240000b0

08016e6c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016e6c:	b510      	push	{r4, lr}
 8016e6e:	4604      	mov	r4, r0
 8016e70:	f7ff ff88 	bl	8016d84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016e74:	4620      	mov	r0, r4
 8016e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e7a:	f7ff bfbd 	b.w	8016df8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016e80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016e80:	b538      	push	{r3, r4, r5, lr}
 8016e82:	4c15      	ldr	r4, [pc, #84]	; (8016ed8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016e84:	4605      	mov	r5, r0
 8016e86:	7823      	ldrb	r3, [r4, #0]
 8016e88:	f3bf 8f5b 	dmb	ish
 8016e8c:	07da      	lsls	r2, r3, #31
 8016e8e:	d40b      	bmi.n	8016ea8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e90:	4620      	mov	r0, r4
 8016e92:	f005 f93f 	bl	801c114 <__cxa_guard_acquire>
 8016e96:	b138      	cbz	r0, 8016ea8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f005 f947 	bl	801c12c <__cxa_guard_release>
 8016e9e:	4a0f      	ldr	r2, [pc, #60]	; (8016edc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016ea0:	490f      	ldr	r1, [pc, #60]	; (8016ee0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016ea2:	4810      	ldr	r0, [pc, #64]	; (8016ee4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016ea4:	f005 f92f 	bl	801c106 <__aeabi_atexit>
 8016ea8:	4c0f      	ldr	r4, [pc, #60]	; (8016ee8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8016eaa:	7823      	ldrb	r3, [r4, #0]
 8016eac:	f3bf 8f5b 	dmb	ish
 8016eb0:	07db      	lsls	r3, r3, #31
 8016eb2:	d40b      	bmi.n	8016ecc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f005 f92d 	bl	801c114 <__cxa_guard_acquire>
 8016eba:	b138      	cbz	r0, 8016ecc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	f005 f935 	bl	801c12c <__cxa_guard_release>
 8016ec2:	4a06      	ldr	r2, [pc, #24]	; (8016edc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016ec4:	4909      	ldr	r1, [pc, #36]	; (8016eec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8016ec6:	480a      	ldr	r0, [pc, #40]	; (8016ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016ec8:	f005 f91d 	bl	801c106 <__aeabi_atexit>
 8016ecc:	4b05      	ldr	r3, [pc, #20]	; (8016ee4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016ece:	632b      	str	r3, [r5, #48]	; 0x30
 8016ed0:	4b07      	ldr	r3, [pc, #28]	; (8016ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016ed2:	636b      	str	r3, [r5, #52]	; 0x34
 8016ed4:	bd38      	pop	{r3, r4, r5, pc}
 8016ed6:	bf00      	nop
 8016ed8:	24006d24 	.word	0x24006d24
 8016edc:	24000000 	.word	0x24000000
 8016ee0:	080156f1 	.word	0x080156f1
 8016ee4:	240000b4 	.word	0x240000b4
 8016ee8:	24006d28 	.word	0x24006d28
 8016eec:	080156ef 	.word	0x080156ef
 8016ef0:	240000b8 	.word	0x240000b8

08016ef4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016ef4:	b538      	push	{r3, r4, r5, lr}
 8016ef6:	4c15      	ldr	r4, [pc, #84]	; (8016f4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8016ef8:	4605      	mov	r5, r0
 8016efa:	7823      	ldrb	r3, [r4, #0]
 8016efc:	f3bf 8f5b 	dmb	ish
 8016f00:	07da      	lsls	r2, r3, #31
 8016f02:	d40b      	bmi.n	8016f1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016f04:	4620      	mov	r0, r4
 8016f06:	f005 f905 	bl	801c114 <__cxa_guard_acquire>
 8016f0a:	b138      	cbz	r0, 8016f1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	f005 f90d 	bl	801c12c <__cxa_guard_release>
 8016f12:	4a0f      	ldr	r2, [pc, #60]	; (8016f50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016f14:	490f      	ldr	r1, [pc, #60]	; (8016f54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8016f16:	4810      	ldr	r0, [pc, #64]	; (8016f58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016f18:	f005 f8f5 	bl	801c106 <__aeabi_atexit>
 8016f1c:	4c0f      	ldr	r4, [pc, #60]	; (8016f5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016f1e:	7823      	ldrb	r3, [r4, #0]
 8016f20:	f3bf 8f5b 	dmb	ish
 8016f24:	07db      	lsls	r3, r3, #31
 8016f26:	d40b      	bmi.n	8016f40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f005 f8f3 	bl	801c114 <__cxa_guard_acquire>
 8016f2e:	b138      	cbz	r0, 8016f40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016f30:	4620      	mov	r0, r4
 8016f32:	f005 f8fb 	bl	801c12c <__cxa_guard_release>
 8016f36:	4a06      	ldr	r2, [pc, #24]	; (8016f50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016f38:	4909      	ldr	r1, [pc, #36]	; (8016f60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8016f3a:	480a      	ldr	r0, [pc, #40]	; (8016f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016f3c:	f005 f8e3 	bl	801c106 <__aeabi_atexit>
 8016f40:	4b05      	ldr	r3, [pc, #20]	; (8016f58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016f42:	62ab      	str	r3, [r5, #40]	; 0x28
 8016f44:	4b07      	ldr	r3, [pc, #28]	; (8016f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016f46:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016f48:	bd38      	pop	{r3, r4, r5, pc}
 8016f4a:	bf00      	nop
 8016f4c:	24006cfc 	.word	0x24006cfc
 8016f50:	24000000 	.word	0x24000000
 8016f54:	080156f5 	.word	0x080156f5
 8016f58:	2400008c 	.word	0x2400008c
 8016f5c:	24006d00 	.word	0x24006d00
 8016f60:	080156f3 	.word	0x080156f3
 8016f64:	24000090 	.word	0x24000090

08016f68 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8016f68:	b510      	push	{r4, lr}
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	f7ff ff88 	bl	8016e80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016f70:	4620      	mov	r0, r4
 8016f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f76:	f7ff bfbd 	b.w	8016ef4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016f7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016f7c:	b538      	push	{r3, r4, r5, lr}
 8016f7e:	4c15      	ldr	r4, [pc, #84]	; (8016fd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016f80:	4605      	mov	r5, r0
 8016f82:	7823      	ldrb	r3, [r4, #0]
 8016f84:	f3bf 8f5b 	dmb	ish
 8016f88:	07da      	lsls	r2, r3, #31
 8016f8a:	d40b      	bmi.n	8016fa4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f005 f8c1 	bl	801c114 <__cxa_guard_acquire>
 8016f92:	b138      	cbz	r0, 8016fa4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016f94:	4620      	mov	r0, r4
 8016f96:	f005 f8c9 	bl	801c12c <__cxa_guard_release>
 8016f9a:	4a0f      	ldr	r2, [pc, #60]	; (8016fd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016f9c:	490f      	ldr	r1, [pc, #60]	; (8016fdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016f9e:	4810      	ldr	r0, [pc, #64]	; (8016fe0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016fa0:	f005 f8b1 	bl	801c106 <__aeabi_atexit>
 8016fa4:	4c0f      	ldr	r4, [pc, #60]	; (8016fe4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016fa6:	7823      	ldrb	r3, [r4, #0]
 8016fa8:	f3bf 8f5b 	dmb	ish
 8016fac:	07db      	lsls	r3, r3, #31
 8016fae:	d40b      	bmi.n	8016fc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	f005 f8af 	bl	801c114 <__cxa_guard_acquire>
 8016fb6:	b138      	cbz	r0, 8016fc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f005 f8b7 	bl	801c12c <__cxa_guard_release>
 8016fbe:	4a06      	ldr	r2, [pc, #24]	; (8016fd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016fc0:	4909      	ldr	r1, [pc, #36]	; (8016fe8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016fc2:	480a      	ldr	r0, [pc, #40]	; (8016fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016fc4:	f005 f89f 	bl	801c106 <__aeabi_atexit>
 8016fc8:	4b05      	ldr	r3, [pc, #20]	; (8016fe0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016fca:	642b      	str	r3, [r5, #64]	; 0x40
 8016fcc:	4b07      	ldr	r3, [pc, #28]	; (8016fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016fce:	646b      	str	r3, [r5, #68]	; 0x44
 8016fd0:	bd38      	pop	{r3, r4, r5, pc}
 8016fd2:	bf00      	nop
 8016fd4:	24006d2c 	.word	0x24006d2c
 8016fd8:	24000000 	.word	0x24000000
 8016fdc:	080156e9 	.word	0x080156e9
 8016fe0:	240000bc 	.word	0x240000bc
 8016fe4:	24006d30 	.word	0x24006d30
 8016fe8:	080156e7 	.word	0x080156e7
 8016fec:	240000c0 	.word	0x240000c0

08016ff0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016ff0:	b538      	push	{r3, r4, r5, lr}
 8016ff2:	4c15      	ldr	r4, [pc, #84]	; (8017048 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016ff4:	4605      	mov	r5, r0
 8016ff6:	7823      	ldrb	r3, [r4, #0]
 8016ff8:	f3bf 8f5b 	dmb	ish
 8016ffc:	07da      	lsls	r2, r3, #31
 8016ffe:	d40b      	bmi.n	8017018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017000:	4620      	mov	r0, r4
 8017002:	f005 f887 	bl	801c114 <__cxa_guard_acquire>
 8017006:	b138      	cbz	r0, 8017018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017008:	4620      	mov	r0, r4
 801700a:	f005 f88f 	bl	801c12c <__cxa_guard_release>
 801700e:	4a0f      	ldr	r2, [pc, #60]	; (801704c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017010:	490f      	ldr	r1, [pc, #60]	; (8017050 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8017012:	4810      	ldr	r0, [pc, #64]	; (8017054 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017014:	f005 f877 	bl	801c106 <__aeabi_atexit>
 8017018:	4c0f      	ldr	r4, [pc, #60]	; (8017058 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801701a:	7823      	ldrb	r3, [r4, #0]
 801701c:	f3bf 8f5b 	dmb	ish
 8017020:	07db      	lsls	r3, r3, #31
 8017022:	d40b      	bmi.n	801703c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017024:	4620      	mov	r0, r4
 8017026:	f005 f875 	bl	801c114 <__cxa_guard_acquire>
 801702a:	b138      	cbz	r0, 801703c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801702c:	4620      	mov	r0, r4
 801702e:	f005 f87d 	bl	801c12c <__cxa_guard_release>
 8017032:	4a06      	ldr	r2, [pc, #24]	; (801704c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017034:	4909      	ldr	r1, [pc, #36]	; (801705c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8017036:	480a      	ldr	r0, [pc, #40]	; (8017060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017038:	f005 f865 	bl	801c106 <__aeabi_atexit>
 801703c:	4b05      	ldr	r3, [pc, #20]	; (8017054 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801703e:	63ab      	str	r3, [r5, #56]	; 0x38
 8017040:	4b07      	ldr	r3, [pc, #28]	; (8017060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017042:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017044:	bd38      	pop	{r3, r4, r5, pc}
 8017046:	bf00      	nop
 8017048:	24006d0c 	.word	0x24006d0c
 801704c:	24000000 	.word	0x24000000
 8017050:	080156ed 	.word	0x080156ed
 8017054:	2400009c 	.word	0x2400009c
 8017058:	24006d10 	.word	0x24006d10
 801705c:	080156eb 	.word	0x080156eb
 8017060:	240000a0 	.word	0x240000a0

08017064 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8017064:	b510      	push	{r4, lr}
 8017066:	4604      	mov	r4, r0
 8017068:	f7ff ff88 	bl	8016f7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801706c:	4620      	mov	r0, r4
 801706e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017072:	f7ff bfbd 	b.w	8016ff0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08017078 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	4c15      	ldr	r4, [pc, #84]	; (80170d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801707c:	4605      	mov	r5, r0
 801707e:	7823      	ldrb	r3, [r4, #0]
 8017080:	f3bf 8f5b 	dmb	ish
 8017084:	07da      	lsls	r2, r3, #31
 8017086:	d40b      	bmi.n	80170a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017088:	4620      	mov	r0, r4
 801708a:	f005 f843 	bl	801c114 <__cxa_guard_acquire>
 801708e:	b138      	cbz	r0, 80170a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017090:	4620      	mov	r0, r4
 8017092:	f005 f84b 	bl	801c12c <__cxa_guard_release>
 8017096:	4a0f      	ldr	r2, [pc, #60]	; (80170d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017098:	490f      	ldr	r1, [pc, #60]	; (80170d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801709a:	4810      	ldr	r0, [pc, #64]	; (80170dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801709c:	f005 f833 	bl	801c106 <__aeabi_atexit>
 80170a0:	4c0f      	ldr	r4, [pc, #60]	; (80170e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80170a2:	7823      	ldrb	r3, [r4, #0]
 80170a4:	f3bf 8f5b 	dmb	ish
 80170a8:	07db      	lsls	r3, r3, #31
 80170aa:	d40b      	bmi.n	80170c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80170ac:	4620      	mov	r0, r4
 80170ae:	f005 f831 	bl	801c114 <__cxa_guard_acquire>
 80170b2:	b138      	cbz	r0, 80170c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80170b4:	4620      	mov	r0, r4
 80170b6:	f005 f839 	bl	801c12c <__cxa_guard_release>
 80170ba:	4a06      	ldr	r2, [pc, #24]	; (80170d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80170bc:	4909      	ldr	r1, [pc, #36]	; (80170e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80170be:	480a      	ldr	r0, [pc, #40]	; (80170e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80170c0:	f005 f821 	bl	801c106 <__aeabi_atexit>
 80170c4:	4b05      	ldr	r3, [pc, #20]	; (80170dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80170c6:	652b      	str	r3, [r5, #80]	; 0x50
 80170c8:	4b07      	ldr	r3, [pc, #28]	; (80170e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80170ca:	656b      	str	r3, [r5, #84]	; 0x54
 80170cc:	bd38      	pop	{r3, r4, r5, pc}
 80170ce:	bf00      	nop
 80170d0:	24006d04 	.word	0x24006d04
 80170d4:	24000000 	.word	0x24000000
 80170d8:	080156e1 	.word	0x080156e1
 80170dc:	24000094 	.word	0x24000094
 80170e0:	24006d08 	.word	0x24006d08
 80170e4:	080156df 	.word	0x080156df
 80170e8:	24000098 	.word	0x24000098

080170ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80170ec:	b538      	push	{r3, r4, r5, lr}
 80170ee:	4c15      	ldr	r4, [pc, #84]	; (8017144 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80170f0:	4605      	mov	r5, r0
 80170f2:	7823      	ldrb	r3, [r4, #0]
 80170f4:	f3bf 8f5b 	dmb	ish
 80170f8:	07da      	lsls	r2, r3, #31
 80170fa:	d40b      	bmi.n	8017114 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80170fc:	4620      	mov	r0, r4
 80170fe:	f005 f809 	bl	801c114 <__cxa_guard_acquire>
 8017102:	b138      	cbz	r0, 8017114 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017104:	4620      	mov	r0, r4
 8017106:	f005 f811 	bl	801c12c <__cxa_guard_release>
 801710a:	4a0f      	ldr	r2, [pc, #60]	; (8017148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801710c:	490f      	ldr	r1, [pc, #60]	; (801714c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801710e:	4810      	ldr	r0, [pc, #64]	; (8017150 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017110:	f004 fff9 	bl	801c106 <__aeabi_atexit>
 8017114:	4c0f      	ldr	r4, [pc, #60]	; (8017154 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8017116:	7823      	ldrb	r3, [r4, #0]
 8017118:	f3bf 8f5b 	dmb	ish
 801711c:	07db      	lsls	r3, r3, #31
 801711e:	d40b      	bmi.n	8017138 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017120:	4620      	mov	r0, r4
 8017122:	f004 fff7 	bl	801c114 <__cxa_guard_acquire>
 8017126:	b138      	cbz	r0, 8017138 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017128:	4620      	mov	r0, r4
 801712a:	f004 ffff 	bl	801c12c <__cxa_guard_release>
 801712e:	4a06      	ldr	r2, [pc, #24]	; (8017148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017130:	4909      	ldr	r1, [pc, #36]	; (8017158 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8017132:	480a      	ldr	r0, [pc, #40]	; (801715c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017134:	f004 ffe7 	bl	801c106 <__aeabi_atexit>
 8017138:	4b05      	ldr	r3, [pc, #20]	; (8017150 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801713a:	64ab      	str	r3, [r5, #72]	; 0x48
 801713c:	4b07      	ldr	r3, [pc, #28]	; (801715c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801713e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8017140:	bd38      	pop	{r3, r4, r5, pc}
 8017142:	bf00      	nop
 8017144:	24006cf4 	.word	0x24006cf4
 8017148:	24000000 	.word	0x24000000
 801714c:	080156e5 	.word	0x080156e5
 8017150:	24000084 	.word	0x24000084
 8017154:	24006cf8 	.word	0x24006cf8
 8017158:	080156e3 	.word	0x080156e3
 801715c:	24000088 	.word	0x24000088

08017160 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8017160:	b510      	push	{r4, lr}
 8017162:	4604      	mov	r4, r0
 8017164:	f7ff ff88 	bl	8017078 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8017168:	4620      	mov	r0, r4
 801716a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801716e:	f7ff bfbd 	b.w	80170ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08017172 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8017172:	b510      	push	{r4, lr}
 8017174:	4604      	mov	r4, r0
 8017176:	f7ff fff3 	bl	8017160 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801717a:	4620      	mov	r0, r4
 801717c:	f7ff ff72 	bl	8017064 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8017180:	4620      	mov	r0, r4
 8017182:	f7ff fe73 	bl	8016e6c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8017186:	4620      	mov	r0, r4
 8017188:	f7ff fdf2 	bl	8016d70 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801718c:	4620      	mov	r0, r4
 801718e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017192:	f7ff bee9 	b.w	8016f68 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08017198 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8017198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801719c:	b087      	sub	sp, #28
 801719e:	7888      	ldrb	r0, [r1, #2]
 80171a0:	4616      	mov	r6, r2
 80171a2:	9001      	str	r0, [sp, #4]
 80171a4:	7848      	ldrb	r0, [r1, #1]
 80171a6:	9100      	str	r1, [sp, #0]
 80171a8:	9002      	str	r0, [sp, #8]
 80171aa:	7808      	ldrb	r0, [r1, #0]
 80171ac:	9901      	ldr	r1, [sp, #4]
 80171ae:	9003      	str	r0, [sp, #12]
 80171b0:	9802      	ldr	r0, [sp, #8]
 80171b2:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 80171b6:	0200      	lsls	r0, r0, #8
 80171b8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80171bc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80171c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80171c4:	9903      	ldr	r1, [sp, #12]
 80171c6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80171ca:	4308      	orrs	r0, r1
 80171cc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80171d0:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 80171d4:	9005      	str	r0, [sp, #20]
 80171d6:	fb05 ca0e 	mla	sl, r5, lr, ip
 80171da:	2d00      	cmp	r5, #0
 80171dc:	eb06 080a 	add.w	r8, r6, sl
 80171e0:	db4a      	blt.n	8017278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80171e2:	45a9      	cmp	r9, r5
 80171e4:	dd48      	ble.n	8017278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80171e6:	f1bc 0f00 	cmp.w	ip, #0
 80171ea:	db43      	blt.n	8017274 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 80171ec:	45e6      	cmp	lr, ip
 80171ee:	dd41      	ble.n	8017274 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 80171f0:	f816 600a 	ldrb.w	r6, [r6, sl]
 80171f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80171f8:	441e      	add	r6, r3
 80171fa:	f11c 0001 	adds.w	r0, ip, #1
 80171fe:	d43e      	bmi.n	801727e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017200:	4586      	cmp	lr, r0
 8017202:	dd3c      	ble.n	801727e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017204:	2a00      	cmp	r2, #0
 8017206:	d03a      	beq.n	801727e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8017208:	f898 0001 	ldrb.w	r0, [r8, #1]
 801720c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017210:	4418      	add	r0, r3
 8017212:	3501      	adds	r5, #1
 8017214:	d437      	bmi.n	8017286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8017216:	45a9      	cmp	r9, r5
 8017218:	dd35      	ble.n	8017286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801721a:	b3a4      	cbz	r4, 8017286 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801721c:	f1bc 0f00 	cmp.w	ip, #0
 8017220:	db2f      	blt.n	8017282 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8017222:	45e6      	cmp	lr, ip
 8017224:	dd2d      	ble.n	8017282 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8017226:	f818 500e 	ldrb.w	r5, [r8, lr]
 801722a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801722e:	441d      	add	r5, r3
 8017230:	f11c 0c01 	adds.w	ip, ip, #1
 8017234:	d42a      	bmi.n	801728c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8017236:	45e6      	cmp	lr, ip
 8017238:	dd28      	ble.n	801728c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801723a:	b33a      	cbz	r2, 801728c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801723c:	44c6      	add	lr, r8
 801723e:	f89e c001 	ldrb.w	ip, [lr, #1]
 8017242:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017246:	4463      	add	r3, ip
 8017248:	ea6f 0c07 	mvn.w	ip, r7
 801724c:	2a0f      	cmp	r2, #15
 801724e:	f896 a000 	ldrb.w	sl, [r6]
 8017252:	fa5f fc8c 	uxtb.w	ip, ip
 8017256:	f890 b000 	ldrb.w	fp, [r0]
 801725a:	f895 9000 	ldrb.w	r9, [r5]
 801725e:	7819      	ldrb	r1, [r3, #0]
 8017260:	d801      	bhi.n	8017266 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8017262:	2c0f      	cmp	r4, #15
 8017264:	d914      	bls.n	8017290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8017266:	4b40      	ldr	r3, [pc, #256]	; (8017368 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8017268:	f240 1157 	movw	r1, #343	; 0x157
 801726c:	4a3f      	ldr	r2, [pc, #252]	; (801736c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801726e:	4840      	ldr	r0, [pc, #256]	; (8017370 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8017270:	f005 f864 	bl	801c33c <__assert_func>
 8017274:	ae05      	add	r6, sp, #20
 8017276:	e7c0      	b.n	80171fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8017278:	a805      	add	r0, sp, #20
 801727a:	4606      	mov	r6, r0
 801727c:	e7c9      	b.n	8017212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801727e:	a805      	add	r0, sp, #20
 8017280:	e7c7      	b.n	8017212 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8017282:	ad05      	add	r5, sp, #20
 8017284:	e7d4      	b.n	8017230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8017286:	ab05      	add	r3, sp, #20
 8017288:	461d      	mov	r5, r3
 801728a:	e7dd      	b.n	8017248 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801728c:	ab05      	add	r3, sp, #20
 801728e:	e7db      	b.n	8017248 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8017290:	b292      	uxth	r2, r2
 8017292:	b2a4      	uxth	r4, r4
 8017294:	fa1f fc8c 	uxth.w	ip, ip
 8017298:	fb02 f804 	mul.w	r8, r2, r4
 801729c:	0112      	lsls	r2, r2, #4
 801729e:	b2bf      	uxth	r7, r7
 80172a0:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80172a4:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80172a8:	eba2 0208 	sub.w	r2, r2, r8
 80172ac:	b2a4      	uxth	r4, r4
 80172ae:	b292      	uxth	r2, r2
 80172b0:	ebae 0e04 	sub.w	lr, lr, r4
 80172b4:	fb02 fb0b 	mul.w	fp, r2, fp
 80172b8:	fa1f fe8e 	uxth.w	lr, lr
 80172bc:	fb0e ba0a 	mla	sl, lr, sl, fp
 80172c0:	fb04 aa09 	mla	sl, r4, r9, sl
 80172c4:	fb08 aa01 	mla	sl, r8, r1, sl
 80172c8:	9903      	ldr	r1, [sp, #12]
 80172ca:	fb11 f90c 	smulbb	r9, r1, ip
 80172ce:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80172d2:	9900      	ldr	r1, [sp, #0]
 80172d4:	fb0a 9a07 	mla	sl, sl, r7, r9
 80172d8:	fa1f fa8a 	uxth.w	sl, sl
 80172dc:	f10a 0901 	add.w	r9, sl, #1
 80172e0:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80172e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172e8:	f881 a000 	strb.w	sl, [r1]
 80172ec:	f890 a001 	ldrb.w	sl, [r0, #1]
 80172f0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80172f4:	fb02 fa0a 	mul.w	sl, r2, sl
 80172f8:	9902      	ldr	r1, [sp, #8]
 80172fa:	fb0e aa09 	mla	sl, lr, r9, sl
 80172fe:	f895 9001 	ldrb.w	r9, [r5, #1]
 8017302:	fb04 aa09 	mla	sl, r4, r9, sl
 8017306:	f893 9001 	ldrb.w	r9, [r3, #1]
 801730a:	fb08 a909 	mla	r9, r8, r9, sl
 801730e:	fb11 fa0c 	smulbb	sl, r1, ip
 8017312:	9900      	ldr	r1, [sp, #0]
 8017314:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017318:	fb09 a907 	mla	r9, r9, r7, sl
 801731c:	fa1f f989 	uxth.w	r9, r9
 8017320:	f109 0a01 	add.w	sl, r9, #1
 8017324:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017328:	ea4f 2929 	mov.w	r9, r9, asr #8
 801732c:	f881 9001 	strb.w	r9, [r1, #1]
 8017330:	7880      	ldrb	r0, [r0, #2]
 8017332:	78b6      	ldrb	r6, [r6, #2]
 8017334:	4342      	muls	r2, r0
 8017336:	78a8      	ldrb	r0, [r5, #2]
 8017338:	789b      	ldrb	r3, [r3, #2]
 801733a:	fb0e 2206 	mla	r2, lr, r6, r2
 801733e:	fb04 2400 	mla	r4, r4, r0, r2
 8017342:	fb08 4803 	mla	r8, r8, r3, r4
 8017346:	9b01      	ldr	r3, [sp, #4]
 8017348:	fb13 fc0c 	smulbb	ip, r3, ip
 801734c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017350:	fb08 c707 	mla	r7, r8, r7, ip
 8017354:	b2bf      	uxth	r7, r7
 8017356:	f107 0c01 	add.w	ip, r7, #1
 801735a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801735e:	123f      	asrs	r7, r7, #8
 8017360:	708f      	strb	r7, [r1, #2]
 8017362:	b007      	add	sp, #28
 8017364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017368:	08020637 	.word	0x08020637
 801736c:	08020aee 	.word	0x08020aee
 8017370:	080206bf 	.word	0x080206bf

08017374 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017378:	ed2d 8b08 	vpush	{d8-d11}
 801737c:	b093      	sub	sp, #76	; 0x4c
 801737e:	eeb0 aa40 	vmov.f32	s20, s0
 8017382:	eef0 9a60 	vmov.f32	s19, s1
 8017386:	9210      	str	r2, [sp, #64]	; 0x40
 8017388:	eeb0 9a41 	vmov.f32	s18, s2
 801738c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801738e:	eeb0 8a62 	vmov.f32	s16, s5
 8017392:	9309      	str	r3, [sp, #36]	; 0x24
 8017394:	eef0 8a43 	vmov.f32	s17, s6
 8017398:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801739c:	eef0 ba44 	vmov.f32	s23, s8
 80173a0:	9011      	str	r0, [sp, #68]	; 0x44
 80173a2:	eeb0 ba64 	vmov.f32	s22, s9
 80173a6:	930e      	str	r3, [sp, #56]	; 0x38
 80173a8:	eef0 aa45 	vmov.f32	s21, s10
 80173ac:	6850      	ldr	r0, [r2, #4]
 80173ae:	910d      	str	r1, [sp, #52]	; 0x34
 80173b0:	6812      	ldr	r2, [r2, #0]
 80173b2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80173b6:	fb00 1303 	mla	r3, r0, r3, r1
 80173ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173be:	18d3      	adds	r3, r2, r3
 80173c0:	930a      	str	r3, [sp, #40]	; 0x28
 80173c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	930c      	str	r3, [sp, #48]	; 0x30
 80173c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80173ca:	685c      	ldr	r4, [r3, #4]
 80173cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ce:	3404      	adds	r4, #4
 80173d0:	43db      	mvns	r3, r3
 80173d2:	b2db      	uxtb	r3, r3
 80173d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80173d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173d8:	2b00      	cmp	r3, #0
 80173da:	dc03      	bgt.n	80173e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80173dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173de:	2b00      	cmp	r3, #0
 80173e0:	f340 8250 	ble.w	8017884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80173e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80173e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80173ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80173ee:	1e48      	subs	r0, r1, #1
 80173f0:	1e55      	subs	r5, r2, #1
 80173f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f340 80ee 	ble.w	80175d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80173fa:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80173fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80173fe:	1436      	asrs	r6, r6, #16
 8017400:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017404:	d406      	bmi.n	8017414 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017406:	4286      	cmp	r6, r0
 8017408:	da04      	bge.n	8017414 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801740a:	2b00      	cmp	r3, #0
 801740c:	db02      	blt.n	8017414 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801740e:	42ab      	cmp	r3, r5
 8017410:	f2c0 80e2 	blt.w	80175d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8017414:	3601      	adds	r6, #1
 8017416:	f100 80cf 	bmi.w	80175b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801741a:	42b1      	cmp	r1, r6
 801741c:	f2c0 80cc 	blt.w	80175b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8017420:	3301      	adds	r3, #1
 8017422:	f100 80c9 	bmi.w	80175b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8017426:	429a      	cmp	r2, r3
 8017428:	f2c0 80c6 	blt.w	80175b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801742c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8017430:	f1bb 0f00 	cmp.w	fp, #0
 8017434:	f340 80f1 	ble.w	801761a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017438:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801743a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801743c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801743e:	141d      	asrs	r5, r3, #16
 8017440:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017442:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017446:	68c7      	ldr	r7, [r0, #12]
 8017448:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801744a:	1418      	asrs	r0, r3, #16
 801744c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8017450:	6892      	ldr	r2, [r2, #8]
 8017452:	f100 8137 	bmi.w	80176c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017456:	f102 3cff 	add.w	ip, r2, #4294967295
 801745a:	4560      	cmp	r0, ip
 801745c:	f280 8132 	bge.w	80176c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017460:	2d00      	cmp	r5, #0
 8017462:	f2c0 812f 	blt.w	80176c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017466:	f107 3cff 	add.w	ip, r7, #4294967295
 801746a:	4565      	cmp	r5, ip
 801746c:	f280 812a 	bge.w	80176c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017470:	b212      	sxth	r2, r2
 8017472:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017474:	fb05 0002 	mla	r0, r5, r2, r0
 8017478:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801747a:	f817 c000 	ldrb.w	ip, [r7, r0]
 801747e:	4405      	add	r5, r0
 8017480:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017484:	eb04 0e0c 	add.w	lr, r4, ip
 8017488:	f1b8 0f00 	cmp.w	r8, #0
 801748c:	f000 810c 	beq.w	80176a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8017490:	786f      	ldrb	r7, [r5, #1]
 8017492:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017496:	4427      	add	r7, r4
 8017498:	2900      	cmp	r1, #0
 801749a:	f000 810d 	beq.w	80176b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801749e:	18a8      	adds	r0, r5, r2
 80174a0:	5caa      	ldrb	r2, [r5, r2]
 80174a2:	7840      	ldrb	r0, [r0, #1]
 80174a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80174a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80174ac:	4422      	add	r2, r4
 80174ae:	4420      	add	r0, r4
 80174b0:	fa1f f388 	uxth.w	r3, r8
 80174b4:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80174b8:	b289      	uxth	r1, r1
 80174ba:	f897 c000 	ldrb.w	ip, [r7]
 80174be:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80174c2:	fb03 f901 	mul.w	r9, r3, r1
 80174c6:	011b      	lsls	r3, r3, #4
 80174c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80174cc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80174d0:	eba3 0309 	sub.w	r3, r3, r9
 80174d4:	b289      	uxth	r1, r1
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	eba8 0801 	sub.w	r8, r8, r1
 80174dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80174e0:	fa1f f888 	uxth.w	r8, r8
 80174e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80174e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174e8:	fb08 cc0a 	mla	ip, r8, sl, ip
 80174ec:	f892 a000 	ldrb.w	sl, [r2]
 80174f0:	fb01 cc0a 	mla	ip, r1, sl, ip
 80174f4:	f890 a000 	ldrb.w	sl, [r0]
 80174f8:	fb09 cc0a 	mla	ip, r9, sl, ip
 80174fc:	f896 a000 	ldrb.w	sl, [r6]
 8017500:	fb1a fa03 	smulbb	sl, sl, r3
 8017504:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801750a:	fb0c ac05 	mla	ip, ip, r5, sl
 801750e:	fa1f fc8c 	uxth.w	ip, ip
 8017512:	f10c 0a01 	add.w	sl, ip, #1
 8017516:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801751a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801751e:	f886 a000 	strb.w	sl, [r6]
 8017522:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017526:	f89e a001 	ldrb.w	sl, [lr, #1]
 801752a:	fb03 fc0c 	mul.w	ip, r3, ip
 801752e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017530:	fb08 cc0a 	mla	ip, r8, sl, ip
 8017534:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017538:	fb01 cc0a 	mla	ip, r1, sl, ip
 801753c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017540:	fb09 cc0a 	mla	ip, r9, sl, ip
 8017544:	f896 a001 	ldrb.w	sl, [r6, #1]
 8017548:	fb1a fa03 	smulbb	sl, sl, r3
 801754c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017552:	fb0c ac05 	mla	ip, ip, r5, sl
 8017556:	fa1f fc8c 	uxth.w	ip, ip
 801755a:	f10c 0a01 	add.w	sl, ip, #1
 801755e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8017562:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017566:	f886 c001 	strb.w	ip, [r6, #1]
 801756a:	78bf      	ldrb	r7, [r7, #2]
 801756c:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017570:	437b      	muls	r3, r7
 8017572:	fb08 330c 	mla	r3, r8, ip, r3
 8017576:	f892 c002 	ldrb.w	ip, [r2, #2]
 801757a:	7882      	ldrb	r2, [r0, #2]
 801757c:	fb01 310c 	mla	r1, r1, ip, r3
 8017580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017582:	fb09 1902 	mla	r9, r9, r2, r1
 8017586:	78b1      	ldrb	r1, [r6, #2]
 8017588:	fb11 f103 	smulbb	r1, r1, r3
 801758c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017590:	fb09 1505 	mla	r5, r9, r5, r1
 8017594:	b2ad      	uxth	r5, r5
 8017596:	1c6b      	adds	r3, r5, #1
 8017598:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801759c:	122d      	asrs	r5, r5, #8
 801759e:	70b5      	strb	r5, [r6, #2]
 80175a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80175a2:	3603      	adds	r6, #3
 80175a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80175a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80175aa:	4413      	add	r3, r2
 80175ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80175ae:	9325      	str	r3, [sp, #148]	; 0x94
 80175b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80175b2:	4413      	add	r3, r2
 80175b4:	9326      	str	r3, [sp, #152]	; 0x98
 80175b6:	e73b      	b.n	8017430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80175b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80175ba:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80175bc:	4433      	add	r3, r6
 80175be:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80175c0:	9325      	str	r3, [sp, #148]	; 0x94
 80175c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80175c4:	4433      	add	r3, r6
 80175c6:	9326      	str	r3, [sp, #152]	; 0x98
 80175c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ca:	3b01      	subs	r3, #1
 80175cc:	9309      	str	r3, [sp, #36]	; 0x24
 80175ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175d0:	3303      	adds	r3, #3
 80175d2:	930a      	str	r3, [sp, #40]	; 0x28
 80175d4:	e70d      	b.n	80173f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80175d6:	d028      	beq.n	801762a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80175d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175da:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80175dc:	3b01      	subs	r3, #1
 80175de:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80175e0:	fb00 5003 	mla	r0, r0, r3, r5
 80175e4:	1400      	asrs	r0, r0, #16
 80175e6:	f53f af21 	bmi.w	801742c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80175ea:	3901      	subs	r1, #1
 80175ec:	4288      	cmp	r0, r1
 80175ee:	f6bf af1d 	bge.w	801742c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80175f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80175f4:	9826      	ldr	r0, [sp, #152]	; 0x98
 80175f6:	fb01 0303 	mla	r3, r1, r3, r0
 80175fa:	141b      	asrs	r3, r3, #16
 80175fc:	f53f af16 	bmi.w	801742c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017600:	3a01      	subs	r2, #1
 8017602:	4293      	cmp	r3, r2
 8017604:	f6bf af12 	bge.w	801742c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801760a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801760e:	1cdf      	adds	r7, r3, #3
 8017610:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017614:	f1b9 0f00 	cmp.w	r9, #0
 8017618:	dc73      	bgt.n	8017702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801761e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017626:	441a      	add	r2, r3
 8017628:	920a      	str	r2, [sp, #40]	; 0x28
 801762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801762c:	2b00      	cmp	r3, #0
 801762e:	f340 8129 	ble.w	8017884 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8017632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017638:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801763c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017640:	eef0 6a48 	vmov.f32	s13, s16
 8017644:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017648:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801764c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017650:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8017654:	eef0 6a68 	vmov.f32	s13, s17
 8017658:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801765c:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8017660:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017664:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017668:	ee37 8a48 	vsub.f32	s16, s14, s16
 801766c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017670:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017674:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017678:	ee18 2a10 	vmov	r2, s16
 801767c:	eeb0 8a47 	vmov.f32	s16, s14
 8017680:	fb92 f3f3 	sdiv	r3, r2, r3
 8017684:	ee18 2a90 	vmov	r2, s17
 8017688:	9327      	str	r3, [sp, #156]	; 0x9c
 801768a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801768c:	eef0 8a67 	vmov.f32	s17, s15
 8017690:	fb92 f3f3 	sdiv	r3, r2, r3
 8017694:	9328      	str	r3, [sp, #160]	; 0xa0
 8017696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801769a:	3b01      	subs	r3, #1
 801769c:	930d      	str	r3, [sp, #52]	; 0x34
 801769e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80176a0:	bf08      	it	eq
 80176a2:	4613      	moveq	r3, r2
 80176a4:	9309      	str	r3, [sp, #36]	; 0x24
 80176a6:	e696      	b.n	80173d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80176a8:	b149      	cbz	r1, 80176be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80176aa:	5caa      	ldrb	r2, [r5, r2]
 80176ac:	4670      	mov	r0, lr
 80176ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176b2:	4422      	add	r2, r4
 80176b4:	4677      	mov	r7, lr
 80176b6:	e6fb      	b.n	80174b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80176b8:	4670      	mov	r0, lr
 80176ba:	4672      	mov	r2, lr
 80176bc:	e6f8      	b.n	80174b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80176be:	4670      	mov	r0, lr
 80176c0:	4672      	mov	r2, lr
 80176c2:	e7f7      	b.n	80176b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80176c4:	f110 0c01 	adds.w	ip, r0, #1
 80176c8:	f53f af6a 	bmi.w	80175a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80176cc:	4562      	cmp	r2, ip
 80176ce:	f6ff af67 	blt.w	80175a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80176d2:	f115 0c01 	adds.w	ip, r5, #1
 80176d6:	f53f af63 	bmi.w	80175a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80176da:	4567      	cmp	r7, ip
 80176dc:	f6ff af60 	blt.w	80175a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80176e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176e2:	b23f      	sxth	r7, r7
 80176e4:	b212      	sxth	r2, r2
 80176e6:	9002      	str	r0, [sp, #8]
 80176e8:	9701      	str	r7, [sp, #4]
 80176ea:	9200      	str	r2, [sp, #0]
 80176ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80176ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176f0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80176f4:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80176f8:	4623      	mov	r3, r4
 80176fa:	4631      	mov	r1, r6
 80176fc:	f7ff fd4c 	bl	8017198 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8017700:	e74e      	b.n	80175a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017702:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017704:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017706:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801770a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801770c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801770e:	1400      	asrs	r0, r0, #16
 8017710:	142d      	asrs	r5, r5, #16
 8017712:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017714:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017718:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801771c:	fb02 5000 	mla	r0, r2, r0, r5
 8017720:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017722:	f815 e000 	ldrb.w	lr, [r5, r0]
 8017726:	eb05 0c00 	add.w	ip, r5, r0
 801772a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801772e:	eb04 060e 	add.w	r6, r4, lr
 8017732:	2b00      	cmp	r3, #0
 8017734:	f000 8097 	beq.w	8017866 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8017738:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801773c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017740:	4425      	add	r5, r4
 8017742:	2900      	cmp	r1, #0
 8017744:	f000 8098 	beq.w	8017878 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8017748:	eb0c 0002 	add.w	r0, ip, r2
 801774c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017750:	7840      	ldrb	r0, [r0, #1]
 8017752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017756:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801775a:	4422      	add	r2, r4
 801775c:	4420      	add	r0, r4
 801775e:	b29b      	uxth	r3, r3
 8017760:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8017764:	b289      	uxth	r1, r1
 8017766:	f895 e000 	ldrb.w	lr, [r5]
 801776a:	3703      	adds	r7, #3
 801776c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017770:	fb03 f801 	mul.w	r8, r3, r1
 8017774:	011b      	lsls	r3, r3, #4
 8017776:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801777a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801777e:	eba3 0308 	sub.w	r3, r3, r8
 8017782:	b289      	uxth	r1, r1
 8017784:	b29b      	uxth	r3, r3
 8017786:	ebac 0c01 	sub.w	ip, ip, r1
 801778a:	fb03 fe0e 	mul.w	lr, r3, lr
 801778e:	fa1f fc8c 	uxth.w	ip, ip
 8017792:	930f      	str	r3, [sp, #60]	; 0x3c
 8017794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017796:	fb0c ee0b 	mla	lr, ip, fp, lr
 801779a:	f892 b000 	ldrb.w	fp, [r2]
 801779e:	fb01 ee0b 	mla	lr, r1, fp, lr
 80177a2:	f890 b000 	ldrb.w	fp, [r0]
 80177a6:	fb08 ee0b 	mla	lr, r8, fp, lr
 80177aa:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80177ae:	fb1b fb03 	smulbb	fp, fp, r3
 80177b2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80177b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177b8:	fb0e be0a 	mla	lr, lr, sl, fp
 80177bc:	fa1f fe8e 	uxth.w	lr, lr
 80177c0:	f10e 0b01 	add.w	fp, lr, #1
 80177c4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80177c8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80177cc:	f807 ec06 	strb.w	lr, [r7, #-6]
 80177d0:	f895 e001 	ldrb.w	lr, [r5, #1]
 80177d4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80177d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80177dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177de:	fb0c ee0b 	mla	lr, ip, fp, lr
 80177e2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80177e6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80177ea:	f890 b001 	ldrb.w	fp, [r0, #1]
 80177ee:	fb08 ee0b 	mla	lr, r8, fp, lr
 80177f2:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80177f6:	fb1b fb03 	smulbb	fp, fp, r3
 80177fa:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80177fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017800:	fb0e be0a 	mla	lr, lr, sl, fp
 8017804:	fa1f fe8e 	uxth.w	lr, lr
 8017808:	f10e 0b01 	add.w	fp, lr, #1
 801780c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017810:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017814:	f807 ec05 	strb.w	lr, [r7, #-5]
 8017818:	78ad      	ldrb	r5, [r5, #2]
 801781a:	78b6      	ldrb	r6, [r6, #2]
 801781c:	436b      	muls	r3, r5
 801781e:	7895      	ldrb	r5, [r2, #2]
 8017820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017822:	fb0c 3306 	mla	r3, ip, r6, r3
 8017826:	fb01 3305 	mla	r3, r1, r5, r3
 801782a:	7885      	ldrb	r5, [r0, #2]
 801782c:	fb08 3805 	mla	r8, r8, r5, r3
 8017830:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8017834:	fb13 f302 	smulbb	r3, r3, r2
 8017838:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801783c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801783e:	fb08 380a 	mla	r8, r8, sl, r3
 8017842:	fa1f f888 	uxth.w	r8, r8
 8017846:	f108 0301 	add.w	r3, r8, #1
 801784a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801784e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017850:	4413      	add	r3, r2
 8017852:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017854:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017858:	9325      	str	r3, [sp, #148]	; 0x94
 801785a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801785c:	f807 8c04 	strb.w	r8, [r7, #-4]
 8017860:	4413      	add	r3, r2
 8017862:	9326      	str	r3, [sp, #152]	; 0x98
 8017864:	e6d6      	b.n	8017614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8017866:	b151      	cbz	r1, 801787e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8017868:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801786c:	4630      	mov	r0, r6
 801786e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017872:	4422      	add	r2, r4
 8017874:	4635      	mov	r5, r6
 8017876:	e772      	b.n	801775e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8017878:	4630      	mov	r0, r6
 801787a:	4632      	mov	r2, r6
 801787c:	e76f      	b.n	801775e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801787e:	4630      	mov	r0, r6
 8017880:	4632      	mov	r2, r6
 8017882:	e7f7      	b.n	8017874 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017884:	b013      	add	sp, #76	; 0x4c
 8017886:	ecbd 8b08 	vpop	{d8-d11}
 801788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017890 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017894:	784d      	ldrb	r5, [r1, #1]
 8017896:	f891 9002 	ldrb.w	r9, [r1, #2]
 801789a:	022d      	lsls	r5, r5, #8
 801789c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80178a0:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80178a4:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80178a8:	f891 9000 	ldrb.w	r9, [r1]
 80178ac:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80178b0:	ea45 0509 	orr.w	r5, r5, r9
 80178b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80178b8:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80178bc:	9501      	str	r5, [sp, #4]
 80178be:	fb06 470c 	mla	r7, r6, ip, r4
 80178c2:	2e00      	cmp	r6, #0
 80178c4:	eb02 0e07 	add.w	lr, r2, r7
 80178c8:	db46      	blt.n	8017958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80178ca:	45b0      	cmp	r8, r6
 80178cc:	dd44      	ble.n	8017958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80178ce:	2c00      	cmp	r4, #0
 80178d0:	db40      	blt.n	8017954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80178d2:	45a4      	cmp	ip, r4
 80178d4:	dd3e      	ble.n	8017954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80178d6:	5dd7      	ldrb	r7, [r2, r7]
 80178d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80178dc:	441f      	add	r7, r3
 80178de:	1c62      	adds	r2, r4, #1
 80178e0:	d43d      	bmi.n	801795e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80178e2:	4594      	cmp	ip, r2
 80178e4:	dd3b      	ble.n	801795e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80178e6:	f1ba 0f00 	cmp.w	sl, #0
 80178ea:	d038      	beq.n	801795e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80178ec:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80178f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178f4:	441d      	add	r5, r3
 80178f6:	3601      	adds	r6, #1
 80178f8:	d435      	bmi.n	8017966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80178fa:	45b0      	cmp	r8, r6
 80178fc:	dd33      	ble.n	8017966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80178fe:	b390      	cbz	r0, 8017966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8017900:	2c00      	cmp	r4, #0
 8017902:	db2e      	blt.n	8017962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8017904:	45a4      	cmp	ip, r4
 8017906:	dd2c      	ble.n	8017962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8017908:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801790c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017910:	441e      	add	r6, r3
 8017912:	1c62      	adds	r2, r4, #1
 8017914:	d42a      	bmi.n	801796c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8017916:	4594      	cmp	ip, r2
 8017918:	dd28      	ble.n	801796c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801791a:	f1ba 0f00 	cmp.w	sl, #0
 801791e:	d025      	beq.n	801796c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8017920:	44f4      	add	ip, lr
 8017922:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8017926:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801792a:	4413      	add	r3, r2
 801792c:	f1ba 0f0f 	cmp.w	sl, #15
 8017930:	f897 8000 	ldrb.w	r8, [r7]
 8017934:	f895 9000 	ldrb.w	r9, [r5]
 8017938:	f896 e000 	ldrb.w	lr, [r6]
 801793c:	f893 c000 	ldrb.w	ip, [r3]
 8017940:	d801      	bhi.n	8017946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8017942:	280f      	cmp	r0, #15
 8017944:	d914      	bls.n	8017970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8017946:	4b29      	ldr	r3, [pc, #164]	; (80179ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8017948:	f240 1157 	movw	r1, #343	; 0x157
 801794c:	4a28      	ldr	r2, [pc, #160]	; (80179f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801794e:	4829      	ldr	r0, [pc, #164]	; (80179f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8017950:	f004 fcf4 	bl	801c33c <__assert_func>
 8017954:	af01      	add	r7, sp, #4
 8017956:	e7c2      	b.n	80178de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8017958:	ad01      	add	r5, sp, #4
 801795a:	462f      	mov	r7, r5
 801795c:	e7cb      	b.n	80178f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801795e:	ad01      	add	r5, sp, #4
 8017960:	e7c9      	b.n	80178f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8017962:	ae01      	add	r6, sp, #4
 8017964:	e7d5      	b.n	8017912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8017966:	ab01      	add	r3, sp, #4
 8017968:	461e      	mov	r6, r3
 801796a:	e7df      	b.n	801792c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801796c:	ab01      	add	r3, sp, #4
 801796e:	e7dd      	b.n	801792c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8017970:	fa1f f48a 	uxth.w	r4, sl
 8017974:	b280      	uxth	r0, r0
 8017976:	fb04 fa00 	mul.w	sl, r4, r0
 801797a:	0124      	lsls	r4, r4, #4
 801797c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017980:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8017984:	b282      	uxth	r2, r0
 8017986:	eba4 000a 	sub.w	r0, r4, sl
 801798a:	ebab 0b02 	sub.w	fp, fp, r2
 801798e:	b280      	uxth	r0, r0
 8017990:	fa1f fb8b 	uxth.w	fp, fp
 8017994:	fb00 f909 	mul.w	r9, r0, r9
 8017998:	fb0b 9808 	mla	r8, fp, r8, r9
 801799c:	fb02 8e0e 	mla	lr, r2, lr, r8
 80179a0:	fb0a ec0c 	mla	ip, sl, ip, lr
 80179a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80179a8:	f881 c000 	strb.w	ip, [r1]
 80179ac:	786c      	ldrb	r4, [r5, #1]
 80179ae:	f897 c001 	ldrb.w	ip, [r7, #1]
 80179b2:	4344      	muls	r4, r0
 80179b4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80179b8:	7874      	ldrb	r4, [r6, #1]
 80179ba:	fb02 cc04 	mla	ip, r2, r4, ip
 80179be:	785c      	ldrb	r4, [r3, #1]
 80179c0:	fb0a c404 	mla	r4, sl, r4, ip
 80179c4:	1224      	asrs	r4, r4, #8
 80179c6:	704c      	strb	r4, [r1, #1]
 80179c8:	78ad      	ldrb	r5, [r5, #2]
 80179ca:	78bc      	ldrb	r4, [r7, #2]
 80179cc:	4368      	muls	r0, r5
 80179ce:	fb0b 0b04 	mla	fp, fp, r4, r0
 80179d2:	78b0      	ldrb	r0, [r6, #2]
 80179d4:	fb02 b000 	mla	r0, r2, r0, fp
 80179d8:	789a      	ldrb	r2, [r3, #2]
 80179da:	fb0a 0a02 	mla	sl, sl, r2, r0
 80179de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80179e2:	f881 a002 	strb.w	sl, [r1, #2]
 80179e6:	b003      	add	sp, #12
 80179e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ec:	08020637 	.word	0x08020637
 80179f0:	08020aee 	.word	0x08020aee
 80179f4:	080206bf 	.word	0x080206bf

080179f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80179f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179fc:	ed2d 8b0a 	vpush	{d8-d12}
 8017a00:	b08d      	sub	sp, #52	; 0x34
 8017a02:	eeb0 aa40 	vmov.f32	s20, s0
 8017a06:	eef0 9a60 	vmov.f32	s19, s1
 8017a0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a0c:	eeb0 9a41 	vmov.f32	s18, s2
 8017a10:	9306      	str	r3, [sp, #24]
 8017a12:	eeb0 8a62 	vmov.f32	s16, s5
 8017a16:	eef0 8a43 	vmov.f32	s17, s6
 8017a1a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8017a1c:	eeb0 ca44 	vmov.f32	s24, s8
 8017a20:	eef0 ba64 	vmov.f32	s23, s9
 8017a24:	eeb0 ba45 	vmov.f32	s22, s10
 8017a28:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017a2c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8017a30:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017a32:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8017a36:	6850      	ldr	r0, [r2, #4]
 8017a38:	6812      	ldr	r2, [r2, #0]
 8017a3a:	fb00 1303 	mla	r3, r0, r3, r1
 8017a3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a42:	18d3      	adds	r3, r2, r3
 8017a44:	9307      	str	r3, [sp, #28]
 8017a46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	9308      	str	r3, [sp, #32]
 8017a4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a4e:	685d      	ldr	r5, [r3, #4]
 8017a50:	3504      	adds	r5, #4
 8017a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	dc03      	bgt.n	8017a60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	f340 81e6 	ble.w	8017e2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8017a60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017a66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017a6a:	1e48      	subs	r0, r1, #1
 8017a6c:	1e56      	subs	r6, r2, #1
 8017a6e:	9b06      	ldr	r3, [sp, #24]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f340 80bd 	ble.w	8017bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8017a76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017a78:	1427      	asrs	r7, r4, #16
 8017a7a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017a7e:	d406      	bmi.n	8017a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a80:	4287      	cmp	r7, r0
 8017a82:	da04      	bge.n	8017a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	db02      	blt.n	8017a8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a88:	42b3      	cmp	r3, r6
 8017a8a:	f2c0 80b2 	blt.w	8017bf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017a8e:	3701      	adds	r7, #1
 8017a90:	f100 80a1 	bmi.w	8017bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a94:	42b9      	cmp	r1, r7
 8017a96:	f2c0 809e 	blt.w	8017bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	f100 809b 	bmi.w	8017bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	f2c0 8098 	blt.w	8017bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017aa6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017aaa:	f1bb 0f00 	cmp.w	fp, #0
 8017aae:	f340 80bf 	ble.w	8017c30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8017ab2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017ab4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017ab8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017abc:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017ac0:	1420      	asrs	r0, r4, #16
 8017ac2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017ac4:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017ac8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017acc:	6892      	ldr	r2, [r2, #8]
 8017ace:	f100 8103 	bmi.w	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017ad2:	f102 3eff 	add.w	lr, r2, #4294967295
 8017ad6:	4570      	cmp	r0, lr
 8017ad8:	f280 80fe 	bge.w	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017adc:	2f00      	cmp	r7, #0
 8017ade:	f2c0 80fb 	blt.w	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017ae2:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017ae6:	4577      	cmp	r7, lr
 8017ae8:	f280 80f6 	bge.w	8017cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017aec:	b212      	sxth	r2, r2
 8017aee:	fb07 0002 	mla	r0, r7, r2, r0
 8017af2:	9f08      	ldr	r7, [sp, #32]
 8017af4:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017af8:	eb07 0e00 	add.w	lr, r7, r0
 8017afc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017b00:	eb05 0c08 	add.w	ip, r5, r8
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f000 80d8 	beq.w	8017cba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8017b0a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8017b0e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017b12:	442f      	add	r7, r5
 8017b14:	2900      	cmp	r1, #0
 8017b16:	f000 80d9 	beq.w	8017ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8017b1a:	eb0e 0002 	add.w	r0, lr, r2
 8017b1e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017b22:	7840      	ldrb	r0, [r0, #1]
 8017b24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017b2c:	442a      	add	r2, r5
 8017b2e:	4428      	add	r0, r5
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	f815 a008 	ldrb.w	sl, [r5, r8]
 8017b36:	b289      	uxth	r1, r1
 8017b38:	f897 8000 	ldrb.w	r8, [r7]
 8017b3c:	fb03 f901 	mul.w	r9, r3, r1
 8017b40:	011b      	lsls	r3, r3, #4
 8017b42:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017b46:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017b4a:	eba3 0309 	sub.w	r3, r3, r9
 8017b4e:	b289      	uxth	r1, r1
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	ebae 0e01 	sub.w	lr, lr, r1
 8017b56:	fb03 f808 	mul.w	r8, r3, r8
 8017b5a:	fa1f fe8e 	uxth.w	lr, lr
 8017b5e:	fb0e 880a 	mla	r8, lr, sl, r8
 8017b62:	f892 a000 	ldrb.w	sl, [r2]
 8017b66:	fb01 880a 	mla	r8, r1, sl, r8
 8017b6a:	f890 a000 	ldrb.w	sl, [r0]
 8017b6e:	fb09 880a 	mla	r8, r9, sl, r8
 8017b72:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b76:	f886 8000 	strb.w	r8, [r6]
 8017b7a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017b7e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017b82:	fb03 f808 	mul.w	r8, r3, r8
 8017b86:	fb0e 880a 	mla	r8, lr, sl, r8
 8017b8a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017b8e:	fb01 880a 	mla	r8, r1, sl, r8
 8017b92:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017b96:	fb09 880a 	mla	r8, r9, sl, r8
 8017b9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b9e:	f886 8001 	strb.w	r8, [r6, #1]
 8017ba2:	78bf      	ldrb	r7, [r7, #2]
 8017ba4:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017ba8:	437b      	muls	r3, r7
 8017baa:	7892      	ldrb	r2, [r2, #2]
 8017bac:	fb0e 330c 	mla	r3, lr, ip, r3
 8017bb0:	fb01 3102 	mla	r1, r1, r2, r3
 8017bb4:	7882      	ldrb	r2, [r0, #2]
 8017bb6:	fb09 1902 	mla	r9, r9, r2, r1
 8017bba:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017bbe:	f886 9002 	strb.w	r9, [r6, #2]
 8017bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017bc4:	3603      	adds	r6, #3
 8017bc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017bcc:	441c      	add	r4, r3
 8017bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017bd0:	4413      	add	r3, r2
 8017bd2:	9322      	str	r3, [sp, #136]	; 0x88
 8017bd4:	e769      	b.n	8017aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017bd8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8017bda:	441c      	add	r4, r3
 8017bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017bde:	443b      	add	r3, r7
 8017be0:	9322      	str	r3, [sp, #136]	; 0x88
 8017be2:	9b06      	ldr	r3, [sp, #24]
 8017be4:	3b01      	subs	r3, #1
 8017be6:	9306      	str	r3, [sp, #24]
 8017be8:	9b07      	ldr	r3, [sp, #28]
 8017bea:	3303      	adds	r3, #3
 8017bec:	9307      	str	r3, [sp, #28]
 8017bee:	e73e      	b.n	8017a6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017bf0:	d026      	beq.n	8017c40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017bf2:	9b06      	ldr	r3, [sp, #24]
 8017bf4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017bf6:	3b01      	subs	r3, #1
 8017bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8017bfc:	1400      	asrs	r0, r0, #16
 8017bfe:	f53f af52 	bmi.w	8017aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017c02:	3901      	subs	r1, #1
 8017c04:	4288      	cmp	r0, r1
 8017c06:	f6bf af4e 	bge.w	8017aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017c0a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017c0c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017c0e:	fb01 0303 	mla	r3, r1, r3, r0
 8017c12:	141b      	asrs	r3, r3, #16
 8017c14:	f53f af47 	bmi.w	8017aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017c18:	3a01      	subs	r2, #1
 8017c1a:	4293      	cmp	r3, r2
 8017c1c:	f6bf af43 	bge.w	8017aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017c20:	9b07      	ldr	r3, [sp, #28]
 8017c22:	f8dd a018 	ldr.w	sl, [sp, #24]
 8017c26:	f103 0803 	add.w	r8, r3, #3
 8017c2a:	f1ba 0f00 	cmp.w	sl, #0
 8017c2e:	dc71      	bgt.n	8017d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017c30:	9b06      	ldr	r3, [sp, #24]
 8017c32:	9a07      	ldr	r2, [sp, #28]
 8017c34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c3c:	441a      	add	r2, r3
 8017c3e:	9207      	str	r2, [sp, #28]
 8017c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f340 80f2 	ble.w	8017e2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8017c48:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017c4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c4e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017c52:	eef0 6a48 	vmov.f32	s13, s16
 8017c56:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017c5a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017c5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c62:	ee16 4a90 	vmov	r4, s13
 8017c66:	eef0 6a68 	vmov.f32	s13, s17
 8017c6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c6e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8017c72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017c76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017c7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017c7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017c82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017c86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017c8a:	ee18 2a10 	vmov	r2, s16
 8017c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8017c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c96:	ee18 2a90 	vmov	r2, s17
 8017c9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8017c9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c9e:	eef0 8a67 	vmov.f32	s17, s15
 8017ca2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ca6:	9324      	str	r3, [sp, #144]	; 0x90
 8017ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cac:	3b01      	subs	r3, #1
 8017cae:	9309      	str	r3, [sp, #36]	; 0x24
 8017cb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017cb2:	bf08      	it	eq
 8017cb4:	4613      	moveq	r3, r2
 8017cb6:	9306      	str	r3, [sp, #24]
 8017cb8:	e6cb      	b.n	8017a52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017cba:	b151      	cbz	r1, 8017cd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8017cbc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017cc0:	4660      	mov	r0, ip
 8017cc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017cc6:	442a      	add	r2, r5
 8017cc8:	4667      	mov	r7, ip
 8017cca:	e731      	b.n	8017b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017ccc:	4660      	mov	r0, ip
 8017cce:	4662      	mov	r2, ip
 8017cd0:	e72e      	b.n	8017b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017cd2:	4660      	mov	r0, ip
 8017cd4:	4662      	mov	r2, ip
 8017cd6:	e7f7      	b.n	8017cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8017cd8:	f110 0e01 	adds.w	lr, r0, #1
 8017cdc:	f53f af71 	bmi.w	8017bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017ce0:	4572      	cmp	r2, lr
 8017ce2:	f6ff af6e 	blt.w	8017bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017ce6:	f117 0e01 	adds.w	lr, r7, #1
 8017cea:	f53f af6a 	bmi.w	8017bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017cee:	45f4      	cmp	ip, lr
 8017cf0:	f6ff af67 	blt.w	8017bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017cf4:	b212      	sxth	r2, r2
 8017cf6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017cfa:	fa0f f38c 	sxth.w	r3, ip
 8017cfe:	9200      	str	r2, [sp, #0]
 8017d00:	4631      	mov	r1, r6
 8017d02:	9a08      	ldr	r2, [sp, #32]
 8017d04:	9301      	str	r3, [sp, #4]
 8017d06:	462b      	mov	r3, r5
 8017d08:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8017d0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017d0e:	f7ff fdbf 	bl	8017890 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8017d12:	e756      	b.n	8017bc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017d14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017d16:	1426      	asrs	r6, r4, #16
 8017d18:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017d1a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017d1e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017d22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017d24:	1400      	asrs	r0, r0, #16
 8017d26:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017d2a:	fb02 6000 	mla	r0, r2, r0, r6
 8017d2e:	9e08      	ldr	r6, [sp, #32]
 8017d30:	f816 e000 	ldrb.w	lr, [r6, r0]
 8017d34:	eb06 0c00 	add.w	ip, r6, r0
 8017d38:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017d3c:	eb05 070e 	add.w	r7, r5, lr
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d064      	beq.n	8017e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8017d44:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8017d48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017d4c:	442e      	add	r6, r5
 8017d4e:	2900      	cmp	r1, #0
 8017d50:	d066      	beq.n	8017e20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8017d52:	eb0c 0002 	add.w	r0, ip, r2
 8017d56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d5a:	7840      	ldrb	r0, [r0, #1]
 8017d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017d64:	442a      	add	r2, r5
 8017d66:	4428      	add	r0, r5
 8017d68:	b29b      	uxth	r3, r3
 8017d6a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017d6e:	b289      	uxth	r1, r1
 8017d70:	f896 e000 	ldrb.w	lr, [r6]
 8017d74:	f108 0803 	add.w	r8, r8, #3
 8017d78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d7c:	fb03 f901 	mul.w	r9, r3, r1
 8017d80:	011b      	lsls	r3, r3, #4
 8017d82:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017d86:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017d8a:	eba3 0309 	sub.w	r3, r3, r9
 8017d8e:	b289      	uxth	r1, r1
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	ebac 0c01 	sub.w	ip, ip, r1
 8017d96:	fb03 fe0e 	mul.w	lr, r3, lr
 8017d9a:	fa1f fc8c 	uxth.w	ip, ip
 8017d9e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017da2:	f892 b000 	ldrb.w	fp, [r2]
 8017da6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017daa:	f890 b000 	ldrb.w	fp, [r0]
 8017dae:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017db2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017db6:	f808 ec06 	strb.w	lr, [r8, #-6]
 8017dba:	f896 e001 	ldrb.w	lr, [r6, #1]
 8017dbe:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017dc2:	fb03 fe0e 	mul.w	lr, r3, lr
 8017dc6:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017dca:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017dce:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017dd2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017dd6:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017dda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017dde:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017de2:	78b6      	ldrb	r6, [r6, #2]
 8017de4:	78bf      	ldrb	r7, [r7, #2]
 8017de6:	4373      	muls	r3, r6
 8017de8:	7896      	ldrb	r6, [r2, #2]
 8017dea:	7882      	ldrb	r2, [r0, #2]
 8017dec:	fb0c 3307 	mla	r3, ip, r7, r3
 8017df0:	fb01 3306 	mla	r3, r1, r6, r3
 8017df4:	fb09 3902 	mla	r9, r9, r2, r3
 8017df8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017dfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017dfc:	441c      	add	r4, r3
 8017dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e00:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017e04:	4413      	add	r3, r2
 8017e06:	f808 9c04 	strb.w	r9, [r8, #-4]
 8017e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8017e0c:	e70d      	b.n	8017c2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017e0e:	b151      	cbz	r1, 8017e26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8017e10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017e14:	4638      	mov	r0, r7
 8017e16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e1a:	442a      	add	r2, r5
 8017e1c:	463e      	mov	r6, r7
 8017e1e:	e7a3      	b.n	8017d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017e20:	4638      	mov	r0, r7
 8017e22:	463a      	mov	r2, r7
 8017e24:	e7a0      	b.n	8017d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017e26:	4638      	mov	r0, r7
 8017e28:	463a      	mov	r2, r7
 8017e2a:	e7f7      	b.n	8017e1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8017e2c:	b00d      	add	sp, #52	; 0x34
 8017e2e:	ecbd 8b0a 	vpop	{d8-d12}
 8017e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017e38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8017e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e3c:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8017e40:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8017e44:	2d00      	cmp	r5, #0
 8017e46:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8017e4a:	fb05 040e 	mla	r4, r5, lr, r0
 8017e4e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017e52:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8017e56:	eb02 0804 	add.w	r8, r2, r4
 8017e5a:	db40      	blt.n	8017ede <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017e5c:	45a9      	cmp	r9, r5
 8017e5e:	dd3e      	ble.n	8017ede <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017e60:	2800      	cmp	r0, #0
 8017e62:	db3a      	blt.n	8017eda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017e64:	4586      	cmp	lr, r0
 8017e66:	dd38      	ble.n	8017eda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017e68:	5d12      	ldrb	r2, [r2, r4]
 8017e6a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017e6e:	1c42      	adds	r2, r0, #1
 8017e70:	d438      	bmi.n	8017ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017e72:	4596      	cmp	lr, r2
 8017e74:	dd36      	ble.n	8017ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017e76:	b3bf      	cbz	r7, 8017ee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8017e78:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017e7c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017e80:	3501      	adds	r5, #1
 8017e82:	d435      	bmi.n	8017ef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017e84:	45a9      	cmp	r9, r5
 8017e86:	dd33      	ble.n	8017ef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017e88:	f1bc 0f00 	cmp.w	ip, #0
 8017e8c:	d033      	beq.n	8017ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	db2c      	blt.n	8017eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e92:	4586      	cmp	lr, r0
 8017e94:	dd2a      	ble.n	8017eec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e96:	f818 200e 	ldrb.w	r2, [r8, lr]
 8017e9a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017e9e:	3001      	adds	r0, #1
 8017ea0:	d42c      	bmi.n	8017efc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017ea2:	4586      	cmp	lr, r0
 8017ea4:	dd2a      	ble.n	8017efc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017ea6:	b35f      	cbz	r7, 8017f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8017ea8:	44c6      	add	lr, r8
 8017eaa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017eae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017eb2:	2f0f      	cmp	r7, #15
 8017eb4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017eb8:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8017ebc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017ec0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8017ec4:	d802      	bhi.n	8017ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8017ec6:	f1bc 0f0f 	cmp.w	ip, #15
 8017eca:	d91b      	bls.n	8017f04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8017ecc:	4b77      	ldr	r3, [pc, #476]	; (80180ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8017ece:	f240 1157 	movw	r1, #343	; 0x157
 8017ed2:	4a77      	ldr	r2, [pc, #476]	; (80180b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8017ed4:	4877      	ldr	r0, [pc, #476]	; (80180b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8017ed6:	f004 fa31 	bl	801c33c <__assert_func>
 8017eda:	2600      	movs	r6, #0
 8017edc:	e7c7      	b.n	8017e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8017ede:	2400      	movs	r4, #0
 8017ee0:	4626      	mov	r6, r4
 8017ee2:	e7cd      	b.n	8017e80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017ee4:	2400      	movs	r4, #0
 8017ee6:	e7cb      	b.n	8017e80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017ee8:	463c      	mov	r4, r7
 8017eea:	e7c9      	b.n	8017e80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017eec:	2500      	movs	r5, #0
 8017eee:	e7d6      	b.n	8017e9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	4615      	mov	r5, r2
 8017ef4:	e7dd      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017ef6:	4662      	mov	r2, ip
 8017ef8:	4665      	mov	r5, ip
 8017efa:	e7da      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017efc:	2200      	movs	r2, #0
 8017efe:	e7d8      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017f00:	463a      	mov	r2, r7
 8017f02:	e7d6      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017f04:	b2bf      	uxth	r7, r7
 8017f06:	fa1f f08c 	uxth.w	r0, ip
 8017f0a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8017f0e:	fb00 fe07 	mul.w	lr, r0, r7
 8017f12:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8017f16:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8017f1a:	ebac 070e 	sub.w	r7, ip, lr
 8017f1e:	b280      	uxth	r0, r0
 8017f20:	b2bf      	uxth	r7, r7
 8017f22:	1a1b      	subs	r3, r3, r0
 8017f24:	fb07 fc0a 	mul.w	ip, r7, sl
 8017f28:	b29b      	uxth	r3, r3
 8017f2a:	fb03 cc0b 	mla	ip, r3, fp, ip
 8017f2e:	9300      	str	r3, [sp, #0]
 8017f30:	fb00 cc09 	mla	ip, r0, r9, ip
 8017f34:	fb0e cc08 	mla	ip, lr, r8, ip
 8017f38:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017f3c:	9301      	str	r3, [sp, #4]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f000 80b0 	beq.w	80180a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8017f44:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8017f48:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017f4c:	fb0b fc0c 	mul.w	ip, fp, ip
 8017f50:	fb0b f606 	mul.w	r6, fp, r6
 8017f54:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8017f58:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017f5c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8017f60:	44dc      	add	ip, fp
 8017f62:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017f66:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017f6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f6e:	fb0a fb0b 	mul.w	fp, sl, fp
 8017f72:	fb0a fa04 	mul.w	sl, sl, r4
 8017f76:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8017f7a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017f7e:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8017f82:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017f86:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017f8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017f8e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8017f92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f96:	0a36      	lsrs	r6, r6, #8
 8017f98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017f9c:	44dc      	add	ip, fp
 8017f9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8017fa2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017fa6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017faa:	fb09 fb0b 	mul.w	fp, r9, fp
 8017fae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017fb2:	fb09 f905 	mul.w	r9, r9, r5
 8017fb6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017fba:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8017fbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017fc2:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8017fc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017fca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017fce:	fb0c fc07 	mul.w	ip, ip, r7
 8017fd2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8017fd6:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8017fda:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017fde:	445c      	add	r4, fp
 8017fe0:	fb08 f505 	mul.w	r5, r8, r5
 8017fe4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017fe8:	fb08 f802 	mul.w	r8, r8, r2
 8017fec:	0a24      	lsrs	r4, r4, #8
 8017fee:	0a2a      	lsrs	r2, r5, #8
 8017ff0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8017ff4:	fb07 f70a 	mul.w	r7, r7, sl
 8017ff8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017ffc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018000:	4415      	add	r5, r2
 8018002:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8018006:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801800a:	9a00      	ldr	r2, [sp, #0]
 801800c:	0a2d      	lsrs	r5, r5, #8
 801800e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018012:	fb03 cc02 	mla	ip, r3, r2, ip
 8018016:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801801a:	fb02 7306 	mla	r3, r2, r6, r7
 801801e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018022:	9a01      	ldr	r2, [sp, #4]
 8018024:	fb05 c50e 	mla	r5, r5, lr, ip
 8018028:	fb0e 3e08 	mla	lr, lr, r8, r3
 801802c:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8018030:	fb04 5400 	mla	r4, r4, r0, r5
 8018034:	fb00 e303 	mla	r3, r0, r3, lr
 8018038:	0a24      	lsrs	r4, r4, #8
 801803a:	0a1b      	lsrs	r3, r3, #8
 801803c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018040:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018044:	431c      	orrs	r4, r3
 8018046:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801804a:	b29b      	uxth	r3, r3
 801804c:	b2e0      	uxtb	r0, r4
 801804e:	435a      	muls	r2, r3
 8018050:	fb10 f003 	smulbb	r0, r0, r3
 8018054:	1c55      	adds	r5, r2, #1
 8018056:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801805a:	780a      	ldrb	r2, [r1, #0]
 801805c:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8018060:	b2ed      	uxtb	r5, r5
 8018062:	fb02 0205 	mla	r2, r2, r5, r0
 8018066:	b292      	uxth	r2, r2
 8018068:	1c50      	adds	r0, r2, #1
 801806a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801806e:	7848      	ldrb	r0, [r1, #1]
 8018070:	fb10 f005 	smulbb	r0, r0, r5
 8018074:	1212      	asrs	r2, r2, #8
 8018076:	700a      	strb	r2, [r1, #0]
 8018078:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801807c:	0c24      	lsrs	r4, r4, #16
 801807e:	fb02 0203 	mla	r2, r2, r3, r0
 8018082:	b292      	uxth	r2, r2
 8018084:	1c50      	adds	r0, r2, #1
 8018086:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801808a:	1212      	asrs	r2, r2, #8
 801808c:	704a      	strb	r2, [r1, #1]
 801808e:	788a      	ldrb	r2, [r1, #2]
 8018090:	fb12 f505 	smulbb	r5, r2, r5
 8018094:	fb04 5303 	mla	r3, r4, r3, r5
 8018098:	b29b      	uxth	r3, r3
 801809a:	1c5a      	adds	r2, r3, #1
 801809c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80180a0:	121b      	asrs	r3, r3, #8
 80180a2:	708b      	strb	r3, [r1, #2]
 80180a4:	b003      	add	sp, #12
 80180a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180aa:	bf00      	nop
 80180ac:	08020637 	.word	0x08020637
 80180b0:	08020aee 	.word	0x08020aee
 80180b4:	080206bf 	.word	0x080206bf

080180b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180bc:	ed2d 8b08 	vpush	{d8-d11}
 80180c0:	b09f      	sub	sp, #124	; 0x7c
 80180c2:	eeb0 aa40 	vmov.f32	s20, s0
 80180c6:	eef0 9a60 	vmov.f32	s19, s1
 80180ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80180cc:	eeb0 9a41 	vmov.f32	s18, s2
 80180d0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80180d2:	eeb0 8a62 	vmov.f32	s16, s5
 80180d6:	9309      	str	r3, [sp, #36]	; 0x24
 80180d8:	eef0 8a43 	vmov.f32	s17, s6
 80180dc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80180e0:	eef0 ba44 	vmov.f32	s23, s8
 80180e4:	901d      	str	r0, [sp, #116]	; 0x74
 80180e6:	eeb0 ba64 	vmov.f32	s22, s9
 80180ea:	931c      	str	r3, [sp, #112]	; 0x70
 80180ec:	eef0 aa45 	vmov.f32	s21, s10
 80180f0:	6850      	ldr	r0, [r2, #4]
 80180f2:	9119      	str	r1, [sp, #100]	; 0x64
 80180f4:	6812      	ldr	r2, [r2, #0]
 80180f6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80180f8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80180fc:	fb00 1303 	mla	r3, r0, r3, r1
 8018100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018104:	18d3      	adds	r3, r2, r3
 8018106:	930c      	str	r3, [sp, #48]	; 0x30
 8018108:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	9312      	str	r3, [sp, #72]	; 0x48
 801810e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018110:	685e      	ldr	r6, [r3, #4]
 8018112:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8018116:	3604      	adds	r6, #4
 8018118:	930d      	str	r3, [sp, #52]	; 0x34
 801811a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801811c:	2b00      	cmp	r3, #0
 801811e:	dc03      	bgt.n	8018128 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018122:	2b00      	cmp	r3, #0
 8018124:	f340 8378 	ble.w	8018818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8018128:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801812a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801812e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018132:	1e48      	subs	r0, r1, #1
 8018134:	1e57      	subs	r7, r2, #1
 8018136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018138:	2b00      	cmp	r3, #0
 801813a:	f340 818c 	ble.w	8018456 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801813e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018140:	142b      	asrs	r3, r5, #16
 8018142:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018146:	d406      	bmi.n	8018156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018148:	4584      	cmp	ip, r0
 801814a:	da04      	bge.n	8018156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801814c:	2b00      	cmp	r3, #0
 801814e:	db02      	blt.n	8018156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018150:	42bb      	cmp	r3, r7
 8018152:	f2c0 8181 	blt.w	8018458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8018156:	f11c 0c01 	adds.w	ip, ip, #1
 801815a:	f100 816f 	bmi.w	801843c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801815e:	4561      	cmp	r1, ip
 8018160:	f2c0 816c 	blt.w	801843c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018164:	3301      	adds	r3, #1
 8018166:	f100 8169 	bmi.w	801843c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801816a:	429a      	cmp	r2, r3
 801816c:	f2c0 8166 	blt.w	801843c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018172:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018174:	931a      	str	r3, [sp, #104]	; 0x68
 8018176:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018178:	2b00      	cmp	r3, #0
 801817a:	f340 818c 	ble.w	8018496 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801817e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018180:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018184:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018188:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801818c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801818e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8018192:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018194:	141b      	asrs	r3, r3, #16
 8018196:	f100 81d0 	bmi.w	801853a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801819a:	f100 38ff 	add.w	r8, r0, #4294967295
 801819e:	4543      	cmp	r3, r8
 80181a0:	f280 81cb 	bge.w	801853a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80181a4:	f1bc 0f00 	cmp.w	ip, #0
 80181a8:	f2c0 81c7 	blt.w	801853a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80181ac:	f10e 38ff 	add.w	r8, lr, #4294967295
 80181b0:	45c4      	cmp	ip, r8
 80181b2:	f280 81c2 	bge.w	801853a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80181b6:	b200      	sxth	r0, r0
 80181b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80181ba:	fb0c 3300 	mla	r3, ip, r0, r3
 80181be:	eb04 0803 	add.w	r8, r4, r3
 80181c2:	5ce3      	ldrb	r3, [r4, r3]
 80181c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80181c8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80181cc:	2a00      	cmp	r2, #0
 80181ce:	f000 81a9 	beq.w	8018524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 80181d2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80181d6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80181da:	940e      	str	r4, [sp, #56]	; 0x38
 80181dc:	0e24      	lsrs	r4, r4, #24
 80181de:	9415      	str	r4, [sp, #84]	; 0x54
 80181e0:	b179      	cbz	r1, 8018202 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80181e2:	eb08 0c00 	add.w	ip, r8, r0
 80181e6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80181ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80181ee:	900a      	str	r0, [sp, #40]	; 0x28
 80181f0:	0e00      	lsrs	r0, r0, #24
 80181f2:	9013      	str	r0, [sp, #76]	; 0x4c
 80181f4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80181f8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80181fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80181fe:	0e00      	lsrs	r0, r0, #24
 8018200:	9016      	str	r0, [sp, #88]	; 0x58
 8018202:	b292      	uxth	r2, r2
 8018204:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018206:	b289      	uxth	r1, r1
 8018208:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801820a:	fb02 f901 	mul.w	r9, r2, r1
 801820e:	0112      	lsls	r2, r2, #4
 8018210:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018214:	eba2 0809 	sub.w	r8, r2, r9
 8018218:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801821c:	b289      	uxth	r1, r1
 801821e:	fa1f f888 	uxth.w	r8, r8
 8018222:	1a52      	subs	r2, r2, r1
 8018224:	fb08 f000 	mul.w	r0, r8, r0
 8018228:	b292      	uxth	r2, r2
 801822a:	fb02 000e 	mla	r0, r2, lr, r0
 801822e:	fb01 0004 	mla	r0, r1, r4, r0
 8018232:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018234:	fb09 0004 	mla	r0, r9, r4, r0
 8018238:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801823c:	2800      	cmp	r0, #0
 801823e:	f000 80f2 	beq.w	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018242:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018246:	d01b      	beq.n	8018280 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018248:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801824c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018250:	fb0e fa0a 	mul.w	sl, lr, sl
 8018254:	fb0e fe03 	mul.w	lr, lr, r3
 8018258:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801825c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018260:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018264:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018268:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801826c:	4453      	add	r3, sl
 801826e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018272:	0a1b      	lsrs	r3, r3, #8
 8018274:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018278:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801827c:	ea43 030c 	orr.w	r3, r3, ip
 8018280:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018282:	2cff      	cmp	r4, #255	; 0xff
 8018284:	d021      	beq.n	80182ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018286:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018288:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801828c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801828e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018292:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018294:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018298:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801829a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801829e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80182a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80182ae:	44de      	add	lr, fp
 80182b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80182b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80182c4:	ea4e 040a 	orr.w	r4, lr, sl
 80182c8:	940e      	str	r4, [sp, #56]	; 0x38
 80182ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182cc:	2cff      	cmp	r4, #255	; 0xff
 80182ce:	d021      	beq.n	8018314 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80182d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80182d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80182dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80182de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80182e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80182e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80182f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80182f8:	44de      	add	lr, fp
 80182fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80182fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018302:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018306:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801830a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801830e:	ea4e 040a 	orr.w	r4, lr, sl
 8018312:	940a      	str	r4, [sp, #40]	; 0x28
 8018314:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018316:	2cff      	cmp	r4, #255	; 0xff
 8018318:	d021      	beq.n	801835e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801831a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801831c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018320:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018322:	fb04 fb0b 	mul.w	fp, r4, fp
 8018326:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018328:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801832c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801832e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018332:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018336:	fb04 fa0a 	mul.w	sl, r4, sl
 801833a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801833e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018342:	44de      	add	lr, fp
 8018344:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801834c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018350:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018354:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018358:	ea4e 040a 	orr.w	r4, lr, sl
 801835c:	940f      	str	r4, [sp, #60]	; 0x3c
 801835e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018360:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018368:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801836c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801836e:	fb08 fc0c 	mul.w	ip, r8, ip
 8018372:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018376:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801837a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801837c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018380:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018384:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018386:	fb09 cc0e 	mla	ip, r9, lr, ip
 801838a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801838e:	fb08 f80e 	mul.w	r8, r8, lr
 8018392:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018396:	fb02 8303 	mla	r3, r2, r3, r8
 801839a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801839c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80183a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183a6:	fb01 330a 	mla	r3, r1, sl, r3
 80183aa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80183ae:	fb09 3901 	mla	r9, r9, r1, r3
 80183b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80183b6:	4343      	muls	r3, r0
 80183b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80183bc:	1c58      	adds	r0, r3, #1
 80183be:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80183c2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80183c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80183ca:	783b      	ldrb	r3, [r7, #0]
 80183cc:	fa5f f28c 	uxtb.w	r2, ip
 80183d0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80183d4:	fb12 f201 	smulbb	r2, r2, r1
 80183d8:	b2c0      	uxtb	r0, r0
 80183da:	fb03 2300 	mla	r3, r3, r0, r2
 80183de:	b29b      	uxth	r3, r3
 80183e0:	1c5a      	adds	r2, r3, #1
 80183e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80183e6:	787a      	ldrb	r2, [r7, #1]
 80183e8:	fb12 f200 	smulbb	r2, r2, r0
 80183ec:	121b      	asrs	r3, r3, #8
 80183ee:	703b      	strb	r3, [r7, #0]
 80183f0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80183f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80183f8:	fb03 2301 	mla	r3, r3, r1, r2
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	1c5a      	adds	r2, r3, #1
 8018400:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018404:	121b      	asrs	r3, r3, #8
 8018406:	707b      	strb	r3, [r7, #1]
 8018408:	78bb      	ldrb	r3, [r7, #2]
 801840a:	fb13 f000 	smulbb	r0, r3, r0
 801840e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8018412:	fa1f fc8c 	uxth.w	ip, ip
 8018416:	f10c 0301 	add.w	r3, ip, #1
 801841a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801841e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018422:	f887 c002 	strb.w	ip, [r7, #2]
 8018426:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018428:	3703      	adds	r7, #3
 801842a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801842c:	441a      	add	r2, r3
 801842e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018430:	441d      	add	r5, r3
 8018432:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018434:	9231      	str	r2, [sp, #196]	; 0xc4
 8018436:	3b01      	subs	r3, #1
 8018438:	931a      	str	r3, [sp, #104]	; 0x68
 801843a:	e69c      	b.n	8018176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801843c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801843e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018440:	441c      	add	r4, r3
 8018442:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018444:	441d      	add	r5, r3
 8018446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018448:	9431      	str	r4, [sp, #196]	; 0xc4
 801844a:	3b01      	subs	r3, #1
 801844c:	9309      	str	r3, [sp, #36]	; 0x24
 801844e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018450:	3303      	adds	r3, #3
 8018452:	930c      	str	r3, [sp, #48]	; 0x30
 8018454:	e66f      	b.n	8018136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018456:	d026      	beq.n	80184a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8018458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801845a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801845c:	3b01      	subs	r3, #1
 801845e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018460:	fb00 4003 	mla	r0, r0, r3, r4
 8018464:	1400      	asrs	r0, r0, #16
 8018466:	f53f ae83 	bmi.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801846a:	3901      	subs	r1, #1
 801846c:	4288      	cmp	r0, r1
 801846e:	f6bf ae7f 	bge.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018472:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018474:	fb01 5303 	mla	r3, r1, r3, r5
 8018478:	141b      	asrs	r3, r3, #16
 801847a:	f53f ae79 	bmi.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801847e:	3a01      	subs	r2, #1
 8018480:	4293      	cmp	r3, r2
 8018482:	f6bf ae75 	bge.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018488:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801848c:	f103 0e03 	add.w	lr, r3, #3
 8018490:	f1bb 0f00 	cmp.w	fp, #0
 8018494:	dc71      	bgt.n	801857a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018498:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801849c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801849e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80184a2:	4423      	add	r3, r4
 80184a4:	930c      	str	r3, [sp, #48]	; 0x30
 80184a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	f340 81b5 	ble.w	8018818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80184ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80184b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80184b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80184b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80184bc:	eef0 6a48 	vmov.f32	s13, s16
 80184c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80184c4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80184c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80184cc:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80184d0:	eef0 6a68 	vmov.f32	s13, s17
 80184d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80184d8:	ee16 5a90 	vmov	r5, s13
 80184dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80184e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80184e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80184e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80184ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80184f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80184f4:	ee18 2a10 	vmov	r2, s16
 80184f8:	eeb0 8a47 	vmov.f32	s16, s14
 80184fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8018500:	ee18 2a90 	vmov	r2, s17
 8018504:	9333      	str	r3, [sp, #204]	; 0xcc
 8018506:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018508:	eef0 8a67 	vmov.f32	s17, s15
 801850c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018510:	9334      	str	r3, [sp, #208]	; 0xd0
 8018512:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018514:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018516:	3b01      	subs	r3, #1
 8018518:	9319      	str	r3, [sp, #100]	; 0x64
 801851a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801851c:	bf08      	it	eq
 801851e:	4613      	moveq	r3, r2
 8018520:	9309      	str	r3, [sp, #36]	; 0x24
 8018522:	e5fa      	b.n	801811a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018524:	2900      	cmp	r1, #0
 8018526:	f43f ae6c 	beq.w	8018202 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801852a:	f818 0000 	ldrb.w	r0, [r8, r0]
 801852e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018532:	900a      	str	r0, [sp, #40]	; 0x28
 8018534:	0e00      	lsrs	r0, r0, #24
 8018536:	9013      	str	r0, [sp, #76]	; 0x4c
 8018538:	e663      	b.n	8018202 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801853a:	f113 0801 	adds.w	r8, r3, #1
 801853e:	f53f af72 	bmi.w	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018542:	4540      	cmp	r0, r8
 8018544:	f6ff af6f 	blt.w	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018548:	f11c 0801 	adds.w	r8, ip, #1
 801854c:	f53f af6b 	bmi.w	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018550:	45c6      	cmp	lr, r8
 8018552:	f6ff af68 	blt.w	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018556:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018558:	b200      	sxth	r0, r0
 801855a:	9302      	str	r3, [sp, #8]
 801855c:	fa0f f38e 	sxth.w	r3, lr
 8018560:	9000      	str	r0, [sp, #0]
 8018562:	9301      	str	r3, [sp, #4]
 8018564:	4633      	mov	r3, r6
 8018566:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018568:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801856c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8018570:	4639      	mov	r1, r7
 8018572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018574:	f7ff fc60 	bl	8017e38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8018578:	e755      	b.n	8018426 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801857a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801857c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018580:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018582:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018586:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018588:	1427      	asrs	r7, r4, #16
 801858a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801858c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018590:	142b      	asrs	r3, r5, #16
 8018592:	fb01 7303 	mla	r3, r1, r3, r7
 8018596:	18e7      	adds	r7, r4, r3
 8018598:	5ce3      	ldrb	r3, [r4, r3]
 801859a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801859e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80185a2:	2a00      	cmp	r2, #0
 80185a4:	f000 812e 	beq.w	8018804 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80185a8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80185ac:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80185b0:	9410      	str	r4, [sp, #64]	; 0x40
 80185b2:	0e24      	lsrs	r4, r4, #24
 80185b4:	9417      	str	r4, [sp, #92]	; 0x5c
 80185b6:	b170      	cbz	r0, 80185d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80185b8:	eb07 0801 	add.w	r8, r7, r1
 80185bc:	5c79      	ldrb	r1, [r7, r1]
 80185be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80185c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80185c4:	0e09      	lsrs	r1, r1, #24
 80185c6:	9114      	str	r1, [sp, #80]	; 0x50
 80185c8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80185cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80185d0:	9111      	str	r1, [sp, #68]	; 0x44
 80185d2:	0e09      	lsrs	r1, r1, #24
 80185d4:	9118      	str	r1, [sp, #96]	; 0x60
 80185d6:	b292      	uxth	r2, r2
 80185d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80185da:	b280      	uxth	r0, r0
 80185dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80185de:	fb02 f900 	mul.w	r9, r2, r0
 80185e2:	0112      	lsls	r2, r2, #4
 80185e4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80185e8:	eba2 0809 	sub.w	r8, r2, r9
 80185ec:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80185f0:	b280      	uxth	r0, r0
 80185f2:	fa1f f888 	uxth.w	r8, r8
 80185f6:	1a12      	subs	r2, r2, r0
 80185f8:	fb08 f101 	mul.w	r1, r8, r1
 80185fc:	b292      	uxth	r2, r2
 80185fe:	fb02 110c 	mla	r1, r2, ip, r1
 8018602:	fb00 1104 	mla	r1, r0, r4, r1
 8018606:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018608:	fb09 1104 	mla	r1, r9, r4, r1
 801860c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018610:	2900      	cmp	r1, #0
 8018612:	f000 80ec 	beq.w	80187ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8018616:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801861a:	d019      	beq.n	8018650 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801861c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018620:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018624:	fb0c fa0a 	mul.w	sl, ip, sl
 8018628:	fb0c fc03 	mul.w	ip, ip, r3
 801862c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018630:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018634:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018638:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801863c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018640:	4453      	add	r3, sl
 8018642:	0a3f      	lsrs	r7, r7, #8
 8018644:	0a1b      	lsrs	r3, r3, #8
 8018646:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801864a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801864e:	433b      	orrs	r3, r7
 8018650:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018652:	2cff      	cmp	r4, #255	; 0xff
 8018654:	d020      	beq.n	8018698 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8018656:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018658:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801865c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801865e:	4367      	muls	r7, r4
 8018660:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018662:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018666:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801866a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801866c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018670:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018674:	fb04 fa0a 	mul.w	sl, r4, sl
 8018678:	44bc      	add	ip, r7
 801867a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801867e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018682:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018686:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801868a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801868e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018692:	ea4c 040a 	orr.w	r4, ip, sl
 8018696:	9410      	str	r4, [sp, #64]	; 0x40
 8018698:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801869a:	2cff      	cmp	r4, #255	; 0xff
 801869c:	d020      	beq.n	80186e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801869e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186a0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80186a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186a6:	4367      	muls	r7, r4
 80186a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80186ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80186b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80186b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80186b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80186c0:	44bc      	add	ip, r7
 80186c2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80186c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186ca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80186ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80186da:	ea4c 040a 	orr.w	r4, ip, sl
 80186de:	940b      	str	r4, [sp, #44]	; 0x2c
 80186e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80186e2:	2cff      	cmp	r4, #255	; 0xff
 80186e4:	d020      	beq.n	8018728 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80186e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80186e8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80186ec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80186ee:	4367      	muls	r7, r4
 80186f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80186f2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80186f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80186fa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80186fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018700:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018704:	fb04 fa0a 	mul.w	sl, r4, sl
 8018708:	44bc      	add	ip, r7
 801870a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801870e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018712:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018716:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801871a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801871e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018722:	ea4c 040a 	orr.w	r4, ip, sl
 8018726:	9411      	str	r4, [sp, #68]	; 0x44
 8018728:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801872a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801872e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018732:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018736:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018738:	fb08 f707 	mul.w	r7, r8, r7
 801873c:	fb02 770c 	mla	r7, r2, ip, r7
 8018740:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018744:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018746:	fb00 770c 	mla	r7, r0, ip, r7
 801874a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801874e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018750:	fb09 770c 	mla	r7, r9, ip, r7
 8018754:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018758:	fb08 f80c 	mul.w	r8, r8, ip
 801875c:	0a3f      	lsrs	r7, r7, #8
 801875e:	fb02 8303 	mla	r3, r2, r3, r8
 8018762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018764:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018768:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801876c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801876e:	fb00 330a 	mla	r3, r0, sl, r3
 8018772:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018776:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018778:	fb09 3c0c 	mla	ip, r9, ip, r3
 801877c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801877e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018782:	434b      	muls	r3, r1
 8018784:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018788:	1c59      	adds	r1, r3, #1
 801878a:	ea47 070c 	orr.w	r7, r7, ip
 801878e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018792:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018796:	b2fa      	uxtb	r2, r7
 8018798:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801879c:	fb12 f200 	smulbb	r2, r2, r0
 80187a0:	b2c9      	uxtb	r1, r1
 80187a2:	fb03 2301 	mla	r3, r3, r1, r2
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	1c5a      	adds	r2, r3, #1
 80187aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80187ae:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80187b2:	fb12 f201 	smulbb	r2, r2, r1
 80187b6:	121b      	asrs	r3, r3, #8
 80187b8:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80187bc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80187c0:	0c3f      	lsrs	r7, r7, #16
 80187c2:	fb03 2300 	mla	r3, r3, r0, r2
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	1c5a      	adds	r2, r3, #1
 80187ca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80187ce:	121b      	asrs	r3, r3, #8
 80187d0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80187d4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80187d8:	fb13 f101 	smulbb	r1, r3, r1
 80187dc:	fb07 1700 	mla	r7, r7, r0, r1
 80187e0:	b2bf      	uxth	r7, r7
 80187e2:	1c7b      	adds	r3, r7, #1
 80187e4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80187e8:	123f      	asrs	r7, r7, #8
 80187ea:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80187ee:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80187f0:	f10e 0e03 	add.w	lr, lr, #3
 80187f4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80187f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187fa:	441a      	add	r2, r3
 80187fc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80187fe:	9231      	str	r2, [sp, #196]	; 0xc4
 8018800:	441d      	add	r5, r3
 8018802:	e645      	b.n	8018490 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8018804:	2800      	cmp	r0, #0
 8018806:	f43f aee6 	beq.w	80185d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801880a:	5c79      	ldrb	r1, [r7, r1]
 801880c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018810:	910b      	str	r1, [sp, #44]	; 0x2c
 8018812:	0e09      	lsrs	r1, r1, #24
 8018814:	9114      	str	r1, [sp, #80]	; 0x50
 8018816:	e6de      	b.n	80185d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8018818:	b01f      	add	sp, #124	; 0x7c
 801881a:	ecbd 8b08 	vpop	{d8-d11}
 801881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8018824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018828:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801882c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8018830:	2c00      	cmp	r4, #0
 8018832:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8018836:	fb04 060c 	mla	r6, r4, ip, r0
 801883a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801883e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8018842:	eb02 0e06 	add.w	lr, r2, r6
 8018846:	db3d      	blt.n	80188c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8018848:	45a0      	cmp	r8, r4
 801884a:	dd3b      	ble.n	80188c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801884c:	2800      	cmp	r0, #0
 801884e:	db37      	blt.n	80188c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018850:	4584      	cmp	ip, r0
 8018852:	dd35      	ble.n	80188c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018854:	5d92      	ldrb	r2, [r2, r6]
 8018856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801885a:	1c46      	adds	r6, r0, #1
 801885c:	d435      	bmi.n	80188ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801885e:	45b4      	cmp	ip, r6
 8018860:	dd33      	ble.n	80188ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8018862:	b3a5      	cbz	r5, 80188ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8018864:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8018868:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801886c:	3401      	adds	r4, #1
 801886e:	d432      	bmi.n	80188d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018870:	45a0      	cmp	r8, r4
 8018872:	dd30      	ble.n	80188d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018874:	b397      	cbz	r7, 80188dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8018876:	2800      	cmp	r0, #0
 8018878:	db2b      	blt.n	80188d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801887a:	4584      	cmp	ip, r0
 801887c:	dd29      	ble.n	80188d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801887e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8018882:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8018886:	3001      	adds	r0, #1
 8018888:	d42b      	bmi.n	80188e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801888a:	4584      	cmp	ip, r0
 801888c:	dd29      	ble.n	80188e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801888e:	b355      	cbz	r5, 80188e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8018890:	44f4      	add	ip, lr
 8018892:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018896:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801889a:	2d0f      	cmp	r5, #15
 801889c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80188a0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80188a4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80188a8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80188ac:	d801      	bhi.n	80188b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 80188ae:	2f0f      	cmp	r7, #15
 80188b0:	d91b      	bls.n	80188ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 80188b2:	4b7f      	ldr	r3, [pc, #508]	; (8018ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80188b4:	f240 1157 	movw	r1, #343	; 0x157
 80188b8:	4a7e      	ldr	r2, [pc, #504]	; (8018ab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80188ba:	487f      	ldr	r0, [pc, #508]	; (8018ab8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80188bc:	f003 fd3e 	bl	801c33c <__assert_func>
 80188c0:	2200      	movs	r2, #0
 80188c2:	e7ca      	b.n	801885a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 80188c4:	2600      	movs	r6, #0
 80188c6:	4632      	mov	r2, r6
 80188c8:	e7d0      	b.n	801886c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80188ca:	2600      	movs	r6, #0
 80188cc:	e7ce      	b.n	801886c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80188ce:	462e      	mov	r6, r5
 80188d0:	e7cc      	b.n	801886c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80188d2:	2400      	movs	r4, #0
 80188d4:	e7d7      	b.n	8018886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 80188d6:	2300      	movs	r3, #0
 80188d8:	461c      	mov	r4, r3
 80188da:	e7de      	b.n	801889a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80188dc:	463b      	mov	r3, r7
 80188de:	463c      	mov	r4, r7
 80188e0:	e7db      	b.n	801889a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80188e2:	2300      	movs	r3, #0
 80188e4:	e7d9      	b.n	801889a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80188e6:	462b      	mov	r3, r5
 80188e8:	e7d7      	b.n	801889a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80188ea:	b2a8      	uxth	r0, r5
 80188ec:	b2bf      	uxth	r7, r7
 80188ee:	fb07 fe00 	mul.w	lr, r7, r0
 80188f2:	0100      	lsls	r0, r0, #4
 80188f4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80188f8:	eba0 0c0e 	sub.w	ip, r0, lr
 80188fc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8018900:	b2bf      	uxth	r7, r7
 8018902:	fa1f fc8c 	uxth.w	ip, ip
 8018906:	1bc5      	subs	r5, r0, r7
 8018908:	fb0c f00a 	mul.w	r0, ip, sl
 801890c:	b2ad      	uxth	r5, r5
 801890e:	fb05 000b 	mla	r0, r5, fp, r0
 8018912:	fb07 0009 	mla	r0, r7, r9, r0
 8018916:	fb0e 0008 	mla	r0, lr, r8, r0
 801891a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801891e:	9001      	str	r0, [sp, #4]
 8018920:	2800      	cmp	r0, #0
 8018922:	f000 80c2 	beq.w	8018aaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8018926:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801892a:	d018      	beq.n	801895e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801892c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8018930:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018934:	fb0b f000 	mul.w	r0, fp, r0
 8018938:	fb0b fb02 	mul.w	fp, fp, r2
 801893c:	0a02      	lsrs	r2, r0, #8
 801893e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8018942:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018946:	4402      	add	r2, r0
 8018948:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801894c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8018950:	0a12      	lsrs	r2, r2, #8
 8018952:	0a00      	lsrs	r0, r0, #8
 8018954:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018958:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801895c:	4302      	orrs	r2, r0
 801895e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018962:	d01a      	beq.n	801899a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8018964:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018968:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801896c:	fb0a f000 	mul.w	r0, sl, r0
 8018970:	fb0a fa06 	mul.w	sl, sl, r6
 8018974:	0a06      	lsrs	r6, r0, #8
 8018976:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801897a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801897e:	4406      	add	r6, r0
 8018980:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018984:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018988:	0a36      	lsrs	r6, r6, #8
 801898a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801898e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018992:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018996:	ea46 060a 	orr.w	r6, r6, sl
 801899a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801899e:	d01b      	beq.n	80189d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80189a0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80189a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80189a8:	fb09 fa0a 	mul.w	sl, r9, sl
 80189ac:	fb09 f004 	mul.w	r0, r9, r4
 80189b0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80189b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80189b8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80189bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80189c0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80189c4:	4454      	add	r4, sl
 80189c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80189ca:	0a24      	lsrs	r4, r4, #8
 80189cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80189d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80189d4:	ea44 0409 	orr.w	r4, r4, r9
 80189d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80189dc:	d01b      	beq.n	8018a16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 80189de:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80189e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80189e6:	fb08 f909 	mul.w	r9, r8, r9
 80189ea:	fb08 f003 	mul.w	r0, r8, r3
 80189ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80189f2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80189f6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80189fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80189fe:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8018a02:	444b      	add	r3, r9
 8018a04:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018a08:	0a1b      	lsrs	r3, r3, #8
 8018a0a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018a0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018a12:	ea43 0308 	orr.w	r3, r3, r8
 8018a16:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018a1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018a1e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8018a22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018a26:	fb0c f000 	mul.w	r0, ip, r0
 8018a2a:	fb0c f606 	mul.w	r6, ip, r6
 8018a2e:	fb05 0808 	mla	r8, r5, r8, r0
 8018a32:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8018a36:	fb05 6502 	mla	r5, r5, r2, r6
 8018a3a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018a3e:	fb07 8800 	mla	r8, r7, r0, r8
 8018a42:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8018a46:	fb07 5704 	mla	r7, r7, r4, r5
 8018a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a4e:	fb0e 8000 	mla	r0, lr, r0, r8
 8018a52:	780a      	ldrb	r2, [r1, #0]
 8018a54:	fb0e 7e03 	mla	lr, lr, r3, r7
 8018a58:	9b01      	ldr	r3, [sp, #4]
 8018a5a:	0a00      	lsrs	r0, r0, #8
 8018a5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018a60:	43db      	mvns	r3, r3
 8018a62:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018a6c:	ea40 0e0e 	orr.w	lr, r0, lr
 8018a70:	fb02 f003 	mul.w	r0, r2, r3
 8018a74:	1c42      	adds	r2, r0, #1
 8018a76:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8018a7a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8018a7e:	700a      	strb	r2, [r1, #0]
 8018a80:	784a      	ldrb	r2, [r1, #1]
 8018a82:	435a      	muls	r2, r3
 8018a84:	1c50      	adds	r0, r2, #1
 8018a86:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018a8a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8018a8e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8018a92:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8018a96:	704a      	strb	r2, [r1, #1]
 8018a98:	788a      	ldrb	r2, [r1, #2]
 8018a9a:	4353      	muls	r3, r2
 8018a9c:	1c5a      	adds	r2, r3, #1
 8018a9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018aa2:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8018aa6:	f881 e002 	strb.w	lr, [r1, #2]
 8018aaa:	b003      	add	sp, #12
 8018aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab0:	08020637 	.word	0x08020637
 8018ab4:	08020aee 	.word	0x08020aee
 8018ab8:	080206bf 	.word	0x080206bf

08018abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac0:	ed2d 8b0a 	vpush	{d8-d12}
 8018ac4:	b09b      	sub	sp, #108	; 0x6c
 8018ac6:	eeb0 aa40 	vmov.f32	s20, s0
 8018aca:	eef0 9a60 	vmov.f32	s19, s1
 8018ace:	9218      	str	r2, [sp, #96]	; 0x60
 8018ad0:	eeb0 9a41 	vmov.f32	s18, s2
 8018ad4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018ad6:	eeb0 8a62 	vmov.f32	s16, s5
 8018ada:	9019      	str	r0, [sp, #100]	; 0x64
 8018adc:	eef0 8a43 	vmov.f32	s17, s6
 8018ae0:	6850      	ldr	r0, [r2, #4]
 8018ae2:	eeb0 ca44 	vmov.f32	s24, s8
 8018ae6:	9116      	str	r1, [sp, #88]	; 0x58
 8018ae8:	eef0 ba64 	vmov.f32	s23, s9
 8018aec:	9307      	str	r3, [sp, #28]
 8018aee:	eeb0 ba45 	vmov.f32	s22, s10
 8018af2:	6812      	ldr	r2, [r2, #0]
 8018af4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8018af8:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8018afa:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018afe:	fb00 1303 	mla	r3, r0, r3, r1
 8018b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b06:	18d3      	adds	r3, r2, r3
 8018b08:	930a      	str	r3, [sp, #40]	; 0x28
 8018b0a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b10:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018b12:	685e      	ldr	r6, [r3, #4]
 8018b14:	3604      	adds	r6, #4
 8018b16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	dc03      	bgt.n	8018b24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018b1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	f340 834f 	ble.w	80191c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018b24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018b26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018b2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018b2e:	1e48      	subs	r0, r1, #1
 8018b30:	1e57      	subs	r7, r2, #1
 8018b32:	9b07      	ldr	r3, [sp, #28]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	f340 8178 	ble.w	8018e2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018b3a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018b3c:	142b      	asrs	r3, r5, #16
 8018b3e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018b42:	d406      	bmi.n	8018b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018b44:	4584      	cmp	ip, r0
 8018b46:	da04      	bge.n	8018b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	db02      	blt.n	8018b52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018b4c:	42bb      	cmp	r3, r7
 8018b4e:	f2c0 816d 	blt.w	8018e2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018b52:	f11c 0c01 	adds.w	ip, ip, #1
 8018b56:	f100 815b 	bmi.w	8018e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b5a:	4561      	cmp	r1, ip
 8018b5c:	f2c0 8158 	blt.w	8018e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b60:	3301      	adds	r3, #1
 8018b62:	f100 8155 	bmi.w	8018e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b66:	429a      	cmp	r2, r3
 8018b68:	f2c0 8152 	blt.w	8018e10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b6c:	9b07      	ldr	r3, [sp, #28]
 8018b6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018b70:	9317      	str	r3, [sp, #92]	; 0x5c
 8018b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	f340 8178 	ble.w	8018e6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018b7a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018b7c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018b80:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018b84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018b88:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018b8a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018b8e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018b90:	141b      	asrs	r3, r3, #16
 8018b92:	f100 81ba 	bmi.w	8018f0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b96:	f101 38ff 	add.w	r8, r1, #4294967295
 8018b9a:	4543      	cmp	r3, r8
 8018b9c:	f280 81b5 	bge.w	8018f0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018ba0:	f1bc 0f00 	cmp.w	ip, #0
 8018ba4:	f2c0 81b1 	blt.w	8018f0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018ba8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018bac:	45c4      	cmp	ip, r8
 8018bae:	f280 81ac 	bge.w	8018f0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018bb2:	b209      	sxth	r1, r1
 8018bb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018bb6:	fb0c 3301 	mla	r3, ip, r1, r3
 8018bba:	eb04 0803 	add.w	r8, r4, r3
 8018bbe:	5ce3      	ldrb	r3, [r4, r3]
 8018bc0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018bc4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018bc8:	2a00      	cmp	r2, #0
 8018bca:	f000 8193 	beq.w	8018ef4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8018bce:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018bd2:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018bd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8018bd8:	0e24      	lsrs	r4, r4, #24
 8018bda:	9412      	str	r4, [sp, #72]	; 0x48
 8018bdc:	b178      	cbz	r0, 8018bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018bde:	eb08 0c01 	add.w	ip, r8, r1
 8018be2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018be6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018bea:	9108      	str	r1, [sp, #32]
 8018bec:	0e09      	lsrs	r1, r1, #24
 8018bee:	9110      	str	r1, [sp, #64]	; 0x40
 8018bf0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018bf4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018bf8:	910c      	str	r1, [sp, #48]	; 0x30
 8018bfa:	0e09      	lsrs	r1, r1, #24
 8018bfc:	9113      	str	r1, [sp, #76]	; 0x4c
 8018bfe:	b292      	uxth	r2, r2
 8018c00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018c02:	b280      	uxth	r0, r0
 8018c04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c06:	fb02 f900 	mul.w	r9, r2, r0
 8018c0a:	0112      	lsls	r2, r2, #4
 8018c0c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018c10:	eba2 0809 	sub.w	r8, r2, r9
 8018c14:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018c18:	b280      	uxth	r0, r0
 8018c1a:	fa1f f888 	uxth.w	r8, r8
 8018c1e:	1a12      	subs	r2, r2, r0
 8018c20:	fb08 f101 	mul.w	r1, r8, r1
 8018c24:	b292      	uxth	r2, r2
 8018c26:	fb02 110e 	mla	r1, r2, lr, r1
 8018c2a:	fb00 1104 	mla	r1, r0, r4, r1
 8018c2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c30:	fb09 1104 	mla	r1, r9, r4, r1
 8018c34:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018c38:	2900      	cmp	r1, #0
 8018c3a:	f000 80de 	beq.w	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018c3e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018c42:	d01b      	beq.n	8018c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8018c44:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c4c:	fb0e fa0a 	mul.w	sl, lr, sl
 8018c50:	fb0e fe03 	mul.w	lr, lr, r3
 8018c54:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018c58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018c5c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018c60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018c64:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018c68:	4453      	add	r3, sl
 8018c6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018c6e:	0a1b      	lsrs	r3, r3, #8
 8018c70:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018c74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018c78:	ea43 030c 	orr.w	r3, r3, ip
 8018c7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c7e:	2cff      	cmp	r4, #255	; 0xff
 8018c80:	d021      	beq.n	8018cc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018c82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018c84:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018c88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c8a:	fb04 fb0b 	mul.w	fp, r4, fp
 8018c8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018c90:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c94:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c96:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c9a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c9e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018ca2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018ca6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018caa:	44de      	add	lr, fp
 8018cac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018cb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018cb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018cb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018cbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018cc0:	ea4e 040a 	orr.w	r4, lr, sl
 8018cc4:	940b      	str	r4, [sp, #44]	; 0x2c
 8018cc6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018cc8:	2cff      	cmp	r4, #255	; 0xff
 8018cca:	d021      	beq.n	8018d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018ccc:	9c08      	ldr	r4, [sp, #32]
 8018cce:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018cd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018cd4:	fb04 fb0b 	mul.w	fp, r4, fp
 8018cd8:	9c08      	ldr	r4, [sp, #32]
 8018cda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018cde:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018ce0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018ce4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018ce8:	fb04 fa0a 	mul.w	sl, r4, sl
 8018cec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018cf0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018cf4:	44de      	add	lr, fp
 8018cf6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018cfa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018d0a:	ea4e 040a 	orr.w	r4, lr, sl
 8018d0e:	9408      	str	r4, [sp, #32]
 8018d10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d12:	2cff      	cmp	r4, #255	; 0xff
 8018d14:	d021      	beq.n	8018d5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018d16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d18:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018d1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d1e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018d22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018d28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d2a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018d2e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018d32:	fb04 fa0a 	mul.w	sl, r4, sl
 8018d36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d3a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018d3e:	44de      	add	lr, fp
 8018d40:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018d44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018d48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018d50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018d54:	ea4e 040a 	orr.w	r4, lr, sl
 8018d58:	940c      	str	r4, [sp, #48]	; 0x30
 8018d5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018d5c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d64:	43c9      	mvns	r1, r1
 8018d66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018d6a:	9c08      	ldr	r4, [sp, #32]
 8018d6c:	b2c9      	uxtb	r1, r1
 8018d6e:	fb08 fc0c 	mul.w	ip, r8, ip
 8018d72:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018d76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018d7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d7c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018d80:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018d84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018d86:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018d8a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018d8e:	fb08 f80e 	mul.w	r8, r8, lr
 8018d92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d96:	fb02 8303 	mla	r3, r2, r3, r8
 8018d9a:	9a08      	ldr	r2, [sp, #32]
 8018d9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018da0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018da6:	fb00 330a 	mla	r3, r0, sl, r3
 8018daa:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018dae:	fb09 3900 	mla	r9, r9, r0, r3
 8018db2:	783b      	ldrb	r3, [r7, #0]
 8018db4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018db8:	fb03 f201 	mul.w	r2, r3, r1
 8018dbc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018dc0:	1c53      	adds	r3, r2, #1
 8018dc2:	ea4c 0c09 	orr.w	ip, ip, r9
 8018dc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018dca:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8018dce:	703b      	strb	r3, [r7, #0]
 8018dd0:	787b      	ldrb	r3, [r7, #1]
 8018dd2:	434b      	muls	r3, r1
 8018dd4:	1c5a      	adds	r2, r3, #1
 8018dd6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018dda:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018dde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018de2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018de6:	707b      	strb	r3, [r7, #1]
 8018de8:	78bb      	ldrb	r3, [r7, #2]
 8018dea:	4359      	muls	r1, r3
 8018dec:	1c4b      	adds	r3, r1, #1
 8018dee:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018df2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8018df6:	f887 c002 	strb.w	ip, [r7, #2]
 8018dfa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018dfc:	3703      	adds	r7, #3
 8018dfe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018e00:	441a      	add	r2, r3
 8018e02:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018e04:	441d      	add	r5, r3
 8018e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e08:	922f      	str	r2, [sp, #188]	; 0xbc
 8018e0a:	3b01      	subs	r3, #1
 8018e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e0e:	e6b0      	b.n	8018b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018e10:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018e12:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018e14:	441c      	add	r4, r3
 8018e16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018e18:	441d      	add	r5, r3
 8018e1a:	9b07      	ldr	r3, [sp, #28]
 8018e1c:	942f      	str	r4, [sp, #188]	; 0xbc
 8018e1e:	3b01      	subs	r3, #1
 8018e20:	9307      	str	r3, [sp, #28]
 8018e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e24:	3303      	adds	r3, #3
 8018e26:	930a      	str	r3, [sp, #40]	; 0x28
 8018e28:	e683      	b.n	8018b32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018e2a:	d026      	beq.n	8018e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8018e2c:	9b07      	ldr	r3, [sp, #28]
 8018e2e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018e30:	3b01      	subs	r3, #1
 8018e32:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018e34:	fb00 4003 	mla	r0, r0, r3, r4
 8018e38:	1400      	asrs	r0, r0, #16
 8018e3a:	f53f ae97 	bmi.w	8018b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018e3e:	3901      	subs	r1, #1
 8018e40:	4288      	cmp	r0, r1
 8018e42:	f6bf ae93 	bge.w	8018b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018e46:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8018e48:	fb01 5303 	mla	r3, r1, r3, r5
 8018e4c:	141b      	asrs	r3, r3, #16
 8018e4e:	f53f ae8d 	bmi.w	8018b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018e52:	3a01      	subs	r2, #1
 8018e54:	4293      	cmp	r3, r2
 8018e56:	f6bf ae89 	bge.w	8018b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018e60:	f103 0e03 	add.w	lr, r3, #3
 8018e64:	f1bb 0f00 	cmp.w	fp, #0
 8018e68:	dc6d      	bgt.n	8018f46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8018e6a:	9b07      	ldr	r3, [sp, #28]
 8018e6c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e76:	4423      	add	r3, r4
 8018e78:	930a      	str	r3, [sp, #40]	; 0x28
 8018e7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	f340 81a0 	ble.w	80191c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018e82:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8018e86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e88:	ee79 9aab 	vadd.f32	s19, s19, s23
 8018e8c:	eef0 6a48 	vmov.f32	s13, s16
 8018e90:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8018e94:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8018e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e9c:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8018ea0:	eef0 6a68 	vmov.f32	s13, s17
 8018ea4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ea8:	ee16 5a90 	vmov	r5, s13
 8018eac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018eb0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018eb4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018eb8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018ebc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018ec0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018ec4:	ee18 2a10 	vmov	r2, s16
 8018ec8:	eeb0 8a47 	vmov.f32	s16, s14
 8018ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ed0:	ee18 2a90 	vmov	r2, s17
 8018ed4:	9331      	str	r3, [sp, #196]	; 0xc4
 8018ed6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018ed8:	eef0 8a67 	vmov.f32	s17, s15
 8018edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ee0:	9332      	str	r3, [sp, #200]	; 0xc8
 8018ee2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ee4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018ee6:	3b01      	subs	r3, #1
 8018ee8:	9316      	str	r3, [sp, #88]	; 0x58
 8018eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018eec:	bf08      	it	eq
 8018eee:	4613      	moveq	r3, r2
 8018ef0:	9307      	str	r3, [sp, #28]
 8018ef2:	e610      	b.n	8018b16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018ef4:	2800      	cmp	r0, #0
 8018ef6:	f43f ae82 	beq.w	8018bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018efa:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018efe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f02:	9108      	str	r1, [sp, #32]
 8018f04:	0e09      	lsrs	r1, r1, #24
 8018f06:	9110      	str	r1, [sp, #64]	; 0x40
 8018f08:	e679      	b.n	8018bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018f0a:	f113 0801 	adds.w	r8, r3, #1
 8018f0e:	f53f af74 	bmi.w	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f12:	4541      	cmp	r1, r8
 8018f14:	f6ff af71 	blt.w	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f18:	f11c 0801 	adds.w	r8, ip, #1
 8018f1c:	f53f af6d 	bmi.w	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f20:	45c6      	cmp	lr, r8
 8018f22:	f6ff af6a 	blt.w	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f26:	b209      	sxth	r1, r1
 8018f28:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018f2c:	fa0f f38e 	sxth.w	r3, lr
 8018f30:	9100      	str	r1, [sp, #0]
 8018f32:	4639      	mov	r1, r7
 8018f34:	9301      	str	r3, [sp, #4]
 8018f36:	4633      	mov	r3, r6
 8018f38:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018f40:	f7ff fc70 	bl	8018824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018f44:	e759      	b.n	8018dfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018f46:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018f48:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018f4c:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018f4e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018f52:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018f54:	1427      	asrs	r7, r4, #16
 8018f56:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018f58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018f5c:	142b      	asrs	r3, r5, #16
 8018f5e:	fb01 7303 	mla	r3, r1, r3, r7
 8018f62:	18e7      	adds	r7, r4, r3
 8018f64:	5ce3      	ldrb	r3, [r4, r3]
 8018f66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018f6a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018f6e:	2a00      	cmp	r2, #0
 8018f70:	f000 811d 	beq.w	80191ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8018f74:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018f78:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018f7c:	940d      	str	r4, [sp, #52]	; 0x34
 8018f7e:	0e24      	lsrs	r4, r4, #24
 8018f80:	9414      	str	r4, [sp, #80]	; 0x50
 8018f82:	b170      	cbz	r0, 8018fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018f84:	eb07 0801 	add.w	r8, r7, r1
 8018f88:	5c79      	ldrb	r1, [r7, r1]
 8018f8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f8e:	9109      	str	r1, [sp, #36]	; 0x24
 8018f90:	0e09      	lsrs	r1, r1, #24
 8018f92:	9111      	str	r1, [sp, #68]	; 0x44
 8018f94:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018f98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f9c:	910e      	str	r1, [sp, #56]	; 0x38
 8018f9e:	0e09      	lsrs	r1, r1, #24
 8018fa0:	9115      	str	r1, [sp, #84]	; 0x54
 8018fa2:	b292      	uxth	r2, r2
 8018fa4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fa6:	b280      	uxth	r0, r0
 8018fa8:	fb02 f900 	mul.w	r9, r2, r0
 8018fac:	0112      	lsls	r2, r2, #4
 8018fae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018fb2:	eba2 0809 	sub.w	r8, r2, r9
 8018fb6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018fba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fbc:	b280      	uxth	r0, r0
 8018fbe:	fa1f f888 	uxth.w	r8, r8
 8018fc2:	1a09      	subs	r1, r1, r0
 8018fc4:	fb08 f202 	mul.w	r2, r8, r2
 8018fc8:	b289      	uxth	r1, r1
 8018fca:	fb01 220c 	mla	r2, r1, ip, r2
 8018fce:	fb00 2204 	mla	r2, r0, r4, r2
 8018fd2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018fd4:	fb09 2204 	mla	r2, r9, r4, r2
 8018fd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018fdc:	2a00      	cmp	r2, #0
 8018fde:	f000 80db 	beq.w	8019198 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8018fe2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018fe6:	d019      	beq.n	801901c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8018fe8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018fec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ff0:	fb0c fa0a 	mul.w	sl, ip, sl
 8018ff4:	fb0c fc03 	mul.w	ip, ip, r3
 8018ff8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018ffc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019000:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019004:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019008:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801900c:	4453      	add	r3, sl
 801900e:	0a3f      	lsrs	r7, r7, #8
 8019010:	0a1b      	lsrs	r3, r3, #8
 8019012:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019016:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801901a:	433b      	orrs	r3, r7
 801901c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801901e:	2cff      	cmp	r4, #255	; 0xff
 8019020:	d020      	beq.n	8019064 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8019022:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019024:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019028:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801902a:	4367      	muls	r7, r4
 801902c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801902e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019032:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019036:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019038:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801903c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019040:	fb04 fa0a 	mul.w	sl, r4, sl
 8019044:	44bc      	add	ip, r7
 8019046:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801904a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801904e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019056:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801905a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801905e:	ea4c 040a 	orr.w	r4, ip, sl
 8019062:	940d      	str	r4, [sp, #52]	; 0x34
 8019064:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019066:	2cff      	cmp	r4, #255	; 0xff
 8019068:	d020      	beq.n	80190ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801906a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801906c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019070:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019072:	4367      	muls	r7, r4
 8019074:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019076:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801907a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801907e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019080:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019084:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019088:	fb04 fa0a 	mul.w	sl, r4, sl
 801908c:	44bc      	add	ip, r7
 801908e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019096:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801909a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801909e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190a6:	ea4c 040a 	orr.w	r4, ip, sl
 80190aa:	9409      	str	r4, [sp, #36]	; 0x24
 80190ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80190ae:	2cff      	cmp	r4, #255	; 0xff
 80190b0:	d020      	beq.n	80190f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80190b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80190b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80190b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80190ba:	4367      	muls	r7, r4
 80190bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80190be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80190c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80190c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80190c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80190cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80190d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80190d4:	44bc      	add	ip, r7
 80190d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80190da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80190de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80190e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80190e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190ee:	ea4c 040a 	orr.w	r4, ip, sl
 80190f2:	940e      	str	r4, [sp, #56]	; 0x38
 80190f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80190f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80190fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80190fe:	43d2      	mvns	r2, r2
 8019100:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019104:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019106:	b2d2      	uxtb	r2, r2
 8019108:	fb08 f707 	mul.w	r7, r8, r7
 801910c:	fb01 770c 	mla	r7, r1, ip, r7
 8019110:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019114:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019116:	fb00 770c 	mla	r7, r0, ip, r7
 801911a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801911e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019120:	fb09 770c 	mla	r7, r9, ip, r7
 8019124:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019128:	fb08 f80c 	mul.w	r8, r8, ip
 801912c:	0a3f      	lsrs	r7, r7, #8
 801912e:	fb01 8303 	mla	r3, r1, r3, r8
 8019132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019134:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019138:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801913c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801913e:	fb00 330a 	mla	r3, r0, sl, r3
 8019142:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8019146:	fb09 3c0c 	mla	ip, r9, ip, r3
 801914a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801914e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019152:	fb03 f102 	mul.w	r1, r3, r2
 8019156:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801915a:	1c4b      	adds	r3, r1, #1
 801915c:	ea47 070c 	orr.w	r7, r7, ip
 8019160:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019164:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019168:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801916c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8019170:	4353      	muls	r3, r2
 8019172:	1c59      	adds	r1, r3, #1
 8019174:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019178:	0a3b      	lsrs	r3, r7, #8
 801917a:	0c3f      	lsrs	r7, r7, #16
 801917c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019180:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019184:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019188:	435a      	muls	r2, r3
 801918a:	1c53      	adds	r3, r2, #1
 801918c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019190:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8019194:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019198:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801919a:	f10e 0e03 	add.w	lr, lr, #3
 801919e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80191a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80191a4:	441a      	add	r2, r3
 80191a6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80191a8:	922f      	str	r2, [sp, #188]	; 0xbc
 80191aa:	441d      	add	r5, r3
 80191ac:	e65a      	b.n	8018e64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80191ae:	2800      	cmp	r0, #0
 80191b0:	f43f aef7 	beq.w	8018fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80191b4:	5c79      	ldrb	r1, [r7, r1]
 80191b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80191ba:	9109      	str	r1, [sp, #36]	; 0x24
 80191bc:	0e09      	lsrs	r1, r1, #24
 80191be:	9111      	str	r1, [sp, #68]	; 0x44
 80191c0:	e6ef      	b.n	8018fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80191c2:	b01b      	add	sp, #108	; 0x6c
 80191c4:	ecbd 8b0a 	vpop	{d8-d12}
 80191c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80191cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d0:	b08d      	sub	sp, #52	; 0x34
 80191d2:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80191d6:	9103      	str	r1, [sp, #12]
 80191d8:	fb07 5803 	mla	r8, r7, r3, r5
 80191dc:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80191e0:	9803      	ldr	r0, [sp, #12]
 80191e2:	2f00      	cmp	r7, #0
 80191e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80191e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80191ea:	9903      	ldr	r1, [sp, #12]
 80191ec:	9c03      	ldr	r4, [sp, #12]
 80191ee:	eb02 0608 	add.w	r6, r2, r8
 80191f2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80191f6:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80191fa:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80191fe:	7809      	ldrb	r1, [r1, #0]
 8019200:	7840      	ldrb	r0, [r0, #1]
 8019202:	78a4      	ldrb	r4, [r4, #2]
 8019204:	db51      	blt.n	80192aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8019206:	45be      	cmp	lr, r7
 8019208:	dd4f      	ble.n	80192aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801920a:	2d00      	cmp	r5, #0
 801920c:	db49      	blt.n	80192a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801920e:	42ab      	cmp	r3, r5
 8019210:	dd47      	ble.n	80192a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8019212:	f812 2008 	ldrb.w	r2, [r2, r8]
 8019216:	9204      	str	r2, [sp, #16]
 8019218:	7872      	ldrb	r2, [r6, #1]
 801921a:	9205      	str	r2, [sp, #20]
 801921c:	78b2      	ldrb	r2, [r6, #2]
 801921e:	9206      	str	r2, [sp, #24]
 8019220:	1c6a      	adds	r2, r5, #1
 8019222:	d449      	bmi.n	80192b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8019224:	4293      	cmp	r3, r2
 8019226:	dd47      	ble.n	80192b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8019228:	f1bc 0f00 	cmp.w	ip, #0
 801922c:	d044      	beq.n	80192b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801922e:	7972      	ldrb	r2, [r6, #5]
 8019230:	f896 b003 	ldrb.w	fp, [r6, #3]
 8019234:	f896 a004 	ldrb.w	sl, [r6, #4]
 8019238:	9201      	str	r2, [sp, #4]
 801923a:	3701      	adds	r7, #1
 801923c:	d444      	bmi.n	80192c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801923e:	45be      	cmp	lr, r7
 8019240:	dd42      	ble.n	80192c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8019242:	f1b9 0f00 	cmp.w	r9, #0
 8019246:	f000 80c1 	beq.w	80193cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801924a:	2d00      	cmp	r5, #0
 801924c:	db38      	blt.n	80192c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801924e:	42ab      	cmp	r3, r5
 8019250:	dd36      	ble.n	80192c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8019252:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019256:	f816 8002 	ldrb.w	r8, [r6, r2]
 801925a:	2203      	movs	r2, #3
 801925c:	fb03 6702 	mla	r7, r3, r2, r6
 8019260:	fb03 6202 	mla	r2, r3, r2, r6
 8019264:	787f      	ldrb	r7, [r7, #1]
 8019266:	f892 e002 	ldrb.w	lr, [r2, #2]
 801926a:	9702      	str	r7, [sp, #8]
 801926c:	3501      	adds	r5, #1
 801926e:	d432      	bmi.n	80192d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8019270:	42ab      	cmp	r3, r5
 8019272:	dd30      	ble.n	80192d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8019274:	f1bc 0f00 	cmp.w	ip, #0
 8019278:	d031      	beq.n	80192de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801927a:	2703      	movs	r7, #3
 801927c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8019280:	5cb5      	ldrb	r5, [r6, r2]
 8019282:	fb03 6207 	mla	r2, r3, r7, r6
 8019286:	fb03 6307 	mla	r3, r3, r7, r6
 801928a:	7912      	ldrb	r2, [r2, #4]
 801928c:	795e      	ldrb	r6, [r3, #5]
 801928e:	f1bc 0f0f 	cmp.w	ip, #15
 8019292:	d927      	bls.n	80192e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8019294:	4b53      	ldr	r3, [pc, #332]	; (80193e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8019296:	f240 1157 	movw	r1, #343	; 0x157
 801929a:	4a53      	ldr	r2, [pc, #332]	; (80193e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801929c:	4853      	ldr	r0, [pc, #332]	; (80193ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801929e:	f003 f84d 	bl	801c33c <__assert_func>
 80192a2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80192a6:	9104      	str	r1, [sp, #16]
 80192a8:	e7ba      	b.n	8019220 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80192aa:	9401      	str	r4, [sp, #4]
 80192ac:	4682      	mov	sl, r0
 80192ae:	468b      	mov	fp, r1
 80192b0:	9104      	str	r1, [sp, #16]
 80192b2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80192b6:	e7c0      	b.n	801923a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80192b8:	9401      	str	r4, [sp, #4]
 80192ba:	4682      	mov	sl, r0
 80192bc:	468b      	mov	fp, r1
 80192be:	e7bc      	b.n	801923a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80192c0:	46a6      	mov	lr, r4
 80192c2:	9002      	str	r0, [sp, #8]
 80192c4:	4688      	mov	r8, r1
 80192c6:	e7d1      	b.n	801926c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80192c8:	4626      	mov	r6, r4
 80192ca:	4602      	mov	r2, r0
 80192cc:	460d      	mov	r5, r1
 80192ce:	46a6      	mov	lr, r4
 80192d0:	9002      	str	r0, [sp, #8]
 80192d2:	4688      	mov	r8, r1
 80192d4:	e7db      	b.n	801928e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80192d6:	4626      	mov	r6, r4
 80192d8:	4602      	mov	r2, r0
 80192da:	460d      	mov	r5, r1
 80192dc:	e7d7      	b.n	801928e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80192de:	4626      	mov	r6, r4
 80192e0:	4602      	mov	r2, r0
 80192e2:	460d      	mov	r5, r1
 80192e4:	f1b9 0f0f 	cmp.w	r9, #15
 80192e8:	d8d4      	bhi.n	8019294 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80192ea:	fa1f f38c 	uxth.w	r3, ip
 80192ee:	fa1f fc89 	uxth.w	ip, r9
 80192f2:	fb03 f70c 	mul.w	r7, r3, ip
 80192f6:	011b      	lsls	r3, r3, #4
 80192f8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80192fc:	9707      	str	r7, [sp, #28]
 80192fe:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019302:	fa1f fc8c 	uxth.w	ip, ip
 8019306:	eba7 070c 	sub.w	r7, r7, ip
 801930a:	b2bf      	uxth	r7, r7
 801930c:	9709      	str	r7, [sp, #36]	; 0x24
 801930e:	9f07      	ldr	r7, [sp, #28]
 8019310:	1bdb      	subs	r3, r3, r7
 8019312:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8019316:	b29b      	uxth	r3, r3
 8019318:	9708      	str	r7, [sp, #32]
 801931a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801931c:	930a      	str	r3, [sp, #40]	; 0x28
 801931e:	ea6f 0907 	mvn.w	r9, r7
 8019322:	fb03 fb0b 	mul.w	fp, r3, fp
 8019326:	9f04      	ldr	r7, [sp, #16]
 8019328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801932a:	fa5f f989 	uxtb.w	r9, r9
 801932e:	fb03 bb07 	mla	fp, r3, r7, fp
 8019332:	9f07      	ldr	r7, [sp, #28]
 8019334:	fb11 f109 	smulbb	r1, r1, r9
 8019338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801933a:	fb0c b808 	mla	r8, ip, r8, fp
 801933e:	fb10 f009 	smulbb	r0, r0, r9
 8019342:	fb14 f409 	smulbb	r4, r4, r9
 8019346:	fb07 8805 	mla	r8, r7, r5, r8
 801934a:	9d08      	ldr	r5, [sp, #32]
 801934c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801934e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8019352:	fb08 1805 	mla	r8, r8, r5, r1
 8019356:	9d05      	ldr	r5, [sp, #20]
 8019358:	fa1f f888 	uxth.w	r8, r8
 801935c:	f108 0101 	add.w	r1, r8, #1
 8019360:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019364:	9903      	ldr	r1, [sp, #12]
 8019366:	ea4f 2828 	mov.w	r8, r8, asr #8
 801936a:	f881 8000 	strb.w	r8, [r1]
 801936e:	fb03 f10a 	mul.w	r1, r3, sl
 8019372:	fb07 1105 	mla	r1, r7, r5, r1
 8019376:	9d02      	ldr	r5, [sp, #8]
 8019378:	fb0c 1105 	mla	r1, ip, r5, r1
 801937c:	9d07      	ldr	r5, [sp, #28]
 801937e:	fb05 1102 	mla	r1, r5, r2, r1
 8019382:	9a08      	ldr	r2, [sp, #32]
 8019384:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019388:	fb01 0102 	mla	r1, r1, r2, r0
 801938c:	9a03      	ldr	r2, [sp, #12]
 801938e:	b289      	uxth	r1, r1
 8019390:	1c48      	adds	r0, r1, #1
 8019392:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8019396:	1209      	asrs	r1, r1, #8
 8019398:	7051      	strb	r1, [r2, #1]
 801939a:	9a01      	ldr	r2, [sp, #4]
 801939c:	4353      	muls	r3, r2
 801939e:	9a06      	ldr	r2, [sp, #24]
 80193a0:	fb07 3702 	mla	r7, r7, r2, r3
 80193a4:	9b08      	ldr	r3, [sp, #32]
 80193a6:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80193aa:	fb05 c606 	mla	r6, r5, r6, ip
 80193ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80193b2:	fb06 4603 	mla	r6, r6, r3, r4
 80193b6:	9b03      	ldr	r3, [sp, #12]
 80193b8:	b2b6      	uxth	r6, r6
 80193ba:	f106 0e01 	add.w	lr, r6, #1
 80193be:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80193c2:	1236      	asrs	r6, r6, #8
 80193c4:	709e      	strb	r6, [r3, #2]
 80193c6:	b00d      	add	sp, #52	; 0x34
 80193c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193cc:	f1bc 0f0f 	cmp.w	ip, #15
 80193d0:	f63f af60 	bhi.w	8019294 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80193d4:	4626      	mov	r6, r4
 80193d6:	4602      	mov	r2, r0
 80193d8:	460d      	mov	r5, r1
 80193da:	46a6      	mov	lr, r4
 80193dc:	9002      	str	r0, [sp, #8]
 80193de:	4688      	mov	r8, r1
 80193e0:	e783      	b.n	80192ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80193e2:	bf00      	nop
 80193e4:	08020637 	.word	0x08020637
 80193e8:	08020aee 	.word	0x08020aee
 80193ec:	080206bf 	.word	0x080206bf

080193f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80193f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f4:	ed2d 8b08 	vpush	{d8-d11}
 80193f8:	b09f      	sub	sp, #124	; 0x7c
 80193fa:	eeb0 aa40 	vmov.f32	s20, s0
 80193fe:	eef0 9a60 	vmov.f32	s19, s1
 8019402:	920e      	str	r2, [sp, #56]	; 0x38
 8019404:	eeb0 9a41 	vmov.f32	s18, s2
 8019408:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801940a:	eeb0 8a62 	vmov.f32	s16, s5
 801940e:	9307      	str	r3, [sp, #28]
 8019410:	eef0 8a43 	vmov.f32	s17, s6
 8019414:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8019418:	eef0 ba44 	vmov.f32	s23, s8
 801941c:	901d      	str	r0, [sp, #116]	; 0x74
 801941e:	eeb0 ba64 	vmov.f32	s22, s9
 8019422:	930c      	str	r3, [sp, #48]	; 0x30
 8019424:	eef0 aa45 	vmov.f32	s21, s10
 8019428:	6850      	ldr	r0, [r2, #4]
 801942a:	910b      	str	r1, [sp, #44]	; 0x2c
 801942c:	6812      	ldr	r2, [r2, #0]
 801942e:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8019432:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8019436:	fb00 1303 	mla	r3, r0, r3, r1
 801943a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801943e:	18d3      	adds	r3, r2, r3
 8019440:	9308      	str	r3, [sp, #32]
 8019442:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	930a      	str	r3, [sp, #40]	; 0x28
 8019448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801944a:	43db      	mvns	r3, r3
 801944c:	b2db      	uxtb	r3, r3
 801944e:	9309      	str	r3, [sp, #36]	; 0x24
 8019450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019452:	2b00      	cmp	r3, #0
 8019454:	dc03      	bgt.n	801945e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019458:	2b00      	cmp	r3, #0
 801945a:	f340 81f5 	ble.w	8019848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801945e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019460:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019464:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019468:	1e48      	subs	r0, r1, #1
 801946a:	1e54      	subs	r4, r2, #1
 801946c:	9b07      	ldr	r3, [sp, #28]
 801946e:	2b00      	cmp	r3, #0
 8019470:	f340 80d5 	ble.w	801961e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8019474:	ea5f 452a 	movs.w	r5, sl, asr #16
 8019478:	ea4f 4328 	mov.w	r3, r8, asr #16
 801947c:	d406      	bmi.n	801948c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801947e:	4285      	cmp	r5, r0
 8019480:	da04      	bge.n	801948c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019482:	2b00      	cmp	r3, #0
 8019484:	db02      	blt.n	801948c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019486:	42a3      	cmp	r3, r4
 8019488:	f2c0 80ca 	blt.w	8019620 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801948c:	3501      	adds	r5, #1
 801948e:	f100 80bb 	bmi.w	8019608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019492:	42a9      	cmp	r1, r5
 8019494:	f2c0 80b8 	blt.w	8019608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019498:	3301      	adds	r3, #1
 801949a:	f100 80b5 	bmi.w	8019608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801949e:	429a      	cmp	r2, r3
 80194a0:	f2c0 80b2 	blt.w	8019608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80194a4:	9b07      	ldr	r3, [sp, #28]
 80194a6:	9d08      	ldr	r5, [sp, #32]
 80194a8:	930d      	str	r3, [sp, #52]	; 0x34
 80194aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	f340 80d6 	ble.w	801965e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80194b2:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80194b4:	ea4f 4428 	mov.w	r4, r8, asr #16
 80194b8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80194ba:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80194be:	68c6      	ldr	r6, [r0, #12]
 80194c0:	ea5f 402a 	movs.w	r0, sl, asr #16
 80194c4:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80194c8:	689b      	ldr	r3, [r3, #8]
 80194ca:	f100 810f 	bmi.w	80196ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80194ce:	1e5f      	subs	r7, r3, #1
 80194d0:	42b8      	cmp	r0, r7
 80194d2:	f280 810b 	bge.w	80196ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80194d6:	2c00      	cmp	r4, #0
 80194d8:	f2c0 8108 	blt.w	80196ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80194dc:	1e77      	subs	r7, r6, #1
 80194de:	42bc      	cmp	r4, r7
 80194e0:	f280 8104 	bge.w	80196ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80194e4:	b21b      	sxth	r3, r3
 80194e6:	fb04 0003 	mla	r0, r4, r3, r0
 80194ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80194ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80194f0:	1826      	adds	r6, r4, r0
 80194f2:	5c24      	ldrb	r4, [r4, r0]
 80194f4:	78b7      	ldrb	r7, [r6, #2]
 80194f6:	7870      	ldrb	r0, [r6, #1]
 80194f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80194fa:	7977      	ldrb	r7, [r6, #5]
 80194fc:	f896 e003 	ldrb.w	lr, [r6, #3]
 8019500:	f896 c004 	ldrb.w	ip, [r6, #4]
 8019504:	9710      	str	r7, [sp, #64]	; 0x40
 8019506:	b1c9      	cbz	r1, 801953c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019508:	f04f 0b03 	mov.w	fp, #3
 801950c:	f06f 0904 	mvn.w	r9, #4
 8019510:	3605      	adds	r6, #5
 8019512:	fb13 930b 	smlabb	r3, r3, fp, r9
 8019516:	eb06 0b03 	add.w	fp, r6, r3
 801951a:	5cf3      	ldrb	r3, [r6, r3]
 801951c:	9311      	str	r3, [sp, #68]	; 0x44
 801951e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8019522:	9313      	str	r3, [sp, #76]	; 0x4c
 8019524:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019528:	9315      	str	r3, [sp, #84]	; 0x54
 801952a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801952e:	9312      	str	r3, [sp, #72]	; 0x48
 8019530:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8019534:	9314      	str	r3, [sp, #80]	; 0x50
 8019536:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801953a:	9316      	str	r3, [sp, #88]	; 0x58
 801953c:	b292      	uxth	r2, r2
 801953e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8019540:	b289      	uxth	r1, r1
 8019542:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019546:	fb02 f601 	mul.w	r6, r2, r1
 801954a:	0112      	lsls	r2, r2, #4
 801954c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8019550:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8019554:	1b92      	subs	r2, r2, r6
 8019556:	b289      	uxth	r1, r1
 8019558:	b292      	uxth	r2, r2
 801955a:	eba9 0901 	sub.w	r9, r9, r1
 801955e:	fb02 fe0e 	mul.w	lr, r2, lr
 8019562:	fa1f f989 	uxth.w	r9, r9
 8019566:	fb02 fc0c 	mul.w	ip, r2, ip
 801956a:	fb09 e404 	mla	r4, r9, r4, lr
 801956e:	f895 e000 	ldrb.w	lr, [r5]
 8019572:	fb09 c000 	mla	r0, r9, r0, ip
 8019576:	fb01 4407 	mla	r4, r1, r7, r4
 801957a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801957c:	fb06 4407 	mla	r4, r6, r7, r4
 8019580:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019582:	fb1e fe07 	smulbb	lr, lr, r7
 8019586:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801958a:	fb04 e403 	mla	r4, r4, r3, lr
 801958e:	b2a4      	uxth	r4, r4
 8019590:	f104 0e01 	add.w	lr, r4, #1
 8019594:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8019598:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801959a:	fb01 0004 	mla	r0, r1, r4, r0
 801959e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80195a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80195a4:	fb06 0004 	mla	r0, r6, r4, r0
 80195a8:	786c      	ldrb	r4, [r5, #1]
 80195aa:	f885 e000 	strb.w	lr, [r5]
 80195ae:	fb14 f407 	smulbb	r4, r4, r7
 80195b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195b6:	fb00 4003 	mla	r0, r0, r3, r4
 80195ba:	b280      	uxth	r0, r0
 80195bc:	1c44      	adds	r4, r0, #1
 80195be:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80195c2:	1200      	asrs	r0, r0, #8
 80195c4:	7068      	strb	r0, [r5, #1]
 80195c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80195c8:	4342      	muls	r2, r0
 80195ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80195cc:	fb09 2200 	mla	r2, r9, r0, r2
 80195d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80195d2:	fb01 2100 	mla	r1, r1, r0, r2
 80195d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80195d8:	fb06 1602 	mla	r6, r6, r2, r1
 80195dc:	78a9      	ldrb	r1, [r5, #2]
 80195de:	fb11 f107 	smulbb	r1, r1, r7
 80195e2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80195e6:	fb06 1303 	mla	r3, r6, r3, r1
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	1c5e      	adds	r6, r3, #1
 80195ee:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80195f2:	121b      	asrs	r3, r3, #8
 80195f4:	70ab      	strb	r3, [r5, #2]
 80195f6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80195f8:	3503      	adds	r5, #3
 80195fa:	449a      	add	sl, r3
 80195fc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80195fe:	4498      	add	r8, r3
 8019600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019602:	3b01      	subs	r3, #1
 8019604:	930d      	str	r3, [sp, #52]	; 0x34
 8019606:	e750      	b.n	80194aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8019608:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801960a:	449a      	add	sl, r3
 801960c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801960e:	4498      	add	r8, r3
 8019610:	9b07      	ldr	r3, [sp, #28]
 8019612:	3b01      	subs	r3, #1
 8019614:	9307      	str	r3, [sp, #28]
 8019616:	9b08      	ldr	r3, [sp, #32]
 8019618:	3303      	adds	r3, #3
 801961a:	9308      	str	r3, [sp, #32]
 801961c:	e726      	b.n	801946c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801961e:	d026      	beq.n	801966e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019620:	9b07      	ldr	r3, [sp, #28]
 8019622:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8019624:	3b01      	subs	r3, #1
 8019626:	fb00 a003 	mla	r0, r0, r3, sl
 801962a:	1400      	asrs	r0, r0, #16
 801962c:	f53f af3a 	bmi.w	80194a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019630:	3901      	subs	r1, #1
 8019632:	4288      	cmp	r0, r1
 8019634:	f6bf af36 	bge.w	80194a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019638:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801963a:	fb01 8303 	mla	r3, r1, r3, r8
 801963e:	141b      	asrs	r3, r3, #16
 8019640:	f53f af30 	bmi.w	80194a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8019644:	3a01      	subs	r2, #1
 8019646:	4293      	cmp	r3, r2
 8019648:	f6bf af2c 	bge.w	80194a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801964c:	9b08      	ldr	r3, [sp, #32]
 801964e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019652:	1cdd      	adds	r5, r3, #3
 8019654:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8019658:	f1bc 0f00 	cmp.w	ip, #0
 801965c:	dc5f      	bgt.n	801971e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801965e:	9b07      	ldr	r3, [sp, #28]
 8019660:	9a08      	ldr	r2, [sp, #32]
 8019662:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019666:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801966a:	441a      	add	r2, r3
 801966c:	9208      	str	r2, [sp, #32]
 801966e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019670:	2b00      	cmp	r3, #0
 8019672:	f340 80e9 	ble.w	8019848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8019676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801967a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801967c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019680:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019684:	eef0 6a48 	vmov.f32	s13, s16
 8019688:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801968c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019690:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019694:	ee16 aa90 	vmov	sl, s13
 8019698:	eef0 6a68 	vmov.f32	s13, s17
 801969c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80196a0:	ee16 8a90 	vmov	r8, s13
 80196a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80196a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80196ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 80196b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80196b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80196b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80196bc:	ee18 2a10 	vmov	r2, s16
 80196c0:	eeb0 8a47 	vmov.f32	s16, s14
 80196c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80196c8:	ee18 2a90 	vmov	r2, s17
 80196cc:	9333      	str	r3, [sp, #204]	; 0xcc
 80196ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80196d0:	eef0 8a67 	vmov.f32	s17, s15
 80196d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80196d8:	9334      	str	r3, [sp, #208]	; 0xd0
 80196da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196de:	3b01      	subs	r3, #1
 80196e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80196e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80196e4:	bf08      	it	eq
 80196e6:	4613      	moveq	r3, r2
 80196e8:	9307      	str	r3, [sp, #28]
 80196ea:	e6b1      	b.n	8019450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80196ec:	1c47      	adds	r7, r0, #1
 80196ee:	d482      	bmi.n	80195f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80196f0:	42bb      	cmp	r3, r7
 80196f2:	db80      	blt.n	80195f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80196f4:	1c67      	adds	r7, r4, #1
 80196f6:	f53f af7e 	bmi.w	80195f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80196fa:	42be      	cmp	r6, r7
 80196fc:	f6ff af7b 	blt.w	80195f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019700:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019702:	b236      	sxth	r6, r6
 8019704:	9001      	str	r0, [sp, #4]
 8019706:	b21b      	sxth	r3, r3
 8019708:	9600      	str	r6, [sp, #0]
 801970a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801970c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8019710:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8019714:	4629      	mov	r1, r5
 8019716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019718:	f7ff fd58 	bl	80191cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801971c:	e76b      	b.n	80195f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801971e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8019720:	ea4f 402a 	mov.w	r0, sl, asr #16
 8019724:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8019728:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801972c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8019730:	ea4f 4128 	mov.w	r1, r8, asr #16
 8019734:	fb07 0101 	mla	r1, r7, r1, r0
 8019738:	980a      	ldr	r0, [sp, #40]	; 0x28
 801973a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801973e:	1844      	adds	r4, r0, r1
 8019740:	5c40      	ldrb	r0, [r0, r1]
 8019742:	78a6      	ldrb	r6, [r4, #2]
 8019744:	7861      	ldrb	r1, [r4, #1]
 8019746:	960f      	str	r6, [sp, #60]	; 0x3c
 8019748:	78e6      	ldrb	r6, [r4, #3]
 801974a:	910d      	str	r1, [sp, #52]	; 0x34
 801974c:	9610      	str	r6, [sp, #64]	; 0x40
 801974e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8019752:	f894 b005 	ldrb.w	fp, [r4, #5]
 8019756:	b192      	cbz	r2, 801977e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8019758:	f06f 0604 	mvn.w	r6, #4
 801975c:	2103      	movs	r1, #3
 801975e:	3405      	adds	r4, #5
 8019760:	fb17 6701 	smlabb	r7, r7, r1, r6
 8019764:	19e6      	adds	r6, r4, r7
 8019766:	5de4      	ldrb	r4, [r4, r7]
 8019768:	9417      	str	r4, [sp, #92]	; 0x5c
 801976a:	7874      	ldrb	r4, [r6, #1]
 801976c:	9419      	str	r4, [sp, #100]	; 0x64
 801976e:	78b4      	ldrb	r4, [r6, #2]
 8019770:	941b      	str	r4, [sp, #108]	; 0x6c
 8019772:	78f4      	ldrb	r4, [r6, #3]
 8019774:	9418      	str	r4, [sp, #96]	; 0x60
 8019776:	7934      	ldrb	r4, [r6, #4]
 8019778:	941a      	str	r4, [sp, #104]	; 0x68
 801977a:	7974      	ldrb	r4, [r6, #5]
 801977c:	941c      	str	r4, [sp, #112]	; 0x70
 801977e:	b29b      	uxth	r3, r3
 8019780:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019782:	b292      	uxth	r2, r2
 8019784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019786:	3503      	adds	r5, #3
 8019788:	f10c 3cff 	add.w	ip, ip, #4294967295
 801978c:	fb03 f402 	mul.w	r4, r3, r2
 8019790:	011b      	lsls	r3, r3, #4
 8019792:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019796:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801979a:	1b1b      	subs	r3, r3, r4
 801979c:	b292      	uxth	r2, r2
 801979e:	b29b      	uxth	r3, r3
 80197a0:	1ab6      	subs	r6, r6, r2
 80197a2:	435f      	muls	r7, r3
 80197a4:	b2b6      	uxth	r6, r6
 80197a6:	fb03 f909 	mul.w	r9, r3, r9
 80197aa:	fb03 fb0b 	mul.w	fp, r3, fp
 80197ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197b0:	fb06 7000 	mla	r0, r6, r0, r7
 80197b4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80197b6:	fb06 bb03 	mla	fp, r6, r3, fp
 80197ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80197bc:	fb02 0007 	mla	r0, r2, r7, r0
 80197c0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80197c2:	fb02 bb03 	mla	fp, r2, r3, fp
 80197c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80197c8:	fb04 0007 	mla	r0, r4, r7, r0
 80197cc:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80197d0:	fb17 f701 	smulbb	r7, r7, r1
 80197d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80197d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80197da:	fb00 700e 	mla	r0, r0, lr, r7
 80197de:	fb06 9101 	mla	r1, r6, r1, r9
 80197e2:	b280      	uxth	r0, r0
 80197e4:	1c47      	adds	r7, r0, #1
 80197e6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80197ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80197ec:	1200      	asrs	r0, r0, #8
 80197ee:	f805 0c06 	strb.w	r0, [r5, #-6]
 80197f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80197f4:	fb02 1100 	mla	r1, r2, r0, r1
 80197f8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80197fa:	fb04 1100 	mla	r1, r4, r0, r1
 80197fe:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8019802:	fb04 b403 	mla	r4, r4, r3, fp
 8019806:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801980a:	fb10 f007 	smulbb	r0, r0, r7
 801980e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019812:	fb13 f307 	smulbb	r3, r3, r7
 8019816:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801981a:	fb01 010e 	mla	r1, r1, lr, r0
 801981e:	fb04 340e 	mla	r4, r4, lr, r3
 8019822:	b289      	uxth	r1, r1
 8019824:	b2a4      	uxth	r4, r4
 8019826:	1c48      	adds	r0, r1, #1
 8019828:	1c63      	adds	r3, r4, #1
 801982a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801982e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8019832:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019834:	1209      	asrs	r1, r1, #8
 8019836:	1224      	asrs	r4, r4, #8
 8019838:	449a      	add	sl, r3
 801983a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801983c:	f805 1c05 	strb.w	r1, [r5, #-5]
 8019840:	f805 4c04 	strb.w	r4, [r5, #-4]
 8019844:	4498      	add	r8, r3
 8019846:	e707      	b.n	8019658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8019848:	b01f      	add	sp, #124	; 0x7c
 801984a:	ecbd 8b08 	vpop	{d8-d11}
 801984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8019854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019858:	b085      	sub	sp, #20
 801985a:	784d      	ldrb	r5, [r1, #1]
 801985c:	788e      	ldrb	r6, [r1, #2]
 801985e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8019862:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8019866:	9403      	str	r4, [sp, #12]
 8019868:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801986c:	780c      	ldrb	r4, [r1, #0]
 801986e:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8019872:	fb07 ce03 	mla	lr, r7, r3, ip
 8019876:	2f00      	cmp	r7, #0
 8019878:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801987c:	eb02 0b0e 	add.w	fp, r2, lr
 8019880:	db56      	blt.n	8019930 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8019882:	45b9      	cmp	r9, r7
 8019884:	dd54      	ble.n	8019930 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8019886:	f1bc 0f00 	cmp.w	ip, #0
 801988a:	db4d      	blt.n	8019928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801988c:	4563      	cmp	r3, ip
 801988e:	dd4b      	ble.n	8019928 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8019890:	f812 200e 	ldrb.w	r2, [r2, lr]
 8019894:	9200      	str	r2, [sp, #0]
 8019896:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801989a:	9201      	str	r2, [sp, #4]
 801989c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80198a0:	9202      	str	r2, [sp, #8]
 80198a2:	f11c 0201 	adds.w	r2, ip, #1
 80198a6:	d44a      	bmi.n	801993e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80198a8:	4293      	cmp	r3, r2
 80198aa:	dd48      	ble.n	801993e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80198ac:	2800      	cmp	r0, #0
 80198ae:	d046      	beq.n	801993e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80198b0:	f89b e003 	ldrb.w	lr, [fp, #3]
 80198b4:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80198b8:	f89b a005 	ldrb.w	sl, [fp, #5]
 80198bc:	3701      	adds	r7, #1
 80198be:	d446      	bmi.n	801994e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80198c0:	45b9      	cmp	r9, r7
 80198c2:	dd44      	ble.n	801994e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80198c4:	9a03      	ldr	r2, [sp, #12]
 80198c6:	2a00      	cmp	r2, #0
 80198c8:	d045      	beq.n	8019956 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80198ca:	f1bc 0f00 	cmp.w	ip, #0
 80198ce:	db3a      	blt.n	8019946 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80198d0:	4563      	cmp	r3, ip
 80198d2:	dd38      	ble.n	8019946 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80198d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80198d8:	f04f 0903 	mov.w	r9, #3
 80198dc:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80198e0:	fb03 b209 	mla	r2, r3, r9, fp
 80198e4:	fb03 b909 	mla	r9, r3, r9, fp
 80198e8:	7852      	ldrb	r2, [r2, #1]
 80198ea:	f899 9002 	ldrb.w	r9, [r9, #2]
 80198ee:	f11c 0c01 	adds.w	ip, ip, #1
 80198f2:	d40d      	bmi.n	8019910 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80198f4:	4563      	cmp	r3, ip
 80198f6:	dd0b      	ble.n	8019910 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80198f8:	b160      	cbz	r0, 8019914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80198fa:	2603      	movs	r6, #3
 80198fc:	fb13 6406 	smlabb	r4, r3, r6, r6
 8019900:	fb03 b506 	mla	r5, r3, r6, fp
 8019904:	fb03 b306 	mla	r3, r3, r6, fp
 8019908:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801990c:	792d      	ldrb	r5, [r5, #4]
 801990e:	795e      	ldrb	r6, [r3, #5]
 8019910:	280f      	cmp	r0, #15
 8019912:	d802      	bhi.n	801991a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8019914:	9b03      	ldr	r3, [sp, #12]
 8019916:	2b0f      	cmp	r3, #15
 8019918:	d922      	bls.n	8019960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801991a:	4b2f      	ldr	r3, [pc, #188]	; (80199d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801991c:	f240 1157 	movw	r1, #343	; 0x157
 8019920:	4a2e      	ldr	r2, [pc, #184]	; (80199dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8019922:	482f      	ldr	r0, [pc, #188]	; (80199e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8019924:	f002 fd0a 	bl	801c33c <__assert_func>
 8019928:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801992c:	9400      	str	r4, [sp, #0]
 801992e:	e7b8      	b.n	80198a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8019930:	46b2      	mov	sl, r6
 8019932:	46a8      	mov	r8, r5
 8019934:	46a6      	mov	lr, r4
 8019936:	9400      	str	r4, [sp, #0]
 8019938:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801993c:	e7be      	b.n	80198bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801993e:	46b2      	mov	sl, r6
 8019940:	46a8      	mov	r8, r5
 8019942:	46a6      	mov	lr, r4
 8019944:	e7ba      	b.n	80198bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8019946:	46b1      	mov	r9, r6
 8019948:	462a      	mov	r2, r5
 801994a:	4627      	mov	r7, r4
 801994c:	e7cf      	b.n	80198ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801994e:	46b1      	mov	r9, r6
 8019950:	462a      	mov	r2, r5
 8019952:	4627      	mov	r7, r4
 8019954:	e7dc      	b.n	8019910 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019956:	280f      	cmp	r0, #15
 8019958:	d8df      	bhi.n	801991a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801995a:	46b1      	mov	r9, r6
 801995c:	462a      	mov	r2, r5
 801995e:	4627      	mov	r7, r4
 8019960:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8019964:	b280      	uxth	r0, r0
 8019966:	fb00 f30b 	mul.w	r3, r0, fp
 801996a:	0100      	lsls	r0, r0, #4
 801996c:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8019970:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8019974:	1ac0      	subs	r0, r0, r3
 8019976:	fa1f fb8b 	uxth.w	fp, fp
 801997a:	b280      	uxth	r0, r0
 801997c:	ebac 0c0b 	sub.w	ip, ip, fp
 8019980:	9003      	str	r0, [sp, #12]
 8019982:	fa1f fc8c 	uxth.w	ip, ip
 8019986:	fb00 fe0e 	mul.w	lr, r0, lr
 801998a:	9800      	ldr	r0, [sp, #0]
 801998c:	fb0c ee00 	mla	lr, ip, r0, lr
 8019990:	9803      	ldr	r0, [sp, #12]
 8019992:	fb00 f808 	mul.w	r8, r0, r8
 8019996:	9801      	ldr	r0, [sp, #4]
 8019998:	fb0b ee07 	mla	lr, fp, r7, lr
 801999c:	fb0c 8800 	mla	r8, ip, r0, r8
 80199a0:	fb03 ee04 	mla	lr, r3, r4, lr
 80199a4:	fb0b 8202 	mla	r2, fp, r2, r8
 80199a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80199ac:	fb03 2505 	mla	r5, r3, r5, r2
 80199b0:	9a03      	ldr	r2, [sp, #12]
 80199b2:	f881 e000 	strb.w	lr, [r1]
 80199b6:	fb02 f00a 	mul.w	r0, r2, sl
 80199ba:	9a02      	ldr	r2, [sp, #8]
 80199bc:	122d      	asrs	r5, r5, #8
 80199be:	fb0c 0c02 	mla	ip, ip, r2, r0
 80199c2:	704d      	strb	r5, [r1, #1]
 80199c4:	fb0b c909 	mla	r9, fp, r9, ip
 80199c8:	fb03 9606 	mla	r6, r3, r6, r9
 80199cc:	1236      	asrs	r6, r6, #8
 80199ce:	708e      	strb	r6, [r1, #2]
 80199d0:	b005      	add	sp, #20
 80199d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d6:	bf00      	nop
 80199d8:	08020637 	.word	0x08020637
 80199dc:	08020aee 	.word	0x08020aee
 80199e0:	080206bf 	.word	0x080206bf

080199e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80199e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e8:	ed2d 8b08 	vpush	{d8-d11}
 80199ec:	b09b      	sub	sp, #108	; 0x6c
 80199ee:	eeb0 aa40 	vmov.f32	s20, s0
 80199f2:	eef0 9a60 	vmov.f32	s19, s1
 80199f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80199f8:	eeb0 9a41 	vmov.f32	s18, s2
 80199fc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80199fe:	eeb0 8a62 	vmov.f32	s16, s5
 8019a02:	9019      	str	r0, [sp, #100]	; 0x64
 8019a04:	eef0 8a43 	vmov.f32	s17, s6
 8019a08:	6850      	ldr	r0, [r2, #4]
 8019a0a:	eef0 ba44 	vmov.f32	s23, s8
 8019a0e:	9109      	str	r1, [sp, #36]	; 0x24
 8019a10:	eeb0 ba64 	vmov.f32	s22, s9
 8019a14:	9306      	str	r3, [sp, #24]
 8019a16:	eef0 aa45 	vmov.f32	s21, s10
 8019a1a:	6812      	ldr	r2, [r2, #0]
 8019a1c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8019a20:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8019a24:	fb00 1303 	mla	r3, r0, r3, r1
 8019a28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a2c:	18d3      	adds	r3, r2, r3
 8019a2e:	9307      	str	r3, [sp, #28]
 8019a30:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	9308      	str	r3, [sp, #32]
 8019a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	dc03      	bgt.n	8019a44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	f340 81ab 	ble.w	8019d9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8019a44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019a46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019a4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019a4e:	1e48      	subs	r0, r1, #1
 8019a50:	1e55      	subs	r5, r2, #1
 8019a52:	9b06      	ldr	r3, [sp, #24]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	f340 80b1 	ble.w	8019bbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8019a5a:	ea5f 462b 	movs.w	r6, fp, asr #16
 8019a5e:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019a62:	d406      	bmi.n	8019a72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a64:	4286      	cmp	r6, r0
 8019a66:	da04      	bge.n	8019a72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	db02      	blt.n	8019a72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a6c:	42ab      	cmp	r3, r5
 8019a6e:	f2c0 80a6 	blt.w	8019bbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8019a72:	3601      	adds	r6, #1
 8019a74:	f100 8097 	bmi.w	8019ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a78:	42b1      	cmp	r1, r6
 8019a7a:	f2c0 8094 	blt.w	8019ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a7e:	3301      	adds	r3, #1
 8019a80:	f100 8091 	bmi.w	8019ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a84:	429a      	cmp	r2, r3
 8019a86:	f2c0 808e 	blt.w	8019ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a8a:	9b06      	ldr	r3, [sp, #24]
 8019a8c:	9e07      	ldr	r6, [sp, #28]
 8019a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	f340 80b0 	ble.w	8019bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019a98:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8019a9a:	1425      	asrs	r5, r4, #16
 8019a9c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019a9e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019aa2:	68c7      	ldr	r7, [r0, #12]
 8019aa4:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019aa8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019aac:	689b      	ldr	r3, [r3, #8]
 8019aae:	f100 80ea 	bmi.w	8019c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019ab2:	f103 3cff 	add.w	ip, r3, #4294967295
 8019ab6:	4560      	cmp	r0, ip
 8019ab8:	f280 80e5 	bge.w	8019c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019abc:	2d00      	cmp	r5, #0
 8019abe:	f2c0 80e2 	blt.w	8019c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019ac2:	f107 3cff 	add.w	ip, r7, #4294967295
 8019ac6:	4565      	cmp	r5, ip
 8019ac8:	f280 80dd 	bge.w	8019c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019acc:	b21b      	sxth	r3, r3
 8019ace:	fb05 0003 	mla	r0, r5, r3, r0
 8019ad2:	9d08      	ldr	r5, [sp, #32]
 8019ad4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019ad8:	182f      	adds	r7, r5, r0
 8019ada:	5c2d      	ldrb	r5, [r5, r0]
 8019adc:	7878      	ldrb	r0, [r7, #1]
 8019ade:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019ae2:	900c      	str	r0, [sp, #48]	; 0x30
 8019ae4:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019ae8:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019aec:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019af0:	b1c9      	cbz	r1, 8019b26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019af2:	f04f 0c03 	mov.w	ip, #3
 8019af6:	f06f 0004 	mvn.w	r0, #4
 8019afa:	3705      	adds	r7, #5
 8019afc:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019b00:	eb07 0c03 	add.w	ip, r7, r3
 8019b04:	5cfb      	ldrb	r3, [r7, r3]
 8019b06:	930d      	str	r3, [sp, #52]	; 0x34
 8019b08:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019b0e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019b12:	9311      	str	r3, [sp, #68]	; 0x44
 8019b14:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019b18:	930e      	str	r3, [sp, #56]	; 0x38
 8019b1a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019b1e:	9310      	str	r3, [sp, #64]	; 0x40
 8019b20:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019b24:	9312      	str	r3, [sp, #72]	; 0x48
 8019b26:	b292      	uxth	r2, r2
 8019b28:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019b2a:	b289      	uxth	r1, r1
 8019b2c:	fb02 f301 	mul.w	r3, r2, r1
 8019b30:	0112      	lsls	r2, r2, #4
 8019b32:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019b36:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019b3a:	1ad2      	subs	r2, r2, r3
 8019b3c:	b289      	uxth	r1, r1
 8019b3e:	b292      	uxth	r2, r2
 8019b40:	1a7f      	subs	r7, r7, r1
 8019b42:	fb02 f909 	mul.w	r9, r2, r9
 8019b46:	b2bf      	uxth	r7, r7
 8019b48:	fb02 f808 	mul.w	r8, r2, r8
 8019b4c:	fb02 fa0a 	mul.w	sl, r2, sl
 8019b50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b52:	fb07 9905 	mla	r9, r7, r5, r9
 8019b56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019b58:	fb07 8800 	mla	r8, r7, r0, r8
 8019b5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019b5e:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019b62:	fb01 9905 	mla	r9, r1, r5, r9
 8019b66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019b68:	fb01 8800 	mla	r8, r1, r0, r8
 8019b6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019b6e:	fb01 a102 	mla	r1, r1, r2, sl
 8019b72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b74:	fb03 9905 	mla	r9, r3, r5, r9
 8019b78:	fb03 8800 	mla	r8, r3, r0, r8
 8019b7c:	fb03 1302 	mla	r3, r3, r2, r1
 8019b80:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b84:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b88:	121b      	asrs	r3, r3, #8
 8019b8a:	f886 9000 	strb.w	r9, [r6]
 8019b8e:	f886 8001 	strb.w	r8, [r6, #1]
 8019b92:	70b3      	strb	r3, [r6, #2]
 8019b94:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019b96:	3603      	adds	r6, #3
 8019b98:	449b      	add	fp, r3
 8019b9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b9c:	441c      	add	r4, r3
 8019b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ba4:	e774      	b.n	8019a90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8019ba6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019ba8:	449b      	add	fp, r3
 8019baa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019bac:	441c      	add	r4, r3
 8019bae:	9b06      	ldr	r3, [sp, #24]
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	9306      	str	r3, [sp, #24]
 8019bb4:	9b07      	ldr	r3, [sp, #28]
 8019bb6:	3303      	adds	r3, #3
 8019bb8:	9307      	str	r3, [sp, #28]
 8019bba:	e74a      	b.n	8019a52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019bbc:	d024      	beq.n	8019c08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8019bbe:	9b06      	ldr	r3, [sp, #24]
 8019bc0:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8019bc2:	3b01      	subs	r3, #1
 8019bc4:	fb00 b003 	mla	r0, r0, r3, fp
 8019bc8:	1400      	asrs	r0, r0, #16
 8019bca:	f53f af5e 	bmi.w	8019a8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019bce:	3901      	subs	r1, #1
 8019bd0:	4288      	cmp	r0, r1
 8019bd2:	f6bf af5a 	bge.w	8019a8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019bd6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019bd8:	fb01 4303 	mla	r3, r1, r3, r4
 8019bdc:	141b      	asrs	r3, r3, #16
 8019bde:	f53f af54 	bmi.w	8019a8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019be2:	3a01      	subs	r2, #1
 8019be4:	4293      	cmp	r3, r2
 8019be6:	f6bf af50 	bge.w	8019a8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019bea:	9b07      	ldr	r3, [sp, #28]
 8019bec:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019bf0:	1cde      	adds	r6, r3, #3
 8019bf2:	f1be 0f00 	cmp.w	lr, #0
 8019bf6:	dc5f      	bgt.n	8019cb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8019bf8:	9b06      	ldr	r3, [sp, #24]
 8019bfa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019bfe:	9b07      	ldr	r3, [sp, #28]
 8019c00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c04:	4423      	add	r3, r4
 8019c06:	9307      	str	r3, [sp, #28]
 8019c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	f340 80c5 	ble.w	8019d9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8019c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c16:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019c1a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019c1e:	eef0 6a48 	vmov.f32	s13, s16
 8019c22:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019c26:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019c2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c2e:	ee16 ba90 	vmov	fp, s13
 8019c32:	eef0 6a68 	vmov.f32	s13, s17
 8019c36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c3a:	ee16 4a90 	vmov	r4, s13
 8019c3e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019c42:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019c46:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019c4a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019c4e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019c52:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019c56:	ee18 2a10 	vmov	r2, s16
 8019c5a:	eeb0 8a47 	vmov.f32	s16, s14
 8019c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c62:	ee18 2a90 	vmov	r2, s17
 8019c66:	932f      	str	r3, [sp, #188]	; 0xbc
 8019c68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c6a:	eef0 8a67 	vmov.f32	s17, s15
 8019c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c72:	9330      	str	r3, [sp, #192]	; 0xc0
 8019c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c78:	3b01      	subs	r3, #1
 8019c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c7e:	bf08      	it	eq
 8019c80:	4613      	moveq	r3, r2
 8019c82:	9306      	str	r3, [sp, #24]
 8019c84:	e6d7      	b.n	8019a36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019c86:	f110 0c01 	adds.w	ip, r0, #1
 8019c8a:	d483      	bmi.n	8019b94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c8c:	4563      	cmp	r3, ip
 8019c8e:	db81      	blt.n	8019b94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c90:	f115 0c01 	adds.w	ip, r5, #1
 8019c94:	f53f af7e 	bmi.w	8019b94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c98:	4567      	cmp	r7, ip
 8019c9a:	f6ff af7b 	blt.w	8019b94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c9e:	b23f      	sxth	r7, r7
 8019ca0:	b21b      	sxth	r3, r3
 8019ca2:	9700      	str	r7, [sp, #0]
 8019ca4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8019ca8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019cac:	9a08      	ldr	r2, [sp, #32]
 8019cae:	4631      	mov	r1, r6
 8019cb0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019cb2:	f7ff fdcf 	bl	8019854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8019cb6:	e76d      	b.n	8019b94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019cb8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8019cba:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019cbe:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019cc2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019cc6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8019cca:	1421      	asrs	r1, r4, #16
 8019ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8019cce:	fb0c 0101 	mla	r1, ip, r1, r0
 8019cd2:	9808      	ldr	r0, [sp, #32]
 8019cd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019cd8:	1845      	adds	r5, r0, r1
 8019cda:	5c40      	ldrb	r0, [r0, r1]
 8019cdc:	796f      	ldrb	r7, [r5, #5]
 8019cde:	7869      	ldrb	r1, [r5, #1]
 8019ce0:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019ce4:	f895 a003 	ldrb.w	sl, [r5, #3]
 8019ce8:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019cec:	970c      	str	r7, [sp, #48]	; 0x30
 8019cee:	b1a2      	cbz	r2, 8019d1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8019cf0:	2703      	movs	r7, #3
 8019cf2:	f06f 0304 	mvn.w	r3, #4
 8019cf6:	3505      	adds	r5, #5
 8019cf8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019cfc:	eb05 070c 	add.w	r7, r5, ip
 8019d00:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019d04:	9513      	str	r5, [sp, #76]	; 0x4c
 8019d06:	787d      	ldrb	r5, [r7, #1]
 8019d08:	9515      	str	r5, [sp, #84]	; 0x54
 8019d0a:	78bd      	ldrb	r5, [r7, #2]
 8019d0c:	9517      	str	r5, [sp, #92]	; 0x5c
 8019d0e:	78fd      	ldrb	r5, [r7, #3]
 8019d10:	9514      	str	r5, [sp, #80]	; 0x50
 8019d12:	793d      	ldrb	r5, [r7, #4]
 8019d14:	9516      	str	r5, [sp, #88]	; 0x58
 8019d16:	797d      	ldrb	r5, [r7, #5]
 8019d18:	9518      	str	r5, [sp, #96]	; 0x60
 8019d1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019d1e:	b292      	uxth	r2, r2
 8019d20:	3603      	adds	r6, #3
 8019d22:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019d26:	fb03 f502 	mul.w	r5, r3, r2
 8019d2a:	011b      	lsls	r3, r3, #4
 8019d2c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019d30:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019d34:	1b5b      	subs	r3, r3, r5
 8019d36:	b292      	uxth	r2, r2
 8019d38:	b29b      	uxth	r3, r3
 8019d3a:	1abf      	subs	r7, r7, r2
 8019d3c:	fb03 f909 	mul.w	r9, r3, r9
 8019d40:	b2bf      	uxth	r7, r7
 8019d42:	fb03 fa0a 	mul.w	sl, r3, sl
 8019d46:	fb07 9901 	mla	r9, r7, r1, r9
 8019d4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019d4c:	fb07 aa00 	mla	sl, r7, r0, sl
 8019d50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019d52:	fb02 9901 	mla	r9, r2, r1, r9
 8019d56:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019d58:	fb02 aa00 	mla	sl, r2, r0, sl
 8019d5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019d5e:	fb05 9901 	mla	r9, r5, r1, r9
 8019d62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d64:	fb05 aa00 	mla	sl, r5, r0, sl
 8019d68:	434b      	muls	r3, r1
 8019d6a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019d6c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019d70:	fb07 3308 	mla	r3, r7, r8, r3
 8019d74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d78:	f806 ac06 	strb.w	sl, [r6, #-6]
 8019d7c:	fb02 3201 	mla	r2, r2, r1, r3
 8019d80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019d82:	f806 9c05 	strb.w	r9, [r6, #-5]
 8019d86:	fb05 2503 	mla	r5, r5, r3, r2
 8019d8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019d8c:	122d      	asrs	r5, r5, #8
 8019d8e:	449b      	add	fp, r3
 8019d90:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d92:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019d96:	441c      	add	r4, r3
 8019d98:	e72b      	b.n	8019bf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019d9a:	b01b      	add	sp, #108	; 0x6c
 8019d9c:	ecbd 8b08 	vpop	{d8-d11}
 8019da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8019da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019dac:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019db0:	fb04 5603 	mla	r6, r4, r3, r5
 8019db4:	2c00      	cmp	r4, #0
 8019db6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8019dba:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019dbe:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8019dc2:	db36      	blt.n	8019e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019dc4:	45a6      	cmp	lr, r4
 8019dc6:	dd34      	ble.n	8019e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019dc8:	2d00      	cmp	r5, #0
 8019dca:	db30      	blt.n	8019e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019dcc:	42ab      	cmp	r3, r5
 8019dce:	dd2e      	ble.n	8019e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019dd0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8019dd4:	1c6e      	adds	r6, r5, #1
 8019dd6:	d42f      	bmi.n	8019e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019dd8:	42b3      	cmp	r3, r6
 8019dda:	dd2d      	ble.n	8019e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019ddc:	b370      	cbz	r0, 8019e3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8019dde:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019de2:	3401      	adds	r4, #1
 8019de4:	d42e      	bmi.n	8019e44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019de6:	45a6      	cmp	lr, r4
 8019de8:	dd2c      	ble.n	8019e44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019dea:	b377      	cbz	r7, 8019e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8019dec:	2d00      	cmp	r5, #0
 8019dee:	db27      	blt.n	8019e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019df0:	42ab      	cmp	r3, r5
 8019df2:	dd25      	ble.n	8019e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019df4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019df8:	3501      	adds	r5, #1
 8019dfa:	d429      	bmi.n	8019e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019dfc:	42ab      	cmp	r3, r5
 8019dfe:	dd27      	ble.n	8019e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019e00:	b340      	cbz	r0, 8019e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8019e02:	3301      	adds	r3, #1
 8019e04:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019e08:	280f      	cmp	r0, #15
 8019e0a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019e0e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019e12:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019e16:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019e1a:	d801      	bhi.n	8019e20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8019e1c:	2f0f      	cmp	r7, #15
 8019e1e:	d91b      	bls.n	8019e58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8019e20:	4b89      	ldr	r3, [pc, #548]	; (801a048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8019e22:	f240 1157 	movw	r1, #343	; 0x157
 8019e26:	4a89      	ldr	r2, [pc, #548]	; (801a04c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8019e28:	4889      	ldr	r0, [pc, #548]	; (801a050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8019e2a:	f002 fa87 	bl	801c33c <__assert_func>
 8019e2e:	2200      	movs	r2, #0
 8019e30:	e7d0      	b.n	8019dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8019e32:	2600      	movs	r6, #0
 8019e34:	4632      	mov	r2, r6
 8019e36:	e7d4      	b.n	8019de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019e38:	2600      	movs	r6, #0
 8019e3a:	e7d2      	b.n	8019de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019e3c:	4606      	mov	r6, r0
 8019e3e:	e7d0      	b.n	8019de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019e40:	2400      	movs	r4, #0
 8019e42:	e7d9      	b.n	8019df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8019e44:	2300      	movs	r3, #0
 8019e46:	461c      	mov	r4, r3
 8019e48:	e7de      	b.n	8019e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019e4a:	463b      	mov	r3, r7
 8019e4c:	463c      	mov	r4, r7
 8019e4e:	e7db      	b.n	8019e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019e50:	2300      	movs	r3, #0
 8019e52:	e7d9      	b.n	8019e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019e54:	4603      	mov	r3, r0
 8019e56:	e7d7      	b.n	8019e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019e58:	b280      	uxth	r0, r0
 8019e5a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019e5e:	b2bf      	uxth	r7, r7
 8019e60:	fb00 fe07 	mul.w	lr, r0, r7
 8019e64:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019e68:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019e6c:	eba0 0c0e 	sub.w	ip, r0, lr
 8019e70:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019e74:	b2bf      	uxth	r7, r7
 8019e76:	fa1f fc8c 	uxth.w	ip, ip
 8019e7a:	eba5 0507 	sub.w	r5, r5, r7
 8019e7e:	fb0c f00a 	mul.w	r0, ip, sl
 8019e82:	b2ad      	uxth	r5, r5
 8019e84:	fb05 000b 	mla	r0, r5, fp, r0
 8019e88:	fb07 0009 	mla	r0, r7, r9, r0
 8019e8c:	fb0e 0008 	mla	r0, lr, r8, r0
 8019e90:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019e94:	9001      	str	r0, [sp, #4]
 8019e96:	d018      	beq.n	8019eca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8019e98:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019e9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019ea0:	fb0b f000 	mul.w	r0, fp, r0
 8019ea4:	fb0b fb02 	mul.w	fp, fp, r2
 8019ea8:	0a02      	lsrs	r2, r0, #8
 8019eaa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019eae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019eb2:	4402      	add	r2, r0
 8019eb4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019eb8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019ebc:	0a12      	lsrs	r2, r2, #8
 8019ebe:	0a00      	lsrs	r0, r0, #8
 8019ec0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019ec4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019ec8:	4302      	orrs	r2, r0
 8019eca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019ece:	d01a      	beq.n	8019f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8019ed0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019ed4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019ed8:	fb0a f000 	mul.w	r0, sl, r0
 8019edc:	fb0a fa06 	mul.w	sl, sl, r6
 8019ee0:	0a06      	lsrs	r6, r0, #8
 8019ee2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019ee6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019eea:	4406      	add	r6, r0
 8019eec:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019ef0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019ef4:	0a36      	lsrs	r6, r6, #8
 8019ef6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019efa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019efe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f02:	ea46 060a 	orr.w	r6, r6, sl
 8019f06:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019f0a:	d01b      	beq.n	8019f44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8019f0c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019f10:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019f14:	fb09 fa0a 	mul.w	sl, r9, sl
 8019f18:	fb09 f004 	mul.w	r0, r9, r4
 8019f1c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019f20:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019f24:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019f28:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019f2c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019f30:	4454      	add	r4, sl
 8019f32:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019f36:	0a24      	lsrs	r4, r4, #8
 8019f38:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019f3c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019f40:	ea44 0409 	orr.w	r4, r4, r9
 8019f44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019f48:	d01b      	beq.n	8019f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8019f4a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f52:	fb08 f909 	mul.w	r9, r8, r9
 8019f56:	fb08 f003 	mul.w	r0, r8, r3
 8019f5a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019f5e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8019f62:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8019f66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f6a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019f6e:	444b      	add	r3, r9
 8019f70:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019f74:	0a1b      	lsrs	r3, r3, #8
 8019f76:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019f7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f7e:	ea43 0308 	orr.w	r3, r3, r8
 8019f82:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019f86:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019f8a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019f8e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019f92:	fb0c f000 	mul.w	r0, ip, r0
 8019f96:	fb0c f606 	mul.w	r6, ip, r6
 8019f9a:	fb05 0808 	mla	r8, r5, r8, r0
 8019f9e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019fa2:	fb05 6502 	mla	r5, r5, r2, r6
 8019fa6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019faa:	fb07 8800 	mla	r8, r7, r0, r8
 8019fae:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019fb2:	fb07 5704 	mla	r7, r7, r4, r5
 8019fb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019fba:	fb0e 8000 	mla	r0, lr, r0, r8
 8019fbe:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019fc2:	9b01      	ldr	r3, [sp, #4]
 8019fc4:	0a00      	lsrs	r0, r0, #8
 8019fc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019fca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019fce:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019fd2:	ea40 0e0e 	orr.w	lr, r0, lr
 8019fd6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019fda:	b280      	uxth	r0, r0
 8019fdc:	fa5f f48e 	uxtb.w	r4, lr
 8019fe0:	4343      	muls	r3, r0
 8019fe2:	fb14 f400 	smulbb	r4, r4, r0
 8019fe6:	1c5a      	adds	r2, r3, #1
 8019fe8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019fec:	780b      	ldrb	r3, [r1, #0]
 8019fee:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019ff2:	b2d2      	uxtb	r2, r2
 8019ff4:	fb03 4302 	mla	r3, r3, r2, r4
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	1c5c      	adds	r4, r3, #1
 8019ffc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801a000:	784c      	ldrb	r4, [r1, #1]
 801a002:	fb14 f402 	smulbb	r4, r4, r2
 801a006:	121b      	asrs	r3, r3, #8
 801a008:	700b      	strb	r3, [r1, #0]
 801a00a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801a00e:	fb03 4300 	mla	r3, r3, r0, r4
 801a012:	b29b      	uxth	r3, r3
 801a014:	1c5c      	adds	r4, r3, #1
 801a016:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801a01a:	121b      	asrs	r3, r3, #8
 801a01c:	704b      	strb	r3, [r1, #1]
 801a01e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801a022:	f891 e002 	ldrb.w	lr, [r1, #2]
 801a026:	fb1e fe02 	smulbb	lr, lr, r2
 801a02a:	fb03 ee00 	mla	lr, r3, r0, lr
 801a02e:	fa1f fe8e 	uxth.w	lr, lr
 801a032:	f10e 0301 	add.w	r3, lr, #1
 801a036:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801a03a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a03e:	f881 e002 	strb.w	lr, [r1, #2]
 801a042:	b003      	add	sp, #12
 801a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a048:	08020637 	.word	0x08020637
 801a04c:	08020aee 	.word	0x08020aee
 801a050:	080206bf 	.word	0x080206bf

0801a054 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a058:	ed2d 8b08 	vpush	{d8-d11}
 801a05c:	b09d      	sub	sp, #116	; 0x74
 801a05e:	eeb0 aa40 	vmov.f32	s20, s0
 801a062:	eef0 9a60 	vmov.f32	s19, s1
 801a066:	9219      	str	r2, [sp, #100]	; 0x64
 801a068:	eeb0 9a41 	vmov.f32	s18, s2
 801a06c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801a06e:	eeb0 8a62 	vmov.f32	s16, s5
 801a072:	9307      	str	r3, [sp, #28]
 801a074:	eef0 8a43 	vmov.f32	s17, s6
 801a078:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801a07c:	eef0 ba44 	vmov.f32	s23, s8
 801a080:	901b      	str	r0, [sp, #108]	; 0x6c
 801a082:	eeb0 ba64 	vmov.f32	s22, s9
 801a086:	931a      	str	r3, [sp, #104]	; 0x68
 801a088:	eef0 aa45 	vmov.f32	s21, s10
 801a08c:	6850      	ldr	r0, [r2, #4]
 801a08e:	9117      	str	r1, [sp, #92]	; 0x5c
 801a090:	6812      	ldr	r2, [r2, #0]
 801a092:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a096:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801a09a:	fb00 1303 	mla	r3, r0, r3, r1
 801a09e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0a2:	18d3      	adds	r3, r2, r3
 801a0a4:	930a      	str	r3, [sp, #40]	; 0x28
 801a0a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	9310      	str	r3, [sp, #64]	; 0x40
 801a0ac:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	dc03      	bgt.n	801a0c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a0b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	f340 8368 	ble.w	801a790 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a0c0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a0c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a0c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a0ca:	1e48      	subs	r0, r1, #1
 801a0cc:	1e57      	subs	r7, r2, #1
 801a0ce:	9b07      	ldr	r3, [sp, #28]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	f340 8187 	ble.w	801a3e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801a0d6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a0da:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a0de:	d406      	bmi.n	801a0ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a0e0:	4584      	cmp	ip, r0
 801a0e2:	da04      	bge.n	801a0ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	db02      	blt.n	801a0ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a0e8:	42bb      	cmp	r3, r7
 801a0ea:	f2c0 817c 	blt.w	801a3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801a0ee:	f11c 0c01 	adds.w	ip, ip, #1
 801a0f2:	f100 816c 	bmi.w	801a3ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a0f6:	4561      	cmp	r1, ip
 801a0f8:	f2c0 8169 	blt.w	801a3ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	f100 8166 	bmi.w	801a3ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a102:	429a      	cmp	r2, r3
 801a104:	f2c0 8163 	blt.w	801a3ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a108:	9b07      	ldr	r3, [sp, #28]
 801a10a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a10c:	9318      	str	r3, [sp, #96]	; 0x60
 801a10e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a110:	2b00      	cmp	r3, #0
 801a112:	f340 8186 	ble.w	801a422 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801a116:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a118:	142a      	asrs	r2, r5, #16
 801a11a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a11e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a122:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a126:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a12a:	f100 81cb 	bmi.w	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a12e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a132:	4542      	cmp	r2, r8
 801a134:	f280 81c6 	bge.w	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a138:	2800      	cmp	r0, #0
 801a13a:	f2c0 81c3 	blt.w	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a13e:	f103 38ff 	add.w	r8, r3, #4294967295
 801a142:	4540      	cmp	r0, r8
 801a144:	f280 81be 	bge.w	801a4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a148:	fa0f f38e 	sxth.w	r3, lr
 801a14c:	fb00 2203 	mla	r2, r0, r3, r2
 801a150:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a152:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801a156:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801a15a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a15e:	2900      	cmp	r1, #0
 801a160:	f000 81a6 	beq.w	801a4b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801a164:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a168:	900c      	str	r0, [sp, #48]	; 0x30
 801a16a:	0e00      	lsrs	r0, r0, #24
 801a16c:	9013      	str	r0, [sp, #76]	; 0x4c
 801a16e:	f1bc 0f00 	cmp.w	ip, #0
 801a172:	d00f      	beq.n	801a194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a178:	3b01      	subs	r3, #1
 801a17a:	009b      	lsls	r3, r3, #2
 801a17c:	3304      	adds	r3, #4
 801a17e:	eb08 0003 	add.w	r0, r8, r3
 801a182:	f858 3003 	ldr.w	r3, [r8, r3]
 801a186:	9308      	str	r3, [sp, #32]
 801a188:	0e1b      	lsrs	r3, r3, #24
 801a18a:	9311      	str	r3, [sp, #68]	; 0x44
 801a18c:	6843      	ldr	r3, [r0, #4]
 801a18e:	930d      	str	r3, [sp, #52]	; 0x34
 801a190:	0e1b      	lsrs	r3, r3, #24
 801a192:	9314      	str	r3, [sp, #80]	; 0x50
 801a194:	b289      	uxth	r1, r1
 801a196:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a198:	fa1f fc8c 	uxth.w	ip, ip
 801a19c:	0108      	lsls	r0, r1, #4
 801a19e:	fb01 f90c 	mul.w	r9, r1, ip
 801a1a2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a1a6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801a1aa:	eba0 0809 	sub.w	r8, r0, r9
 801a1ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a1b0:	fa1f f18c 	uxth.w	r1, ip
 801a1b4:	fa1f f888 	uxth.w	r8, r8
 801a1b8:	1a5b      	subs	r3, r3, r1
 801a1ba:	fb08 f000 	mul.w	r0, r8, r0
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	fb03 000e 	mla	r0, r3, lr, r0
 801a1c4:	fb01 0004 	mla	r0, r1, r4, r0
 801a1c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a1ca:	fb09 0004 	mla	r0, r9, r4, r0
 801a1ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a1d2:	2800      	cmp	r0, #0
 801a1d4:	f000 80f2 	beq.w	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a1d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a1dc:	d01b      	beq.n	801a216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801a1de:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a1e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a1e6:	fb0e fa0a 	mul.w	sl, lr, sl
 801a1ea:	fb0e fe02 	mul.w	lr, lr, r2
 801a1ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a1f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a1f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a1fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a1fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a202:	4452      	add	r2, sl
 801a204:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a208:	0a12      	lsrs	r2, r2, #8
 801a20a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a20e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a212:	ea42 020c 	orr.w	r2, r2, ip
 801a216:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a218:	2cff      	cmp	r4, #255	; 0xff
 801a21a:	d021      	beq.n	801a260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a21c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a21e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a222:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a224:	fb04 fb0b 	mul.w	fp, r4, fp
 801a228:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a22a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a22e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a230:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a234:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a238:	fb04 fa0a 	mul.w	sl, r4, sl
 801a23c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a240:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a244:	44de      	add	lr, fp
 801a246:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a24a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a24e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a252:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a256:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a25a:	ea4e 040a 	orr.w	r4, lr, sl
 801a25e:	940c      	str	r4, [sp, #48]	; 0x30
 801a260:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a262:	2cff      	cmp	r4, #255	; 0xff
 801a264:	d021      	beq.n	801a2aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801a266:	9c08      	ldr	r4, [sp, #32]
 801a268:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a26c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a26e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a272:	9c08      	ldr	r4, [sp, #32]
 801a274:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a278:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a27a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a27e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a282:	fb04 fa0a 	mul.w	sl, r4, sl
 801a286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a28a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a28e:	44de      	add	lr, fp
 801a290:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a294:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a298:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a29c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a2a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a2a4:	ea4e 040a 	orr.w	r4, lr, sl
 801a2a8:	9408      	str	r4, [sp, #32]
 801a2aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2ac:	2cff      	cmp	r4, #255	; 0xff
 801a2ae:	d021      	beq.n	801a2f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801a2b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a2b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a2b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801a2bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a2be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a2c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a2c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a2cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801a2d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a2d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a2d8:	44de      	add	lr, fp
 801a2da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a2de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a2e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a2e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a2ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a2ee:	ea4e 040a 	orr.w	r4, lr, sl
 801a2f2:	940d      	str	r4, [sp, #52]	; 0x34
 801a2f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a2f6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a2fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a2fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a302:	9c08      	ldr	r4, [sp, #32]
 801a304:	fb08 fc0c 	mul.w	ip, r8, ip
 801a308:	fb03 cc0e 	mla	ip, r3, lr, ip
 801a30c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a310:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a312:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a316:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a31a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a31c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a320:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a324:	fb08 f80e 	mul.w	r8, r8, lr
 801a328:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a32c:	fb03 8202 	mla	r2, r3, r2, r8
 801a330:	9b08      	ldr	r3, [sp, #32]
 801a332:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a336:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a33c:	fb01 220a 	mla	r2, r1, sl, r2
 801a340:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801a344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a346:	fb09 2901 	mla	r9, r9, r1, r2
 801a34a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a34c:	4343      	muls	r3, r0
 801a34e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a352:	1c58      	adds	r0, r3, #1
 801a354:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a358:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a35c:	783b      	ldrb	r3, [r7, #0]
 801a35e:	ea4c 0c09 	orr.w	ip, ip, r9
 801a362:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a366:	fa5f f28c 	uxtb.w	r2, ip
 801a36a:	b2c0      	uxtb	r0, r0
 801a36c:	fb12 f201 	smulbb	r2, r2, r1
 801a370:	fb03 2300 	mla	r3, r3, r0, r2
 801a374:	b29b      	uxth	r3, r3
 801a376:	1c5a      	adds	r2, r3, #1
 801a378:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a37c:	787a      	ldrb	r2, [r7, #1]
 801a37e:	fb12 f200 	smulbb	r2, r2, r0
 801a382:	121b      	asrs	r3, r3, #8
 801a384:	703b      	strb	r3, [r7, #0]
 801a386:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a38a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a38e:	fb03 2301 	mla	r3, r3, r1, r2
 801a392:	b29b      	uxth	r3, r3
 801a394:	1c5a      	adds	r2, r3, #1
 801a396:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a39a:	121b      	asrs	r3, r3, #8
 801a39c:	707b      	strb	r3, [r7, #1]
 801a39e:	78bb      	ldrb	r3, [r7, #2]
 801a3a0:	fb13 f000 	smulbb	r0, r3, r0
 801a3a4:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a3a8:	fa1f fc8c 	uxth.w	ip, ip
 801a3ac:	f10c 0301 	add.w	r3, ip, #1
 801a3b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a3b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a3b8:	f887 c002 	strb.w	ip, [r7, #2]
 801a3bc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a3be:	3703      	adds	r7, #3
 801a3c0:	441d      	add	r5, r3
 801a3c2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a3c4:	441e      	add	r6, r3
 801a3c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a3c8:	3b01      	subs	r3, #1
 801a3ca:	9318      	str	r3, [sp, #96]	; 0x60
 801a3cc:	e69f      	b.n	801a10e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a3ce:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a3d0:	441d      	add	r5, r3
 801a3d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a3d4:	441e      	add	r6, r3
 801a3d6:	9b07      	ldr	r3, [sp, #28]
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	9307      	str	r3, [sp, #28]
 801a3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3de:	3303      	adds	r3, #3
 801a3e0:	930a      	str	r3, [sp, #40]	; 0x28
 801a3e2:	e674      	b.n	801a0ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a3e4:	d025      	beq.n	801a432 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801a3e6:	9b07      	ldr	r3, [sp, #28]
 801a3e8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801a3ea:	3b01      	subs	r3, #1
 801a3ec:	fb00 5003 	mla	r0, r0, r3, r5
 801a3f0:	1400      	asrs	r0, r0, #16
 801a3f2:	f53f ae89 	bmi.w	801a108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a3f6:	3901      	subs	r1, #1
 801a3f8:	4288      	cmp	r0, r1
 801a3fa:	f6bf ae85 	bge.w	801a108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a3fe:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801a400:	fb01 6303 	mla	r3, r1, r3, r6
 801a404:	141b      	asrs	r3, r3, #16
 801a406:	f53f ae7f 	bmi.w	801a108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a40a:	3a01      	subs	r2, #1
 801a40c:	4293      	cmp	r3, r2
 801a40e:	f6bf ae7b 	bge.w	801a108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a414:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a418:	f103 0e03 	add.w	lr, r3, #3
 801a41c:	f1bb 0f00 	cmp.w	fp, #0
 801a420:	dc6e      	bgt.n	801a500 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801a422:	9b07      	ldr	r3, [sp, #28]
 801a424:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a42a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a42e:	4423      	add	r3, r4
 801a430:	930a      	str	r3, [sp, #40]	; 0x28
 801a432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a434:	2b00      	cmp	r3, #0
 801a436:	f340 81ab 	ble.w	801a790 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a43a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a43e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a440:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a444:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a448:	eef0 6a48 	vmov.f32	s13, s16
 801a44c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a450:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a454:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a458:	ee16 5a90 	vmov	r5, s13
 801a45c:	eef0 6a68 	vmov.f32	s13, s17
 801a460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a464:	ee16 6a90 	vmov	r6, s13
 801a468:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a46c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a470:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a474:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a478:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a47c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a480:	ee18 2a10 	vmov	r2, s16
 801a484:	eeb0 8a47 	vmov.f32	s16, s14
 801a488:	fb92 f3f3 	sdiv	r3, r2, r3
 801a48c:	ee18 2a90 	vmov	r2, s17
 801a490:	9331      	str	r3, [sp, #196]	; 0xc4
 801a492:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a494:	eef0 8a67 	vmov.f32	s17, s15
 801a498:	fb92 f3f3 	sdiv	r3, r2, r3
 801a49c:	9332      	str	r3, [sp, #200]	; 0xc8
 801a49e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a4a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a4a2:	3b01      	subs	r3, #1
 801a4a4:	9317      	str	r3, [sp, #92]	; 0x5c
 801a4a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a4a8:	bf08      	it	eq
 801a4aa:	4613      	moveq	r3, r2
 801a4ac:	9307      	str	r3, [sp, #28]
 801a4ae:	e600      	b.n	801a0b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a4b0:	f1bc 0f00 	cmp.w	ip, #0
 801a4b4:	f43f ae6e 	beq.w	801a194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a4b8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a4bc:	9308      	str	r3, [sp, #32]
 801a4be:	0e1b      	lsrs	r3, r3, #24
 801a4c0:	9311      	str	r3, [sp, #68]	; 0x44
 801a4c2:	e667      	b.n	801a194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a4c4:	f112 0801 	adds.w	r8, r2, #1
 801a4c8:	f53f af78 	bmi.w	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a4cc:	45c6      	cmp	lr, r8
 801a4ce:	f6ff af75 	blt.w	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a4d2:	f110 0801 	adds.w	r8, r0, #1
 801a4d6:	f53f af71 	bmi.w	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a4da:	4543      	cmp	r3, r8
 801a4dc:	f6ff af6e 	blt.w	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a4e0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a4e2:	b21b      	sxth	r3, r3
 801a4e4:	9201      	str	r2, [sp, #4]
 801a4e6:	9300      	str	r3, [sp, #0]
 801a4e8:	fa0f f38e 	sxth.w	r3, lr
 801a4ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4f2:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a4f6:	4639      	mov	r1, r7
 801a4f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a4fa:	f7ff fc53 	bl	8019da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a4fe:	e75d      	b.n	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a500:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a502:	142f      	asrs	r7, r5, #16
 801a504:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a506:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a50a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a50e:	1433      	asrs	r3, r6, #16
 801a510:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a514:	fb02 7303 	mla	r3, r2, r3, r7
 801a518:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a51c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a520:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a524:	2900      	cmp	r1, #0
 801a526:	f000 812a 	beq.w	801a77e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801a52a:	687c      	ldr	r4, [r7, #4]
 801a52c:	940e      	str	r4, [sp, #56]	; 0x38
 801a52e:	0e24      	lsrs	r4, r4, #24
 801a530:	9415      	str	r4, [sp, #84]	; 0x54
 801a532:	b178      	cbz	r0, 801a554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a534:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801a538:	3a01      	subs	r2, #1
 801a53a:	0092      	lsls	r2, r2, #2
 801a53c:	3204      	adds	r2, #4
 801a53e:	eb07 0802 	add.w	r8, r7, r2
 801a542:	58ba      	ldr	r2, [r7, r2]
 801a544:	9209      	str	r2, [sp, #36]	; 0x24
 801a546:	0e12      	lsrs	r2, r2, #24
 801a548:	9212      	str	r2, [sp, #72]	; 0x48
 801a54a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a54e:	920f      	str	r2, [sp, #60]	; 0x3c
 801a550:	0e12      	lsrs	r2, r2, #24
 801a552:	9216      	str	r2, [sp, #88]	; 0x58
 801a554:	b289      	uxth	r1, r1
 801a556:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a558:	b280      	uxth	r0, r0
 801a55a:	fb01 f900 	mul.w	r9, r1, r0
 801a55e:	0109      	lsls	r1, r1, #4
 801a560:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a564:	eba1 0809 	sub.w	r8, r1, r9
 801a568:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a56c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a56e:	b280      	uxth	r0, r0
 801a570:	fa1f f888 	uxth.w	r8, r8
 801a574:	1a12      	subs	r2, r2, r0
 801a576:	fb08 f101 	mul.w	r1, r8, r1
 801a57a:	b292      	uxth	r2, r2
 801a57c:	fb02 110c 	mla	r1, r2, ip, r1
 801a580:	fb00 1104 	mla	r1, r0, r4, r1
 801a584:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a586:	fb09 1104 	mla	r1, r9, r4, r1
 801a58a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a58e:	2900      	cmp	r1, #0
 801a590:	f000 80ec 	beq.w	801a76c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a594:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a598:	d019      	beq.n	801a5ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801a59a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a59e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a5a2:	fb0c fa0a 	mul.w	sl, ip, sl
 801a5a6:	fb0c fc03 	mul.w	ip, ip, r3
 801a5aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a5ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a5b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a5b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a5ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a5be:	4453      	add	r3, sl
 801a5c0:	0a3f      	lsrs	r7, r7, #8
 801a5c2:	0a1b      	lsrs	r3, r3, #8
 801a5c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a5c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a5cc:	433b      	orrs	r3, r7
 801a5ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a5d0:	2cff      	cmp	r4, #255	; 0xff
 801a5d2:	d020      	beq.n	801a616 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801a5d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a5d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a5da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a5dc:	4367      	muls	r7, r4
 801a5de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a5e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a5e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a5ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a5ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5f6:	44bc      	add	ip, r7
 801a5f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a5fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a600:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a60c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a610:	ea4c 040a 	orr.w	r4, ip, sl
 801a614:	940e      	str	r4, [sp, #56]	; 0x38
 801a616:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a618:	2cff      	cmp	r4, #255	; 0xff
 801a61a:	d020      	beq.n	801a65e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801a61c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a61e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a622:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a624:	4367      	muls	r7, r4
 801a626:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a628:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a62c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a630:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a632:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a636:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a63a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a63e:	44bc      	add	ip, r7
 801a640:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a648:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a64c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a650:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a654:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a658:	ea4c 040a 	orr.w	r4, ip, sl
 801a65c:	9409      	str	r4, [sp, #36]	; 0x24
 801a65e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a660:	2cff      	cmp	r4, #255	; 0xff
 801a662:	d020      	beq.n	801a6a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801a664:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a666:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a66a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a66c:	4367      	muls	r7, r4
 801a66e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a670:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a674:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a678:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a67a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a67e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a682:	fb04 fa0a 	mul.w	sl, r4, sl
 801a686:	44bc      	add	ip, r7
 801a688:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a68c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a690:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a694:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a698:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a69c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a6a0:	ea4c 040a 	orr.w	r4, ip, sl
 801a6a4:	940f      	str	r4, [sp, #60]	; 0x3c
 801a6a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a6a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a6ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a6b0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a6b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a6b6:	fb08 f707 	mul.w	r7, r8, r7
 801a6ba:	fb02 770c 	mla	r7, r2, ip, r7
 801a6be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a6c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a6c4:	fb00 770c 	mla	r7, r0, ip, r7
 801a6c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a6cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a6ce:	fb09 770c 	mla	r7, r9, ip, r7
 801a6d2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a6d6:	fb08 f80c 	mul.w	r8, r8, ip
 801a6da:	0a3f      	lsrs	r7, r7, #8
 801a6dc:	fb02 8303 	mla	r3, r2, r3, r8
 801a6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a6e6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a6ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6ec:	fb00 330a 	mla	r3, r0, sl, r3
 801a6f0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a6f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a6f6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a700:	434b      	muls	r3, r1
 801a702:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a706:	1c59      	adds	r1, r3, #1
 801a708:	ea47 070c 	orr.w	r7, r7, ip
 801a70c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a710:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a714:	b2fa      	uxtb	r2, r7
 801a716:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a71a:	fb12 f200 	smulbb	r2, r2, r0
 801a71e:	b2c9      	uxtb	r1, r1
 801a720:	fb03 2301 	mla	r3, r3, r1, r2
 801a724:	b29b      	uxth	r3, r3
 801a726:	1c5a      	adds	r2, r3, #1
 801a728:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a72c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a730:	fb12 f201 	smulbb	r2, r2, r1
 801a734:	121b      	asrs	r3, r3, #8
 801a736:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a73a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a73e:	0c3f      	lsrs	r7, r7, #16
 801a740:	fb03 2300 	mla	r3, r3, r0, r2
 801a744:	b29b      	uxth	r3, r3
 801a746:	1c5a      	adds	r2, r3, #1
 801a748:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a74c:	121b      	asrs	r3, r3, #8
 801a74e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a752:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a756:	fb13 f101 	smulbb	r1, r3, r1
 801a75a:	fb07 1700 	mla	r7, r7, r0, r1
 801a75e:	b2bf      	uxth	r7, r7
 801a760:	1c79      	adds	r1, r7, #1
 801a762:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801a766:	123f      	asrs	r7, r7, #8
 801a768:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a76c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a76e:	f10e 0e03 	add.w	lr, lr, #3
 801a772:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a776:	441d      	add	r5, r3
 801a778:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a77a:	441e      	add	r6, r3
 801a77c:	e64e      	b.n	801a41c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801a77e:	2800      	cmp	r0, #0
 801a780:	f43f aee8 	beq.w	801a554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a784:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a788:	9209      	str	r2, [sp, #36]	; 0x24
 801a78a:	0e12      	lsrs	r2, r2, #24
 801a78c:	9212      	str	r2, [sp, #72]	; 0x48
 801a78e:	e6e1      	b.n	801a554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a790:	b01d      	add	sp, #116	; 0x74
 801a792:	ecbd 8b08 	vpop	{d8-d11}
 801a796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a79c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7a0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801a7a4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a7a8:	fb04 5603 	mla	r6, r4, r3, r5
 801a7ac:	2c00      	cmp	r4, #0
 801a7ae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801a7b2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801a7b6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801a7ba:	db36      	blt.n	801a82a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a7bc:	45a6      	cmp	lr, r4
 801a7be:	dd34      	ble.n	801a82a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a7c0:	2d00      	cmp	r5, #0
 801a7c2:	db30      	blt.n	801a826 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a7c4:	42ab      	cmp	r3, r5
 801a7c6:	dd2e      	ble.n	801a826 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a7c8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801a7cc:	1c6e      	adds	r6, r5, #1
 801a7ce:	d42f      	bmi.n	801a830 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a7d0:	42b3      	cmp	r3, r6
 801a7d2:	dd2d      	ble.n	801a830 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a7d4:	b370      	cbz	r0, 801a834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801a7d6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801a7da:	3401      	adds	r4, #1
 801a7dc:	d42e      	bmi.n	801a83c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a7de:	45a6      	cmp	lr, r4
 801a7e0:	dd2c      	ble.n	801a83c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a7e2:	b377      	cbz	r7, 801a842 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801a7e4:	2d00      	cmp	r5, #0
 801a7e6:	db27      	blt.n	801a838 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a7e8:	42ab      	cmp	r3, r5
 801a7ea:	dd25      	ble.n	801a838 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a7ec:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801a7f0:	3501      	adds	r5, #1
 801a7f2:	d429      	bmi.n	801a848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a7f4:	42ab      	cmp	r3, r5
 801a7f6:	dd27      	ble.n	801a848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a7f8:	b340      	cbz	r0, 801a84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801a7fa:	3301      	adds	r3, #1
 801a7fc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a800:	280f      	cmp	r0, #15
 801a802:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a806:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a80a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a80e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a812:	d801      	bhi.n	801a818 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801a814:	2f0f      	cmp	r7, #15
 801a816:	d91b      	bls.n	801a850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801a818:	4b7e      	ldr	r3, [pc, #504]	; (801aa14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801a81a:	f240 1157 	movw	r1, #343	; 0x157
 801a81e:	4a7e      	ldr	r2, [pc, #504]	; (801aa18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801a820:	487e      	ldr	r0, [pc, #504]	; (801aa1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801a822:	f001 fd8b 	bl	801c33c <__assert_func>
 801a826:	2200      	movs	r2, #0
 801a828:	e7d0      	b.n	801a7cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801a82a:	2600      	movs	r6, #0
 801a82c:	4632      	mov	r2, r6
 801a82e:	e7d4      	b.n	801a7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a830:	2600      	movs	r6, #0
 801a832:	e7d2      	b.n	801a7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a834:	4606      	mov	r6, r0
 801a836:	e7d0      	b.n	801a7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a838:	2400      	movs	r4, #0
 801a83a:	e7d9      	b.n	801a7f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801a83c:	2300      	movs	r3, #0
 801a83e:	461c      	mov	r4, r3
 801a840:	e7de      	b.n	801a800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a842:	463b      	mov	r3, r7
 801a844:	463c      	mov	r4, r7
 801a846:	e7db      	b.n	801a800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a848:	2300      	movs	r3, #0
 801a84a:	e7d9      	b.n	801a800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a84c:	4603      	mov	r3, r0
 801a84e:	e7d7      	b.n	801a800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a850:	b280      	uxth	r0, r0
 801a852:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a856:	b2bf      	uxth	r7, r7
 801a858:	fb00 fe07 	mul.w	lr, r0, r7
 801a85c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a860:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a864:	eba0 0c0e 	sub.w	ip, r0, lr
 801a868:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a86c:	b2bf      	uxth	r7, r7
 801a86e:	fa1f fc8c 	uxth.w	ip, ip
 801a872:	eba0 0507 	sub.w	r5, r0, r7
 801a876:	fb0c f00a 	mul.w	r0, ip, sl
 801a87a:	b2ad      	uxth	r5, r5
 801a87c:	fb05 000b 	mla	r0, r5, fp, r0
 801a880:	fb07 0009 	mla	r0, r7, r9, r0
 801a884:	fb0e 0008 	mla	r0, lr, r8, r0
 801a888:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a88c:	9001      	str	r0, [sp, #4]
 801a88e:	d018      	beq.n	801a8c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801a890:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a894:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a898:	fb0b f000 	mul.w	r0, fp, r0
 801a89c:	fb0b fb02 	mul.w	fp, fp, r2
 801a8a0:	0a02      	lsrs	r2, r0, #8
 801a8a2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a8a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a8aa:	4402      	add	r2, r0
 801a8ac:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a8b0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a8b4:	0a12      	lsrs	r2, r2, #8
 801a8b6:	0a00      	lsrs	r0, r0, #8
 801a8b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a8bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a8c0:	4302      	orrs	r2, r0
 801a8c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a8c6:	d01a      	beq.n	801a8fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801a8c8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a8cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a8d0:	fb0a f000 	mul.w	r0, sl, r0
 801a8d4:	fb0a fa06 	mul.w	sl, sl, r6
 801a8d8:	0a06      	lsrs	r6, r0, #8
 801a8da:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a8de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a8e2:	4406      	add	r6, r0
 801a8e4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a8e8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a8ec:	0a36      	lsrs	r6, r6, #8
 801a8ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a8f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a8f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8fa:	ea46 060a 	orr.w	r6, r6, sl
 801a8fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a902:	d01b      	beq.n	801a93c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801a904:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a908:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a90c:	fb09 fa0a 	mul.w	sl, r9, sl
 801a910:	fb09 f004 	mul.w	r0, r9, r4
 801a914:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a918:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a91c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a920:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a924:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a928:	4454      	add	r4, sl
 801a92a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a92e:	0a24      	lsrs	r4, r4, #8
 801a930:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a934:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a938:	ea44 0409 	orr.w	r4, r4, r9
 801a93c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a940:	d01b      	beq.n	801a97a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801a942:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a94a:	fb08 f909 	mul.w	r9, r8, r9
 801a94e:	fb08 f003 	mul.w	r0, r8, r3
 801a952:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a956:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a95a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a95e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a962:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a966:	444b      	add	r3, r9
 801a968:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a96c:	0a1b      	lsrs	r3, r3, #8
 801a96e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a972:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a976:	ea43 0308 	orr.w	r3, r3, r8
 801a97a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a97e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a982:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a986:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a98a:	fb0c f000 	mul.w	r0, ip, r0
 801a98e:	fb0c f606 	mul.w	r6, ip, r6
 801a992:	fb05 0808 	mla	r8, r5, r8, r0
 801a996:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a99a:	fb05 6502 	mla	r5, r5, r2, r6
 801a99e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a9a2:	fb07 8800 	mla	r8, r7, r0, r8
 801a9a6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a9aa:	fb07 5704 	mla	r7, r7, r4, r5
 801a9ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a9b2:	fb0e 8000 	mla	r0, lr, r0, r8
 801a9b6:	780a      	ldrb	r2, [r1, #0]
 801a9b8:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a9bc:	9b01      	ldr	r3, [sp, #4]
 801a9be:	0a00      	lsrs	r0, r0, #8
 801a9c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a9c4:	43db      	mvns	r3, r3
 801a9c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a9ca:	b2db      	uxtb	r3, r3
 801a9cc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a9d0:	ea40 0e0e 	orr.w	lr, r0, lr
 801a9d4:	fb02 f003 	mul.w	r0, r2, r3
 801a9d8:	1c42      	adds	r2, r0, #1
 801a9da:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a9de:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a9e2:	700a      	strb	r2, [r1, #0]
 801a9e4:	784a      	ldrb	r2, [r1, #1]
 801a9e6:	435a      	muls	r2, r3
 801a9e8:	1c50      	adds	r0, r2, #1
 801a9ea:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a9ee:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a9f2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a9f6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a9fa:	704a      	strb	r2, [r1, #1]
 801a9fc:	788a      	ldrb	r2, [r1, #2]
 801a9fe:	4353      	muls	r3, r2
 801aa00:	1c5a      	adds	r2, r3, #1
 801aa02:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aa06:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801aa0a:	f881 e002 	strb.w	lr, [r1, #2]
 801aa0e:	b003      	add	sp, #12
 801aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa14:	08020637 	.word	0x08020637
 801aa18:	08020aee 	.word	0x08020aee
 801aa1c:	080206bf 	.word	0x080206bf

0801aa20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa24:	ed2d 8b08 	vpush	{d8-d11}
 801aa28:	b099      	sub	sp, #100	; 0x64
 801aa2a:	eeb0 aa40 	vmov.f32	s20, s0
 801aa2e:	eef0 9a60 	vmov.f32	s19, s1
 801aa32:	9017      	str	r0, [sp, #92]	; 0x5c
 801aa34:	eeb0 9a41 	vmov.f32	s18, s2
 801aa38:	9306      	str	r3, [sp, #24]
 801aa3a:	eeb0 8a62 	vmov.f32	s16, s5
 801aa3e:	eef0 8a43 	vmov.f32	s17, s6
 801aa42:	eef0 ba44 	vmov.f32	s23, s8
 801aa46:	eeb0 ba64 	vmov.f32	s22, s9
 801aa4a:	eef0 aa45 	vmov.f32	s21, s10
 801aa4e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801aa52:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aa54:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801aa58:	6850      	ldr	r0, [r2, #4]
 801aa5a:	6812      	ldr	r2, [r2, #0]
 801aa5c:	fb00 1303 	mla	r3, r0, r3, r1
 801aa60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa64:	18d3      	adds	r3, r2, r3
 801aa66:	9309      	str	r3, [sp, #36]	; 0x24
 801aa68:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa6a:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	930e      	str	r3, [sp, #56]	; 0x38
 801aa72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	dc03      	bgt.n	801aa80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801aa78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	f340 8360 	ble.w	801b140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801aa80:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aa86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aa8a:	1e48      	subs	r0, r1, #1
 801aa8c:	1e57      	subs	r7, r2, #1
 801aa8e:	9b06      	ldr	r3, [sp, #24]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	f340 817b 	ble.w	801ad8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801aa96:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801aa9a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801aa9e:	d406      	bmi.n	801aaae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aaa0:	4584      	cmp	ip, r0
 801aaa2:	da04      	bge.n	801aaae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	db02      	blt.n	801aaae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aaa8:	42bb      	cmp	r3, r7
 801aaaa:	f2c0 8170 	blt.w	801ad8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801aaae:	f11c 0c01 	adds.w	ip, ip, #1
 801aab2:	f100 8160 	bmi.w	801ad76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aab6:	4561      	cmp	r1, ip
 801aab8:	f2c0 815d 	blt.w	801ad76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aabc:	3301      	adds	r3, #1
 801aabe:	f100 815a 	bmi.w	801ad76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aac2:	429a      	cmp	r2, r3
 801aac4:	f2c0 8157 	blt.w	801ad76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aac8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801aacc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aace:	f1b8 0f00 	cmp.w	r8, #0
 801aad2:	f340 8179 	ble.w	801adc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801aad6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801aad8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801aadc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aade:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801aae2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801aae6:	142a      	asrs	r2, r5, #16
 801aae8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aaec:	689b      	ldr	r3, [r3, #8]
 801aaee:	f100 81be 	bmi.w	801ae6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aaf2:	f103 39ff 	add.w	r9, r3, #4294967295
 801aaf6:	454a      	cmp	r2, r9
 801aaf8:	f280 81b9 	bge.w	801ae6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aafc:	f1bc 0f00 	cmp.w	ip, #0
 801ab00:	f2c0 81b5 	blt.w	801ae6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ab04:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ab08:	45cc      	cmp	ip, r9
 801ab0a:	f280 81b0 	bge.w	801ae6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ab0e:	b21b      	sxth	r3, r3
 801ab10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ab12:	fb0c 2203 	mla	r2, ip, r3, r2
 801ab16:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ab1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ab1e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ab22:	2900      	cmp	r1, #0
 801ab24:	f000 8197 	beq.w	801ae56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801ab28:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ab2c:	940a      	str	r4, [sp, #40]	; 0x28
 801ab2e:	0e24      	lsrs	r4, r4, #24
 801ab30:	9411      	str	r4, [sp, #68]	; 0x44
 801ab32:	b180      	cbz	r0, 801ab56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ab34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ab38:	3b01      	subs	r3, #1
 801ab3a:	009b      	lsls	r3, r3, #2
 801ab3c:	3304      	adds	r3, #4
 801ab3e:	eb09 0c03 	add.w	ip, r9, r3
 801ab42:	f859 3003 	ldr.w	r3, [r9, r3]
 801ab46:	9307      	str	r3, [sp, #28]
 801ab48:	0e1b      	lsrs	r3, r3, #24
 801ab4a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab4c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ab50:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab52:	0e1b      	lsrs	r3, r3, #24
 801ab54:	9312      	str	r3, [sp, #72]	; 0x48
 801ab56:	b289      	uxth	r1, r1
 801ab58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ab5a:	b280      	uxth	r0, r0
 801ab5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ab5e:	fb01 fa00 	mul.w	sl, r1, r0
 801ab62:	0109      	lsls	r1, r1, #4
 801ab64:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ab68:	eba1 090a 	sub.w	r9, r1, sl
 801ab6c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ab70:	b280      	uxth	r0, r0
 801ab72:	fa1f f989 	uxth.w	r9, r9
 801ab76:	1a09      	subs	r1, r1, r0
 801ab78:	fb09 f303 	mul.w	r3, r9, r3
 801ab7c:	b289      	uxth	r1, r1
 801ab7e:	fb01 330e 	mla	r3, r1, lr, r3
 801ab82:	fb00 3304 	mla	r3, r0, r4, r3
 801ab86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab88:	fb0a 3304 	mla	r3, sl, r4, r3
 801ab8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	f000 80e8 	beq.w	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ab96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ab9a:	d01b      	beq.n	801abd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ab9c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801aba0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801aba4:	fb0e fb0b 	mul.w	fp, lr, fp
 801aba8:	fb0e fe02 	mul.w	lr, lr, r2
 801abac:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801abb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801abb4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801abb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801abbc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801abc0:	445a      	add	r2, fp
 801abc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801abc6:	0a12      	lsrs	r2, r2, #8
 801abc8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801abcc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801abd0:	ea42 020c 	orr.w	r2, r2, ip
 801abd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801abd6:	2cff      	cmp	r4, #255	; 0xff
 801abd8:	d021      	beq.n	801ac1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801abda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801abdc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801abe0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801abe2:	fb04 fc0c 	mul.w	ip, r4, ip
 801abe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801abe8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801abec:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801abf0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801abf2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801abf6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abfa:	fb04 fb0b 	mul.w	fp, r4, fp
 801abfe:	44e6      	add	lr, ip
 801ac00:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ac04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac08:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ac0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac10:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ac14:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ac18:	ea4e 040b 	orr.w	r4, lr, fp
 801ac1c:	940a      	str	r4, [sp, #40]	; 0x28
 801ac1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ac20:	2cff      	cmp	r4, #255	; 0xff
 801ac22:	d021      	beq.n	801ac68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801ac24:	9c07      	ldr	r4, [sp, #28]
 801ac26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ac2c:	fb04 fc0c 	mul.w	ip, r4, ip
 801ac30:	9c07      	ldr	r4, [sp, #28]
 801ac32:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ac36:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ac3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ac3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ac40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac44:	fb04 fb0b 	mul.w	fp, r4, fp
 801ac48:	44e6      	add	lr, ip
 801ac4a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ac4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac52:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ac56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac5a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ac5e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ac62:	ea4e 040b 	orr.w	r4, lr, fp
 801ac66:	9407      	str	r4, [sp, #28]
 801ac68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac6a:	2cff      	cmp	r4, #255	; 0xff
 801ac6c:	d021      	beq.n	801acb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ac6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac70:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac74:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac76:	fb04 fc0c 	mul.w	ip, r4, ip
 801ac7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac7c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ac80:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ac84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac86:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ac8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac8e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ac92:	44e6      	add	lr, ip
 801ac94:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ac98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac9c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801aca0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aca4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801aca8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801acac:	ea4e 040b 	orr.w	r4, lr, fp
 801acb0:	940b      	str	r4, [sp, #44]	; 0x2c
 801acb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801acb4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801acb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801acbc:	2bff      	cmp	r3, #255	; 0xff
 801acbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801acc2:	9c07      	ldr	r4, [sp, #28]
 801acc4:	fb09 fc0c 	mul.w	ip, r9, ip
 801acc8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801accc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801acd0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801acd2:	fb00 cc0e 	mla	ip, r0, lr, ip
 801acd6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801acda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801acdc:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ace0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ace4:	fb09 f90e 	mul.w	r9, r9, lr
 801ace8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801acec:	fb01 9202 	mla	r2, r1, r2, r9
 801acf0:	9907      	ldr	r1, [sp, #28]
 801acf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acf6:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801acfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801acfc:	fb00 220b 	mla	r2, r0, fp, r2
 801ad00:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801ad04:	fb0a 2a00 	mla	sl, sl, r0, r2
 801ad08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad10:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ad14:	fa5f f08c 	uxtb.w	r0, ip
 801ad18:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ad1c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ad20:	f000 80a2 	beq.w	801ae68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801ad24:	43db      	mvns	r3, r3
 801ad26:	783a      	ldrb	r2, [r7, #0]
 801ad28:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ad2c:	b2db      	uxtb	r3, r3
 801ad2e:	fb02 fe03 	mul.w	lr, r2, r3
 801ad32:	fb0a fa03 	mul.w	sl, sl, r3
 801ad36:	f10e 0201 	add.w	r2, lr, #1
 801ad3a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801ad3e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ad42:	703a      	strb	r2, [r7, #0]
 801ad44:	787a      	ldrb	r2, [r7, #1]
 801ad46:	fb02 f003 	mul.w	r0, r2, r3
 801ad4a:	f10a 0301 	add.w	r3, sl, #1
 801ad4e:	1c42      	adds	r2, r0, #1
 801ad50:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ad54:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801ad58:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ad5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ad60:	707a      	strb	r2, [r7, #1]
 801ad62:	f887 c002 	strb.w	ip, [r7, #2]
 801ad66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad68:	3703      	adds	r7, #3
 801ad6a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad6e:	441d      	add	r5, r3
 801ad70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad72:	441e      	add	r6, r3
 801ad74:	e6ab      	b.n	801aace <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ad76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad78:	441d      	add	r5, r3
 801ad7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad7c:	441e      	add	r6, r3
 801ad7e:	9b06      	ldr	r3, [sp, #24]
 801ad80:	3b01      	subs	r3, #1
 801ad82:	9306      	str	r3, [sp, #24]
 801ad84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad86:	3303      	adds	r3, #3
 801ad88:	9309      	str	r3, [sp, #36]	; 0x24
 801ad8a:	e680      	b.n	801aa8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad8c:	d024      	beq.n	801add8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801ad8e:	9b06      	ldr	r3, [sp, #24]
 801ad90:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ad92:	3b01      	subs	r3, #1
 801ad94:	fb00 5003 	mla	r0, r0, r3, r5
 801ad98:	1400      	asrs	r0, r0, #16
 801ad9a:	f53f ae95 	bmi.w	801aac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad9e:	3901      	subs	r1, #1
 801ada0:	4288      	cmp	r0, r1
 801ada2:	f6bf ae91 	bge.w	801aac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ada6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ada8:	fb01 6303 	mla	r3, r1, r3, r6
 801adac:	141b      	asrs	r3, r3, #16
 801adae:	f53f ae8b 	bmi.w	801aac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801adb2:	3a01      	subs	r2, #1
 801adb4:	4293      	cmp	r3, r2
 801adb6:	f6bf ae87 	bge.w	801aac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801adba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adbc:	f8dd b018 	ldr.w	fp, [sp, #24]
 801adc0:	1cdf      	adds	r7, r3, #3
 801adc2:	f1bb 0f00 	cmp.w	fp, #0
 801adc6:	dc6e      	bgt.n	801aea6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801adc8:	9b06      	ldr	r3, [sp, #24]
 801adca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801adce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801add0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801add4:	4423      	add	r3, r4
 801add6:	9309      	str	r3, [sp, #36]	; 0x24
 801add8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801adda:	2b00      	cmp	r3, #0
 801addc:	f340 81b0 	ble.w	801b140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801ade0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ade4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ade6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801adea:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801adee:	eef0 6a48 	vmov.f32	s13, s16
 801adf2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801adf6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801adfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801adfe:	ee16 5a90 	vmov	r5, s13
 801ae02:	eef0 6a68 	vmov.f32	s13, s17
 801ae06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae0a:	ee16 6a90 	vmov	r6, s13
 801ae0e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ae12:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ae16:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ae1a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ae1e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ae22:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ae26:	ee18 2a10 	vmov	r2, s16
 801ae2a:	eeb0 8a47 	vmov.f32	s16, s14
 801ae2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae32:	ee18 2a90 	vmov	r2, s17
 801ae36:	932d      	str	r3, [sp, #180]	; 0xb4
 801ae38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae3a:	eef0 8a67 	vmov.f32	s17, s15
 801ae3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae42:	932e      	str	r3, [sp, #184]	; 0xb8
 801ae44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ae46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ae48:	3b01      	subs	r3, #1
 801ae4a:	9315      	str	r3, [sp, #84]	; 0x54
 801ae4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae4e:	bf08      	it	eq
 801ae50:	4613      	moveq	r3, r2
 801ae52:	9306      	str	r3, [sp, #24]
 801ae54:	e60d      	b.n	801aa72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ae56:	2800      	cmp	r0, #0
 801ae58:	f43f ae7d 	beq.w	801ab56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ae5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ae60:	9307      	str	r3, [sp, #28]
 801ae62:	0e1b      	lsrs	r3, r3, #24
 801ae64:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae66:	e676      	b.n	801ab56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ae68:	7038      	strb	r0, [r7, #0]
 801ae6a:	7079      	strb	r1, [r7, #1]
 801ae6c:	e779      	b.n	801ad62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae6e:	f112 0901 	adds.w	r9, r2, #1
 801ae72:	f53f af78 	bmi.w	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae76:	454b      	cmp	r3, r9
 801ae78:	f6ff af75 	blt.w	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae7c:	f11c 0901 	adds.w	r9, ip, #1
 801ae80:	f53f af71 	bmi.w	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae84:	45ce      	cmp	lr, r9
 801ae86:	f6ff af6e 	blt.w	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae8a:	b21b      	sxth	r3, r3
 801ae8c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801ae90:	fa0f f28e 	sxth.w	r2, lr
 801ae94:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801ae98:	9200      	str	r2, [sp, #0]
 801ae9a:	4639      	mov	r1, r7
 801ae9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aea0:	f7ff fc7c 	bl	801a79c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801aea4:	e75f      	b.n	801ad66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801aea6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aea8:	1429      	asrs	r1, r5, #16
 801aeaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aeac:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801aeb0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801aeb4:	1433      	asrs	r3, r6, #16
 801aeb6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aeba:	fb0c 1303 	mla	r3, ip, r3, r1
 801aebe:	990e      	ldr	r1, [sp, #56]	; 0x38
 801aec0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801aec4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801aec8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801aecc:	2a00      	cmp	r2, #0
 801aece:	f000 8129 	beq.w	801b124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801aed2:	684c      	ldr	r4, [r1, #4]
 801aed4:	940c      	str	r4, [sp, #48]	; 0x30
 801aed6:	0e24      	lsrs	r4, r4, #24
 801aed8:	9413      	str	r4, [sp, #76]	; 0x4c
 801aeda:	b198      	cbz	r0, 801af04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801aedc:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801aee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aee4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801aee8:	f10c 0c04 	add.w	ip, ip, #4
 801aeec:	eb01 080c 	add.w	r8, r1, ip
 801aef0:	f851 100c 	ldr.w	r1, [r1, ip]
 801aef4:	9108      	str	r1, [sp, #32]
 801aef6:	0e09      	lsrs	r1, r1, #24
 801aef8:	9110      	str	r1, [sp, #64]	; 0x40
 801aefa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801aefe:	910d      	str	r1, [sp, #52]	; 0x34
 801af00:	0e09      	lsrs	r1, r1, #24
 801af02:	9114      	str	r1, [sp, #80]	; 0x50
 801af04:	b292      	uxth	r2, r2
 801af06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af08:	b280      	uxth	r0, r0
 801af0a:	fb02 f900 	mul.w	r9, r2, r0
 801af0e:	0112      	lsls	r2, r2, #4
 801af10:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801af14:	eba2 0809 	sub.w	r8, r2, r9
 801af18:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801af1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af1e:	b280      	uxth	r0, r0
 801af20:	fa1f f888 	uxth.w	r8, r8
 801af24:	1a09      	subs	r1, r1, r0
 801af26:	fb08 f202 	mul.w	r2, r8, r2
 801af2a:	b289      	uxth	r1, r1
 801af2c:	fb01 220e 	mla	r2, r1, lr, r2
 801af30:	fb00 2204 	mla	r2, r0, r4, r2
 801af34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af36:	fb09 2204 	mla	r2, r9, r4, r2
 801af3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801af3e:	2a00      	cmp	r2, #0
 801af40:	f000 80e8 	beq.w	801b114 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801af44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801af48:	d01b      	beq.n	801af82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801af4a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801af4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801af52:	fb0e fa0a 	mul.w	sl, lr, sl
 801af56:	fb0e fe03 	mul.w	lr, lr, r3
 801af5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801af5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801af62:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801af66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801af6e:	4453      	add	r3, sl
 801af70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af74:	0a1b      	lsrs	r3, r3, #8
 801af76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801af7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af7e:	ea43 030c 	orr.w	r3, r3, ip
 801af82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af84:	2cff      	cmp	r4, #255	; 0xff
 801af86:	d021      	beq.n	801afcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801af88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af8a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af90:	fb04 fc0c 	mul.w	ip, r4, ip
 801af94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af96:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801af9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801afa0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801afa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afa8:	fb04 fa0a 	mul.w	sl, r4, sl
 801afac:	44e6      	add	lr, ip
 801afae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801afb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801afb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801afba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801afc6:	ea4e 040a 	orr.w	r4, lr, sl
 801afca:	940c      	str	r4, [sp, #48]	; 0x30
 801afcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801afce:	2cff      	cmp	r4, #255	; 0xff
 801afd0:	d021      	beq.n	801b016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801afd2:	9c08      	ldr	r4, [sp, #32]
 801afd4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801afd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801afda:	fb04 fc0c 	mul.w	ip, r4, ip
 801afde:	9c08      	ldr	r4, [sp, #32]
 801afe0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801afe4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801afe6:	fb04 fa0e 	mul.w	sl, r4, lr
 801afea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801afee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801aff2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aff6:	44e6      	add	lr, ip
 801aff8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801affc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b000:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b004:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b008:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b00c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b010:	ea4e 040a 	orr.w	r4, lr, sl
 801b014:	9408      	str	r4, [sp, #32]
 801b016:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b018:	2cff      	cmp	r4, #255	; 0xff
 801b01a:	d021      	beq.n	801b060 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801b01c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b01e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b022:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b024:	fb04 fc0c 	mul.w	ip, r4, ip
 801b028:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b02a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b02e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b032:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b034:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b038:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b03c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b040:	44e6      	add	lr, ip
 801b042:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b046:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b04a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b04e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b052:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b056:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b05a:	ea4e 040a 	orr.w	r4, lr, sl
 801b05e:	940d      	str	r4, [sp, #52]	; 0x34
 801b060:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b062:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b06a:	2aff      	cmp	r2, #255	; 0xff
 801b06c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b070:	9c08      	ldr	r4, [sp, #32]
 801b072:	fb08 fc0c 	mul.w	ip, r8, ip
 801b076:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b07a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b07e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b080:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b084:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b088:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b08a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b08e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b092:	fb08 f80e 	mul.w	r8, r8, lr
 801b096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b09a:	fb01 8303 	mla	r3, r1, r3, r8
 801b09e:	9908      	ldr	r1, [sp, #32]
 801b0a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b0a4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b0a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b0aa:	fb00 330a 	mla	r3, r0, sl, r3
 801b0ae:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801b0b2:	fb09 3e0e 	mla	lr, r9, lr, r3
 801b0b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b0ba:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b0be:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b0c2:	fa5f f08c 	uxtb.w	r0, ip
 801b0c6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801b0ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b0ce:	d032      	beq.n	801b136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801b0d0:	43d2      	mvns	r2, r2
 801b0d2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801b0d6:	b2d2      	uxtb	r2, r2
 801b0d8:	fb0e fe02 	mul.w	lr, lr, r2
 801b0dc:	f10e 0301 	add.w	r3, lr, #1
 801b0e0:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801b0e4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b0e8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801b0ec:	4350      	muls	r0, r2
 801b0ee:	f807 3c03 	strb.w	r3, [r7, #-3]
 801b0f2:	1c43      	adds	r3, r0, #1
 801b0f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b0f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b0fc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801b100:	4353      	muls	r3, r2
 801b102:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b106:	1c5a      	adds	r2, r3, #1
 801b108:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b10c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801b110:	f807 cc01 	strb.w	ip, [r7, #-1]
 801b114:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b116:	3703      	adds	r7, #3
 801b118:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b11c:	441d      	add	r5, r3
 801b11e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b120:	441e      	add	r6, r3
 801b122:	e64e      	b.n	801adc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801b124:	2800      	cmp	r0, #0
 801b126:	f43f aeed 	beq.w	801af04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b12a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b12e:	9108      	str	r1, [sp, #32]
 801b130:	0e09      	lsrs	r1, r1, #24
 801b132:	9110      	str	r1, [sp, #64]	; 0x40
 801b134:	e6e6      	b.n	801af04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b136:	f807 0c03 	strb.w	r0, [r7, #-3]
 801b13a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b13e:	e7e7      	b.n	801b110 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801b140:	b019      	add	sp, #100	; 0x64
 801b142:	ecbd 8b08 	vpop	{d8-d11}
 801b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b14c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801b14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b150:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b154:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b158:	2800      	cmp	r0, #0
 801b15a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b15e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b162:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b166:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b16a:	db6b      	blt.n	801b244 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b16c:	4580      	cmp	r8, r0
 801b16e:	dd69      	ble.n	801b244 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b170:	f1bc 0f00 	cmp.w	ip, #0
 801b174:	db66      	blt.n	801b244 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b176:	45e1      	cmp	r9, ip
 801b178:	dd64      	ble.n	801b244 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b17a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b17e:	f01e 0f01 	tst.w	lr, #1
 801b182:	5d16      	ldrb	r6, [r2, r4]
 801b184:	bf0c      	ite	eq
 801b186:	f006 060f 	andeq.w	r6, r6, #15
 801b18a:	1136      	asrne	r6, r6, #4
 801b18c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b190:	b2f6      	uxtb	r6, r6
 801b192:	f110 0a01 	adds.w	sl, r0, #1
 801b196:	d457      	bmi.n	801b248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b198:	45d0      	cmp	r8, sl
 801b19a:	dd55      	ble.n	801b248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b19c:	f1bc 0f00 	cmp.w	ip, #0
 801b1a0:	db52      	blt.n	801b248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b1a2:	45e1      	cmp	r9, ip
 801b1a4:	dd50      	ble.n	801b248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b1a6:	2f00      	cmp	r7, #0
 801b1a8:	f000 80ac 	beq.w	801b304 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801b1ac:	f10e 0b01 	add.w	fp, lr, #1
 801b1b0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b1b4:	f01b 0f01 	tst.w	fp, #1
 801b1b8:	5d14      	ldrb	r4, [r2, r4]
 801b1ba:	bf0c      	ite	eq
 801b1bc:	f004 040f 	andeq.w	r4, r4, #15
 801b1c0:	1124      	asrne	r4, r4, #4
 801b1c2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b1c6:	b2e4      	uxtb	r4, r4
 801b1c8:	2d00      	cmp	r5, #0
 801b1ca:	f000 8096 	beq.w	801b2fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	f10c 0c01 	add.w	ip, ip, #1
 801b1d4:	db3c      	blt.n	801b250 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b1d6:	4580      	cmp	r8, r0
 801b1d8:	dd3a      	ble.n	801b250 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b1da:	f1bc 0f00 	cmp.w	ip, #0
 801b1de:	db37      	blt.n	801b250 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b1e0:	45e1      	cmp	r9, ip
 801b1e2:	dd35      	ble.n	801b250 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b1e4:	eb03 0b0e 	add.w	fp, r3, lr
 801b1e8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b1ec:	f01b 0f01 	tst.w	fp, #1
 801b1f0:	5c10      	ldrb	r0, [r2, r0]
 801b1f2:	bf0c      	ite	eq
 801b1f4:	f000 000f 	andeq.w	r0, r0, #15
 801b1f8:	1100      	asrne	r0, r0, #4
 801b1fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b1fe:	b2c0      	uxtb	r0, r0
 801b200:	f1ba 0f00 	cmp.w	sl, #0
 801b204:	db26      	blt.n	801b254 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b206:	45d0      	cmp	r8, sl
 801b208:	dd24      	ble.n	801b254 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b20a:	f1bc 0f00 	cmp.w	ip, #0
 801b20e:	db21      	blt.n	801b254 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b210:	45e1      	cmp	r9, ip
 801b212:	dd1f      	ble.n	801b254 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b214:	b307      	cbz	r7, 801b258 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801b216:	3301      	adds	r3, #1
 801b218:	449e      	add	lr, r3
 801b21a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b21e:	f01e 0f01 	tst.w	lr, #1
 801b222:	5cd3      	ldrb	r3, [r2, r3]
 801b224:	bf0c      	ite	eq
 801b226:	f003 030f 	andeq.w	r3, r3, #15
 801b22a:	111b      	asrne	r3, r3, #4
 801b22c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b230:	b2db      	uxtb	r3, r3
 801b232:	2f0f      	cmp	r7, #15
 801b234:	d911      	bls.n	801b25a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801b236:	4b35      	ldr	r3, [pc, #212]	; (801b30c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801b238:	f240 1157 	movw	r1, #343	; 0x157
 801b23c:	4a34      	ldr	r2, [pc, #208]	; (801b310 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801b23e:	4835      	ldr	r0, [pc, #212]	; (801b314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801b240:	f001 f87c 	bl	801c33c <__assert_func>
 801b244:	2600      	movs	r6, #0
 801b246:	e7a4      	b.n	801b192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801b248:	2400      	movs	r4, #0
 801b24a:	e7bd      	b.n	801b1c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801b24c:	463c      	mov	r4, r7
 801b24e:	e7be      	b.n	801b1ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801b250:	2000      	movs	r0, #0
 801b252:	e7d5      	b.n	801b200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801b254:	2300      	movs	r3, #0
 801b256:	e7ec      	b.n	801b232 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801b258:	463b      	mov	r3, r7
 801b25a:	2d0f      	cmp	r5, #15
 801b25c:	d8eb      	bhi.n	801b236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b25e:	b2bf      	uxth	r7, r7
 801b260:	b2ad      	uxth	r5, r5
 801b262:	fb07 f205 	mul.w	r2, r7, r5
 801b266:	013f      	lsls	r7, r7, #4
 801b268:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b26c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b270:	1abf      	subs	r7, r7, r2
 801b272:	b2ad      	uxth	r5, r5
 801b274:	b2bf      	uxth	r7, r7
 801b276:	ebac 0c05 	sub.w	ip, ip, r5
 801b27a:	437c      	muls	r4, r7
 801b27c:	fa1f fc8c 	uxth.w	ip, ip
 801b280:	fb06 440c 	mla	r4, r6, ip, r4
 801b284:	fb05 4400 	mla	r4, r5, r0, r4
 801b288:	fb02 4203 	mla	r2, r2, r3, r4
 801b28c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b290:	b38a      	cbz	r2, 801b2f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801b292:	4b21      	ldr	r3, [pc, #132]	; (801b318 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801b294:	681c      	ldr	r4, [r3, #0]
 801b296:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801b29a:	b2e5      	uxtb	r5, r4
 801b29c:	4353      	muls	r3, r2
 801b29e:	1c5a      	adds	r2, r3, #1
 801b2a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b2a4:	1212      	asrs	r2, r2, #8
 801b2a6:	b290      	uxth	r0, r2
 801b2a8:	43d2      	mvns	r2, r2
 801b2aa:	fb15 f500 	smulbb	r5, r5, r0
 801b2ae:	b2d3      	uxtb	r3, r2
 801b2b0:	780a      	ldrb	r2, [r1, #0]
 801b2b2:	fb02 5203 	mla	r2, r2, r3, r5
 801b2b6:	b292      	uxth	r2, r2
 801b2b8:	1c55      	adds	r5, r2, #1
 801b2ba:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b2be:	784d      	ldrb	r5, [r1, #1]
 801b2c0:	fb15 f503 	smulbb	r5, r5, r3
 801b2c4:	1212      	asrs	r2, r2, #8
 801b2c6:	700a      	strb	r2, [r1, #0]
 801b2c8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801b2cc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b2d0:	fb02 5200 	mla	r2, r2, r0, r5
 801b2d4:	b292      	uxth	r2, r2
 801b2d6:	1c55      	adds	r5, r2, #1
 801b2d8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b2dc:	1212      	asrs	r2, r2, #8
 801b2de:	704a      	strb	r2, [r1, #1]
 801b2e0:	788a      	ldrb	r2, [r1, #2]
 801b2e2:	fb12 f303 	smulbb	r3, r2, r3
 801b2e6:	fb04 3300 	mla	r3, r4, r0, r3
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	1c5a      	adds	r2, r3, #1
 801b2ee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b2f2:	121b      	asrs	r3, r3, #8
 801b2f4:	708b      	strb	r3, [r1, #2]
 801b2f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2fa:	2f0f      	cmp	r7, #15
 801b2fc:	d89b      	bhi.n	801b236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b2fe:	462b      	mov	r3, r5
 801b300:	4628      	mov	r0, r5
 801b302:	e7ac      	b.n	801b25e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801b304:	2d00      	cmp	r5, #0
 801b306:	d1a1      	bne.n	801b24c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801b308:	462c      	mov	r4, r5
 801b30a:	e7f8      	b.n	801b2fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801b30c:	08020637 	.word	0x08020637
 801b310:	08020aee 	.word	0x08020aee
 801b314:	080206bf 	.word	0x080206bf
 801b318:	24006c70 	.word	0x24006c70

0801b31c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b320:	ed2d 8b08 	vpush	{d8-d11}
 801b324:	b097      	sub	sp, #92	; 0x5c
 801b326:	eeb0 aa40 	vmov.f32	s20, s0
 801b32a:	eef0 9a60 	vmov.f32	s19, s1
 801b32e:	9214      	str	r2, [sp, #80]	; 0x50
 801b330:	eeb0 9a41 	vmov.f32	s18, s2
 801b334:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b336:	eeb0 8a62 	vmov.f32	s16, s5
 801b33a:	9309      	str	r3, [sp, #36]	; 0x24
 801b33c:	eef0 8a43 	vmov.f32	s17, s6
 801b340:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b344:	eef0 ba44 	vmov.f32	s23, s8
 801b348:	9015      	str	r0, [sp, #84]	; 0x54
 801b34a:	eeb0 ba64 	vmov.f32	s22, s9
 801b34e:	6850      	ldr	r0, [r2, #4]
 801b350:	eef0 aa45 	vmov.f32	s21, s10
 801b354:	910c      	str	r1, [sp, #48]	; 0x30
 801b356:	930e      	str	r3, [sp, #56]	; 0x38
 801b358:	6812      	ldr	r2, [r2, #0]
 801b35a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b35e:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801b362:	fb00 1303 	mla	r3, r0, r3, r1
 801b366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b36a:	eb02 0a03 	add.w	sl, r2, r3
 801b36e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b370:	689b      	ldr	r3, [r3, #8]
 801b372:	3301      	adds	r3, #1
 801b374:	f023 0301 	bic.w	r3, r3, #1
 801b378:	930f      	str	r3, [sp, #60]	; 0x3c
 801b37a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b37c:	681f      	ldr	r7, [r3, #0]
 801b37e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b380:	2b00      	cmp	r3, #0
 801b382:	dc03      	bgt.n	801b38c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b384:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b386:	2b00      	cmp	r3, #0
 801b388:	f340 8247 	ble.w	801b81a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b38c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b38e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b392:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b396:	1e48      	subs	r0, r1, #1
 801b398:	f102 3cff 	add.w	ip, r2, #4294967295
 801b39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	f340 80e5 	ble.w	801b56e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b3a4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801b3a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b3ac:	d406      	bmi.n	801b3bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3ae:	4586      	cmp	lr, r0
 801b3b0:	da04      	bge.n	801b3bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	db02      	blt.n	801b3bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3b6:	4563      	cmp	r3, ip
 801b3b8:	f2c0 80da 	blt.w	801b570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b3bc:	f11e 0e01 	adds.w	lr, lr, #1
 801b3c0:	f100 80cb 	bmi.w	801b55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b3c4:	4571      	cmp	r1, lr
 801b3c6:	f2c0 80c8 	blt.w	801b55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b3ca:	3301      	adds	r3, #1
 801b3cc:	f100 80c5 	bmi.w	801b55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	f2c0 80c2 	blt.w	801b55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3d8:	46d0      	mov	r8, sl
 801b3da:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b3de:	930d      	str	r3, [sp, #52]	; 0x34
 801b3e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f340 80e3 	ble.w	801b5ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b3e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b3ea:	1430      	asrs	r0, r6, #16
 801b3ec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b3f0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b3f4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b3f8:	142b      	asrs	r3, r5, #16
 801b3fa:	f100 812e 	bmi.w	801b65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b3fe:	f10c 3bff 	add.w	fp, ip, #4294967295
 801b402:	455b      	cmp	r3, fp
 801b404:	f280 8129 	bge.w	801b65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b408:	2800      	cmp	r0, #0
 801b40a:	f2c0 8126 	blt.w	801b65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b40e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b412:	4558      	cmp	r0, fp
 801b414:	f280 8121 	bge.w	801b65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b418:	fb00 3309 	mla	r3, r0, r9, r3
 801b41c:	0858      	lsrs	r0, r3, #1
 801b41e:	07dc      	lsls	r4, r3, #31
 801b420:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b424:	bf54      	ite	pl
 801b426:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b42a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b42e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b432:	fa5f fc8c 	uxtb.w	ip, ip
 801b436:	2a00      	cmp	r2, #0
 801b438:	f000 80fe 	beq.w	801b638 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b43c:	1c58      	adds	r0, r3, #1
 801b43e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b442:	07c0      	lsls	r0, r0, #31
 801b444:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b448:	bf54      	ite	pl
 801b44a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b44e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b452:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b456:	fa5f f08e 	uxtb.w	r0, lr
 801b45a:	9010      	str	r0, [sp, #64]	; 0x40
 801b45c:	b1d9      	cbz	r1, 801b496 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b45e:	444b      	add	r3, r9
 801b460:	0858      	lsrs	r0, r3, #1
 801b462:	07dc      	lsls	r4, r3, #31
 801b464:	f103 0301 	add.w	r3, r3, #1
 801b468:	5c38      	ldrb	r0, [r7, r0]
 801b46a:	bf54      	ite	pl
 801b46c:	f000 000f 	andpl.w	r0, r0, #15
 801b470:	1100      	asrmi	r0, r0, #4
 801b472:	07dc      	lsls	r4, r3, #31
 801b474:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b478:	b2c0      	uxtb	r0, r0
 801b47a:	900a      	str	r0, [sp, #40]	; 0x28
 801b47c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801b480:	f817 e000 	ldrb.w	lr, [r7, r0]
 801b484:	bf54      	ite	pl
 801b486:	f00e 030f 	andpl.w	r3, lr, #15
 801b48a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801b48e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b492:	b2db      	uxtb	r3, r3
 801b494:	9311      	str	r3, [sp, #68]	; 0x44
 801b496:	b292      	uxth	r2, r2
 801b498:	b289      	uxth	r1, r1
 801b49a:	0113      	lsls	r3, r2, #4
 801b49c:	fb02 f001 	mul.w	r0, r2, r1
 801b4a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b4a2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b4a6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801b4aa:	1a1b      	subs	r3, r3, r0
 801b4ac:	b289      	uxth	r1, r1
 801b4ae:	b29b      	uxth	r3, r3
 801b4b0:	ebae 0e01 	sub.w	lr, lr, r1
 801b4b4:	4353      	muls	r3, r2
 801b4b6:	fa1f fe8e 	uxth.w	lr, lr
 801b4ba:	fb0c 320e 	mla	r2, ip, lr, r3
 801b4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4c0:	fb01 2203 	mla	r2, r1, r3, r2
 801b4c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b4c6:	fb00 2203 	mla	r2, r0, r3, r2
 801b4ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b4ce:	2a00      	cmp	r2, #0
 801b4d0:	d039      	beq.n	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b4d2:	4bc7      	ldr	r3, [pc, #796]	; (801b7f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b4d4:	6819      	ldr	r1, [r3, #0]
 801b4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4d8:	fa5f fc81 	uxtb.w	ip, r1
 801b4dc:	435a      	muls	r2, r3
 801b4de:	1c53      	adds	r3, r2, #1
 801b4e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b4e4:	1212      	asrs	r2, r2, #8
 801b4e6:	b290      	uxth	r0, r2
 801b4e8:	43d2      	mvns	r2, r2
 801b4ea:	fb1c fc00 	smulbb	ip, ip, r0
 801b4ee:	b2d3      	uxtb	r3, r2
 801b4f0:	f898 2000 	ldrb.w	r2, [r8]
 801b4f4:	fb02 c203 	mla	r2, r2, r3, ip
 801b4f8:	b292      	uxth	r2, r2
 801b4fa:	f102 0c01 	add.w	ip, r2, #1
 801b4fe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b502:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b506:	fb1c fc03 	smulbb	ip, ip, r3
 801b50a:	1212      	asrs	r2, r2, #8
 801b50c:	f888 2000 	strb.w	r2, [r8]
 801b510:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b514:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b518:	fb02 c200 	mla	r2, r2, r0, ip
 801b51c:	b292      	uxth	r2, r2
 801b51e:	f102 0c01 	add.w	ip, r2, #1
 801b522:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b526:	1212      	asrs	r2, r2, #8
 801b528:	f888 2001 	strb.w	r2, [r8, #1]
 801b52c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b530:	fb12 f303 	smulbb	r3, r2, r3
 801b534:	fb01 3300 	mla	r3, r1, r0, r3
 801b538:	b29b      	uxth	r3, r3
 801b53a:	1c5a      	adds	r2, r3, #1
 801b53c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b540:	121b      	asrs	r3, r3, #8
 801b542:	f888 3002 	strb.w	r3, [r8, #2]
 801b546:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b548:	f108 0803 	add.w	r8, r8, #3
 801b54c:	441d      	add	r5, r3
 801b54e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b550:	441e      	add	r6, r3
 801b552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b554:	3b01      	subs	r3, #1
 801b556:	930d      	str	r3, [sp, #52]	; 0x34
 801b558:	e742      	b.n	801b3e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801b55a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b55c:	f10a 0a03 	add.w	sl, sl, #3
 801b560:	441d      	add	r5, r3
 801b562:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b564:	441e      	add	r6, r3
 801b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b568:	3b01      	subs	r3, #1
 801b56a:	9309      	str	r3, [sp, #36]	; 0x24
 801b56c:	e716      	b.n	801b39c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b56e:	d024      	beq.n	801b5ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b572:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b574:	3b01      	subs	r3, #1
 801b576:	fb00 5003 	mla	r0, r0, r3, r5
 801b57a:	1400      	asrs	r0, r0, #16
 801b57c:	f53f af2b 	bmi.w	801b3d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b580:	3901      	subs	r1, #1
 801b582:	4288      	cmp	r0, r1
 801b584:	f6bf af27 	bge.w	801b3d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b588:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b58a:	fb01 6303 	mla	r3, r1, r3, r6
 801b58e:	141b      	asrs	r3, r3, #16
 801b590:	f53f af21 	bmi.w	801b3d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b594:	3a01      	subs	r2, #1
 801b596:	4293      	cmp	r3, r2
 801b598:	f6bf af1d 	bge.w	801b3d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b59c:	f10a 0e03 	add.w	lr, sl, #3
 801b5a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b5a4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b5a8:	f1b8 0f00 	cmp.w	r8, #0
 801b5ac:	dc76      	bgt.n	801b69c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b5b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b5b8:	44a2      	add	sl, r4
 801b5ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	f340 812c 	ble.w	801b81a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b5c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b5c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b5cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b5d0:	eef0 6a48 	vmov.f32	s13, s16
 801b5d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b5d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b5dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5e0:	ee16 5a90 	vmov	r5, s13
 801b5e4:	eef0 6a68 	vmov.f32	s13, s17
 801b5e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5ec:	ee16 6a90 	vmov	r6, s13
 801b5f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b5f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b5f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b5fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b600:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b604:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b608:	ee18 2a10 	vmov	r2, s16
 801b60c:	eeb0 8a47 	vmov.f32	s16, s14
 801b610:	fb92 f3f3 	sdiv	r3, r2, r3
 801b614:	ee18 2a90 	vmov	r2, s17
 801b618:	932b      	str	r3, [sp, #172]	; 0xac
 801b61a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b61c:	eef0 8a67 	vmov.f32	s17, s15
 801b620:	fb92 f3f3 	sdiv	r3, r2, r3
 801b624:	932c      	str	r3, [sp, #176]	; 0xb0
 801b626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b628:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b62a:	3b01      	subs	r3, #1
 801b62c:	930c      	str	r3, [sp, #48]	; 0x30
 801b62e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b630:	bf08      	it	eq
 801b632:	4613      	moveq	r3, r2
 801b634:	9309      	str	r3, [sp, #36]	; 0x24
 801b636:	e6a2      	b.n	801b37e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b638:	2900      	cmp	r1, #0
 801b63a:	f43f af2c 	beq.w	801b496 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b63e:	eb09 0003 	add.w	r0, r9, r3
 801b642:	0843      	lsrs	r3, r0, #1
 801b644:	07c0      	lsls	r0, r0, #31
 801b646:	5cfb      	ldrb	r3, [r7, r3]
 801b648:	bf54      	ite	pl
 801b64a:	f003 030f 	andpl.w	r3, r3, #15
 801b64e:	111b      	asrmi	r3, r3, #4
 801b650:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b654:	b2db      	uxtb	r3, r3
 801b656:	930a      	str	r3, [sp, #40]	; 0x28
 801b658:	e71d      	b.n	801b496 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b65a:	f113 0b01 	adds.w	fp, r3, #1
 801b65e:	f53f af72 	bmi.w	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b662:	45dc      	cmp	ip, fp
 801b664:	f6ff af6f 	blt.w	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b668:	f110 0b01 	adds.w	fp, r0, #1
 801b66c:	f53f af6b 	bmi.w	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b670:	45de      	cmp	lr, fp
 801b672:	f6ff af68 	blt.w	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b676:	9302      	str	r3, [sp, #8]
 801b678:	fa0f f38e 	sxth.w	r3, lr
 801b67c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b67e:	9301      	str	r3, [sp, #4]
 801b680:	fa0f f38c 	sxth.w	r3, ip
 801b684:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b688:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b68c:	9300      	str	r3, [sp, #0]
 801b68e:	463a      	mov	r2, r7
 801b690:	464b      	mov	r3, r9
 801b692:	4641      	mov	r1, r8
 801b694:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b696:	f7ff fd59 	bl	801b14c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b69a:	e754      	b.n	801b546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b69c:	142a      	asrs	r2, r5, #16
 801b69e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b6a2:	1433      	asrs	r3, r6, #16
 801b6a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b6a8:	fb09 2303 	mla	r3, r9, r3, r2
 801b6ac:	085a      	lsrs	r2, r3, #1
 801b6ae:	07dc      	lsls	r4, r3, #31
 801b6b0:	5cba      	ldrb	r2, [r7, r2]
 801b6b2:	bf54      	ite	pl
 801b6b4:	f002 020f 	andpl.w	r2, r2, #15
 801b6b8:	1112      	asrmi	r2, r2, #4
 801b6ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b6be:	b2d2      	uxtb	r2, r2
 801b6c0:	2900      	cmp	r1, #0
 801b6c2:	f000 8097 	beq.w	801b7f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801b6c6:	f103 0b01 	add.w	fp, r3, #1
 801b6ca:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b6ce:	f01b 0f01 	tst.w	fp, #1
 801b6d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b6d6:	bf0c      	ite	eq
 801b6d8:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b6dc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b6e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b6e4:	fa5f f48c 	uxtb.w	r4, ip
 801b6e8:	9412      	str	r4, [sp, #72]	; 0x48
 801b6ea:	b300      	cbz	r0, 801b72e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b6ec:	444b      	add	r3, r9
 801b6ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b6f2:	07dc      	lsls	r4, r3, #31
 801b6f4:	f103 0301 	add.w	r3, r3, #1
 801b6f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b6fc:	bf54      	ite	pl
 801b6fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b702:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b706:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b70a:	fa5f f48c 	uxtb.w	r4, ip
 801b70e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b712:	940b      	str	r4, [sp, #44]	; 0x2c
 801b714:	07dc      	lsls	r4, r3, #31
 801b716:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b71a:	bf54      	ite	pl
 801b71c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b720:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b724:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b728:	fa5f f38c 	uxtb.w	r3, ip
 801b72c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b72e:	b289      	uxth	r1, r1
 801b730:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b732:	b280      	uxth	r0, r0
 801b734:	fb01 f300 	mul.w	r3, r1, r0
 801b738:	0109      	lsls	r1, r1, #4
 801b73a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b73e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801b742:	1ac9      	subs	r1, r1, r3
 801b744:	b280      	uxth	r0, r0
 801b746:	b289      	uxth	r1, r1
 801b748:	ebac 0c00 	sub.w	ip, ip, r0
 801b74c:	4361      	muls	r1, r4
 801b74e:	fa1f fc8c 	uxth.w	ip, ip
 801b752:	fb02 120c 	mla	r2, r2, ip, r1
 801b756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b758:	fb00 2001 	mla	r0, r0, r1, r2
 801b75c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b75e:	fb03 0302 	mla	r3, r3, r2, r0
 801b762:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b766:	2b00      	cmp	r3, #0
 801b768:	d039      	beq.n	801b7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b76a:	4a21      	ldr	r2, [pc, #132]	; (801b7f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b76c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b770:	6810      	ldr	r0, [r2, #0]
 801b772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b774:	fa5f fc80 	uxtb.w	ip, r0
 801b778:	4353      	muls	r3, r2
 801b77a:	1c5a      	adds	r2, r3, #1
 801b77c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b780:	121b      	asrs	r3, r3, #8
 801b782:	b29a      	uxth	r2, r3
 801b784:	43db      	mvns	r3, r3
 801b786:	fb1c fc02 	smulbb	ip, ip, r2
 801b78a:	b2db      	uxtb	r3, r3
 801b78c:	fb01 c103 	mla	r1, r1, r3, ip
 801b790:	b289      	uxth	r1, r1
 801b792:	f101 0c01 	add.w	ip, r1, #1
 801b796:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b79a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b79e:	fb1c fc03 	smulbb	ip, ip, r3
 801b7a2:	1209      	asrs	r1, r1, #8
 801b7a4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b7a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b7ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b7b0:	fb01 c102 	mla	r1, r1, r2, ip
 801b7b4:	b289      	uxth	r1, r1
 801b7b6:	f101 0c01 	add.w	ip, r1, #1
 801b7ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b7be:	1209      	asrs	r1, r1, #8
 801b7c0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b7c4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b7c8:	fb11 f303 	smulbb	r3, r1, r3
 801b7cc:	fb00 3002 	mla	r0, r0, r2, r3
 801b7d0:	b280      	uxth	r0, r0
 801b7d2:	1c42      	adds	r2, r0, #1
 801b7d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b7d8:	1200      	asrs	r0, r0, #8
 801b7da:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b7de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b7e0:	f10e 0e03 	add.w	lr, lr, #3
 801b7e4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b7e8:	441d      	add	r5, r3
 801b7ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b7ec:	441e      	add	r6, r3
 801b7ee:	e6db      	b.n	801b5a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b7f0:	24006c70 	.word	0x24006c70
 801b7f4:	2800      	cmp	r0, #0
 801b7f6:	d09a      	beq.n	801b72e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b7f8:	444b      	add	r3, r9
 801b7fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b7fe:	07db      	lsls	r3, r3, #31
 801b800:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b804:	bf54      	ite	pl
 801b806:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b80a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b80e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b812:	fa5f f38c 	uxtb.w	r3, ip
 801b816:	930b      	str	r3, [sp, #44]	; 0x2c
 801b818:	e789      	b.n	801b72e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b81a:	b017      	add	sp, #92	; 0x5c
 801b81c:	ecbd 8b08 	vpop	{d8-d11}
 801b820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b828:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b82c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b830:	2800      	cmp	r0, #0
 801b832:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b836:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b83a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b83e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b842:	db6b      	blt.n	801b91c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b844:	4580      	cmp	r8, r0
 801b846:	dd69      	ble.n	801b91c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b848:	f1bc 0f00 	cmp.w	ip, #0
 801b84c:	db66      	blt.n	801b91c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b84e:	45e1      	cmp	r9, ip
 801b850:	dd64      	ble.n	801b91c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b852:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b856:	f01e 0f01 	tst.w	lr, #1
 801b85a:	5d16      	ldrb	r6, [r2, r4]
 801b85c:	bf0c      	ite	eq
 801b85e:	f006 060f 	andeq.w	r6, r6, #15
 801b862:	1136      	asrne	r6, r6, #4
 801b864:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b868:	b2f6      	uxtb	r6, r6
 801b86a:	f110 0a01 	adds.w	sl, r0, #1
 801b86e:	d457      	bmi.n	801b920 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b870:	45d0      	cmp	r8, sl
 801b872:	dd55      	ble.n	801b920 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b874:	f1bc 0f00 	cmp.w	ip, #0
 801b878:	db52      	blt.n	801b920 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b87a:	45e1      	cmp	r9, ip
 801b87c:	dd50      	ble.n	801b920 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b87e:	2f00      	cmp	r7, #0
 801b880:	f000 80a5 	beq.w	801b9ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801b884:	f10e 0b01 	add.w	fp, lr, #1
 801b888:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b88c:	f01b 0f01 	tst.w	fp, #1
 801b890:	5d14      	ldrb	r4, [r2, r4]
 801b892:	bf0c      	ite	eq
 801b894:	f004 040f 	andeq.w	r4, r4, #15
 801b898:	1124      	asrne	r4, r4, #4
 801b89a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b89e:	b2e4      	uxtb	r4, r4
 801b8a0:	2d00      	cmp	r5, #0
 801b8a2:	f000 808f 	beq.w	801b9c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	f10c 0c01 	add.w	ip, ip, #1
 801b8ac:	db3c      	blt.n	801b928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b8ae:	4580      	cmp	r8, r0
 801b8b0:	dd3a      	ble.n	801b928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b8b2:	f1bc 0f00 	cmp.w	ip, #0
 801b8b6:	db37      	blt.n	801b928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b8b8:	45e1      	cmp	r9, ip
 801b8ba:	dd35      	ble.n	801b928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b8bc:	eb03 0b0e 	add.w	fp, r3, lr
 801b8c0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b8c4:	f01b 0f01 	tst.w	fp, #1
 801b8c8:	5c10      	ldrb	r0, [r2, r0]
 801b8ca:	bf0c      	ite	eq
 801b8cc:	f000 000f 	andeq.w	r0, r0, #15
 801b8d0:	1100      	asrne	r0, r0, #4
 801b8d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b8d6:	b2c0      	uxtb	r0, r0
 801b8d8:	f1ba 0f00 	cmp.w	sl, #0
 801b8dc:	db26      	blt.n	801b92c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b8de:	45d0      	cmp	r8, sl
 801b8e0:	dd24      	ble.n	801b92c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b8e2:	f1bc 0f00 	cmp.w	ip, #0
 801b8e6:	db21      	blt.n	801b92c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b8e8:	45e1      	cmp	r9, ip
 801b8ea:	dd1f      	ble.n	801b92c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b8ec:	b307      	cbz	r7, 801b930 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801b8ee:	3301      	adds	r3, #1
 801b8f0:	449e      	add	lr, r3
 801b8f2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b8f6:	f01e 0f01 	tst.w	lr, #1
 801b8fa:	5cd3      	ldrb	r3, [r2, r3]
 801b8fc:	bf0c      	ite	eq
 801b8fe:	f003 030f 	andeq.w	r3, r3, #15
 801b902:	111b      	asrne	r3, r3, #4
 801b904:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b908:	b2db      	uxtb	r3, r3
 801b90a:	2f0f      	cmp	r7, #15
 801b90c:	d911      	bls.n	801b932 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801b90e:	4b32      	ldr	r3, [pc, #200]	; (801b9d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801b910:	f240 1157 	movw	r1, #343	; 0x157
 801b914:	4a31      	ldr	r2, [pc, #196]	; (801b9dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801b916:	4832      	ldr	r0, [pc, #200]	; (801b9e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801b918:	f000 fd10 	bl	801c33c <__assert_func>
 801b91c:	2600      	movs	r6, #0
 801b91e:	e7a4      	b.n	801b86a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801b920:	2400      	movs	r4, #0
 801b922:	e7bd      	b.n	801b8a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801b924:	463c      	mov	r4, r7
 801b926:	e7be      	b.n	801b8a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801b928:	2000      	movs	r0, #0
 801b92a:	e7d5      	b.n	801b8d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801b92c:	2300      	movs	r3, #0
 801b92e:	e7ec      	b.n	801b90a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801b930:	463b      	mov	r3, r7
 801b932:	2d0f      	cmp	r5, #15
 801b934:	d8eb      	bhi.n	801b90e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b936:	b2bf      	uxth	r7, r7
 801b938:	b2ad      	uxth	r5, r5
 801b93a:	fb07 f205 	mul.w	r2, r7, r5
 801b93e:	013f      	lsls	r7, r7, #4
 801b940:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b944:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b948:	1abf      	subs	r7, r7, r2
 801b94a:	b2ad      	uxth	r5, r5
 801b94c:	b2bf      	uxth	r7, r7
 801b94e:	ebac 0c05 	sub.w	ip, ip, r5
 801b952:	437c      	muls	r4, r7
 801b954:	fa1f fc8c 	uxth.w	ip, ip
 801b958:	fb06 440c 	mla	r4, r6, ip, r4
 801b95c:	fb05 4400 	mla	r4, r5, r0, r4
 801b960:	fb02 4303 	mla	r3, r2, r3, r4
 801b964:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b968:	b353      	cbz	r3, 801b9c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801b96a:	4a1e      	ldr	r2, [pc, #120]	; (801b9e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801b96c:	7808      	ldrb	r0, [r1, #0]
 801b96e:	6814      	ldr	r4, [r2, #0]
 801b970:	b29a      	uxth	r2, r3
 801b972:	43db      	mvns	r3, r3
 801b974:	b2e5      	uxtb	r5, r4
 801b976:	b2db      	uxtb	r3, r3
 801b978:	fb15 f502 	smulbb	r5, r5, r2
 801b97c:	fb00 5003 	mla	r0, r0, r3, r5
 801b980:	b280      	uxth	r0, r0
 801b982:	1c45      	adds	r5, r0, #1
 801b984:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b988:	784d      	ldrb	r5, [r1, #1]
 801b98a:	fb15 f503 	smulbb	r5, r5, r3
 801b98e:	1200      	asrs	r0, r0, #8
 801b990:	7008      	strb	r0, [r1, #0]
 801b992:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b996:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b99a:	fb00 5002 	mla	r0, r0, r2, r5
 801b99e:	b280      	uxth	r0, r0
 801b9a0:	1c45      	adds	r5, r0, #1
 801b9a2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b9a6:	1200      	asrs	r0, r0, #8
 801b9a8:	7048      	strb	r0, [r1, #1]
 801b9aa:	7888      	ldrb	r0, [r1, #2]
 801b9ac:	fb10 f303 	smulbb	r3, r0, r3
 801b9b0:	fb04 3202 	mla	r2, r4, r2, r3
 801b9b4:	b292      	uxth	r2, r2
 801b9b6:	1c53      	adds	r3, r2, #1
 801b9b8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b9bc:	1212      	asrs	r2, r2, #8
 801b9be:	708a      	strb	r2, [r1, #2]
 801b9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c4:	2f0f      	cmp	r7, #15
 801b9c6:	d8a2      	bhi.n	801b90e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b9c8:	462b      	mov	r3, r5
 801b9ca:	4628      	mov	r0, r5
 801b9cc:	e7b3      	b.n	801b936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801b9ce:	2d00      	cmp	r5, #0
 801b9d0:	d1a8      	bne.n	801b924 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801b9d2:	462c      	mov	r4, r5
 801b9d4:	e7f8      	b.n	801b9c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801b9d6:	bf00      	nop
 801b9d8:	08020637 	.word	0x08020637
 801b9dc:	08020aee 	.word	0x08020aee
 801b9e0:	080206bf 	.word	0x080206bf
 801b9e4:	24006c70 	.word	0x24006c70

0801b9e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ec:	ed2d 8b08 	vpush	{d8-d11}
 801b9f0:	b093      	sub	sp, #76	; 0x4c
 801b9f2:	461c      	mov	r4, r3
 801b9f4:	eeb0 aa40 	vmov.f32	s20, s0
 801b9f8:	920c      	str	r2, [sp, #48]	; 0x30
 801b9fa:	eef0 9a60 	vmov.f32	s19, s1
 801b9fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ba00:	eeb0 9a41 	vmov.f32	s18, s2
 801ba04:	9011      	str	r0, [sp, #68]	; 0x44
 801ba06:	eeb0 8a62 	vmov.f32	s16, s5
 801ba0a:	6850      	ldr	r0, [r2, #4]
 801ba0c:	eef0 8a43 	vmov.f32	s17, s6
 801ba10:	9107      	str	r1, [sp, #28]
 801ba12:	eef0 ba44 	vmov.f32	s23, s8
 801ba16:	6812      	ldr	r2, [r2, #0]
 801ba18:	eeb0 ba64 	vmov.f32	s22, s9
 801ba1c:	eef0 aa45 	vmov.f32	s21, s10
 801ba20:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ba24:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801ba28:	fb00 1303 	mla	r3, r0, r3, r1
 801ba2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba30:	eb02 0b03 	add.w	fp, r2, r3
 801ba34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba36:	689b      	ldr	r3, [r3, #8]
 801ba38:	3301      	adds	r3, #1
 801ba3a:	f023 0301 	bic.w	r3, r3, #1
 801ba3e:	9309      	str	r3, [sp, #36]	; 0x24
 801ba40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba42:	f8d3 8000 	ldr.w	r8, [r3]
 801ba46:	9b07      	ldr	r3, [sp, #28]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	dc03      	bgt.n	801ba54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ba4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	f340 822b 	ble.w	801beaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ba54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ba5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ba5e:	1e48      	subs	r0, r1, #1
 801ba60:	1e57      	subs	r7, r2, #1
 801ba62:	2c00      	cmp	r4, #0
 801ba64:	f340 80d7 	ble.w	801bc16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ba68:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ba6c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ba70:	d406      	bmi.n	801ba80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba72:	4584      	cmp	ip, r0
 801ba74:	da04      	bge.n	801ba80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	db02      	blt.n	801ba80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba7a:	42bb      	cmp	r3, r7
 801ba7c:	f2c0 80cc 	blt.w	801bc18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ba80:	f11c 0c01 	adds.w	ip, ip, #1
 801ba84:	f100 80bf 	bmi.w	801bc06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba88:	4561      	cmp	r1, ip
 801ba8a:	f2c0 80bc 	blt.w	801bc06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba8e:	3301      	adds	r3, #1
 801ba90:	f100 80b9 	bmi.w	801bc06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba94:	429a      	cmp	r2, r3
 801ba96:	f2c0 80b6 	blt.w	801bc06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba9a:	46a2      	mov	sl, r4
 801ba9c:	465f      	mov	r7, fp
 801ba9e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801baa2:	f1ba 0f00 	cmp.w	sl, #0
 801baa6:	f340 80d4 	ble.w	801bc52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801baaa:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801baae:	1430      	asrs	r0, r6, #16
 801bab0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801bab4:	9308      	str	r3, [sp, #32]
 801bab6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bab8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801babc:	142b      	asrs	r3, r5, #16
 801babe:	f100 8124 	bmi.w	801bd0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bac2:	f10c 32ff 	add.w	r2, ip, #4294967295
 801bac6:	4293      	cmp	r3, r2
 801bac8:	f280 811f 	bge.w	801bd0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bacc:	2800      	cmp	r0, #0
 801bace:	f2c0 811c 	blt.w	801bd0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bad2:	f10e 32ff 	add.w	r2, lr, #4294967295
 801bad6:	4290      	cmp	r0, r2
 801bad8:	f280 8117 	bge.w	801bd0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801badc:	fb00 3309 	mla	r3, r0, r9, r3
 801bae0:	0858      	lsrs	r0, r3, #1
 801bae2:	07da      	lsls	r2, r3, #31
 801bae4:	9a08      	ldr	r2, [sp, #32]
 801bae6:	f818 c000 	ldrb.w	ip, [r8, r0]
 801baea:	bf54      	ite	pl
 801baec:	f00c 0c0f 	andpl.w	ip, ip, #15
 801baf0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801baf4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801baf8:	fa5f fc8c 	uxtb.w	ip, ip
 801bafc:	2a00      	cmp	r2, #0
 801bafe:	f000 80ed 	beq.w	801bcdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801bb02:	1c58      	adds	r0, r3, #1
 801bb04:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801bb08:	07c0      	lsls	r0, r0, #31
 801bb0a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801bb0e:	bf54      	ite	pl
 801bb10:	f00e 0e0f 	andpl.w	lr, lr, #15
 801bb14:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801bb18:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801bb1c:	fa5f fe8e 	uxtb.w	lr, lr
 801bb20:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801bb24:	b1c9      	cbz	r1, 801bb5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bb26:	444b      	add	r3, r9
 801bb28:	0858      	lsrs	r0, r3, #1
 801bb2a:	07da      	lsls	r2, r3, #31
 801bb2c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bb30:	bf54      	ite	pl
 801bb32:	f000 000f 	andpl.w	r0, r0, #15
 801bb36:	1100      	asrmi	r0, r0, #4
 801bb38:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801bb3c:	b2c0      	uxtb	r0, r0
 801bb3e:	900a      	str	r0, [sp, #40]	; 0x28
 801bb40:	1c58      	adds	r0, r3, #1
 801bb42:	0843      	lsrs	r3, r0, #1
 801bb44:	07c2      	lsls	r2, r0, #31
 801bb46:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bb4a:	bf54      	ite	pl
 801bb4c:	f003 030f 	andpl.w	r3, r3, #15
 801bb50:	111b      	asrmi	r3, r3, #4
 801bb52:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bb56:	b2db      	uxtb	r3, r3
 801bb58:	930e      	str	r3, [sp, #56]	; 0x38
 801bb5a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bb5e:	b289      	uxth	r1, r1
 801bb60:	fb02 f301 	mul.w	r3, r2, r1
 801bb64:	0112      	lsls	r2, r2, #4
 801bb66:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bb6a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bb6e:	1ad2      	subs	r2, r2, r3
 801bb70:	b289      	uxth	r1, r1
 801bb72:	b292      	uxth	r2, r2
 801bb74:	1a40      	subs	r0, r0, r1
 801bb76:	fa1f fe80 	uxth.w	lr, r0
 801bb7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bb7c:	4342      	muls	r2, r0
 801bb7e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801bb82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb84:	fb01 c102 	mla	r1, r1, r2, ip
 801bb88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb8a:	fb03 1302 	mla	r3, r3, r2, r1
 801bb8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb92:	b383      	cbz	r3, 801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bb94:	4ac7      	ldr	r2, [pc, #796]	; (801beb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801bb96:	2bff      	cmp	r3, #255	; 0xff
 801bb98:	6812      	ldr	r2, [r2, #0]
 801bb9a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801bb9e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801bba2:	b2d2      	uxtb	r2, r2
 801bba4:	f000 80ac 	beq.w	801bd00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801bba8:	b299      	uxth	r1, r3
 801bbaa:	43db      	mvns	r3, r3
 801bbac:	f897 c000 	ldrb.w	ip, [r7]
 801bbb0:	fb12 f201 	smulbb	r2, r2, r1
 801bbb4:	b2db      	uxtb	r3, r3
 801bbb6:	fb10 f001 	smulbb	r0, r0, r1
 801bbba:	fb0c 2203 	mla	r2, ip, r3, r2
 801bbbe:	fb1e f101 	smulbb	r1, lr, r1
 801bbc2:	b292      	uxth	r2, r2
 801bbc4:	f102 0c01 	add.w	ip, r2, #1
 801bbc8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bbcc:	1212      	asrs	r2, r2, #8
 801bbce:	703a      	strb	r2, [r7, #0]
 801bbd0:	787a      	ldrb	r2, [r7, #1]
 801bbd2:	fb02 0003 	mla	r0, r2, r3, r0
 801bbd6:	b280      	uxth	r0, r0
 801bbd8:	1c42      	adds	r2, r0, #1
 801bbda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bbde:	78ba      	ldrb	r2, [r7, #2]
 801bbe0:	fb02 1303 	mla	r3, r2, r3, r1
 801bbe4:	1200      	asrs	r0, r0, #8
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	7078      	strb	r0, [r7, #1]
 801bbea:	f103 0e01 	add.w	lr, r3, #1
 801bbee:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bbf2:	121b      	asrs	r3, r3, #8
 801bbf4:	70bb      	strb	r3, [r7, #2]
 801bbf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bbf8:	3703      	adds	r7, #3
 801bbfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bbfe:	441d      	add	r5, r3
 801bc00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc02:	441e      	add	r6, r3
 801bc04:	e74d      	b.n	801baa2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801bc06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc08:	3c01      	subs	r4, #1
 801bc0a:	f10b 0b03 	add.w	fp, fp, #3
 801bc0e:	441d      	add	r5, r3
 801bc10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc12:	441e      	add	r6, r3
 801bc14:	e725      	b.n	801ba62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bc16:	d021      	beq.n	801bc5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801bc18:	1e63      	subs	r3, r4, #1
 801bc1a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bc1c:	fb00 5003 	mla	r0, r0, r3, r5
 801bc20:	1400      	asrs	r0, r0, #16
 801bc22:	f53f af3a 	bmi.w	801ba9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bc26:	3901      	subs	r1, #1
 801bc28:	4288      	cmp	r0, r1
 801bc2a:	f6bf af36 	bge.w	801ba9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bc2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bc30:	fb01 6303 	mla	r3, r1, r3, r6
 801bc34:	141b      	asrs	r3, r3, #16
 801bc36:	f53f af30 	bmi.w	801ba9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bc3a:	3a01      	subs	r2, #1
 801bc3c:	4293      	cmp	r3, r2
 801bc3e:	f6bf af2c 	bge.w	801ba9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bc42:	f10b 0c03 	add.w	ip, fp, #3
 801bc46:	46a6      	mov	lr, r4
 801bc48:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bc4c:	f1be 0f00 	cmp.w	lr, #0
 801bc50:	dc79      	bgt.n	801bd46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801bc52:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801bc56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc5a:	44a3      	add	fp, r4
 801bc5c:	9b07      	ldr	r3, [sp, #28]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	f340 8123 	ble.w	801beaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bc64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bc6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bc72:	eef0 6a48 	vmov.f32	s13, s16
 801bc76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bc7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bc7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc82:	ee16 5a90 	vmov	r5, s13
 801bc86:	eef0 6a68 	vmov.f32	s13, s17
 801bc8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc8e:	ee16 6a90 	vmov	r6, s13
 801bc92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bc96:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bc9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bc9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bca2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bca6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bcaa:	ee18 2a10 	vmov	r2, s16
 801bcae:	eeb0 8a47 	vmov.f32	s16, s14
 801bcb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcb6:	ee18 2a90 	vmov	r2, s17
 801bcba:	9327      	str	r3, [sp, #156]	; 0x9c
 801bcbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bcbe:	eef0 8a67 	vmov.f32	s17, s15
 801bcc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcc6:	9328      	str	r3, [sp, #160]	; 0xa0
 801bcc8:	9b07      	ldr	r3, [sp, #28]
 801bcca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bccc:	3b01      	subs	r3, #1
 801bcce:	9307      	str	r3, [sp, #28]
 801bcd0:	bf08      	it	eq
 801bcd2:	4614      	moveq	r4, r2
 801bcd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bcd6:	bf18      	it	ne
 801bcd8:	461c      	movne	r4, r3
 801bcda:	e6b4      	b.n	801ba46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bcdc:	2900      	cmp	r1, #0
 801bcde:	f43f af3c 	beq.w	801bb5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bce2:	eb09 0003 	add.w	r0, r9, r3
 801bce6:	0843      	lsrs	r3, r0, #1
 801bce8:	07c0      	lsls	r0, r0, #31
 801bcea:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bcee:	bf54      	ite	pl
 801bcf0:	f003 030f 	andpl.w	r3, r3, #15
 801bcf4:	111b      	asrmi	r3, r3, #4
 801bcf6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bcfa:	b2db      	uxtb	r3, r3
 801bcfc:	930a      	str	r3, [sp, #40]	; 0x28
 801bcfe:	e72c      	b.n	801bb5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bd00:	703a      	strb	r2, [r7, #0]
 801bd02:	7078      	strb	r0, [r7, #1]
 801bd04:	f887 e002 	strb.w	lr, [r7, #2]
 801bd08:	e775      	b.n	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd0a:	1c5a      	adds	r2, r3, #1
 801bd0c:	f53f af73 	bmi.w	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd10:	4594      	cmp	ip, r2
 801bd12:	f6ff af70 	blt.w	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd16:	1c42      	adds	r2, r0, #1
 801bd18:	f53f af6d 	bmi.w	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd1c:	4596      	cmp	lr, r2
 801bd1e:	f6ff af6a 	blt.w	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd22:	9302      	str	r3, [sp, #8]
 801bd24:	fa0f f38e 	sxth.w	r3, lr
 801bd28:	9a08      	ldr	r2, [sp, #32]
 801bd2a:	9301      	str	r3, [sp, #4]
 801bd2c:	fa0f f38c 	sxth.w	r3, ip
 801bd30:	9105      	str	r1, [sp, #20]
 801bd32:	4639      	mov	r1, r7
 801bd34:	9300      	str	r3, [sp, #0]
 801bd36:	464b      	mov	r3, r9
 801bd38:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bd3c:	4642      	mov	r2, r8
 801bd3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bd40:	f7ff fd70 	bl	801b824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801bd44:	e757      	b.n	801bbf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bd46:	142a      	asrs	r2, r5, #16
 801bd48:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bd4c:	1433      	asrs	r3, r6, #16
 801bd4e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801bd52:	fb09 2303 	mla	r3, r9, r3, r2
 801bd56:	085a      	lsrs	r2, r3, #1
 801bd58:	07d9      	lsls	r1, r3, #31
 801bd5a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801bd5e:	bf54      	ite	pl
 801bd60:	f002 020f 	andpl.w	r2, r2, #15
 801bd64:	1112      	asrmi	r2, r2, #4
 801bd66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd6a:	b2d2      	uxtb	r2, r2
 801bd6c:	2800      	cmp	r0, #0
 801bd6e:	f000 8085 	beq.w	801be7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bd72:	f103 0a01 	add.w	sl, r3, #1
 801bd76:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801bd7a:	f01a 0f01 	tst.w	sl, #1
 801bd7e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd82:	bf0c      	ite	eq
 801bd84:	f001 010f 	andeq.w	r1, r1, #15
 801bd88:	1109      	asrne	r1, r1, #4
 801bd8a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd8e:	b2c9      	uxtb	r1, r1
 801bd90:	910f      	str	r1, [sp, #60]	; 0x3c
 801bd92:	b1df      	cbz	r7, 801bdcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801bd94:	444b      	add	r3, r9
 801bd96:	0859      	lsrs	r1, r3, #1
 801bd98:	f013 0f01 	tst.w	r3, #1
 801bd9c:	f103 0301 	add.w	r3, r3, #1
 801bda0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bda4:	bf0c      	ite	eq
 801bda6:	f001 010f 	andeq.w	r1, r1, #15
 801bdaa:	1109      	asrne	r1, r1, #4
 801bdac:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bdb0:	b2c9      	uxtb	r1, r1
 801bdb2:	910b      	str	r1, [sp, #44]	; 0x2c
 801bdb4:	0859      	lsrs	r1, r3, #1
 801bdb6:	07db      	lsls	r3, r3, #31
 801bdb8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bdbc:	bf54      	ite	pl
 801bdbe:	f001 010f 	andpl.w	r1, r1, #15
 801bdc2:	1109      	asrmi	r1, r1, #4
 801bdc4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bdc8:	b2c9      	uxtb	r1, r1
 801bdca:	9110      	str	r1, [sp, #64]	; 0x40
 801bdcc:	b280      	uxth	r0, r0
 801bdce:	b2bf      	uxth	r7, r7
 801bdd0:	fb00 f307 	mul.w	r3, r0, r7
 801bdd4:	0100      	lsls	r0, r0, #4
 801bdd6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801bdda:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801bdde:	1ac0      	subs	r0, r0, r3
 801bde0:	b2bf      	uxth	r7, r7
 801bde2:	b280      	uxth	r0, r0
 801bde4:	1bc9      	subs	r1, r1, r7
 801bde6:	fa1f fa81 	uxth.w	sl, r1
 801bdea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bdec:	4348      	muls	r0, r1
 801bdee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bdf0:	fb02 020a 	mla	r2, r2, sl, r0
 801bdf4:	fb07 2701 	mla	r7, r7, r1, r2
 801bdf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdfa:	fb03 7302 	mla	r3, r3, r2, r7
 801bdfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801be02:	b393      	cbz	r3, 801be6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801be04:	4a2b      	ldr	r2, [pc, #172]	; (801beb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801be06:	2bff      	cmp	r3, #255	; 0xff
 801be08:	6811      	ldr	r1, [r2, #0]
 801be0a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801be0e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801be12:	b2c9      	uxtb	r1, r1
 801be14:	d042      	beq.n	801be9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801be16:	b298      	uxth	r0, r3
 801be18:	43db      	mvns	r3, r3
 801be1a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801be1e:	fb11 f100 	smulbb	r1, r1, r0
 801be22:	b2db      	uxtb	r3, r3
 801be24:	fb17 f700 	smulbb	r7, r7, r0
 801be28:	fb02 1103 	mla	r1, r2, r3, r1
 801be2c:	fb1a f000 	smulbb	r0, sl, r0
 801be30:	b289      	uxth	r1, r1
 801be32:	1c4a      	adds	r2, r1, #1
 801be34:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801be38:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801be3c:	fb02 7703 	mla	r7, r2, r3, r7
 801be40:	1209      	asrs	r1, r1, #8
 801be42:	b2bf      	uxth	r7, r7
 801be44:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801be48:	1c7a      	adds	r2, r7, #1
 801be4a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be4e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801be52:	fb02 0303 	mla	r3, r2, r3, r0
 801be56:	123f      	asrs	r7, r7, #8
 801be58:	b29b      	uxth	r3, r3
 801be5a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801be5e:	1c5a      	adds	r2, r3, #1
 801be60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801be64:	121b      	asrs	r3, r3, #8
 801be66:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801be6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801be6c:	f10c 0c03 	add.w	ip, ip, #3
 801be70:	f10e 3eff 	add.w	lr, lr, #4294967295
 801be74:	441d      	add	r5, r3
 801be76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801be78:	441e      	add	r6, r3
 801be7a:	e6e7      	b.n	801bc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801be7c:	2f00      	cmp	r7, #0
 801be7e:	d0a5      	beq.n	801bdcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801be80:	444b      	add	r3, r9
 801be82:	0859      	lsrs	r1, r3, #1
 801be84:	07db      	lsls	r3, r3, #31
 801be86:	f818 1001 	ldrb.w	r1, [r8, r1]
 801be8a:	bf54      	ite	pl
 801be8c:	f001 010f 	andpl.w	r1, r1, #15
 801be90:	1109      	asrmi	r1, r1, #4
 801be92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801be96:	b2c9      	uxtb	r1, r1
 801be98:	910b      	str	r1, [sp, #44]	; 0x2c
 801be9a:	e797      	b.n	801bdcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801be9c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801bea0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801bea4:	f80c ac01 	strb.w	sl, [ip, #-1]
 801bea8:	e7df      	b.n	801be6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801beaa:	b013      	add	sp, #76	; 0x4c
 801beac:	ecbd 8b08 	vpop	{d8-d11}
 801beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beb4:	24006c70 	.word	0x24006c70

0801beb8 <CRC_Lock>:
 801beb8:	4a20      	ldr	r2, [pc, #128]	; (801bf3c <CRC_Lock+0x84>)
 801beba:	b530      	push	{r4, r5, lr}
 801bebc:	6813      	ldr	r3, [r2, #0]
 801bebe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801bec2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801bec6:	f023 0301 	bic.w	r3, r3, #1
 801beca:	6013      	str	r3, [r2, #0]
 801becc:	4b1c      	ldr	r3, [pc, #112]	; (801bf40 <CRC_Lock+0x88>)
 801bece:	681a      	ldr	r2, [r3, #0]
 801bed0:	4022      	ands	r2, r4
 801bed2:	42aa      	cmp	r2, r5
 801bed4:	d005      	beq.n	801bee2 <CRC_Lock+0x2a>
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	f24c 2270 	movw	r2, #49776	; 0xc270
 801bedc:	4023      	ands	r3, r4
 801bede:	4293      	cmp	r3, r2
 801bee0:	d124      	bne.n	801bf2c <CRC_Lock+0x74>
 801bee2:	4b18      	ldr	r3, [pc, #96]	; (801bf44 <CRC_Lock+0x8c>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	bb0b      	cbnz	r3, 801bf2c <CRC_Lock+0x74>
 801bee8:	4b17      	ldr	r3, [pc, #92]	; (801bf48 <CRC_Lock+0x90>)
 801beea:	681a      	ldr	r2, [r3, #0]
 801beec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801bef0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bef4:	d00d      	beq.n	801bf12 <CRC_Lock+0x5a>
 801bef6:	681a      	ldr	r2, [r3, #0]
 801bef8:	f240 4483 	movw	r4, #1155	; 0x483
 801befc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801bf00:	42a2      	cmp	r2, r4
 801bf02:	d006      	beq.n	801bf12 <CRC_Lock+0x5a>
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	f240 4285 	movw	r2, #1157	; 0x485
 801bf0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bf0e:	4293      	cmp	r3, r2
 801bf10:	d10c      	bne.n	801bf2c <CRC_Lock+0x74>
 801bf12:	4b0e      	ldr	r3, [pc, #56]	; (801bf4c <CRC_Lock+0x94>)
 801bf14:	2201      	movs	r2, #1
 801bf16:	601a      	str	r2, [r3, #0]
 801bf18:	681a      	ldr	r2, [r3, #0]
 801bf1a:	2a00      	cmp	r2, #0
 801bf1c:	d1fc      	bne.n	801bf18 <CRC_Lock+0x60>
 801bf1e:	4b0c      	ldr	r3, [pc, #48]	; (801bf50 <CRC_Lock+0x98>)
 801bf20:	6018      	str	r0, [r3, #0]
 801bf22:	6818      	ldr	r0, [r3, #0]
 801bf24:	1a43      	subs	r3, r0, r1
 801bf26:	4258      	negs	r0, r3
 801bf28:	4158      	adcs	r0, r3
 801bf2a:	bd30      	pop	{r4, r5, pc}
 801bf2c:	4b09      	ldr	r3, [pc, #36]	; (801bf54 <CRC_Lock+0x9c>)
 801bf2e:	2201      	movs	r2, #1
 801bf30:	601a      	str	r2, [r3, #0]
 801bf32:	681a      	ldr	r2, [r3, #0]
 801bf34:	2a00      	cmp	r2, #0
 801bf36:	d1fc      	bne.n	801bf32 <CRC_Lock+0x7a>
 801bf38:	4b07      	ldr	r3, [pc, #28]	; (801bf58 <CRC_Lock+0xa0>)
 801bf3a:	e7f1      	b.n	801bf20 <CRC_Lock+0x68>
 801bf3c:	e0002000 	.word	0xe0002000
 801bf40:	e000ed00 	.word	0xe000ed00
 801bf44:	e0042000 	.word	0xe0042000
 801bf48:	5c001000 	.word	0x5c001000
 801bf4c:	58024c08 	.word	0x58024c08
 801bf50:	58024c00 	.word	0x58024c00
 801bf54:	40023008 	.word	0x40023008
 801bf58:	40023000 	.word	0x40023000

0801bf5c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801bf5c:	6101      	str	r1, [r0, #16]
 801bf5e:	4770      	bx	lr

0801bf60 <_ZN8touchgfx8Gestures4tickEv>:
 801bf60:	7b83      	ldrb	r3, [r0, #14]
 801bf62:	b14b      	cbz	r3, 801bf78 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801bf64:	8903      	ldrh	r3, [r0, #8]
 801bf66:	3301      	adds	r3, #1
 801bf68:	b29b      	uxth	r3, r3
 801bf6a:	2b07      	cmp	r3, #7
 801bf6c:	8103      	strh	r3, [r0, #8]
 801bf6e:	bf81      	itttt	hi
 801bf70:	2300      	movhi	r3, #0
 801bf72:	8143      	strhhi	r3, [r0, #10]
 801bf74:	8183      	strhhi	r3, [r0, #12]
 801bf76:	7383      	strbhi	r3, [r0, #14]
 801bf78:	4770      	bx	lr
	...

0801bf7c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801bf7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bf80:	4604      	mov	r4, r0
 801bf82:	4698      	mov	r8, r3
 801bf84:	8880      	ldrh	r0, [r0, #4]
 801bf86:	4617      	mov	r7, r2
 801bf88:	4b1d      	ldr	r3, [pc, #116]	; (801c000 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801bf8a:	460e      	mov	r6, r1
 801bf8c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801bf90:	eba8 0000 	sub.w	r0, r8, r0
 801bf94:	9300      	str	r3, [sp, #0]
 801bf96:	2300      	movs	r3, #0
 801bf98:	b280      	uxth	r0, r0
 801bf9a:	8aa2      	ldrh	r2, [r4, #20]
 801bf9c:	f88d 3004 	strb.w	r3, [sp, #4]
 801bfa0:	b203      	sxth	r3, r0
 801bfa2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801bfa6:	88e1      	ldrh	r1, [r4, #6]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bfae:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bfb2:	bfb8      	it	lt
 801bfb4:	4240      	neglt	r0, r0
 801bfb6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bfba:	bfb8      	it	lt
 801bfbc:	b203      	sxthlt	r3, r0
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	dc08      	bgt.n	801bfd4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801bfc2:	1a69      	subs	r1, r5, r1
 801bfc4:	b289      	uxth	r1, r1
 801bfc6:	b20b      	sxth	r3, r1
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	bfbc      	itt	lt
 801bfcc:	4249      	neglt	r1, r1
 801bfce:	b20b      	sxthlt	r3, r1
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	da13      	bge.n	801bffc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801bfd4:	6920      	ldr	r0, [r4, #16]
 801bfd6:	4669      	mov	r1, sp
 801bfd8:	eba8 0606 	sub.w	r6, r8, r6
 801bfdc:	1bef      	subs	r7, r5, r7
 801bfde:	6803      	ldr	r3, [r0, #0]
 801bfe0:	685b      	ldr	r3, [r3, #4]
 801bfe2:	4798      	blx	r3
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	2001      	movs	r0, #1
 801bfe8:	8166      	strh	r6, [r4, #10]
 801bfea:	8123      	strh	r3, [r4, #8]
 801bfec:	81a7      	strh	r7, [r4, #12]
 801bfee:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bff2:	80e5      	strh	r5, [r4, #6]
 801bff4:	73a0      	strb	r0, [r4, #14]
 801bff6:	b004      	add	sp, #16
 801bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bffc:	2000      	movs	r0, #0
 801bffe:	e7fa      	b.n	801bff6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801c000:	0801faf0 	.word	0x0801faf0

0801c004 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801c004:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c006:	461e      	mov	r6, r3
 801c008:	1e4b      	subs	r3, r1, #1
 801c00a:	b085      	sub	sp, #20
 801c00c:	4604      	mov	r4, r0
 801c00e:	2b01      	cmp	r3, #1
 801c010:	460d      	mov	r5, r1
 801c012:	4617      	mov	r7, r2
 801c014:	d84b      	bhi.n	801c0ae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801c016:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c01a:	1cd3      	adds	r3, r2, #3
 801c01c:	b29b      	uxth	r3, r3
 801c01e:	2b06      	cmp	r3, #6
 801c020:	d916      	bls.n	801c050 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801c022:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c0c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c026:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c02a:	f8cd c004 	str.w	ip, [sp, #4]
 801c02e:	f04f 0c00 	mov.w	ip, #0
 801c032:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c036:	6900      	ldr	r0, [r0, #16]
 801c038:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c03c:	a901      	add	r1, sp, #4
 801c03e:	f88d c008 	strb.w	ip, [sp, #8]
 801c042:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c046:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c04a:	6803      	ldr	r3, [r0, #0]
 801c04c:	689b      	ldr	r3, [r3, #8]
 801c04e:	4798      	blx	r3
 801c050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c054:	1cd3      	adds	r3, r2, #3
 801c056:	b29b      	uxth	r3, r3
 801c058:	2b06      	cmp	r3, #6
 801c05a:	d916      	bls.n	801c08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c05c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c0c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c060:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c064:	f8cd c004 	str.w	ip, [sp, #4]
 801c068:	f04f 0c01 	mov.w	ip, #1
 801c06c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c070:	6920      	ldr	r0, [r4, #16]
 801c072:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c076:	a901      	add	r1, sp, #4
 801c078:	f88d c008 	strb.w	ip, [sp, #8]
 801c07c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c080:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c084:	6803      	ldr	r3, [r0, #0]
 801c086:	689b      	ldr	r3, [r3, #8]
 801c088:	4798      	blx	r3
 801c08a:	4b0d      	ldr	r3, [pc, #52]	; (801c0c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c08c:	a901      	add	r1, sp, #4
 801c08e:	6920      	ldr	r0, [r4, #16]
 801c090:	9301      	str	r3, [sp, #4]
 801c092:	2300      	movs	r3, #0
 801c094:	f88d 5008 	strb.w	r5, [sp, #8]
 801c098:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c09c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c0a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c0a4:	6803      	ldr	r3, [r0, #0]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	4798      	blx	r3
 801c0aa:	b005      	add	sp, #20
 801c0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0ae:	2900      	cmp	r1, #0
 801c0b0:	d1eb      	bne.n	801c08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c0b2:	80a2      	strh	r2, [r4, #4]
 801c0b4:	80c6      	strh	r6, [r0, #6]
 801c0b6:	60a1      	str	r1, [r4, #8]
 801c0b8:	81a1      	strh	r1, [r4, #12]
 801c0ba:	73a1      	strb	r1, [r4, #14]
 801c0bc:	e7e5      	b.n	801c08a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c0be:	bf00      	nop
 801c0c0:	0801fadc 	.word	0x0801fadc
 801c0c4:	0801fb04 	.word	0x0801fb04

0801c0c8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801c0c8:	790b      	ldrb	r3, [r1, #4]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	bf0c      	ite	eq
 801c0ce:	2301      	moveq	r3, #1
 801c0d0:	2300      	movne	r3, #0
 801c0d2:	b570      	push	{r4, r5, r6, lr}
 801c0d4:	4604      	mov	r4, r0
 801c0d6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c0da:	460e      	mov	r6, r1
 801c0dc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801c0e0:	d109      	bne.n	801c0f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801c0e2:	b14d      	cbz	r5, 801c0f8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801c0e4:	7933      	ldrb	r3, [r6, #4]
 801c0e6:	2b01      	cmp	r3, #1
 801c0e8:	d10c      	bne.n	801c104 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c0ea:	6823      	ldr	r3, [r4, #0]
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c0f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0f4:	4718      	bx	r3
 801c0f6:	b12d      	cbz	r5, 801c104 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c0f8:	6823      	ldr	r3, [r4, #0]
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	695b      	ldr	r3, [r3, #20]
 801c0fe:	4798      	blx	r3
 801c100:	2d00      	cmp	r5, #0
 801c102:	d1ef      	bne.n	801c0e4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801c104:	bd70      	pop	{r4, r5, r6, pc}

0801c106 <__aeabi_atexit>:
 801c106:	460b      	mov	r3, r1
 801c108:	4601      	mov	r1, r0
 801c10a:	4618      	mov	r0, r3
 801c10c:	f000 b93a 	b.w	801c384 <__cxa_atexit>

0801c110 <_ZdlPvj>:
 801c110:	f000 b812 	b.w	801c138 <_ZdlPv>

0801c114 <__cxa_guard_acquire>:
 801c114:	6803      	ldr	r3, [r0, #0]
 801c116:	07db      	lsls	r3, r3, #31
 801c118:	d406      	bmi.n	801c128 <__cxa_guard_acquire+0x14>
 801c11a:	7843      	ldrb	r3, [r0, #1]
 801c11c:	b103      	cbz	r3, 801c120 <__cxa_guard_acquire+0xc>
 801c11e:	deff      	udf	#255	; 0xff
 801c120:	2301      	movs	r3, #1
 801c122:	7043      	strb	r3, [r0, #1]
 801c124:	4618      	mov	r0, r3
 801c126:	4770      	bx	lr
 801c128:	2000      	movs	r0, #0
 801c12a:	4770      	bx	lr

0801c12c <__cxa_guard_release>:
 801c12c:	2301      	movs	r3, #1
 801c12e:	6003      	str	r3, [r0, #0]
 801c130:	4770      	bx	lr

0801c132 <__cxa_pure_virtual>:
 801c132:	b508      	push	{r3, lr}
 801c134:	f000 f80e 	bl	801c154 <_ZSt9terminatev>

0801c138 <_ZdlPv>:
 801c138:	f000 b976 	b.w	801c428 <free>

0801c13c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c13c:	b508      	push	{r3, lr}
 801c13e:	4780      	blx	r0
 801c140:	f000 f8f4 	bl	801c32c <abort>

0801c144 <_ZSt13get_terminatev>:
 801c144:	4b02      	ldr	r3, [pc, #8]	; (801c150 <_ZSt13get_terminatev+0xc>)
 801c146:	6818      	ldr	r0, [r3, #0]
 801c148:	f3bf 8f5b 	dmb	ish
 801c14c:	4770      	bx	lr
 801c14e:	bf00      	nop
 801c150:	240000d4 	.word	0x240000d4

0801c154 <_ZSt9terminatev>:
 801c154:	b508      	push	{r3, lr}
 801c156:	f7ff fff5 	bl	801c144 <_ZSt13get_terminatev>
 801c15a:	f7ff ffef 	bl	801c13c <_ZN10__cxxabiv111__terminateEPFvvE>

0801c15e <sinf_poly>:
 801c15e:	07cb      	lsls	r3, r1, #31
 801c160:	d412      	bmi.n	801c188 <sinf_poly+0x2a>
 801c162:	ee21 6b00 	vmul.f64	d6, d1, d0
 801c166:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801c16a:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801c16e:	eea5 7b01 	vfma.f64	d7, d5, d1
 801c172:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801c176:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c17a:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c17e:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c182:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c186:	4770      	bx	lr
 801c188:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801c18c:	ee21 6b01 	vmul.f64	d6, d1, d1
 801c190:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801c194:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801c198:	eea1 7b05 	vfma.f64	d7, d1, d5
 801c19c:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801c1a0:	eea1 0b05 	vfma.f64	d0, d1, d5
 801c1a4:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801c1a8:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c1ac:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c1b0:	e7e5      	b.n	801c17e <sinf_poly+0x20>
 801c1b2:	0000      	movs	r0, r0
 801c1b4:	0000      	movs	r0, r0
	...

0801c1b8 <sinf>:
 801c1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c1ba:	ee10 4a10 	vmov	r4, s0
 801c1be:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c1c2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801c1c6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c1ca:	eef0 7a40 	vmov.f32	s15, s0
 801c1ce:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c1d2:	d218      	bcs.n	801c206 <sinf+0x4e>
 801c1d4:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c1d8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801c1dc:	d20a      	bcs.n	801c1f4 <sinf+0x3c>
 801c1de:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801c1e2:	d103      	bne.n	801c1ec <sinf+0x34>
 801c1e4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c1e8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c1ec:	eeb0 0a67 	vmov.f32	s0, s15
 801c1f0:	b003      	add	sp, #12
 801c1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1f4:	483e      	ldr	r0, [pc, #248]	; (801c2f0 <sinf+0x138>)
 801c1f6:	eeb0 0b46 	vmov.f64	d0, d6
 801c1fa:	2100      	movs	r1, #0
 801c1fc:	b003      	add	sp, #12
 801c1fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c202:	f7ff bfac 	b.w	801c15e <sinf_poly>
 801c206:	f240 422e 	movw	r2, #1070	; 0x42e
 801c20a:	4293      	cmp	r3, r2
 801c20c:	d824      	bhi.n	801c258 <sinf+0xa0>
 801c20e:	4b38      	ldr	r3, [pc, #224]	; (801c2f0 <sinf+0x138>)
 801c210:	ed93 7b08 	vldr	d7, [r3, #32]
 801c214:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c218:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c21c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801c220:	ee17 1a90 	vmov	r1, s15
 801c224:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801c228:	1609      	asrs	r1, r1, #24
 801c22a:	ee07 1a90 	vmov	s15, r1
 801c22e:	f001 0203 	and.w	r2, r1, #3
 801c232:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c236:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c23a:	ed92 0b00 	vldr	d0, [r2]
 801c23e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801c242:	f011 0f02 	tst.w	r1, #2
 801c246:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c24a:	bf08      	it	eq
 801c24c:	4618      	moveq	r0, r3
 801c24e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c252:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c256:	e7d1      	b.n	801c1fc <sinf+0x44>
 801c258:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801c25c:	d23d      	bcs.n	801c2da <sinf+0x122>
 801c25e:	4b25      	ldr	r3, [pc, #148]	; (801c2f4 <sinf+0x13c>)
 801c260:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801c264:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801c268:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801c26c:	6a06      	ldr	r6, [r0, #32]
 801c26e:	6900      	ldr	r0, [r0, #16]
 801c270:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c274:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801c278:	40a9      	lsls	r1, r5
 801c27a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c27e:	fba1 6706 	umull	r6, r7, r1, r6
 801c282:	fb05 f301 	mul.w	r3, r5, r1
 801c286:	463a      	mov	r2, r7
 801c288:	fbe0 2301 	umlal	r2, r3, r0, r1
 801c28c:	1c11      	adds	r1, r2, #0
 801c28e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801c292:	2000      	movs	r0, #0
 801c294:	1a10      	subs	r0, r2, r0
 801c296:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801c29a:	eb63 0101 	sbc.w	r1, r3, r1
 801c29e:	f7e4 fa15 	bl	80006cc <__aeabi_l2d>
 801c2a2:	0fb5      	lsrs	r5, r6, #30
 801c2a4:	4a12      	ldr	r2, [pc, #72]	; (801c2f0 <sinf+0x138>)
 801c2a6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801c2aa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801c2e8 <sinf+0x130>
 801c2ae:	ec41 0b17 	vmov	d7, r0, r1
 801c2b2:	f003 0103 	and.w	r1, r3, #3
 801c2b6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c2ba:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c2be:	ed91 7b00 	vldr	d7, [r1]
 801c2c2:	ee20 1b00 	vmul.f64	d1, d0, d0
 801c2c6:	f013 0f02 	tst.w	r3, #2
 801c2ca:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801c2ce:	4629      	mov	r1, r5
 801c2d0:	bf08      	it	eq
 801c2d2:	4610      	moveq	r0, r2
 801c2d4:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c2d8:	e790      	b.n	801c1fc <sinf+0x44>
 801c2da:	b003      	add	sp, #12
 801c2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c2e0:	f000 b815 	b.w	801c30e <__math_invalidf>
 801c2e4:	f3af 8000 	nop.w
 801c2e8:	54442d18 	.word	0x54442d18
 801c2ec:	3c1921fb 	.word	0x3c1921fb
 801c2f0:	08020dc0 	.word	0x08020dc0
 801c2f4:	08020d60 	.word	0x08020d60

0801c2f8 <with_errnof>:
 801c2f8:	b513      	push	{r0, r1, r4, lr}
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 801c300:	f000 f84e 	bl	801c3a0 <__errno>
 801c304:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c308:	6004      	str	r4, [r0, #0]
 801c30a:	b002      	add	sp, #8
 801c30c:	bd10      	pop	{r4, pc}

0801c30e <__math_invalidf>:
 801c30e:	eef0 7a40 	vmov.f32	s15, s0
 801c312:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c316:	eef4 7a67 	vcmp.f32	s15, s15
 801c31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c31e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c322:	d602      	bvs.n	801c32a <__math_invalidf+0x1c>
 801c324:	2021      	movs	r0, #33	; 0x21
 801c326:	f7ff bfe7 	b.w	801c2f8 <with_errnof>
 801c32a:	4770      	bx	lr

0801c32c <abort>:
 801c32c:	b508      	push	{r3, lr}
 801c32e:	2006      	movs	r0, #6
 801c330:	f000 fc68 	bl	801cc04 <raise>
 801c334:	2001      	movs	r0, #1
 801c336:	f7e5 fcef 	bl	8001d18 <_exit>
	...

0801c33c <__assert_func>:
 801c33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c33e:	4614      	mov	r4, r2
 801c340:	461a      	mov	r2, r3
 801c342:	4b09      	ldr	r3, [pc, #36]	; (801c368 <__assert_func+0x2c>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	4605      	mov	r5, r0
 801c348:	68d8      	ldr	r0, [r3, #12]
 801c34a:	b14c      	cbz	r4, 801c360 <__assert_func+0x24>
 801c34c:	4b07      	ldr	r3, [pc, #28]	; (801c36c <__assert_func+0x30>)
 801c34e:	9100      	str	r1, [sp, #0]
 801c350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c354:	4906      	ldr	r1, [pc, #24]	; (801c370 <__assert_func+0x34>)
 801c356:	462b      	mov	r3, r5
 801c358:	f000 f828 	bl	801c3ac <fiprintf>
 801c35c:	f7ff ffe6 	bl	801c32c <abort>
 801c360:	4b04      	ldr	r3, [pc, #16]	; (801c374 <__assert_func+0x38>)
 801c362:	461c      	mov	r4, r3
 801c364:	e7f3      	b.n	801c34e <__assert_func+0x12>
 801c366:	bf00      	nop
 801c368:	240000d8 	.word	0x240000d8
 801c36c:	08020ea0 	.word	0x08020ea0
 801c370:	08020ead 	.word	0x08020ead
 801c374:	08020edb 	.word	0x08020edb

0801c378 <atexit>:
 801c378:	2300      	movs	r3, #0
 801c37a:	4601      	mov	r1, r0
 801c37c:	461a      	mov	r2, r3
 801c37e:	4618      	mov	r0, r3
 801c380:	f000 bd1c 	b.w	801cdbc <__register_exitproc>

0801c384 <__cxa_atexit>:
 801c384:	b510      	push	{r4, lr}
 801c386:	4c05      	ldr	r4, [pc, #20]	; (801c39c <__cxa_atexit+0x18>)
 801c388:	4613      	mov	r3, r2
 801c38a:	b12c      	cbz	r4, 801c398 <__cxa_atexit+0x14>
 801c38c:	460a      	mov	r2, r1
 801c38e:	4601      	mov	r1, r0
 801c390:	2002      	movs	r0, #2
 801c392:	f000 fd13 	bl	801cdbc <__register_exitproc>
 801c396:	bd10      	pop	{r4, pc}
 801c398:	4620      	mov	r0, r4
 801c39a:	e7fc      	b.n	801c396 <__cxa_atexit+0x12>
 801c39c:	0801cdbd 	.word	0x0801cdbd

0801c3a0 <__errno>:
 801c3a0:	4b01      	ldr	r3, [pc, #4]	; (801c3a8 <__errno+0x8>)
 801c3a2:	6818      	ldr	r0, [r3, #0]
 801c3a4:	4770      	bx	lr
 801c3a6:	bf00      	nop
 801c3a8:	240000d8 	.word	0x240000d8

0801c3ac <fiprintf>:
 801c3ac:	b40e      	push	{r1, r2, r3}
 801c3ae:	b503      	push	{r0, r1, lr}
 801c3b0:	4601      	mov	r1, r0
 801c3b2:	ab03      	add	r3, sp, #12
 801c3b4:	4805      	ldr	r0, [pc, #20]	; (801c3cc <fiprintf+0x20>)
 801c3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3ba:	6800      	ldr	r0, [r0, #0]
 801c3bc:	9301      	str	r3, [sp, #4]
 801c3be:	f000 f925 	bl	801c60c <_vfiprintf_r>
 801c3c2:	b002      	add	sp, #8
 801c3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3c8:	b003      	add	sp, #12
 801c3ca:	4770      	bx	lr
 801c3cc:	240000d8 	.word	0x240000d8

0801c3d0 <__libc_init_array>:
 801c3d0:	b570      	push	{r4, r5, r6, lr}
 801c3d2:	4d0d      	ldr	r5, [pc, #52]	; (801c408 <__libc_init_array+0x38>)
 801c3d4:	4c0d      	ldr	r4, [pc, #52]	; (801c40c <__libc_init_array+0x3c>)
 801c3d6:	1b64      	subs	r4, r4, r5
 801c3d8:	10a4      	asrs	r4, r4, #2
 801c3da:	2600      	movs	r6, #0
 801c3dc:	42a6      	cmp	r6, r4
 801c3de:	d109      	bne.n	801c3f4 <__libc_init_array+0x24>
 801c3e0:	4d0b      	ldr	r5, [pc, #44]	; (801c410 <__libc_init_array+0x40>)
 801c3e2:	4c0c      	ldr	r4, [pc, #48]	; (801c414 <__libc_init_array+0x44>)
 801c3e4:	f001 f824 	bl	801d430 <_init>
 801c3e8:	1b64      	subs	r4, r4, r5
 801c3ea:	10a4      	asrs	r4, r4, #2
 801c3ec:	2600      	movs	r6, #0
 801c3ee:	42a6      	cmp	r6, r4
 801c3f0:	d105      	bne.n	801c3fe <__libc_init_array+0x2e>
 801c3f2:	bd70      	pop	{r4, r5, r6, pc}
 801c3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801c3f8:	4798      	blx	r3
 801c3fa:	3601      	adds	r6, #1
 801c3fc:	e7ee      	b.n	801c3dc <__libc_init_array+0xc>
 801c3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801c402:	4798      	blx	r3
 801c404:	3601      	adds	r6, #1
 801c406:	e7f2      	b.n	801c3ee <__libc_init_array+0x1e>
 801c408:	08022298 	.word	0x08022298
 801c40c:	08022298 	.word	0x08022298
 801c410:	08022298 	.word	0x08022298
 801c414:	080222ac 	.word	0x080222ac

0801c418 <malloc>:
 801c418:	4b02      	ldr	r3, [pc, #8]	; (801c424 <malloc+0xc>)
 801c41a:	4601      	mov	r1, r0
 801c41c:	6818      	ldr	r0, [r3, #0]
 801c41e:	f000 b871 	b.w	801c504 <_malloc_r>
 801c422:	bf00      	nop
 801c424:	240000d8 	.word	0x240000d8

0801c428 <free>:
 801c428:	4b02      	ldr	r3, [pc, #8]	; (801c434 <free+0xc>)
 801c42a:	4601      	mov	r1, r0
 801c42c:	6818      	ldr	r0, [r3, #0]
 801c42e:	f000 b819 	b.w	801c464 <_free_r>
 801c432:	bf00      	nop
 801c434:	240000d8 	.word	0x240000d8

0801c438 <memcpy>:
 801c438:	440a      	add	r2, r1
 801c43a:	4291      	cmp	r1, r2
 801c43c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c440:	d100      	bne.n	801c444 <memcpy+0xc>
 801c442:	4770      	bx	lr
 801c444:	b510      	push	{r4, lr}
 801c446:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c44a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c44e:	4291      	cmp	r1, r2
 801c450:	d1f9      	bne.n	801c446 <memcpy+0xe>
 801c452:	bd10      	pop	{r4, pc}

0801c454 <memset>:
 801c454:	4402      	add	r2, r0
 801c456:	4603      	mov	r3, r0
 801c458:	4293      	cmp	r3, r2
 801c45a:	d100      	bne.n	801c45e <memset+0xa>
 801c45c:	4770      	bx	lr
 801c45e:	f803 1b01 	strb.w	r1, [r3], #1
 801c462:	e7f9      	b.n	801c458 <memset+0x4>

0801c464 <_free_r>:
 801c464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c466:	2900      	cmp	r1, #0
 801c468:	d048      	beq.n	801c4fc <_free_r+0x98>
 801c46a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c46e:	9001      	str	r0, [sp, #4]
 801c470:	2b00      	cmp	r3, #0
 801c472:	f1a1 0404 	sub.w	r4, r1, #4
 801c476:	bfb8      	it	lt
 801c478:	18e4      	addlt	r4, r4, r3
 801c47a:	f000 ff21 	bl	801d2c0 <__malloc_lock>
 801c47e:	4a20      	ldr	r2, [pc, #128]	; (801c500 <_free_r+0x9c>)
 801c480:	9801      	ldr	r0, [sp, #4]
 801c482:	6813      	ldr	r3, [r2, #0]
 801c484:	4615      	mov	r5, r2
 801c486:	b933      	cbnz	r3, 801c496 <_free_r+0x32>
 801c488:	6063      	str	r3, [r4, #4]
 801c48a:	6014      	str	r4, [r2, #0]
 801c48c:	b003      	add	sp, #12
 801c48e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c492:	f000 bf1b 	b.w	801d2cc <__malloc_unlock>
 801c496:	42a3      	cmp	r3, r4
 801c498:	d90b      	bls.n	801c4b2 <_free_r+0x4e>
 801c49a:	6821      	ldr	r1, [r4, #0]
 801c49c:	1862      	adds	r2, r4, r1
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	bf04      	itt	eq
 801c4a2:	681a      	ldreq	r2, [r3, #0]
 801c4a4:	685b      	ldreq	r3, [r3, #4]
 801c4a6:	6063      	str	r3, [r4, #4]
 801c4a8:	bf04      	itt	eq
 801c4aa:	1852      	addeq	r2, r2, r1
 801c4ac:	6022      	streq	r2, [r4, #0]
 801c4ae:	602c      	str	r4, [r5, #0]
 801c4b0:	e7ec      	b.n	801c48c <_free_r+0x28>
 801c4b2:	461a      	mov	r2, r3
 801c4b4:	685b      	ldr	r3, [r3, #4]
 801c4b6:	b10b      	cbz	r3, 801c4bc <_free_r+0x58>
 801c4b8:	42a3      	cmp	r3, r4
 801c4ba:	d9fa      	bls.n	801c4b2 <_free_r+0x4e>
 801c4bc:	6811      	ldr	r1, [r2, #0]
 801c4be:	1855      	adds	r5, r2, r1
 801c4c0:	42a5      	cmp	r5, r4
 801c4c2:	d10b      	bne.n	801c4dc <_free_r+0x78>
 801c4c4:	6824      	ldr	r4, [r4, #0]
 801c4c6:	4421      	add	r1, r4
 801c4c8:	1854      	adds	r4, r2, r1
 801c4ca:	42a3      	cmp	r3, r4
 801c4cc:	6011      	str	r1, [r2, #0]
 801c4ce:	d1dd      	bne.n	801c48c <_free_r+0x28>
 801c4d0:	681c      	ldr	r4, [r3, #0]
 801c4d2:	685b      	ldr	r3, [r3, #4]
 801c4d4:	6053      	str	r3, [r2, #4]
 801c4d6:	4421      	add	r1, r4
 801c4d8:	6011      	str	r1, [r2, #0]
 801c4da:	e7d7      	b.n	801c48c <_free_r+0x28>
 801c4dc:	d902      	bls.n	801c4e4 <_free_r+0x80>
 801c4de:	230c      	movs	r3, #12
 801c4e0:	6003      	str	r3, [r0, #0]
 801c4e2:	e7d3      	b.n	801c48c <_free_r+0x28>
 801c4e4:	6825      	ldr	r5, [r4, #0]
 801c4e6:	1961      	adds	r1, r4, r5
 801c4e8:	428b      	cmp	r3, r1
 801c4ea:	bf04      	itt	eq
 801c4ec:	6819      	ldreq	r1, [r3, #0]
 801c4ee:	685b      	ldreq	r3, [r3, #4]
 801c4f0:	6063      	str	r3, [r4, #4]
 801c4f2:	bf04      	itt	eq
 801c4f4:	1949      	addeq	r1, r1, r5
 801c4f6:	6021      	streq	r1, [r4, #0]
 801c4f8:	6054      	str	r4, [r2, #4]
 801c4fa:	e7c7      	b.n	801c48c <_free_r+0x28>
 801c4fc:	b003      	add	sp, #12
 801c4fe:	bd30      	pop	{r4, r5, pc}
 801c500:	24006d44 	.word	0x24006d44

0801c504 <_malloc_r>:
 801c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c506:	1ccd      	adds	r5, r1, #3
 801c508:	f025 0503 	bic.w	r5, r5, #3
 801c50c:	3508      	adds	r5, #8
 801c50e:	2d0c      	cmp	r5, #12
 801c510:	bf38      	it	cc
 801c512:	250c      	movcc	r5, #12
 801c514:	2d00      	cmp	r5, #0
 801c516:	4606      	mov	r6, r0
 801c518:	db01      	blt.n	801c51e <_malloc_r+0x1a>
 801c51a:	42a9      	cmp	r1, r5
 801c51c:	d903      	bls.n	801c526 <_malloc_r+0x22>
 801c51e:	230c      	movs	r3, #12
 801c520:	6033      	str	r3, [r6, #0]
 801c522:	2000      	movs	r0, #0
 801c524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c526:	f000 fecb 	bl	801d2c0 <__malloc_lock>
 801c52a:	4921      	ldr	r1, [pc, #132]	; (801c5b0 <_malloc_r+0xac>)
 801c52c:	680a      	ldr	r2, [r1, #0]
 801c52e:	4614      	mov	r4, r2
 801c530:	b99c      	cbnz	r4, 801c55a <_malloc_r+0x56>
 801c532:	4f20      	ldr	r7, [pc, #128]	; (801c5b4 <_malloc_r+0xb0>)
 801c534:	683b      	ldr	r3, [r7, #0]
 801c536:	b923      	cbnz	r3, 801c542 <_malloc_r+0x3e>
 801c538:	4621      	mov	r1, r4
 801c53a:	4630      	mov	r0, r6
 801c53c:	f000 fb2a 	bl	801cb94 <_sbrk_r>
 801c540:	6038      	str	r0, [r7, #0]
 801c542:	4629      	mov	r1, r5
 801c544:	4630      	mov	r0, r6
 801c546:	f000 fb25 	bl	801cb94 <_sbrk_r>
 801c54a:	1c43      	adds	r3, r0, #1
 801c54c:	d123      	bne.n	801c596 <_malloc_r+0x92>
 801c54e:	230c      	movs	r3, #12
 801c550:	6033      	str	r3, [r6, #0]
 801c552:	4630      	mov	r0, r6
 801c554:	f000 feba 	bl	801d2cc <__malloc_unlock>
 801c558:	e7e3      	b.n	801c522 <_malloc_r+0x1e>
 801c55a:	6823      	ldr	r3, [r4, #0]
 801c55c:	1b5b      	subs	r3, r3, r5
 801c55e:	d417      	bmi.n	801c590 <_malloc_r+0x8c>
 801c560:	2b0b      	cmp	r3, #11
 801c562:	d903      	bls.n	801c56c <_malloc_r+0x68>
 801c564:	6023      	str	r3, [r4, #0]
 801c566:	441c      	add	r4, r3
 801c568:	6025      	str	r5, [r4, #0]
 801c56a:	e004      	b.n	801c576 <_malloc_r+0x72>
 801c56c:	6863      	ldr	r3, [r4, #4]
 801c56e:	42a2      	cmp	r2, r4
 801c570:	bf0c      	ite	eq
 801c572:	600b      	streq	r3, [r1, #0]
 801c574:	6053      	strne	r3, [r2, #4]
 801c576:	4630      	mov	r0, r6
 801c578:	f000 fea8 	bl	801d2cc <__malloc_unlock>
 801c57c:	f104 000b 	add.w	r0, r4, #11
 801c580:	1d23      	adds	r3, r4, #4
 801c582:	f020 0007 	bic.w	r0, r0, #7
 801c586:	1ac2      	subs	r2, r0, r3
 801c588:	d0cc      	beq.n	801c524 <_malloc_r+0x20>
 801c58a:	1a1b      	subs	r3, r3, r0
 801c58c:	50a3      	str	r3, [r4, r2]
 801c58e:	e7c9      	b.n	801c524 <_malloc_r+0x20>
 801c590:	4622      	mov	r2, r4
 801c592:	6864      	ldr	r4, [r4, #4]
 801c594:	e7cc      	b.n	801c530 <_malloc_r+0x2c>
 801c596:	1cc4      	adds	r4, r0, #3
 801c598:	f024 0403 	bic.w	r4, r4, #3
 801c59c:	42a0      	cmp	r0, r4
 801c59e:	d0e3      	beq.n	801c568 <_malloc_r+0x64>
 801c5a0:	1a21      	subs	r1, r4, r0
 801c5a2:	4630      	mov	r0, r6
 801c5a4:	f000 faf6 	bl	801cb94 <_sbrk_r>
 801c5a8:	3001      	adds	r0, #1
 801c5aa:	d1dd      	bne.n	801c568 <_malloc_r+0x64>
 801c5ac:	e7cf      	b.n	801c54e <_malloc_r+0x4a>
 801c5ae:	bf00      	nop
 801c5b0:	24006d44 	.word	0x24006d44
 801c5b4:	24006d48 	.word	0x24006d48

0801c5b8 <__sfputc_r>:
 801c5b8:	6893      	ldr	r3, [r2, #8]
 801c5ba:	3b01      	subs	r3, #1
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	b410      	push	{r4}
 801c5c0:	6093      	str	r3, [r2, #8]
 801c5c2:	da08      	bge.n	801c5d6 <__sfputc_r+0x1e>
 801c5c4:	6994      	ldr	r4, [r2, #24]
 801c5c6:	42a3      	cmp	r3, r4
 801c5c8:	db01      	blt.n	801c5ce <__sfputc_r+0x16>
 801c5ca:	290a      	cmp	r1, #10
 801c5cc:	d103      	bne.n	801c5d6 <__sfputc_r+0x1e>
 801c5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5d2:	f000 bb33 	b.w	801cc3c <__swbuf_r>
 801c5d6:	6813      	ldr	r3, [r2, #0]
 801c5d8:	1c58      	adds	r0, r3, #1
 801c5da:	6010      	str	r0, [r2, #0]
 801c5dc:	7019      	strb	r1, [r3, #0]
 801c5de:	4608      	mov	r0, r1
 801c5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5e4:	4770      	bx	lr

0801c5e6 <__sfputs_r>:
 801c5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5e8:	4606      	mov	r6, r0
 801c5ea:	460f      	mov	r7, r1
 801c5ec:	4614      	mov	r4, r2
 801c5ee:	18d5      	adds	r5, r2, r3
 801c5f0:	42ac      	cmp	r4, r5
 801c5f2:	d101      	bne.n	801c5f8 <__sfputs_r+0x12>
 801c5f4:	2000      	movs	r0, #0
 801c5f6:	e007      	b.n	801c608 <__sfputs_r+0x22>
 801c5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5fc:	463a      	mov	r2, r7
 801c5fe:	4630      	mov	r0, r6
 801c600:	f7ff ffda 	bl	801c5b8 <__sfputc_r>
 801c604:	1c43      	adds	r3, r0, #1
 801c606:	d1f3      	bne.n	801c5f0 <__sfputs_r+0xa>
 801c608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c60c <_vfiprintf_r>:
 801c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c610:	460d      	mov	r5, r1
 801c612:	b09d      	sub	sp, #116	; 0x74
 801c614:	4614      	mov	r4, r2
 801c616:	4698      	mov	r8, r3
 801c618:	4606      	mov	r6, r0
 801c61a:	b118      	cbz	r0, 801c624 <_vfiprintf_r+0x18>
 801c61c:	6983      	ldr	r3, [r0, #24]
 801c61e:	b90b      	cbnz	r3, 801c624 <_vfiprintf_r+0x18>
 801c620:	f000 fd48 	bl	801d0b4 <__sinit>
 801c624:	4b89      	ldr	r3, [pc, #548]	; (801c84c <_vfiprintf_r+0x240>)
 801c626:	429d      	cmp	r5, r3
 801c628:	d11b      	bne.n	801c662 <_vfiprintf_r+0x56>
 801c62a:	6875      	ldr	r5, [r6, #4]
 801c62c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c62e:	07d9      	lsls	r1, r3, #31
 801c630:	d405      	bmi.n	801c63e <_vfiprintf_r+0x32>
 801c632:	89ab      	ldrh	r3, [r5, #12]
 801c634:	059a      	lsls	r2, r3, #22
 801c636:	d402      	bmi.n	801c63e <_vfiprintf_r+0x32>
 801c638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c63a:	f000 fdd9 	bl	801d1f0 <__retarget_lock_acquire_recursive>
 801c63e:	89ab      	ldrh	r3, [r5, #12]
 801c640:	071b      	lsls	r3, r3, #28
 801c642:	d501      	bpl.n	801c648 <_vfiprintf_r+0x3c>
 801c644:	692b      	ldr	r3, [r5, #16]
 801c646:	b9eb      	cbnz	r3, 801c684 <_vfiprintf_r+0x78>
 801c648:	4629      	mov	r1, r5
 801c64a:	4630      	mov	r0, r6
 801c64c:	f000 fb48 	bl	801cce0 <__swsetup_r>
 801c650:	b1c0      	cbz	r0, 801c684 <_vfiprintf_r+0x78>
 801c652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c654:	07dc      	lsls	r4, r3, #31
 801c656:	d50e      	bpl.n	801c676 <_vfiprintf_r+0x6a>
 801c658:	f04f 30ff 	mov.w	r0, #4294967295
 801c65c:	b01d      	add	sp, #116	; 0x74
 801c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c662:	4b7b      	ldr	r3, [pc, #492]	; (801c850 <_vfiprintf_r+0x244>)
 801c664:	429d      	cmp	r5, r3
 801c666:	d101      	bne.n	801c66c <_vfiprintf_r+0x60>
 801c668:	68b5      	ldr	r5, [r6, #8]
 801c66a:	e7df      	b.n	801c62c <_vfiprintf_r+0x20>
 801c66c:	4b79      	ldr	r3, [pc, #484]	; (801c854 <_vfiprintf_r+0x248>)
 801c66e:	429d      	cmp	r5, r3
 801c670:	bf08      	it	eq
 801c672:	68f5      	ldreq	r5, [r6, #12]
 801c674:	e7da      	b.n	801c62c <_vfiprintf_r+0x20>
 801c676:	89ab      	ldrh	r3, [r5, #12]
 801c678:	0598      	lsls	r0, r3, #22
 801c67a:	d4ed      	bmi.n	801c658 <_vfiprintf_r+0x4c>
 801c67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c67e:	f000 fdb9 	bl	801d1f4 <__retarget_lock_release_recursive>
 801c682:	e7e9      	b.n	801c658 <_vfiprintf_r+0x4c>
 801c684:	2300      	movs	r3, #0
 801c686:	9309      	str	r3, [sp, #36]	; 0x24
 801c688:	2320      	movs	r3, #32
 801c68a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c68e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c692:	2330      	movs	r3, #48	; 0x30
 801c694:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c858 <_vfiprintf_r+0x24c>
 801c698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c69c:	f04f 0901 	mov.w	r9, #1
 801c6a0:	4623      	mov	r3, r4
 801c6a2:	469a      	mov	sl, r3
 801c6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c6a8:	b10a      	cbz	r2, 801c6ae <_vfiprintf_r+0xa2>
 801c6aa:	2a25      	cmp	r2, #37	; 0x25
 801c6ac:	d1f9      	bne.n	801c6a2 <_vfiprintf_r+0x96>
 801c6ae:	ebba 0b04 	subs.w	fp, sl, r4
 801c6b2:	d00b      	beq.n	801c6cc <_vfiprintf_r+0xc0>
 801c6b4:	465b      	mov	r3, fp
 801c6b6:	4622      	mov	r2, r4
 801c6b8:	4629      	mov	r1, r5
 801c6ba:	4630      	mov	r0, r6
 801c6bc:	f7ff ff93 	bl	801c5e6 <__sfputs_r>
 801c6c0:	3001      	adds	r0, #1
 801c6c2:	f000 80aa 	beq.w	801c81a <_vfiprintf_r+0x20e>
 801c6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c6c8:	445a      	add	r2, fp
 801c6ca:	9209      	str	r2, [sp, #36]	; 0x24
 801c6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	f000 80a2 	beq.w	801c81a <_vfiprintf_r+0x20e>
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	f04f 32ff 	mov.w	r2, #4294967295
 801c6dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c6e0:	f10a 0a01 	add.w	sl, sl, #1
 801c6e4:	9304      	str	r3, [sp, #16]
 801c6e6:	9307      	str	r3, [sp, #28]
 801c6e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c6ec:	931a      	str	r3, [sp, #104]	; 0x68
 801c6ee:	4654      	mov	r4, sl
 801c6f0:	2205      	movs	r2, #5
 801c6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6f6:	4858      	ldr	r0, [pc, #352]	; (801c858 <_vfiprintf_r+0x24c>)
 801c6f8:	f7e3 fe0a 	bl	8000310 <memchr>
 801c6fc:	9a04      	ldr	r2, [sp, #16]
 801c6fe:	b9d8      	cbnz	r0, 801c738 <_vfiprintf_r+0x12c>
 801c700:	06d1      	lsls	r1, r2, #27
 801c702:	bf44      	itt	mi
 801c704:	2320      	movmi	r3, #32
 801c706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c70a:	0713      	lsls	r3, r2, #28
 801c70c:	bf44      	itt	mi
 801c70e:	232b      	movmi	r3, #43	; 0x2b
 801c710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c714:	f89a 3000 	ldrb.w	r3, [sl]
 801c718:	2b2a      	cmp	r3, #42	; 0x2a
 801c71a:	d015      	beq.n	801c748 <_vfiprintf_r+0x13c>
 801c71c:	9a07      	ldr	r2, [sp, #28]
 801c71e:	4654      	mov	r4, sl
 801c720:	2000      	movs	r0, #0
 801c722:	f04f 0c0a 	mov.w	ip, #10
 801c726:	4621      	mov	r1, r4
 801c728:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c72c:	3b30      	subs	r3, #48	; 0x30
 801c72e:	2b09      	cmp	r3, #9
 801c730:	d94e      	bls.n	801c7d0 <_vfiprintf_r+0x1c4>
 801c732:	b1b0      	cbz	r0, 801c762 <_vfiprintf_r+0x156>
 801c734:	9207      	str	r2, [sp, #28]
 801c736:	e014      	b.n	801c762 <_vfiprintf_r+0x156>
 801c738:	eba0 0308 	sub.w	r3, r0, r8
 801c73c:	fa09 f303 	lsl.w	r3, r9, r3
 801c740:	4313      	orrs	r3, r2
 801c742:	9304      	str	r3, [sp, #16]
 801c744:	46a2      	mov	sl, r4
 801c746:	e7d2      	b.n	801c6ee <_vfiprintf_r+0xe2>
 801c748:	9b03      	ldr	r3, [sp, #12]
 801c74a:	1d19      	adds	r1, r3, #4
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	9103      	str	r1, [sp, #12]
 801c750:	2b00      	cmp	r3, #0
 801c752:	bfbb      	ittet	lt
 801c754:	425b      	neglt	r3, r3
 801c756:	f042 0202 	orrlt.w	r2, r2, #2
 801c75a:	9307      	strge	r3, [sp, #28]
 801c75c:	9307      	strlt	r3, [sp, #28]
 801c75e:	bfb8      	it	lt
 801c760:	9204      	strlt	r2, [sp, #16]
 801c762:	7823      	ldrb	r3, [r4, #0]
 801c764:	2b2e      	cmp	r3, #46	; 0x2e
 801c766:	d10c      	bne.n	801c782 <_vfiprintf_r+0x176>
 801c768:	7863      	ldrb	r3, [r4, #1]
 801c76a:	2b2a      	cmp	r3, #42	; 0x2a
 801c76c:	d135      	bne.n	801c7da <_vfiprintf_r+0x1ce>
 801c76e:	9b03      	ldr	r3, [sp, #12]
 801c770:	1d1a      	adds	r2, r3, #4
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	9203      	str	r2, [sp, #12]
 801c776:	2b00      	cmp	r3, #0
 801c778:	bfb8      	it	lt
 801c77a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c77e:	3402      	adds	r4, #2
 801c780:	9305      	str	r3, [sp, #20]
 801c782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c868 <_vfiprintf_r+0x25c>
 801c786:	7821      	ldrb	r1, [r4, #0]
 801c788:	2203      	movs	r2, #3
 801c78a:	4650      	mov	r0, sl
 801c78c:	f7e3 fdc0 	bl	8000310 <memchr>
 801c790:	b140      	cbz	r0, 801c7a4 <_vfiprintf_r+0x198>
 801c792:	2340      	movs	r3, #64	; 0x40
 801c794:	eba0 000a 	sub.w	r0, r0, sl
 801c798:	fa03 f000 	lsl.w	r0, r3, r0
 801c79c:	9b04      	ldr	r3, [sp, #16]
 801c79e:	4303      	orrs	r3, r0
 801c7a0:	3401      	adds	r4, #1
 801c7a2:	9304      	str	r3, [sp, #16]
 801c7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c7a8:	482c      	ldr	r0, [pc, #176]	; (801c85c <_vfiprintf_r+0x250>)
 801c7aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c7ae:	2206      	movs	r2, #6
 801c7b0:	f7e3 fdae 	bl	8000310 <memchr>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	d03f      	beq.n	801c838 <_vfiprintf_r+0x22c>
 801c7b8:	4b29      	ldr	r3, [pc, #164]	; (801c860 <_vfiprintf_r+0x254>)
 801c7ba:	bb1b      	cbnz	r3, 801c804 <_vfiprintf_r+0x1f8>
 801c7bc:	9b03      	ldr	r3, [sp, #12]
 801c7be:	3307      	adds	r3, #7
 801c7c0:	f023 0307 	bic.w	r3, r3, #7
 801c7c4:	3308      	adds	r3, #8
 801c7c6:	9303      	str	r3, [sp, #12]
 801c7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7ca:	443b      	add	r3, r7
 801c7cc:	9309      	str	r3, [sp, #36]	; 0x24
 801c7ce:	e767      	b.n	801c6a0 <_vfiprintf_r+0x94>
 801c7d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801c7d4:	460c      	mov	r4, r1
 801c7d6:	2001      	movs	r0, #1
 801c7d8:	e7a5      	b.n	801c726 <_vfiprintf_r+0x11a>
 801c7da:	2300      	movs	r3, #0
 801c7dc:	3401      	adds	r4, #1
 801c7de:	9305      	str	r3, [sp, #20]
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	f04f 0c0a 	mov.w	ip, #10
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c7ec:	3a30      	subs	r2, #48	; 0x30
 801c7ee:	2a09      	cmp	r2, #9
 801c7f0:	d903      	bls.n	801c7fa <_vfiprintf_r+0x1ee>
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d0c5      	beq.n	801c782 <_vfiprintf_r+0x176>
 801c7f6:	9105      	str	r1, [sp, #20]
 801c7f8:	e7c3      	b.n	801c782 <_vfiprintf_r+0x176>
 801c7fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801c7fe:	4604      	mov	r4, r0
 801c800:	2301      	movs	r3, #1
 801c802:	e7f0      	b.n	801c7e6 <_vfiprintf_r+0x1da>
 801c804:	ab03      	add	r3, sp, #12
 801c806:	9300      	str	r3, [sp, #0]
 801c808:	462a      	mov	r2, r5
 801c80a:	4b16      	ldr	r3, [pc, #88]	; (801c864 <_vfiprintf_r+0x258>)
 801c80c:	a904      	add	r1, sp, #16
 801c80e:	4630      	mov	r0, r6
 801c810:	f3af 8000 	nop.w
 801c814:	4607      	mov	r7, r0
 801c816:	1c78      	adds	r0, r7, #1
 801c818:	d1d6      	bne.n	801c7c8 <_vfiprintf_r+0x1bc>
 801c81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c81c:	07d9      	lsls	r1, r3, #31
 801c81e:	d405      	bmi.n	801c82c <_vfiprintf_r+0x220>
 801c820:	89ab      	ldrh	r3, [r5, #12]
 801c822:	059a      	lsls	r2, r3, #22
 801c824:	d402      	bmi.n	801c82c <_vfiprintf_r+0x220>
 801c826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c828:	f000 fce4 	bl	801d1f4 <__retarget_lock_release_recursive>
 801c82c:	89ab      	ldrh	r3, [r5, #12]
 801c82e:	065b      	lsls	r3, r3, #25
 801c830:	f53f af12 	bmi.w	801c658 <_vfiprintf_r+0x4c>
 801c834:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c836:	e711      	b.n	801c65c <_vfiprintf_r+0x50>
 801c838:	ab03      	add	r3, sp, #12
 801c83a:	9300      	str	r3, [sp, #0]
 801c83c:	462a      	mov	r2, r5
 801c83e:	4b09      	ldr	r3, [pc, #36]	; (801c864 <_vfiprintf_r+0x258>)
 801c840:	a904      	add	r1, sp, #16
 801c842:	4630      	mov	r0, r6
 801c844:	f000 f880 	bl	801c948 <_printf_i>
 801c848:	e7e4      	b.n	801c814 <_vfiprintf_r+0x208>
 801c84a:	bf00      	nop
 801c84c:	08020f38 	.word	0x08020f38
 801c850:	08020f58 	.word	0x08020f58
 801c854:	08020f18 	.word	0x08020f18
 801c858:	08020ee0 	.word	0x08020ee0
 801c85c:	08020eea 	.word	0x08020eea
 801c860:	00000000 	.word	0x00000000
 801c864:	0801c5e7 	.word	0x0801c5e7
 801c868:	08020ee6 	.word	0x08020ee6

0801c86c <_printf_common>:
 801c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c870:	4616      	mov	r6, r2
 801c872:	4699      	mov	r9, r3
 801c874:	688a      	ldr	r2, [r1, #8]
 801c876:	690b      	ldr	r3, [r1, #16]
 801c878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c87c:	4293      	cmp	r3, r2
 801c87e:	bfb8      	it	lt
 801c880:	4613      	movlt	r3, r2
 801c882:	6033      	str	r3, [r6, #0]
 801c884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c888:	4607      	mov	r7, r0
 801c88a:	460c      	mov	r4, r1
 801c88c:	b10a      	cbz	r2, 801c892 <_printf_common+0x26>
 801c88e:	3301      	adds	r3, #1
 801c890:	6033      	str	r3, [r6, #0]
 801c892:	6823      	ldr	r3, [r4, #0]
 801c894:	0699      	lsls	r1, r3, #26
 801c896:	bf42      	ittt	mi
 801c898:	6833      	ldrmi	r3, [r6, #0]
 801c89a:	3302      	addmi	r3, #2
 801c89c:	6033      	strmi	r3, [r6, #0]
 801c89e:	6825      	ldr	r5, [r4, #0]
 801c8a0:	f015 0506 	ands.w	r5, r5, #6
 801c8a4:	d106      	bne.n	801c8b4 <_printf_common+0x48>
 801c8a6:	f104 0a19 	add.w	sl, r4, #25
 801c8aa:	68e3      	ldr	r3, [r4, #12]
 801c8ac:	6832      	ldr	r2, [r6, #0]
 801c8ae:	1a9b      	subs	r3, r3, r2
 801c8b0:	42ab      	cmp	r3, r5
 801c8b2:	dc26      	bgt.n	801c902 <_printf_common+0x96>
 801c8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c8b8:	1e13      	subs	r3, r2, #0
 801c8ba:	6822      	ldr	r2, [r4, #0]
 801c8bc:	bf18      	it	ne
 801c8be:	2301      	movne	r3, #1
 801c8c0:	0692      	lsls	r2, r2, #26
 801c8c2:	d42b      	bmi.n	801c91c <_printf_common+0xb0>
 801c8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c8c8:	4649      	mov	r1, r9
 801c8ca:	4638      	mov	r0, r7
 801c8cc:	47c0      	blx	r8
 801c8ce:	3001      	adds	r0, #1
 801c8d0:	d01e      	beq.n	801c910 <_printf_common+0xa4>
 801c8d2:	6823      	ldr	r3, [r4, #0]
 801c8d4:	68e5      	ldr	r5, [r4, #12]
 801c8d6:	6832      	ldr	r2, [r6, #0]
 801c8d8:	f003 0306 	and.w	r3, r3, #6
 801c8dc:	2b04      	cmp	r3, #4
 801c8de:	bf08      	it	eq
 801c8e0:	1aad      	subeq	r5, r5, r2
 801c8e2:	68a3      	ldr	r3, [r4, #8]
 801c8e4:	6922      	ldr	r2, [r4, #16]
 801c8e6:	bf0c      	ite	eq
 801c8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c8ec:	2500      	movne	r5, #0
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	bfc4      	itt	gt
 801c8f2:	1a9b      	subgt	r3, r3, r2
 801c8f4:	18ed      	addgt	r5, r5, r3
 801c8f6:	2600      	movs	r6, #0
 801c8f8:	341a      	adds	r4, #26
 801c8fa:	42b5      	cmp	r5, r6
 801c8fc:	d11a      	bne.n	801c934 <_printf_common+0xc8>
 801c8fe:	2000      	movs	r0, #0
 801c900:	e008      	b.n	801c914 <_printf_common+0xa8>
 801c902:	2301      	movs	r3, #1
 801c904:	4652      	mov	r2, sl
 801c906:	4649      	mov	r1, r9
 801c908:	4638      	mov	r0, r7
 801c90a:	47c0      	blx	r8
 801c90c:	3001      	adds	r0, #1
 801c90e:	d103      	bne.n	801c918 <_printf_common+0xac>
 801c910:	f04f 30ff 	mov.w	r0, #4294967295
 801c914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c918:	3501      	adds	r5, #1
 801c91a:	e7c6      	b.n	801c8aa <_printf_common+0x3e>
 801c91c:	18e1      	adds	r1, r4, r3
 801c91e:	1c5a      	adds	r2, r3, #1
 801c920:	2030      	movs	r0, #48	; 0x30
 801c922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c926:	4422      	add	r2, r4
 801c928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c930:	3302      	adds	r3, #2
 801c932:	e7c7      	b.n	801c8c4 <_printf_common+0x58>
 801c934:	2301      	movs	r3, #1
 801c936:	4622      	mov	r2, r4
 801c938:	4649      	mov	r1, r9
 801c93a:	4638      	mov	r0, r7
 801c93c:	47c0      	blx	r8
 801c93e:	3001      	adds	r0, #1
 801c940:	d0e6      	beq.n	801c910 <_printf_common+0xa4>
 801c942:	3601      	adds	r6, #1
 801c944:	e7d9      	b.n	801c8fa <_printf_common+0x8e>
	...

0801c948 <_printf_i>:
 801c948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c94c:	460c      	mov	r4, r1
 801c94e:	4691      	mov	r9, r2
 801c950:	7e27      	ldrb	r7, [r4, #24]
 801c952:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c954:	2f78      	cmp	r7, #120	; 0x78
 801c956:	4680      	mov	r8, r0
 801c958:	469a      	mov	sl, r3
 801c95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c95e:	d807      	bhi.n	801c970 <_printf_i+0x28>
 801c960:	2f62      	cmp	r7, #98	; 0x62
 801c962:	d80a      	bhi.n	801c97a <_printf_i+0x32>
 801c964:	2f00      	cmp	r7, #0
 801c966:	f000 80d8 	beq.w	801cb1a <_printf_i+0x1d2>
 801c96a:	2f58      	cmp	r7, #88	; 0x58
 801c96c:	f000 80a3 	beq.w	801cab6 <_printf_i+0x16e>
 801c970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c978:	e03a      	b.n	801c9f0 <_printf_i+0xa8>
 801c97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c97e:	2b15      	cmp	r3, #21
 801c980:	d8f6      	bhi.n	801c970 <_printf_i+0x28>
 801c982:	a001      	add	r0, pc, #4	; (adr r0, 801c988 <_printf_i+0x40>)
 801c984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c988:	0801c9e1 	.word	0x0801c9e1
 801c98c:	0801c9f5 	.word	0x0801c9f5
 801c990:	0801c971 	.word	0x0801c971
 801c994:	0801c971 	.word	0x0801c971
 801c998:	0801c971 	.word	0x0801c971
 801c99c:	0801c971 	.word	0x0801c971
 801c9a0:	0801c9f5 	.word	0x0801c9f5
 801c9a4:	0801c971 	.word	0x0801c971
 801c9a8:	0801c971 	.word	0x0801c971
 801c9ac:	0801c971 	.word	0x0801c971
 801c9b0:	0801c971 	.word	0x0801c971
 801c9b4:	0801cb01 	.word	0x0801cb01
 801c9b8:	0801ca25 	.word	0x0801ca25
 801c9bc:	0801cae3 	.word	0x0801cae3
 801c9c0:	0801c971 	.word	0x0801c971
 801c9c4:	0801c971 	.word	0x0801c971
 801c9c8:	0801cb23 	.word	0x0801cb23
 801c9cc:	0801c971 	.word	0x0801c971
 801c9d0:	0801ca25 	.word	0x0801ca25
 801c9d4:	0801c971 	.word	0x0801c971
 801c9d8:	0801c971 	.word	0x0801c971
 801c9dc:	0801caeb 	.word	0x0801caeb
 801c9e0:	680b      	ldr	r3, [r1, #0]
 801c9e2:	1d1a      	adds	r2, r3, #4
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	600a      	str	r2, [r1, #0]
 801c9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c9f0:	2301      	movs	r3, #1
 801c9f2:	e0a3      	b.n	801cb3c <_printf_i+0x1f4>
 801c9f4:	6825      	ldr	r5, [r4, #0]
 801c9f6:	6808      	ldr	r0, [r1, #0]
 801c9f8:	062e      	lsls	r6, r5, #24
 801c9fa:	f100 0304 	add.w	r3, r0, #4
 801c9fe:	d50a      	bpl.n	801ca16 <_printf_i+0xce>
 801ca00:	6805      	ldr	r5, [r0, #0]
 801ca02:	600b      	str	r3, [r1, #0]
 801ca04:	2d00      	cmp	r5, #0
 801ca06:	da03      	bge.n	801ca10 <_printf_i+0xc8>
 801ca08:	232d      	movs	r3, #45	; 0x2d
 801ca0a:	426d      	negs	r5, r5
 801ca0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca10:	485e      	ldr	r0, [pc, #376]	; (801cb8c <_printf_i+0x244>)
 801ca12:	230a      	movs	r3, #10
 801ca14:	e019      	b.n	801ca4a <_printf_i+0x102>
 801ca16:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ca1a:	6805      	ldr	r5, [r0, #0]
 801ca1c:	600b      	str	r3, [r1, #0]
 801ca1e:	bf18      	it	ne
 801ca20:	b22d      	sxthne	r5, r5
 801ca22:	e7ef      	b.n	801ca04 <_printf_i+0xbc>
 801ca24:	680b      	ldr	r3, [r1, #0]
 801ca26:	6825      	ldr	r5, [r4, #0]
 801ca28:	1d18      	adds	r0, r3, #4
 801ca2a:	6008      	str	r0, [r1, #0]
 801ca2c:	0628      	lsls	r0, r5, #24
 801ca2e:	d501      	bpl.n	801ca34 <_printf_i+0xec>
 801ca30:	681d      	ldr	r5, [r3, #0]
 801ca32:	e002      	b.n	801ca3a <_printf_i+0xf2>
 801ca34:	0669      	lsls	r1, r5, #25
 801ca36:	d5fb      	bpl.n	801ca30 <_printf_i+0xe8>
 801ca38:	881d      	ldrh	r5, [r3, #0]
 801ca3a:	4854      	ldr	r0, [pc, #336]	; (801cb8c <_printf_i+0x244>)
 801ca3c:	2f6f      	cmp	r7, #111	; 0x6f
 801ca3e:	bf0c      	ite	eq
 801ca40:	2308      	moveq	r3, #8
 801ca42:	230a      	movne	r3, #10
 801ca44:	2100      	movs	r1, #0
 801ca46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ca4a:	6866      	ldr	r6, [r4, #4]
 801ca4c:	60a6      	str	r6, [r4, #8]
 801ca4e:	2e00      	cmp	r6, #0
 801ca50:	bfa2      	ittt	ge
 801ca52:	6821      	ldrge	r1, [r4, #0]
 801ca54:	f021 0104 	bicge.w	r1, r1, #4
 801ca58:	6021      	strge	r1, [r4, #0]
 801ca5a:	b90d      	cbnz	r5, 801ca60 <_printf_i+0x118>
 801ca5c:	2e00      	cmp	r6, #0
 801ca5e:	d04d      	beq.n	801cafc <_printf_i+0x1b4>
 801ca60:	4616      	mov	r6, r2
 801ca62:	fbb5 f1f3 	udiv	r1, r5, r3
 801ca66:	fb03 5711 	mls	r7, r3, r1, r5
 801ca6a:	5dc7      	ldrb	r7, [r0, r7]
 801ca6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ca70:	462f      	mov	r7, r5
 801ca72:	42bb      	cmp	r3, r7
 801ca74:	460d      	mov	r5, r1
 801ca76:	d9f4      	bls.n	801ca62 <_printf_i+0x11a>
 801ca78:	2b08      	cmp	r3, #8
 801ca7a:	d10b      	bne.n	801ca94 <_printf_i+0x14c>
 801ca7c:	6823      	ldr	r3, [r4, #0]
 801ca7e:	07df      	lsls	r7, r3, #31
 801ca80:	d508      	bpl.n	801ca94 <_printf_i+0x14c>
 801ca82:	6923      	ldr	r3, [r4, #16]
 801ca84:	6861      	ldr	r1, [r4, #4]
 801ca86:	4299      	cmp	r1, r3
 801ca88:	bfde      	ittt	le
 801ca8a:	2330      	movle	r3, #48	; 0x30
 801ca8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca90:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca94:	1b92      	subs	r2, r2, r6
 801ca96:	6122      	str	r2, [r4, #16]
 801ca98:	f8cd a000 	str.w	sl, [sp]
 801ca9c:	464b      	mov	r3, r9
 801ca9e:	aa03      	add	r2, sp, #12
 801caa0:	4621      	mov	r1, r4
 801caa2:	4640      	mov	r0, r8
 801caa4:	f7ff fee2 	bl	801c86c <_printf_common>
 801caa8:	3001      	adds	r0, #1
 801caaa:	d14c      	bne.n	801cb46 <_printf_i+0x1fe>
 801caac:	f04f 30ff 	mov.w	r0, #4294967295
 801cab0:	b004      	add	sp, #16
 801cab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cab6:	4835      	ldr	r0, [pc, #212]	; (801cb8c <_printf_i+0x244>)
 801cab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801cabc:	6823      	ldr	r3, [r4, #0]
 801cabe:	680e      	ldr	r6, [r1, #0]
 801cac0:	061f      	lsls	r7, r3, #24
 801cac2:	f856 5b04 	ldr.w	r5, [r6], #4
 801cac6:	600e      	str	r6, [r1, #0]
 801cac8:	d514      	bpl.n	801caf4 <_printf_i+0x1ac>
 801caca:	07d9      	lsls	r1, r3, #31
 801cacc:	bf44      	itt	mi
 801cace:	f043 0320 	orrmi.w	r3, r3, #32
 801cad2:	6023      	strmi	r3, [r4, #0]
 801cad4:	b91d      	cbnz	r5, 801cade <_printf_i+0x196>
 801cad6:	6823      	ldr	r3, [r4, #0]
 801cad8:	f023 0320 	bic.w	r3, r3, #32
 801cadc:	6023      	str	r3, [r4, #0]
 801cade:	2310      	movs	r3, #16
 801cae0:	e7b0      	b.n	801ca44 <_printf_i+0xfc>
 801cae2:	6823      	ldr	r3, [r4, #0]
 801cae4:	f043 0320 	orr.w	r3, r3, #32
 801cae8:	6023      	str	r3, [r4, #0]
 801caea:	2378      	movs	r3, #120	; 0x78
 801caec:	4828      	ldr	r0, [pc, #160]	; (801cb90 <_printf_i+0x248>)
 801caee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801caf2:	e7e3      	b.n	801cabc <_printf_i+0x174>
 801caf4:	065e      	lsls	r6, r3, #25
 801caf6:	bf48      	it	mi
 801caf8:	b2ad      	uxthmi	r5, r5
 801cafa:	e7e6      	b.n	801caca <_printf_i+0x182>
 801cafc:	4616      	mov	r6, r2
 801cafe:	e7bb      	b.n	801ca78 <_printf_i+0x130>
 801cb00:	680b      	ldr	r3, [r1, #0]
 801cb02:	6826      	ldr	r6, [r4, #0]
 801cb04:	6960      	ldr	r0, [r4, #20]
 801cb06:	1d1d      	adds	r5, r3, #4
 801cb08:	600d      	str	r5, [r1, #0]
 801cb0a:	0635      	lsls	r5, r6, #24
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	d501      	bpl.n	801cb14 <_printf_i+0x1cc>
 801cb10:	6018      	str	r0, [r3, #0]
 801cb12:	e002      	b.n	801cb1a <_printf_i+0x1d2>
 801cb14:	0671      	lsls	r1, r6, #25
 801cb16:	d5fb      	bpl.n	801cb10 <_printf_i+0x1c8>
 801cb18:	8018      	strh	r0, [r3, #0]
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	6123      	str	r3, [r4, #16]
 801cb1e:	4616      	mov	r6, r2
 801cb20:	e7ba      	b.n	801ca98 <_printf_i+0x150>
 801cb22:	680b      	ldr	r3, [r1, #0]
 801cb24:	1d1a      	adds	r2, r3, #4
 801cb26:	600a      	str	r2, [r1, #0]
 801cb28:	681e      	ldr	r6, [r3, #0]
 801cb2a:	6862      	ldr	r2, [r4, #4]
 801cb2c:	2100      	movs	r1, #0
 801cb2e:	4630      	mov	r0, r6
 801cb30:	f7e3 fbee 	bl	8000310 <memchr>
 801cb34:	b108      	cbz	r0, 801cb3a <_printf_i+0x1f2>
 801cb36:	1b80      	subs	r0, r0, r6
 801cb38:	6060      	str	r0, [r4, #4]
 801cb3a:	6863      	ldr	r3, [r4, #4]
 801cb3c:	6123      	str	r3, [r4, #16]
 801cb3e:	2300      	movs	r3, #0
 801cb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb44:	e7a8      	b.n	801ca98 <_printf_i+0x150>
 801cb46:	6923      	ldr	r3, [r4, #16]
 801cb48:	4632      	mov	r2, r6
 801cb4a:	4649      	mov	r1, r9
 801cb4c:	4640      	mov	r0, r8
 801cb4e:	47d0      	blx	sl
 801cb50:	3001      	adds	r0, #1
 801cb52:	d0ab      	beq.n	801caac <_printf_i+0x164>
 801cb54:	6823      	ldr	r3, [r4, #0]
 801cb56:	079b      	lsls	r3, r3, #30
 801cb58:	d413      	bmi.n	801cb82 <_printf_i+0x23a>
 801cb5a:	68e0      	ldr	r0, [r4, #12]
 801cb5c:	9b03      	ldr	r3, [sp, #12]
 801cb5e:	4298      	cmp	r0, r3
 801cb60:	bfb8      	it	lt
 801cb62:	4618      	movlt	r0, r3
 801cb64:	e7a4      	b.n	801cab0 <_printf_i+0x168>
 801cb66:	2301      	movs	r3, #1
 801cb68:	4632      	mov	r2, r6
 801cb6a:	4649      	mov	r1, r9
 801cb6c:	4640      	mov	r0, r8
 801cb6e:	47d0      	blx	sl
 801cb70:	3001      	adds	r0, #1
 801cb72:	d09b      	beq.n	801caac <_printf_i+0x164>
 801cb74:	3501      	adds	r5, #1
 801cb76:	68e3      	ldr	r3, [r4, #12]
 801cb78:	9903      	ldr	r1, [sp, #12]
 801cb7a:	1a5b      	subs	r3, r3, r1
 801cb7c:	42ab      	cmp	r3, r5
 801cb7e:	dcf2      	bgt.n	801cb66 <_printf_i+0x21e>
 801cb80:	e7eb      	b.n	801cb5a <_printf_i+0x212>
 801cb82:	2500      	movs	r5, #0
 801cb84:	f104 0619 	add.w	r6, r4, #25
 801cb88:	e7f5      	b.n	801cb76 <_printf_i+0x22e>
 801cb8a:	bf00      	nop
 801cb8c:	08020ef1 	.word	0x08020ef1
 801cb90:	08020f02 	.word	0x08020f02

0801cb94 <_sbrk_r>:
 801cb94:	b538      	push	{r3, r4, r5, lr}
 801cb96:	4d06      	ldr	r5, [pc, #24]	; (801cbb0 <_sbrk_r+0x1c>)
 801cb98:	2300      	movs	r3, #0
 801cb9a:	4604      	mov	r4, r0
 801cb9c:	4608      	mov	r0, r1
 801cb9e:	602b      	str	r3, [r5, #0]
 801cba0:	f7e5 f8e6 	bl	8001d70 <_sbrk>
 801cba4:	1c43      	adds	r3, r0, #1
 801cba6:	d102      	bne.n	801cbae <_sbrk_r+0x1a>
 801cba8:	682b      	ldr	r3, [r5, #0]
 801cbaa:	b103      	cbz	r3, 801cbae <_sbrk_r+0x1a>
 801cbac:	6023      	str	r3, [r4, #0]
 801cbae:	bd38      	pop	{r3, r4, r5, pc}
 801cbb0:	2400734c 	.word	0x2400734c

0801cbb4 <_raise_r>:
 801cbb4:	291f      	cmp	r1, #31
 801cbb6:	b538      	push	{r3, r4, r5, lr}
 801cbb8:	4604      	mov	r4, r0
 801cbba:	460d      	mov	r5, r1
 801cbbc:	d904      	bls.n	801cbc8 <_raise_r+0x14>
 801cbbe:	2316      	movs	r3, #22
 801cbc0:	6003      	str	r3, [r0, #0]
 801cbc2:	f04f 30ff 	mov.w	r0, #4294967295
 801cbc6:	bd38      	pop	{r3, r4, r5, pc}
 801cbc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cbca:	b112      	cbz	r2, 801cbd2 <_raise_r+0x1e>
 801cbcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cbd0:	b94b      	cbnz	r3, 801cbe6 <_raise_r+0x32>
 801cbd2:	4620      	mov	r0, r4
 801cbd4:	f000 f830 	bl	801cc38 <_getpid_r>
 801cbd8:	462a      	mov	r2, r5
 801cbda:	4601      	mov	r1, r0
 801cbdc:	4620      	mov	r0, r4
 801cbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbe2:	f000 b817 	b.w	801cc14 <_kill_r>
 801cbe6:	2b01      	cmp	r3, #1
 801cbe8:	d00a      	beq.n	801cc00 <_raise_r+0x4c>
 801cbea:	1c59      	adds	r1, r3, #1
 801cbec:	d103      	bne.n	801cbf6 <_raise_r+0x42>
 801cbee:	2316      	movs	r3, #22
 801cbf0:	6003      	str	r3, [r0, #0]
 801cbf2:	2001      	movs	r0, #1
 801cbf4:	e7e7      	b.n	801cbc6 <_raise_r+0x12>
 801cbf6:	2400      	movs	r4, #0
 801cbf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cbfc:	4628      	mov	r0, r5
 801cbfe:	4798      	blx	r3
 801cc00:	2000      	movs	r0, #0
 801cc02:	e7e0      	b.n	801cbc6 <_raise_r+0x12>

0801cc04 <raise>:
 801cc04:	4b02      	ldr	r3, [pc, #8]	; (801cc10 <raise+0xc>)
 801cc06:	4601      	mov	r1, r0
 801cc08:	6818      	ldr	r0, [r3, #0]
 801cc0a:	f7ff bfd3 	b.w	801cbb4 <_raise_r>
 801cc0e:	bf00      	nop
 801cc10:	240000d8 	.word	0x240000d8

0801cc14 <_kill_r>:
 801cc14:	b538      	push	{r3, r4, r5, lr}
 801cc16:	4d07      	ldr	r5, [pc, #28]	; (801cc34 <_kill_r+0x20>)
 801cc18:	2300      	movs	r3, #0
 801cc1a:	4604      	mov	r4, r0
 801cc1c:	4608      	mov	r0, r1
 801cc1e:	4611      	mov	r1, r2
 801cc20:	602b      	str	r3, [r5, #0]
 801cc22:	f7e5 f871 	bl	8001d08 <_kill>
 801cc26:	1c43      	adds	r3, r0, #1
 801cc28:	d102      	bne.n	801cc30 <_kill_r+0x1c>
 801cc2a:	682b      	ldr	r3, [r5, #0]
 801cc2c:	b103      	cbz	r3, 801cc30 <_kill_r+0x1c>
 801cc2e:	6023      	str	r3, [r4, #0]
 801cc30:	bd38      	pop	{r3, r4, r5, pc}
 801cc32:	bf00      	nop
 801cc34:	2400734c 	.word	0x2400734c

0801cc38 <_getpid_r>:
 801cc38:	f7e5 b864 	b.w	8001d04 <_getpid>

0801cc3c <__swbuf_r>:
 801cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc3e:	460e      	mov	r6, r1
 801cc40:	4614      	mov	r4, r2
 801cc42:	4605      	mov	r5, r0
 801cc44:	b118      	cbz	r0, 801cc4e <__swbuf_r+0x12>
 801cc46:	6983      	ldr	r3, [r0, #24]
 801cc48:	b90b      	cbnz	r3, 801cc4e <__swbuf_r+0x12>
 801cc4a:	f000 fa33 	bl	801d0b4 <__sinit>
 801cc4e:	4b21      	ldr	r3, [pc, #132]	; (801ccd4 <__swbuf_r+0x98>)
 801cc50:	429c      	cmp	r4, r3
 801cc52:	d12b      	bne.n	801ccac <__swbuf_r+0x70>
 801cc54:	686c      	ldr	r4, [r5, #4]
 801cc56:	69a3      	ldr	r3, [r4, #24]
 801cc58:	60a3      	str	r3, [r4, #8]
 801cc5a:	89a3      	ldrh	r3, [r4, #12]
 801cc5c:	071a      	lsls	r2, r3, #28
 801cc5e:	d52f      	bpl.n	801ccc0 <__swbuf_r+0x84>
 801cc60:	6923      	ldr	r3, [r4, #16]
 801cc62:	b36b      	cbz	r3, 801ccc0 <__swbuf_r+0x84>
 801cc64:	6923      	ldr	r3, [r4, #16]
 801cc66:	6820      	ldr	r0, [r4, #0]
 801cc68:	1ac0      	subs	r0, r0, r3
 801cc6a:	6963      	ldr	r3, [r4, #20]
 801cc6c:	b2f6      	uxtb	r6, r6
 801cc6e:	4283      	cmp	r3, r0
 801cc70:	4637      	mov	r7, r6
 801cc72:	dc04      	bgt.n	801cc7e <__swbuf_r+0x42>
 801cc74:	4621      	mov	r1, r4
 801cc76:	4628      	mov	r0, r5
 801cc78:	f000 f988 	bl	801cf8c <_fflush_r>
 801cc7c:	bb30      	cbnz	r0, 801cccc <__swbuf_r+0x90>
 801cc7e:	68a3      	ldr	r3, [r4, #8]
 801cc80:	3b01      	subs	r3, #1
 801cc82:	60a3      	str	r3, [r4, #8]
 801cc84:	6823      	ldr	r3, [r4, #0]
 801cc86:	1c5a      	adds	r2, r3, #1
 801cc88:	6022      	str	r2, [r4, #0]
 801cc8a:	701e      	strb	r6, [r3, #0]
 801cc8c:	6963      	ldr	r3, [r4, #20]
 801cc8e:	3001      	adds	r0, #1
 801cc90:	4283      	cmp	r3, r0
 801cc92:	d004      	beq.n	801cc9e <__swbuf_r+0x62>
 801cc94:	89a3      	ldrh	r3, [r4, #12]
 801cc96:	07db      	lsls	r3, r3, #31
 801cc98:	d506      	bpl.n	801cca8 <__swbuf_r+0x6c>
 801cc9a:	2e0a      	cmp	r6, #10
 801cc9c:	d104      	bne.n	801cca8 <__swbuf_r+0x6c>
 801cc9e:	4621      	mov	r1, r4
 801cca0:	4628      	mov	r0, r5
 801cca2:	f000 f973 	bl	801cf8c <_fflush_r>
 801cca6:	b988      	cbnz	r0, 801cccc <__swbuf_r+0x90>
 801cca8:	4638      	mov	r0, r7
 801ccaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ccac:	4b0a      	ldr	r3, [pc, #40]	; (801ccd8 <__swbuf_r+0x9c>)
 801ccae:	429c      	cmp	r4, r3
 801ccb0:	d101      	bne.n	801ccb6 <__swbuf_r+0x7a>
 801ccb2:	68ac      	ldr	r4, [r5, #8]
 801ccb4:	e7cf      	b.n	801cc56 <__swbuf_r+0x1a>
 801ccb6:	4b09      	ldr	r3, [pc, #36]	; (801ccdc <__swbuf_r+0xa0>)
 801ccb8:	429c      	cmp	r4, r3
 801ccba:	bf08      	it	eq
 801ccbc:	68ec      	ldreq	r4, [r5, #12]
 801ccbe:	e7ca      	b.n	801cc56 <__swbuf_r+0x1a>
 801ccc0:	4621      	mov	r1, r4
 801ccc2:	4628      	mov	r0, r5
 801ccc4:	f000 f80c 	bl	801cce0 <__swsetup_r>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d0cb      	beq.n	801cc64 <__swbuf_r+0x28>
 801cccc:	f04f 37ff 	mov.w	r7, #4294967295
 801ccd0:	e7ea      	b.n	801cca8 <__swbuf_r+0x6c>
 801ccd2:	bf00      	nop
 801ccd4:	08020f38 	.word	0x08020f38
 801ccd8:	08020f58 	.word	0x08020f58
 801ccdc:	08020f18 	.word	0x08020f18

0801cce0 <__swsetup_r>:
 801cce0:	4b32      	ldr	r3, [pc, #200]	; (801cdac <__swsetup_r+0xcc>)
 801cce2:	b570      	push	{r4, r5, r6, lr}
 801cce4:	681d      	ldr	r5, [r3, #0]
 801cce6:	4606      	mov	r6, r0
 801cce8:	460c      	mov	r4, r1
 801ccea:	b125      	cbz	r5, 801ccf6 <__swsetup_r+0x16>
 801ccec:	69ab      	ldr	r3, [r5, #24]
 801ccee:	b913      	cbnz	r3, 801ccf6 <__swsetup_r+0x16>
 801ccf0:	4628      	mov	r0, r5
 801ccf2:	f000 f9df 	bl	801d0b4 <__sinit>
 801ccf6:	4b2e      	ldr	r3, [pc, #184]	; (801cdb0 <__swsetup_r+0xd0>)
 801ccf8:	429c      	cmp	r4, r3
 801ccfa:	d10f      	bne.n	801cd1c <__swsetup_r+0x3c>
 801ccfc:	686c      	ldr	r4, [r5, #4]
 801ccfe:	89a3      	ldrh	r3, [r4, #12]
 801cd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cd04:	0719      	lsls	r1, r3, #28
 801cd06:	d42c      	bmi.n	801cd62 <__swsetup_r+0x82>
 801cd08:	06dd      	lsls	r5, r3, #27
 801cd0a:	d411      	bmi.n	801cd30 <__swsetup_r+0x50>
 801cd0c:	2309      	movs	r3, #9
 801cd0e:	6033      	str	r3, [r6, #0]
 801cd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cd14:	81a3      	strh	r3, [r4, #12]
 801cd16:	f04f 30ff 	mov.w	r0, #4294967295
 801cd1a:	e03e      	b.n	801cd9a <__swsetup_r+0xba>
 801cd1c:	4b25      	ldr	r3, [pc, #148]	; (801cdb4 <__swsetup_r+0xd4>)
 801cd1e:	429c      	cmp	r4, r3
 801cd20:	d101      	bne.n	801cd26 <__swsetup_r+0x46>
 801cd22:	68ac      	ldr	r4, [r5, #8]
 801cd24:	e7eb      	b.n	801ccfe <__swsetup_r+0x1e>
 801cd26:	4b24      	ldr	r3, [pc, #144]	; (801cdb8 <__swsetup_r+0xd8>)
 801cd28:	429c      	cmp	r4, r3
 801cd2a:	bf08      	it	eq
 801cd2c:	68ec      	ldreq	r4, [r5, #12]
 801cd2e:	e7e6      	b.n	801ccfe <__swsetup_r+0x1e>
 801cd30:	0758      	lsls	r0, r3, #29
 801cd32:	d512      	bpl.n	801cd5a <__swsetup_r+0x7a>
 801cd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd36:	b141      	cbz	r1, 801cd4a <__swsetup_r+0x6a>
 801cd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd3c:	4299      	cmp	r1, r3
 801cd3e:	d002      	beq.n	801cd46 <__swsetup_r+0x66>
 801cd40:	4630      	mov	r0, r6
 801cd42:	f7ff fb8f 	bl	801c464 <_free_r>
 801cd46:	2300      	movs	r3, #0
 801cd48:	6363      	str	r3, [r4, #52]	; 0x34
 801cd4a:	89a3      	ldrh	r3, [r4, #12]
 801cd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cd50:	81a3      	strh	r3, [r4, #12]
 801cd52:	2300      	movs	r3, #0
 801cd54:	6063      	str	r3, [r4, #4]
 801cd56:	6923      	ldr	r3, [r4, #16]
 801cd58:	6023      	str	r3, [r4, #0]
 801cd5a:	89a3      	ldrh	r3, [r4, #12]
 801cd5c:	f043 0308 	orr.w	r3, r3, #8
 801cd60:	81a3      	strh	r3, [r4, #12]
 801cd62:	6923      	ldr	r3, [r4, #16]
 801cd64:	b94b      	cbnz	r3, 801cd7a <__swsetup_r+0x9a>
 801cd66:	89a3      	ldrh	r3, [r4, #12]
 801cd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd70:	d003      	beq.n	801cd7a <__swsetup_r+0x9a>
 801cd72:	4621      	mov	r1, r4
 801cd74:	4630      	mov	r0, r6
 801cd76:	f000 fa63 	bl	801d240 <__smakebuf_r>
 801cd7a:	89a0      	ldrh	r0, [r4, #12]
 801cd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cd80:	f010 0301 	ands.w	r3, r0, #1
 801cd84:	d00a      	beq.n	801cd9c <__swsetup_r+0xbc>
 801cd86:	2300      	movs	r3, #0
 801cd88:	60a3      	str	r3, [r4, #8]
 801cd8a:	6963      	ldr	r3, [r4, #20]
 801cd8c:	425b      	negs	r3, r3
 801cd8e:	61a3      	str	r3, [r4, #24]
 801cd90:	6923      	ldr	r3, [r4, #16]
 801cd92:	b943      	cbnz	r3, 801cda6 <__swsetup_r+0xc6>
 801cd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cd98:	d1ba      	bne.n	801cd10 <__swsetup_r+0x30>
 801cd9a:	bd70      	pop	{r4, r5, r6, pc}
 801cd9c:	0781      	lsls	r1, r0, #30
 801cd9e:	bf58      	it	pl
 801cda0:	6963      	ldrpl	r3, [r4, #20]
 801cda2:	60a3      	str	r3, [r4, #8]
 801cda4:	e7f4      	b.n	801cd90 <__swsetup_r+0xb0>
 801cda6:	2000      	movs	r0, #0
 801cda8:	e7f7      	b.n	801cd9a <__swsetup_r+0xba>
 801cdaa:	bf00      	nop
 801cdac:	240000d8 	.word	0x240000d8
 801cdb0:	08020f38 	.word	0x08020f38
 801cdb4:	08020f58 	.word	0x08020f58
 801cdb8:	08020f18 	.word	0x08020f18

0801cdbc <__register_exitproc>:
 801cdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdc0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ce7c <__register_exitproc+0xc0>
 801cdc4:	4606      	mov	r6, r0
 801cdc6:	f8d8 0000 	ldr.w	r0, [r8]
 801cdca:	461f      	mov	r7, r3
 801cdcc:	460d      	mov	r5, r1
 801cdce:	4691      	mov	r9, r2
 801cdd0:	f000 fa0e 	bl	801d1f0 <__retarget_lock_acquire_recursive>
 801cdd4:	4b25      	ldr	r3, [pc, #148]	; (801ce6c <__register_exitproc+0xb0>)
 801cdd6:	681c      	ldr	r4, [r3, #0]
 801cdd8:	b934      	cbnz	r4, 801cde8 <__register_exitproc+0x2c>
 801cdda:	4c25      	ldr	r4, [pc, #148]	; (801ce70 <__register_exitproc+0xb4>)
 801cddc:	601c      	str	r4, [r3, #0]
 801cdde:	4b25      	ldr	r3, [pc, #148]	; (801ce74 <__register_exitproc+0xb8>)
 801cde0:	b113      	cbz	r3, 801cde8 <__register_exitproc+0x2c>
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cde8:	6863      	ldr	r3, [r4, #4]
 801cdea:	2b1f      	cmp	r3, #31
 801cdec:	dd07      	ble.n	801cdfe <__register_exitproc+0x42>
 801cdee:	f8d8 0000 	ldr.w	r0, [r8]
 801cdf2:	f000 f9ff 	bl	801d1f4 <__retarget_lock_release_recursive>
 801cdf6:	f04f 30ff 	mov.w	r0, #4294967295
 801cdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdfe:	b34e      	cbz	r6, 801ce54 <__register_exitproc+0x98>
 801ce00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ce04:	b988      	cbnz	r0, 801ce2a <__register_exitproc+0x6e>
 801ce06:	4b1c      	ldr	r3, [pc, #112]	; (801ce78 <__register_exitproc+0xbc>)
 801ce08:	b923      	cbnz	r3, 801ce14 <__register_exitproc+0x58>
 801ce0a:	f8d8 0000 	ldr.w	r0, [r8]
 801ce0e:	f000 f9f0 	bl	801d1f2 <__retarget_lock_release>
 801ce12:	e7f0      	b.n	801cdf6 <__register_exitproc+0x3a>
 801ce14:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ce18:	f7ff fafe 	bl	801c418 <malloc>
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	d0f4      	beq.n	801ce0a <__register_exitproc+0x4e>
 801ce20:	2300      	movs	r3, #0
 801ce22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ce26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ce2a:	6863      	ldr	r3, [r4, #4]
 801ce2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ce30:	2201      	movs	r2, #1
 801ce32:	409a      	lsls	r2, r3
 801ce34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ce38:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ce3c:	4313      	orrs	r3, r2
 801ce3e:	2e02      	cmp	r6, #2
 801ce40:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ce44:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ce48:	bf02      	ittt	eq
 801ce4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ce4e:	431a      	orreq	r2, r3
 801ce50:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801ce54:	6863      	ldr	r3, [r4, #4]
 801ce56:	f8d8 0000 	ldr.w	r0, [r8]
 801ce5a:	1c5a      	adds	r2, r3, #1
 801ce5c:	3302      	adds	r3, #2
 801ce5e:	6062      	str	r2, [r4, #4]
 801ce60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ce64:	f000 f9c6 	bl	801d1f4 <__retarget_lock_release_recursive>
 801ce68:	2000      	movs	r0, #0
 801ce6a:	e7c6      	b.n	801cdfa <__register_exitproc+0x3e>
 801ce6c:	24006ee0 	.word	0x24006ee0
 801ce70:	24006e54 	.word	0x24006e54
 801ce74:	08020f14 	.word	0x08020f14
 801ce78:	0801c419 	.word	0x0801c419
 801ce7c:	2400013c 	.word	0x2400013c

0801ce80 <__sflush_r>:
 801ce80:	898a      	ldrh	r2, [r1, #12]
 801ce82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce86:	4605      	mov	r5, r0
 801ce88:	0710      	lsls	r0, r2, #28
 801ce8a:	460c      	mov	r4, r1
 801ce8c:	d458      	bmi.n	801cf40 <__sflush_r+0xc0>
 801ce8e:	684b      	ldr	r3, [r1, #4]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	dc05      	bgt.n	801cea0 <__sflush_r+0x20>
 801ce94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	dc02      	bgt.n	801cea0 <__sflush_r+0x20>
 801ce9a:	2000      	movs	r0, #0
 801ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cea2:	2e00      	cmp	r6, #0
 801cea4:	d0f9      	beq.n	801ce9a <__sflush_r+0x1a>
 801cea6:	2300      	movs	r3, #0
 801cea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ceac:	682f      	ldr	r7, [r5, #0]
 801ceae:	602b      	str	r3, [r5, #0]
 801ceb0:	d032      	beq.n	801cf18 <__sflush_r+0x98>
 801ceb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ceb4:	89a3      	ldrh	r3, [r4, #12]
 801ceb6:	075a      	lsls	r2, r3, #29
 801ceb8:	d505      	bpl.n	801cec6 <__sflush_r+0x46>
 801ceba:	6863      	ldr	r3, [r4, #4]
 801cebc:	1ac0      	subs	r0, r0, r3
 801cebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cec0:	b10b      	cbz	r3, 801cec6 <__sflush_r+0x46>
 801cec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cec4:	1ac0      	subs	r0, r0, r3
 801cec6:	2300      	movs	r3, #0
 801cec8:	4602      	mov	r2, r0
 801ceca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cecc:	6a21      	ldr	r1, [r4, #32]
 801cece:	4628      	mov	r0, r5
 801ced0:	47b0      	blx	r6
 801ced2:	1c43      	adds	r3, r0, #1
 801ced4:	89a3      	ldrh	r3, [r4, #12]
 801ced6:	d106      	bne.n	801cee6 <__sflush_r+0x66>
 801ced8:	6829      	ldr	r1, [r5, #0]
 801ceda:	291d      	cmp	r1, #29
 801cedc:	d82c      	bhi.n	801cf38 <__sflush_r+0xb8>
 801cede:	4a2a      	ldr	r2, [pc, #168]	; (801cf88 <__sflush_r+0x108>)
 801cee0:	40ca      	lsrs	r2, r1
 801cee2:	07d6      	lsls	r6, r2, #31
 801cee4:	d528      	bpl.n	801cf38 <__sflush_r+0xb8>
 801cee6:	2200      	movs	r2, #0
 801cee8:	6062      	str	r2, [r4, #4]
 801ceea:	04d9      	lsls	r1, r3, #19
 801ceec:	6922      	ldr	r2, [r4, #16]
 801ceee:	6022      	str	r2, [r4, #0]
 801cef0:	d504      	bpl.n	801cefc <__sflush_r+0x7c>
 801cef2:	1c42      	adds	r2, r0, #1
 801cef4:	d101      	bne.n	801cefa <__sflush_r+0x7a>
 801cef6:	682b      	ldr	r3, [r5, #0]
 801cef8:	b903      	cbnz	r3, 801cefc <__sflush_r+0x7c>
 801cefa:	6560      	str	r0, [r4, #84]	; 0x54
 801cefc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cefe:	602f      	str	r7, [r5, #0]
 801cf00:	2900      	cmp	r1, #0
 801cf02:	d0ca      	beq.n	801ce9a <__sflush_r+0x1a>
 801cf04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf08:	4299      	cmp	r1, r3
 801cf0a:	d002      	beq.n	801cf12 <__sflush_r+0x92>
 801cf0c:	4628      	mov	r0, r5
 801cf0e:	f7ff faa9 	bl	801c464 <_free_r>
 801cf12:	2000      	movs	r0, #0
 801cf14:	6360      	str	r0, [r4, #52]	; 0x34
 801cf16:	e7c1      	b.n	801ce9c <__sflush_r+0x1c>
 801cf18:	6a21      	ldr	r1, [r4, #32]
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	4628      	mov	r0, r5
 801cf1e:	47b0      	blx	r6
 801cf20:	1c41      	adds	r1, r0, #1
 801cf22:	d1c7      	bne.n	801ceb4 <__sflush_r+0x34>
 801cf24:	682b      	ldr	r3, [r5, #0]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d0c4      	beq.n	801ceb4 <__sflush_r+0x34>
 801cf2a:	2b1d      	cmp	r3, #29
 801cf2c:	d001      	beq.n	801cf32 <__sflush_r+0xb2>
 801cf2e:	2b16      	cmp	r3, #22
 801cf30:	d101      	bne.n	801cf36 <__sflush_r+0xb6>
 801cf32:	602f      	str	r7, [r5, #0]
 801cf34:	e7b1      	b.n	801ce9a <__sflush_r+0x1a>
 801cf36:	89a3      	ldrh	r3, [r4, #12]
 801cf38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf3c:	81a3      	strh	r3, [r4, #12]
 801cf3e:	e7ad      	b.n	801ce9c <__sflush_r+0x1c>
 801cf40:	690f      	ldr	r7, [r1, #16]
 801cf42:	2f00      	cmp	r7, #0
 801cf44:	d0a9      	beq.n	801ce9a <__sflush_r+0x1a>
 801cf46:	0793      	lsls	r3, r2, #30
 801cf48:	680e      	ldr	r6, [r1, #0]
 801cf4a:	bf08      	it	eq
 801cf4c:	694b      	ldreq	r3, [r1, #20]
 801cf4e:	600f      	str	r7, [r1, #0]
 801cf50:	bf18      	it	ne
 801cf52:	2300      	movne	r3, #0
 801cf54:	eba6 0807 	sub.w	r8, r6, r7
 801cf58:	608b      	str	r3, [r1, #8]
 801cf5a:	f1b8 0f00 	cmp.w	r8, #0
 801cf5e:	dd9c      	ble.n	801ce9a <__sflush_r+0x1a>
 801cf60:	6a21      	ldr	r1, [r4, #32]
 801cf62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cf64:	4643      	mov	r3, r8
 801cf66:	463a      	mov	r2, r7
 801cf68:	4628      	mov	r0, r5
 801cf6a:	47b0      	blx	r6
 801cf6c:	2800      	cmp	r0, #0
 801cf6e:	dc06      	bgt.n	801cf7e <__sflush_r+0xfe>
 801cf70:	89a3      	ldrh	r3, [r4, #12]
 801cf72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf76:	81a3      	strh	r3, [r4, #12]
 801cf78:	f04f 30ff 	mov.w	r0, #4294967295
 801cf7c:	e78e      	b.n	801ce9c <__sflush_r+0x1c>
 801cf7e:	4407      	add	r7, r0
 801cf80:	eba8 0800 	sub.w	r8, r8, r0
 801cf84:	e7e9      	b.n	801cf5a <__sflush_r+0xda>
 801cf86:	bf00      	nop
 801cf88:	20400001 	.word	0x20400001

0801cf8c <_fflush_r>:
 801cf8c:	b538      	push	{r3, r4, r5, lr}
 801cf8e:	690b      	ldr	r3, [r1, #16]
 801cf90:	4605      	mov	r5, r0
 801cf92:	460c      	mov	r4, r1
 801cf94:	b913      	cbnz	r3, 801cf9c <_fflush_r+0x10>
 801cf96:	2500      	movs	r5, #0
 801cf98:	4628      	mov	r0, r5
 801cf9a:	bd38      	pop	{r3, r4, r5, pc}
 801cf9c:	b118      	cbz	r0, 801cfa6 <_fflush_r+0x1a>
 801cf9e:	6983      	ldr	r3, [r0, #24]
 801cfa0:	b90b      	cbnz	r3, 801cfa6 <_fflush_r+0x1a>
 801cfa2:	f000 f887 	bl	801d0b4 <__sinit>
 801cfa6:	4b14      	ldr	r3, [pc, #80]	; (801cff8 <_fflush_r+0x6c>)
 801cfa8:	429c      	cmp	r4, r3
 801cfaa:	d11b      	bne.n	801cfe4 <_fflush_r+0x58>
 801cfac:	686c      	ldr	r4, [r5, #4]
 801cfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d0ef      	beq.n	801cf96 <_fflush_r+0xa>
 801cfb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cfb8:	07d0      	lsls	r0, r2, #31
 801cfba:	d404      	bmi.n	801cfc6 <_fflush_r+0x3a>
 801cfbc:	0599      	lsls	r1, r3, #22
 801cfbe:	d402      	bmi.n	801cfc6 <_fflush_r+0x3a>
 801cfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cfc2:	f000 f915 	bl	801d1f0 <__retarget_lock_acquire_recursive>
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	4621      	mov	r1, r4
 801cfca:	f7ff ff59 	bl	801ce80 <__sflush_r>
 801cfce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cfd0:	07da      	lsls	r2, r3, #31
 801cfd2:	4605      	mov	r5, r0
 801cfd4:	d4e0      	bmi.n	801cf98 <_fflush_r+0xc>
 801cfd6:	89a3      	ldrh	r3, [r4, #12]
 801cfd8:	059b      	lsls	r3, r3, #22
 801cfda:	d4dd      	bmi.n	801cf98 <_fflush_r+0xc>
 801cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cfde:	f000 f909 	bl	801d1f4 <__retarget_lock_release_recursive>
 801cfe2:	e7d9      	b.n	801cf98 <_fflush_r+0xc>
 801cfe4:	4b05      	ldr	r3, [pc, #20]	; (801cffc <_fflush_r+0x70>)
 801cfe6:	429c      	cmp	r4, r3
 801cfe8:	d101      	bne.n	801cfee <_fflush_r+0x62>
 801cfea:	68ac      	ldr	r4, [r5, #8]
 801cfec:	e7df      	b.n	801cfae <_fflush_r+0x22>
 801cfee:	4b04      	ldr	r3, [pc, #16]	; (801d000 <_fflush_r+0x74>)
 801cff0:	429c      	cmp	r4, r3
 801cff2:	bf08      	it	eq
 801cff4:	68ec      	ldreq	r4, [r5, #12]
 801cff6:	e7da      	b.n	801cfae <_fflush_r+0x22>
 801cff8:	08020f38 	.word	0x08020f38
 801cffc:	08020f58 	.word	0x08020f58
 801d000:	08020f18 	.word	0x08020f18

0801d004 <std>:
 801d004:	2300      	movs	r3, #0
 801d006:	b510      	push	{r4, lr}
 801d008:	4604      	mov	r4, r0
 801d00a:	e9c0 3300 	strd	r3, r3, [r0]
 801d00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d012:	6083      	str	r3, [r0, #8]
 801d014:	8181      	strh	r1, [r0, #12]
 801d016:	6643      	str	r3, [r0, #100]	; 0x64
 801d018:	81c2      	strh	r2, [r0, #14]
 801d01a:	6183      	str	r3, [r0, #24]
 801d01c:	4619      	mov	r1, r3
 801d01e:	2208      	movs	r2, #8
 801d020:	305c      	adds	r0, #92	; 0x5c
 801d022:	f7ff fa17 	bl	801c454 <memset>
 801d026:	4b05      	ldr	r3, [pc, #20]	; (801d03c <std+0x38>)
 801d028:	6263      	str	r3, [r4, #36]	; 0x24
 801d02a:	4b05      	ldr	r3, [pc, #20]	; (801d040 <std+0x3c>)
 801d02c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d02e:	4b05      	ldr	r3, [pc, #20]	; (801d044 <std+0x40>)
 801d030:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d032:	4b05      	ldr	r3, [pc, #20]	; (801d048 <std+0x44>)
 801d034:	6224      	str	r4, [r4, #32]
 801d036:	6323      	str	r3, [r4, #48]	; 0x30
 801d038:	bd10      	pop	{r4, pc}
 801d03a:	bf00      	nop
 801d03c:	0801d2d9 	.word	0x0801d2d9
 801d040:	0801d2fb 	.word	0x0801d2fb
 801d044:	0801d333 	.word	0x0801d333
 801d048:	0801d357 	.word	0x0801d357

0801d04c <_cleanup_r>:
 801d04c:	4901      	ldr	r1, [pc, #4]	; (801d054 <_cleanup_r+0x8>)
 801d04e:	f000 b8af 	b.w	801d1b0 <_fwalk_reent>
 801d052:	bf00      	nop
 801d054:	0801cf8d 	.word	0x0801cf8d

0801d058 <__sfmoreglue>:
 801d058:	b570      	push	{r4, r5, r6, lr}
 801d05a:	1e4a      	subs	r2, r1, #1
 801d05c:	2568      	movs	r5, #104	; 0x68
 801d05e:	4355      	muls	r5, r2
 801d060:	460e      	mov	r6, r1
 801d062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d066:	f7ff fa4d 	bl	801c504 <_malloc_r>
 801d06a:	4604      	mov	r4, r0
 801d06c:	b140      	cbz	r0, 801d080 <__sfmoreglue+0x28>
 801d06e:	2100      	movs	r1, #0
 801d070:	e9c0 1600 	strd	r1, r6, [r0]
 801d074:	300c      	adds	r0, #12
 801d076:	60a0      	str	r0, [r4, #8]
 801d078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d07c:	f7ff f9ea 	bl	801c454 <memset>
 801d080:	4620      	mov	r0, r4
 801d082:	bd70      	pop	{r4, r5, r6, pc}

0801d084 <__sfp_lock_acquire>:
 801d084:	4801      	ldr	r0, [pc, #4]	; (801d08c <__sfp_lock_acquire+0x8>)
 801d086:	f000 b8b3 	b.w	801d1f0 <__retarget_lock_acquire_recursive>
 801d08a:	bf00      	nop
 801d08c:	24007348 	.word	0x24007348

0801d090 <__sfp_lock_release>:
 801d090:	4801      	ldr	r0, [pc, #4]	; (801d098 <__sfp_lock_release+0x8>)
 801d092:	f000 b8af 	b.w	801d1f4 <__retarget_lock_release_recursive>
 801d096:	bf00      	nop
 801d098:	24007348 	.word	0x24007348

0801d09c <__sinit_lock_acquire>:
 801d09c:	4801      	ldr	r0, [pc, #4]	; (801d0a4 <__sinit_lock_acquire+0x8>)
 801d09e:	f000 b8a7 	b.w	801d1f0 <__retarget_lock_acquire_recursive>
 801d0a2:	bf00      	nop
 801d0a4:	24007343 	.word	0x24007343

0801d0a8 <__sinit_lock_release>:
 801d0a8:	4801      	ldr	r0, [pc, #4]	; (801d0b0 <__sinit_lock_release+0x8>)
 801d0aa:	f000 b8a3 	b.w	801d1f4 <__retarget_lock_release_recursive>
 801d0ae:	bf00      	nop
 801d0b0:	24007343 	.word	0x24007343

0801d0b4 <__sinit>:
 801d0b4:	b510      	push	{r4, lr}
 801d0b6:	4604      	mov	r4, r0
 801d0b8:	f7ff fff0 	bl	801d09c <__sinit_lock_acquire>
 801d0bc:	69a3      	ldr	r3, [r4, #24]
 801d0be:	b11b      	cbz	r3, 801d0c8 <__sinit+0x14>
 801d0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0c4:	f7ff bff0 	b.w	801d0a8 <__sinit_lock_release>
 801d0c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d0cc:	6523      	str	r3, [r4, #80]	; 0x50
 801d0ce:	4b13      	ldr	r3, [pc, #76]	; (801d11c <__sinit+0x68>)
 801d0d0:	4a13      	ldr	r2, [pc, #76]	; (801d120 <__sinit+0x6c>)
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801d0d6:	42a3      	cmp	r3, r4
 801d0d8:	bf04      	itt	eq
 801d0da:	2301      	moveq	r3, #1
 801d0dc:	61a3      	streq	r3, [r4, #24]
 801d0de:	4620      	mov	r0, r4
 801d0e0:	f000 f820 	bl	801d124 <__sfp>
 801d0e4:	6060      	str	r0, [r4, #4]
 801d0e6:	4620      	mov	r0, r4
 801d0e8:	f000 f81c 	bl	801d124 <__sfp>
 801d0ec:	60a0      	str	r0, [r4, #8]
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	f000 f818 	bl	801d124 <__sfp>
 801d0f4:	2200      	movs	r2, #0
 801d0f6:	60e0      	str	r0, [r4, #12]
 801d0f8:	2104      	movs	r1, #4
 801d0fa:	6860      	ldr	r0, [r4, #4]
 801d0fc:	f7ff ff82 	bl	801d004 <std>
 801d100:	68a0      	ldr	r0, [r4, #8]
 801d102:	2201      	movs	r2, #1
 801d104:	2109      	movs	r1, #9
 801d106:	f7ff ff7d 	bl	801d004 <std>
 801d10a:	68e0      	ldr	r0, [r4, #12]
 801d10c:	2202      	movs	r2, #2
 801d10e:	2112      	movs	r1, #18
 801d110:	f7ff ff78 	bl	801d004 <std>
 801d114:	2301      	movs	r3, #1
 801d116:	61a3      	str	r3, [r4, #24]
 801d118:	e7d2      	b.n	801d0c0 <__sinit+0xc>
 801d11a:	bf00      	nop
 801d11c:	08020edc 	.word	0x08020edc
 801d120:	0801d04d 	.word	0x0801d04d

0801d124 <__sfp>:
 801d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d126:	4607      	mov	r7, r0
 801d128:	f7ff ffac 	bl	801d084 <__sfp_lock_acquire>
 801d12c:	4b1e      	ldr	r3, [pc, #120]	; (801d1a8 <__sfp+0x84>)
 801d12e:	681e      	ldr	r6, [r3, #0]
 801d130:	69b3      	ldr	r3, [r6, #24]
 801d132:	b913      	cbnz	r3, 801d13a <__sfp+0x16>
 801d134:	4630      	mov	r0, r6
 801d136:	f7ff ffbd 	bl	801d0b4 <__sinit>
 801d13a:	3648      	adds	r6, #72	; 0x48
 801d13c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d140:	3b01      	subs	r3, #1
 801d142:	d503      	bpl.n	801d14c <__sfp+0x28>
 801d144:	6833      	ldr	r3, [r6, #0]
 801d146:	b30b      	cbz	r3, 801d18c <__sfp+0x68>
 801d148:	6836      	ldr	r6, [r6, #0]
 801d14a:	e7f7      	b.n	801d13c <__sfp+0x18>
 801d14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d150:	b9d5      	cbnz	r5, 801d188 <__sfp+0x64>
 801d152:	4b16      	ldr	r3, [pc, #88]	; (801d1ac <__sfp+0x88>)
 801d154:	60e3      	str	r3, [r4, #12]
 801d156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d15a:	6665      	str	r5, [r4, #100]	; 0x64
 801d15c:	f000 f847 	bl	801d1ee <__retarget_lock_init_recursive>
 801d160:	f7ff ff96 	bl	801d090 <__sfp_lock_release>
 801d164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d16c:	6025      	str	r5, [r4, #0]
 801d16e:	61a5      	str	r5, [r4, #24]
 801d170:	2208      	movs	r2, #8
 801d172:	4629      	mov	r1, r5
 801d174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d178:	f7ff f96c 	bl	801c454 <memset>
 801d17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d184:	4620      	mov	r0, r4
 801d186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d188:	3468      	adds	r4, #104	; 0x68
 801d18a:	e7d9      	b.n	801d140 <__sfp+0x1c>
 801d18c:	2104      	movs	r1, #4
 801d18e:	4638      	mov	r0, r7
 801d190:	f7ff ff62 	bl	801d058 <__sfmoreglue>
 801d194:	4604      	mov	r4, r0
 801d196:	6030      	str	r0, [r6, #0]
 801d198:	2800      	cmp	r0, #0
 801d19a:	d1d5      	bne.n	801d148 <__sfp+0x24>
 801d19c:	f7ff ff78 	bl	801d090 <__sfp_lock_release>
 801d1a0:	230c      	movs	r3, #12
 801d1a2:	603b      	str	r3, [r7, #0]
 801d1a4:	e7ee      	b.n	801d184 <__sfp+0x60>
 801d1a6:	bf00      	nop
 801d1a8:	08020edc 	.word	0x08020edc
 801d1ac:	ffff0001 	.word	0xffff0001

0801d1b0 <_fwalk_reent>:
 801d1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1b4:	4606      	mov	r6, r0
 801d1b6:	4688      	mov	r8, r1
 801d1b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d1bc:	2700      	movs	r7, #0
 801d1be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d1c2:	f1b9 0901 	subs.w	r9, r9, #1
 801d1c6:	d505      	bpl.n	801d1d4 <_fwalk_reent+0x24>
 801d1c8:	6824      	ldr	r4, [r4, #0]
 801d1ca:	2c00      	cmp	r4, #0
 801d1cc:	d1f7      	bne.n	801d1be <_fwalk_reent+0xe>
 801d1ce:	4638      	mov	r0, r7
 801d1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1d4:	89ab      	ldrh	r3, [r5, #12]
 801d1d6:	2b01      	cmp	r3, #1
 801d1d8:	d907      	bls.n	801d1ea <_fwalk_reent+0x3a>
 801d1da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d1de:	3301      	adds	r3, #1
 801d1e0:	d003      	beq.n	801d1ea <_fwalk_reent+0x3a>
 801d1e2:	4629      	mov	r1, r5
 801d1e4:	4630      	mov	r0, r6
 801d1e6:	47c0      	blx	r8
 801d1e8:	4307      	orrs	r7, r0
 801d1ea:	3568      	adds	r5, #104	; 0x68
 801d1ec:	e7e9      	b.n	801d1c2 <_fwalk_reent+0x12>

0801d1ee <__retarget_lock_init_recursive>:
 801d1ee:	4770      	bx	lr

0801d1f0 <__retarget_lock_acquire_recursive>:
 801d1f0:	4770      	bx	lr

0801d1f2 <__retarget_lock_release>:
 801d1f2:	4770      	bx	lr

0801d1f4 <__retarget_lock_release_recursive>:
 801d1f4:	4770      	bx	lr

0801d1f6 <__swhatbuf_r>:
 801d1f6:	b570      	push	{r4, r5, r6, lr}
 801d1f8:	460e      	mov	r6, r1
 801d1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1fe:	2900      	cmp	r1, #0
 801d200:	b096      	sub	sp, #88	; 0x58
 801d202:	4614      	mov	r4, r2
 801d204:	461d      	mov	r5, r3
 801d206:	da07      	bge.n	801d218 <__swhatbuf_r+0x22>
 801d208:	2300      	movs	r3, #0
 801d20a:	602b      	str	r3, [r5, #0]
 801d20c:	89b3      	ldrh	r3, [r6, #12]
 801d20e:	061a      	lsls	r2, r3, #24
 801d210:	d410      	bmi.n	801d234 <__swhatbuf_r+0x3e>
 801d212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d216:	e00e      	b.n	801d236 <__swhatbuf_r+0x40>
 801d218:	466a      	mov	r2, sp
 801d21a:	f000 f8c3 	bl	801d3a4 <_fstat_r>
 801d21e:	2800      	cmp	r0, #0
 801d220:	dbf2      	blt.n	801d208 <__swhatbuf_r+0x12>
 801d222:	9a01      	ldr	r2, [sp, #4]
 801d224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d22c:	425a      	negs	r2, r3
 801d22e:	415a      	adcs	r2, r3
 801d230:	602a      	str	r2, [r5, #0]
 801d232:	e7ee      	b.n	801d212 <__swhatbuf_r+0x1c>
 801d234:	2340      	movs	r3, #64	; 0x40
 801d236:	2000      	movs	r0, #0
 801d238:	6023      	str	r3, [r4, #0]
 801d23a:	b016      	add	sp, #88	; 0x58
 801d23c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d240 <__smakebuf_r>:
 801d240:	898b      	ldrh	r3, [r1, #12]
 801d242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d244:	079d      	lsls	r5, r3, #30
 801d246:	4606      	mov	r6, r0
 801d248:	460c      	mov	r4, r1
 801d24a:	d507      	bpl.n	801d25c <__smakebuf_r+0x1c>
 801d24c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d250:	6023      	str	r3, [r4, #0]
 801d252:	6123      	str	r3, [r4, #16]
 801d254:	2301      	movs	r3, #1
 801d256:	6163      	str	r3, [r4, #20]
 801d258:	b002      	add	sp, #8
 801d25a:	bd70      	pop	{r4, r5, r6, pc}
 801d25c:	ab01      	add	r3, sp, #4
 801d25e:	466a      	mov	r2, sp
 801d260:	f7ff ffc9 	bl	801d1f6 <__swhatbuf_r>
 801d264:	9900      	ldr	r1, [sp, #0]
 801d266:	4605      	mov	r5, r0
 801d268:	4630      	mov	r0, r6
 801d26a:	f7ff f94b 	bl	801c504 <_malloc_r>
 801d26e:	b948      	cbnz	r0, 801d284 <__smakebuf_r+0x44>
 801d270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d274:	059a      	lsls	r2, r3, #22
 801d276:	d4ef      	bmi.n	801d258 <__smakebuf_r+0x18>
 801d278:	f023 0303 	bic.w	r3, r3, #3
 801d27c:	f043 0302 	orr.w	r3, r3, #2
 801d280:	81a3      	strh	r3, [r4, #12]
 801d282:	e7e3      	b.n	801d24c <__smakebuf_r+0xc>
 801d284:	4b0d      	ldr	r3, [pc, #52]	; (801d2bc <__smakebuf_r+0x7c>)
 801d286:	62b3      	str	r3, [r6, #40]	; 0x28
 801d288:	89a3      	ldrh	r3, [r4, #12]
 801d28a:	6020      	str	r0, [r4, #0]
 801d28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d290:	81a3      	strh	r3, [r4, #12]
 801d292:	9b00      	ldr	r3, [sp, #0]
 801d294:	6163      	str	r3, [r4, #20]
 801d296:	9b01      	ldr	r3, [sp, #4]
 801d298:	6120      	str	r0, [r4, #16]
 801d29a:	b15b      	cbz	r3, 801d2b4 <__smakebuf_r+0x74>
 801d29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d2a0:	4630      	mov	r0, r6
 801d2a2:	f000 f891 	bl	801d3c8 <_isatty_r>
 801d2a6:	b128      	cbz	r0, 801d2b4 <__smakebuf_r+0x74>
 801d2a8:	89a3      	ldrh	r3, [r4, #12]
 801d2aa:	f023 0303 	bic.w	r3, r3, #3
 801d2ae:	f043 0301 	orr.w	r3, r3, #1
 801d2b2:	81a3      	strh	r3, [r4, #12]
 801d2b4:	89a0      	ldrh	r0, [r4, #12]
 801d2b6:	4305      	orrs	r5, r0
 801d2b8:	81a5      	strh	r5, [r4, #12]
 801d2ba:	e7cd      	b.n	801d258 <__smakebuf_r+0x18>
 801d2bc:	0801d04d 	.word	0x0801d04d

0801d2c0 <__malloc_lock>:
 801d2c0:	4801      	ldr	r0, [pc, #4]	; (801d2c8 <__malloc_lock+0x8>)
 801d2c2:	f7ff bf95 	b.w	801d1f0 <__retarget_lock_acquire_recursive>
 801d2c6:	bf00      	nop
 801d2c8:	24007344 	.word	0x24007344

0801d2cc <__malloc_unlock>:
 801d2cc:	4801      	ldr	r0, [pc, #4]	; (801d2d4 <__malloc_unlock+0x8>)
 801d2ce:	f7ff bf91 	b.w	801d1f4 <__retarget_lock_release_recursive>
 801d2d2:	bf00      	nop
 801d2d4:	24007344 	.word	0x24007344

0801d2d8 <__sread>:
 801d2d8:	b510      	push	{r4, lr}
 801d2da:	460c      	mov	r4, r1
 801d2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2e0:	f000 f894 	bl	801d40c <_read_r>
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	bfab      	itete	ge
 801d2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d2ea:	89a3      	ldrhlt	r3, [r4, #12]
 801d2ec:	181b      	addge	r3, r3, r0
 801d2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d2f2:	bfac      	ite	ge
 801d2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801d2f6:	81a3      	strhlt	r3, [r4, #12]
 801d2f8:	bd10      	pop	{r4, pc}

0801d2fa <__swrite>:
 801d2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2fe:	461f      	mov	r7, r3
 801d300:	898b      	ldrh	r3, [r1, #12]
 801d302:	05db      	lsls	r3, r3, #23
 801d304:	4605      	mov	r5, r0
 801d306:	460c      	mov	r4, r1
 801d308:	4616      	mov	r6, r2
 801d30a:	d505      	bpl.n	801d318 <__swrite+0x1e>
 801d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d310:	2302      	movs	r3, #2
 801d312:	2200      	movs	r2, #0
 801d314:	f000 f868 	bl	801d3e8 <_lseek_r>
 801d318:	89a3      	ldrh	r3, [r4, #12]
 801d31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d322:	81a3      	strh	r3, [r4, #12]
 801d324:	4632      	mov	r2, r6
 801d326:	463b      	mov	r3, r7
 801d328:	4628      	mov	r0, r5
 801d32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d32e:	f000 b817 	b.w	801d360 <_write_r>

0801d332 <__sseek>:
 801d332:	b510      	push	{r4, lr}
 801d334:	460c      	mov	r4, r1
 801d336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d33a:	f000 f855 	bl	801d3e8 <_lseek_r>
 801d33e:	1c43      	adds	r3, r0, #1
 801d340:	89a3      	ldrh	r3, [r4, #12]
 801d342:	bf15      	itete	ne
 801d344:	6560      	strne	r0, [r4, #84]	; 0x54
 801d346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d34e:	81a3      	strheq	r3, [r4, #12]
 801d350:	bf18      	it	ne
 801d352:	81a3      	strhne	r3, [r4, #12]
 801d354:	bd10      	pop	{r4, pc}

0801d356 <__sclose>:
 801d356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d35a:	f000 b813 	b.w	801d384 <_close_r>
	...

0801d360 <_write_r>:
 801d360:	b538      	push	{r3, r4, r5, lr}
 801d362:	4d07      	ldr	r5, [pc, #28]	; (801d380 <_write_r+0x20>)
 801d364:	4604      	mov	r4, r0
 801d366:	4608      	mov	r0, r1
 801d368:	4611      	mov	r1, r2
 801d36a:	2200      	movs	r2, #0
 801d36c:	602a      	str	r2, [r5, #0]
 801d36e:	461a      	mov	r2, r3
 801d370:	f7e4 fce5 	bl	8001d3e <_write>
 801d374:	1c43      	adds	r3, r0, #1
 801d376:	d102      	bne.n	801d37e <_write_r+0x1e>
 801d378:	682b      	ldr	r3, [r5, #0]
 801d37a:	b103      	cbz	r3, 801d37e <_write_r+0x1e>
 801d37c:	6023      	str	r3, [r4, #0]
 801d37e:	bd38      	pop	{r3, r4, r5, pc}
 801d380:	2400734c 	.word	0x2400734c

0801d384 <_close_r>:
 801d384:	b538      	push	{r3, r4, r5, lr}
 801d386:	4d06      	ldr	r5, [pc, #24]	; (801d3a0 <_close_r+0x1c>)
 801d388:	2300      	movs	r3, #0
 801d38a:	4604      	mov	r4, r0
 801d38c:	4608      	mov	r0, r1
 801d38e:	602b      	str	r3, [r5, #0]
 801d390:	f7e4 fce2 	bl	8001d58 <_close>
 801d394:	1c43      	adds	r3, r0, #1
 801d396:	d102      	bne.n	801d39e <_close_r+0x1a>
 801d398:	682b      	ldr	r3, [r5, #0]
 801d39a:	b103      	cbz	r3, 801d39e <_close_r+0x1a>
 801d39c:	6023      	str	r3, [r4, #0]
 801d39e:	bd38      	pop	{r3, r4, r5, pc}
 801d3a0:	2400734c 	.word	0x2400734c

0801d3a4 <_fstat_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4d07      	ldr	r5, [pc, #28]	; (801d3c4 <_fstat_r+0x20>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	4611      	mov	r1, r2
 801d3b0:	602b      	str	r3, [r5, #0]
 801d3b2:	f7e4 fcd4 	bl	8001d5e <_fstat>
 801d3b6:	1c43      	adds	r3, r0, #1
 801d3b8:	d102      	bne.n	801d3c0 <_fstat_r+0x1c>
 801d3ba:	682b      	ldr	r3, [r5, #0]
 801d3bc:	b103      	cbz	r3, 801d3c0 <_fstat_r+0x1c>
 801d3be:	6023      	str	r3, [r4, #0]
 801d3c0:	bd38      	pop	{r3, r4, r5, pc}
 801d3c2:	bf00      	nop
 801d3c4:	2400734c 	.word	0x2400734c

0801d3c8 <_isatty_r>:
 801d3c8:	b538      	push	{r3, r4, r5, lr}
 801d3ca:	4d06      	ldr	r5, [pc, #24]	; (801d3e4 <_isatty_r+0x1c>)
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	4608      	mov	r0, r1
 801d3d2:	602b      	str	r3, [r5, #0]
 801d3d4:	f7e4 fcc8 	bl	8001d68 <_isatty>
 801d3d8:	1c43      	adds	r3, r0, #1
 801d3da:	d102      	bne.n	801d3e2 <_isatty_r+0x1a>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	b103      	cbz	r3, 801d3e2 <_isatty_r+0x1a>
 801d3e0:	6023      	str	r3, [r4, #0]
 801d3e2:	bd38      	pop	{r3, r4, r5, pc}
 801d3e4:	2400734c 	.word	0x2400734c

0801d3e8 <_lseek_r>:
 801d3e8:	b538      	push	{r3, r4, r5, lr}
 801d3ea:	4d07      	ldr	r5, [pc, #28]	; (801d408 <_lseek_r+0x20>)
 801d3ec:	4604      	mov	r4, r0
 801d3ee:	4608      	mov	r0, r1
 801d3f0:	4611      	mov	r1, r2
 801d3f2:	2200      	movs	r2, #0
 801d3f4:	602a      	str	r2, [r5, #0]
 801d3f6:	461a      	mov	r2, r3
 801d3f8:	f7e4 fcb8 	bl	8001d6c <_lseek>
 801d3fc:	1c43      	adds	r3, r0, #1
 801d3fe:	d102      	bne.n	801d406 <_lseek_r+0x1e>
 801d400:	682b      	ldr	r3, [r5, #0]
 801d402:	b103      	cbz	r3, 801d406 <_lseek_r+0x1e>
 801d404:	6023      	str	r3, [r4, #0]
 801d406:	bd38      	pop	{r3, r4, r5, pc}
 801d408:	2400734c 	.word	0x2400734c

0801d40c <_read_r>:
 801d40c:	b538      	push	{r3, r4, r5, lr}
 801d40e:	4d07      	ldr	r5, [pc, #28]	; (801d42c <_read_r+0x20>)
 801d410:	4604      	mov	r4, r0
 801d412:	4608      	mov	r0, r1
 801d414:	4611      	mov	r1, r2
 801d416:	2200      	movs	r2, #0
 801d418:	602a      	str	r2, [r5, #0]
 801d41a:	461a      	mov	r2, r3
 801d41c:	f7e4 fc82 	bl	8001d24 <_read>
 801d420:	1c43      	adds	r3, r0, #1
 801d422:	d102      	bne.n	801d42a <_read_r+0x1e>
 801d424:	682b      	ldr	r3, [r5, #0]
 801d426:	b103      	cbz	r3, 801d42a <_read_r+0x1e>
 801d428:	6023      	str	r3, [r4, #0]
 801d42a:	bd38      	pop	{r3, r4, r5, pc}
 801d42c:	2400734c 	.word	0x2400734c

0801d430 <_init>:
 801d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d432:	bf00      	nop
 801d434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d436:	bc08      	pop	{r3}
 801d438:	469e      	mov	lr, r3
 801d43a:	4770      	bx	lr

0801d43c <_fini>:
 801d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d43e:	bf00      	nop
 801d440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d442:	bc08      	pop	{r3}
 801d444:	469e      	mov	lr, r3
 801d446:	4770      	bx	lr
