
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d118  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b30  0801d3e8  0801d3e8  0002d3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001192  08020f18  08020f18  00030f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000002c  080220ac  080220ac  000320ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000160  080220d8  080220d8  000320d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08022238  08022238  000d3d38  2**0
                  CONTENTS
  7 .ARM          00000000  08022238  08022238  000d3d38  2**0
                  CONTENTS
  8 .preinit_array 00000000  08022238  08022238  000d3d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08022238  08022238  00032238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802224c  0802224c  0003224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000148  24000000  08022254  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007204  24000148  0802239c  00040148  2**2
                  ALLOC
 13 ._user_heap_stack 00002004  2400734c  0802239c  0004734c  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000d3d38  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00083d38  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000f8d1a  00000000  00000000  000d3d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017d94  00000000  00000000  001cca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003220  00000000  00000000  001e4818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00006378  00000000  00000000  001e7a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000447fe  00000000  00000000  001eddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005b274  00000000  00000000  002325ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0018075f  00000000  00000000  0028d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0040df81  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009370  00000000  00000000  0040e054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00036e21  00000000  00000000  004173c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000148 	.word	0x24000148
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d3d0 	.word	0x0801d3d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400014c 	.word	0x2400014c
 800030c:	0801d3d0 	.word	0x0801d3d0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000728:	4901      	ldr	r1, [pc, #4]	; (8000730 <vApplicationIdleHook+0x8>)
 800072a:	2000      	movs	r0, #0
 800072c:	f00b ba70 	b.w	800bc10 <vTaskSetApplicationTaskTag>
 8000730:	080021a5 	.word	0x080021a5

08000734 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void *argument)
{
 8000734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f009 fe1b 	bl	800a372 <osDelay>
  for(;;)
 800073c:	e7fb      	b.n	8000736 <StartDefaultTask+0x2>
	...

08000740 <togglePiFlag>:
	piUsed = piFlag;
 8000740:	4b01      	ldr	r3, [pc, #4]	; (8000748 <togglePiFlag+0x8>)
 8000742:	7018      	strb	r0, [r3, #0]
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	24000194 	.word	0x24000194

0800074c <SystemClock_Config>:
{
 800074c:	b510      	push	{r4, lr}
 800074e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000750:	224c      	movs	r2, #76	; 0x4c
 8000752:	2100      	movs	r1, #0
 8000754:	a809      	add	r0, sp, #36	; 0x24
 8000756:	f01b fe4d 	bl	801c3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	a801      	add	r0, sp, #4
 8000760:	f01b fe48 	bl	801c3f4 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000764:	2004      	movs	r0, #4
 8000766:	f007 fd73 	bl	8008250 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076a:	2300      	movs	r3, #0
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0x9c>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000776:	619a      	str	r2, [r3, #24]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	699a      	ldr	r2, [r3, #24]
 8000784:	0491      	lsls	r1, r2, #18
 8000786:	d5fc      	bpl.n	8000782 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000788:	4a18      	ldr	r2, [pc, #96]	; (80007ec <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078a:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 800078c:	2130      	movs	r1, #48	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000790:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a2:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ae:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007b6:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ba:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f007 fd85 	bl	80082cc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2103      	movs	r1, #3
 80007c4:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007da:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	f008 f872 	bl	80088c8 <HAL_RCC_ClockConfig>
}
 80007e4:	b01c      	add	sp, #112	; 0x70
 80007e6:	bd10      	pop	{r4, pc}
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400

080007f0 <PeriphCommonClock_Config>:
{
 80007f0:	b500      	push	{lr}
 80007f2:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	2290      	movs	r2, #144	; 0x90
 80007f6:	2100      	movs	r1, #0
 80007f8:	a80a      	add	r0, sp, #40	; 0x28
 80007fa:	f01b fdfb 	bl	801c3f4 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80007fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000802:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000804:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000806:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000808:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000812:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000816:	2300      	movs	r3, #0
 8000818:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800081c:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800081e:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000820:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000822:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000824:	f008 fad6 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
}
 8000828:	b02f      	add	sp, #188	; 0xbc
 800082a:	f85d fb04 	ldr.w	pc, [sp], #4

0800082e <movingAvg>:
{
 800082e:	b570      	push	{r4, r5, r6, lr}
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000830:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8000834:	680c      	ldr	r4, [r1, #0]
{
 8000836:	9d04      	ldr	r5, [sp, #16]
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000838:	1ba4      	subs	r4, r4, r6
 800083a:	442c      	add	r4, r5
 800083c:	600c      	str	r4, [r1, #0]
  ptrArrNumbers[pos] = nextNum;
 800083e:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
}
 8000842:	fb94 f0f3 	sdiv	r0, r4, r3
 8000846:	bd70      	pop	{r4, r5, r6, pc}

08000848 <setModulationIndex>:
	if(DIVIDE_BY_TWO_PI(PI_angularFrq) < 1.5)
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <setModulationIndex+0x38>)
 800084a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000884 <setModulationIndex+0x3c>
 800084e:	edd3 6a00 	vldr	s13, [r3]
 8000852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000856:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800085a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d503      	bpl.n	800086c <setModulationIndex+0x24>
		modulationIndex = 0.03;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <setModulationIndex+0x40>)
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <setModulationIndex+0x44>)
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	4770      	bx	lr
		modulationIndex = DIVIDE_BY_TWO_PI(PI_angularFrq) / 50.0f;
 800086c:	bfa1      	itttt	ge
 800086e:	eddf 6a08 	vldrge	s13, [pc, #32]	; 8000890 <setModulationIndex+0x48>
 8000872:	4b05      	ldrge	r3, [pc, #20]	; (8000888 <setModulationIndex+0x40>)
 8000874:	ee87 7aa6 	vdivge.f32	s14, s15, s13
 8000878:	ed83 7a00 	vstrge	s14, [r3]
}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	24000164 	.word	0x24000164
 8000884:	40c90fdb 	.word	0x40c90fdb
 8000888:	2400002c 	.word	0x2400002c
 800088c:	3cf5c28f 	.word	0x3cf5c28f
 8000890:	42480000 	.word	0x42480000

08000894 <limitAngFrq>:
	if(PI_angularFrq > MULTIPLY_BY_TWO_PI(50)) PI_angularFrq = 314.159265f;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <limitAngFrq+0x2c>)
 8000896:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80008c4 <limitAngFrq+0x30>
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a6:	dd02      	ble.n	80008ae <limitAngFrq+0x1a>
 80008a8:	ed83 7a00 	vstr	s14, [r3]
	if(PI_angularFrq < 0) PI_angularFrq = 0;
 80008ac:	4770      	bx	lr
 80008ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b6:	bf44      	itt	mi
 80008b8:	2200      	movmi	r2, #0
 80008ba:	601a      	strmi	r2, [r3, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	24000164 	.word	0x24000164
 80008c4:	439d1463 	.word	0x439d1463

080008c8 <adjustRPM>:
	angularFrq = MULTIPLY_BY_TWO_PI(fooRPM) / 60.0f;
 80008c8:	ee07 0a90 	vmov	s15, r0
 80008cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80008e8 <adjustRPM+0x20>
 80008d0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80008ec <adjustRPM+0x24>
 80008d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <adjustRPM+0x28>)
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008e2:	ed83 7a00 	vstr	s14, [r3]
}
 80008e6:	4770      	bx	lr
 80008e8:	40c90fdb 	.word	0x40c90fdb
 80008ec:	42700000 	.word	0x42700000
 80008f0:	24000020 	.word	0x24000020

080008f4 <pi_control>:
	arg->sum = sat(arg->sum + KI * error ,arg->plmt, arg->nlmt);
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <pi_control+0x58>)
 80008f6:	edd0 7a04 	vldr	s15, [r0, #16]
 80008fa:	ed93 7a00 	vldr	s14, [r3]
 80008fe:	edd0 6a02 	vldr	s13, [r0, #8]
 8000902:	eee7 7a00 	vfma.f32	s15, s14, s0
 8000906:	ed90 7a03 	vldr	s14, [r0, #12]
	return  sat(arg->sum + error * KP,arg->plmt, arg->nlmt);
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <pi_control+0x5c>)
 800090c:	ed93 6a00 	vldr	s12, [r3]
		x = max;
 8000910:	eef4 7a66 	vcmp.f32	s15, s13
 8000914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000918:	fe76 7aa7 	vselgt.f32	s15, s13, s15
		x = min;
 800091c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000924:	fe77 7a27 	vselgt.f32	s15, s14, s15
	arg->sum = sat(arg->sum + KI * error ,arg->plmt, arg->nlmt);
 8000928:	edc0 7a04 	vstr	s15, [r0, #16]
	return  sat(arg->sum + error * KP,arg->plmt, arg->nlmt);
 800092c:	eee6 7a00 	vfma.f32	s15, s12, s0
		x = max;
 8000930:	eef4 6a67 	vcmp.f32	s13, s15
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	bf48      	it	mi
 800093a:	eef0 7a66 	vmovmi.f32	s15, s13
		x = min;
 800093e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8000946:	fe37 0a27 	vselgt.f32	s0, s14, s15
 800094a:	4770      	bx	lr
 800094c:	24000004 	.word	0x24000004
 8000950:	24000008 	.word	0x24000008

08000954 <HAL_TIM_IC_CaptureCallback>:
	if(htim->Instance == TIM23)
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_IC_CaptureCallback+0x28>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d10d      	bne.n	8000978 <HAL_TIM_IC_CaptureCallback+0x24>
		counterEnc = __HAL_TIM_GET_COUNTER(htim);
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x2c>)
		position = signedCounterEnc/4.0;
 8000960:	ee07 3a10 	vmov	s14, r3
 8000964:	eeba 7bcf 	vcvt.f64.s32	d7, d7, #2
		counterEnc = __HAL_TIM_GET_COUNTER(htim);
 8000968:	6013      	str	r3, [r2, #0]
		signedCounterEnc = (int32_t)counterEnc;
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x30>)
		position = signedCounterEnc/4.0;
 800096c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		signedCounterEnc = (int32_t)counterEnc;
 8000970:	6013      	str	r3, [r2, #0]
		position = signedCounterEnc/4.0;
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000974:	ed83 7a00 	vstr	s14, [r3]
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	4000e000 	.word	0x4000e000
 8000980:	24000184 	.word	0x24000184
 8000984:	240001a8 	.word	0x240001a8
 8000988:	2400019c 	.word	0x2400019c

0800098c <adjustMIAndFreq>:
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 800098c:	ee07 0a90 	vmov	s15, r0
	modulationIndex = foo_MI;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <adjustMIAndFreq+0x34>)
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 8000992:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009c4 <adjustMIAndFreq+0x38>
	counter = 0; // if piUsed == 0 ise counter i sifirla gibi olabilir.
 8000996:	2200      	movs	r2, #0
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 8000998:	eef8 7a67 	vcvt.f32.u32	s15, s15
	modulationIndex = foo_MI;
 800099c:	ed83 0a00 	vstr	s0, [r3]
	frq = foo_freq;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <adjustMIAndFreq+0x3c>)
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 80009a2:	ee67 7a87 	vmul.f32	s15, s15, s14
	frq = foo_freq;
 80009a6:	6018      	str	r0, [r3, #0]
	angularFrq = foo_freq * TWO_PI; // buranin initial deger olarak kalmasi lazim
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <adjustMIAndFreq+0x40>)
 80009aa:	edc3 7a00 	vstr	s15, [r3]
	upperLimit = (5000/foo_freq);
 80009ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80009b2:	fbb3 f0f0 	udiv	r0, r3, r0
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <adjustMIAndFreq+0x44>)
 80009b8:	6018      	str	r0, [r3, #0]
	counter = 0; // if piUsed == 0 ise counter i sifirla gibi olabilir.
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <adjustMIAndFreq+0x48>)
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	4770      	bx	lr
 80009c0:	2400002c 	.word	0x2400002c
 80009c4:	40c90fdb 	.word	0x40c90fdb
 80009c8:	24000024 	.word	0x24000024
 80009cc:	24000020 	.word	0x24000020
 80009d0:	24000038 	.word	0x24000038
 80009d4:	24000180 	.word	0x24000180

080009d8 <adjustMIAndFreqforPI>:
	modulationIndex = foo_MI;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <adjustMIAndFreqforPI+0x2c>)
	frq = foo_freq;
 80009da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	upperLimit = (5000/foo_freq);
 80009de:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000a08 <adjustMIAndFreqforPI+0x30>
	counter = 0;
 80009e2:	2200      	movs	r2, #0
	modulationIndex = foo_MI;
 80009e4:	edc3 0a00 	vstr	s1, [r3]
	frq = foo_freq;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <adjustMIAndFreqforPI+0x34>)
 80009ea:	edc3 7a00 	vstr	s15, [r3]
	upperLimit = (5000/foo_freq);
 80009ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <adjustMIAndFreqforPI+0x38>)
 80009f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f8:	edc3 7a00 	vstr	s15, [r3]
	counter = 0;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <adjustMIAndFreqforPI+0x3c>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2400002c 	.word	0x2400002c
 8000a08:	459c4000 	.word	0x459c4000
 8000a0c:	24000024 	.word	0x24000024
 8000a10:	24000038 	.word	0x24000038
 8000a14:	24000180 	.word	0x24000180

08000a18 <motorStart>:
{
 8000a18:	b508      	push	{r3, lr}
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a1a:	210c      	movs	r1, #12
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <motorStart+0x2c>)
 8000a1e:	f009 fb75 	bl	800a10c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a22:	210c      	movs	r1, #12
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <motorStart+0x30>)
 8000a26:	f009 fb71 	bl	800a10c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <motorStart+0x34>)
 8000a2e:	f009 fb6d 	bl	800a10c <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim14);
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <motorStart+0x38>)
 8000a34:	f008 ff72 	bl	800991c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a38:	213c      	movs	r1, #60	; 0x3c
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <motorStart+0x3c>)
}
 8000a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start_IT(&htim23, TIM_CHANNEL_ALL);
 8000a40:	f008 bfb2 	b.w	80099a8 <HAL_TIM_Encoder_Start_IT>
 8000a44:	240070b4 	.word	0x240070b4
 8000a48:	24006eec 	.word	0x24006eec
 8000a4c:	24006fbc 	.word	0x24006fbc
 8000a50:	240071b4 	.word	0x240071b4
 8000a54:	24007168 	.word	0x24007168

08000a58 <main>:
{
 8000a58:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000a5c:	b0a3      	sub	sp, #140	; 0x8c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a5e:	2210      	movs	r2, #16
 8000a60:	2100      	movs	r1, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a62:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a64:	a815      	add	r0, sp, #84	; 0x54
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a66:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a68:	f01b fcc4 	bl	801c3f4 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000a6c:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 8000a6e:	f005 fd27 	bl	80064c0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a72:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 8000a76:	4bd8      	ldr	r3, [pc, #864]	; (8000dd8 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a78:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a7e:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a80:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a84:	4bd5      	ldr	r3, [pc, #852]	; (8000ddc <main+0x384>)
 8000a86:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a88:	f005 fd3c 	bl	8006504 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a8c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a90:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a92:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000a96:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a98:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a9c:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000aa0:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa4:	f005 fd2e 	bl	8006504 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000aa8:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aaa:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000aac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ab0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000ab4:	2316      	movs	r3, #22
 8000ab6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000aba:	f240 1301 	movw	r3, #257	; 0x101
 8000abe:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac2:	f005 fd1f 	bl	8006504 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ac6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aca:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000acc:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ad0:	9316      	str	r3, [sp, #88]	; 0x58
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ad2:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ad6:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000ad8:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000adc:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae0:	f005 fd10 	bl	8006504 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000ae4:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae6:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ae8:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000aec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000af0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000af4:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af8:	f005 fd04 	bl	8006504 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000afc:	4620      	mov	r0, r4
 8000afe:	f005 fcef 	bl	80064e0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b02:	4bb7      	ldr	r3, [pc, #732]	; (8000de0 <main+0x388>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000b0a:	d111      	bne.n	8000b30 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b10:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b1c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b26:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b2c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b30:	4aab      	ldr	r2, [pc, #684]	; (8000de0 <main+0x388>)
 8000b32:	6953      	ldr	r3, [r2, #20]
 8000b34:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000b38:	d123      	bne.n	8000b82 <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b46:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b4a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b4e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000b52:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b54:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b58:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b5a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b5e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b60:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000b64:	d2f9      	bcs.n	8000b5a <main+0x102>
    } while(sets-- != 0U);
 8000b66:	3b20      	subs	r3, #32
 8000b68:	f113 0f20 	cmn.w	r3, #32
 8000b6c:	d1f2      	bne.n	8000b54 <main+0xfc>
 8000b6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b72:	6953      	ldr	r3, [r2, #20]
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b7e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000b82:	f005 fbf9 	bl	8006378 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2400      	movs	r4, #0
  SystemClock_Config();
 8000b88:	f7ff fde0 	bl	800074c <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000b8e:	f7ff fe2f 	bl	80007f0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	2214      	movs	r2, #20
 8000b94:	2100      	movs	r1, #0
 8000b96:	a815      	add	r0, sp, #84	; 0x54
 8000b98:	f01b fc2c 	bl	801c3f4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <main+0x38c>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	4891      	ldr	r0, [pc, #580]	; (8000de8 <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000ba8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000bac:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	f042 0202 	orr.w	r2, r2, #2
  hltdc.Instance = LTDC;
 8000bb8:	4d8c      	ldr	r5, [pc, #560]	; (8000dec <main+0x394>)
  pLayerCfg.FBStartAdress = 0x70000000;
 8000bba:	f04f 0805 	mov.w	r8, #5
  hospi1.Init.FifoThreshold = 4;
 8000bbe:	f04f 0b04 	mov.w	fp, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bca:	f002 0202 	and.w	r2, r2, #2
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000be2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000be6:	9201      	str	r2, [sp, #4]
 8000be8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bee:	f042 0208 	orr.w	r2, r2, #8
 8000bf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bfa:	f002 0208 	and.w	r2, r2, #8
 8000bfe:	9202      	str	r2, [sp, #8]
 8000c00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c06:	f042 0210 	orr.w	r2, r2, #16
 8000c0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c12:	f002 0210 	and.w	r2, r2, #16
 8000c16:	9203      	str	r2, [sp, #12]
 8000c18:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c2a:	f002 0201 	and.w	r2, r2, #1
 8000c2e:	9204      	str	r2, [sp, #16]
 8000c30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c46:	9205      	str	r2, [sp, #20]
 8000c48:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c4e:	f042 0204 	orr.w	r2, r2, #4
 8000c52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c5a:	f002 0204 	and.w	r2, r2, #4
 8000c5e:	9206      	str	r2, [sp, #24]
 8000c60:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0320 	and.w	r3, r3, #32
 8000c78:	9307      	str	r3, [sp, #28]
 8000c7a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c7c:	f005 ff1a 	bl	8006ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c86:	485a      	ldr	r0, [pc, #360]	; (8000df0 <main+0x398>)
 8000c88:	f005 ff14 	bl	8006ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	210c      	movs	r1, #12
 8000c90:	4858      	ldr	r0, [pc, #352]	; (8000df4 <main+0x39c>)
 8000c92:	f005 ff0f 	bl	8006ab4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	a915      	add	r1, sp, #84	; 0x54
 8000c9c:	4852      	ldr	r0, [pc, #328]	; (8000de8 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f005 fd79 	bl	800679c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000caa:	a915      	add	r1, sp, #84	; 0x54
 8000cac:	4850      	ldr	r0, [pc, #320]	; (8000df0 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f005 fd71 	bl	800679c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	a915      	add	r1, sp, #84	; 0x54
 8000cbc:	484d      	ldr	r0, [pc, #308]	; (8000df4 <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbe:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	e9cd a615 	strd	sl, r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f005 fd68 	bl	800679c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000ccc:	484a      	ldr	r0, [pc, #296]	; (8000df8 <main+0x3a0>)
 8000cce:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cd0:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000cd2:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cd4:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cd6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cda:	f005 fc3b 	bl	8006554 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cde:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000ce2:	4847      	ldr	r0, [pc, #284]	; (8000e00 <main+0x3a8>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ce4:	4a47      	ldr	r2, [pc, #284]	; (8000e04 <main+0x3ac>)
  hdma2d.Init.OutputOffset = 0;
 8000ce6:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cea:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cee:	f005 fc8c 	bl	800660a <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cf2:	2234      	movs	r2, #52	; 0x34
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	a815      	add	r0, sp, #84	; 0x54
 8000cf8:	f01b fb7c 	bl	801c3f4 <memset>
  hltdc.Instance = LTDC;
 8000cfc:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000cfe:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000d00:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000d02:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000d06:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000d0a:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d0c:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000d0e:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d12:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000d16:	2309      	movs	r3, #9
 8000d18:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000d22:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d26:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000d28:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000d2c:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d30:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000d34:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d38:	f006 fb10 	bl	800735c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000d3c:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8000d3e:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8000d42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d46:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d48:	971c      	str	r7, [sp, #112]	; 0x70
  pLayerCfg.WindowX0 = 0;
 8000d4a:	9415      	str	r4, [sp, #84]	; 0x54
  hospi1.Init.ChipSelectHighTime = 2;
 8000d4c:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 8000d4e:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Red = 0;
 8000d52:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  hospi1.Instance = OCTOSPI1;
 8000d56:	4d2d      	ldr	r5, [pc, #180]	; (8000e0c <main+0x3b4>)
  pLayerCfg.Alpha0 = 0;
 8000d58:	e9cd 141a 	strd	r1, r4, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d5c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000d60:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0x70000000;
 8000d64:	e9cd 811d 	strd	r8, r1, [sp, #116]	; 0x74
  pLayerCfg.WindowY0 = 0;
 8000d68:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d6c:	a915      	add	r1, sp, #84	; 0x54
 8000d6e:	4622      	mov	r2, r4
  hospi1.Init.DeviceSize = 32;
 8000d70:	f04f 0820 	mov.w	r8, #32
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d74:	e9cd 3618 	strd	r3, r6, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d78:	f006 fbbb 	bl	80074f2 <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d7c:	2318      	movs	r3, #24
 8000d7e:	4621      	mov	r1, r4
 8000d80:	a815      	add	r0, sp, #84	; 0x54
 8000d82:	461a      	mov	r2, r3
 8000d84:	f01b fb36 	bl	801c3f4 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <main+0x3b8>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000d8a:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d8c:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000d8e:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000d90:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 8000d92:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi1.Init.DeviceSize = 32;
 8000d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d9a:	e9c5 2803 	strd	r2, r8, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d9e:	2208      	movs	r2, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000da0:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000da4:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.MaxTran = 0;
 8000da8:	e9c5 240e 	strd	r2, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000dac:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.ChipSelectBoundary = 0;
 8000db0:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000db4:	f006 fd20 	bl	80077f8 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000db8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dbc:	a915      	add	r1, sp, #84	; 0x54
 8000dbe:	4628      	mov	r0, r5
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dc0:	9218      	str	r2, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
  sOspiManagerCfg.NCSPort = 1;
 8000dc6:	9617      	str	r6, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dc8:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dca:	f241 3288 	movw	r2, #5000	; 0x1388
  sOspiManagerCfg.DQSPort = 1;
 8000dce:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dd2:	f006 ff9b 	bl	8007d0c <HAL_OSPIM_Config>
 8000dd6:	e01d      	b.n	8000e14 <main+0x3bc>
 8000dd8:	03000012 	.word	0x03000012
 8000ddc:	01010001 	.word	0x01010001
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58021800 	.word	0x58021800
 8000dec:	24007008 	.word	0x24007008
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	58020800 	.word	0x58020800
 8000df8:	24006f98 	.word	0x24006f98
 8000dfc:	58024c00 	.word	0x58024c00
 8000e00:	24007100 	.word	0x24007100
 8000e04:	52001000 	.word	0x52001000
 8000e08:	50001000 	.word	0x50001000
 8000e0c:	24006f38 	.word	0x24006f38
 8000e10:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000e14:	4628      	mov	r0, r5
 8000e16:	f006 fd65 	bl	80078e4 <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e1a:	f240 1201 	movw	r2, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 8000e1e:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000e20:	4da3      	ldr	r5, [pc, #652]	; (80010b0 <main+0x658>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000e22:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000e26:	f004 ff05 	bl	8005c34 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000e2a:	a90e      	add	r1, sp, #56	; 0x38
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f004 fff1 	bl	8005e14 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e32:	4620      	mov	r0, r4
 8000e34:	f004 fec6 	bl	8005bc4 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000e38:	2318      	movs	r3, #24
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	a815      	add	r0, sp, #84	; 0x54
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f01b fad8 	bl	801c3f4 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000e44:	2210      	movs	r2, #16
 8000e46:	4621      	mov	r1, r4
 8000e48:	a80a      	add	r0, sp, #40	; 0x28
 8000e4a:	f01b fad3 	bl	801c3f4 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000e4e:	4621      	mov	r1, r4
 8000e50:	2214      	movs	r2, #20
 8000e52:	a80e      	add	r0, sp, #56	; 0x38
 8000e54:	f01b face 	bl	801c3f4 <memset>
  hospi2.Instance = OCTOSPI2;
 8000e58:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <main+0x65c>)
  hospi2.Init.DeviceSize = 24;
 8000e5a:	2318      	movs	r3, #24
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e5c:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e5e:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 8000e60:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 8000e62:	e9c5 2b00 	strd	r2, fp, [r5]
  hospi2.Init.DeviceSize = 24;
 8000e66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e6a:	e9c5 b405 	strd	fp, r4, [r5, #20]
  hospi2.Init.DeviceSize = 24;
 8000e6e:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000e72:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
 8000e76:	2317      	movs	r3, #23
 8000e78:	e9c5 b30b 	strd	fp, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000e7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e80:	f04f 0b80 	mov.w	fp, #128	; 0x80
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e84:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.Refresh = 400;
 8000e88:	642b      	str	r3, [r5, #64]	; 0x40
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e8a:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000e8e:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000e92:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e96:	f006 fcaf 	bl	80077f8 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000e9a:	4b87      	ldr	r3, [pc, #540]	; (80010b8 <main+0x660>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea0:	a915      	add	r1, sp, #84	; 0x54
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000ea2:	9318      	str	r3, [sp, #96]	; 0x60
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000ea4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ea8:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000eaa:	9717      	str	r7, [sp, #92]	; 0x5c
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000eac:	9319      	str	r3, [sp, #100]	; 0x64
  sOspiManagerCfg.DQSPort = 2;
 8000eae:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb2:	f006 ff2b 	bl	8007d0c <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000eb6:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	a90a      	add	r1, sp, #40	; 0x28
 8000ebe:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000ec0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000ec4:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec6:	2760      	movs	r7, #96	; 0x60
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000ec8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ecc:	f006 fd6c 	bl	80079a8 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000ed0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed8:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000eda:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000edc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ee0:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000ee2:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ee4:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000ee6:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000ee8:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eea:	f006 fd83 	bl	80079f4 <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000eee:	eb0d 0108 	add.w	r1, sp, r8
 8000ef2:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000ef4:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000ef6:	f006 fe95 	bl	8007c24 <HAL_OSPI_MemoryMapped>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	221c      	movs	r2, #28
 8000efc:	4621      	mov	r1, r4
 8000efe:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	940c      	str	r4, [sp, #48]	; 0x30
  htim1.Instance = TIM1;
 8000f02:	4d6e      	ldr	r5, [pc, #440]	; (80010bc <main+0x664>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f08:	f01b fa74 	bl	801c3f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f0c:	2234      	movs	r2, #52	; 0x34
 8000f0e:	4621      	mov	r1, r4
 8000f10:	a815      	add	r0, sp, #84	; 0x54
 8000f12:	f01b fa6f 	bl	801c3f4 <memset>
  htim1.Instance = TIM1;
 8000f16:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <main+0x668>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f18:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f1a:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000f1e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f20:	f8c5 b018 	str.w	fp, [r5, #24]
  htim1.Init.Prescaler = 0;
 8000f24:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 28800-1;
 8000f28:	f247 037f 	movw	r3, #28799	; 0x707f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f30:	f008 fefa 	bl	8009d28 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f34:	a90a      	add	r1, sp, #40	; 0x28
 8000f36:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	940c      	str	r4, [sp, #48]	; 0x30
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3e:	f009 f8e7 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f42:	4652      	mov	r2, sl
 8000f44:	a90e      	add	r1, sp, #56	; 0x38
 8000f46:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4a:	9414      	str	r4, [sp, #80]	; 0x50
  sConfigOC.Pulse = 1;
 8000f4c:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f50:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f54:	f008 ffb4 	bl	8009ec0 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f5c:	a915      	add	r1, sp, #84	; 0x54
 8000f5e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f60:	9419      	str	r4, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f62:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f64:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f66:	e9cd 241a 	strd	r2, r4, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6e:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f72:	e9cd 241e 	strd	r2, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f76:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7a:	f009 f91b 	bl	800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 fdbc 	bl	8001afc <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000f84:	4d4f      	ldr	r5, [pc, #316]	; (80010c4 <main+0x66c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	4621      	mov	r1, r4
 8000f88:	221c      	movs	r2, #28
 8000f8a:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	9410      	str	r4, [sp, #64]	; 0x40
 8000f8e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f01b fa2f 	bl	801c3f4 <memset>
  htim4.Init.Period = 28800-1;
 8000f96:	f247 037f 	movw	r3, #28799	; 0x707f
  htim4.Instance = TIM4;
 8000f9a:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <main+0x670>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f9c:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f9e:	f8c5 8008 	str.w	r8, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa2:	f8c5 b018 	str.w	fp, [r5, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim4.Init.Prescaler = 0;
 8000faa:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fae:	f008 febb 	bl	8009d28 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb2:	a90e      	add	r1, sp, #56	; 0x38
 8000fb4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fba:	f009 f8a9 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	a915      	add	r1, sp, #84	; 0x54
 8000fc2:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 8000fc8:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fcc:	f008 ff78 	bl	8009ec0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 fd93 	bl	8001afc <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000fd6:	4d3d      	ldr	r5, [pc, #244]	; (80010cc <main+0x674>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	4621      	mov	r1, r4
 8000fda:	221c      	movs	r2, #28
 8000fdc:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	9410      	str	r4, [sp, #64]	; 0x40
 8000fe0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe4:	f01b fa06 	bl	801c3f4 <memset>
  htim5.Init.Period = 28800-1;
 8000fe8:	f247 037f 	movw	r3, #28799	; 0x707f
  htim5.Instance = TIM5;
 8000fec:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <main+0x678>)
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fee:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ff0:	f8c5 8008 	str.w	r8, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff4:	f8c5 b018 	str.w	fp, [r5, #24]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim5.Init.Prescaler = 0;
 8000ffc:	e9c5 2400 	strd	r2, r4, [r5]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001000:	f008 fe92 	bl	8009d28 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001004:	a90e      	add	r1, sp, #56	; 0x38
 8001006:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800100c:	f009 f880 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	4622      	mov	r2, r4
 8001012:	a915      	add	r1, sp, #84	; 0x54
 8001014:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 800101a:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	f008 ff4f 	bl	8009ec0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 8001022:	4628      	mov	r0, r5
 8001024:	f000 fd6a 	bl	8001afc <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8001028:	482a      	ldr	r0, [pc, #168]	; (80010d4 <main+0x67c>)
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <main+0x680>)
  htim23.Instance = TIM23;
 800102c:	4d2b      	ldr	r5, [pc, #172]	; (80010dc <main+0x684>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	6084      	str	r4, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	6184      	str	r4, [r0, #24]
  htim14.Init.Prescaler = 0;
 8001032:	e9c0 3400 	strd	r3, r4, [r0]
  htim14.Init.Period = 57600-1;
 8001036:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800103e:	f008 fe43 	bl	8009cc8 <HAL_TIM_Base_Init>
  htim23.Instance = TIM23;
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <main+0x688>)
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	a915      	add	r1, sp, #84	; 0x54
 8001046:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	9410      	str	r4, [sp, #64]	; 0x40
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	60ac      	str	r4, [r5, #8]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	61ac      	str	r4, [r5, #24]
  sConfig.IC2Filter = 0;
 800104e:	941d      	str	r4, [sp, #116]	; 0x74
  htim23.Init.Prescaler = 0;
 8001050:	e9c5 3400 	strd	r3, r4, [r5]
  htim23.Init.Period = 4294967295;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001060:	e9cd 9415 	strd	r9, r4, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001064:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001068:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800106c:	e9cd 641b 	strd	r6, r4, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001070:	f008 fe8a 	bl	8009d88 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001074:	a90e      	add	r1, sp, #56	; 0x38
 8001076:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800107c:	f009 f848 	bl	800a110 <HAL_TIMEx_MasterConfigSynchronization>
  MX_TouchGFX_Init();
 8001080:	f000 fe99 	bl	8001db6 <MX_TouchGFX_Init>
  motorStart();
 8001084:	f7ff fcc8 	bl	8000a18 <motorStart>
  osKernelInitialize();
 8001088:	f009 f8fe 	bl	800a288 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <main+0x68c>)
 800108e:	4621      	mov	r1, r4
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <main+0x690>)
 8001092:	f009 f925 	bl	800a2e0 <osThreadNew>
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <main+0x694>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <main+0x698>)
 800109a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800109c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <main+0x69c>)
 80010a0:	f009 f91e 	bl	800a2e0 <osThreadNew>
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <main+0x6a0>)
 80010a6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80010a8:	f009 f900 	bl	800a2ac <osKernelStart>
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x654>
 80010ae:	bf00      	nop
 80010b0:	24007200 	.word	0x24007200
 80010b4:	5200a000 	.word	0x5200a000
 80010b8:	00010002 	.word	0x00010002
 80010bc:	240070b4 	.word	0x240070b4
 80010c0:	40010000 	.word	0x40010000
 80010c4:	24006eec 	.word	0x24006eec
 80010c8:	40000800 	.word	0x40000800
 80010cc:	24006fbc 	.word	0x24006fbc
 80010d0:	40000c00 	.word	0x40000c00
 80010d4:	240071b4 	.word	0x240071b4
 80010d8:	40002000 	.word	0x40002000
 80010dc:	24007168 	.word	0x24007168
 80010e0:	4000e000 	.word	0x4000e000
 80010e4:	0801d468 	.word	0x0801d468
 80010e8:	08000735 	.word	0x08000735
 80010ec:	24006ee8 	.word	0x24006ee8
 80010f0:	0801d444 	.word	0x0801d444
 80010f4:	08001dbb 	.word	0x08001dbb
 80010f8:	240070b0 	.word	0x240070b0
 80010fc:	00000000 	.word	0x00000000

08001100 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 5 kHz in every 0.0002 s
{
  /* USER CODE BEGIN Callback 0 */


	if (htim->Instance == TIM14)
 8001100:	6802      	ldr	r2, [r0, #0]
 8001102:	4b91      	ldr	r3, [pc, #580]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001104:	429a      	cmp	r2, r3
{
 8001106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110a:	4605      	mov	r5, r0
 800110c:	ed2d 8b04 	vpush	{d8-d9}
 8001110:	b085      	sub	sp, #20
	if (htim->Instance == TIM14)
 8001112:	f040 80ee 	bne.w	80012f2 <HAL_TIM_PeriodElapsedCallback+0x1f2>
	{
		float theta = (frq * TWO_PI * counter) * time;
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8001116:	4b8d      	ldr	r3, [pc, #564]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001118:	4a8d      	ldr	r2, [pc, #564]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800111a:	edd3 9a00 	vldr	s19, [r3]
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;

		if(modulationIndex != 0)
 800111e:	4698      	mov	r8, r3
 8001120:	f8d2 a000 	ldr.w	sl, [r2]
 8001124:	eef5 9a40 	vcmp.f32	s19, #0.0
 8001128:	4a8a      	ldr	r2, [pc, #552]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800112a:	4e8b      	ldr	r6, [pc, #556]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800112c:	f8d2 9000 	ldr.w	r9, [r2]
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	4a89      	ldr	r2, [pc, #548]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001136:	6817      	ldr	r7, [r2, #0]
 8001138:	f000 80e6 	beq.w	8001308 <HAL_TIM_PeriodElapsedCallback+0x208>
		float theta = (frq * TWO_PI * counter) * time;
 800113c:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x260>)
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 800113e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
		float theta = (frq * TWO_PI * counter) * time;
 8001142:	6834      	ldr	r4, [r6, #0]
 8001144:	ed93 8a00 	vldr	s16, [r3]
 8001148:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001364 <HAL_TIM_PeriodElapsedCallback+0x264>
 800114c:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8001150:	4b85      	ldr	r3, [pc, #532]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001152:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001156:	ee07 4a90 	vmov	s15, r4
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));

			counter++;
 800115a:	3401      	adds	r4, #1
		float theta = (frq * TWO_PI * counter) * time;
 800115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001160:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001164:	edd3 7a00 	vldr	s15, [r3]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001168:	4b80      	ldr	r3, [pc, #512]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x26c>)
		float theta = (frq * TWO_PI * counter) * time;
 800116a:	ee28 8a27 	vmul.f32	s16, s16, s15
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 800116e:	edd3 8a00 	vldr	s17, [r3]
 8001172:	eef8 8a68 	vcvt.f32.u32	s17, s17
		float dutyA = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 8001176:	eeb0 0a48 	vmov.f32	s0, s16
 800117a:	f01a ffed 	bl	801c158 <sinf>
 800117e:	eef0 7a49 	vmov.f32	s15, s18
 8001182:	ee20 0a29 	vmul.f32	s0, s0, s19
 8001186:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 800118a:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8001370 <HAL_TIM_PeriodElapsedCallback+0x270>
 800118e:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, dutyA * (normalize));
 8001192:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119a:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
		float dutyB = ((sinf(theta + (TWO_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 800119e:	f01a ffdb 	bl	801c158 <sinf>
 80011a2:	eef0 7a49 	vmov.f32	s15, s18
 80011a6:	ee29 0a80 	vmul.f32	s0, s19, s0
 80011aa:	eee0 7a09 	vfma.f32	s15, s0, s18
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011ae:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001374 <HAL_TIM_PeriodElapsedCallback+0x274>
 80011b2:	ee38 0a00 	vadd.f32	s0, s16, s0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyB * (normalize));
 80011b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	edc9 7a10 	vstr	s15, [r9, #64]	; 0x40
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011c2:	f01a ffc9 	bl	801c158 <sinf>
 80011c6:	ee29 0a80 	vmul.f32	s0, s19, s0

			counter = 0;

		}

		if(counter > upperLimit)
 80011ca:	4a6b      	ldr	r2, [pc, #428]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x278>)
			counter++;
 80011cc:	6034      	str	r4, [r6, #0]
		float dutyC = ((sinf(theta + (FOUR_PI_DIV_BY_THREE)) * modulationIndex) * 0.5f) + 0.5f;
 80011ce:	eea0 9a09 	vfma.f32	s18, s0, s18
		if(counter > upperLimit)
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	4294      	cmp	r4, r2
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, dutyC * (normalize));
 80011d6:	ee28 9a89 	vmul.f32	s18, s17, s18
 80011da:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 80011de:	ed87 9a0d 	vstr	s18, [r7, #52]	; 0x34
		if(counter > upperLimit)
 80011e2:	f200 8099 	bhi.w	8001318 <HAL_TIM_PeriodElapsedCallback+0x218>
		{
			counter = 0;
		}


		indx++;
 80011e6:	4a65      	ldr	r2, [pc, #404]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	9203      	str	r2, [sp, #12]
 80011ec:	3301      	adds	r3, #1
		if(indx == 200)
 80011ee:	2bc8      	cmp	r3, #200	; 0xc8
		indx++;
 80011f0:	6013      	str	r3, [r2, #0]
		if(indx == 200)
 80011f2:	f040 8093 	bne.w	800131c <HAL_TIM_PeriodElapsedCallback+0x21c>
		{
			rpm_ref = angularFrq*60/TWO_PI;
 80011f6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80013b8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80011fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001380 <HAL_TIM_PeriodElapsedCallback+0x280>
 80011fe:	edd9 7a00 	vldr	s15, [r9]
 8001202:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001364 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001206:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800120a:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x284>)
			speed = (position - oldpos) * 10; // speed in clicks/sec
			frequencyEnc = speed / 1000.0f;
			angularFrqEnc = frequencyEnc * TWO_PI;
			rpm = (speed * 60)/1000;
*/
			speed = (position - oldpos) * 25; // speed in clicks/sec
 800120c:	4f5e      	ldr	r7, [pc, #376]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800120e:	4e5f      	ldr	r6, [pc, #380]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			rpm_ref = angularFrq*60/TWO_PI;
 8001210:	ee87 7a80 	vdiv.f32	s14, s15, s0
			float fl_rpm = (1.0063*((0.0707304 * speed) - 8.75)) + 6.985;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
			rpm = (int)fl_rpm;
 8001214:	4a5e      	ldr	r2, [pc, #376]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x290>)
			speed = (position - oldpos) * 25; // speed in clicks/sec
 8001216:	edd6 7a00 	vldr	s15, [r6]
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;

			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 800121a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80013bc <HAL_TIM_PeriodElapsedCallback+0x2bc>
 800121e:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80013c0 <HAL_TIM_PeriodElapsedCallback+0x2c0>
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 8001222:	4c5c      	ldr	r4, [pc, #368]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x294>)
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001224:	495c      	ldr	r1, [pc, #368]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001226:	485d      	ldr	r0, [pc, #372]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x29c>)
			float fl_rpm = (1.0063*((0.0707304 * speed) - 8.75)) + 6.985;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
 8001228:	ed9f 4b3f 	vldr	d4, [pc, #252]	; 8001328 <HAL_TIM_PeriodElapsedCallback+0x228>
 800122c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001330 <HAL_TIM_PeriodElapsedCallback+0x230>
			rpm_ref = angularFrq*60/TWO_PI;
 8001230:	ed83 7a00 	vstr	s14, [r3]
			speed = (position - oldpos) * 25; // speed in clicks/sec
 8001234:	ed97 7a00 	vldr	s14, [r7]
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800123a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	ed83 7a00 	vstr	s14, [r3]
			float fl_rpm = (1.0063*((0.0707304 * speed) - 8.75)) + 6.985;//(0.994 * ((0.0707304 * speed) - 8.75)) - 6.1246;//(1.0059 * ((0.0707304 * speed) - 8.75)) + 6.2507;//(1.04 * ((1.1335*((speed * 60))/1000.0) + 15.8)) -25.182; //1.1335*((speed * 60)/1000.0) + 15.8;
 800124a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800124e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8001252:	ed9f 4b39 	vldr	d4, [pc, #228]	; 8001338 <HAL_TIM_PeriodElapsedCallback+0x238>
 8001256:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001340 <HAL_TIM_PeriodElapsedCallback+0x240>
 800125a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800125e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			rpm = (int)fl_rpm;
 8001262:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001266:	edc2 7a00 	vstr	s15, [r2]
 800126a:	ee17 3a90 	vmov	r3, s15
			angularFrqEnc = (fl_rpm / 60.0f) * TWO_PI;
 800126e:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8001272:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001276:	edc4 7a00 	vstr	s15, [r4]
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	f8db 3000 	ldr.w	r3, [fp]
 8001280:	f8da 2000 	ldr.w	r2, [sl]
 8001284:	f7ff fad3 	bl	800082e <movingAvg>
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
		    pos++;
		    if (pos >= len){
 800128a:	f8db 2000 	ldr.w	r2, [fp]
 800128e:	eef0 5a40 	vmov.f32	s11, s0
			newAvgRpm = movingAvg(arrNumbers, &sum, pos, len, rpm);
 8001292:	6018      	str	r0, [r3, #0]
		    pos++;
 8001294:	f8da 3000 	ldr.w	r3, [sl]
 8001298:	3301      	adds	r3, #1
		    if (pos >= len){
 800129a:	4293      	cmp	r3, r2
		    pos++;
 800129c:	f8ca 3000 	str.w	r3, [sl]
		      pos = 0;
 80012a0:	bfa4      	itt	ge
 80012a2:	2300      	movge	r3, #0
 80012a4:	f8ca 3000 	strge.w	r3, [sl]
		    }

			if(piUsed == 1)
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11b      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			{
				PI_angularFrq = angularFrqEnc + pi_control(&angularFreqPI, angularFrq - angularFrqEnc);
 80012b0:	edd4 7a00 	vldr	s15, [r4]
 80012b4:	ed99 0a00 	vldr	s0, [r9]
 80012b8:	483c      	ldr	r0, [pc, #240]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80012be:	f7ff fb19 	bl	80008f4 <pi_control>
 80012c2:	edd4 7a00 	vldr	s15, [r4]
 80012c6:	493a      	ldr	r1, [pc, #232]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80012c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80012cc:	ed81 0a00 	vstr	s0, [r1]
				limitAngFrq();
 80012d0:	f7ff fae0 	bl	8000894 <limitAngFrq>
				setModulationIndex();
 80012d4:	f7ff fab8 	bl	8000848 <setModulationIndex>
				adjustMIAndFreqforPI(DIVIDE_BY_TWO_PI(PI_angularFrq), modulationIndex);
 80012d8:	ed91 0a00 	vldr	s0, [r1]
 80012dc:	edd8 0a00 	vldr	s1, [r8]
 80012e0:	ee80 0a25 	vdiv.f32	s0, s0, s11
 80012e4:	f7ff fb78 	bl	80009d8 <adjustMIAndFreqforPI>
			}
			oldpos = position;
 80012e8:	683b      	ldr	r3, [r7, #0]
			indx = 0;
 80012ea:	9a03      	ldr	r2, [sp, #12]
			oldpos = position;
 80012ec:	6033      	str	r3, [r6, #0]
			indx = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	6013      	str	r3, [r2, #0]
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012f2:	682a      	ldr	r2, [r5, #0]
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d110      	bne.n	800131c <HAL_TIM_PeriodElapsedCallback+0x21c>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012fa:	b005      	add	sp, #20
 80012fc:	ecbd 8b04 	vpop	{d8-d9}
 8001300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_IncTick();
 8001304:	f005 b866 	b.w	80063d4 <HAL_IncTick>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001308:	2300      	movs	r3, #0
 800130a:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800130e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
			counter = 0;
 8001314:	6033      	str	r3, [r6, #0]
 8001316:	e766      	b.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8001318:	2300      	movs	r3, #0
 800131a:	e7fb      	b.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x214>
}
 800131c:	b005      	add	sp, #20
 800131e:	ecbd 8b04 	vpop	{d8-d9}
 8001322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001326:	bf00      	nop
 8001328:	32d53f62 	.word	0x32d53f62
 800132c:	3fb21b63 	.word	0x3fb21b63
 8001330:	00000000 	.word	0x00000000
 8001334:	c0218000 	.word	0xc0218000
 8001338:	075f6fd2 	.word	0x075f6fd2
 800133c:	3ff019ce 	.word	0x3ff019ce
 8001340:	d70a3d71 	.word	0xd70a3d71
 8001344:	401bf0a3 	.word	0x401bf0a3
 8001348:	40002000 	.word	0x40002000
 800134c:	2400002c 	.word	0x2400002c
 8001350:	240070b4 	.word	0x240070b4
 8001354:	24006eec 	.word	0x24006eec
 8001358:	24000180 	.word	0x24000180
 800135c:	24006fbc 	.word	0x24006fbc
 8001360:	24000024 	.word	0x24000024
 8001364:	40c90fdb 	.word	0x40c90fdb
 8001368:	24000034 	.word	0x24000034
 800136c:	24000030 	.word	0x24000030
 8001370:	40060a92 	.word	0x40060a92
 8001374:	40860a92 	.word	0x40860a92
 8001378:	24000038 	.word	0x24000038
 800137c:	24000188 	.word	0x24000188
 8001380:	42700000 	.word	0x42700000
 8001384:	240001a4 	.word	0x240001a4
 8001388:	2400019c 	.word	0x2400019c
 800138c:	24000190 	.word	0x24000190
 8001390:	240001a0 	.word	0x240001a0
 8001394:	24000168 	.word	0x24000168
 8001398:	240001b0 	.word	0x240001b0
 800139c:	2400016c 	.word	0x2400016c
 80013a0:	240001ac 	.word	0x240001ac
 80013a4:	2400018c 	.word	0x2400018c
 80013a8:	24000194 	.word	0x24000194
 80013ac:	2400000c 	.word	0x2400000c
 80013b0:	24000164 	.word	0x24000164
 80013b4:	40001000 	.word	0x40001000
 80013b8:	24000020 	.word	0x24000020
 80013bc:	24000198 	.word	0x24000198
 80013c0:	24000028 	.word	0x24000028

080013c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x2c>)
{
 80013ca:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80013d6:	f042 0202 	orr.w	r2, r2, #2
 80013da:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ee:	f005 b827 	b.w	8006440 <HAL_NVIC_SetPriority>
 80013f2:	bf00      	nop
 80013f4:	58024400 	.word	0x58024400

080013f8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013f8:	6802      	ldr	r2, [r0, #0]
{
 80013fa:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_CRC_MspInit+0x2c>)
 80013fe:	429a      	cmp	r2, r3
 8001400:	d10d      	bne.n	800141e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001402:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001406:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800140a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800140e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800141e:	b002      	add	sp, #8
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	58024c00 	.word	0x58024c00

08001428 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_DMA2D_MspInit+0x40>)
{
 800142a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800142c:	6802      	ldr	r2, [r0, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d117      	bne.n	8001462 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001434:	2105      	movs	r1, #5
 8001436:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001438:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800143c:	f042 0210 	orr.w	r2, r2, #16
 8001440:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001444:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001452:	f004 fff5 	bl	8006440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001456:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001458:	b003      	add	sp, #12
 800145a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800145e:	f005 b821 	b.w	80064a4 <HAL_NVIC_EnableIRQ>
}
 8001462:	b003      	add	sp, #12
 8001464:	f85d fb04 	ldr.w	pc, [sp], #4
 8001468:	52001000 	.word	0x52001000
 800146c:	58024400 	.word	0x58024400

08001470 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001474:	b0ba      	sub	sp, #232	; 0xe8
 8001476:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	2214      	movs	r2, #20
 800147a:	2100      	movs	r1, #0
 800147c:	a808      	add	r0, sp, #32
 800147e:	f01a ffb9 	bl	801c3f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001482:	22b4      	movs	r2, #180	; 0xb4
 8001484:	2100      	movs	r1, #0
 8001486:	a80d      	add	r0, sp, #52	; 0x34
 8001488:	f01a ffb4 	bl	801c3f4 <memset>
  if(hltdc->Instance==LTDC)
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	4b77      	ldr	r3, [pc, #476]	; (800166c <HAL_LTDC_MspInit+0x1fc>)
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 80e8 	bne.w	8001666 <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001496:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 800149a:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800149c:	201e      	movs	r0, #30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800149e:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 80014a0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80014a4:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80014a8:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80014aa:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80014ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b2:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80014b6:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b8:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80014ba:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014be:	f007 fc89 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	b108      	cbz	r0, 80014c8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80014c4:	f7ff ff7e 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d4:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	a908      	add	r1, sp, #32
 80014d8:	4866      	ldr	r0, [pc, #408]	; (8001674 <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014da:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80014de:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80014e6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80014ea:	f002 0208 	and.w	r2, r2, #8
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014f6:	f042 0202 	orr.w	r2, r2, #2
 80014fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001502:	f002 0202 	and.w	r2, r2, #2
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800150e:	f042 0208 	orr.w	r2, r2, #8
 8001512:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001516:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800151a:	f002 0208 	and.w	r2, r2, #8
 800151e:	9202      	str	r2, [sp, #8]
 8001520:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800152e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001532:	f002 0210 	and.w	r2, r2, #16
 8001536:	9203      	str	r2, [sp, #12]
 8001538:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001546:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800154a:	f002 0201 	and.w	r2, r2, #1
 800154e:	9204      	str	r2, [sp, #16]
 8001550:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800155e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001562:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001566:	9205      	str	r2, [sp, #20]
 8001568:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001576:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800157a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800157e:	9206      	str	r2, [sp, #24]
 8001580:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001586:	f042 0204 	orr.w	r2, r2, #4
 800158a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001592:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	9307      	str	r3, [sp, #28]
 800159a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f005 f8f8 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 80015ac:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	a908      	add	r1, sp, #32
 80015b0:	4831      	ldr	r0, [pc, #196]	; (8001678 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b2:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f005 f8ee 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 80015c0:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	a908      	add	r1, sp, #32
 80015c6:	482d      	ldr	r0, [pc, #180]	; (800167c <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c8:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d2:	f005 f8e3 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	a908      	add	r1, sp, #32
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80015e2:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80015e8:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f005 f8d7 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80015ee:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	a908      	add	r1, sp, #32
 80015f4:	4823      	ldr	r0, [pc, #140]	; (8001684 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f6:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001600:	f005 f8cc 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8001604:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001608:	a908      	add	r1, sp, #32
 800160a:	481f      	ldr	r0, [pc, #124]	; (8001688 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800160c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001616:	f005 f8c1 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800161a:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	a908      	add	r1, sp, #32
 800161e:	481b      	ldr	r0, [pc, #108]	; (800168c <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001620:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f005 f8b7 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	a908      	add	r1, sp, #32
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001632:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f005 f8ae 	bl	800679c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001640:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001642:	a908      	add	r1, sp, #32
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800164a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001650:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001652:	f005 f8a3 	bl	800679c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001656:	4640      	mov	r0, r8
 8001658:	4622      	mov	r2, r4
 800165a:	2105      	movs	r1, #5
 800165c:	f004 fef0 	bl	8006440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001660:	4640      	mov	r0, r8
 8001662:	f004 ff1f 	bl	80064a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001666:	b03a      	add	sp, #232	; 0xe8
 8001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166c:	50001000 	.word	0x50001000
 8001670:	58024400 	.word	0x58024400
 8001674:	58020400 	.word	0x58020400
 8001678:	58020c00 	.word	0x58020c00
 800167c:	58021000 	.word	0x58021000
 8001680:	58020000 	.word	0x58020000
 8001684:	58021800 	.word	0x58021800
 8001688:	58021c00 	.word	0x58021c00
 800168c:	58020800 	.word	0x58020800

08001690 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001694:	b091      	sub	sp, #68	; 0x44
 8001696:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	2214      	movs	r2, #20
 800169a:	2100      	movs	r1, #0
 800169c:	a80b      	add	r0, sp, #44	; 0x2c
 800169e:	f01a fea9 	bl	801c3f4 <memset>
  if(hospi->Instance==OCTOSPI1)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	4a89      	ldr	r2, [pc, #548]	; (80018cc <HAL_OSPI_MspInit+0x23c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f040 80b1 	bne.w	800180e <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80016ac:	4a88      	ldr	r2, [pc, #544]	; (80018d0 <HAL_OSPI_MspInit+0x240>)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80016b2:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80016b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80016b6:	d10c      	bne.n	80016d2 <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80016b8:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <HAL_OSPI_MspInit+0x244>)
 80016ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80016be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80016c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016d2:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2500      	movs	r5, #0
 80016d8:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80016de:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e0:	a90b      	add	r1, sp, #44	; 0x2c
 80016e2:	487d      	ldr	r0, [pc, #500]	; (80018d8 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016e8:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ec:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80016f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80016f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016fc:	9201      	str	r2, [sp, #4]
 80016fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001700:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001708:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800170c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001710:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001714:	9202      	str	r2, [sp, #8]
 8001716:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800171c:	f042 0208 	orr.w	r2, r2, #8
 8001720:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001724:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001728:	f002 0208 	and.w	r2, r2, #8
 800172c:	9203      	str	r2, [sp, #12]
 800172e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001730:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001734:	f042 0210 	orr.w	r2, r2, #16
 8001738:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800173c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001740:	f002 0210 	and.w	r2, r2, #16
 8001744:	9204      	str	r2, [sp, #16]
 8001746:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001748:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001754:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001758:	f002 0220 	and.w	r2, r2, #32
 800175c:	9205      	str	r2, [sp, #20]
 800175e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001764:	f042 0202 	orr.w	r2, r2, #2
 8001768:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	9306      	str	r3, [sp, #24]
 8001776:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177c:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001784:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001786:	f005 f809 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 800178a:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	a90b      	add	r1, sp, #44	; 0x2c
 800178e:	4853      	ldr	r0, [pc, #332]	; (80018dc <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001790:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f004 fffe 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a0:	a90b      	add	r1, sp, #44	; 0x2c
 80017a2:	484f      	ldr	r0, [pc, #316]	; (80018e0 <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017a4:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ae:	f004 fff5 	bl	800679c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	a90b      	add	r1, sp, #44	; 0x2c
 80017b6:	4848      	ldr	r0, [pc, #288]	; (80018d8 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80017b8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c4:	f004 ffea 	bl	800679c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 80017c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	a90b      	add	r1, sp, #44	; 0x2c
 80017ce:	4843      	ldr	r0, [pc, #268]	; (80018dc <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017d0:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f004 ffdf 	bl	800679c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e2:	a90b      	add	r1, sp, #44	; 0x2c
 80017e4:	483f      	ldr	r0, [pc, #252]	; (80018e4 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80017e6:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f0:	f004 ffd4 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	a90b      	add	r1, sp, #44	; 0x2c
 80017f6:	483c      	ldr	r0, [pc, #240]	; (80018e8 <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80017f8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001804:	f004 ffca 	bl	800679c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001808:	b011      	add	sp, #68	; 0x44
 800180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 800180e:	4a37      	ldr	r2, [pc, #220]	; (80018ec <HAL_OSPI_MspInit+0x25c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d1f9      	bne.n	8001808 <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001814:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <HAL_OSPI_MspInit+0x240>)
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800181a:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800181c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800181e:	d10c      	bne.n	800183a <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_OSPI_MspInit+0x244>)
 8001822:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001826:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800182a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800182e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001836:	9307      	str	r3, [sp, #28]
 8001838:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001842:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001846:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001848:	a90b      	add	r1, sp, #44	; 0x2c
 800184a:	4823      	ldr	r0, [pc, #140]	; (80018d8 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800184c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001850:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001854:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001858:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800185c:	9208      	str	r2, [sp, #32]
 800185e:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001860:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001868:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800186c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001870:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001874:	9209      	str	r2, [sp, #36]	; 0x24
 8001876:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001878:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001888:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	930a      	str	r3, [sp, #40]	; 0x28
 8001890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189e:	f004 ff7d 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80018a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a6:	a90b      	add	r1, sp, #44	; 0x2c
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80018aa:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b4:	f004 ff72 	bl	800679c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80018b8:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018bc:	a90b      	add	r1, sp, #44	; 0x2c
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80018c0:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ca:	e79b      	b.n	8001804 <HAL_OSPI_MspInit+0x174>
 80018cc:	52005000 	.word	0x52005000
 80018d0:	240001b4 	.word	0x240001b4
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58021800 	.word	0x58021800
 80018dc:	58020c00 	.word	0x58020c00
 80018e0:	58021000 	.word	0x58021000
 80018e4:	58021400 	.word	0x58021400
 80018e8:	58020400 	.word	0x58020400
 80018ec:	5200a000 	.word	0x5200a000

080018f0 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_OSPI_MspDeInit+0xa0>)
{
 80018f2:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12a      	bne.n	8001950 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_OSPI_MspDeInit+0xa4>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	3a01      	subs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_OSPI_MspDeInit+0xa8>)
 8001904:	b92a      	cbnz	r2, 8001912 <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001906:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800190a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800190e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001912:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001916:	f44f 7110 	mov.w	r1, #576	; 0x240
 800191a:	4820      	ldr	r0, [pc, #128]	; (800199c <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800191c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001920:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8001924:	f005 f820 	bl	8006968 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8001928:	f643 01b0 	movw	r1, #14512	; 0x38b0
 800192c:	481c      	ldr	r0, [pc, #112]	; (80019a0 <HAL_OSPI_MspDeInit+0xb0>)
 800192e:	f005 f81b 	bl	8006968 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001932:	2104      	movs	r1, #4
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <HAL_OSPI_MspDeInit+0xb4>)
 8001936:	f005 f817 	bl	8006968 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 800193a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800193e:	481a      	ldr	r0, [pc, #104]	; (80019a8 <HAL_OSPI_MspDeInit+0xb8>)
 8001940:	f005 f812 	bl	8006968 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001944:	2104      	movs	r1, #4
 8001946:	4819      	ldr	r0, [pc, #100]	; (80019ac <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8001948:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800194c:	f005 b80c 	b.w	8006968 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_OSPI_MspDeInit+0xc0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d11a      	bne.n	800198c <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_OSPI_MspDeInit+0xa4>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	3a01      	subs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_OSPI_MspDeInit+0xa8>)
 8001960:	b92a      	cbnz	r2, 800196e <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8001962:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001966:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800196a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 800196e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001972:	f641 4103 	movw	r1, #7171	; 0x1c03
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001978:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800197c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001980:	f004 fff2 	bl	8006968 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001984:	f241 011f 	movw	r1, #4127	; 0x101f
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <HAL_OSPI_MspDeInit+0xb8>)
 800198a:	e7dd      	b.n	8001948 <HAL_OSPI_MspDeInit+0x58>
}
 800198c:	bd08      	pop	{r3, pc}
 800198e:	bf00      	nop
 8001990:	52005000 	.word	0x52005000
 8001994:	240001b4 	.word	0x240001b4
 8001998:	58024400 	.word	0x58024400
 800199c:	58021800 	.word	0x58021800
 80019a0:	58020c00 	.word	0x58020c00
 80019a4:	58021000 	.word	0x58021000
 80019a8:	58021400 	.word	0x58021400
 80019ac:	58020400 	.word	0x58020400
 80019b0:	5200a000 	.word	0x5200a000

080019b4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80019b4:	6803      	ldr	r3, [r0, #0]
{
 80019b6:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_TIM_PWM_MspInit+0x6c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_TIM_PWM_MspInit+0x70>)
 80019c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80019cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019d8:	b004      	add	sp, #16
 80019da:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <HAL_TIM_PWM_MspInit+0x74>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10d      	bne.n	80019fe <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_TIM_PWM_MspInit+0x70>)
 80019e4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80019e8:	f042 0204 	orr.w	r2, r2, #4
 80019ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80019f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	e7ec      	b.n	80019d8 <HAL_TIM_PWM_MspInit+0x24>
  else if(htim_pwm->Instance==TIM5)
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_TIM_PWM_MspInit+0x78>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d1e9      	bne.n	80019d8 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_TIM_PWM_MspInit+0x70>)
 8001a06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a0a:	f042 0208 	orr.w	r2, r2, #8
 8001a0e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	9303      	str	r3, [sp, #12]
 8001a1c:	9b03      	ldr	r3, [sp, #12]
}
 8001a1e:	e7db      	b.n	80019d8 <HAL_TIM_PWM_MspInit+0x24>
 8001a20:	40010000 	.word	0x40010000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	40000c00 	.word	0x40000c00

08001a30 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_TIM_Base_MspInit+0x40>)
{
 8001a32:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM14)
 8001a34:	6802      	ldr	r2, [r0, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d117      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a40:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a48:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a4c:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a5a:	f004 fcf1 	bl	8006440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a5e:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a60:	b003      	add	sp, #12
 8001a62:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a66:	f004 bd1d 	b.w	80064a4 <HAL_NVIC_EnableIRQ>
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a70:	40002000 	.word	0x40002000
 8001a74:	58024400 	.word	0x58024400

08001a78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	2214      	movs	r2, #20
 8001a80:	2100      	movs	r1, #0
 8001a82:	a803      	add	r0, sp, #12
 8001a84:	f01a fcb6 	bl	801c3f4 <memset>
  if(htim_encoder->Instance==TIM23)
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d12d      	bne.n	8001aec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_TIM_Encoder_MspInit+0x7c>)
    PF6     ------> TIM23_CH1
    PF7     ------> TIM23_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a94:	a903      	add	r1, sp, #12
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001a98:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001a9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aa0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001aa4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001aa8:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8001aac:	9201      	str	r2, [sp, #4]
 8001aae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ab4:	f042 0220 	orr.w	r2, r2, #32
 8001ab8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001ad0:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001ad6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad8:	f004 fe60 	bl	800679c <HAL_GPIO_Init>

    /* TIM23 interrupt Init */
    HAL_NVIC_SetPriority(TIM23_IRQn, 5, 0);
 8001adc:	20a1      	movs	r0, #161	; 0xa1
 8001ade:	4622      	mov	r2, r4
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	f004 fcad 	bl	8006440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001ae6:	20a1      	movs	r0, #161	; 0xa1
 8001ae8:	f004 fcdc 	bl	80064a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001aec:	b008      	add	sp, #32
 8001aee:	bd10      	pop	{r4, pc}
 8001af0:	4000e000 	.word	0x4000e000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58021400 	.word	0x58021400

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b510      	push	{r4, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	2214      	movs	r2, #20
 8001b04:	2100      	movs	r1, #0
 8001b06:	a803      	add	r0, sp, #12
 8001b08:	f01a fc74 	bl	801c3f4 <memset>
  if(htim->Instance==TIM1)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_TIM_MspPostInit+0xc0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d11c      	bne.n	8001b4e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_TIM_MspPostInit+0xc4>)
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b1a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b20:	f042 0210 	orr.w	r2, r2, #16
 8001b24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3c:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f004 fe29 	bl	800679c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b4a:	b008      	add	sp, #32
 8001b4c:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_TIM_MspPostInit+0xcc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d118      	bne.n	8001b86 <HAL_TIM_MspPostInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b60:	f042 0208 	orr.w	r2, r2, #8
 8001b64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	a903      	add	r1, sp, #12
 8001b84:	e7df      	b.n	8001b46 <HAL_TIM_MspPostInit+0x4a>
  else if(htim->Instance==TIM5)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_TIM_MspPostInit+0xd4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d1de      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x4e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	a903      	add	r1, sp, #12
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bb4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	e9cd 2205 	strd	r2, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	e7c4      	b.n	8001b46 <HAL_TIM_MspPostInit+0x4a>
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58021000 	.word	0x58021000
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	58020c00 	.word	0x58020c00
 8001bd0:	40000c00 	.word	0x40000c00
 8001bd4:	58020000 	.word	0x58020000

08001bd8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	280f      	cmp	r0, #15
{
 8001bda:	b510      	push	{r4, lr}
 8001bdc:	4604      	mov	r4, r0
 8001bde:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be0:	d902      	bls.n	8001be8 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001be4:	b00a      	add	sp, #40	; 0x28
 8001be6:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001be8:	4601      	mov	r1, r0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2036      	movs	r0, #54	; 0x36
 8001bee:	f004 fc27 	bl	8006440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f004 fc56 	bl	80064a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bfa:	4669      	mov	r1, sp
 8001bfc:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001bfe:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_InitTick+0x88>)
 8001c02:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c06:	f042 0210 	orr.w	r2, r2, #16
 8001c0a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c1a:	f006 ffc1 	bl	8008ba0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c1e:	9b07      	ldr	r3, [sp, #28]
 8001c20:	b9c3      	cbnz	r3, 8001c54 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c22:	f006 ff99 	bl	8008b58 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001c26:	4c0f      	ldr	r4, [pc, #60]	; (8001c64 <HAL_InitTick+0x8c>)
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_InitTick+0x90>)
 8001c2a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c2c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001c30:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_InitTick+0x94>)
 8001c34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c38:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001c3a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c3c:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c3e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001c40:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c44:	f008 f840 	bl	8009cc8 <HAL_TIM_Base_Init>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d1ca      	bne.n	8001be2 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f007 fe65 	bl	800991c <HAL_TIM_Base_Start_IT>
 8001c52:	e7c7      	b.n	8001be4 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c54:	f006 ff80 	bl	8008b58 <HAL_RCC_GetPCLK1Freq>
 8001c58:	0040      	lsls	r0, r0, #1
 8001c5a:	e7e4      	b.n	8001c26 <HAL_InitTick+0x4e>
 8001c5c:	24000080 	.word	0x24000080
 8001c60:	58024400 	.word	0x58024400
 8001c64:	24007260 	.word	0x24007260
 8001c68:	40001000 	.word	0x40001000
 8001c6c:	000f4240 	.word	0x000f4240

08001c70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c70:	4770      	bx	lr

08001c72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler>

08001c74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler>

08001c76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler>

08001c78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler>

08001c7a <DebugMon_Handler>:
 8001c7a:	4770      	bx	lr

08001c7c <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8001c7e:	f007 bf05 	b.w	8009a8c <HAL_TIM_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	240071b4 	.word	0x240071b4

08001c88 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <TIM6_DAC_IRQHandler+0x8>)
 8001c8a:	f007 beff 	b.w	8009a8c <HAL_TIM_IRQHandler>
 8001c8e:	bf00      	nop
 8001c90:	24007260 	.word	0x24007260

08001c94 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001c94:	4801      	ldr	r0, [pc, #4]	; (8001c9c <LTDC_IRQHandler+0x8>)
 8001c96:	f005 bbcf 	b.w	8007438 <HAL_LTDC_IRQHandler>
 8001c9a:	bf00      	nop
 8001c9c:	24007008 	.word	0x24007008

08001ca0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ca0:	4801      	ldr	r0, [pc, #4]	; (8001ca8 <DMA2D_IRQHandler+0x8>)
 8001ca2:	f004 bcf1 	b.w	8006688 <HAL_DMA2D_IRQHandler>
 8001ca6:	bf00      	nop
 8001ca8:	24007100 	.word	0x24007100

08001cac <TIM23_IRQHandler>:
void TIM23_IRQHandler(void)
{
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001cac:	4801      	ldr	r0, [pc, #4]	; (8001cb4 <TIM23_IRQHandler+0x8>)
 8001cae:	f007 beed 	b.w	8009a8c <HAL_TIM_IRQHandler>
 8001cb2:	bf00      	nop
 8001cb4:	24007168 	.word	0x24007168

08001cb8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cb8:	2001      	movs	r0, #1
 8001cba:	4770      	bx	lr

08001cbc <_kill>:

int _kill(int pid, int sig)
{
 8001cbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cbe:	f01a fb3f 	bl	801c340 <__errno>
 8001cc2:	2316      	movs	r3, #22
 8001cc4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cca:	bd08      	pop	{r3, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cce:	f01a fb37 	bl	801c340 <__errno>
 8001cd2:	2316      	movs	r3, #22
 8001cd4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001cd6:	e7fe      	b.n	8001cd6 <_exit+0xa>

08001cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	460e      	mov	r6, r1
 8001cdc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2500      	movs	r5, #0
 8001ce0:	42a5      	cmp	r5, r4
 8001ce2:	db01      	blt.n	8001ce8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001ce8:	f3af 8000 	nop.w
 8001cec:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	3501      	adds	r5, #1
 8001cf0:	e7f6      	b.n	8001ce0 <_read+0x8>

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b570      	push	{r4, r5, r6, lr}
 8001cf4:	460e      	mov	r6, r1
 8001cf6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	42a5      	cmp	r5, r4
 8001cfc:	db01      	blt.n	8001d02 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001cfe:	4620      	mov	r0, r4
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001d02:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001d06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	e7f6      	b.n	8001cfa <_write+0x8>

08001d0c <_close>:

int _close(int file)
{
	return -1;
}
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001d16:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001d18:	604b      	str	r3, [r1, #4]
}
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	4770      	bx	lr

08001d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	4770      	bx	lr

08001d24 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <_sbrk+0x30>)
{
 8001d26:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001d28:	6819      	ldr	r1, [r3, #0]
{
 8001d2a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001d2c:	b909      	cbnz	r1, 8001d32 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <_sbrk+0x34>)
 8001d30:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <_sbrk+0x38>)
 8001d36:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <_sbrk+0x3c>)
 8001d38:	4402      	add	r2, r0
 8001d3a:	1b09      	subs	r1, r1, r4
 8001d3c:	428a      	cmp	r2, r1
 8001d3e:	d906      	bls.n	8001d4e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d40:	f01a fafe 	bl	801c340 <__errno>
 8001d44:	230c      	movs	r3, #12
 8001d46:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d4c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d4e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001d50:	e7fc      	b.n	8001d4c <_sbrk+0x28>
 8001d52:	bf00      	nop
 8001d54:	240001b8 	.word	0x240001b8
 8001d58:	24007350 	.word	0x24007350
 8001d5c:	24050000 	.word	0x24050000
 8001d60:	00001000 	.word	0x00001000

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d68:	f004 fab0 	bl	80062cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d6e:	e003      	b.n	8001d78 <LoopCopyDataInit>

08001d70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001d72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d76:	3104      	adds	r1, #4

08001d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001d7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d80:	d3f6      	bcc.n	8001d70 <CopyDataInit>
  ldr  r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001d84:	e002      	b.n	8001d8c <LoopFillZerobss>

08001d86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d88:	f842 3b04 	str.w	r3, [r2], #4

08001d8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d90:	d3f9      	bcc.n	8001d86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f01a faed 	bl	801c370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7fe fe5f 	bl	8000a58 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d9c:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001da0:	08022254 	.word	0x08022254
  ldr  r0, =_sdata
 8001da4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001da8:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
 8001dac:	24000148 	.word	0x24000148
  ldr  r3, = _ebss
 8001db0:	2400734c 	.word	0x2400734c

08001db4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC3_IRQHandler>

08001db6 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001db6:	f000 bc8f 	b.w	80026d8 <touchgfx_init>

08001dba <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001dba:	f000 bcfd 	b.w	80027b8 <touchgfx_taskEntry>

08001dbe <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001dbe:	6840      	ldr	r0, [r0, #4]
    }
 8001dc0:	4770      	bx	lr

08001dc2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001dc2:	6041      	str	r1, [r0, #4]
    }
 8001dc4:	4770      	bx	lr
	...

08001dc8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001dc8:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001dd2:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001dd8:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 8001ddc:	3a4c      	subs	r2, #76	; 0x4c
 8001dde:	430b      	orrs	r3, r1
 8001de0:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001de2:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	4770      	bx	lr
 8001df0:	e000edfc 	.word	0xe000edfc
 8001df4:	c5acce55 	.word	0xc5acce55

08001df8 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001df8:	1a51      	subs	r1, r2, r1
 8001dfa:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001dfe:	fbb1 f0f3 	udiv	r0, r1, r3
 8001e02:	4770      	bx	lr

08001e04 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001e04:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001e06:	6818      	ldr	r0, [r3, #0]
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e0001004 	.word	0xe0001004

08001e10 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001e10:	4770      	bx	lr

08001e12 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001e12:	b510      	push	{r4, lr}
 8001e14:	4604      	mov	r4, r0
 8001e16:	210c      	movs	r1, #12
 8001e18:	f01a f94a 	bl	801c0b0 <_ZdlPvj>
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 8001e20:	6803      	ldr	r3, [r0, #0]
{
 8001e22:	b510      	push	{r4, lr}
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001e28:	b131      	cbz	r1, 8001e38 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001e2a:	4798      	blx	r3
 8001e2c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001e2e:	6863      	ldr	r3, [r4, #4]
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	4418      	add	r0, r3
 8001e34:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001e36:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001e38:	4798      	blx	r3
 8001e3a:	60a0      	str	r0, [r4, #8]
}
 8001e3c:	e7fb      	b.n	8001e36 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001e3e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001e3e:	4770      	bx	lr

08001e40 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8001e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 8001e42:	2308      	movs	r3, #8
 8001e44:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001e46:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001e48:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <_ZN20STM32TouchController4initEv+0x24>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_ZN20STM32TouchController4initEv+0x28>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001e58:	f004 f956 	bl	8006108 <BSP_TS_Init>
}
 8001e5c:	b005      	add	sp, #20
 8001e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e62:	bf00      	nop
 8001e64:	24006c66 	.word	0x24006c66
 8001e68:	24006c68 	.word	0x24006c68

08001e6c <_ZN20STM32TouchControllerD0Ev>:
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	4604      	mov	r4, r0
 8001e70:	2104      	movs	r1, #4
 8001e72:	f01a f91d 	bl	801c0b0 <_ZdlPvj>
 8001e76:	4620      	mov	r0, r4
 8001e78:	bd10      	pop	{r4, pc}

08001e7a <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e7a:	b530      	push	{r4, r5, lr}
 8001e7c:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 8001e7e:	2000      	movs	r0, #0
{
 8001e80:	460d      	mov	r5, r1
 8001e82:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001e84:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001e86:	9003      	str	r0, [sp, #12]
 8001e88:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001e8c:	f004 f9be 	bl	800620c <BSP_TS_GetState>
 8001e90:	b140      	cbz	r0, 8001ea4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001ea2:	e7fe      	b.n	8001ea2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001ea4:	9801      	ldr	r0, [sp, #4]
 8001ea6:	b120      	cbz	r0, 8001eb2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001ea8:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 8001eaa:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 8001eac:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 8001eae:	9b03      	ldr	r3, [sp, #12]
 8001eb0:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001eb2:	b005      	add	sp, #20
 8001eb4:	bd30      	pop	{r4, r5, pc}
	...

08001eb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001eb8:	b110      	cbz	r0, 8001ec0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001eba:	2801      	cmp	r0, #1
 8001ebc:	d009      	beq.n	8001ed2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001ebe:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001ece:	f004 bdf1 	b.w	8006ab4 <HAL_GPIO_WritePin>
 8001ed2:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	0952      	lsrs	r2, r2, #5
 8001ede:	e7f5      	b.n	8001ecc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001ee0:	240001bc 	.word	0x240001bc
 8001ee4:	58020800 	.word	0x58020800

08001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001ee8:	b110      	cbz	r0, 8001ef0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8001eea:	2801      	cmp	r0, #1
 8001eec:	d009      	beq.n	8001f02 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001eee:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	3a00      	subs	r2, #0
 8001ef8:	bf18      	it	ne
 8001efa:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001efe:	f004 bdd9 	b.w	8006ab4 <HAL_GPIO_WritePin>
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001f04:	2104      	movs	r1, #4
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	3a00      	subs	r2, #0
 8001f0a:	bf18      	it	ne
 8001f0c:	2201      	movne	r2, #1
 8001f0e:	e7f5      	b.n	8001efc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8001f10:	240001bc 	.word	0x240001bc
 8001f14:	58020800 	.word	0x58020800

08001f18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001f18:	b110      	cbz	r0, 8001f20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001f1a:	2801      	cmp	r0, #1
 8001f1c:	d004      	beq.n	8001f28 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001f1e:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f20:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f22:	4802      	ldr	r0, [pc, #8]	; (8001f2c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8001f24:	f004 bdcb 	b.w	8006abe <HAL_GPIO_TogglePin>
 8001f28:	2104      	movs	r1, #4
 8001f2a:	e7fa      	b.n	8001f22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8001f2c:	58020800 	.word	0x58020800

08001f30 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001f30:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001f32:	b130      	cbz	r0, 8001f42 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001f34:	2801      	cmp	r0, #1
 8001f36:	d009      	beq.n	8001f4c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8001f38:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f3a:	1e43      	subs	r3, r0, #1
 8001f3c:	4258      	negs	r0, r3
 8001f3e:	4158      	adcs	r0, r3
 8001f40:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f42:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8001f46:	f004 fdaf 	bl	8006aa8 <HAL_GPIO_ReadPin>
        break;
 8001f4a:	e7f6      	b.n	8001f3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	e7f9      	b.n	8001f44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8001f50:	58020800 	.word	0x58020800

08001f54 <_ZN8touchgfx4GPIO4initEv>:
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	4d08      	ldr	r5, [pc, #32]	; (8001f78 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f58:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f5a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f5c:	b2e0      	uxtb	r0, r4
 8001f5e:	f7ff ffe7 	bl	8001f30 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f62:	b118      	cbz	r0, 8001f6c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f64:	682b      	ldr	r3, [r5, #0]
 8001f66:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f68:	bf18      	it	ne
 8001f6a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001f6c:	3401      	adds	r4, #1
 8001f6e:	3504      	adds	r5, #4
 8001f70:	2c05      	cmp	r4, #5
 8001f72:	d1f3      	bne.n	8001f5c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f74:	bd70      	pop	{r4, r5, r6, pc}
 8001f76:	bf00      	nop
 8001f78:	240001bc 	.word	0x240001bc

08001f7c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f7c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f7e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001f82:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001f86:	4770      	bx	lr

08001f88 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001f88:	2000      	movs	r0, #0
 8001f8a:	4770      	bx	lr

08001f8c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	4770      	bx	lr

08001f90 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001f90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f92:	b10b      	cbz	r3, 8001f98 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001f94:	4608      	mov	r0, r1
 8001f96:	4718      	bx	r3
        }
    }
 8001f98:	4770      	bx	lr

08001f9a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001f9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f9e:	4770      	bx	lr

08001fa0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001fa0:	6840      	ldr	r0, [r0, #4]
 8001fa2:	6803      	ldr	r3, [r0, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4718      	bx	r3

08001fa8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001fa8:	4770      	bx	lr
	...

08001fac <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001fb0:	f000 fcac 	bl	800290c <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001fb6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001fc4:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8001fc6:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001fca:	f7ff ffc3 	bl	8001f54 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f7ff fefa 	bl	8001dc8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001fd4:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001fd6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001fd8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001fdc:	bd38      	pop	{r3, r4, r5, pc}
 8001fde:	bf00      	nop
 8001fe0:	70060000 	.word	0x70060000
 8001fe4:	700c0000 	.word	0x700c0000

08001fe8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001fe8:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001fea:	b931      	cbnz	r1, 8001ffa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001fee:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001ff6:	f01a f971 	bl	801c2dc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001ffa:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ffe:	3a00      	subs	r2, #0
 8002000:	4908      	ldr	r1, [pc, #32]	; (8002024 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002002:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002004:	bf18      	it	ne
 8002006:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002008:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800200a:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800200c:	bf18      	it	ne
 800200e:	2301      	movne	r3, #1
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8002012:	7013      	strb	r3, [r2, #0]
    }
 8002014:	bd08      	pop	{r3, pc}
 8002016:	bf00      	nop
 8002018:	0801d4cc 	.word	0x0801d4cc
 800201c:	0801d504 	.word	0x0801d504
 8002020:	0801d552 	.word	0x0801d552
 8002024:	24006c6a 	.word	0x24006c6a
 8002028:	24006c6b 	.word	0x24006c6b

0800202c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800202c:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	428b      	cmp	r3, r1
 8002034:	d803      	bhi.n	800203e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d905      	bls.n	800204a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002040:	219e      	movs	r1, #158	; 0x9e
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002046:	f01a f949 	bl	801c2dc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800204c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002050:	801a      	strh	r2, [r3, #0]
    }
 8002052:	bd08      	pop	{r3, pc}
 8002054:	24006c60 	.word	0x24006c60
 8002058:	24006c62 	.word	0x24006c62
 800205c:	0801d597 	.word	0x0801d597
 8002060:	0801d5fa 	.word	0x0801d5fa
 8002064:	0801d552 	.word	0x0801d552
 8002068:	24006c66 	.word	0x24006c66
 800206c:	24006c68 	.word	0x24006c68

08002070 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002070:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8002072:	6803      	ldr	r3, [r0, #0]
{
 8002074:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8002076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002078:	4798      	blx	r3
    enableInterrupts();
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	4620      	mov	r0, r4
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002082:	f000 f8e7 	bl	8002254 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	4620      	mov	r0, r4
 800208a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208c:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 8002096:	f004 fd0d 	bl	8006ab4 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a0:	4805      	ldr	r0, [pc, #20]	; (80020b8 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 80020a2:	f004 fd07 	bl	8006ab4 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80020a6:	f000 f8d5 	bl	8002254 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	4620      	mov	r0, r4
 80020ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b0:	4798      	blx	r3
    for (;;)
 80020b2:	e7f8      	b.n	80020a6 <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 80020b4:	58020c00 	.word	0x58020c00
 80020b8:	58021800 	.word	0x58021800

080020bc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80020bc:	b510      	push	{r4, lr}
 80020be:	4604      	mov	r4, r0
        swapFrameBuffers();
 80020c0:	f00b fb92 	bl	800d7e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	4620      	mov	r0, r4
 80020c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 80020cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80020d0:	4718      	bx	r3

080020d2 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80020d2:	f000 bc0d 	b.w	80028f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

080020d6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80020d6:	f000 bc11 	b.w	80028fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

080020dc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80020de:	f000 fc6d 	bl	80029bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020f2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020f6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020fa:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80020fe:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002100:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002104:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002106:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800210a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800210c:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002110:	d2f9      	bcs.n	8002106 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8002112:	3b20      	subs	r3, #32
 8002114:	f113 0f20 	cmn.w	r3, #32
 8002118:	d1f2      	bne.n	8002100 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 800211a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800211e:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002128:	f000 bbbe 	b.w	80028a8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800212c <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800212c:	f000 bc68 	b.w	8002a00 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08002130 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002130:	f000 bc52 	b.w	80029d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08002134 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002134:	f000 bbc2 	b.w	80028bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002138 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8002138:	f00a bd0e 	b.w	800cb58 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800213c <_ZN11TouchGFXHALD0Ev>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
 8002140:	2188      	movs	r1, #136	; 0x88
 8002142:	f019 ffb5 	bl	801c0b0 <_ZdlPvj>
 8002146:	4620      	mov	r0, r4
 8002148:	bd10      	pop	{r4, pc}

0800214a <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 800214a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800214e:	b11b      	cbz	r3, 8002158 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8002150:	6840      	ldr	r0, [r0, #4]
 8002152:	6803      	ldr	r3, [r0, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4718      	bx	r3
    }
 8002158:	4618      	mov	r0, r3
 800215a:	4770      	bx	lr

0800215c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800215c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8002162:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002164:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	428c      	cmp	r4, r1
 800216c:	d009      	beq.n	8002182 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 800216e:	b93a      	cbnz	r2, 8002180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002170:	490a      	ldr	r1, [pc, #40]	; (800219c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002174:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002176:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002178:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800217a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800217c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800217e:	701a      	strb	r2, [r3, #0]
        }
    }
 8002180:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002182:	2a00      	cmp	r2, #0
 8002184:	d0fc      	beq.n	8002180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002186:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002188:	4904      	ldr	r1, [pc, #16]	; (800219c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800218a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800218c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800218e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002190:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002192:	2200      	movs	r2, #0
 8002194:	e7f3      	b.n	800217e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002196:	bf00      	nop
 8002198:	24006c64 	.word	0x24006c64
 800219c:	24006c62 	.word	0x24006c62
 80021a0:	24006c60 	.word	0x24006c60

080021a4 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 80021a4:	4601      	mov	r1, r0
 80021a6:	b508      	push	{r3, lr}
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <IdleTaskHook+0x14>)
 80021aa:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80021ac:	b101      	cbz	r1, 80021b0 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80021ae:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80021b0:	f00b fb34 	bl	800d81c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80021b4:	2001      	movs	r0, #1
 80021b6:	bd08      	pop	{r3, pc}
 80021b8:	24006c6c 	.word	0x24006c6c

080021bc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80021bc:	2101      	movs	r1, #1
 80021be:	2200      	movs	r2, #0
{
 80021c0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80021c2:	4608      	mov	r0, r1
 80021c4:	f008 f8e1 	bl	800a38a <osSemaphoreNew>
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80021ca:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80021cc:	b928      	cbnz	r0, 80021da <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80021d0:	2128      	movs	r1, #40	; 0x28
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80021d6:	f01a f881 	bl	801c2dc <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80021da:	2200      	movs	r2, #0
 80021dc:	2104      	movs	r1, #4
 80021de:	2001      	movs	r0, #1
 80021e0:	f008 f972 	bl	800a4c8 <osMessageQueueNew>
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80021e6:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80021e8:	b918      	cbnz	r0, 80021f2 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	4a03      	ldr	r2, [pc, #12]	; (80021fc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80021f0:	e7f0      	b.n	80021d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80021f2:	bd08      	pop	{r3, pc}
 80021f4:	240001d0 	.word	0x240001d0
 80021f8:	0801d710 	.word	0x0801d710
 80021fc:	0801d759 	.word	0x0801d759
 8002200:	0801d788 	.word	0x0801d788
 8002204:	240001cc 	.word	0x240001cc
 8002208:	0801d7e2 	.word	0x0801d7e2

0800220c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800220e:	f04f 31ff 	mov.w	r1, #4294967295
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	f008 b904 	b.w	800a420 <osSemaphoreAcquire>
 8002218:	240001d0 	.word	0x240001d0

0800221c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f008 b92a 	b.w	800a478 <osSemaphoreRelease>
 8002224:	240001d0 	.word	0x240001d0

08002228 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 800222a:	2100      	movs	r1, #0
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f008 b8f7 	b.w	800a420 <osSemaphoreAcquire>
 8002232:	bf00      	nop
 8002234:	240001d0 	.word	0x240001d0

08002238 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8002238:	f7ff bff0 	b.w	800221c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800223c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800223c:	2300      	movs	r3, #0
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002242:	461a      	mov	r2, r3
 8002244:	6800      	ldr	r0, [r0, #0]
 8002246:	f008 b97b 	b.w	800a540 <osMessageQueuePut>
 800224a:	bf00      	nop
 800224c:	240001cc 	.word	0x240001cc
 8002250:	2400003c 	.word	0x2400003c

08002254 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002254:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002256:	2300      	movs	r3, #0
 8002258:	4c07      	ldr	r4, [pc, #28]	; (8002278 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800225a:	a901      	add	r1, sp, #4
 800225c:	461a      	mov	r2, r3
 800225e:	6820      	ldr	r0, [r4, #0]
 8002260:	f008 f99e 	bl	800a5a0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	2200      	movs	r2, #0
 800226a:	a901      	add	r1, sp, #4
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	f008 f997 	bl	800a5a0 <osMessageQueueGet>
}
 8002272:	b002      	add	sp, #8
 8002274:	bd10      	pop	{r4, pc}
 8002276:	bf00      	nop
 8002278:	240001cc 	.word	0x240001cc

0800227c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 800227c:	6803      	ldr	r3, [r0, #0]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	4718      	bx	r3

08002282 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002282:	2001      	movs	r0, #1
 8002284:	4770      	bx	lr

08002286 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002286:	6803      	ldr	r3, [r0, #0]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	4718      	bx	r3

0800228c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 800228c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002290:	4770      	bx	lr
	...

08002294 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <DMA2D_XferCpltCallback+0xc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4718      	bx	r3
 80022a0:	24006c6c 	.word	0x24006c6c

080022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 80022a4:	b508      	push	{r3, lr}
 80022a6:	280b      	cmp	r0, #11
 80022a8:	d80b      	bhi.n	80022c2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 80022aa:	e8df f000 	tbb	[pc, r0]
 80022ae:	0612      	.short	0x0612
 80022b0:	0a0a0a10 	.word	0x0a0a0a10
 80022b4:	0808080a 	.word	0x0808080a
 80022b8:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022ba:	2001      	movs	r0, #1
}
 80022bc:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80022be:	2005      	movs	r0, #5
        break;
 80022c0:	e7fc      	b.n	80022bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80022c4:	2166      	movs	r1, #102	; 0x66
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 80022ca:	f01a f807 	bl	801c2dc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e7f4      	b.n	80022bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022d2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80022d4:	e7f2      	b.n	80022bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80022d6:	bf00      	nop
 80022d8:	0801d824 	.word	0x0801d824
 80022dc:	0801d83f 	.word	0x0801d83f
 80022e0:	0801d889 	.word	0x0801d889

080022e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 80022e4:	b508      	push	{r3, lr}
 80022e6:	280a      	cmp	r0, #10
 80022e8:	d809      	bhi.n	80022fe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 80022ea:	e8df f000 	tbb	[pc, r0]
 80022ee:	0610      	.short	0x0610
 80022f0:	0808080e 	.word	0x0808080e
 80022f4:	06060608 	.word	0x06060608
 80022f8:	06          	.byte	0x06
 80022f9:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80022fa:	2001      	movs	r0, #1
}
 80022fc:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002300:	2187      	movs	r1, #135	; 0x87
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002306:	f019 ffe9 	bl	801c2dc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800230a:	2000      	movs	r0, #0
 800230c:	e7f6      	b.n	80022fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800230e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002310:	e7f4      	b.n	80022fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002312:	bf00      	nop
 8002314:	0801d824 	.word	0x0801d824
 8002318:	0801d8e1 	.word	0x0801d8e1
 800231c:	0801d889 	.word	0x0801d889

08002320 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002324:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002328:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800232a:	4640      	mov	r0, r8
 800232c:	f7ff ffba 	bl	80022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002330:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002332:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002334:	4638      	mov	r0, r7
 8002336:	f7ff ffb5 	bl	80022a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 800233a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800233c:	4638      	mov	r0, r7
 800233e:	f7ff ffd1 	bl	80022e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002342:	8aa1      	ldrh	r1, [r4, #20]
 8002344:	8b62      	ldrh	r2, [r4, #26]
 8002346:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002348:	1a52      	subs	r2, r2, r1
 800234a:	469e      	mov	lr, r3
 800234c:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800234e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002350:	8b22      	ldrh	r2, [r4, #24]
 8002352:	1a52      	subs	r2, r2, r1
 8002354:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002356:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002358:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800235a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800235e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002362:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002364:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002366:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002368:	f8d4 c000 	ldr.w	ip, [r4]
 800236c:	f894 901c 	ldrb.w	r9, [r4, #28]
 8002370:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8002374:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8002378:	d029      	beq.n	80023ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 800237a:	d813      	bhi.n	80023a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800237c:	f1bc 0f20 	cmp.w	ip, #32
 8002380:	ea45 0002 	orr.w	r0, r5, r2
 8002384:	d067      	beq.n	8002456 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8002386:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800238a:	d064      	beq.n	8002456 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 800238c:	f1bc 0f04 	cmp.w	ip, #4
 8002390:	d05d      	beq.n	800244e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002392:	432a      	orrs	r2, r5
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002396:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002398:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800239c:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800239e:	d067      	beq.n	8002470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80023a0:	4a36      	ldr	r2, [pc, #216]	; (800247c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 80023a2:	e040      	b.n	8002426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 80023a4:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80023a8:	d007      	beq.n	80023ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 80023aa:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80023ae:	d1f0      	bne.n	8002392 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023b4:	f042 0209 	orr.w	r2, r2, #9
 80023b8:	e003      	b.n	80023c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023be:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023c2:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80023c4:	68e2      	ldr	r2, [r4, #12]
 80023c6:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023c8:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023ca:	6159      	str	r1, [r3, #20]
 80023cc:	e02a      	b.n	8002424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023ce:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80023d0:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80023d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023d6:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023d8:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80023da:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80023dc:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 80023e0:	7802      	ldrb	r2, [r0, #0]
 80023e2:	b142      	cbz	r2, 80023f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 80023e4:	2a01      	cmp	r2, #1
 80023e6:	d020      	beq.n	800242a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 80023ea:	f240 1101 	movw	r1, #257	; 0x101
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 80023f0:	4825      	ldr	r0, [pc, #148]	; (8002488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 80023f2:	f019 ff73 	bl	801c2dc <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023f6:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 80023f8:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	1e50      	subs	r0, r2, #1
 80023fe:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800240a:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	0692      	lsls	r2, r2, #26
 800241a:	d4fc      	bmi.n	8002416 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800241c:	2210      	movs	r2, #16
 800241e:	609a      	str	r2, [r3, #8]
        if(blend)
 8002420:	2c00      	cmp	r4, #0
 8002422:	d0bd      	beq.n	80023a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002424:	4a19      	ldr	r2, [pc, #100]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002426:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002428:	e020      	b.n	800246c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800242a:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 800242c:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002430:	69d9      	ldr	r1, [r3, #28]
 8002432:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 8002436:	bf18      	it	ne
 8002438:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800243a:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800243e:	f022 0210 	bic.w	r2, r2, #16
 8002442:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002446:	f042 0210 	orr.w	r2, r2, #16
 800244a:	61da      	str	r2, [r3, #28]
            break;
 800244c:	e7de      	b.n	800240c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800244e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002452:	61d8      	str	r0, [r3, #28]
 8002454:	e7b8      	b.n	80023c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002456:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800245c:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002460:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002464:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002468:	f8ce 3000 	str.w	r3, [lr]
}
 800246c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002470:	f240 2201 	movw	r2, #513	; 0x201
 8002474:	e7d7      	b.n	8002426 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002476:	bf00      	nop
 8002478:	52001000 	.word	0x52001000
 800247c:	00010201 	.word	0x00010201
 8002480:	0801d92c 	.word	0x0801d92c
 8002484:	0801d946 	.word	0x0801d946
 8002488:	0801d889 	.word	0x0801d889
 800248c:	00020201 	.word	0x00020201

08002490 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002494:	7f88      	ldrb	r0, [r1, #30]
 8002496:	f7ff ff25 	bl	80022e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800249c:	8aa5      	ldrh	r5, [r4, #20]
 800249e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024a0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024a2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024a6:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024a8:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024aa:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024ac:	6921      	ldr	r1, [r4, #16]
 80024ae:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80024b2:	6825      	ldr	r5, [r4, #0]
 80024b4:	2d08      	cmp	r5, #8
 80024b6:	d10e      	bne.n	80024d6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024b8:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024ba:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024bc:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80024c0:	7f20      	ldrb	r0, [r4, #28]
 80024c2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80024c6:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024c8:	68e2      	ldr	r2, [r4, #12]
 80024ca:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024ce:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024d0:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024d2:	601a      	str	r2, [r3, #0]
    }
}
 80024d4:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80024d6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024d8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80024da:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80024dc:	68e2      	ldr	r2, [r4, #12]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80024e2:	e7f6      	b.n	80024d2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80024e4:	52001000 	.word	0x52001000
 80024e8:	00010009 	.word	0x00010009
 80024ec:	00020201 	.word	0x00020201
 80024f0:	00030201 	.word	0x00030201

080024f4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024fa:	6003      	str	r3, [r0, #0]
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <_ZN8STM32DMAD1Ev+0x1c>)
 80024fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002506:	f3bf 8f6f 	isb	sy
}
 800250a:	4770      	bx	lr
 800250c:	0801d98c 	.word	0x0801d98c
 8002510:	e000e100 	.word	0xe000e100

08002514 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
}
 8002518:	f7ff ffec 	bl	80024f4 <_ZN8STM32DMAD1Ev>
 800251c:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002520:	4620      	mov	r0, r4
 8002522:	f019 fdc5 	bl	801c0b0 <_ZdlPvj>
 8002526:	4620      	mov	r0, r4
 8002528:	bd10      	pop	{r4, pc}
	...

0800252c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <_ZN8STM32DMA10initializeEv+0x40>)
{
 800252e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002530:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002534:	f042 0210 	orr.w	r2, r2, #16
 8002538:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800253c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002540:	f002 0210 	and.w	r2, r2, #16
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002548:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800254a:	f042 0210 	orr.w	r2, r2, #16
 800254e:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002550:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002552:	f022 0210 	bic.w	r2, r2, #16
 8002556:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <_ZN8STM32DMA10initializeEv+0x44>)
 800255a:	4a06      	ldr	r2, [pc, #24]	; (8002574 <_ZN8STM32DMA10initializeEv+0x48>)
 800255c:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002560:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002564:	609a      	str	r2, [r3, #8]
}
 8002566:	b002      	add	sp, #8
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
 8002570:	24007100 	.word	0x24007100
 8002574:	08002295 	.word	0x08002295
 8002578:	e000e100 	.word	0xe000e100

0800257c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_ZN8STM32DMAC1Ev+0x30>)
 8002582:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002584:	2600      	movs	r6, #0
 8002586:	4625      	mov	r5, r4
 8002588:	2260      	movs	r2, #96	; 0x60
 800258a:	6060      	str	r0, [r4, #4]
 800258c:	7226      	strb	r6, [r4, #8]
 800258e:	7266      	strb	r6, [r4, #9]
 8002590:	f845 3b20 	str.w	r3, [r5], #32
 8002594:	4629      	mov	r1, r5
 8002596:	f00b faa9 	bl	800daec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800259a:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800259e:	60ee      	str	r6, [r5, #12]
 80025a0:	3520      	adds	r5, #32
 80025a2:	42ab      	cmp	r3, r5
 80025a4:	d1fb      	bne.n	800259e <_ZN8STM32DMAC1Ev+0x22>
}
 80025a6:	4620      	mov	r0, r4
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	bf00      	nop
 80025ac:	0801d98c 	.word	0x0801d98c

080025b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80025b0:	2001      	movs	r0, #1
 80025b2:	4770      	bx	lr

080025b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80025b4:	200c      	movs	r0, #12
 80025b6:	4770      	bx	lr

080025b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80025b8:	230c      	movs	r3, #12
 80025ba:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025be:	3008      	adds	r0, #8
 80025c0:	4770      	bx	lr

080025c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80025c2:	230c      	movs	r3, #12
 80025c4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025c8:	3008      	adds	r0, #8
 80025ca:	4770      	bx	lr

080025cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80025cc:	2001      	movs	r0, #1
 80025ce:	4770      	bx	lr

080025d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80025d0:	f44f 60e2 	mov.w	r0, #1808	; 0x710
 80025d4:	4770      	bx	lr

080025d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025d6:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80025da:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025de:	3008      	adds	r0, #8
 80025e0:	4770      	bx	lr

080025e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025e2:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80025e6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80025ea:	3008      	adds	r0, #8
 80025ec:	4770      	bx	lr

080025ee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80025ee:	2001      	movs	r0, #1
 80025f0:	4770      	bx	lr

080025f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80025f2:	2010      	movs	r0, #16
 80025f4:	4770      	bx	lr

080025f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025f6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80025fa:	3008      	adds	r0, #8
 80025fc:	4770      	bx	lr

080025fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80025fe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002602:	3008      	adds	r0, #8
 8002604:	4770      	bx	lr

08002606 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002606:	4608      	mov	r0, r1
 8002608:	f000 bb14 	b.w	8002c34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

0800260c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	6003      	str	r3, [r0, #0]
 8002614:	f009 ffd2 	bl	800c5bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002618:	4620      	mov	r0, r4
 800261a:	bd10      	pop	{r4, pc}
 800261c:	0801da44 	.word	0x0801da44

08002620 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
 8002624:	f7ff fff2 	bl	800260c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002628:	2114      	movs	r1, #20
 800262a:	4620      	mov	r0, r4
 800262c:	f019 fd40 	bl	801c0b0 <_ZdlPvj>
 8002630:	4620      	mov	r0, r4
 8002632:	bd10      	pop	{r4, pc}

08002634 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002636:	b510      	push	{r4, lr}
 8002638:	4604      	mov	r4, r0
 800263a:	6003      	str	r3, [r0, #0]
 800263c:	f009 ffbe 	bl	800c5bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002640:	4620      	mov	r0, r4
 8002642:	bd10      	pop	{r4, pc}
 8002644:	0801da10 	.word	0x0801da10

08002648 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	f7ff fff2 	bl	8002634 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002650:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 8002654:	4620      	mov	r0, r4
 8002656:	f019 fd2b 	bl	801c0b0 <_ZdlPvj>
 800265a:	4620      	mov	r0, r4
 800265c:	bd10      	pop	{r4, pc}
	...

08002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002662:	b510      	push	{r4, lr}
 8002664:	4604      	mov	r4, r0
 8002666:	6003      	str	r3, [r0, #0]
 8002668:	f009 ffa8 	bl	800c5bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800266c:	4620      	mov	r0, r4
 800266e:	bd10      	pop	{r4, pc}
 8002670:	0801d9dc 	.word	0x0801d9dc

08002674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002674:	b510      	push	{r4, lr}
 8002676:	4604      	mov	r4, r0
 8002678:	f7ff fff2 	bl	8002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800267c:	2118      	movs	r1, #24
 800267e:	4620      	mov	r0, r4
 8002680:	f019 fd16 	bl	801c0b0 <_ZdlPvj>
 8002684:	4620      	mov	r0, r4
 8002686:	bd10      	pop	{r4, pc}

08002688 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <_ZN12FrontendHeapD1Ev+0x24>)
 800268a:	b510      	push	{r4, lr}
 800268c:	4604      	mov	r4, r0
 800268e:	6003      	str	r3, [r0, #0]
 8002690:	f200 7044 	addw	r0, r0, #1860	; 0x744
 8002694:	f7ff ffba 	bl	800260c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002698:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800269c:	f7ff ffca 	bl	8002634 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026a0:	f104 0014 	add.w	r0, r4, #20
 80026a4:	f7ff ffdc 	bl	8002660 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026a8:	4620      	mov	r0, r4
 80026aa:	bd10      	pop	{r4, pc}
 80026ac:	0801da78 	.word	0x0801da78

080026b0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80026b0:	b508      	push	{r3, lr}
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <__tcf_0+0xc>)
 80026b4:	f7ff ffe8 	bl	8002688 <_ZN12FrontendHeapD1Ev>
 80026b8:	bd08      	pop	{r3, pc}
 80026ba:	bf00      	nop
 80026bc:	240001d8 	.word	0x240001d8

080026c0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	f7ff ffe0 	bl	8002688 <_ZN12FrontendHeapD1Ev>
 80026c8:	f640 01b4 	movw	r1, #2228	; 0x8b4
 80026cc:	4620      	mov	r0, r4
 80026ce:	f019 fcef 	bl	801c0b0 <_ZdlPvj>
 80026d2:	4620      	mov	r0, r4
 80026d4:	bd10      	pop	{r4, pc}
	...

080026d8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80026d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80026dc:	f000 f9ec 	bl	8002ab8 <_ZN14BitmapDatabase11getInstanceEv>
 80026e0:	2400      	movs	r4, #0
 80026e2:	4605      	mov	r5, r0
 80026e4:	f000 f9ec 	bl	8002ac0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80026e8:	4623      	mov	r3, r4
 80026ea:	4601      	mov	r1, r0
 80026ec:	4622      	mov	r2, r4
 80026ee:	4628      	mov	r0, r5
 80026f0:	9400      	str	r4, [sp, #0]
 80026f2:	f011 f9cd 	bl	8013a90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <touchgfx_init+0xb4>)
 80026f8:	4a25      	ldr	r2, [pc, #148]	; (8002790 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80026fa:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80026fc:	4d25      	ldr	r5, [pc, #148]	; (8002794 <touchgfx_init+0xbc>)
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f002 f88c 	bl	800481c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002704:	4824      	ldr	r0, [pc, #144]	; (8002798 <touchgfx_init+0xc0>)
 8002706:	f011 f905 	bl	8013914 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800270a:	782b      	ldrb	r3, [r5, #0]
 800270c:	f3bf 8f5b 	dmb	ish
 8002710:	07db      	lsls	r3, r3, #31
 8002712:	d435      	bmi.n	8002780 <touchgfx_init+0xa8>
 8002714:	4628      	mov	r0, r5
 8002716:	f019 fccd 	bl	801c0b4 <__cxa_guard_acquire>
 800271a:	b388      	cbz	r0, 8002780 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800271c:	4c1f      	ldr	r4, [pc, #124]	; (800279c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <touchgfx_init+0xc8>)
 8002720:	f204 765c 	addw	r6, r4, #1884	; 0x75c
 8002724:	f104 0014 	add.w	r0, r4, #20
 8002728:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800272c:	f204 7744 	addw	r7, r4, #1860	; 0x744
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	6060      	str	r0, [r4, #4]
 8002734:	f8c4 8008 	str.w	r8, [r4, #8]
 8002738:	60e7      	str	r7, [r4, #12]
 800273a:	6126      	str	r6, [r4, #16]
 800273c:	f009 ff40 	bl	800c5c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <touchgfx_init+0xcc>)
 8002742:	4640      	mov	r0, r8
 8002744:	6163      	str	r3, [r4, #20]
 8002746:	f009 ff3b 	bl	800c5c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <touchgfx_init+0xd0>)
 800274c:	4638      	mov	r0, r7
 800274e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002750:	f009 ff36 	bl	800c5c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <touchgfx_init+0xd4>)
 8002756:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
 800275a:	f8c4 3744 	str.w	r3, [r4, #1860]	; 0x744
 800275e:	f002 f8dd 	bl	800491c <_ZN5ModelC1Ev>
 8002762:	4622      	mov	r2, r4
 8002764:	f504 61eb 	add.w	r1, r4, #1880	; 0x758
 8002768:	4630      	mov	r0, r6
 800276a:	f002 f8cd 	bl	8004908 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800276e:	4630      	mov	r0, r6
 8002770:	f000 fa60 	bl	8002c34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002774:	4628      	mov	r0, r5
 8002776:	f019 fca9 	bl	801c0cc <__cxa_guard_release>
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <touchgfx_init+0xd8>)
 800277c:	f019 fdcc 	bl	801c318 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002780:	480c      	ldr	r0, [pc, #48]	; (80027b4 <touchgfx_init+0xdc>)
}
 8002782:	b002      	add	sp, #8
 8002784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002788:	f7ff bc10 	b.w	8001fac <_ZN11TouchGFXHAL10initializeEv>
 800278c:	24006cc8 	.word	0x24006cc8
 8002790:	24001738 	.word	0x24001738
 8002794:	240001d4 	.word	0x240001d4
 8002798:	24000040 	.word	0x24000040
 800279c:	240001d8 	.word	0x240001d8
 80027a0:	0801da78 	.word	0x0801da78
 80027a4:	0801d9dc 	.word	0x0801d9dc
 80027a8:	0801da10 	.word	0x0801da10
 80027ac:	0801da44 	.word	0x0801da44
 80027b0:	080026b1 	.word	0x080026b1
 80027b4:	240016b0 	.word	0x240016b0

080027b8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <touchgfx_taskEntry+0x8>)
 80027ba:	f7ff bc59 	b.w	8002070 <_ZN11TouchGFXHAL9taskEntryEv>
 80027be:	bf00      	nop
 80027c0:	240016b0 	.word	0x240016b0

080027c4 <_GLOBAL__sub_I_touchgfx_init>:
}
 80027c4:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 80027c6:	4e27      	ldr	r6, [pc, #156]	; (8002864 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 80027ca:	4c28      	ldr	r4, [pc, #160]	; (800286c <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 80027cc:	4630      	mov	r0, r6
static LCD24bpp display;
 80027ce:	4d28      	ldr	r5, [pc, #160]	; (8002870 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 80027d0:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 80027d2:	f7ff fed3 	bl	800257c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80027d6:	4628      	mov	r0, r5
 80027d8:	f013 fbae 	bl	8015f38 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80027e4:	4824      	ldr	r0, [pc, #144]	; (8002878 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80027e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ee:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
 80027f2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80027f6:	671a      	str	r2, [r3, #112]	; 0x70
 80027f8:	60dc      	str	r4, [r3, #12]
 80027fa:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 80027fe:	491f      	ldr	r1, [pc, #124]	; (800287c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8002800:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002804:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002808:	6759      	str	r1, [r3, #116]	; 0x74
 800280a:	2101      	movs	r1, #1
 800280c:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002810:	491b      	ldr	r1, [pc, #108]	; (8002880 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002812:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002814:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002818:	8001      	strh	r1, [r0, #0]
 800281a:	481a      	ldr	r0, [pc, #104]	; (8002884 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 800281c:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 8002820:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002824:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002828:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 800282c:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002830:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002834:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002838:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800283c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800283e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002842:	4811      	ldr	r0, [pc, #68]	; (8002888 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8002844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002848:	8001      	strh	r1, [r0, #0]
 800284a:	4810      	ldr	r0, [pc, #64]	; (800288c <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002850:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002852:	490f      	ldr	r1, [pc, #60]	; (8002890 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8002854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002858:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800285a:	490e      	ldr	r1, [pc, #56]	; (8002894 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 800285e:	6019      	str	r1, [r3, #0]
 8002860:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	24000a90 	.word	0x24000a90
 8002868:	0801d4bc 	.word	0x0801d4bc
 800286c:	24000a8c 	.word	0x24000a8c
 8002870:	2400173c 	.word	0x2400173c
 8002874:	240016b0 	.word	0x240016b0
 8002878:	24006c60 	.word	0x24006c60
 800287c:	01000001 	.word	0x01000001
 8002880:	24006c6c 	.word	0x24006c6c
 8002884:	24006c66 	.word	0x24006c66
 8002888:	24006c62 	.word	0x24006c62
 800288c:	24006c68 	.word	0x24006c68
 8002890:	24006c64 	.word	0x24006c64
 8002894:	0801d648 	.word	0x0801d648
 8002898:	0801d494 	.word	0x0801d494

0800289c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800289c:	4801      	ldr	r0, [pc, #4]	; (80028a4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800289e:	f7ff be29 	b.w	80024f4 <_ZN8STM32DMAD1Ev>
 80028a2:	bf00      	nop
 80028a4:	24000a90 	.word	0x24000a90

080028a8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80028aa:	2290      	movs	r2, #144	; 0x90
 80028ac:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80028b0:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80028bc:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80028c0:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80028c2:	480a      	ldr	r0, [pc, #40]	; (80028ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80028c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80028ce:	6911      	ldr	r1, [r2, #16]
 80028d0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80028d4:	3901      	subs	r1, #1
 80028d6:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80028da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80028e2:	4770      	bx	lr
 80028e4:	50001000 	.word	0x50001000
 80028e8:	24001796 	.word	0x24001796
 80028ec:	24001794 	.word	0x24001794

080028f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80028f0:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80028f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	50001084 	.word	0x50001084

080028fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80028fe:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002900:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002902:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8002906:	4770      	bx	lr
 8002908:	50001084 	.word	0x50001084

0800290c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4604      	mov	r4, r0
    HAL::initialize();
 8002910:	f00a f977 	bl	800cc02 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8002918:	f00d ff1e 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 800291c:	4601      	mov	r1, r0
 800291e:	4620      	mov	r0, r4
 8002920:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	4620      	mov	r0, r4
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002928:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800292c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002930:	2300      	movs	r3, #0
 8002932:	46ac      	mov	ip, r5
}
 8002934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8002938:	4760      	bx	ip
 800293a:	bf00      	nop
 800293c:	70060000 	.word	0x70060000

08002940 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002940:	f00a b946 	b.w	800cbd0 <_ZN8touchgfx3HAL10beginFrameEv>

08002944 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002944:	f00a b950 	b.w	800cbe8 <_ZN8touchgfx3HAL8endFrameEv>

08002948 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002948:	f00a ba69 	b.w	800ce1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800294c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 800294e:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002956:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800295a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800295e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002962:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002966:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800296a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800296c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002970:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002972:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002976:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002978:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800297c:	d2f9      	bcs.n	8002972 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 800297e:	3b20      	subs	r3, #32
 8002980:	f113 0f20 	cmn.w	r3, #32
 8002984:	d1f2      	bne.n	800296c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 8002986:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800298a:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	03db      	lsls	r3, r3, #15
 800299a:	d501      	bpl.n	80029a0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 800299c:	f7ff bfd6 	b.w	800294c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	03db      	lsls	r3, r3, #15
 80029ae:	d501      	bpl.n	80029b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 80029b0:	f7ff bfcc 	b.w	800294c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80029bc:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 80029be:	f00a f8d1 	bl	800cb64 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	03db      	lsls	r3, r3, #15
 80029c8:	d503      	bpl.n	80029d2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 80029ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80029ce:	f7ff bfbd 	b.w	800294c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 80029d2:	bd08      	pop	{r3, pc}
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80029da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80029e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80029f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80029f6:	f3bf 8f6f 	isb	sy
}
 80029fa:	4770      	bx	lr
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002a02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a0c:	609a      	str	r2, [r3, #8]
}
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_LTDC_LineEventCallback+0x50>)
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_LTDC_LineEventCallback+0x54>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	8811      	ldrh	r1, [r2, #0]
 8002a1c:	428b      	cmp	r3, r1
    {
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	4c12      	ldr	r4, [pc, #72]	; (8002a6c <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8002a22:	d113      	bne.n	8002a4c <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_LTDC_LineEventCallback+0x5c>)
 8002a26:	8819      	ldrh	r1, [r3, #0]
 8002a28:	f004 fd90 	bl	800754c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002a2c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002a2e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002a32:	3301      	adds	r3, #1
 8002a34:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a38:	f7ff fc00 	bl	800223c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002a3c:	6820      	ldr	r0, [r4, #0]
 8002a3e:	f00a fed3 	bl	800d7e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a42:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002a48:	f7ff ba36 	b.w	8001eb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002a4c:	f004 fd7e 	bl	800754c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fa49 	bl	8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002a56:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002a58:	6803      	ldr	r3, [r0, #0]
    }
 8002a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4718      	bx	r3
 8002a62:	bf00      	nop
 8002a64:	50001000 	.word	0x50001000
 8002a68:	24001796 	.word	0x24001796
 8002a6c:	24006c6c 	.word	0x24006c6c
 8002a70:	24001794 	.word	0x24001794

08002a74 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002a74:	4770      	bx	lr

08002a76 <_ZN23ApplicationFontProviderD0Ev>:
 8002a76:	b510      	push	{r4, lr}
 8002a78:	4604      	mov	r4, r0
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	f019 fb18 	bl	801c0b0 <_ZdlPvj>
 8002a80:	4620      	mov	r0, r4
 8002a82:	bd10      	pop	{r4, pc}

08002a84 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002a84:	b508      	push	{r3, lr}
 8002a86:	2903      	cmp	r1, #3
 8002a88:	d813      	bhi.n	8002ab2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002a8a:	e8df f001 	tbb	[pc, r1]
 8002a8e:	0602      	.short	0x0602
 8002a90:	0e0a      	.short	0x0e0a
    switch (typography)
    {
    case Typography::DEFAULT:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002a92:	f001 ff0f 	bl	80048b4 <_ZN17TypedTextDatabase8getFontsEv>
 8002a96:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002a98:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002a9a:	f001 ff0b 	bl	80048b4 <_ZN17TypedTextDatabase8getFontsEv>
 8002a9e:	6840      	ldr	r0, [r0, #4]
 8002aa0:	e7fa      	b.n	8002a98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002aa2:	f001 ff07 	bl	80048b4 <_ZN17TypedTextDatabase8getFontsEv>
 8002aa6:	6880      	ldr	r0, [r0, #8]
 8002aa8:	e7f6      	b.n	8002a98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002aaa:	f001 ff03 	bl	80048b4 <_ZN17TypedTextDatabase8getFontsEv>
 8002aae:	68c0      	ldr	r0, [r0, #12]
 8002ab0:	e7f2      	b.n	8002a98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
{
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	e7f0      	b.n	8002a98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002ab8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002ab8:	4800      	ldr	r0, [pc, #0]	; (8002abc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002aba:	4770      	bx	lr
 8002abc:	0801da98 	.word	0x0801da98

08002ac0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002ac0:	200d      	movs	r0, #13
 8002ac2:	4770      	bx	lr

08002ac4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002ac4:	b513      	push	{r0, r1, r4, lr}
 8002ac6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002ac8:	b151      	cbz	r1, 8002ae0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002aca:	6803      	ldr	r3, [r0, #0]
 8002acc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002ace:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002ad0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002ad4:	689c      	ldr	r4, [r3, #8]
 8002ad6:	f10d 0303 	add.w	r3, sp, #3
 8002ada:	47a0      	blx	r4
        return glyph;
    }
 8002adc:	b002      	add	sp, #8
 8002ade:	bd10      	pop	{r4, pc}
            return 0;
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	e7fb      	b.n	8002adc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002ae4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002ae4:	8940      	ldrh	r0, [r0, #10]
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002ae8:	8980      	ldrh	r0, [r0, #12]
 8002aea:	4770      	bx	lr

08002aec <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002aec:	8880      	ldrh	r0, [r0, #4]
 8002aee:	4770      	bx	lr

08002af0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002af0:	7983      	ldrb	r3, [r0, #6]
 8002af2:	8880      	ldrh	r0, [r0, #4]
 8002af4:	4418      	add	r0, r3
    }
 8002af6:	b280      	uxth	r0, r0
 8002af8:	4770      	bx	lr

08002afa <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002afa:	79c0      	ldrb	r0, [r0, #7]
    }
 8002afc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002b00:	4770      	bx	lr

08002b02 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002b02:	79c0      	ldrb	r0, [r0, #7]
    }
 8002b04:	09c0      	lsrs	r0, r0, #7
 8002b06:	4770      	bx	lr

08002b08 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002b08:	4770      	bx	lr

08002b0a <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	4604      	mov	r4, r0
    }
 8002b0e:	2108      	movs	r1, #8
 8002b10:	f019 face 	bl	801c0b0 <_ZdlPvj>
 8002b14:	4620      	mov	r0, r4
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8002b18:	4770      	bx	lr

08002b1a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002b1a:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8002b1e:	6808      	ldr	r0, [r1, #0]
 8002b20:	6849      	ldr	r1, [r1, #4]
 8002b22:	c303      	stmia	r3!, {r0, r1}
    }
 8002b24:	4770      	bx	lr

08002b26 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002b26:	4770      	bx	lr

08002b28 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002b28:	4770      	bx	lr

08002b2a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002b2a:	6041      	str	r1, [r0, #4]
    }
 8002b2c:	4770      	bx	lr

08002b2e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002b2e:	4770      	bx	lr

08002b30 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002b30:	2301      	movs	r3, #1
 8002b32:	7203      	strb	r3, [r0, #8]
    }
 8002b34:	4770      	bx	lr

08002b36 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002b36:	4770      	bx	lr

08002b38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b38:	4770      	bx	lr

08002b3a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002b3a:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8002b3c:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002b3e:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8002b40:	68c2      	ldr	r2, [r0, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	1054      	asrs	r4, r2, #1
 8002b46:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002b4a:	07d2      	lsls	r2, r2, #31
 8002b4c:	bf48      	it	mi
 8002b4e:	590a      	ldrmi	r2, [r1, r4]
    }
 8002b50:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8002b54:	bf48      	it	mi
 8002b56:	58d3      	ldrmi	r3, [r2, r3]
 8002b58:	4718      	bx	r3

08002b5a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002b5a:	6843      	ldr	r3, [r0, #4]
 8002b5c:	b12b      	cbz	r3, 8002b6a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002b5e:	6883      	ldr	r3, [r0, #8]
 8002b60:	b92b      	cbnz	r3, 8002b6e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002b62:	68c0      	ldr	r0, [r0, #12]
 8002b64:	f000 0001 	and.w	r0, r0, #1
 8002b68:	4770      	bx	lr
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	4770      	bx	lr
 8002b6e:	2001      	movs	r0, #1
    }
 8002b70:	4770      	bx	lr

08002b72 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002b72:	b510      	push	{r4, lr}
 8002b74:	4604      	mov	r4, r0
 8002b76:	210c      	movs	r1, #12
 8002b78:	f019 fa9a 	bl	801c0b0 <_ZdlPvj>
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4604      	mov	r4, r0
 8002b84:	2110      	movs	r1, #16
 8002b86:	f019 fa93 	bl	801c0b0 <_ZdlPvj>
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	bd10      	pop	{r4, pc}

08002b8e <_ZN23FrontendApplicationBaseD0Ev>:
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	4604      	mov	r4, r0
 8002b92:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002b96:	f019 fa8b 	bl	801c0b0 <_ZdlPvj>
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	bd10      	pop	{r4, pc}

08002b9e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002b9e:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8002ba0:	f00d fdda 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 8002ba4:	6803      	ldr	r3, [r0, #0]
    }
 8002ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4718      	bx	r3

08002bae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002bae:	b510      	push	{r4, lr}
 8002bb0:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002bb2:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002bb6:	b158      	cbz	r0, 8002bd0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002bb8:	6803      	ldr	r3, [r0, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4798      	blx	r3
 8002bbe:	b138      	cbz	r0, 8002bd0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002bc0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8002bd0:	bd10      	pop	{r4, pc}
	...

08002bd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4617      	mov	r7, r2
 8002bda:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002bdc:	f00d fdde 	bl	801079c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002be2:	2500      	movs	r5, #0
        instance = this;
 8002be4:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002be6:	4629      	mov	r1, r5
      model(m)
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8002bea:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002bee:	4e0f      	ldr	r6, [pc, #60]	; (8002c2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002bf6:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8002bfa:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002bfe:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002c00:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002c08:	4628      	mov	r0, r5
 8002c0a:	f001 fe07 	bl	800481c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002c0e:	6833      	ldr	r3, [r6, #0]
 8002c10:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002c14:	b10a      	cbz	r2, 8002c1a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002c16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c18:	b900      	cbnz	r0, 8002c1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002c1a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002c1c:	f014 fa79 	bl	8017112 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002c20:	4620      	mov	r0, r4
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c24:	24006cb8 	.word	0x24006cb8
 8002c28:	0801dff0 	.word	0x0801dff0
 8002c2c:	24006c6c 	.word	0x24006c6c
 8002c30:	0801dfd8 	.word	0x0801dfd8

08002c34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002c36:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002c3a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002c44:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002c48:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	08002db5 	.word	0x08002db5

08002c54 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8002c56:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002c5a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002c64:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002c68:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08002f1d 	.word	0x08002f1d

08002c74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c78:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c7a:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c80:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002c82:	4614      	mov	r4, r2
 8002c84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4798      	blx	r3
 8002c8c:	f5b0 6fe2 	cmp.w	r0, #1808	; 0x710
 8002c90:	d205      	bcs.n	8002c9e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2a>
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002c94:	21a3      	movs	r1, #163	; 0xa3
 8002c96:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002c98:	4842      	ldr	r0, [pc, #264]	; (8002da4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002c9a:	f019 fb1f 	bl	801c2dc <__assert_func>
 8002c9e:	6860      	ldr	r0, [r4, #4]
 8002ca0:	6803      	ldr	r3, [r0, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4798      	blx	r3
 8002ca6:	280f      	cmp	r0, #15
 8002ca8:	d803      	bhi.n	8002cb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3e>
 8002caa:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002cac:	21a4      	movs	r1, #164	; 0xa4
 8002cae:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002cb0:	e7f2      	b.n	8002c98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002cb2:	68e0      	ldr	r0, [r4, #12]
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4798      	blx	r3
 8002cba:	280b      	cmp	r0, #11
 8002cbc:	d803      	bhi.n	8002cc6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x52>
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002cc0:	21a5      	movs	r1, #165	; 0xa5
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002cc4:	e7e8      	b.n	8002c98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    Application::getInstance()->clearAllTimerWidgets();
 8002cc6:	f00d fd47 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 8002cca:	f00d fd4b 	bl	8010764 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002cce:	f8d9 0000 	ldr.w	r0, [r9]
 8002cd2:	b110      	cbz	r0, 8002cda <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x66>
        (*currentTrans)->tearDown();
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4798      	blx	r3
    if (*currentTrans)
 8002cda:	f8d9 0000 	ldr.w	r0, [r9]
 8002cde:	b110      	cbz	r0, 8002ce6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x72>
        (*currentTrans)->~Transition();
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4798      	blx	r3
    if (*currentScreen)
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	b110      	cbz	r0, 8002cf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->tearDownScreen();
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4798      	blx	r3
    if (*currentPresenter)
 8002cf0:	f8d8 0000 	ldr.w	r0, [r8]
 8002cf4:	b110      	cbz	r0, 8002cfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->deactivate();
 8002cf6:	6803      	ldr	r3, [r0, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4798      	blx	r3
    if (*currentScreen)
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	b110      	cbz	r0, 8002d06 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x92>
        (*currentScreen)->~Screen();
 8002d00:	6803      	ldr	r3, [r0, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4798      	blx	r3
    if (*currentPresenter)
 8002d06:	f8d8 0000 	ldr.w	r0, [r8]
 8002d0a:	b110      	cbz	r0, 8002d12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9e>
        (*currentPresenter)->~Presenter();
 8002d0c:	6803      	ldr	r3, [r0, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002d12:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002d14:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	6803      	ldr	r3, [r0, #0]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	4798      	blx	r3
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002d22:	4605      	mov	r5, r0
 8002d24:	f8c0 b004 	str.w	fp, [r0, #4]
 8002d28:	6003      	str	r3, [r0, #0]
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002d30:	68a0      	ldr	r0, [r4, #8]
 8002d32:	6803      	ldr	r3, [r0, #0]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	4798      	blx	r3
 8002d38:	4606      	mov	r6, r0
 8002d3a:	f001 fed1 	bl	8004ae0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002d3e:	6860      	ldr	r0, [r4, #4]
 8002d40:	4659      	mov	r1, fp
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	4798      	blx	r3
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	f001 fdf8 	bl	8004940 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002d50:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002d54:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002d58:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002d5a:	b1e4      	cbz	r4, 8002d96 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
 8002d5c:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002d5e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002d62:	4630      	mov	r0, r6
 8002d64:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002d66:	f8c4 a008 	str.w	sl, [r4, #8]
 8002d6a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 8002d6c:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002d6e:	4798      	blx	r3
    newPresenter->activate();
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	4620      	mov	r0, r4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f00f f8da 	bl	8011f34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	4628      	mov	r0, r5
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4798      	blx	r3
    newTransition->invalidate();
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002d90:	4620      	mov	r0, r4
 8002d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002d96:	4623      	mov	r3, r4
 8002d98:	e7e1      	b.n	8002d5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xea>
 8002d9a:	bf00      	nop
 8002d9c:	0801dbac 	.word	0x0801dbac
 8002da0:	0801dc3a 	.word	0x0801dc3a
 8002da4:	0801dd3e 	.word	0x0801dd3e
 8002da8:	0801dd85 	.word	0x0801dd85
 8002dac:	0801de28 	.word	0x0801de28
 8002db0:	0801e034 	.word	0x0801e034

08002db4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002db4:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002db8:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002dba:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
 8002dc2:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
 8002dc8:	f7ff ff54 	bl	8002c74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002dcc:	b003      	add	sp, #12
 8002dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd2:	bf00      	nop
 8002dd4:	24006cac 	.word	0x24006cac
 8002dd8:	24006ca8 	.word	0x24006ca8

08002ddc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002de2:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002de4:	4699      	mov	r9, r3
 8002de6:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002de8:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002dea:	4614      	mov	r4, r2
 8002dec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4798      	blx	r3
 8002df4:	f240 6323 	movw	r3, #1571	; 0x623
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	d805      	bhi.n	8002e08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002dfe:	21a3      	movs	r1, #163	; 0xa3
 8002e00:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002e02:	4842      	ldr	r0, [pc, #264]	; (8002f0c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8002e04:	f019 fa6a 	bl	801c2dc <__assert_func>
 8002e08:	6860      	ldr	r0, [r4, #4]
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4798      	blx	r3
 8002e10:	280f      	cmp	r0, #15
 8002e12:	d803      	bhi.n	8002e1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002e16:	21a4      	movs	r1, #164	; 0xa4
 8002e18:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002e1a:	e7f2      	b.n	8002e02 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002e1c:	68e0      	ldr	r0, [r4, #12]
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4798      	blx	r3
 8002e24:	280b      	cmp	r0, #11
 8002e26:	d803      	bhi.n	8002e30 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 8002e28:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002e2a:	21a5      	movs	r1, #165	; 0xa5
 8002e2c:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002e2e:	e7e8      	b.n	8002e02 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 8002e30:	f00d fc92 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 8002e34:	f00d fc96 	bl	8010764 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002e38:	f8d9 0000 	ldr.w	r0, [r9]
 8002e3c:	b110      	cbz	r0, 8002e44 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 8002e3e:	6803      	ldr	r3, [r0, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4798      	blx	r3
    if (*currentTrans)
 8002e44:	f8d9 0000 	ldr.w	r0, [r9]
 8002e48:	b110      	cbz	r0, 8002e50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 8002e4a:	6803      	ldr	r3, [r0, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4798      	blx	r3
    if (*currentScreen)
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	b110      	cbz	r0, 8002e5a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4798      	blx	r3
    if (*currentPresenter)
 8002e5a:	f8d8 0000 	ldr.w	r0, [r8]
 8002e5e:	b110      	cbz	r0, 8002e66 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 8002e60:	6803      	ldr	r3, [r0, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4798      	blx	r3
    if (*currentScreen)
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	b110      	cbz	r0, 8002e70 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4798      	blx	r3
    if (*currentPresenter)
 8002e70:	f8d8 0000 	ldr.w	r0, [r8]
 8002e74:	b110      	cbz	r0, 8002e7c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002e7c:	68e0      	ldr	r0, [r4, #12]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	f04f 0b00 	mov.w	fp, #0
 8002e84:	6803      	ldr	r3, [r0, #0]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	4798      	blx	r3
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	f8c0 b004 	str.w	fp, [r0, #4]
 8002e92:	6003      	str	r3, [r0, #0]
 8002e94:	4659      	mov	r1, fp
 8002e96:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002e9a:	68a0      	ldr	r0, [r4, #8]
 8002e9c:	6803      	ldr	r3, [r0, #0]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	4798      	blx	r3
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	f001 ff18 	bl	8004cd8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	4659      	mov	r1, fp
 8002eac:	6803      	ldr	r3, [r0, #0]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	4798      	blx	r3
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4631      	mov	r1, r6
 8002eb6:	f001 fe9f 	bl	8004bf8 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8002eba:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8002ebe:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8002ec2:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002ec4:	b1e4      	cbz	r4, 8002f00 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 8002ec6:	1d23      	adds	r3, r4, #4
 8002ec8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002ecc:	4630      	mov	r0, r6
 8002ece:	6833      	ldr	r3, [r6, #0]
 8002ed0:	f8c4 a008 	str.w	sl, [r4, #8]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002ed8:	4798      	blx	r3
    newPresenter->activate();
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	4620      	mov	r0, r4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f00f f825 	bl	8011f34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002eea:	682b      	ldr	r3, [r5, #0]
 8002eec:	4628      	mov	r0, r5
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4798      	blx	r3
    newTransition->invalidate();
 8002ef2:	682b      	ldr	r3, [r5, #0]
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	4798      	blx	r3
}
 8002efa:	4620      	mov	r0, r4
 8002efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8002f00:	4623      	mov	r3, r4
 8002f02:	e7e1      	b.n	8002ec8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8002f04:	0801dbac 	.word	0x0801dbac
 8002f08:	0801decb 	.word	0x0801decb
 8002f0c:	0801dd3e 	.word	0x0801dd3e
 8002f10:	0801dd85 	.word	0x0801dd85
 8002f14:	0801de28 	.word	0x0801de28
 8002f18:	0801e034 	.word	0x0801e034

08002f1c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f1c:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8002f20:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f22:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x20>)
 8002f2a:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002f2e:	4804      	ldr	r0, [pc, #16]	; (8002f40 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>)
 8002f30:	f7ff ff54 	bl	8002ddc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002f34:	b003      	add	sp, #12
 8002f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f3a:	bf00      	nop
 8002f3c:	24006cac 	.word	0x24006cac
 8002f40:	24006ca8 	.word	0x24006ca8

08002f44 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002f44:	6a00      	ldr	r0, [r0, #32]
 8002f46:	4770      	bx	lr

08002f48 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002f48:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002f4a:	4770      	bx	lr

08002f4c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002f4c:	4770      	bx	lr

08002f4e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002f4e:	888b      	ldrh	r3, [r1, #4]
 8002f50:	6980      	ldr	r0, [r0, #24]
 8002f52:	0adb      	lsrs	r3, r3, #11
 8002f54:	680a      	ldr	r2, [r1, #0]
 8002f56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002f5a:	4410      	add	r0, r2
 8002f5c:	4770      	bx	lr

08002f5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002f5e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002f60:	b1c2      	cbz	r2, 8002f94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002f62:	7b13      	ldrb	r3, [r2, #12]
 8002f64:	b1b3      	cbz	r3, 8002f94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002f66:	7b54      	ldrb	r4, [r2, #13]
 8002f68:	7ad2      	ldrb	r2, [r2, #11]
 8002f6a:	0224      	lsls	r4, r4, #8
 8002f6c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002f70:	4314      	orrs	r4, r2
 8002f72:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002f74:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002f76:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002f7a:	8813      	ldrh	r3, [r2, #0]
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	d102      	bne.n	8002f86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002f80:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002f84:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002f86:	d805      	bhi.n	8002f94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002f88:	3801      	subs	r0, #1
 8002f8a:	3204      	adds	r2, #4
 8002f8c:	b280      	uxth	r0, r0
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d1f3      	bne.n	8002f7a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002f92:	e7f7      	b.n	8002f84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7f5      	b.n	8002f84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002f98 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	2128      	movs	r1, #40	; 0x28
 8002f9e:	f019 f887 	bl	801c0b0 <_ZdlPvj>
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	bd10      	pop	{r4, pc}
	...

08002fa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002fa8:	b530      	push	{r4, r5, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002fae:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8002fb2:	9506      	str	r5, [sp, #24]
 8002fb4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8002fb8:	9505      	str	r5, [sp, #20]
 8002fba:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002fbe:	9504      	str	r5, [sp, #16]
 8002fc0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002fc4:	9503      	str	r5, [sp, #12]
 8002fc6:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8002fca:	9502      	str	r5, [sp, #8]
 8002fcc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8002fd0:	9501      	str	r5, [sp, #4]
 8002fd2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8002fd6:	9500      	str	r5, [sp, #0]
 8002fd8:	f00e fbea 	bl	80117b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8002fde:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fe4:	61a3      	str	r3, [r4, #24]
 8002fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fe8:	61e3      	str	r3, [r4, #28]
 8002fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002fec:	6223      	str	r3, [r4, #32]
 8002fee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ff0:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002ff2:	b009      	add	sp, #36	; 0x24
 8002ff4:	bd30      	pop	{r4, r5, pc}
 8002ff6:	bf00      	nop
 8002ff8:	0801e058 	.word	0x0801e058

08002ffc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	4770      	bx	lr

08003000 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003000:	8081      	strh	r1, [r0, #4]
    }
 8003002:	4770      	bx	lr

08003004 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003004:	80c1      	strh	r1, [r0, #6]
    }
 8003006:	4770      	bx	lr

08003008 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003008:	8101      	strh	r1, [r0, #8]
    }
 800300a:	4770      	bx	lr

0800300c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800300c:	8141      	strh	r1, [r0, #10]
    }
 800300e:	4770      	bx	lr

08003010 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003010:	4770      	bx	lr

08003012 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8003012:	4770      	bx	lr

08003014 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8003014:	4770      	bx	lr

08003016 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8003016:	4770      	bx	lr

08003018 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003018:	4770      	bx	lr

0800301a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800301a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800301c:	88c4      	ldrh	r4, [r0, #6]
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	1b12      	subs	r2, r2, r4
 8003022:	8884      	ldrh	r4, [r0, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	1b09      	subs	r1, r1, r4
 8003028:	b212      	sxth	r2, r2
    }
 800302a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800302e:	b209      	sxth	r1, r1
 8003030:	4718      	bx	r3

08003032 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003036:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003042:	6010      	str	r0, [r2, #0]
    }
 8003044:	4770      	bx	lr

08003046 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003046:	4770      	bx	lr

08003048 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003048:	4770      	bx	lr

0800304a <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800304a:	4770      	bx	lr

0800304c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800304c:	4770      	bx	lr

0800304e <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8003050:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003054:	b11a      	cbz	r2, 800305e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003056:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800305a:	b102      	cbz	r2, 800305e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800305c:	6018      	str	r0, [r3, #0]
        }
    }
 800305e:	4770      	bx	lr

08003060 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8003060:	4770      	bx	lr

08003062 <_ZN15Screen1ViewBase14button9ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button9Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003062:	4770      	bx	lr

08003064 <_ZN15Screen1ViewBase14button8ClickedEv>:

    virtual void button8Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003064:	4770      	bx	lr

08003066 <_ZN15Screen1ViewBase19buttonSwitchClickedEv>:

    virtual void buttonSwitchClicked()
    {
        // Override and implement this function in Screen1
    }
 8003066:	4770      	bx	lr

08003068 <_ZN15Screen1ViewBase17buttonSendClickedEv>:

    virtual void buttonSendClicked()
    {
        // Override and implement this function in Screen1
    }
 8003068:	4770      	bx	lr

0800306a <_ZN15Screen1ViewBase14button0ClickedEv>:

    virtual void button0Clicked()
    {
        // Override and implement this function in Screen1
    }
 800306a:	4770      	bx	lr

0800306c <_ZN15Screen1ViewBase18buttonClearClickedEv>:

    virtual void buttonClearClicked()
    {
        // Override and implement this function in Screen1
    }
 800306c:	4770      	bx	lr

0800306e <_ZN15Screen1ViewBase14button3ClickedEv>:

    virtual void button3Clicked()
    {
        // Override and implement this function in Screen1
    }
 800306e:	4770      	bx	lr

08003070 <_ZN15Screen1ViewBase14button2ClickedEv>:

    virtual void button2Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003070:	4770      	bx	lr

08003072 <_ZN15Screen1ViewBase14button1ClickedEv>:

    virtual void button1Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003072:	4770      	bx	lr

08003074 <_ZN15Screen1ViewBase14button6ClickedEv>:

    virtual void button6Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003074:	4770      	bx	lr

08003076 <_ZN15Screen1ViewBase14button5ClickedEv>:

    virtual void button5Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003076:	4770      	bx	lr

08003078 <_ZN15Screen1ViewBase14button4ClickedEv>:

    virtual void button4Clicked()
    {
        // Override and implement this function in Screen1
    }
 8003078:	4770      	bx	lr

0800307a <_ZN15Screen1ViewBase14button7ClickedEv>:

    virtual void button7Clicked()
    {
        // Override and implement this function in Screen1
    }
 800307a:	4770      	bx	lr

0800307c <_ZN15Screen1ViewBase16buttonDotClickedEv>:

    virtual void buttonDotClicked()
    {
        // Override and implement this function in Screen1
    }
 800307c:	4770      	bx	lr

0800307e <_ZN15Screen1ViewBase17buttonFreqToggledEv>:

    virtual void buttonFreqToggled()
    {
        // Override and implement this function in Screen1
    }
 800307e:	4770      	bx	lr

08003080 <_ZN15Screen1ViewBase15buttonMIToggledEv>:

    virtual void buttonMIToggled()
    {
        // Override and implement this function in Screen1
    }
 8003080:	4770      	bx	lr

08003082 <_ZN15Screen1ViewBase18buttonPowerClickedEv>:

    virtual void buttonPowerClicked()
    {
        // Override and implement this function in Screen1
    }
 8003082:	4770      	bx	lr

08003084 <_ZN15Screen1ViewBase20button2DirectClickedEv>:

    virtual void button2DirectClicked()
    {
        // Override and implement this function in Screen1
    }
 8003084:	4770      	bx	lr

08003086 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8003086:	4770      	bx	lr

08003088 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003088:	4770      	bx	lr

0800308a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800308a:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800308c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800308e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003090:	68c2      	ldr	r2, [r0, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	1055      	asrs	r5, r2, #1
 8003096:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800309a:	07d2      	lsls	r2, r2, #31
 800309c:	bf48      	it	mi
 800309e:	5962      	ldrmi	r2, [r4, r5]
    }
 80030a0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80030a2:	bf48      	it	mi
 80030a4:	58d3      	ldrmi	r3, [r2, r3]
 80030a6:	4718      	bx	r3

080030a8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 80030a8:	6843      	ldr	r3, [r0, #4]
 80030aa:	b12b      	cbz	r3, 80030b8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80030ac:	6883      	ldr	r3, [r0, #8]
 80030ae:	b92b      	cbnz	r3, 80030bc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80030b0:	68c0      	ldr	r0, [r0, #12]
 80030b2:	f000 0001 	and.w	r0, r0, #1
 80030b6:	4770      	bx	lr
 80030b8:	4618      	mov	r0, r3
 80030ba:	4770      	bx	lr
 80030bc:	2001      	movs	r0, #1
    }
 80030be:	4770      	bx	lr

080030c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
 80030c4:	2110      	movs	r1, #16
 80030c6:	f018 fff3 	bl	801c0b0 <_ZdlPvj>
 80030ca:	4620      	mov	r0, r4
 80030cc:	bd10      	pop	{r4, pc}

080030ce <_ZN15Screen1ViewBaseD0Ev>:
    virtual ~Screen1ViewBase() {}
 80030ce:	b510      	push	{r4, lr}
 80030d0:	4604      	mov	r4, r0
 80030d2:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80030d6:	f018 ffeb 	bl	801c0b0 <_ZdlPvj>
 80030da:	4620      	mov	r0, r4
 80030dc:	bd10      	pop	{r4, pc}

080030de <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button7)
 80030de:	f100 0398 	add.w	r3, r0, #152	; 0x98
 80030e2:	4299      	cmp	r1, r3
{
 80030e4:	b510      	push	{r4, lr}
 80030e6:	4604      	mov	r4, r0
    if (&src == &button7)
 80030e8:	d104      	bne.n	80030f4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    {
        //Interaction14
        //When button7 clicked call virtual function
        //Call button7Clicked
        button7Clicked();
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        //button2DirectClicked
        //When button2Direct clicked call virtual function
        //Call button2DirectClicked
        button2DirectClicked();
    }
}
 80030ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        button2DirectClicked();
 80030f2:	4718      	bx	r3
    else if (&src == &button8)
 80030f4:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d102      	bne.n	8003102 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
        button8Clicked();
 80030fc:	6803      	ldr	r3, [r0, #0]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	e7f5      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button9)
 8003102:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8003106:	4299      	cmp	r1, r3
 8003108:	d102      	bne.n	8003110 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
        button9Clicked();
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	e7ee      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button4)
 8003110:	f500 73b8 	add.w	r3, r0, #368	; 0x170
 8003114:	4299      	cmp	r1, r3
 8003116:	d102      	bne.n	800311e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        button4Clicked();
 8003118:	6803      	ldr	r3, [r0, #0]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	e7e7      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button5)
 800311e:	f500 73dc 	add.w	r3, r0, #440	; 0x1b8
 8003122:	4299      	cmp	r1, r3
 8003124:	d102      	bne.n	800312c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4e>
        button5Clicked();
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	e7e0      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button6)
 800312c:	f500 7300 	add.w	r3, r0, #512	; 0x200
 8003130:	4299      	cmp	r1, r3
 8003132:	d102      	bne.n	800313a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5c>
        button6Clicked();
 8003134:	6803      	ldr	r3, [r0, #0]
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	e7d9      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button1)
 800313a:	f500 7312 	add.w	r3, r0, #584	; 0x248
 800313e:	4299      	cmp	r1, r3
 8003140:	d102      	bne.n	8003148 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6a>
        button1Clicked();
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	e7d2      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button2)
 8003148:	f500 7324 	add.w	r3, r0, #656	; 0x290
 800314c:	4299      	cmp	r1, r3
 800314e:	d102      	bne.n	8003156 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x78>
        button2Clicked();
 8003150:	6803      	ldr	r3, [r0, #0]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	e7cb      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button3)
 8003156:	f500 7336 	add.w	r3, r0, #728	; 0x2d8
 800315a:	4299      	cmp	r1, r3
 800315c:	d102      	bne.n	8003164 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
        button3Clicked();
 800315e:	6803      	ldr	r3, [r0, #0]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	e7c4      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &buttonClear)
 8003164:	f500 7348 	add.w	r3, r0, #800	; 0x320
 8003168:	4299      	cmp	r1, r3
 800316a:	d103      	bne.n	8003174 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
        buttonClearClicked();
 800316c:	6803      	ldr	r3, [r0, #0]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        button2DirectClicked();
 8003170:	4620      	mov	r0, r4
 8003172:	e7bc      	b.n	80030ee <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10>
    else if (&src == &button0)
 8003174:	f500 735a 	add.w	r3, r0, #872	; 0x368
 8003178:	4299      	cmp	r1, r3
 800317a:	d102      	bne.n	8003182 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        button0Clicked();
 800317c:	6803      	ldr	r3, [r0, #0]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	e7f6      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSend)
 8003182:	f500 736c 	add.w	r3, r0, #944	; 0x3b0
 8003186:	4299      	cmp	r1, r3
 8003188:	d102      	bne.n	8003190 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb2>
        buttonSendClicked();
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	e7ef      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonSwitch)
 8003190:	f500 737e 	add.w	r3, r0, #1016	; 0x3f8
 8003194:	4299      	cmp	r1, r3
 8003196:	d102      	bne.n	800319e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc0>
        buttonSwitchClicked();
 8003198:	6803      	ldr	r3, [r0, #0]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	e7e8      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonDot)
 800319e:	f200 5394 	addw	r3, r0, #1428	; 0x594
 80031a2:	4299      	cmp	r1, r3
 80031a4:	d102      	bne.n	80031ac <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xce>
        buttonDotClicked();
 80031a6:	6803      	ldr	r3, [r0, #0]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	e7e1      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonFreq)
 80031ac:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 80031b0:	4299      	cmp	r1, r3
 80031b2:	d102      	bne.n	80031ba <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        buttonFreqToggled();
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	e7da      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &toggleButtonMI)
 80031ba:	f200 6314 	addw	r3, r0, #1556	; 0x614
 80031be:	4299      	cmp	r1, r3
 80031c0:	d102      	bne.n	80031c8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xea>
        buttonMIToggled();
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c6:	e7d3      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &buttonPower)
 80031c8:	f200 634c 	addw	r3, r0, #1612	; 0x64c
 80031cc:	4299      	cmp	r1, r3
 80031ce:	d102      	bne.n	80031d6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf8>
        buttonPowerClicked();
 80031d0:	6803      	ldr	r3, [r0, #0]
 80031d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d4:	e7cc      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    else if (&src == &button2Direct)
 80031d6:	f200 63b4 	addw	r3, r0, #1716	; 0x6b4
 80031da:	4299      	cmp	r1, r3
 80031dc:	d106      	bne.n	80031ec <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10e>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80031de:	f00d fabb 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoScreen2ScreenNoTransition();
 80031e2:	f7ff fd37 	bl	8002c54 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        button2DirectClicked();
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	e7c1      	b.n	8003170 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
}
 80031ec:	bd10      	pop	{r4, pc}
	...

080031f0 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80031f2:	6002      	str	r2, [r0, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80031fa:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80031fe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003202:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320a:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	0801f9c0 	.word	0x0801f9c0

08003214 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003214:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003216:	b570      	push	{r4, r5, r6, lr}
 8003218:	4604      	mov	r4, r0
        setX(x);
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 800321c:	4615      	mov	r5, r2
        setX(x);
 800321e:	4798      	blx	r3
        setY(y);
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8003228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800322c:	4718      	bx	r3

0800322e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800322e:	b570      	push	{r4, r5, r6, lr}
 8003230:	4604      	mov	r4, r0
 8003232:	461d      	mov	r5, r3
 8003234:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003238:	f7ff ffec 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	4629      	mov	r1, r5
 8003240:	4620      	mov	r0, r4
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4798      	blx	r3
        setHeight(height);
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	4631      	mov	r1, r6
 800324a:	4620      	mov	r0, r4
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 800324e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003252:	4718      	bx	r3

08003254 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003254:	b510      	push	{r4, lr}
 8003256:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003258:	2226      	movs	r2, #38	; 0x26
 800325a:	2100      	movs	r1, #0
 800325c:	f019 f8ca 	bl	801c3f4 <memset>
class Widget : public Drawable
 8003260:	4620      	mov	r0, r4
 8003262:	f7ff ffc5 	bl	80031f0 <_ZN8touchgfx8DrawableC1Ev>
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003268:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	23ff      	movs	r3, #255	; 0xff
 800326e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8003272:	2300      	movs	r3, #0
 8003274:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8003276:	bd10      	pop	{r4, pc}
 8003278:	0801f3bc 	.word	0x0801f3bc

0800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800327c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 800327e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8003282:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 8003284:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 8003286:	4299      	cmp	r1, r3
 8003288:	d033      	beq.n	80032f2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b92b      	cbnz	r3, 800329c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003292:	21ae      	movs	r1, #174	; 0xae
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003296:	481c      	ldr	r0, [pc, #112]	; (8003308 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8003298:	f019 f820 	bl	801c2dc <__assert_func>
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 800329e:	8812      	ldrh	r2, [r2, #0]
 80032a0:	428a      	cmp	r2, r1
 80032a2:	d803      	bhi.n	80032ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 80032a6:	21af      	movs	r1, #175	; 0xaf
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 80032aa:	e7f4      	b.n	8003296 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 80032ac:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	f001 faea 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	4601      	mov	r1, r0
 80032c4:	9001      	str	r0, [sp, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	4628      	mov	r0, r5
 80032ca:	4798      	blx	r3
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	4604      	mov	r4, r0
 80032d0:	9901      	ldr	r1, [sp, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4628      	mov	r0, r5
 80032d6:	4798      	blx	r3
 80032d8:	fb14 f400 	smulbb	r4, r4, r0
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	4628      	mov	r0, r5
 80032e0:	b2e4      	uxtb	r4, r4
 80032e2:	9901      	ldr	r1, [sp, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	4798      	blx	r3
 80032e8:	4404      	add	r4, r0
 80032ea:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80032ee:	b002      	add	sp, #8
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 80032f8:	e7f9      	b.n	80032ee <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 80032fa:	bf00      	nop
 80032fc:	24006cbc 	.word	0x24006cbc
 8003300:	0801e0a8 	.word	0x0801e0a8
 8003304:	0801e0ea 	.word	0x0801e0ea
 8003308:	0801e118 	.word	0x0801e118
 800330c:	24006cc0 	.word	0x24006cc0
 8003310:	0801e15f 	.word	0x0801e15f
 8003314:	24006cc4 	.word	0x24006cc4
 8003318:	24006cc8 	.word	0x24006cc8

0800331c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003320:	2226      	movs	r2, #38	; 0x26
 8003322:	2100      	movs	r1, #0
 8003324:	f019 f866 	bl	801c3f4 <memset>
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff ff61 	bl	80031f0 <_ZN8touchgfx8DrawableC1Ev>
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 8003330:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003334:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003336:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 800333a:	62a3      	str	r3, [r4, #40]	; 0x28
 800333c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003340:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003342:	2300      	movs	r3, #0
 8003344:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8003348:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 800334a:	bd10      	pop	{r4, pc}
 800334c:	0801f314 	.word	0x0801f314
 8003350:	0801dba4 	.word	0x0801dba4

08003354 <_ZN8touchgfx12ToggleButtonC1Ev>:
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003358:	2226      	movs	r2, #38	; 0x26
 800335a:	2100      	movs	r1, #0
 800335c:	f019 f84a 	bl	801c3f4 <memset>
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff ff45 	bl	80031f0 <_ZN8touchgfx8DrawableC1Ev>
 8003366:	2300      	movs	r3, #0
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <_ZN8touchgfx12ToggleButtonC1Ev+0x38>)
 800336a:	4620      	mov	r0, r4
 800336c:	62a3      	str	r3, [r4, #40]	; 0x28
 800336e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        touchable = touch;
 8003372:	2301      	movs	r3, #1
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800337a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800337e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003380:	8623      	strh	r3, [r4, #48]	; 0x30
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003382:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8003386:	86a3      	strh	r3, [r4, #52]	; 0x34
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	0801f200 	.word	0x0801f200

08003390 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	4604      	mov	r4, r0
        : presenter(0)
 8003396:	2600      	movs	r6, #0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8003398:	4dea      	ldr	r5, [pc, #936]	; (8003744 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
 800339a:	f04f 0a08 	mov.w	sl, #8
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800339e:	f504 7b5a 	add.w	fp, r4, #872	; 0x368
 80033a2:	f04f 0909 	mov.w	r9, #9
    button7.setAction(buttonCallback);
 80033a6:	f504 68e0 	add.w	r8, r4, #1792	; 0x700
class TypedText
 80033aa:	2705      	movs	r7, #5
Screen1ViewBase::Screen1ViewBase() :
 80033ac:	ed2d 8b10 	vpush	{d8-d15}
 80033b0:	b095      	sub	sp, #84	; 0x54
 80033b2:	f00e fc13 	bl	8011bdc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80033b6:	4622      	mov	r2, r4
 80033b8:	4be3      	ldr	r3, [pc, #908]	; (8003748 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 80033ba:	63e6      	str	r6, [r4, #60]	; 0x3c
 80033bc:	f842 3b40 	str.w	r3, [r2], #64
 80033c0:	4610      	mov	r0, r2
 80033c2:	ee08 2a10 	vmov	s16, r2
 80033c6:	f7ff ff45 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 80033ca:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80033ce:	4618      	mov	r0, r3
 80033d0:	930a      	str	r3, [sp, #40]	; 0x28
 80033d2:	f7ff ff3f 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 80033d6:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80033da:	4618      	mov	r0, r3
 80033dc:	ee08 3a90 	vmov	s17, r3
 80033e0:	f00b fcc6 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033e4:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 80033e8:	4618      	mov	r0, r3
 80033ea:	ee09 3a10 	vmov	s18, r3
 80033ee:	f00b fcbf 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80033f2:	f504 7394 	add.w	r3, r4, #296	; 0x128
 80033f6:	4618      	mov	r0, r3
 80033f8:	ee09 3a90 	vmov	s19, r3
 80033fc:	f00b fcb8 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003400:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8003404:	4618      	mov	r0, r3
 8003406:	ee0a 3a10 	vmov	s20, r3
 800340a:	f00b fcb1 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800340e:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8003412:	4618      	mov	r0, r3
 8003414:	ee0a 3a90 	vmov	s21, r3
 8003418:	f00b fcaa 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800341c:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8003420:	4618      	mov	r0, r3
 8003422:	ee0b 3a10 	vmov	s22, r3
 8003426:	f00b fca3 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800342a:	f504 7312 	add.w	r3, r4, #584	; 0x248
 800342e:	4618      	mov	r0, r3
 8003430:	ee0b 3a90 	vmov	s23, r3
 8003434:	f00b fc9c 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003438:	f504 7324 	add.w	r3, r4, #656	; 0x290
 800343c:	4618      	mov	r0, r3
 800343e:	ee0c 3a10 	vmov	s24, r3
 8003442:	f00b fc95 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003446:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 800344a:	4618      	mov	r0, r3
 800344c:	ee0c 3a90 	vmov	s25, r3
 8003450:	f00b fc8e 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003454:	f504 7348 	add.w	r3, r4, #800	; 0x320
 8003458:	4618      	mov	r0, r3
 800345a:	ee0d 3a10 	vmov	s26, r3
 800345e:	f00b fc87 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003462:	4658      	mov	r0, fp
 8003464:	f00b fc84 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003468:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 800346c:	4618      	mov	r0, r3
 800346e:	ee0d 3a90 	vmov	s27, r3
 8003472:	f00b fc7d 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003476:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 800347a:	4618      	mov	r0, r3
 800347c:	ee0f 3a10 	vmov	s30, r3
 8003480:	f00b fb0a 	bl	800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003484:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003488:	4618      	mov	r0, r3
 800348a:	930b      	str	r3, [sp, #44]	; 0x2c
 800348c:	f7ff fee2 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 8003490:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 8003494:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8003498:	4618      	mov	r0, r3
 800349a:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 800349e:	f8a4 6464 	strh.w	r6, [r4, #1124]	; 0x464
 80034a2:	930c      	str	r3, [sp, #48]	; 0x30
 80034a4:	f7ff fed6 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 80034a8:	f204 439c 	addw	r3, r4, #1180	; 0x49c
 80034ac:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
 80034b0:	f8c4 6494 	str.w	r6, [r4, #1172]	; 0x494
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
 80034b4:	4618      	mov	r0, r3
 80034b6:	f8a4 6498 	strh.w	r6, [r4, #1176]	; 0x498
 80034ba:	ee0f 3a90 	vmov	s31, r3
 80034be:	4da3      	ldr	r5, [pc, #652]	; (800374c <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 80034c0:	f7ff ff2c 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 80034c4:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 80034c8:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 80034cc:	4618      	mov	r0, r3
 80034ce:	f8c4 64d8 	str.w	r6, [r4, #1240]	; 0x4d8
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	f7ff ff22 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 80034d8:	f204 531c 	addw	r3, r4, #1308	; 0x51c
 80034dc:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
 80034e0:	f8c4 6518 	str.w	r6, [r4, #1304]	; 0x518
    __background.setPosition(0, 0, 480, 272);
 80034e4:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80034e8:	4618      	mov	r0, r3
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	f7ff ff16 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 80034f0:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
 80034f4:	4618      	mov	r0, r3
 80034f6:	9305      	str	r3, [sp, #20]
 80034f8:	f7ff ff10 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 80034fc:	f204 5394 	addw	r3, r4, #1428	; 0x594
 8003500:	4618      	mov	r0, r3
 8003502:	ee0e 3a10 	vmov	s28, r3
 8003506:	f00b fc33 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800350a:	f204 53dc 	addw	r3, r4, #1500	; 0x5dc
 800350e:	4618      	mov	r0, r3
 8003510:	9306      	str	r3, [sp, #24]
 8003512:	f7ff ff1f 	bl	8003354 <_ZN8touchgfx12ToggleButtonC1Ev>
 8003516:	f204 6314 	addw	r3, r4, #1556	; 0x614
 800351a:	4618      	mov	r0, r3
 800351c:	9307      	str	r3, [sp, #28]
 800351e:	f7ff ff19 	bl	8003354 <_ZN8touchgfx12ToggleButtonC1Ev>
 8003522:	f204 634c 	addw	r3, r4, #1612	; 0x64c
 8003526:	4618      	mov	r0, r3
 8003528:	9308      	str	r3, [sp, #32]
 800352a:	f00b fab5 	bl	800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800352e:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
 8003532:	a912      	add	r1, sp, #72	; 0x48
 8003534:	ee0e 3a90 	vmov	s29, r3
 8003538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353c:	ee1e 0a90 	vmov	r0, s29
 8003540:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8003544:	f00a fb7c 	bl	800dc40 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003548:	f204 63b4 	addw	r3, r4, #1716	; 0x6b4
 800354c:	4618      	mov	r0, r3
 800354e:	9309      	str	r3, [sp, #36]	; 0x24
 8003550:	f00b faa2 	bl	800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003554:	4b7e      	ldr	r3, [pc, #504]	; (8003750 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
    __background.setPosition(0, 0, 480, 272);
 8003556:	4632      	mov	r2, r6
 8003558:	4631      	mov	r1, r6
 800355a:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
 800355e:	ee18 0a10 	vmov	r0, s16
 8003562:	4b7c      	ldr	r3, [pc, #496]	; (8003754 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8003564:	9500      	str	r5, [sp, #0]
 8003566:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
 800356a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800356e:	f8c4 4704 	str.w	r4, [r4, #1796]	; 0x704
 8003572:	f8c4 670c 	str.w	r6, [r4, #1804]	; 0x70c
 8003576:	f7ff fe5a 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 800357a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 800357e:	4632      	mov	r2, r6
 8003580:	4631      	mov	r1, r6
 8003582:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003584:	66a3      	str	r3, [r4, #104]	; 0x68
 8003586:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800358a:	9500      	str	r5, [sp, #0]
        color = col;
 800358c:	f04f 35ff 	mov.w	r5, #4294967295
 8003590:	f7ff fe4d 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 8003594:	4b70      	ldr	r3, [pc, #448]	; (8003758 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
    button7.setXY(0, 16);
 8003596:	2210      	movs	r2, #16
 8003598:	4631      	mov	r1, r6
 800359a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800359e:	ee18 0a90 	vmov	r0, s17
 80035a2:	f7ff fe37 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button7.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80035a6:	aa12      	add	r2, sp, #72	; 0x48
 80035a8:	a911      	add	r1, sp, #68	; 0x44
 80035aa:	ee18 0a90 	vmov	r0, s17
 80035ae:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80035b2:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80035b6:	f00a ff6f 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80035ba:	ee18 0a90 	vmov	r0, s17
 80035be:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
 80035c2:	f7ff fe5b 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8.setXY(60, 16);
 80035c6:	2210      	movs	r2, #16
 80035c8:	213c      	movs	r1, #60	; 0x3c
 80035ca:	ee19 0a10 	vmov	r0, s18
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80035ce:	f8c4 80c0 	str.w	r8, [r4, #192]	; 0xc0
        colorPressed = col;
 80035d2:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
 80035d6:	f7ff fe1d 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button8.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80035da:	a911      	add	r1, sp, #68	; 0x44
 80035dc:	aa12      	add	r2, sp, #72	; 0x48
 80035de:	ee19 0a10 	vmov	r0, s18
 80035e2:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80035e6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80035ea:	f00a ff55 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80035ee:	f04f 0201 	mov.w	r2, #1
        updateTextPosition();
 80035f2:	ee19 0a10 	vmov	r0, s18
 80035f6:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
 80035fa:	f7ff fe3f 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9.setXY(120, 16);
 80035fe:	2210      	movs	r2, #16
 8003600:	2178      	movs	r1, #120	; 0x78
 8003602:	ee19 0a90 	vmov	r0, s19
 8003606:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        colorPressed = col;
 800360a:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
 800360e:	f7ff fe01 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button9.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003612:	a911      	add	r1, sp, #68	; 0x44
 8003614:	aa12      	add	r2, sp, #72	; 0x48
 8003616:	ee19 0a90 	vmov	r0, s19
 800361a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800361e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003622:	f00a ff39 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003626:	f04f 0202 	mov.w	r2, #2
        updateTextPosition();
 800362a:	ee19 0a90 	vmov	r0, s19
 800362e:	f8a4 2160 	strh.w	r2, [r4, #352]	; 0x160
 8003632:	f7ff fe23 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4.setXY(0, 76);
 8003636:	224c      	movs	r2, #76	; 0x4c
 8003638:	4631      	mov	r1, r6
 800363a:	ee1a 0a10 	vmov	r0, s20
 800363e:	f8c4 8150 	str.w	r8, [r4, #336]	; 0x150
        colorPressed = col;
 8003642:	e9c4 5559 	strd	r5, r5, [r4, #356]	; 0x164
 8003646:	f7ff fde5 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button4.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800364a:	a911      	add	r1, sp, #68	; 0x44
 800364c:	aa12      	add	r2, sp, #72	; 0x48
 800364e:	ee1a 0a10 	vmov	r0, s20
 8003652:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003656:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 800365a:	f00a ff1d 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800365e:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
 8003662:	ee1a 0a10 	vmov	r0, s20
 8003666:	f8a4 21a8 	strh.w	r2, [r4, #424]	; 0x1a8
 800366a:	f7ff fe07 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5.setXY(60, 76);
 800366e:	224c      	movs	r2, #76	; 0x4c
 8003670:	213c      	movs	r1, #60	; 0x3c
 8003672:	ee1a 0a90 	vmov	r0, s21
 8003676:	f8c4 8198 	str.w	r8, [r4, #408]	; 0x198
        colorPressed = col;
 800367a:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
 800367e:	f7ff fdc9 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button5.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003682:	a911      	add	r1, sp, #68	; 0x44
 8003684:	aa12      	add	r2, sp, #72	; 0x48
 8003686:	ee1a 0a90 	vmov	r0, s21
 800368a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800368e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003692:	f00a ff01 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003696:	f04f 0204 	mov.w	r2, #4
        updateTextPosition();
 800369a:	ee1a 0a90 	vmov	r0, s21
 800369e:	f8a4 21f0 	strh.w	r2, [r4, #496]	; 0x1f0
 80036a2:	f7ff fdeb 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6.setXY(120, 76);
 80036a6:	224c      	movs	r2, #76	; 0x4c
 80036a8:	2178      	movs	r1, #120	; 0x78
 80036aa:	ee1b 0a10 	vmov	r0, s22
 80036ae:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
        colorPressed = col;
 80036b2:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
 80036b6:	f7ff fdad 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button6.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80036ba:	aa12      	add	r2, sp, #72	; 0x48
 80036bc:	a911      	add	r1, sp, #68	; 0x44
 80036be:	ee1b 0a10 	vmov	r0, s22
 80036c2:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036c6:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036ca:	f00a fee5 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80036ce:	ee1b 0a10 	vmov	r0, s22
 80036d2:	f8a4 7238 	strh.w	r7, [r4, #568]	; 0x238
 80036d6:	f7ff fdd1 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1.setXY(0, 136);
 80036da:	2288      	movs	r2, #136	; 0x88
 80036dc:	4631      	mov	r1, r6
 80036de:	ee1b 0a90 	vmov	r0, s23
 80036e2:	f8c4 8228 	str.w	r8, [r4, #552]	; 0x228
        colorPressed = col;
 80036e6:	e9c4 558f 	strd	r5, r5, [r4, #572]	; 0x23c
 80036ea:	f7ff fd93 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80036ee:	a911      	add	r1, sp, #68	; 0x44
 80036f0:	aa12      	add	r2, sp, #72	; 0x48
 80036f2:	ee1b 0a90 	vmov	r0, s23
 80036f6:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80036fa:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80036fe:	f00a fecb 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003702:	f04f 0206 	mov.w	r2, #6
        updateTextPosition();
 8003706:	ee1b 0a90 	vmov	r0, s23
 800370a:	f8a4 2280 	strh.w	r2, [r4, #640]	; 0x280
 800370e:	f7ff fdb5 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2.setXY(60, 136);
 8003712:	2288      	movs	r2, #136	; 0x88
 8003714:	213c      	movs	r1, #60	; 0x3c
 8003716:	ee1c 0a10 	vmov	r0, s24
 800371a:	f8c4 8270 	str.w	r8, [r4, #624]	; 0x270
        colorPressed = col;
 800371e:	e9c4 55a1 	strd	r5, r5, [r4, #644]	; 0x284
 8003722:	f7ff fd77 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003726:	a911      	add	r1, sp, #68	; 0x44
 8003728:	aa12      	add	r2, sp, #72	; 0x48
 800372a:	ee1c 0a10 	vmov	r0, s24
 800372e:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003732:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003736:	f00a feaf 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800373a:	f04f 0207 	mov.w	r2, #7
        updateTextPosition();
 800373e:	ee1c 0a10 	vmov	r0, s24
 8003742:	e00b      	b.n	800375c <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8003744:	0801f4fc 	.word	0x0801f4fc
 8003748:	0801e1d4 	.word	0x0801e1d4
 800374c:	0801f454 	.word	0x0801f454
 8003750:	0801e1bc 	.word	0x0801e1bc
 8003754:	080030df 	.word	0x080030df
 8003758:	ff570e0e 	.word	0xff570e0e
 800375c:	f8a4 22c8 	strh.w	r2, [r4, #712]	; 0x2c8
 8003760:	f7ff fd8c 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3.setXY(120, 136);
 8003764:	2288      	movs	r2, #136	; 0x88
 8003766:	2178      	movs	r1, #120	; 0x78
 8003768:	ee1c 0a90 	vmov	r0, s25
 800376c:	f8c4 82b8 	str.w	r8, [r4, #696]	; 0x2b8
        colorPressed = col;
 8003770:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 8003774:	f7ff fd4e 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003778:	aa12      	add	r2, sp, #72	; 0x48
 800377a:	a911      	add	r1, sp, #68	; 0x44
 800377c:	ee1c 0a90 	vmov	r0, s25
 8003780:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003784:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003788:	f00a fe86 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800378c:	ee1c 0a90 	vmov	r0, s25
 8003790:	f8a4 a310 	strh.w	sl, [r4, #784]	; 0x310
 8003794:	f7ff fd72 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear.setXY(0, 196);
 8003798:	22c4      	movs	r2, #196	; 0xc4
 800379a:	4631      	mov	r1, r6
 800379c:	ee1d 0a10 	vmov	r0, s26
 80037a0:	f8c4 8300 	str.w	r8, [r4, #768]	; 0x300
        colorPressed = col;
 80037a4:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 80037a8:	f7ff fd34 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037ac:	aa12      	add	r2, sp, #72	; 0x48
 80037ae:	a911      	add	r1, sp, #68	; 0x44
 80037b0:	ee1d 0a10 	vmov	r0, s26
 80037b4:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80037b8:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80037bc:	f00a fe6c 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80037c0:	ee1d 0a10 	vmov	r0, s26
 80037c4:	f8a4 9358 	strh.w	r9, [r4, #856]	; 0x358
 80037c8:	f7ff fd58 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0.setXY(60, 196);
 80037cc:	22c4      	movs	r2, #196	; 0xc4
 80037ce:	213c      	movs	r1, #60	; 0x3c
 80037d0:	4658      	mov	r0, fp
 80037d2:	f8c4 8348 	str.w	r8, [r4, #840]	; 0x348
        colorPressed = col;
 80037d6:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
 80037da:	f7ff fd1b 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80037de:	a911      	add	r1, sp, #68	; 0x44
 80037e0:	aa12      	add	r2, sp, #72	; 0x48
 80037e2:	4658      	mov	r0, fp
 80037e4:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 80037e8:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 80037ec:	f00a fe54 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80037f0:	f04f 020a 	mov.w	r2, #10
        updateTextPosition();
 80037f4:	4658      	mov	r0, fp
 80037f6:	f8a4 23a0 	strh.w	r2, [r4, #928]	; 0x3a0
 80037fa:	f7ff fd3f 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend.setXY(120, 196);
 80037fe:	22c4      	movs	r2, #196	; 0xc4
 8003800:	2178      	movs	r1, #120	; 0x78
 8003802:	ee1d 0a90 	vmov	r0, s27
 8003806:	f8c4 8390 	str.w	r8, [r4, #912]	; 0x390
        colorPressed = col;
 800380a:	e9c4 55e9 	strd	r5, r5, [r4, #932]	; 0x3a4
 800380e:	f7ff fd01 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003812:	a911      	add	r1, sp, #68	; 0x44
 8003814:	aa12      	add	r2, sp, #72	; 0x48
 8003816:	ee1d 0a90 	vmov	r0, s27
 800381a:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 800381e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003822:	f00a fe39 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003826:	f04f 020b 	mov.w	r2, #11
        updateTextPosition();
 800382a:	ee1d 0a90 	vmov	r0, s27
 800382e:	f8a4 23e8 	strh.w	r2, [r4, #1000]	; 0x3e8
 8003832:	f7ff fd23 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSwitch.setXY(180, 196);
 8003836:	22c4      	movs	r2, #196	; 0xc4
 8003838:	21b4      	movs	r1, #180	; 0xb4
 800383a:	ee1f 0a10 	vmov	r0, s30
 800383e:	f8c4 83d8 	str.w	r8, [r4, #984]	; 0x3d8
        colorPressed = col;
 8003842:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 8003846:	f7ff fce5 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSwitch.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
 800384a:	aa12      	add	r2, sp, #72	; 0x48
 800384c:	a90f      	add	r1, sp, #60	; 0x3c
 800384e:	ee1f 0a10 	vmov	r0, s30
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	aa11      	add	r2, sp, #68	; 0x44
 8003856:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
 800385a:	4613      	mov	r3, r2
 800385c:	aa10      	add	r2, sp, #64	; 0x40
 800385e:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8003862:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003866:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800386a:	f00b f872 	bl	800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 800386e:	f04f 020f 	mov.w	r2, #15
    boxWithBorder1_1.setPosition(247, 5, 121, 82);
 8003872:	2379      	movs	r3, #121	; 0x79
 8003874:	21f7      	movs	r1, #247	; 0xf7
 8003876:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003878:	f8a4 2430 	strh.w	r2, [r4, #1072]	; 0x430
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 800387c:	f04f 0210 	mov.w	r2, #16
 8003880:	f8c4 8420 	str.w	r8, [r4, #1056]	; 0x420
 8003884:	f8a4 2432 	strh.w	r2, [r4, #1074]	; 0x432
 8003888:	2252      	movs	r2, #82	; 0x52
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	463a      	mov	r2, r7
 800388e:	f7ff fcce 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
 8003892:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <_ZN15Screen1ViewBaseC1Ev+0x578>)
    boxWithBorder1.setPosition(372, 5, 100, 82);
 8003898:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800389c:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 80038a0:	2252      	movs	r2, #82	; 0x52
 80038a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038a4:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
 80038a8:	2364      	movs	r3, #100	; 0x64
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80038aa:	f8a4 7464 	strh.w	r7, [r4, #1124]	; 0x464
 80038ae:	9200      	str	r2, [sp, #0]
 80038b0:	463a      	mov	r2, r7
 80038b2:	f7ff fcbc 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <_ZN15Screen1ViewBaseC1Ev+0x578>)
 80038b8:	f8a4 7498 	strh.w	r7, [r4, #1176]	; 0x498
    textAreaFreq.setPosition(255, 40, 104, 35);
 80038bc:	2228      	movs	r2, #40	; 0x28
 80038be:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
        borderColor = color;
 80038c2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80038c6:	21ff      	movs	r1, #255	; 0xff
 80038c8:	ee1f 0a90 	vmov	r0, s31
 80038cc:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 80038d0:	2323      	movs	r3, #35	; 0x23
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 80038d2:	f504 67de 	add.w	r7, r4, #1776	; 0x6f0
    textAreaFreq.setPosition(255, 40, 104, 35);
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2368      	movs	r3, #104	; 0x68
 80038da:	f7ff fca8 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <_ZN15Screen1ViewBaseC1Ev+0x57c>)
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80038e0:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
 80038e4:	681b      	ldr	r3, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80038e6:	f8a4 64d0 	strh.w	r6, [r4, #1232]	; 0x4d0
 80038ea:	b92b      	cbnz	r3, 80038f8 <_ZN15Screen1ViewBaseC1Ev+0x568>
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_ZN15Screen1ViewBaseC1Ev+0x580>)
 80038ee:	21ae      	movs	r1, #174	; 0xae
 80038f0:	4a08      	ldr	r2, [pc, #32]	; (8003914 <_ZN15Screen1ViewBaseC1Ev+0x584>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80038f2:	4809      	ldr	r0, [pc, #36]	; (8003918 <_ZN15Screen1ViewBaseC1Ev+0x588>)
 80038f4:	f018 fcf2 	bl	801c2dc <__assert_func>
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <_ZN15Screen1ViewBaseC1Ev+0x58c>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d811      	bhi.n	8003924 <_ZN15Screen1ViewBaseC1Ev+0x594>
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <_ZN15Screen1ViewBaseC1Ev+0x590>)
 8003902:	21af      	movs	r1, #175	; 0xaf
 8003904:	4a03      	ldr	r2, [pc, #12]	; (8003914 <_ZN15Screen1ViewBaseC1Ev+0x584>)
 8003906:	e7f4      	b.n	80038f2 <_ZN15Screen1ViewBaseC1Ev+0x562>
 8003908:	ff570e0e 	.word	0xff570e0e
 800390c:	24006cbc 	.word	0x24006cbc
 8003910:	0801e0a8 	.word	0x0801e0a8
 8003914:	0801e0ea 	.word	0x0801e0ea
 8003918:	0801e118 	.word	0x0801e118
 800391c:	24006cc0 	.word	0x24006cc0
 8003920:	0801e15f 	.word	0x0801e15f
        return texts->getText(typedTextId);
 8003924:	4bc8      	ldr	r3, [pc, #800]	; (8003c48 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8003926:	2110      	movs	r1, #16
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	f000 ffb3 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaFreqBuffer, TEXTAREAFREQ_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8CQK).getText());
 800392e:	4ac7      	ldr	r2, [pc, #796]	; (8003c4c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 8003930:	4603      	mov	r3, r0
 8003932:	2103      	movs	r1, #3
 8003934:	4638      	mov	r0, r7
 8003936:	f00f fe25 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800393a:	230e      	movs	r3, #14
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
 800393c:	f8c4 74d8 	str.w	r7, [r4, #1240]	; 0x4d8
    textAreaFreq.setTypedText(touchgfx::TypedText(T_FREQ));
 8003940:	a912      	add	r1, sp, #72	; 0x48
 8003942:	4fc3      	ldr	r7, [pc, #780]	; (8003c50 <_ZN15Screen1ViewBaseC1Ev+0x8c0>)
 8003944:	ee1f 0a90 	vmov	r0, s31
 8003948:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800394c:	9712      	str	r7, [sp, #72]	; 0x48
 800394e:	f00a fd63 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreaMI.setPosition(380, 46, 84, 31);
 8003952:	231f      	movs	r3, #31
 8003954:	222e      	movs	r2, #46	; 0x2e
 8003956:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800395a:	9803      	ldr	r0, [sp, #12]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2354      	movs	r3, #84	; 0x54
 8003960:	f7ff fc65 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
    Unicode::snprintf(textAreaMIBuffer, TEXTAREAMI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LXQE).getText());
 8003964:	f204 62f6 	addw	r2, r4, #1782	; 0x6f6
        this->color = color;
 8003968:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 800396c:	920d      	str	r2, [sp, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800396e:	4ab9      	ldr	r2, [pc, #740]	; (8003c54 <_ZN15Screen1ViewBaseC1Ev+0x8c4>)
        linespace = space;
 8003970:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0b8      	beq.n	80038ec <_ZN15Screen1ViewBaseC1Ev+0x55c>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800397a:	4ab7      	ldr	r2, [pc, #732]	; (8003c58 <_ZN15Screen1ViewBaseC1Ev+0x8c8>)
 800397c:	8813      	ldrh	r3, [r2, #0]
 800397e:	2b11      	cmp	r3, #17
 8003980:	d9be      	bls.n	8003900 <_ZN15Screen1ViewBaseC1Ev+0x570>
        return texts->getText(typedTextId);
 8003982:	4bb1      	ldr	r3, [pc, #708]	; (8003c48 <_ZN15Screen1ViewBaseC1Ev+0x8b8>)
 8003984:	2111      	movs	r1, #17
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	f000 ff84 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800398c:	4aaf      	ldr	r2, [pc, #700]	; (8003c4c <_ZN15Screen1ViewBaseC1Ev+0x8bc>)
 800398e:	4603      	mov	r3, r0
 8003990:	2104      	movs	r1, #4
 8003992:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003994:	f00f fdf6 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    textAreaMI.setTypedText(touchgfx::TypedText(T_MI));
 800399a:	a912      	add	r1, sp, #72	; 0x48
 800399c:	9803      	ldr	r0, [sp, #12]
 800399e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
        : typedTextId(id)
 80039a2:	f04f 030f 	mov.w	r3, #15
 80039a6:	9712      	str	r7, [sp, #72]	; 0x48
 80039a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039ac:	f00a fd34 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(402, 15);
 80039b0:	220f      	movs	r2, #15
 80039b2:	9804      	ldr	r0, [sp, #16]
 80039b4:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80039b8:	f7ff fc2c 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 80039bc:	230c      	movs	r3, #12
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IO59));
 80039be:	a912      	add	r1, sp, #72	; 0x48
 80039c0:	9804      	ldr	r0, [sp, #16]
        this->color = color;
 80039c2:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
        linespace = space;
 80039c6:	f8a4 6550 	strh.w	r6, [r4, #1360]	; 0x550
 80039ca:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039ce:	9712      	str	r7, [sp, #72]	; 0x48
 80039d0:	f00a fd22 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2_1.setXY(255, 15);
 80039d4:	220f      	movs	r2, #15
 80039d6:	9805      	ldr	r0, [sp, #20]
 80039d8:	21ff      	movs	r1, #255	; 0xff
 80039da:	f7ff fc1b 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 80039de:	230d      	movs	r3, #13
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3GJ));
 80039e0:	a912      	add	r1, sp, #72	; 0x48
 80039e2:	9805      	ldr	r0, [sp, #20]
        this->color = color;
 80039e4:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
        linespace = space;
 80039e8:	f8a4 658c 	strh.w	r6, [r4, #1420]	; 0x58c
 80039ec:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039f0:	9712      	str	r7, [sp, #72]	; 0x48
 80039f2:	f00a fd11 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonDot.setXY(180, 136);
 80039f6:	ee1e 0a10 	vmov	r0, s28
 80039fa:	2288      	movs	r2, #136	; 0x88
 80039fc:	21b4      	movs	r1, #180	; 0xb4
 80039fe:	f04f 0706 	mov.w	r7, #6
 8003a02:	f7ff fc07 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDot.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003a06:	aa12      	add	r2, sp, #72	; 0x48
 8003a08:	a911      	add	r1, sp, #68	; 0x44
 8003a0a:	ee1e 0a10 	vmov	r0, s28
 8003a0e:	f8ad a044 	strh.w	sl, [sp, #68]	; 0x44
 8003a12:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
 8003a16:	f00a fd3f 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003a1a:	2312      	movs	r3, #18
        updateTextPosition();
 8003a1c:	ee1e 0a10 	vmov	r0, s28
 8003a20:	f8a4 35cc 	strh.w	r3, [r4, #1484]	; 0x5cc
 8003a24:	f7ff fc2a 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8003a28:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
        colorPressed = col;
 8003a2c:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 8003a30:	f04f 0507 	mov.w	r5, #7
    toggleButtonFreq.setXY(259, 98);
 8003a34:	9806      	ldr	r0, [sp, #24]
 8003a36:	2262      	movs	r2, #98	; 0x62
 8003a38:	f240 1103 	movw	r1, #259	; 0x103
 8003a3c:	f8c4 85bc 	str.w	r8, [r4, #1468]	; 0x5bc
 8003a40:	f7ff fbe8 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a44:	aa12      	add	r2, sp, #72	; 0x48
 8003a46:	a911      	add	r1, sp, #68	; 0x44
 8003a48:	9806      	ldr	r0, [sp, #24]
        originalPressed = bitmapPressed;
 8003a4a:	f8a4 5610 	strh.w	r5, [r4, #1552]	; 0x610
 8003a4e:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 8003a52:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a56:	f00a fd1f 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButtonMI.setXY(374, 98);
 8003a5a:	9807      	ldr	r0, [sp, #28]
 8003a5c:	2262      	movs	r2, #98	; 0x62
 8003a5e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8003a62:	f8c4 8604 	str.w	r8, [r4, #1540]	; 0x604
 8003a66:	f7ff fbd5 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 8003a6a:	aa12      	add	r2, sp, #72	; 0x48
 8003a6c:	a911      	add	r1, sp, #68	; 0x44
 8003a6e:	9807      	ldr	r0, [sp, #28]
        originalPressed = bitmapPressed;
 8003a70:	f8a4 5648 	strh.w	r5, [r4, #1608]	; 0x648
 8003a74:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003a78:	1d25      	adds	r5, r4, #4
 8003a7a:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003a7e:	f00a fd0b 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonPower.setXY(244, 202);
 8003a82:	9808      	ldr	r0, [sp, #32]
 8003a84:	22ca      	movs	r2, #202	; 0xca
 8003a86:	21f4      	movs	r1, #244	; 0xf4
 8003a88:	f8c4 863c 	str.w	r8, [r4, #1596]	; 0x63c
 8003a8c:	f7ff fbc2 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 8003a90:	f04f 020a 	mov.w	r2, #10
    buttonPower.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 8003a94:	ab12      	add	r3, sp, #72	; 0x48
 8003a96:	a90f      	add	r1, sp, #60	; 0x3c
 8003a98:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8003a9c:	f04f 020b 	mov.w	r2, #11
 8003aa0:	9808      	ldr	r0, [sp, #32]
 8003aa2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8003aa6:	f04f 0204 	mov.w	r2, #4
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003ab0:	f04f 0201 	mov.w	r2, #1
 8003ab4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003ab8:	aa11      	add	r2, sp, #68	; 0x44
 8003aba:	4613      	mov	r3, r2
 8003abc:	aa10      	add	r2, sp, #64	; 0x40
 8003abe:	f00a ff48 	bl	800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003ac2:	2347      	movs	r3, #71	; 0x47
        iconY = y;
 8003ac4:	f04f 0210 	mov.w	r2, #16
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 8003ac8:	a912      	add	r1, sp, #72	; 0x48
 8003aca:	ee1e 0a90 	vmov	r0, s29
        iconX = x;
 8003ace:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
        iconY = y;
 8003ad2:	f8a4 2686 	strh.w	r2, [r4, #1670]	; 0x686
 8003ad6:	f8c4 8674 	str.w	r8, [r4, #1652]	; 0x674
 8003ada:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8003ade:	f00b f802 	bl	800eae6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(241, 9, 2, 250);
 8003ae2:	23fa      	movs	r3, #250	; 0xfa
 8003ae4:	464a      	mov	r2, r9
 8003ae6:	ee1e 0a90 	vmov	r0, s29
 8003aea:	21f1      	movs	r1, #241	; 0xf1
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2302      	movs	r3, #2
 8003af0:	f7ff fb9d 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003af4:	4631      	mov	r1, r6
 8003af6:	ee1e 0a90 	vmov	r0, s29
 8003afa:	f00a f868 	bl	800dbce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    button2Direct.setXY(416, 202);
 8003afe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b00:	22ca      	movs	r2, #202	; 0xca
 8003b02:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003b06:	f7ff fb85 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 8003b0a:	f04f 0203 	mov.w	r2, #3
    button2Direct.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
 8003b0e:	ab12      	add	r3, sp, #72	; 0x48
 8003b10:	a90f      	add	r1, sp, #60	; 0x3c
 8003b12:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8003b16:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8003b1a:	aa11      	add	r2, sp, #68	; 0x44
 8003b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	aa10      	add	r2, sp, #64	; 0x40
 8003b24:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
 8003b28:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 8003b2c:	f00a ff11 	bl	800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 8003b30:	2316      	movs	r3, #22
 8003b32:	ee18 1a10 	vmov	r1, s16
 8003b36:	4628      	mov	r0, r5
 8003b38:	f8c4 86dc 	str.w	r8, [r4, #1756]	; 0x6dc
 8003b3c:	f8a4 36ec 	strh.w	r3, [r4, #1772]	; 0x6ec
        iconY = y;
 8003b40:	f04f 030f 	mov.w	r3, #15
 8003b44:	f8a4 36ee 	strh.w	r3, [r4, #1774]	; 0x6ee
 8003b48:	f008 fdb4 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b4e:	4628      	mov	r0, r5
 8003b50:	f008 fdb0 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b54:	ee18 1a90 	vmov	r1, s17
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f008 fdab 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b5e:	ee19 1a10 	vmov	r1, s18
 8003b62:	4628      	mov	r0, r5
 8003b64:	f008 fda6 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b68:	ee19 1a90 	vmov	r1, s19
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f008 fda1 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b72:	ee1a 1a10 	vmov	r1, s20
 8003b76:	4628      	mov	r0, r5
 8003b78:	f008 fd9c 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b7c:	ee1a 1a90 	vmov	r1, s21
 8003b80:	4628      	mov	r0, r5
 8003b82:	f008 fd97 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b86:	ee1b 1a10 	vmov	r1, s22
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f008 fd92 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b90:	ee1b 1a90 	vmov	r1, s23
 8003b94:	4628      	mov	r0, r5
 8003b96:	f008 fd8d 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b9a:	ee1c 1a10 	vmov	r1, s24
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f008 fd88 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ba4:	ee1c 1a90 	vmov	r1, s25
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f008 fd83 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bae:	ee1d 1a10 	vmov	r1, s26
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f008 fd7e 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bb8:	4659      	mov	r1, fp
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f008 fd7a 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bc0:	ee1d 1a90 	vmov	r1, s27
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f008 fd75 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bca:	ee1f 1a10 	vmov	r1, s30
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f008 fd70 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f008 fd6c 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bde:	4628      	mov	r0, r5
 8003be0:	f008 fd68 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003be4:	ee1f 1a90 	vmov	r1, s31
 8003be8:	4628      	mov	r0, r5
 8003bea:	f008 fd63 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bee:	9903      	ldr	r1, [sp, #12]
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f008 fd5f 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bf6:	9904      	ldr	r1, [sp, #16]
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f008 fd5b 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bfe:	9905      	ldr	r1, [sp, #20]
 8003c00:	4628      	mov	r0, r5
 8003c02:	f008 fd57 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c06:	ee1e 1a10 	vmov	r1, s28
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f008 fd52 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c10:	9906      	ldr	r1, [sp, #24]
 8003c12:	4628      	mov	r0, r5
 8003c14:	f008 fd4e 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c18:	9907      	ldr	r1, [sp, #28]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f008 fd4a 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c20:	9908      	ldr	r1, [sp, #32]
 8003c22:	4628      	mov	r0, r5
 8003c24:	f008 fd46 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c28:	ee1e 1a90 	vmov	r1, s29
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f008 fd41 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c32:	4628      	mov	r0, r5
 8003c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c36:	f008 fd3d 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	b015      	add	sp, #84	; 0x54
 8003c3e:	ecbd 8b10 	vpop	{d8-d15}
 8003c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	24006cc8 	.word	0x24006cc8
 8003c4c:	0801e1b1 	.word	0x0801e1b1
 8003c50:	0801dba4 	.word	0x0801dba4
 8003c54:	24006cbc 	.word	0x24006cbc
 8003c58:	24006cc0 	.word	0x24006cc0

08003c5c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8003c5c:	4770      	bx	lr

08003c5e <_ZN15Screen2ViewBase17button7_p2ClickedEv>:
     * Virtual Action Handlers
     */
    virtual void button7_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c5e:	4770      	bx	lr

08003c60 <_ZN15Screen2ViewBase17button8_p2ClickedEv>:

    virtual void button8_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c60:	4770      	bx	lr

08003c62 <_ZN15Screen2ViewBase17button9_p2ClickedEv>:

    virtual void button9_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c62:	4770      	bx	lr

08003c64 <_ZN15Screen2ViewBase17button4_p2ClickedEv>:

    virtual void button4_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c64:	4770      	bx	lr

08003c66 <_ZN15Screen2ViewBase17button5_p2ClickedEv>:

    virtual void button5_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c66:	4770      	bx	lr

08003c68 <_ZN15Screen2ViewBase17button6_p2ClickedEv>:

    virtual void button6_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c68:	4770      	bx	lr

08003c6a <_ZN15Screen2ViewBase17button1_p2ClickedEv>:

    virtual void button1_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c6a:	4770      	bx	lr

08003c6c <_ZN15Screen2ViewBase17button2_p2ClickedEv>:

    virtual void button2_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c6c:	4770      	bx	lr

08003c6e <_ZN15Screen2ViewBase17button3_p2ClickedEv>:

    virtual void button3_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c6e:	4770      	bx	lr

08003c70 <_ZN15Screen2ViewBase21buttonClear_p2ClickedEv>:

    virtual void buttonClear_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c70:	4770      	bx	lr

08003c72 <_ZN15Screen2ViewBase17button0_p2ClickedEv>:

    virtual void button0_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c72:	4770      	bx	lr

08003c74 <_ZN15Screen2ViewBase20buttonSend_p2ClickedEv>:

    virtual void buttonSend_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c74:	4770      	bx	lr

08003c76 <_ZN15Screen2ViewBase21buttonPower_p2ClickedEv>:

    virtual void buttonPower_p2Clicked()
    {
        // Override and implement this function in Screen2
    }
 8003c76:	4770      	bx	lr

08003c78 <_ZN15Screen2ViewBase20button2ManualClickedEv>:

    virtual void button2ManualClicked()
    {
        // Override and implement this function in Screen2
    }
 8003c78:	4770      	bx	lr

08003c7a <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8003c7a:	4770      	bx	lr

08003c7c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003c7c:	4770      	bx	lr

08003c7e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003c7e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003c80:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003c82:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003c84:	68c2      	ldr	r2, [r0, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	1055      	asrs	r5, r2, #1
 8003c8a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003c8e:	07d2      	lsls	r2, r2, #31
 8003c90:	bf48      	it	mi
 8003c92:	5962      	ldrmi	r2, [r4, r5]
    }
 8003c94:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003c96:	bf48      	it	mi
 8003c98:	58d3      	ldrmi	r3, [r2, r3]
 8003c9a:	4718      	bx	r3

08003c9c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003c9c:	6843      	ldr	r3, [r0, #4]
 8003c9e:	b12b      	cbz	r3, 8003cac <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003ca0:	6883      	ldr	r3, [r0, #8]
 8003ca2:	b92b      	cbnz	r3, 8003cb0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003ca4:	68c0      	ldr	r0, [r0, #12]
 8003ca6:	f000 0001 	and.w	r0, r0, #1
 8003caa:	4770      	bx	lr
 8003cac:	4618      	mov	r0, r3
 8003cae:	4770      	bx	lr
 8003cb0:	2001      	movs	r0, #1
    }
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	2110      	movs	r1, #16
 8003cba:	f018 f9f9 	bl	801c0b0 <_ZdlPvj>
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <_ZN15Screen2ViewBaseD0Ev>:
    virtual ~Screen2ViewBase() {}
 8003cc2:	b510      	push	{r4, lr}
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003cca:	f018 f9f1 	bl	801c0b0 <_ZdlPvj>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button2Manual_p2)
 8003cd2:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8003cd6:	4299      	cmp	r1, r3
{
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	4604      	mov	r4, r0
    if (&src == &button2Manual_p2)
 8003cdc:	d107      	bne.n	8003cee <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003cde:	f00c fd3b 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When button2Manual_p2 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8003ce2:	f7fe ffa7 	bl	8002c34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

        //button2ManualClicked
        //When button2Manual_p2 clicked call virtual function
        //Call button2ManualClicked
        button2ManualClicked();
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    else if (&src == &buttonPower_p2)
    {
        //buttonPower_p2Clicked
        //When buttonPower_p2 clicked call virtual function
        //Call buttonPower_p2Clicked
        buttonPower_p2Clicked();
 8003cea:	4620      	mov	r0, r4
 8003cec:	e005      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button7_p2)
 8003cee:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 8003cf2:	4299      	cmp	r1, r3
 8003cf4:	d104      	bne.n	8003d00 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
        button7_p2Clicked();
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 8003cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonPower_p2Clicked();
 8003cfe:	4718      	bx	r3
    else if (&src == &button8_p2)
 8003d00:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d102      	bne.n	8003d0e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        button8_p2Clicked();
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	e7f5      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button9_p2)
 8003d0e:	f500 73b2 	add.w	r3, r0, #356	; 0x164
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d102      	bne.n	8003d1c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4a>
        button9_p2Clicked();
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	e7ee      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button4_p2)
 8003d1c:	f500 73d6 	add.w	r3, r0, #428	; 0x1ac
 8003d20:	4299      	cmp	r1, r3
 8003d22:	d102      	bne.n	8003d2a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        button4_p2Clicked();
 8003d24:	6803      	ldr	r3, [r0, #0]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	e7e7      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button5_p2)
 8003d2a:	f500 73fa 	add.w	r3, r0, #500	; 0x1f4
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d102      	bne.n	8003d38 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
        button5_p2Clicked();
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	e7e0      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button6_p2)
 8003d38:	f500 730f 	add.w	r3, r0, #572	; 0x23c
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d102      	bne.n	8003d46 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
        button6_p2Clicked();
 8003d40:	6803      	ldr	r3, [r0, #0]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	e7d9      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button1_p2)
 8003d46:	f500 7321 	add.w	r3, r0, #644	; 0x284
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	d102      	bne.n	8003d54 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x82>
        button1_p2Clicked();
 8003d4e:	6803      	ldr	r3, [r0, #0]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	e7d2      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button2_p2)
 8003d54:	f500 7333 	add.w	r3, r0, #716	; 0x2cc
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d102      	bne.n	8003d62 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x90>
        button2_p2Clicked();
 8003d5c:	6803      	ldr	r3, [r0, #0]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d60:	e7cb      	b.n	8003cfa <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x28>
    else if (&src == &button3_p2)
 8003d62:	f500 7345 	add.w	r3, r0, #788	; 0x314
 8003d66:	4299      	cmp	r1, r3
 8003d68:	d102      	bne.n	8003d70 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
        button3_p2Clicked();
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	e7bc      	b.n	8003cea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonClear_p2)
 8003d70:	f500 7357 	add.w	r3, r0, #860	; 0x35c
 8003d74:	4299      	cmp	r1, r3
 8003d76:	d102      	bne.n	8003d7e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
        buttonClear_p2Clicked();
 8003d78:	6803      	ldr	r3, [r0, #0]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	e7b5      	b.n	8003cea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &button0_p2)
 8003d7e:	f500 7369 	add.w	r3, r0, #932	; 0x3a4
 8003d82:	4299      	cmp	r1, r3
 8003d84:	d102      	bne.n	8003d8c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xba>
        button0_p2Clicked();
 8003d86:	6803      	ldr	r3, [r0, #0]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	e7ae      	b.n	8003cea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonSend_p2)
 8003d8c:	f500 737b 	add.w	r3, r0, #1004	; 0x3ec
 8003d90:	4299      	cmp	r1, r3
 8003d92:	d102      	bne.n	8003d9a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
        buttonSend_p2Clicked();
 8003d94:	6803      	ldr	r3, [r0, #0]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	e7a7      	b.n	8003cea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonPower_p2)
 8003d9a:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
 8003d9e:	4299      	cmp	r1, r3
 8003da0:	d102      	bne.n	8003da8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        buttonPower_p2Clicked();
 8003da2:	6803      	ldr	r3, [r0, #0]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	e7a0      	b.n	8003cea <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
}
 8003da8:	bd10      	pop	{r4, pc}
	...

08003dac <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	f04f 0a00 	mov.w	sl, #0
        : Box(), borderColor(0), borderSize(0)
 8003db6:	4eeb      	ldr	r6, [pc, #940]	; (8004164 <_ZN15Screen2ViewBaseC1Ev+0x3b8>)
 8003db8:	2708      	movs	r7, #8
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003dba:	f504 7b69 	add.w	fp, r4, #932	; 0x3a4
        : TextArea(), wildcard(0)
 8003dbe:	4dea      	ldr	r5, [pc, #936]	; (8004168 <_ZN15Screen2ViewBaseC1Ev+0x3bc>)
 8003dc0:	f04f 0802 	mov.w	r8, #2
    button2Manual_p2.setAction(buttonCallback);
 8003dc4:	f504 69c2 	add.w	r9, r4, #1552	; 0x610
Screen2ViewBase::Screen2ViewBase() :
 8003dc8:	ed2d 8b10 	vpush	{d8-d15}
 8003dcc:	b08f      	sub	sp, #60	; 0x3c
 8003dce:	f00d ff05 	bl	8011bdc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4be5      	ldr	r3, [pc, #916]	; (800416c <_ZN15Screen2ViewBaseC1Ev+0x3c0>)
 8003dd6:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
 8003dda:	f842 3b40 	str.w	r3, [r2], #64
 8003dde:	4610      	mov	r0, r2
 8003de0:	ee08 2a10 	vmov	s16, r2
 8003de4:	f7ff fa36 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 8003de8:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003dec:	4618      	mov	r0, r3
 8003dee:	9305      	str	r3, [sp, #20]
 8003df0:	f7ff fa30 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 8003df4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003df8:	4618      	mov	r0, r3
 8003dfa:	ee0e 3a90 	vmov	s29, r3
 8003dfe:	f00a fe4b 	bl	800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003e02:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8003e06:	4618      	mov	r0, r3
 8003e08:	ee08 3a90 	vmov	s17, r3
 8003e0c:	f00a ffb0 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e10:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8003e14:	4618      	mov	r0, r3
 8003e16:	ee09 3a10 	vmov	s18, r3
 8003e1a:	f00a ffa9 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e1e:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003e22:	4618      	mov	r0, r3
 8003e24:	ee09 3a90 	vmov	s19, r3
 8003e28:	f00a ffa2 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e2c:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003e30:	4618      	mov	r0, r3
 8003e32:	ee0a 3a10 	vmov	s20, r3
 8003e36:	f00a ff9b 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e3a:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	ee0a 3a90 	vmov	s21, r3
 8003e44:	f00a ff94 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e48:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	ee0b 3a10 	vmov	s22, r3
 8003e52:	f00a ff8d 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e56:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	ee0b 3a90 	vmov	s23, r3
 8003e60:	f00a ff86 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e64:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003e68:	4618      	mov	r0, r3
 8003e6a:	ee0c 3a10 	vmov	s24, r3
 8003e6e:	f00a ff7f 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e72:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003e76:	4618      	mov	r0, r3
 8003e78:	ee0c 3a90 	vmov	s25, r3
 8003e7c:	f00a ff78 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e80:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003e84:	4618      	mov	r0, r3
 8003e86:	ee0d 3a10 	vmov	s26, r3
 8003e8a:	f00a ff71 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e8e:	4658      	mov	r0, fp
 8003e90:	f00a ff6e 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e94:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003e98:	4618      	mov	r0, r3
 8003e9a:	ee0d 3a90 	vmov	s27, r3
 8003e9e:	f00a ff67 	bl	800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ea2:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003ea6:	a90c      	add	r1, sp, #48	; 0x30
 8003ea8:	ee0e 3a10 	vmov	s28, r3
 8003eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eb0:	ee1e 0a10 	vmov	r0, s28
 8003eb4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003eb8:	f009 fec2 	bl	800dc40 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003ebc:	f504 638c 	add.w	r3, r4, #1120	; 0x460
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	9306      	str	r3, [sp, #24]
 8003ec4:	f7ff f9c6 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 8003ec8:	f204 4394 	addw	r3, r4, #1172	; 0x494
 8003ecc:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f8c4 a48c 	str.w	sl, [r4, #1164]	; 0x48c
 8003ed6:	f8a4 a490 	strh.w	sl, [r4, #1168]	; 0x490
 8003eda:	ee0f 3a10 	vmov	s30, r3
 8003ede:	f7ff fa1d 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 8003ee2:	f204 43d4 	addw	r3, r4, #1236	; 0x4d4
 8003ee6:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
 8003eea:	4618      	mov	r0, r3
 8003eec:	f8c4 a4d0 	str.w	sl, [r4, #1232]	; 0x4d0
 8003ef0:	ee0f 3a90 	vmov	s31, r3
 8003ef4:	f7ff fa12 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 8003ef8:	f504 63a2 	add.w	r3, r4, #1296	; 0x510
 8003efc:	4618      	mov	r0, r3
 8003efe:	9307      	str	r3, [sp, #28]
 8003f00:	f7ff f9a8 	bl	8003254 <_ZN8touchgfx3BoxC1Ev>
 8003f04:	f204 5344 	addw	r3, r4, #1348	; 0x544
 8003f08:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
 8003f0c:	2609      	movs	r6, #9
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f8c4 a53c 	str.w	sl, [r4, #1340]	; 0x53c
 8003f14:	f8a4 a540 	strh.w	sl, [r4, #1344]	; 0x540
 8003f18:	9302      	str	r3, [sp, #8]
 8003f1a:	f7ff f9ff 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 8003f1e:	f204 5384 	addw	r3, r4, #1412	; 0x584
 8003f22:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
 8003f26:	f8c4 a580 	str.w	sl, [r4, #1408]	; 0x580
    __background.setPosition(0, 0, 480, 272);
 8003f2a:	f44f 7588 	mov.w	r5, #272	; 0x110
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	f7ff f9f3 	bl	800331c <_ZN8touchgfx8TextAreaC1Ev>
 8003f36:	f504 63b8 	add.w	r3, r4, #1472	; 0x5c0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	f00a fdab 	bl	800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003f42:	4b8b      	ldr	r3, [pc, #556]	; (8004170 <_ZN15Screen2ViewBaseC1Ev+0x3c4>)
    __background.setPosition(0, 0, 480, 272);
 8003f44:	4652      	mov	r2, sl
 8003f46:	4651      	mov	r1, sl
 8003f48:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
 8003f4c:	ee18 0a10 	vmov	r0, s16
 8003f50:	4b88      	ldr	r3, [pc, #544]	; (8004174 <_ZN15Screen2ViewBaseC1Ev+0x3c8>)
 8003f52:	9500      	str	r5, [sp, #0]
 8003f54:	f8c4 3618 	str.w	r3, [r4, #1560]	; 0x618
 8003f58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f5c:	f8c4 4614 	str.w	r4, [r4, #1556]	; 0x614
 8003f60:	f8c4 a61c 	str.w	sl, [r4, #1564]	; 0x61c
 8003f64:	f7ff f963 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f68:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 480, 272);
 8003f6c:	4652      	mov	r2, sl
 8003f6e:	4651      	mov	r1, sl
 8003f70:	9805      	ldr	r0, [sp, #20]
 8003f72:	66a3      	str	r3, [r4, #104]	; 0x68
 8003f74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f78:	9500      	str	r5, [sp, #0]
        color = col;
 8003f7a:	f04f 35ff 	mov.w	r5, #4294967295
 8003f7e:	f7ff f956 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 8003f82:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <_ZN15Screen2ViewBaseC1Ev+0x3cc>)
    button2Manual_p2.setXY(4, 202);
 8003f84:	22ca      	movs	r2, #202	; 0xca
 8003f86:	2104      	movs	r1, #4
 8003f88:	ee1e 0a90 	vmov	r0, s29
 8003f8c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003f90:	f7ff f940 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button2Manual_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 8003f94:	aa0c      	add	r2, sp, #48	; 0x30
 8003f96:	a909      	add	r1, sp, #36	; 0x24
 8003f98:	ee1e 0a90 	vmov	r0, s29
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fa0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	aa0a      	add	r2, sp, #40	; 0x28
 8003fa8:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8003fac:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8003fb0:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8003fb4:	f00a fccd 	bl	800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8003fb8:	230f      	movs	r3, #15
        iconX = x;
 8003fba:	f04f 0216 	mov.w	r2, #22
    button7_p2.setXY(283, 16);
 8003fbe:	f240 111b 	movw	r1, #283	; 0x11b
 8003fc2:	ee18 0a90 	vmov	r0, s17
        iconY = y;
 8003fc6:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
        iconX = x;
 8003fca:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8003fce:	2210      	movs	r2, #16
 8003fd0:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
 8003fd4:	f7ff f91e 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button7_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003fd8:	a90c      	add	r1, sp, #48	; 0x30
 8003fda:	ee18 0a90 	vmov	r0, s17
 8003fde:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	a90b      	add	r1, sp, #44	; 0x2c
 8003fe6:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8003fea:	f00a fa55 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003fee:	2313      	movs	r3, #19
        updateTextPosition();
 8003ff0:	ee18 0a90 	vmov	r0, s17
 8003ff4:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
 8003ff8:	f7ff f940 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button8_p2.setXY(343, 16);
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	f240 1157 	movw	r1, #343	; 0x157
 8004002:	ee19 0a10 	vmov	r0, s18
 8004006:	f8c4 90fc 	str.w	r9, [r4, #252]	; 0xfc
        colorPressed = col;
 800400a:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
 800400e:	f7ff f901 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button8_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004012:	a90c      	add	r1, sp, #48	; 0x30
 8004014:	ee19 0a10 	vmov	r0, s18
 8004018:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800401c:	460a      	mov	r2, r1
 800401e:	a90b      	add	r1, sp, #44	; 0x2c
 8004020:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004024:	f00a fa38 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004028:	2314      	movs	r3, #20
        updateTextPosition();
 800402a:	ee19 0a10 	vmov	r0, s18
 800402e:	f8a4 3154 	strh.w	r3, [r4, #340]	; 0x154
 8004032:	f7ff f923 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button9_p2.setXY(403, 16);
 8004036:	2210      	movs	r2, #16
 8004038:	f240 1193 	movw	r1, #403	; 0x193
 800403c:	ee19 0a90 	vmov	r0, s19
 8004040:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
        colorPressed = col;
 8004044:	e9c4 5556 	strd	r5, r5, [r4, #344]	; 0x158
 8004048:	f7ff f8e4 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button9_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800404c:	a90c      	add	r1, sp, #48	; 0x30
 800404e:	ee19 0a90 	vmov	r0, s19
 8004052:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004056:	460a      	mov	r2, r1
 8004058:	a90b      	add	r1, sp, #44	; 0x2c
 800405a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800405e:	f00a fa1b 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004062:	2315      	movs	r3, #21
        updateTextPosition();
 8004064:	ee19 0a90 	vmov	r0, s19
 8004068:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
 800406c:	f7ff f906 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button4_p2.setXY(283, 76);
 8004070:	224c      	movs	r2, #76	; 0x4c
 8004072:	f240 111b 	movw	r1, #283	; 0x11b
 8004076:	ee1a 0a10 	vmov	r0, s20
 800407a:	f8c4 918c 	str.w	r9, [r4, #396]	; 0x18c
        colorPressed = col;
 800407e:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
 8004082:	f7ff f8c7 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button4_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004086:	a90c      	add	r1, sp, #48	; 0x30
 8004088:	ee1a 0a10 	vmov	r0, s20
 800408c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004090:	460a      	mov	r2, r1
 8004092:	a90b      	add	r1, sp, #44	; 0x2c
 8004094:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004098:	f00a f9fe 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800409c:	f04f 0216 	mov.w	r2, #22
        updateTextPosition();
 80040a0:	ee1a 0a10 	vmov	r0, s20
 80040a4:	f8a4 21e4 	strh.w	r2, [r4, #484]	; 0x1e4
 80040a8:	f7ff f8e8 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button5_p2.setXY(343, 76);
 80040ac:	224c      	movs	r2, #76	; 0x4c
 80040ae:	f240 1157 	movw	r1, #343	; 0x157
 80040b2:	ee1a 0a90 	vmov	r0, s21
 80040b6:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
        colorPressed = col;
 80040ba:	e9c4 557a 	strd	r5, r5, [r4, #488]	; 0x1e8
 80040be:	f7ff f8a9 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button5_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040c2:	aa0c      	add	r2, sp, #48	; 0x30
 80040c4:	a90b      	add	r1, sp, #44	; 0x2c
 80040c6:	ee1a 0a90 	vmov	r0, s21
 80040ca:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80040ce:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80040d2:	f00a f9e1 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040d6:	2317      	movs	r3, #23
        updateTextPosition();
 80040d8:	ee1a 0a90 	vmov	r0, s21
 80040dc:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
 80040e0:	f7ff f8cc 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button6_p2.setXY(403, 76);
 80040e4:	224c      	movs	r2, #76	; 0x4c
 80040e6:	f240 1193 	movw	r1, #403	; 0x193
 80040ea:	ee1b 0a10 	vmov	r0, s22
 80040ee:	f8c4 921c 	str.w	r9, [r4, #540]	; 0x21c
        colorPressed = col;
 80040f2:	e9c4 558c 	strd	r5, r5, [r4, #560]	; 0x230
 80040f6:	f7ff f88d 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button6_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040fa:	aa0c      	add	r2, sp, #48	; 0x30
 80040fc:	a90b      	add	r1, sp, #44	; 0x2c
 80040fe:	ee1b 0a10 	vmov	r0, s22
 8004102:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004106:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800410a:	f00a f9c5 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800410e:	2318      	movs	r3, #24
        updateTextPosition();
 8004110:	ee1b 0a10 	vmov	r0, s22
 8004114:	f8a4 3274 	strh.w	r3, [r4, #628]	; 0x274
 8004118:	f7ff f8b0 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button1_p2.setXY(283, 136);
 800411c:	2288      	movs	r2, #136	; 0x88
 800411e:	f240 111b 	movw	r1, #283	; 0x11b
 8004122:	ee1b 0a90 	vmov	r0, s23
 8004126:	f8c4 9264 	str.w	r9, [r4, #612]	; 0x264
        colorPressed = col;
 800412a:	e9c4 559e 	strd	r5, r5, [r4, #632]	; 0x278
 800412e:	f7ff f871 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button1_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004132:	aa0c      	add	r2, sp, #48	; 0x30
 8004134:	a90b      	add	r1, sp, #44	; 0x2c
 8004136:	ee1b 0a90 	vmov	r0, s23
 800413a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800413e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004142:	f00a f9a9 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004146:	2319      	movs	r3, #25
        updateTextPosition();
 8004148:	ee1b 0a90 	vmov	r0, s23
 800414c:	f8a4 32bc 	strh.w	r3, [r4, #700]	; 0x2bc
 8004150:	f7ff f894 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button2_p2.setXY(343, 136);
 8004154:	2288      	movs	r2, #136	; 0x88
 8004156:	f240 1157 	movw	r1, #343	; 0x157
 800415a:	ee1c 0a10 	vmov	r0, s24
 800415e:	f8c4 92ac 	str.w	r9, [r4, #684]	; 0x2ac
 8004162:	e00b      	b.n	800417c <_ZN15Screen2ViewBaseC1Ev+0x3d0>
 8004164:	0801f4fc 	.word	0x0801f4fc
 8004168:	0801f454 	.word	0x0801f454
 800416c:	0801e268 	.word	0x0801e268
 8004170:	0801e250 	.word	0x0801e250
 8004174:	08003cd3 	.word	0x08003cd3
 8004178:	ff570e0e 	.word	0xff570e0e
        colorPressed = col;
 800417c:	e9c4 55b0 	strd	r5, r5, [r4, #704]	; 0x2c0
 8004180:	f7ff f848 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button2_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004184:	a90b      	add	r1, sp, #44	; 0x2c
 8004186:	aa0c      	add	r2, sp, #48	; 0x30
 8004188:	ee1c 0a10 	vmov	r0, s24
 800418c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004190:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004194:	f00a f980 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004198:	f04f 021a 	mov.w	r2, #26
        updateTextPosition();
 800419c:	ee1c 0a10 	vmov	r0, s24
 80041a0:	f8a4 2304 	strh.w	r2, [r4, #772]	; 0x304
 80041a4:	f7ff f86a 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button3_p2.setXY(403, 136);
 80041a8:	2288      	movs	r2, #136	; 0x88
 80041aa:	f240 1193 	movw	r1, #403	; 0x193
 80041ae:	ee1c 0a90 	vmov	r0, s25
 80041b2:	f8c4 92f4 	str.w	r9, [r4, #756]	; 0x2f4
        colorPressed = col;
 80041b6:	e9c4 55c2 	strd	r5, r5, [r4, #776]	; 0x308
 80041ba:	f7ff f82b 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button3_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041be:	aa0c      	add	r2, sp, #48	; 0x30
 80041c0:	a90b      	add	r1, sp, #44	; 0x2c
 80041c2:	ee1c 0a90 	vmov	r0, s25
 80041c6:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80041ca:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80041ce:	f00a f963 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80041d2:	231b      	movs	r3, #27
        updateTextPosition();
 80041d4:	ee1c 0a90 	vmov	r0, s25
 80041d8:	f8a4 334c 	strh.w	r3, [r4, #844]	; 0x34c
 80041dc:	f7ff f84e 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClear_p2.setXY(283, 196);
 80041e0:	22c4      	movs	r2, #196	; 0xc4
 80041e2:	f240 111b 	movw	r1, #283	; 0x11b
 80041e6:	ee1d 0a10 	vmov	r0, s26
 80041ea:	f8c4 933c 	str.w	r9, [r4, #828]	; 0x33c
        colorPressed = col;
 80041ee:	e9c4 55d4 	strd	r5, r5, [r4, #848]	; 0x350
 80041f2:	f7ff f80f 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClear_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041f6:	aa0c      	add	r2, sp, #48	; 0x30
 80041f8:	a90b      	add	r1, sp, #44	; 0x2c
 80041fa:	ee1d 0a10 	vmov	r0, s26
 80041fe:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004202:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004206:	f00a f947 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800420a:	231c      	movs	r3, #28
        updateTextPosition();
 800420c:	ee1d 0a10 	vmov	r0, s26
 8004210:	f8a4 3394 	strh.w	r3, [r4, #916]	; 0x394
 8004214:	f7ff f832 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    button0_p2.setXY(343, 196);
 8004218:	22c4      	movs	r2, #196	; 0xc4
 800421a:	f240 1157 	movw	r1, #343	; 0x157
 800421e:	4658      	mov	r0, fp
 8004220:	f8c4 9384 	str.w	r9, [r4, #900]	; 0x384
        colorPressed = col;
 8004224:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
 8004228:	f7fe fff4 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    button0_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 800422c:	aa0c      	add	r2, sp, #48	; 0x30
 800422e:	a90b      	add	r1, sp, #44	; 0x2c
 8004230:	4658      	mov	r0, fp
 8004232:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8004236:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 800423a:	f00a f92d 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800423e:	231d      	movs	r3, #29
        updateTextPosition();
 8004240:	4658      	mov	r0, fp
 8004242:	f8a4 33dc 	strh.w	r3, [r4, #988]	; 0x3dc
 8004246:	f7ff f819 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonSend_p2.setXY(403, 196);
 800424a:	22c4      	movs	r2, #196	; 0xc4
 800424c:	f240 1193 	movw	r1, #403	; 0x193
 8004250:	ee1d 0a90 	vmov	r0, s27
 8004254:	f8c4 93cc 	str.w	r9, [r4, #972]	; 0x3cc
        colorPressed = col;
 8004258:	e9c4 55f8 	strd	r5, r5, [r4, #992]	; 0x3e0
 800425c:	f7fe ffda 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
    buttonSend_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004260:	aa0c      	add	r2, sp, #48	; 0x30
 8004262:	a90b      	add	r1, sp, #44	; 0x2c
 8004264:	ee1d 0a90 	vmov	r0, s27
 8004268:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
        borderSize = size;
 800426c:	2705      	movs	r7, #5
 800426e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8004272:	f00a f911 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004276:	231e      	movs	r3, #30
        updateTextPosition();
 8004278:	ee1d 0a90 	vmov	r0, s27
 800427c:	f8a4 3424 	strh.w	r3, [r4, #1060]	; 0x424
 8004280:	f7fe fffc 	bl	800327c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_DIVIDERS_DIVIDER_EXTRA_SHORT_ID));
 8004284:	a90c      	add	r1, sp, #48	; 0x30
 8004286:	ee1e 0a10 	vmov	r0, s28
        color = col;
 800428a:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
        colorPressed = col;
 800428e:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
 8004292:	f8c4 9414 	str.w	r9, [r4, #1044]	; 0x414
 8004296:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 800429a:	f00a fc24 	bl	800eae6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(258, 9, 2, 250);
 800429e:	23fa      	movs	r3, #250	; 0xfa
 80042a0:	4632      	mov	r2, r6
 80042a2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80042a6:	ee1e 0a10 	vmov	r0, s28
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4643      	mov	r3, r8
 80042ae:	f7fe ffbe 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80042b2:	4651      	mov	r1, sl
 80042b4:	ee1e 0a10 	vmov	r0, s28
    textAreaSRPM.setPosition(12, 51, 104, 35);
 80042b8:	f04f 0823 	mov.w	r8, #35	; 0x23
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80042bc:	f009 fc87 	bl	800dbce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 80042c0:	2252      	movs	r2, #82	; 0x52
 80042c2:	2379      	movs	r3, #121	; 0x79
 80042c4:	2104      	movs	r1, #4
 80042c6:	9806      	ldr	r0, [sp, #24]
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 80042c8:	f204 56fc 	addw	r6, r4, #1532	; 0x5fc
    boxWithBorder1_1.setPosition(4, 16, 121, 82);
 80042cc:	9200      	str	r2, [sp, #0]
 80042ce:	2210      	movs	r2, #16
 80042d0:	f7fe ffad 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 80042d4:	4b98      	ldr	r3, [pc, #608]	; (8004538 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaSRPM.setPosition(12, 51, 104, 35);
 80042d6:	2233      	movs	r2, #51	; 0x33
 80042d8:	210c      	movs	r1, #12
 80042da:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
        borderColor = color;
 80042de:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80042e2:	ee1f 0a10 	vmov	r0, s30
        borderSize = size;
 80042e6:	f8a4 7490 	strh.w	r7, [r4, #1168]	; 0x490
        borderColor = color;
 80042ea:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
 80042ee:	2368      	movs	r3, #104	; 0x68
 80042f0:	f8cd 8000 	str.w	r8, [sp]
 80042f4:	f7fe ff9b 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80042f8:	4b90      	ldr	r3, [pc, #576]	; (800453c <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 80042fa:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
 80042fe:	681b      	ldr	r3, [r3, #0]
        linespace = space;
 8004300:	f8a4 a4c8 	strh.w	sl, [r4, #1224]	; 0x4c8
 8004304:	b92b      	cbnz	r3, 8004312 <_ZN15Screen2ViewBaseC1Ev+0x566>
 8004306:	4b8e      	ldr	r3, [pc, #568]	; (8004540 <_ZN15Screen2ViewBaseC1Ev+0x794>)
 8004308:	21ae      	movs	r1, #174	; 0xae
 800430a:	4a8e      	ldr	r2, [pc, #568]	; (8004544 <_ZN15Screen2ViewBaseC1Ev+0x798>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800430c:	488e      	ldr	r0, [pc, #568]	; (8004548 <_ZN15Screen2ViewBaseC1Ev+0x79c>)
 800430e:	f017 ffe5 	bl	801c2dc <__assert_func>
 8004312:	4b8e      	ldr	r3, [pc, #568]	; (800454c <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b1f      	cmp	r3, #31
 8004318:	d803      	bhi.n	8004322 <_ZN15Screen2ViewBaseC1Ev+0x576>
 800431a:	4b8d      	ldr	r3, [pc, #564]	; (8004550 <_ZN15Screen2ViewBaseC1Ev+0x7a4>)
 800431c:	21af      	movs	r1, #175	; 0xaf
 800431e:	4a89      	ldr	r2, [pc, #548]	; (8004544 <_ZN15Screen2ViewBaseC1Ev+0x798>)
 8004320:	e7f4      	b.n	800430c <_ZN15Screen2ViewBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 8004322:	4b8c      	ldr	r3, [pc, #560]	; (8004554 <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 8004324:	211f      	movs	r1, #31
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	f000 fab4 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_30RR).getText());
 800432c:	4a8a      	ldr	r2, [pc, #552]	; (8004558 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 800432e:	4603      	mov	r3, r0
 8004330:	4639      	mov	r1, r7
 8004332:	4630      	mov	r0, r6
 8004334:	f00f f926 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wildcard = value;
 8004338:	f8c4 64d0 	str.w	r6, [r4, #1232]	; 0x4d0
        : typedTextId(id)
 800433c:	4e87      	ldr	r6, [pc, #540]	; (800455c <_ZN15Screen2ViewBaseC1Ev+0x7b0>)
    textAreaSRPM.setTypedText(touchgfx::TypedText(T_SRPM));
 800433e:	a90c      	add	r1, sp, #48	; 0x30
 8004340:	ee1f 0a10 	vmov	r0, s30
 8004344:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8004348:	960c      	str	r6, [sp, #48]	; 0x30
 800434a:	f00a f865 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreasrpm.setXY(34, 26);
 800434e:	221a      	movs	r2, #26
 8004350:	2122      	movs	r1, #34	; 0x22
 8004352:	ee1f 0a90 	vmov	r0, s31
 8004356:	f7fe ff5d 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 800435a:	2320      	movs	r3, #32
    textAreasrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EP5D));
 800435c:	a90c      	add	r1, sp, #48	; 0x30
 800435e:	ee1f 0a90 	vmov	r0, s31
        this->color = color;
 8004362:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
        linespace = space;
 8004366:	f8a4 a508 	strh.w	sl, [r4, #1288]	; 0x508
 800436a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800436e:	960c      	str	r6, [sp, #48]	; 0x30
 8004370:	f00a f852 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    boxWithBorder1_1_1.setPosition(131, 16, 121, 82);
 8004374:	2252      	movs	r2, #82	; 0x52
 8004376:	2379      	movs	r3, #121	; 0x79
 8004378:	2183      	movs	r1, #131	; 0x83
 800437a:	9807      	ldr	r0, [sp, #28]
 800437c:	9200      	str	r2, [sp, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	f7fe ff55 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
 8004384:	4a6c      	ldr	r2, [pc, #432]	; (8004538 <_ZN15Screen2ViewBaseC1Ev+0x78c>)
    textAreaMRPM.setPosition(139, 51, 104, 35);
 8004386:	2368      	movs	r3, #104	; 0x68
 8004388:	f8cd 8000 	str.w	r8, [sp]
 800438c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
 8004390:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004394:	218b      	movs	r1, #139	; 0x8b
 8004396:	9802      	ldr	r0, [sp, #8]
 8004398:	f8c4 253c 	str.w	r2, [r4, #1340]	; 0x53c
 800439c:	2233      	movs	r2, #51	; 0x33
        borderSize = size;
 800439e:	f8a4 7540 	strh.w	r7, [r4, #1344]	; 0x540
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 80043a2:	f204 6806 	addw	r8, r4, #1542	; 0x606
    textAreaMRPM.setPosition(139, 51, 104, 35);
 80043a6:	f7fe ff42 	bl	800322e <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80043aa:	4a64      	ldr	r2, [pc, #400]	; (800453c <_ZN15Screen2ViewBaseC1Ev+0x790>)
        this->color = color;
 80043ac:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 80043b0:	6813      	ldr	r3, [r2, #0]
        linespace = space;
 80043b2:	f8a4 a578 	strh.w	sl, [r4, #1400]	; 0x578
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0a5      	beq.n	8004306 <_ZN15Screen2ViewBaseC1Ev+0x55a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80043ba:	4a64      	ldr	r2, [pc, #400]	; (800454c <_ZN15Screen2ViewBaseC1Ev+0x7a0>)
 80043bc:	8813      	ldrh	r3, [r2, #0]
 80043be:	2b21      	cmp	r3, #33	; 0x21
 80043c0:	d9ab      	bls.n	800431a <_ZN15Screen2ViewBaseC1Ev+0x56e>
        return texts->getText(typedTextId);
 80043c2:	4b64      	ldr	r3, [pc, #400]	; (8004554 <_ZN15Screen2ViewBaseC1Ev+0x7a8>)
 80043c4:	2121      	movs	r1, #33	; 0x21
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	f000 fa64 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M26F).getText());
 80043cc:	4a62      	ldr	r2, [pc, #392]	; (8004558 <_ZN15Screen2ViewBaseC1Ev+0x7ac>)
 80043ce:	4603      	mov	r3, r0
 80043d0:	4639      	mov	r1, r7
 80043d2:	4640      	mov	r0, r8
 80043d4:	f00f f8d6 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80043d8:	2324      	movs	r3, #36	; 0x24
    textAreaMRPM.setTypedText(touchgfx::TypedText(T_MRPM));
 80043da:	a90c      	add	r1, sp, #48	; 0x30
 80043dc:	9802      	ldr	r0, [sp, #8]
 80043de:	f8c4 8580 	str.w	r8, [r4, #1408]	; 0x580
 80043e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80043e6:	960c      	str	r6, [sp, #48]	; 0x30
 80043e8:	f00a f816 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textAreamrpm.setXY(158, 26);
 80043ec:	221a      	movs	r2, #26
 80043ee:	9803      	ldr	r0, [sp, #12]
 80043f0:	219e      	movs	r1, #158	; 0x9e
 80043f2:	f7fe ff0f 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 80043f6:	2322      	movs	r3, #34	; 0x22
    textAreamrpm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DTOP));
 80043f8:	a90c      	add	r1, sp, #48	; 0x30
 80043fa:	9803      	ldr	r0, [sp, #12]
        this->color = color;
 80043fc:	f8c4 55b4 	str.w	r5, [r4, #1460]	; 0x5b4
 8004400:	1d25      	adds	r5, r4, #4
        linespace = space;
 8004402:	f8a4 a5b8 	strh.w	sl, [r4, #1464]	; 0x5b8
 8004406:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800440a:	960c      	str	r6, [sp, #48]	; 0x30
 800440c:	f00a f804 	bl	800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonPower_p2.setXY(74, 202);
 8004410:	9804      	ldr	r0, [sp, #16]
 8004412:	22ca      	movs	r2, #202	; 0xca
 8004414:	214a      	movs	r1, #74	; 0x4a
 8004416:	f7fe fefd 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 800441a:	230a      	movs	r3, #10
    buttonPower_p2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_POWER_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_ADD_NEW_32_ID));
 800441c:	aa0a      	add	r2, sp, #40	; 0x28
 800441e:	a909      	add	r1, sp, #36	; 0x24
 8004420:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8004424:	230b      	movs	r3, #11
 8004426:	9804      	ldr	r0, [sp, #16]
 8004428:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800442c:	2304      	movs	r3, #4
 800442e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8004432:	2301      	movs	r3, #1
 8004434:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8004438:	ab0c      	add	r3, sp, #48	; 0x30
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	ab0b      	add	r3, sp, #44	; 0x2c
 800443e:	f00a fa88 	bl	800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8004442:	2347      	movs	r3, #71	; 0x47
 8004444:	ee18 1a10 	vmov	r1, s16
 8004448:	4628      	mov	r0, r5
 800444a:	f8a4 35f8 	strh.w	r3, [r4, #1528]	; 0x5f8
        iconY = y;
 800444e:	2310      	movs	r3, #16
 8004450:	f8c4 95e8 	str.w	r9, [r4, #1512]	; 0x5e8
 8004454:	f8a4 35fa 	strh.w	r3, [r4, #1530]	; 0x5fa
 8004458:	f008 f92c 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800445c:	9905      	ldr	r1, [sp, #20]
 800445e:	4628      	mov	r0, r5
 8004460:	f008 f928 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004464:	ee1e 1a90 	vmov	r1, s29
 8004468:	4628      	mov	r0, r5
 800446a:	f008 f923 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800446e:	ee18 1a90 	vmov	r1, s17
 8004472:	4628      	mov	r0, r5
 8004474:	f008 f91e 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004478:	ee19 1a10 	vmov	r1, s18
 800447c:	4628      	mov	r0, r5
 800447e:	f008 f919 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004482:	ee19 1a90 	vmov	r1, s19
 8004486:	4628      	mov	r0, r5
 8004488:	f008 f914 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800448c:	ee1a 1a10 	vmov	r1, s20
 8004490:	4628      	mov	r0, r5
 8004492:	f008 f90f 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004496:	ee1a 1a90 	vmov	r1, s21
 800449a:	4628      	mov	r0, r5
 800449c:	f008 f90a 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044a0:	ee1b 1a10 	vmov	r1, s22
 80044a4:	4628      	mov	r0, r5
 80044a6:	f008 f905 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044aa:	ee1b 1a90 	vmov	r1, s23
 80044ae:	4628      	mov	r0, r5
 80044b0:	f008 f900 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044b4:	ee1c 1a10 	vmov	r1, s24
 80044b8:	4628      	mov	r0, r5
 80044ba:	f008 f8fb 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044be:	ee1c 1a90 	vmov	r1, s25
 80044c2:	4628      	mov	r0, r5
 80044c4:	f008 f8f6 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044c8:	ee1d 1a10 	vmov	r1, s26
 80044cc:	4628      	mov	r0, r5
 80044ce:	f008 f8f1 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044d2:	4659      	mov	r1, fp
 80044d4:	4628      	mov	r0, r5
 80044d6:	f008 f8ed 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044da:	ee1d 1a90 	vmov	r1, s27
 80044de:	4628      	mov	r0, r5
 80044e0:	f008 f8e8 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044e4:	ee1e 1a10 	vmov	r1, s28
 80044e8:	4628      	mov	r0, r5
 80044ea:	f008 f8e3 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044ee:	9906      	ldr	r1, [sp, #24]
 80044f0:	4628      	mov	r0, r5
 80044f2:	f008 f8df 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80044f6:	ee1f 1a10 	vmov	r1, s30
 80044fa:	4628      	mov	r0, r5
 80044fc:	f008 f8da 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004500:	ee1f 1a90 	vmov	r1, s31
 8004504:	4628      	mov	r0, r5
 8004506:	f008 f8d5 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800450a:	9907      	ldr	r1, [sp, #28]
 800450c:	4628      	mov	r0, r5
 800450e:	f008 f8d1 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004512:	9902      	ldr	r1, [sp, #8]
 8004514:	4628      	mov	r0, r5
 8004516:	f008 f8cd 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800451a:	9903      	ldr	r1, [sp, #12]
 800451c:	4628      	mov	r0, r5
 800451e:	f008 f8c9 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004522:	4628      	mov	r0, r5
 8004524:	9904      	ldr	r1, [sp, #16]
 8004526:	f008 f8c5 	bl	800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800452a:	4620      	mov	r0, r4
 800452c:	b00f      	add	sp, #60	; 0x3c
 800452e:	ecbd 8b10 	vpop	{d8-d15}
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	ff570e0e 	.word	0xff570e0e
 800453c:	24006cbc 	.word	0x24006cbc
 8004540:	0801e0a8 	.word	0x0801e0a8
 8004544:	0801e0ea 	.word	0x0801e0ea
 8004548:	0801e118 	.word	0x0801e118
 800454c:	24006cc0 	.word	0x24006cc0
 8004550:	0801e15f 	.word	0x0801e15f
 8004554:	24006cc8 	.word	0x24006cc8
 8004558:	0801e1b1 	.word	0x0801e1b1
 800455c:	0801dba4 	.word	0x0801dba4

08004560 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004560:	4770      	bx	lr
	...

08004564 <_Z23getFont_verdana_10_4bppv>:
{
 8004564:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004566:	4d15      	ldr	r5, [pc, #84]	; (80045bc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8004568:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800456a:	782c      	ldrb	r4, [r5, #0]
 800456c:	f3bf 8f5b 	dmb	ish
 8004570:	f014 0401 	ands.w	r4, r4, #1
 8004574:	d11e      	bne.n	80045b4 <_Z23getFont_verdana_10_4bppv+0x50>
 8004576:	4628      	mov	r0, r5
 8004578:	f017 fd9c 	bl	801c0b4 <__cxa_guard_acquire>
 800457c:	b1d0      	cbz	r0, 80045b4 <_Z23getFont_verdana_10_4bppv+0x50>
 800457e:	233f      	movs	r3, #63	; 0x3f
 8004580:	2201      	movs	r2, #1
 8004582:	490f      	ldr	r1, [pc, #60]	; (80045c0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8004584:	9307      	str	r3, [sp, #28]
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004588:	480f      	ldr	r0, [pc, #60]	; (80045c8 <_Z23getFont_verdana_10_4bppv+0x64>)
 800458a:	9306      	str	r3, [sp, #24]
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <_Z23getFont_verdana_10_4bppv+0x68>)
 800458e:	9408      	str	r4, [sp, #32]
 8004590:	9403      	str	r4, [sp, #12]
 8004592:	9400      	str	r4, [sp, #0]
 8004594:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004598:	2304      	movs	r3, #4
 800459a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800459e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045a2:	230a      	movs	r3, #10
 80045a4:	f7fe fd00 	bl	8002fa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80045a8:	4628      	mov	r0, r5
 80045aa:	f017 fd8f 	bl	801c0cc <__cxa_guard_release>
 80045ae:	4808      	ldr	r0, [pc, #32]	; (80045d0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80045b0:	f017 feb2 	bl	801c318 <atexit>
    return verdana_10_4bpp;
}
 80045b4:	4804      	ldr	r0, [pc, #16]	; (80045c8 <_Z23getFont_verdana_10_4bppv+0x64>)
 80045b6:	b00d      	add	sp, #52	; 0x34
 80045b8:	bd30      	pop	{r4, r5, pc}
 80045ba:	bf00      	nop
 80045bc:	24001798 	.word	0x24001798
 80045c0:	08021ebc 	.word	0x08021ebc
 80045c4:	080220ac 	.word	0x080220ac
 80045c8:	2400179c 	.word	0x2400179c
 80045cc:	080220c8 	.word	0x080220c8
 80045d0:	08004561 	.word	0x08004561

080045d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80045d4:	4770      	bx	lr
	...

080045d8 <_Z23getFont_verdana_20_4bppv>:
{
 80045d8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80045da:	4d15      	ldr	r5, [pc, #84]	; (8004630 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80045dc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80045de:	782c      	ldrb	r4, [r5, #0]
 80045e0:	f3bf 8f5b 	dmb	ish
 80045e4:	f014 0401 	ands.w	r4, r4, #1
 80045e8:	d11f      	bne.n	800462a <_Z23getFont_verdana_20_4bppv+0x52>
 80045ea:	4628      	mov	r0, r5
 80045ec:	f017 fd62 	bl	801c0b4 <__cxa_guard_acquire>
 80045f0:	b1d8      	cbz	r0, 800462a <_Z23getFont_verdana_20_4bppv+0x52>
 80045f2:	233f      	movs	r3, #63	; 0x3f
 80045f4:	2201      	movs	r2, #1
 80045f6:	490f      	ldr	r1, [pc, #60]	; (8004634 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <_Z23getFont_verdana_20_4bppv+0x60>)
 80045fc:	480f      	ldr	r0, [pc, #60]	; (800463c <_Z23getFont_verdana_20_4bppv+0x64>)
 80045fe:	9306      	str	r3, [sp, #24]
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004602:	9408      	str	r4, [sp, #32]
 8004604:	9403      	str	r4, [sp, #12]
 8004606:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800460a:	2304      	movs	r3, #4
 800460c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004610:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	2210      	movs	r2, #16
 8004618:	2314      	movs	r3, #20
 800461a:	f7fe fcc5 	bl	8002fa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800461e:	4628      	mov	r0, r5
 8004620:	f017 fd54 	bl	801c0cc <__cxa_guard_release>
 8004624:	4807      	ldr	r0, [pc, #28]	; (8004644 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004626:	f017 fe77 	bl	801c318 <atexit>
    return verdana_20_4bpp;
}
 800462a:	4804      	ldr	r0, [pc, #16]	; (800463c <_Z23getFont_verdana_20_4bppv+0x64>)
 800462c:	b00d      	add	sp, #52	; 0x34
 800462e:	bd30      	pop	{r4, r5, pc}
 8004630:	240017c4 	.word	0x240017c4
 8004634:	08021ecc 	.word	0x08021ecc
 8004638:	080220b0 	.word	0x080220b0
 800463c:	240017c8 	.word	0x240017c8
 8004640:	080220cc 	.word	0x080220cc
 8004644:	080045d5 	.word	0x080045d5

08004648 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004648:	4770      	bx	lr
	...

0800464c <_Z23getFont_verdana_30_4bppv>:
{
 800464c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 800464e:	4d15      	ldr	r5, [pc, #84]	; (80046a4 <_Z23getFont_verdana_30_4bppv+0x58>)
{
 8004650:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 17, 30, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8004652:	782c      	ldrb	r4, [r5, #0]
 8004654:	f3bf 8f5b 	dmb	ish
 8004658:	f014 0401 	ands.w	r4, r4, #1
 800465c:	d11f      	bne.n	800469e <_Z23getFont_verdana_30_4bppv+0x52>
 800465e:	4628      	mov	r0, r5
 8004660:	f017 fd28 	bl	801c0b4 <__cxa_guard_acquire>
 8004664:	b1d8      	cbz	r0, 800469e <_Z23getFont_verdana_30_4bppv+0x52>
 8004666:	233f      	movs	r3, #63	; 0x3f
 8004668:	2201      	movs	r2, #1
 800466a:	490f      	ldr	r1, [pc, #60]	; (80046a8 <_Z23getFont_verdana_30_4bppv+0x5c>)
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <_Z23getFont_verdana_30_4bppv+0x60>)
 8004670:	480f      	ldr	r0, [pc, #60]	; (80046b0 <_Z23getFont_verdana_30_4bppv+0x64>)
 8004672:	9306      	str	r3, [sp, #24]
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <_Z23getFont_verdana_30_4bppv+0x68>)
 8004676:	9408      	str	r4, [sp, #32]
 8004678:	9403      	str	r4, [sp, #12]
 800467a:	9400      	str	r4, [sp, #0]
 800467c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004680:	2304      	movs	r3, #4
 8004682:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004686:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800468a:	231e      	movs	r3, #30
 800468c:	2211      	movs	r2, #17
 800468e:	f7fe fc8b 	bl	8002fa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004692:	4628      	mov	r0, r5
 8004694:	f017 fd1a 	bl	801c0cc <__cxa_guard_release>
 8004698:	4807      	ldr	r0, [pc, #28]	; (80046b8 <_Z23getFont_verdana_30_4bppv+0x6c>)
 800469a:	f017 fe3d 	bl	801c318 <atexit>
    return verdana_30_4bpp;
}
 800469e:	4804      	ldr	r0, [pc, #16]	; (80046b0 <_Z23getFont_verdana_30_4bppv+0x64>)
 80046a0:	b00d      	add	sp, #52	; 0x34
 80046a2:	bd30      	pop	{r4, r5, pc}
 80046a4:	240017f0 	.word	0x240017f0
 80046a8:	08021fac 	.word	0x08021fac
 80046ac:	080220c0 	.word	0x080220c0
 80046b0:	240017f4 	.word	0x240017f4
 80046b4:	080220d0 	.word	0x080220d0
 80046b8:	08004649 	.word	0x08004649

080046bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80046bc:	4770      	bx	lr
	...

080046c0 <_Z23getFont_verdana_40_4bppv>:
{
 80046c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80046c2:	4d15      	ldr	r5, [pc, #84]	; (8004718 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 80046c4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80046c6:	782c      	ldrb	r4, [r5, #0]
 80046c8:	f3bf 8f5b 	dmb	ish
 80046cc:	f014 0401 	ands.w	r4, r4, #1
 80046d0:	d11e      	bne.n	8004710 <_Z23getFont_verdana_40_4bppv+0x50>
 80046d2:	4628      	mov	r0, r5
 80046d4:	f017 fcee 	bl	801c0b4 <__cxa_guard_acquire>
 80046d8:	b1d0      	cbz	r0, 8004710 <_Z23getFont_verdana_40_4bppv+0x50>
 80046da:	233f      	movs	r3, #63	; 0x3f
 80046dc:	2201      	movs	r2, #1
 80046de:	490f      	ldr	r1, [pc, #60]	; (800471c <_Z23getFont_verdana_40_4bppv+0x5c>)
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <_Z23getFont_verdana_40_4bppv+0x60>)
 80046e4:	480f      	ldr	r0, [pc, #60]	; (8004724 <_Z23getFont_verdana_40_4bppv+0x64>)
 80046e6:	9306      	str	r3, [sp, #24]
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <_Z23getFont_verdana_40_4bppv+0x68>)
 80046ea:	9408      	str	r4, [sp, #32]
 80046ec:	9403      	str	r4, [sp, #12]
 80046ee:	9400      	str	r4, [sp, #0]
 80046f0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80046f4:	2304      	movs	r3, #4
 80046f6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80046fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80046fe:	2328      	movs	r3, #40	; 0x28
 8004700:	f7fe fc52 	bl	8002fa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004704:	4628      	mov	r0, r5
 8004706:	f017 fce1 	bl	801c0cc <__cxa_guard_release>
 800470a:	4808      	ldr	r0, [pc, #32]	; (800472c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800470c:	f017 fe04 	bl	801c318 <atexit>
    return verdana_40_4bpp;
}
 8004710:	4804      	ldr	r0, [pc, #16]	; (8004724 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004712:	b00d      	add	sp, #52	; 0x34
 8004714:	bd30      	pop	{r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	2400181c 	.word	0x2400181c
 800471c:	0802209c 	.word	0x0802209c
 8004720:	080220c4 	.word	0x080220c4
 8004724:	24001820 	.word	0x24001820
 8004728:	080220d4 	.word	0x080220d4
 800472c:	080046bd 	.word	0x080046bd

08004730 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004730:	2000      	movs	r0, #0
 8004732:	4770      	bx	lr

08004734 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004734:	2000      	movs	r0, #0
 8004736:	4770      	bx	lr

08004738 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004738:	b40e      	push	{r1, r2, r3}
 800473a:	b503      	push	{r0, r1, lr}
 800473c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800473e:	2100      	movs	r1, #0
{
 8004740:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004744:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004746:	f00c fe67 	bl	8011418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800474a:	b002      	add	sp, #8
 800474c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004750:	b003      	add	sp, #12
 8004752:	4770      	bx	lr

08004754 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004754:	b40c      	push	{r2, r3}
 8004756:	b507      	push	{r0, r1, r2, lr}
 8004758:	ab04      	add	r3, sp, #16
 800475a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800475e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004760:	f00c fe5a 	bl	8011418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004764:	b003      	add	sp, #12
 8004766:	f85d eb04 	ldr.w	lr, [sp], #4
 800476a:	b002      	add	sp, #8
 800476c:	4770      	bx	lr
	...

08004770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004770:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8004772:	b510      	push	{r4, lr}
 8004774:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004776:	b373      	cbz	r3, 80047d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004778:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800477a:	b92b      	cbnz	r3, 8004788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800477c:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800477e:	21c0      	movs	r1, #192	; 0xc0
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004782:	4819      	ldr	r0, [pc, #100]	; (80047e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004784:	f017 fdaa 	bl	801c2dc <__assert_func>
            return buffer[pos];
 8004788:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800478a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800478e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004790:	b30b      	cbz	r3, 80047d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004792:	f00e f93f 	bl	8012a14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004796:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8004798:	2b01      	cmp	r3, #1
 800479a:	d803      	bhi.n	80047a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800479e:	21c5      	movs	r1, #197	; 0xc5
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80047a2:	e7ee      	b.n	8004782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80047a4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80047a6:	f640 103f 	movw	r0, #2367	; 0x93f
 80047aa:	1c53      	adds	r3, r2, #1
 80047ac:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	4619      	mov	r1, r3
 80047b2:	bf88      	it	hi
 80047b4:	f1a3 010a 	subhi.w	r1, r3, #10
 80047b8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80047bc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80047be:	4281      	cmp	r1, r0
 80047c0:	d109      	bne.n	80047d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80047c2:	2b0a      	cmp	r3, #10
 80047c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80047c8:	bf28      	it	cs
 80047ca:	2300      	movcs	r3, #0
            return buffer[pos];
 80047cc:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80047ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80047d2:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80047d4:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80047d6:	4620      	mov	r0, r4
}
 80047d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80047dc:	f00d bffe 	b.w	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80047e0:	0801e2cc 	.word	0x0801e2cc
 80047e4:	0801e2d5 	.word	0x0801e2d5
 80047e8:	0801e380 	.word	0x0801e380
 80047ec:	0801e3ca 	.word	0x0801e3ca
 80047f0:	0801e3d8 	.word	0x0801e3d8

080047f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80047f4:	f00d bfaa 	b.w	801274c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080047f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80047f8:	b510      	push	{r4, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	ac02      	add	r4, sp, #8
 80047fe:	e884 0006 	stmia.w	r4, {r1, r2}
 8004802:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004804:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004806:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004808:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	9b08      	ldr	r3, [sp, #32]
 8004812:	f00b fafb 	bl	800fe0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004816:	b006      	add	sp, #24
 8004818:	bd10      	pop	{r4, pc}
	...

0800481c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800481c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800481e:	bb18      	cbnz	r0, 8004868 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004822:	4813      	ldr	r0, [pc, #76]	; (8004870 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4913      	ldr	r1, [pc, #76]	; (8004874 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004828:	b1b3      	cbz	r3, 8004858 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800482a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800482c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800482e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004830:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004832:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	441a      	add	r2, r3
 8004838:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800483c:	2200      	movs	r2, #0
 800483e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004840:	f000 f838 	bl	80048b4 <_ZN17TypedTextDatabase8getFontsEv>
 8004844:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004846:	f000 f833 	bl	80048b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800484c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004850:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004854:	8018      	strh	r0, [r3, #0]
    }
}
 8004856:	e007      	b.n	8004868 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800485a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800485e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004862:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004864:	2c00      	cmp	r4, #0
 8004866:	d1e8      	bne.n	800483a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004868:	bd38      	pop	{r3, r4, r5, pc}
 800486a:	bf00      	nop
 800486c:	24001848 	.word	0x24001848
 8004870:	2400184c 	.word	0x2400184c
 8004874:	24001850 	.word	0x24001850
 8004878:	24001854 	.word	0x24001854
 800487c:	24006cbc 	.word	0x24006cbc
 8004880:	24006cc4 	.word	0x24006cc4
 8004884:	24006cc0 	.word	0x24006cc0
 8004888:	0802216c 	.word	0x0802216c
 800488c:	080220d8 	.word	0x080220d8
 8004890:	08022234 	.word	0x08022234

08004894 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	24001850 	.word	0x24001850
 80048ac:	2400184c 	.word	0x2400184c

080048b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80048b0:	2025      	movs	r0, #37	; 0x25
 80048b2:	4770      	bx	lr

080048b4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80048b4:	4800      	ldr	r0, [pc, #0]	; (80048b8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80048b6:	4770      	bx	lr
 80048b8:	24001858 	.word	0x24001858

080048bc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80048bc:	b510      	push	{r4, lr}
};
 80048be:	4c07      	ldr	r4, [pc, #28]	; (80048dc <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_30_4bpp()),
 80048c0:	f7ff fec4 	bl	800464c <_Z23getFont_verdana_30_4bppv>
};
 80048c4:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80048c6:	f7ff fefb 	bl	80046c0 <_Z23getFont_verdana_40_4bppv>
};
 80048ca:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80048cc:	f7ff fe4a 	bl	8004564 <_Z23getFont_verdana_10_4bppv>
};
 80048d0:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 80048d2:	f7ff fe81 	bl	80045d8 <_Z23getFont_verdana_20_4bppv>
};
 80048d6:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	24001858 	.word	0x24001858

080048e0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80048e0:	4770      	bx	lr

080048e2 <_ZN19FrontendApplicationD0Ev>:
 80048e2:	b510      	push	{r4, lr}
 80048e4:	4604      	mov	r4, r0
 80048e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80048ea:	f017 fbe1 	bl	801c0b0 <_ZdlPvj>
 80048ee:	4620      	mov	r0, r4
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80048f2:	b510      	push	{r4, lr}
 80048f4:	4604      	mov	r4, r0
    {
        model.tick();
 80048f6:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80048fa:	f000 f812 	bl	8004922 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80048fe:	4620      	mov	r0, r4
    }
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004904:	f00b bdfc 	b.w	8010500 <_ZN8touchgfx11Application15handleTickEventEv>

08004908 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004908:	b510      	push	{r4, lr}
 800490a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800490c:	f7fe f962 	bl	8002bd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004910:	4b01      	ldr	r3, [pc, #4]	; (8004918 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004912:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004914:	6023      	str	r3, [r4, #0]
}
 8004916:	bd10      	pop	{r4, pc}
 8004918:	0801e4b4 	.word	0x0801e4b4

0800491c <_ZN5ModelC1Ev>:





Model::Model() : modelListener(0)
 800491c:	2200      	movs	r2, #0
 800491e:	6002      	str	r2, [r0, #0]
{

}
 8004920:	4770      	bx	lr

08004922 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004922:	4770      	bx	lr

08004924 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004924:	4770      	bx	lr

08004926 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004926:	3804      	subs	r0, #4
 8004928:	4770      	bx	lr

0800492a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800492a:	4770      	bx	lr

0800492c <_ZN16Screen1PresenterD0Ev>:
 800492c:	b510      	push	{r4, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	2110      	movs	r1, #16
 8004932:	f017 fbbd 	bl	801c0b0 <_ZdlPvj>
 8004936:	4620      	mov	r0, r4
 8004938:	bd10      	pop	{r4, pc}

0800493a <_ZThn4_N16Screen1PresenterD0Ev>:
 800493a:	f1a0 0004 	sub.w	r0, r0, #4
 800493e:	e7f5      	b.n	800492c <_ZN16Screen1PresenterD0Ev>

08004940 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004940:	2200      	movs	r2, #0
    : view(v)
 8004942:	60c1      	str	r1, [r0, #12]
 8004944:	6082      	str	r2, [r0, #8]
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004948:	b510      	push	{r4, lr}
    : view(v)
 800494a:	f102 0408 	add.w	r4, r2, #8
 800494e:	3220      	adds	r2, #32
 8004950:	6004      	str	r4, [r0, #0]
 8004952:	6042      	str	r2, [r0, #4]
}
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	0801e4f0 	.word	0x0801e4f0

0800495c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800495c:	4770      	bx	lr

0800495e <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800495e:	4770      	bx	lr

08004960 <_ZN11Screen1View19buttonSwitchClickedEv>:
{
	fillBuffer(7);
}
void Screen1View::buttonSwitchClicked()
{
	switchPressed = !switchPressed;
 8004960:	4a04      	ldr	r2, [pc, #16]	; (8004974 <_ZN11Screen1View19buttonSwitchClickedEv+0x14>)
 8004962:	7813      	ldrb	r3, [r2, #0]
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	7013      	strb	r3, [r2, #0]
	dotPressed = 0;
 800496c:	2200      	movs	r2, #0
 800496e:	4b02      	ldr	r3, [pc, #8]	; (8004978 <_ZN11Screen1View19buttonSwitchClickedEv+0x18>)
 8004970:	701a      	strb	r2, [r3, #0]
}
 8004972:	4770      	bx	lr
 8004974:	2400187c 	.word	0x2400187c
 8004978:	24001868 	.word	0x24001868

0800497c <_ZN11Screen1View16buttonDotClickedEv>:
	textAreaMI.invalidate();
	textAreaFreq.invalidate();
}
void Screen1View::buttonDotClicked()
{
	dotPressed = 1;
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <_ZN11Screen1View16buttonDotClickedEv+0x8>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
}
 8004982:	4770      	bx	lr
 8004984:	24001868 	.word	0x24001868

08004988 <_ZN11Screen1View17buttonFreqToggledEv>:
void Screen1View::buttonFreqToggled()
{
	freqReady = 1;
 8004988:	4b01      	ldr	r3, [pc, #4]	; (8004990 <_ZN11Screen1View17buttonFreqToggledEv+0x8>)
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
}
 800498e:	4770      	bx	lr
 8004990:	24001869 	.word	0x24001869

08004994 <_ZN11Screen1View15buttonMIToggledEv>:
void Screen1View::buttonMIToggled()
{
	miReady = 1;
 8004994:	4b01      	ldr	r3, [pc, #4]	; (800499c <_ZN11Screen1View15buttonMIToggledEv+0x8>)
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
}
 800499a:	4770      	bx	lr
 800499c:	24001874 	.word	0x24001874

080049a0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80049a0:	f7fe bb71 	b.w	8003086 <_ZN15Screen1ViewBase11setupScreenEv>

080049a4 <_ZN11Screen1View18buttonPowerClickedEv>:
void Screen1View::buttonPowerClicked()
{
 80049a4:	b508      	push	{r3, lr}
	buttonClearClicked();
 80049a6:	6803      	ldr	r3, [r0, #0]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4798      	blx	r3
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <_ZN11Screen1View18buttonPowerClickedEv+0x18>)
 80049ae:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80049c0 <_ZN11Screen1View18buttonPowerClickedEv+0x1c>
 80049b2:	6818      	ldr	r0, [r3, #0]
}
 80049b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(freqScreenBuffer, 0.0);
 80049b8:	f7fb bfe8 	b.w	800098c <adjustMIAndFreq>
 80049bc:	2400186c 	.word	0x2400186c
 80049c0:	00000000 	.word	0x00000000

080049c4 <_ZN11Screen1ViewD0Ev>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80049cc:	f017 fb70 	bl	801c0b0 <_ZdlPvj>
 80049d0:	4620      	mov	r0, r4
 80049d2:	bd10      	pop	{r4, pc}

080049d4 <_ZN11Screen1View17buttonSendClickedEv>:
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <_ZN11Screen1View17buttonSendClickedEv+0x5c>)
{
 80049d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 80049d8:	781a      	ldrb	r2, [r3, #0]
{
 80049da:	4604      	mov	r4, r0
    if(miReady == 1 && freqReady == 1) //togglelarÄ± tekrar off a cek
 80049dc:	2a01      	cmp	r2, #1
 80049de:	d124      	bne.n	8004a2a <_ZN11Screen1View17buttonSendClickedEv+0x56>
 80049e0:	4e14      	ldr	r6, [pc, #80]	; (8004a34 <_ZN11Screen1View17buttonSendClickedEv+0x60>)
 80049e2:	7832      	ldrb	r2, [r6, #0]
 80049e4:	2a01      	cmp	r2, #1
 80049e6:	d120      	bne.n	8004a2a <_ZN11Screen1View17buttonSendClickedEv+0x56>
 	   dotPressed = 0;
 80049e8:	2500      	movs	r5, #0
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <_ZN11Screen1View17buttonSendClickedEv+0x64>)
 	   toggleButtonMI.forceState(0);
 80049ec:	f200 6014 	addw	r0, r0, #1556	; 0x614
 80049f0:	4629      	mov	r1, r5
 	   miReady = 0;
 80049f2:	701d      	strb	r5, [r3, #0]
 	   dotPressed = 0;
 80049f4:	7015      	strb	r5, [r2, #0]
 	   toggleButtonMI.forceState(0);
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	f009 f8c8 	bl	800db8c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonMI.invalidate();
 80049fc:	9801      	ldr	r0, [sp, #4]
 80049fe:	f00c fe2d 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   toggleButtonFreq.forceState(0);
 8004a02:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8004a06:	4629      	mov	r1, r5
 	   freqReady = 0;
 8004a08:	7035      	strb	r5, [r6, #0]
 	   toggleButtonFreq.forceState(0);
 8004a0a:	9001      	str	r0, [sp, #4]
 8004a0c:	f009 f8be 	bl	800db8c <_ZN8touchgfx12ToggleButton10forceStateEb>
 	   toggleButtonFreq.invalidate();
 8004a10:	9801      	ldr	r0, [sp, #4]
 8004a12:	f00c fe23 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <_ZN11Screen1View17buttonSendClickedEv+0x68>)
 8004a18:	ed93 0a00 	vldr	s0, [r3]
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <_ZN11Screen1View17buttonSendClickedEv+0x6c>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
}
 8004a20:	b002      	add	sp, #8
 8004a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	   adjustMIAndFreq(freqScreenBuffer, miScreenBuffer);
 8004a26:	f7fb bfb1 	b.w	800098c <adjustMIAndFreq>
}
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
 8004a2e:	bf00      	nop
 8004a30:	24001874 	.word	0x24001874
 8004a34:	24001869 	.word	0x24001869
 8004a38:	24001868 	.word	0x24001868
 8004a3c:	24001878 	.word	0x24001878
 8004a40:	2400186c 	.word	0x2400186c

08004a44 <_ZN11Screen1View18buttonClearClickedEv>:
{
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	dotPressed = 0;
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <_ZN11Screen1View18buttonClearClickedEv+0x7c>)
 8004a48:	2500      	movs	r5, #0
{
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	4604      	mov	r4, r0
	dotPressed = 0;
 8004a4e:	701d      	strb	r5, [r3, #0]
	toggleButtonMI.forceState(0);
 8004a50:	f200 6014 	addw	r0, r0, #1556	; 0x614
	freqReady = 0;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <_ZN11Screen1View18buttonClearClickedEv+0x80>)
	toggleButtonMI.forceState(0);
 8004a56:	4629      	mov	r1, r5
	miScreenBuffer = 0.0;
 8004a58:	4f1b      	ldr	r7, [pc, #108]	; (8004ac8 <_ZN11Screen1View18buttonClearClickedEv+0x84>)
	freqReady = 0;
 8004a5a:	701d      	strb	r5, [r3, #0]
	miReady = 0;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <_ZN11Screen1View18buttonClearClickedEv+0x88>)
	freqScreenBuffer = 0;
 8004a5e:	4e1c      	ldr	r6, [pc, #112]	; (8004ad0 <_ZN11Screen1View18buttonClearClickedEv+0x8c>)
	miReady = 0;
 8004a60:	701d      	strb	r5, [r3, #0]
	miBuffer = 0;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <_ZN11Screen1View18buttonClearClickedEv+0x90>)
	toggleButtonMI.forceState(0);
 8004a64:	9001      	str	r0, [sp, #4]
	miBuffer = 0;
 8004a66:	601d      	str	r5, [r3, #0]
	miScreenBuffer = 0.0;
 8004a68:	2300      	movs	r3, #0
	freqScreenBuffer = 0;
 8004a6a:	6035      	str	r5, [r6, #0]
	miScreenBuffer = 0.0;
 8004a6c:	603b      	str	r3, [r7, #0]
	toggleButtonMI.forceState(0);
 8004a6e:	f009 f88d 	bl	800db8c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonMI.invalidate();
 8004a72:	9801      	ldr	r0, [sp, #4]
 8004a74:	f00c fdf2 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
	toggleButtonFreq.forceState(0);
 8004a78:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	9001      	str	r0, [sp, #4]
 8004a80:	f009 f884 	bl	800db8c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleButtonFreq.invalidate();
 8004a84:	9801      	ldr	r0, [sp, #4]
 8004a86:	f00c fde9 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(textAreaMIBuffer, 4, "%3.2f", miScreenBuffer);
 8004a8a:	683b      	ldr	r3, [r7, #0]
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8004a8c:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <_ZN11Screen1View18buttonClearClickedEv+0x94>)
 8004a8e:	2104      	movs	r1, #4
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	f00e ff32 	bl	8013900 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
	Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004a9c:	6833      	ldr	r3, [r6, #0]
 8004a9e:	4a0f      	ldr	r2, [pc, #60]	; (8004adc <_ZN11Screen1View18buttonClearClickedEv+0x98>)
 8004aa0:	2103      	movs	r1, #3
 8004aa2:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
 8004aa6:	f00e fd6d 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaMI.invalidate();
 8004aaa:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8004aae:	f00c fdd5 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaFreq.invalidate();
 8004ab2:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004ab6:	f00c fdd1 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004aba:	b005      	add	sp, #20
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	24001868 	.word	0x24001868
 8004ac4:	24001869 	.word	0x24001869
 8004ac8:	24001878 	.word	0x24001878
 8004acc:	24001874 	.word	0x24001874
 8004ad0:	2400186c 	.word	0x2400186c
 8004ad4:	24001870 	.word	0x24001870
 8004ad8:	0801e518 	.word	0x0801e518
 8004adc:	0801e51e 	.word	0x0801e51e

08004ae0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	f7fe fc54 	bl	8003390 <_ZN15Screen1ViewBaseC1Ev>
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8004aea:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004aec:	6023      	str	r3, [r4, #0]
}
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	0801e530 	.word	0x0801e530

08004af4 <_ZN11Screen1View10fillBufferEh>:
	if(switchPressed == 1)
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <_ZN11Screen1View10fillBufferEh+0x90>)
{
 8004af6:	b513      	push	{r0, r1, r4, lr}
	if(switchPressed == 1)
 8004af8:	781b      	ldrb	r3, [r3, #0]
{
 8004afa:	4604      	mov	r4, r0
	if(switchPressed == 1)
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d131      	bne.n	8004b64 <_ZN11Screen1View10fillBufferEh+0x70>
			if(dotPressed == 0)
 8004b00:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <_ZN11Screen1View10fillBufferEh+0x94>)
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004b02:	ee07 1a90 	vmov	s15, r1
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <_ZN11Screen1View10fillBufferEh+0x98>)
			if(dotPressed == 0)
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	ed93 6a00 	vldr	s12, [r3]
 8004b0e:	b9e2      	cbnz	r2, 8004b4a <_ZN11Screen1View10fillBufferEh+0x56>
				miScreenBuffer = (miScreenBuffer*10) + foo;
 8004b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b14:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004b18:	eea6 7a27 	vfma.f32	s14, s12, s15
		miBuffer = (miBuffer*10) + foo;
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <_ZN11Screen1View10fillBufferEh+0x9c>)
 8004b1e:	200a      	movs	r0, #10
 8004b20:	ed83 7a00 	vstr	s14, [r3]
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004b2a:	fb00 1103 	mla	r1, r0, r3, r1
 8004b2e:	ab01      	add	r3, sp, #4
 8004b30:	f204 60f6 	addw	r0, r4, #1782	; 0x6f6
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	2104      	movs	r1, #4
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <_ZN11Screen1View10fillBufferEh+0xa0>)
 8004b3a:	f00e fee1 	bl	8013900 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
		textAreaMI.invalidate();
 8004b3e:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
		textAreaFreq.invalidate();
 8004b42:	f00c fd8b 	bl	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8004b46:	b002      	add	sp, #8
 8004b48:	bd10      	pop	{r4, pc}
				miScreenBuffer = miScreenBuffer + (foo/10.0);
 8004b4a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004b4e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004b52:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004b56:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004b5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b5e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004b62:	e7db      	b.n	8004b1c <_ZN11Screen1View10fillBufferEh+0x28>
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004b64:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <_ZN11Screen1View10fillBufferEh+0xa4>)
 8004b66:	200a      	movs	r0, #10
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	fb00 1303 	mla	r3, r0, r3, r1
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004b6e:	2103      	movs	r1, #3
 8004b70:	f504 60de 	add.w	r0, r4, #1776	; 0x6f0
		freqScreenBuffer = (freqScreenBuffer*10) + foo;
 8004b74:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(textAreaFreqBuffer, 3, "%d", freqScreenBuffer);
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <_ZN11Screen1View10fillBufferEh+0xa8>)
 8004b78:	f00e fd04 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaFreq.invalidate();
 8004b7c:	f204 409c 	addw	r0, r4, #1180	; 0x49c
 8004b80:	e7df      	b.n	8004b42 <_ZN11Screen1View10fillBufferEh+0x4e>
 8004b82:	bf00      	nop
 8004b84:	2400187c 	.word	0x2400187c
 8004b88:	24001868 	.word	0x24001868
 8004b8c:	24001878 	.word	0x24001878
 8004b90:	24001870 	.word	0x24001870
 8004b94:	0801e521 	.word	0x0801e521
 8004b98:	2400186c 	.word	0x2400186c
 8004b9c:	0801e51e 	.word	0x0801e51e

08004ba0 <_ZN11Screen1View14button9ClickedEv>:
	fillBuffer(9);
 8004ba0:	2109      	movs	r1, #9
 8004ba2:	f7ff bfa7 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004ba6 <_ZN11Screen1View14button8ClickedEv>:
	fillBuffer(8);
 8004ba6:	2108      	movs	r1, #8
 8004ba8:	f7ff bfa4 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bac <_ZN11Screen1View14button0ClickedEv>:
	fillBuffer(0);
 8004bac:	2100      	movs	r1, #0
 8004bae:	f7ff bfa1 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bb2 <_ZN11Screen1View14button3ClickedEv>:
	fillBuffer(3);
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	f7ff bf9e 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bb8 <_ZN11Screen1View14button2ClickedEv>:
	fillBuffer(2);
 8004bb8:	2102      	movs	r1, #2
 8004bba:	f7ff bf9b 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bbe <_ZN11Screen1View14button1ClickedEv>:
	fillBuffer(1);
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	f7ff bf98 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bc4 <_ZN11Screen1View14button6ClickedEv>:
	fillBuffer(6);
 8004bc4:	2106      	movs	r1, #6
 8004bc6:	f7ff bf95 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bca <_ZN11Screen1View14button5ClickedEv>:
	fillBuffer(5);
 8004bca:	2105      	movs	r1, #5
 8004bcc:	f7ff bf92 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bd0 <_ZN11Screen1View14button4ClickedEv>:
	fillBuffer(4);
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	f7ff bf8f 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bd6 <_ZN11Screen1View14button7ClickedEv>:
	fillBuffer(7);
 8004bd6:	2107      	movs	r1, #7
 8004bd8:	f7ff bf8c 	b.w	8004af4 <_ZN11Screen1View10fillBufferEh>

08004bdc <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8004bdc:	4770      	bx	lr

08004bde <_ZThn4_N16Screen2PresenterD1Ev>:
 8004bde:	3804      	subs	r0, #4
 8004be0:	4770      	bx	lr

08004be2 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8004be2:	4770      	bx	lr

08004be4 <_ZN16Screen2PresenterD0Ev>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	2110      	movs	r1, #16
 8004bea:	f017 fa61 	bl	801c0b0 <_ZdlPvj>
 8004bee:	4620      	mov	r0, r4
 8004bf0:	bd10      	pop	{r4, pc}

08004bf2 <_ZThn4_N16Screen2PresenterD0Ev>:
 8004bf2:	f1a0 0004 	sub.w	r0, r0, #4
 8004bf6:	e7f5      	b.n	8004be4 <_ZN16Screen2PresenterD0Ev>

08004bf8 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8004bf8:	2200      	movs	r2, #0
    : view(v)
 8004bfa:	60c1      	str	r1, [r0, #12]
 8004bfc:	6082      	str	r2, [r0, #8]
 8004bfe:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8004c00:	b510      	push	{r4, lr}
    : view(v)
 8004c02:	f102 0408 	add.w	r4, r2, #8
 8004c06:	3220      	adds	r2, #32
 8004c08:	6004      	str	r4, [r0, #0]
 8004c0a:	6042      	str	r2, [r0, #4]
}
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	bf00      	nop
 8004c10:	0801e5a8 	.word	0x0801e5a8

08004c14 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8004c14:	4770      	bx	lr

08004c16 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8004c16:	4770      	bx	lr

08004c18 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8004c18:	f7ff b82f 	b.w	8003c7a <_ZN15Screen2ViewBase11setupScreenEv>

08004c1c <_ZN11Screen2View21buttonClear_p2ClickedEv>:
	fillBuffer(0);
}

void Screen2View::buttonClear_p2Clicked()
{
	rpmScreenBuffer = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <_ZN11Screen2View21buttonClear_p2ClickedEv+0x24>)
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004c20:	2105      	movs	r1, #5
{
 8004c22:	b510      	push	{r4, lr}
 8004c24:	4604      	mov	r4, r0
	rpmScreenBuffer = 0;
 8004c26:	6013      	str	r3, [r2, #0]
	Unicode::snprintf(textAreaSRPMBuffer, TEXTAREASRPM_SIZE, "%d", rpmScreenBuffer);
 8004c28:	f200 50fc 	addw	r0, r0, #1532	; 0x5fc
 8004c2c:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <_ZN11Screen2View21buttonClear_p2ClickedEv+0x28>)
 8004c2e:	f00e fca9 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004c32:	f204 4094 	addw	r0, r4, #1172	; 0x494

}
 8004c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004c3a:	f00c bd0f 	b.w	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004c3e:	bf00      	nop
 8004c40:	24001880 	.word	0x24001880
 8004c44:	0801e51e 	.word	0x0801e51e

08004c48 <_ZN11Screen2View20button2DirectClickedEv>:
	adjustRPM(0);
	adjustMIAndFreq(0, 0.0);
}
void Screen2View::button2DirectClicked()
{
	togglePiFlag(0);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7fb bd79 	b.w	8000740 <togglePiFlag>
	...

08004c50 <_ZN11Screen2View20buttonSend_p2ClickedEv>:
{
 8004c50:	b508      	push	{r3, lr}
	togglePiFlag(1);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f7fb fd74 	bl	8000740 <togglePiFlag>
	adjustRPM(rpmScreenBuffer);
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <_ZN11Screen2View20buttonSend_p2ClickedEv+0x14>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
}
 8004c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustRPM(rpmScreenBuffer);
 8004c60:	f7fb be32 	b.w	80008c8 <adjustRPM>
 8004c64:	24001880 	.word	0x24001880

08004c68 <_ZN11Screen2View21buttonPower_p2ClickedEv>:
{
 8004c68:	b508      	push	{r3, lr}
	buttonClear_p2Clicked();
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	4798      	blx	r3
	adjustRPM(0);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fb fe29 	bl	80008c8 <adjustRPM>
	adjustMIAndFreq(0, 0.0);
 8004c76:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004c84 <_ZN11Screen2View21buttonPower_p2ClickedEv+0x1c>
 8004c7a:	2000      	movs	r0, #0
}
 8004c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	adjustMIAndFreq(0, 0.0);
 8004c80:	f7fb be84 	b.w	800098c <adjustMIAndFreq>
 8004c84:	00000000 	.word	0x00000000

08004c88 <_ZN11Screen2ViewD0Ev>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	f240 6124 	movw	r1, #1572	; 0x624
 8004c90:	f017 fa0e 	bl	801c0b0 <_ZdlPvj>
 8004c94:	4620      	mov	r0, r4
 8004c96:	bd10      	pop	{r4, pc}

08004c98 <_ZN11Screen2View15handleTickEventEv>:
}
void Screen2View::handleTickEvent()
{
	count++;
 8004c98:	f8d0 3620 	ldr.w	r3, [r0, #1568]	; 0x620
 8004c9c:	3301      	adds	r3, #1
	if (count>10){
 8004c9e:	2b0a      	cmp	r3, #10
{
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
	if (count>10){
 8004ca4:	d802      	bhi.n	8004cac <_ZN11Screen2View15handleTickEventEv+0x14>
	count++;
 8004ca6:	f8c0 3620 	str.w	r3, [r0, #1568]	; 0x620

		count = 0;
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
		textAreaMRPM.invalidate();
	}
}
 8004caa:	bd10      	pop	{r4, pc}
		count = 0;
 8004cac:	2300      	movs	r3, #0
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <_ZN11Screen2View15handleTickEventEv+0x38>)
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	f200 6006 	addw	r0, r0, #1542	; 0x606
		count = 0;
 8004cb6:	f8c0 301a 	str.w	r3, [r0, #26]
		Unicode::snprintf(textAreaMRPMBuffer, TEXTAREAMRPM_SIZE, "%d", newAvgRpm);
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <_ZN11Screen2View15handleTickEventEv+0x3c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f00e fc61 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textAreaMRPM.invalidate();
 8004cc2:	f204 5044 	addw	r0, r4, #1348	; 0x544
}
 8004cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		textAreaMRPM.invalidate();
 8004cca:	f00c bcc7 	b.w	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004cce:	bf00      	nop
 8004cd0:	0801e51e 	.word	0x0801e51e
 8004cd4:	2400018c 	.word	0x2400018c

08004cd8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	4604      	mov	r4, r0
 8004cdc:	f7ff f866 	bl	8003dac <_ZN15Screen2ViewBaseC1Ev>
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <_ZN11Screen2ViewC1Ev+0x18>)
}
 8004ce2:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c4 3620 	str.w	r3, [r4, #1568]	; 0x620
}
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	bf00      	nop
 8004cf0:	0801e5d8 	.word	0x0801e5d8

08004cf4 <_ZN11Screen2View10fillBufferEh>:
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4604      	mov	r4, r0
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <_ZN11Screen2View10fillBufferEh+0x28>)
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	fb03 1302 	mla	r3, r3, r2, r1
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004d02:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <_ZN11Screen2View10fillBufferEh+0x2c>)
 8004d04:	2105      	movs	r1, #5
	rpmScreenBuffer = (rpmScreenBuffer * 10) + foo;
 8004d06:	6003      	str	r3, [r0, #0]
	Unicode::snprintf(textAreaSRPMBuffer, 5, "%d", rpmScreenBuffer);
 8004d08:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
 8004d0c:	f00e fc3a 	bl	8013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSRPM.invalidate();
 8004d10:	f204 4094 	addw	r0, r4, #1172	; 0x494
}
 8004d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textAreaSRPM.invalidate();
 8004d18:	f00c bca0 	b.w	801165c <_ZNK8touchgfx8Drawable10invalidateEv>
 8004d1c:	24001880 	.word	0x24001880
 8004d20:	0801e51e 	.word	0x0801e51e

08004d24 <_ZN11Screen2View17button7_p2ClickedEv>:
	fillBuffer(7);
 8004d24:	2107      	movs	r1, #7
 8004d26:	f7ff bfe5 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d2a <_ZN11Screen2View17button8_p2ClickedEv>:
	fillBuffer(8);
 8004d2a:	2108      	movs	r1, #8
 8004d2c:	f7ff bfe2 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d30 <_ZN11Screen2View17button9_p2ClickedEv>:
	fillBuffer(9);
 8004d30:	2109      	movs	r1, #9
 8004d32:	f7ff bfdf 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d36 <_ZN11Screen2View17button4_p2ClickedEv>:
	fillBuffer(4);
 8004d36:	2104      	movs	r1, #4
 8004d38:	f7ff bfdc 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d3c <_ZN11Screen2View17button5_p2ClickedEv>:
	fillBuffer(5);
 8004d3c:	2105      	movs	r1, #5
 8004d3e:	f7ff bfd9 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d42 <_ZN11Screen2View17button6_p2ClickedEv>:
	fillBuffer(6);
 8004d42:	2106      	movs	r1, #6
 8004d44:	f7ff bfd6 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d48 <_ZN11Screen2View17button1_p2ClickedEv>:
	fillBuffer(1);
 8004d48:	2101      	movs	r1, #1
 8004d4a:	f7ff bfd3 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d4e <_ZN11Screen2View17button2_p2ClickedEv>:
	fillBuffer(2);
 8004d4e:	2102      	movs	r1, #2
 8004d50:	f7ff bfd0 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d54 <_ZN11Screen2View17button3_p2ClickedEv>:
	fillBuffer(3);
 8004d54:	2103      	movs	r1, #3
 8004d56:	f7ff bfcd 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d5a <_ZN11Screen2View17button0_p2ClickedEv>:
	fillBuffer(0);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f7ff bfca 	b.w	8004cf4 <_ZN11Screen2View10fillBufferEh>

08004d60 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004d60:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8004d68:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004d6a:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8004d6c:	2305      	movs	r3, #5
 8004d6e:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004d70:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004d74:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004d78:	4770      	bx	lr

08004d7a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8004d7a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004d7e:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004d80:	bf04      	itt	eq
 8004d82:	2300      	moveq	r3, #0
 8004d84:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4770      	bx	lr

08004d8c <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4770      	bx	lr

08004d90 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d90:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d92:	6904      	ldr	r4, [r0, #16]
 8004d94:	8900      	ldrh	r0, [r0, #8]
 8004d96:	46a4      	mov	ip, r4
}
 8004d98:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d9c:	4760      	bx	ip

08004d9e <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d9e:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004da0:	68c4      	ldr	r4, [r0, #12]
 8004da2:	8900      	ldrh	r0, [r0, #8]
 8004da4:	46a4      	mov	ip, r4
}
 8004da6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004daa:	4760      	bx	ip

08004dac <FT5336_GestureConfig>:
{
 8004dac:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004db0:	f100 0818 	add.w	r8, r0, #24
{
 8004db4:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004db6:	7809      	ldrb	r1, [r1, #0]
 8004db8:	4640      	mov	r0, r8
 8004dba:	f000 f8fb 	bl	8004fb4 <ft5336_radian_value>
 8004dbe:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004dc0:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	f000 f901 	bl	8004fcc <ft5336_offset_left_right>
 8004dca:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004dcc:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	f000 f907 	bl	8004fe4 <ft5336_offset_up_down>
 8004dd6:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004dd8:	f899 100c 	ldrb.w	r1, [r9, #12]
 8004ddc:	4640      	mov	r0, r8
 8004dde:	f000 f90d 	bl	8004ffc <ft5336_disatnce_left_right>
 8004de2:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004de4:	f899 1010 	ldrb.w	r1, [r9, #16]
 8004de8:	4640      	mov	r0, r8
 8004dea:	f000 f913 	bl	8005014 <ft5336_distance_up_down>
 8004dee:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004df0:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004df4:	4640      	mov	r0, r8
 8004df6:	f000 f919 	bl	800502c <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8004dfa:	42c5      	cmn	r5, r0
}
 8004dfc:	bf14      	ite	ne
 8004dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8004e02:	2000      	moveq	r0, #0
 8004e04:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08004e08 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8004e08:	3018      	adds	r0, #24
 8004e0a:	f000 b927 	b.w	800505c <ft5336_chip_id>

08004e0e <FT5336_GetMultiTouchState>:
{
 8004e0e:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004e10:	f100 0518 	add.w	r5, r0, #24
{
 8004e14:	b088      	sub	sp, #32
 8004e16:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004e18:	4628      	mov	r0, r5
 8004e1a:	4669      	mov	r1, sp
 8004e1c:	f000 f8bd 	bl	8004f9a <ft5336_td_status>
 8004e20:	bb98      	cbnz	r0, 8004e8a <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004e22:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	bf98      	it	ls
 8004e2a:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004e2c:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004e2e:	231e      	movs	r3, #30
 8004e30:	466a      	mov	r2, sp
 8004e32:	2103      	movs	r1, #3
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 f89d 	bl	8004f74 <ft5336_read_reg>
 8004e3a:	bb48      	cbnz	r0, 8004e90 <FT5336_GetMultiTouchState+0x82>
 8004e3c:	466b      	mov	r3, sp
 8004e3e:	1d22      	adds	r2, r4, #4
 8004e40:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e44:	781d      	ldrb	r5, [r3, #0]
 8004e46:	3306      	adds	r3, #6
 8004e48:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8004e4c:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004e4e:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e50:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004e54:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e56:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8004e5a:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004e5e:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e60:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8004e64:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8004e66:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8004e6a:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8004e6e:	ea44 0406 	orr.w	r4, r4, r6
 8004e72:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8004e74:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8004e78:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8004e7a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8004e7e:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8004e82:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8004e84:	d1de      	bne.n	8004e44 <FT5336_GetMultiTouchState+0x36>
}
 8004e86:	b008      	add	sp, #32
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	e7cd      	b.n	8004e2c <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004e94:	e7f7      	b.n	8004e86 <FT5336_GetMultiTouchState+0x78>

08004e96 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8004e96:	3018      	adds	r0, #24
 8004e98:	f000 b87a 	b.w	8004f90 <ft5336_gest_id>

08004e9c <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	3018      	adds	r0, #24
 8004ea0:	f000 b8d0 	b.w	8005044 <ft5336_g_mode>

08004ea4 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	3018      	adds	r0, #24
 8004ea8:	f000 b8cc 	b.w	8005044 <ft5336_g_mode>

08004eac <FT5336_Init>:
{
 8004eac:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004eae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8004eb2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004eb4:	b96b      	cbnz	r3, 8004ed2 <FT5336_Init+0x26>
    pObj->IO.Init();
 8004eb6:	6803      	ldr	r3, [r0, #0]
 8004eb8:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fff2 	bl	8004ea4 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8004ec0:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004ec2:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8004ec6:	bf18      	it	ne
 8004ec8:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004eca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8004ece:	4240      	negs	r0, r0
}
 8004ed0:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8004ed2:	2000      	movs	r0, #0
  return ret;
 8004ed4:	e7fc      	b.n	8004ed0 <FT5336_Init+0x24>

08004ed6 <FT5336_ClearIT>:
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	4770      	bx	lr

08004eda <FT5336_GetState>:
{
 8004eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004edc:	f100 0518 	add.w	r5, r0, #24
{
 8004ee0:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8004ee2:	a901      	add	r1, sp, #4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f858 	bl	8004f9a <ft5336_td_status>
 8004eea:	bb08      	cbnz	r0, 8004f30 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8004eec:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	bf98      	it	ls
 8004ef4:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004ef6:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8004ef8:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8004efa:	2103      	movs	r1, #3
 8004efc:	4628      	mov	r0, r5
 8004efe:	eb0d 0203 	add.w	r2, sp, r3
 8004f02:	f000 f837 	bl	8004f74 <ft5336_read_reg>
 8004f06:	b9b0      	cbnz	r0, 8004f36 <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004f08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f16:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004f18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8004f1c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8004f1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60a3      	str	r3, [r4, #8]
}
 8004f2c:	b003      	add	sp, #12
 8004f2e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	e7df      	b.n	8004ef6 <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004f3a:	e7f7      	b.n	8004f2c <FT5336_GetState+0x52>

08004f3c <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8004f3c:	b190      	cbz	r0, 8004f64 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004f3e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004f40:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004f42:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004f44:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004f46:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004f48:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004f4a:	68ca      	ldr	r2, [r1, #12]
 8004f4c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004f4e:	690a      	ldr	r2, [r1, #16]
 8004f50:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f52:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004f54:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004f56:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <FT5336_RegisterBusIO+0x30>)
 8004f5a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <FT5336_RegisterBusIO+0x34>)
 8004f5e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004f60:	b103      	cbz	r3, 8004f64 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004f62:	4718      	bx	r3
}
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	08004d91 	.word	0x08004d91
 8004f70:	08004d9f 	.word	0x08004d9f

08004f74 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004f74:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004f76:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004f7a:	46a4      	mov	ip, r4
}
 8004f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004f80:	4760      	bx	ip

08004f82 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004f82:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004f84:	6804      	ldr	r4, [r0, #0]
 8004f86:	6880      	ldr	r0, [r0, #8]
 8004f88:	46a4      	mov	ip, r4
}
 8004f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004f8e:	4760      	bx	ip

08004f90 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004f90:	2301      	movs	r3, #1
{
 8004f92:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8004f94:	4619      	mov	r1, r3
 8004f96:	f7ff bfed 	b.w	8004f74 <ft5336_read_reg>

08004f9a <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8004f9a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004f9c:	460a      	mov	r2, r1
{
 8004f9e:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	f7ff ffe6 	bl	8004f74 <ft5336_read_reg>
  
  if(ret == 0)
 8004fa8:	b918      	cbnz	r0, 8004fb2 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8004faa:	7823      	ldrb	r3, [r4, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fb4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8004fb6:	2301      	movs	r3, #1
{
 8004fb8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8004fbc:	f10d 0207 	add.w	r2, sp, #7
 8004fc0:	2191      	movs	r1, #145	; 0x91
 8004fc2:	f7ff ffde 	bl	8004f82 <ft5336_write_reg>
}
 8004fc6:	b003      	add	sp, #12
 8004fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08004fcc <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fcc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8004fce:	2301      	movs	r3, #1
{
 8004fd0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8004fd4:	f10d 0207 	add.w	r2, sp, #7
 8004fd8:	2192      	movs	r1, #146	; 0x92
 8004fda:	f7ff ffd2 	bl	8004f82 <ft5336_write_reg>
}
 8004fde:	b003      	add	sp, #12
 8004fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08004fe4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8004fe4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8004fe6:	2301      	movs	r3, #1
{
 8004fe8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8004fec:	f10d 0207 	add.w	r2, sp, #7
 8004ff0:	2193      	movs	r1, #147	; 0x93
 8004ff2:	f7ff ffc6 	bl	8004f82 <ft5336_write_reg>
}
 8004ff6:	b003      	add	sp, #12
 8004ff8:	f85d fb04 	ldr.w	pc, [sp], #4

08004ffc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8004ffc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8004ffe:	2301      	movs	r3, #1
{
 8005000:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8005004:	f10d 0207 	add.w	r2, sp, #7
 8005008:	2194      	movs	r1, #148	; 0x94
 800500a:	f7ff ffba 	bl	8004f82 <ft5336_write_reg>
}
 800500e:	b003      	add	sp, #12
 8005010:	f85d fb04 	ldr.w	pc, [sp], #4

08005014 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005014:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8005016:	2301      	movs	r3, #1
{
 8005018:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800501c:	f10d 0207 	add.w	r2, sp, #7
 8005020:	2195      	movs	r1, #149	; 0x95
 8005022:	f7ff ffae 	bl	8004f82 <ft5336_write_reg>
}
 8005026:	b003      	add	sp, #12
 8005028:	f85d fb04 	ldr.w	pc, [sp], #4

0800502c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800502c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800502e:	2301      	movs	r3, #1
{
 8005030:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8005034:	f10d 0207 	add.w	r2, sp, #7
 8005038:	2196      	movs	r1, #150	; 0x96
 800503a:	f7ff ffa2 	bl	8004f82 <ft5336_write_reg>
}
 800503e:	b003      	add	sp, #12
 8005040:	f85d fb04 	ldr.w	pc, [sp], #4

08005044 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8005044:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8005046:	2301      	movs	r3, #1
{
 8005048:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800504c:	f10d 0207 	add.w	r2, sp, #7
 8005050:	21a4      	movs	r1, #164	; 0xa4
 8005052:	f7ff ff96 	bl	8004f82 <ft5336_write_reg>
}
 8005056:	b003      	add	sp, #12
 8005058:	f85d fb04 	ldr.w	pc, [sp], #4

0800505c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800505c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800505e:	2301      	movs	r3, #1
 8005060:	21a8      	movs	r1, #168	; 0xa8
 8005062:	f7ff bf87 	b.w	8004f74 <ft5336_read_reg>

08005066 <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8005066:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800506a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800506e:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8005072:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8005076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800507a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8005082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8005086:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800508a:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800508c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005090:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 8005094:	2000      	movs	r0, #0
 8005096:	4770      	bx	lr

08005098 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	b09a      	sub	sp, #104	; 0x68
 800509c:	460d      	mov	r5, r1
 800509e:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 80050a0:	2100      	movs	r1, #0
{
 80050a2:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 80050a4:	a806      	add	r0, sp, #24
 80050a6:	2250      	movs	r2, #80	; 0x50
 80050a8:	f017 f9a4 	bl	801c3f4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80050ac:	2214      	movs	r2, #20
 80050ae:	2100      	movs	r1, #0
 80050b0:	a801      	add	r0, sp, #4
 80050b2:	f017 f99f 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80050b6:	b92d      	cbnz	r5, 80050c4 <MX25LM51245G_AutoPollingMemReady+0x2c>
 80050b8:	2c01      	cmp	r4, #1
 80050ba:	d103      	bne.n	80050c4 <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80050c0:	b01a      	add	sp, #104	; 0x68
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80050c4:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050c6:	a906      	add	r1, sp, #24
 80050c8:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80050ca:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 80050cc:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80050ce:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80050d0:	bf0c      	ite	eq
 80050d2:	2201      	moveq	r2, #1
 80050d4:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80050d6:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 80050d8:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80050da:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80050dc:	bf14      	ite	ne
 80050de:	461a      	movne	r2, r3
 80050e0:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80050e2:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80050e4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80050e6:	bf0c      	ite	eq
 80050e8:	461a      	moveq	r2, r3
 80050ea:	2210      	movne	r2, #16
 80050ec:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80050ee:	f240 52fa 	movw	r2, #1530	; 0x5fa
 80050f2:	bf08      	it	eq
 80050f4:	2205      	moveq	r2, #5
 80050f6:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80050f8:	bf0c      	ite	eq
 80050fa:	461a      	moveq	r2, r3
 80050fc:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005100:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005102:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005104:	bf14      	ite	ne
 8005106:	461a      	movne	r2, r3
 8005108:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800510c:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800510e:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005110:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005114:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005116:	bf0c      	ite	eq
 8005118:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800511c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005120:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005122:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005124:	bf14      	ite	ne
 8005126:	461a      	movne	r2, r3
 8005128:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800512c:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800512e:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005130:	bf0c      	ite	eq
 8005132:	461a      	moveq	r2, r3
 8005134:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005136:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005138:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800513a:	bf0c      	ite	eq
 800513c:	2202      	moveq	r2, #2
 800513e:	2201      	movne	r2, #1
 8005140:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005142:	bf14      	ite	ne
 8005144:	461a      	movne	r2, r3
 8005146:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800514a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800514e:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005150:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005154:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005158:	2210      	movs	r2, #16
 800515a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800515e:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	f002 fbd0 	bl	800790a <HAL_OSPI_Command>
 800516a:	2800      	cmp	r0, #0
 800516c:	d1a6      	bne.n	80050bc <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	a901      	add	r1, sp, #4
 8005174:	4630      	mov	r0, r6
 8005176:	f002 fd05 	bl	8007b84 <HAL_OSPI_AutoPolling>
 800517a:	3800      	subs	r0, #0
 800517c:	bf18      	it	ne
 800517e:	2001      	movne	r0, #1
 8005180:	4240      	negs	r0, r0
 8005182:	e79d      	b.n	80050c0 <MX25LM51245G_AutoPollingMemReady+0x28>

08005184 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	b096      	sub	sp, #88	; 0x58
 8005188:	460c      	mov	r4, r1
 800518a:	4606      	mov	r6, r0
 800518c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800518e:	2100      	movs	r1, #0
 8005190:	2250      	movs	r2, #80	; 0x50
 8005192:	a802      	add	r0, sp, #8
 8005194:	f017 f92e 	bl	801c3f4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005198:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800519a:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800519c:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80051a0:	d104      	bne.n	80051ac <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 80051a2:	b91d      	cbnz	r5, 80051ac <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80051a8:	b016      	add	sp, #88	; 0x58
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80051ac:	2300      	movs	r3, #0
 80051ae:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80051b0:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80051b2:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80051b4:	bf0c      	ite	eq
 80051b6:	2201      	moveq	r2, #1
 80051b8:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80051ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80051be:	bf18      	it	ne
 80051c0:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80051c2:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80051c4:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80051c6:	d146      	bne.n	8005256 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	230b      	moveq	r3, #11
 80051ce:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80051d0:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80051d2:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051d4:	a902      	add	r1, sp, #8
 80051d6:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80051d8:	bf0c      	ite	eq
 80051da:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80051de:	f44f 6380 	movne.w	r3, #1024	; 0x400
 80051e2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80051e4:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051e6:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80051e8:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80051ea:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051ec:	bf0c      	ite	eq
 80051ee:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80051f2:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80051f6:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80051f8:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80051fa:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80051fc:	bf0c      	ite	eq
 80051fe:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8005202:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005206:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005208:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800520a:	bf0c      	ite	eq
 800520c:	2208      	moveq	r2, #8
 800520e:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005210:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	f002 fb77 	bl	800790a <HAL_OSPI_Command>
 800521c:	2800      	cmp	r0, #0
 800521e:	d1c1      	bne.n	80051a4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005220:	2302      	movs	r3, #2
 8005222:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005224:	b9d4      	cbnz	r4, 800525c <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 8005226:	2d00      	cmp	r5, #0
 8005228:	bf18      	it	ne
 800522a:	2312      	movne	r3, #18
 800522c:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 800522e:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	a902      	add	r1, sp, #8
 8005236:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 8005238:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800523a:	f002 fb66 	bl	800790a <HAL_OSPI_Command>
 800523e:	2800      	cmp	r0, #0
 8005240:	d1b0      	bne.n	80051a4 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8005242:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8005244:	4669      	mov	r1, sp
 8005246:	4630      	mov	r0, r6
 8005248:	f002 fcec 	bl	8007c24 <HAL_OSPI_MemoryMapped>
 800524c:	3800      	subs	r0, #0
 800524e:	bf18      	it	ne
 8005250:	2001      	movne	r0, #1
 8005252:	4240      	negs	r0, r0
 8005254:	e7a8      	b.n	80051a8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005256:	f64e 4313 	movw	r3, #60435	; 0xec13
 800525a:	e7b9      	b.n	80051d0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800525c:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8005260:	e7e4      	b.n	800522c <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

08005262 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8005262:	b510      	push	{r4, lr}
 8005264:	b096      	sub	sp, #88	; 0x58
 8005266:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8005268:	2228      	movs	r2, #40	; 0x28
 800526a:	2100      	movs	r1, #0
 800526c:	a808      	add	r0, sp, #32
 800526e:	f017 f8c1 	bl	801c3f4 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005272:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8005274:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8005276:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005278:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800527c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005280:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8005284:	2204      	movs	r2, #4
 8005286:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8005288:	2210      	movs	r2, #16
 800528a:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800528e:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005292:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8005294:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8005296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800529a:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800529c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80052a0:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80052a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052a8:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80052aa:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80052ac:	2206      	movs	r2, #6
 80052ae:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80052b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80052b6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80052be:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052c2:	f002 fb22 	bl	800790a <HAL_OSPI_Command>
 80052c6:	b118      	cbz	r0, 80052d0 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80052cc:	b016      	add	sp, #88	; 0x58
 80052ce:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80052d0:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80052d8:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80052da:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80052de:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052e2:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80052e4:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052e6:	f002 fb10 	bl	800790a <HAL_OSPI_Command>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1ec      	bne.n	80052c8 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80052ee:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80052f0:	4669      	mov	r1, sp
 80052f2:	4620      	mov	r0, r4
 80052f4:	f002 fc96 	bl	8007c24 <HAL_OSPI_MemoryMapped>
 80052f8:	3800      	subs	r0, #0
 80052fa:	bf18      	it	ne
 80052fc:	2001      	movne	r0, #1
 80052fe:	4240      	negs	r0, r0
 8005300:	e7e4      	b.n	80052cc <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

08005302 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005302:	b570      	push	{r4, r5, r6, lr}
 8005304:	b09a      	sub	sp, #104	; 0x68
 8005306:	460c      	mov	r4, r1
 8005308:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 800530a:	2100      	movs	r1, #0
{
 800530c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800530e:	a806      	add	r0, sp, #24
 8005310:	2250      	movs	r2, #80	; 0x50
 8005312:	f017 f86f 	bl	801c3f4 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005316:	2214      	movs	r2, #20
 8005318:	2100      	movs	r1, #0
 800531a:	a801      	add	r0, sp, #4
 800531c:	f017 f86a 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005320:	b92c      	cbnz	r4, 800532e <MX25LM51245G_WriteEnable+0x2c>
 8005322:	2d01      	cmp	r5, #1
 8005324:	d103      	bne.n	800532e <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 8005326:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800532a:	b01a      	add	sp, #104	; 0x68
 800532c:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800532e:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005330:	a906      	add	r1, sp, #24
 8005332:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005334:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005336:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005338:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800533a:	bf0c      	ite	eq
 800533c:	2201      	moveq	r2, #1
 800533e:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005340:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8005342:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005344:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005346:	bf0c      	ite	eq
 8005348:	2208      	moveq	r2, #8
 800534a:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800534c:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800534e:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005350:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005352:	bf0c      	ite	eq
 8005354:	461a      	moveq	r2, r3
 8005356:	2210      	movne	r2, #16
 8005358:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800535a:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800535e:	bf08      	it	eq
 8005360:	2206      	moveq	r2, #6
 8005362:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005368:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800536c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005370:	f002 facb 	bl	800790a <HAL_OSPI_Command>
 8005374:	2800      	cmp	r0, #0
 8005376:	d1d6      	bne.n	8005326 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005378:	2c00      	cmp	r4, #0
 800537a:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 800537e:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005384:	bf08      	it	eq
 8005386:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005388:	a906      	add	r1, sp, #24
 800538a:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800538c:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800538e:	bf0c      	ite	eq
 8005390:	2300      	moveq	r3, #0
 8005392:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005396:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005398:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800539a:	bf0c      	ite	eq
 800539c:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80053a0:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053a2:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80053a4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80053a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80053aa:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053ac:	bf0c      	ite	eq
 80053ae:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80053b2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80053b6:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053b8:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80053ba:	bf0c      	ite	eq
 80053bc:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80053c0:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80053c2:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80053c4:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80053c6:	bf0c      	ite	eq
 80053c8:	2300      	moveq	r3, #0
 80053ca:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80053cc:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80053ce:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80053d0:	bf0c      	ite	eq
 80053d2:	2302      	moveq	r3, #2
 80053d4:	2301      	movne	r3, #1
 80053d6:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80053d8:	bf0c      	ite	eq
 80053da:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 80053de:	2300      	movne	r3, #0
 80053e0:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053e2:	f002 fa92 	bl	800790a <HAL_OSPI_Command>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d19d      	bne.n	8005326 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 80053ea:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80053ec:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80053ee:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053f0:	a901      	add	r1, sp, #4
 80053f2:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 80053f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80053f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053fc:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	f002 fbbe 	bl	8007b84 <HAL_OSPI_AutoPolling>
 8005408:	3800      	subs	r0, #0
 800540a:	bf18      	it	ne
 800540c:	2001      	movne	r0, #1
 800540e:	4240      	negs	r0, r0
 8005410:	e78b      	b.n	800532a <MX25LM51245G_WriteEnable+0x28>

08005412 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8005412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005414:	b095      	sub	sp, #84	; 0x54
 8005416:	460d      	mov	r5, r1
 8005418:	4606      	mov	r6, r0
 800541a:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800541c:	2100      	movs	r1, #0
 800541e:	2250      	movs	r2, #80	; 0x50
 8005420:	4668      	mov	r0, sp
{
 8005422:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8005424:	f016 ffe6 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005428:	b92d      	cbnz	r5, 8005436 <MX25LM51245G_WriteCfg2Register+0x24>
 800542a:	2c01      	cmp	r4, #1
 800542c:	d103      	bne.n	8005436 <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 800542e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005432:	b015      	add	sp, #84	; 0x54
 8005434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005436:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 8005438:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800543a:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800543c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005444:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005446:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005448:	bf0c      	ite	eq
 800544a:	2308      	moveq	r3, #8
 800544c:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800544e:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005450:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005452:	bf0c      	ite	eq
 8005454:	4613      	moveq	r3, r2
 8005456:	2310      	movne	r3, #16
 8005458:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800545a:	f247 238d 	movw	r3, #29325	; 0x728d
 800545e:	bf08      	it	eq
 8005460:	2372      	moveq	r3, #114	; 0x72
 8005462:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005464:	bf0c      	ite	eq
 8005466:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800546a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800546e:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005470:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005472:	bf0c      	ite	eq
 8005474:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8005478:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800547a:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800547c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800547e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005482:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005484:	bf0c      	ite	eq
 8005486:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800548a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800548e:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005490:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005492:	bf0c      	ite	eq
 8005494:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8005498:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800549a:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 800549e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80054a2:	b1d5      	cbz	r5, 80054da <MX25LM51245G_WriteCfg2Register+0xc8>
 80054a4:	2c01      	cmp	r4, #1
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2302      	moveq	r3, #2
 80054ac:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80054ae:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b4:	4669      	mov	r1, sp
 80054b6:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80054b8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054bc:	f002 fa25 	bl	800790a <HAL_OSPI_Command>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d1b4      	bne.n	800542e <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	a91a      	add	r1, sp, #104	; 0x68
 80054ca:	4630      	mov	r0, r6
 80054cc:	f002 fac8 	bl	8007a60 <HAL_OSPI_Transmit>
 80054d0:	3800      	subs	r0, #0
 80054d2:	bf18      	it	ne
 80054d4:	2001      	movne	r0, #1
 80054d6:	4240      	negs	r0, r0
 80054d8:	e7ab      	b.n	8005432 <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80054da:	2301      	movs	r3, #1
 80054dc:	e7e6      	b.n	80054ac <MX25LM51245G_WriteCfg2Register+0x9a>

080054de <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80054de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e0:	b095      	sub	sp, #84	; 0x54
 80054e2:	460d      	mov	r5, r1
 80054e4:	4606      	mov	r6, r0
 80054e6:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80054e8:	2100      	movs	r1, #0
 80054ea:	2250      	movs	r2, #80	; 0x50
 80054ec:	4668      	mov	r0, sp
{
 80054ee:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80054f0:	f016 ff80 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80054f4:	b92d      	cbnz	r5, 8005502 <MX25LM51245G_ReadCfg2Register+0x24>
 80054f6:	2c01      	cmp	r4, #1
 80054f8:	d103      	bne.n	8005502 <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 80054fa:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80054fe:	b015      	add	sp, #84	; 0x54
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005502:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005504:	4669      	mov	r1, sp
 8005506:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8005508:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800550a:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800550c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005514:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005516:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005518:	bf14      	ite	ne
 800551a:	4613      	movne	r3, r2
 800551c:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800551e:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005520:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005522:	bf0c      	ite	eq
 8005524:	4613      	moveq	r3, r2
 8005526:	2310      	movne	r3, #16
 8005528:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800552a:	f247 138e 	movw	r3, #29070	; 0x718e
 800552e:	bf08      	it	eq
 8005530:	2371      	moveq	r3, #113	; 0x71
 8005532:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005534:	bf0c      	ite	eq
 8005536:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800553a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800553e:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005540:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005542:	bf14      	ite	ne
 8005544:	4613      	movne	r3, r2
 8005546:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800554a:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800554c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800554e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005552:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005554:	bf0c      	ite	eq
 8005556:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800555a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800555e:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005560:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005562:	bf14      	ite	ne
 8005564:	4613      	movne	r3, r2
 8005566:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800556a:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800556c:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800556e:	bf0c      	ite	eq
 8005570:	4613      	moveq	r3, r2
 8005572:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005574:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005576:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005578:	bf0c      	ite	eq
 800557a:	2302      	moveq	r3, #2
 800557c:	2301      	movne	r3, #1
 800557e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005580:	bf14      	ite	ne
 8005582:	4613      	movne	r3, r2
 8005584:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005588:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800558c:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005590:	f241 3288 	movw	r2, #5000	; 0x1388
 8005594:	f002 f9b9 	bl	800790a <HAL_OSPI_Command>
 8005598:	2800      	cmp	r0, #0
 800559a:	d1ae      	bne.n	80054fa <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800559c:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055a2:	4630      	mov	r0, r6
 80055a4:	f002 fa9c 	bl	8007ae0 <HAL_OSPI_Receive>
 80055a8:	3800      	subs	r0, #0
 80055aa:	bf18      	it	ne
 80055ac:	2001      	movne	r0, #1
 80055ae:	4240      	negs	r0, r0
 80055b0:	e7a5      	b.n	80054fe <MX25LM51245G_ReadCfg2Register+0x20>

080055b2 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80055b2:	b570      	push	{r4, r5, r6, lr}
 80055b4:	b094      	sub	sp, #80	; 0x50
 80055b6:	460c      	mov	r4, r1
 80055b8:	4606      	mov	r6, r0
 80055ba:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80055bc:	2100      	movs	r1, #0
 80055be:	2250      	movs	r2, #80	; 0x50
 80055c0:	4668      	mov	r0, sp
 80055c2:	f016 ff17 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80055c6:	b90c      	cbnz	r4, 80055cc <MX25LM51245G_ResetEnable+0x1a>
 80055c8:	2d01      	cmp	r5, #1
 80055ca:	d028      	beq.n	800561e <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80055cc:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055ce:	4669      	mov	r1, sp
 80055d0:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055d2:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80055d4:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80055d6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055d8:	bf0c      	ite	eq
 80055da:	2201      	moveq	r2, #1
 80055dc:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055de:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80055e0:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80055e2:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055e4:	bf14      	ite	ne
 80055e6:	461a      	movne	r2, r3
 80055e8:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055ea:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80055ec:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80055ee:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055f0:	bf0c      	ite	eq
 80055f2:	461a      	moveq	r2, r3
 80055f4:	2210      	movne	r2, #16
 80055f6:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80055f8:	f246 6299 	movw	r2, #26265	; 0x6699
 80055fc:	bf08      	it	eq
 80055fe:	2266      	moveq	r2, #102	; 0x66
 8005600:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005606:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800560a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800560e:	f002 f97c 	bl	800790a <HAL_OSPI_Command>
 8005612:	3800      	subs	r0, #0
 8005614:	bf18      	it	ne
 8005616:	2001      	movne	r0, #1
 8005618:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800561a:	b014      	add	sp, #80	; 0x50
 800561c:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	e7fa      	b.n	800561a <MX25LM51245G_ResetEnable+0x68>

08005624 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	b094      	sub	sp, #80	; 0x50
 8005628:	460c      	mov	r4, r1
 800562a:	4606      	mov	r6, r0
 800562c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800562e:	2100      	movs	r1, #0
 8005630:	2250      	movs	r2, #80	; 0x50
 8005632:	4668      	mov	r0, sp
 8005634:	f016 fede 	bl	801c3f4 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005638:	b90c      	cbnz	r4, 800563e <MX25LM51245G_ResetMemory+0x1a>
 800563a:	2d01      	cmp	r5, #1
 800563c:	d028      	beq.n	8005690 <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800563e:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005640:	4669      	mov	r1, sp
 8005642:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005644:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005646:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005648:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800564a:	bf0c      	ite	eq
 800564c:	2201      	moveq	r2, #1
 800564e:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005650:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8005652:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005654:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005656:	bf14      	ite	ne
 8005658:	461a      	movne	r2, r3
 800565a:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800565c:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800565e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005660:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005662:	bf0c      	ite	eq
 8005664:	461a      	moveq	r2, r3
 8005666:	2210      	movne	r2, #16
 8005668:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800566a:	f649 1266 	movw	r2, #39270	; 0x9966
 800566e:	bf08      	it	eq
 8005670:	2299      	moveq	r2, #153	; 0x99
 8005672:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005674:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005678:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800567c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005680:	f002 f943 	bl	800790a <HAL_OSPI_Command>
 8005684:	3800      	subs	r0, #0
 8005686:	bf18      	it	ne
 8005688:	2001      	movne	r0, #1
 800568a:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800568c:	b014      	add	sp, #80	; 0x50
 800568e:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	e7fa      	b.n	800568c <MX25LM51245G_ResetMemory+0x68>
	...

08005698 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 8005698:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <BSP_I2C4_DeInit+0x48>)
{
 800569a:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	b90b      	cbnz	r3, 80056a4 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 80056a0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 80056a2:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 80056a4:	3b01      	subs	r3, #1
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f9      	bne.n	80056a0 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80056ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056b0:	480c      	ldr	r0, [pc, #48]	; (80056e4 <BSP_I2C4_DeInit+0x4c>)
 80056b2:	f001 f959 	bl	8006968 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80056b6:	480b      	ldr	r0, [pc, #44]	; (80056e4 <BSP_I2C4_DeInit+0x4c>)
 80056b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056bc:	f001 f954 	bl	8006968 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80056c0:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80056c2:	480a      	ldr	r0, [pc, #40]	; (80056ec <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 80056c4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80056c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80056d0:	f001 fbe3 	bl	8006e9a <HAL_I2C_DeInit>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d0e3      	beq.n	80056a0 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 80056d8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80056dc:	e7e1      	b.n	80056a2 <BSP_I2C4_DeInit+0xa>
 80056de:	bf00      	nop
 80056e0:	24001884 	.word	0x24001884
 80056e4:	58021400 	.word	0x58021400
 80056e8:	58024400 	.word	0x58024400
 80056ec:	240072ac 	.word	0x240072ac

080056f0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80056f0:	2300      	movs	r3, #0
 80056f2:	2201      	movs	r2, #1
{
 80056f4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80056f6:	6041      	str	r1, [r0, #4]
{
 80056f8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80056fa:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80056fc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005700:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005704:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005708:	f001 fb75 	bl	8006df6 <HAL_I2C_Init>
 800570c:	4601      	mov	r1, r0
 800570e:	b108      	cbz	r0, 8005714 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005710:	2001      	movs	r0, #1
}
 8005712:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005714:	4620      	mov	r0, r4
 8005716:	f001 fd50 	bl	80071ba <HAL_I2CEx_ConfigAnalogFilter>
 800571a:	4601      	mov	r1, r0
 800571c:	2800      	cmp	r0, #0
 800571e:	d1f7      	bne.n	8005710 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005720:	4620      	mov	r0, r4
 8005722:	f001 fd70 	bl	8007206 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8005726:	3800      	subs	r0, #0
 8005728:	bf18      	it	ne
 800572a:	2001      	movne	r0, #1
 800572c:	e7f1      	b.n	8005712 <MX_I2C4_Init+0x22>
	...

08005730 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005730:	4ba3      	ldr	r3, [pc, #652]	; (80059c0 <BSP_I2C4_Init+0x290>)
 8005732:	48a4      	ldr	r0, [pc, #656]	; (80059c4 <BSP_I2C4_Init+0x294>)
{
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005738:	6003      	str	r3, [r0, #0]
{
 800573a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 800573c:	4ba2      	ldr	r3, [pc, #648]	; (80059c8 <BSP_I2C4_Init+0x298>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	9200      	str	r2, [sp, #0]
 8005742:	3201      	adds	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	9b00      	ldr	r3, [sp, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 80c9 	bne.w	80058e0 <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800574e:	f001 fd2f 	bl	80071b0 <HAL_I2C_GetState>
 8005752:	2800      	cmp	r0, #0
 8005754:	f040 80c4 	bne.w	80058e0 <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005758:	4d9c      	ldr	r5, [pc, #624]	; (80059cc <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800575a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800575e:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005760:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005762:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005766:	489a      	ldr	r0, [pc, #616]	; (80059d0 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005768:	f043 0320 	orr.w	r3, r3, #32
 800576c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005770:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	930a      	str	r3, [sp, #40]	; 0x28
 800577a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800577c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005780:	f043 0320 	orr.w	r3, r3, #32
 8005784:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005788:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800578c:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	930b      	str	r3, [sp, #44]	; 0x2c
 8005794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005796:	2312      	movs	r3, #18
 8005798:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800579c:	2302      	movs	r3, #2
 800579e:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80057a2:	a90d      	add	r1, sp, #52	; 0x34
 80057a4:	f000 fffa 	bl	800679c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80057a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80057ac:	a90d      	add	r1, sp, #52	; 0x34
 80057ae:	4888      	ldr	r0, [pc, #544]	; (80059d0 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80057b0:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80057b2:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80057b4:	f000 fff2 	bl	800679c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80057b8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80057c4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	930c      	str	r3, [sp, #48]	; 0x30
 80057ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 80057d0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80057dc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80057e8:	f003 f9c8 	bl	8008b7c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d071      	beq.n	80058d4 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80057f0:	4b78      	ldr	r3, [pc, #480]	; (80059d4 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80057f2:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80057f6:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80059dc <BSP_I2C4_Init+0x2ac>
 80057fa:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80057fe:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8005802:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005806:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800580a:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800580e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005810:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005814:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005818:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800581c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005820:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	4b6c      	ldr	r3, [pc, #432]	; (80059d8 <BSP_I2C4_Init+0x2a8>)
 8005826:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800582a:	9a00      	ldr	r2, [sp, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4690      	mov	r8, r2
{
 8005830:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005832:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005834:	f240 3479 	movw	r4, #889	; 0x379
 8005838:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800583a:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800583c:	45a4      	cmp	ip, r4
 800583e:	d95a      	bls.n	80058f6 <BSP_I2C4_Init+0x1c6>
 8005840:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005842:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005844:	45ab      	cmp	fp, r5
 8005846:	d852      	bhi.n	80058ee <BSP_I2C4_Init+0x1be>
 8005848:	9c02      	ldr	r4, [sp, #8]
 800584a:	42ac      	cmp	r4, r5
 800584c:	d34f      	bcc.n	80058ee <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800584e:	4596      	cmp	lr, r2
 8005850:	d04d      	beq.n	80058ee <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005852:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8005856:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005858:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800585a:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800585e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005860:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005864:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005868:	d93e      	bls.n	80058e8 <BSP_I2C4_Init+0x1b8>
 800586a:	4a5b      	ldr	r2, [pc, #364]	; (80059d8 <BSP_I2C4_Init+0x2a8>)
 800586c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800586e:	4b5a      	ldr	r3, [pc, #360]	; (80059d8 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005870:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8005874:	4a59      	ldr	r2, [pc, #356]	; (80059dc <BSP_I2C4_Init+0x2ac>)
 8005876:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005878:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800587a:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800587e:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005880:	f242 7310 	movw	r3, #10000	; 0x2710
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 800588a:	9309      	str	r3, [sp, #36]	; 0x24
 800588c:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 8005890:	3b0a      	subs	r3, #10
 8005892:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005894:	9b06      	ldr	r3, [sp, #24]
 8005896:	429e      	cmp	r6, r3
 8005898:	d138      	bne.n	800590c <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 800589a:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800589e:	d819      	bhi.n	80058d4 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058a0:	2314      	movs	r3, #20
 80058a2:	fb03 f808 	mul.w	r8, r3, r8
 80058a6:	4b4d      	ldr	r3, [pc, #308]	; (80059dc <BSP_I2C4_Init+0x2ac>)
 80058a8:	eb03 0208 	add.w	r2, r3, r8
 80058ac:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80058b0:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058b2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80058b6:	6853      	ldr	r3, [r2, #4]
 80058b8:	051b      	lsls	r3, r3, #20
 80058ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058be:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80058c0:	6893      	ldr	r3, [r2, #8]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058c8:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80058ca:	68d3      	ldr	r3, [r2, #12]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80058d0:	4323      	orrs	r3, r4
 80058d2:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80058d4:	9900      	ldr	r1, [sp, #0]
 80058d6:	483b      	ldr	r0, [pc, #236]	; (80059c4 <BSP_I2C4_Init+0x294>)
 80058d8:	f7ff ff0a 	bl	80056f0 <MX_I2C4_Init>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d16b      	bne.n	80059b8 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 80058e0:	2000      	movs	r0, #0
}
 80058e2:	b013      	add	sp, #76	; 0x4c
 80058e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e8:	4696      	mov	lr, r2
 80058ea:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80058ee:	3701      	adds	r7, #1
 80058f0:	440d      	add	r5, r1
 80058f2:	2f10      	cmp	r7, #16
 80058f4:	d1a6      	bne.n	8005844 <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80058f6:	2e10      	cmp	r6, #16
 80058f8:	448c      	add	ip, r1
 80058fa:	d19b      	bne.n	8005834 <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80058fc:	3201      	adds	r2, #1
 80058fe:	4401      	add	r1, r0
 8005900:	2a10      	cmp	r2, #16
 8005902:	d195      	bne.n	8005830 <BSP_I2C4_Init+0x100>
 8005904:	f1b8 0f00 	cmp.w	r8, #0
 8005908:	d1af      	bne.n	800586a <BSP_I2C4_Init+0x13a>
 800590a:	e7b0      	b.n	800586e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	f06f 0401 	mvn.w	r4, #1
 8005912:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005914:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005916:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800591a:	4419      	add	r1, r3
 800591c:	9104      	str	r1, [sp, #16]
 800591e:	eb03 010b 	add.w	r1, r3, fp
 8005922:	4361      	muls	r1, r4
 8005924:	9c02      	ldr	r4, [sp, #8]
 8005926:	9101      	str	r1, [sp, #4]
 8005928:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800592a:	9904      	ldr	r1, [sp, #16]
 800592c:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800592e:	f241 245c 	movw	r4, #4700	; 0x125c
 8005932:	9707      	str	r7, [sp, #28]
 8005934:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005938:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800593a:	42a1      	cmp	r1, r4
 800593c:	d931      	bls.n	80059a2 <BSP_I2C4_Init+0x272>
 800593e:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 8005942:	d22e      	bcs.n	80059a2 <BSP_I2C4_Init+0x272>
 8005944:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005946:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800594a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800594e:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 8005952:	9c08      	ldr	r4, [sp, #32]
 8005954:	f109 0918 	add.w	r9, r9, #24
 8005958:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800595a:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 800595e:	f241 0447 	movw	r4, #4167	; 0x1047
 8005962:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005966:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800596a:	45a2      	cmp	sl, r4
 800596c:	d812      	bhi.n	8005994 <BSP_I2C4_Init+0x264>
 800596e:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 8005972:	d30f      	bcc.n	8005994 <BSP_I2C4_Init+0x264>
 8005974:	4570      	cmp	r0, lr
 8005976:	d20d      	bcs.n	8005994 <BSP_I2C4_Init+0x264>
              error = -error;
 8005978:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 800597c:	bf28      	it	cs
 800597e:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005980:	9c03      	ldr	r4, [sp, #12]
 8005982:	4554      	cmp	r4, sl
 8005984:	d906      	bls.n	8005994 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8005986:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 8005988:	46b0      	mov	r8, r6
 800598a:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 800598e:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005990:	9c05      	ldr	r4, [sp, #20]
 8005992:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005994:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8005998:	eba9 0903 	sub.w	r9, r9, r3
 800599c:	441d      	add	r5, r3
 800599e:	449e      	add	lr, r3
 80059a0:	d1db      	bne.n	800595a <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80059a2:	9c01      	ldr	r4, [sp, #4]
 80059a4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80059a8:	4419      	add	r1, r3
 80059aa:	eba4 0403 	sub.w	r4, r4, r3
 80059ae:	9401      	str	r4, [sp, #4]
 80059b0:	d1bd      	bne.n	800592e <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80059b2:	3601      	adds	r6, #1
 80059b4:	3214      	adds	r2, #20
 80059b6:	e76d      	b.n	8005894 <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 80059b8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80059bc:	e791      	b.n	80058e2 <BSP_I2C4_Init+0x1b2>
 80059be:	bf00      	nop
 80059c0:	58001c00 	.word	0x58001c00
 80059c4:	240072ac 	.word	0x240072ac
 80059c8:	24001884 	.word	0x24001884
 80059cc:	58024400 	.word	0x58024400
 80059d0:	58021400 	.word	0x58021400
 80059d4:	3b9aca00 	.word	0x3b9aca00
 80059d8:	24002288 	.word	0x24002288
 80059dc:	24001888 	.word	0x24001888

080059e0 <BSP_I2C4_WriteReg>:
{
 80059e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80059e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80059e6:	9200      	str	r2, [sp, #0]
 80059e8:	460a      	mov	r2, r1
 80059ea:	4601      	mov	r1, r0
 80059ec:	4808      	ldr	r0, [pc, #32]	; (8005a10 <BSP_I2C4_WriteReg+0x30>)
 80059ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059f2:	2301      	movs	r3, #1
 80059f4:	f001 fa6a 	bl	8006ecc <HAL_I2C_Mem_Write>
 80059f8:	b140      	cbz	r0, 8005a0c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80059fa:	4805      	ldr	r0, [pc, #20]	; (8005a10 <BSP_I2C4_WriteReg+0x30>)
 80059fc:	f001 fbdb 	bl	80071b6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005a00:	2804      	cmp	r0, #4
 8005a02:	bf0c      	ite	eq
 8005a04:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005a08:	f06f 0003 	mvnne.w	r0, #3
}
 8005a0c:	b004      	add	sp, #16
 8005a0e:	bd10      	pop	{r4, pc}
 8005a10:	240072ac 	.word	0x240072ac

08005a14 <BSP_I2C4_ReadReg>:
{
 8005a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005a16:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005a1a:	9200      	str	r2, [sp, #0]
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	4601      	mov	r1, r0
 8005a20:	4808      	ldr	r0, [pc, #32]	; (8005a44 <BSP_I2C4_ReadReg+0x30>)
 8005a22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a26:	2301      	movs	r3, #1
 8005a28:	f001 fb06 	bl	8007038 <HAL_I2C_Mem_Read>
 8005a2c:	b140      	cbz	r0, 8005a40 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005a2e:	4805      	ldr	r0, [pc, #20]	; (8005a44 <BSP_I2C4_ReadReg+0x30>)
 8005a30:	f001 fbc1 	bl	80071b6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005a34:	2804      	cmp	r0, #4
 8005a36:	bf0c      	ite	eq
 8005a38:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005a3c:	f06f 0003 	mvnne.w	r0, #3
}
 8005a40:	b004      	add	sp, #16
 8005a42:	bd10      	pop	{r4, pc}
 8005a44:	240072ac 	.word	0x240072ac

08005a48 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005a48:	f000 bcd0 	b.w	80063ec <HAL_GetTick>

08005a4c <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005a4c:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a4e:	4c21      	ldr	r4, [pc, #132]	; (8005ad4 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8005a50:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a52:	4821      	ldr	r0, [pc, #132]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a54:	78a2      	ldrb	r2, [r4, #2]
 8005a56:	7861      	ldrb	r1, [r4, #1]
 8005a58:	f7ff fc53 	bl	8005302 <MX25LM51245G_WriteEnable>
 8005a5c:	b118      	cbz	r0, 8005a66 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a5e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005a62:	b005      	add	sp, #20
 8005a64:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005a66:	2303      	movs	r3, #3
 8005a68:	481b      	ldr	r0, [pc, #108]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a70:	78a2      	ldrb	r2, [r4, #2]
 8005a72:	7861      	ldrb	r1, [r4, #1]
 8005a74:	f7ff fccd 	bl	8005412 <MX25LM51245G_WriteCfg2Register>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1f0      	bne.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005a7c:	78a2      	ldrb	r2, [r4, #2]
 8005a7e:	7861      	ldrb	r1, [r4, #1]
 8005a80:	4815      	ldr	r0, [pc, #84]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a82:	f7ff fc3e 	bl	8005302 <MX25LM51245G_WriteEnable>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1e8      	bne.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8005a8c:	2501      	movs	r5, #1
 8005a8e:	4812      	ldr	r0, [pc, #72]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005a90:	9500      	str	r5, [sp, #0]
 8005a92:	78a2      	ldrb	r2, [r4, #2]
 8005a94:	7861      	ldrb	r1, [r4, #1]
 8005a96:	f7ff fcbc 	bl	8005412 <MX25LM51245G_WriteCfg2Register>
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d1de      	bne.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005aa0:	2028      	movs	r0, #40	; 0x28
 8005aa2:	f000 fca9 	bl	80063f8 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	480b      	ldr	r0, [pc, #44]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005aac:	f7ff faf4 	bl	8005098 <MX25LM51245G_AutoPollingMemReady>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1d4      	bne.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005ab4:	ab03      	add	r3, sp, #12
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	4629      	mov	r1, r5
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4603      	mov	r3, r0
 8005abe:	4806      	ldr	r0, [pc, #24]	; (8005ad8 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8005ac0:	f7ff fd0d 	bl	80054de <MX25LM51245G_ReadCfg2Register>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d1ca      	bne.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8005ac8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005acc:	42ab      	cmp	r3, r5
 8005ace:	d0c8      	beq.n	8005a62 <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8005ad0:	e7c5      	b.n	8005a5e <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8005ad2:	bf00      	nop
 8005ad4:	2400228c 	.word	0x2400228c
 8005ad8:	24002294 	.word	0x24002294

08005adc <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005adc:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005ade:	4d27      	ldr	r5, [pc, #156]	; (8005b7c <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8005ae0:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005ae2:	4c27      	ldr	r4, [pc, #156]	; (8005b80 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8005ae4:	78aa      	ldrb	r2, [r5, #2]
 8005ae6:	7869      	ldrb	r1, [r5, #1]
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f7ff fc0a 	bl	8005302 <MX25LM51245G_WriteEnable>
 8005aee:	b118      	cbz	r0, 8005af8 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005af0:	f06f 0004 	mvn.w	r0, #4
}
 8005af4:	b005      	add	sp, #20
 8005af6:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8005af8:	2303      	movs	r3, #3
 8005afa:	78aa      	ldrb	r2, [r5, #2]
 8005afc:	7869      	ldrb	r1, [r5, #1]
 8005afe:	4620      	mov	r0, r4
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b06:	f7ff fc84 	bl	8005412 <MX25LM51245G_WriteCfg2Register>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1f0      	bne.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005b0e:	78aa      	ldrb	r2, [r5, #2]
 8005b10:	4620      	mov	r0, r4
 8005b12:	7869      	ldrb	r1, [r5, #1]
 8005b14:	f7ff fbf5 	bl	8005302 <MX25LM51245G_WriteEnable>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d1e9      	bne.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	78aa      	ldrb	r2, [r5, #2]
 8005b20:	7869      	ldrb	r1, [r5, #1]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4603      	mov	r3, r0
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff fc73 	bl	8005412 <MX25LM51245G_WriteCfg2Register>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1df      	bne.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005b30:	2028      	movs	r0, #40	; 0x28
 8005b32:	f000 fc61 	bl	80063f8 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005b3a:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005b3c:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005b3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b42:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005b44:	f001 fe58 	bl	80077f8 <HAL_OSPI_Init>
 8005b48:	b9a8      	cbnz	r0, 8005b76 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4611      	mov	r1, r2
 8005b50:	f7ff faa2 	bl	8005098 <MX25LM51245G_AutoPollingMemReady>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d1cb      	bne.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4603      	mov	r3, r0
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff fcbb 	bl	80054de <MX25LM51245G_ReadCfg2Register>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d1c1      	bne.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8005b6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d0bf      	beq.n	8005af4 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005b74:	e7bc      	b.n	8005af0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005b76:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005b7a:	e7bb      	b.n	8005af4 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8005b7c:	2400228c 	.word	0x2400228c
 8005b80:	24002294 	.word	0x24002294

08005b84 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8005b84:	4a0e      	ldr	r2, [pc, #56]	; (8005bc0 <MX_OSPI_NOR_Init+0x3c>)
 8005b86:	2304      	movs	r3, #4
 8005b88:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005b8c:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005b8e:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8005b90:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8005b92:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8005b94:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8005b96:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005b9a:	684a      	ldr	r2, [r1, #4]
 8005b9c:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005b9e:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8005ba0:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8005ba2:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005ba4:	68ca      	ldr	r2, [r1, #12]
 8005ba6:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005ba8:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005bac:	bf09      	itett	eq
 8005bae:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005bb2:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005bb4:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005bb6:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005bba:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8005bbc:	f001 be1c 	b.w	80077f8 <HAL_OSPI_Init>
 8005bc0:	52005000 	.word	0x52005000

08005bc4 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8005bc4:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005bc6:	b998      	cbnz	r0, 8005bf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005bc8:	4c0b      	ldr	r4, [pc, #44]	; (8005bf8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8005bca:	78a2      	ldrb	r2, [r4, #2]
 8005bcc:	7861      	ldrb	r1, [r4, #1]
 8005bce:	b95a      	cbnz	r2, 8005be8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	480a      	ldr	r0, [pc, #40]	; (8005bfc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005bd4:	f7ff fad6 	bl	8005184 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8005bd8:	b110      	cbz	r0, 8005be0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bda:	f06f 0004 	mvn.w	r0, #4
}
 8005bde:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005be0:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005be2:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8005be4:	7023      	strb	r3, [r4, #0]
 8005be6:	e7fa      	b.n	8005bde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8005be8:	4804      	ldr	r0, [pc, #16]	; (8005bfc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8005bea:	f7ff fb3a 	bl	8005262 <MX25LM51245G_EnableDTRMemoryMappedMode>
 8005bee:	e7f3      	b.n	8005bd8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8005bf0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005bf4:	e7f3      	b.n	8005bde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8005bf6:	bf00      	nop
 8005bf8:	2400228c 	.word	0x2400228c
 8005bfc:	24002294 	.word	0x24002294

08005c00 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8005c00:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005c02:	b950      	cbnz	r0, 8005c1a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8005c04:	4c09      	ldr	r4, [pc, #36]	; (8005c2c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8005c06:	7823      	ldrb	r3, [r4, #0]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d109      	bne.n	8005c20 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8005c0c:	4808      	ldr	r0, [pc, #32]	; (8005c30 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8005c0e:	f002 f838 	bl	8007c82 <HAL_OSPI_Abort>
 8005c12:	b940      	cbnz	r0, 8005c26 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005c14:	2301      	movs	r3, #1
 8005c16:	7023      	strb	r3, [r4, #0]
}
 8005c18:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005c1a:	f06f 0001 	mvn.w	r0, #1
 8005c1e:	e7fb      	b.n	8005c18 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8005c20:	f06f 001a 	mvn.w	r0, #26
 8005c24:	e7f8      	b.n	8005c18 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c26:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005c2a:	e7f5      	b.n	8005c18 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8005c2c:	2400228c 	.word	0x2400228c
 8005c30:	24002294 	.word	0x24002294

08005c34 <BSP_OSPI_NOR_DeInit>:
{
 8005c34:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d156      	bne.n	8005ce8 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005c3a:	4c2d      	ldr	r4, [pc, #180]	; (8005cf0 <BSP_OSPI_NOR_DeInit+0xbc>)
 8005c3c:	7823      	ldrb	r3, [r4, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d04b      	beq.n	8005cda <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005c42:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c48:	482a      	ldr	r0, [pc, #168]	; (8005cf4 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8005c4a:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8005c4c:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8005c4e:	f000 fe8b 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8005c52:	2104      	movs	r1, #4
 8005c54:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <BSP_OSPI_NOR_DeInit+0xc4>)
 8005c56:	f000 fe87 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8005c5a:	2140      	movs	r1, #64	; 0x40
 8005c5c:	4827      	ldr	r0, [pc, #156]	; (8005cfc <BSP_OSPI_NOR_DeInit+0xc8>)
 8005c5e:	f000 fe83 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8005c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c66:	4826      	ldr	r0, [pc, #152]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c68:	f000 fe7e 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8005c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c70:	4823      	ldr	r0, [pc, #140]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c72:	f000 fe79 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8005c76:	2104      	movs	r1, #4
 8005c78:	4822      	ldr	r0, [pc, #136]	; (8005d04 <BSP_OSPI_NOR_DeInit+0xd0>)
 8005c7a:	f000 fe75 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8005c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c82:	481f      	ldr	r0, [pc, #124]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c84:	f000 fe70 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8005c88:	2110      	movs	r1, #16
 8005c8a:	481d      	ldr	r0, [pc, #116]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c8c:	f000 fe6c 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8005c90:	2120      	movs	r1, #32
 8005c92:	481b      	ldr	r0, [pc, #108]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005c94:	f000 fe68 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8005c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c9c:	4817      	ldr	r0, [pc, #92]	; (8005cfc <BSP_OSPI_NOR_DeInit+0xc8>)
 8005c9e:	f000 fe63 	bl	8006968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	4816      	ldr	r0, [pc, #88]	; (8005d00 <BSP_OSPI_NOR_DeInit+0xcc>)
 8005ca6:	f000 fe5f 	bl	8006968 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005cac:	4817      	ldr	r0, [pc, #92]	; (8005d0c <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8005cae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005cb6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005cb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8005cbe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8005cca:	f001 fe0b 	bl	80078e4 <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2000      	moveq	r0, #0
 8005cd4:	f06f 0003 	mvnne.w	r0, #3
}
 8005cd8:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8005cda:	f7ff ff91 	bl	8005c00 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0af      	beq.n	8005c42 <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8005ce2:	f06f 0004 	mvn.w	r0, #4
 8005ce6:	e7f7      	b.n	8005cd8 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8005ce8:	f06f 0001 	mvn.w	r0, #1
 8005cec:	e7f4      	b.n	8005cd8 <BSP_OSPI_NOR_DeInit+0xa4>
 8005cee:	bf00      	nop
 8005cf0:	2400228c 	.word	0x2400228c
 8005cf4:	58021400 	.word	0x58021400
 8005cf8:	58020400 	.word	0x58020400
 8005cfc:	58021800 	.word	0x58021800
 8005d00:	58020c00 	.word	0x58020c00
 8005d04:	58021000 	.word	0x58021000
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	24002294 	.word	0x24002294

08005d10 <BSP_OSPI_NOR_ConfigFlash>:
{
 8005d10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005d14:	460d      	mov	r5, r1
 8005d16:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d156      	bne.n	8005dca <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8005d1c:	4c2e      	ldr	r4, [pc, #184]	; (8005dd8 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8005d1e:	7823      	ldrb	r3, [r4, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d055      	beq.n	8005dd0 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8005d24:	7863      	ldrb	r3, [r4, #1]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d146      	bne.n	8005db8 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8005d2a:	2901      	cmp	r1, #1
 8005d2c:	78a2      	ldrb	r2, [r4, #2]
 8005d2e:	d109      	bne.n	8005d44 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8005d30:	4296      	cmp	r6, r2
 8005d32:	d107      	bne.n	8005d44 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d34:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005d36:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8005d38:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8005d3a:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8005d3c:	70a6      	strb	r6, [r4, #2]
}
 8005d3e:	b004      	add	sp, #16
 8005d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8005d44:	4f25      	ldr	r7, [pc, #148]	; (8005ddc <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d46:	2101      	movs	r1, #1
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7ff fada 	bl	8005302 <MX25LM51245G_WriteEnable>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	bb78      	cbnz	r0, 8005db2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8005d52:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8005d56:	9000      	str	r0, [sp, #0]
 8005d58:	4638      	mov	r0, r7
 8005d5a:	78a2      	ldrb	r2, [r4, #2]
 8005d5c:	7861      	ldrb	r1, [r4, #1]
 8005d5e:	f7ff fb58 	bl	8005412 <MX25LM51245G_WriteCfg2Register>
 8005d62:	4680      	mov	r8, r0
 8005d64:	bb28      	cbnz	r0, 8005db2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8005d66:	2028      	movs	r0, #40	; 0x28
 8005d68:	f000 fb46 	bl	80063f8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8005d6c:	78a3      	ldrb	r3, [r4, #2]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d106      	bne.n	8005d80 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005d72:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8005d74:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005d78:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8005d7c:	f001 fd3c 	bl	80077f8 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8005d80:	2200      	movs	r2, #0
 8005d82:	4816      	ldr	r0, [pc, #88]	; (8005ddc <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d84:	4611      	mov	r1, r2
 8005d86:	f7ff f987 	bl	8005098 <MX25LM51245G_AutoPollingMemReady>
 8005d8a:	b990      	cbnz	r0, 8005db2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8005d8c:	ab03      	add	r3, sp, #12
 8005d8e:	4602      	mov	r2, r0
 8005d90:	4601      	mov	r1, r0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	4811      	ldr	r0, [pc, #68]	; (8005ddc <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8005d98:	f7ff fba1 	bl	80054de <MX25LM51245G_ReadCfg2Register>
 8005d9c:	b948      	cbnz	r0, 8005db2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8005d9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005da2:	b933      	cbnz	r3, 8005db2 <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005da4:	2d01      	cmp	r5, #1
 8005da6:	d1c5      	bne.n	8005d34 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8005da8:	78a3      	ldrb	r3, [r4, #2]
 8005daa:	b94b      	cbnz	r3, 8005dc0 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8005dac:	f7ff fe96 	bl	8005adc <OSPI_NOR_EnterDOPIMode.constprop.0>
 8005db0:	e008      	b.n	8005dc4 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8005db2:	f06f 0004 	mvn.w	r0, #4
 8005db6:	e7c2      	b.n	8005d3e <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8005db8:	2901      	cmp	r1, #1
 8005dba:	d1bb      	bne.n	8005d34 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	d1f5      	bne.n	8005dac <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8005dc0:	f7ff fe44 	bl	8005a4c <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1ba      	bne.n	8005d3e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005dc8:	e7b4      	b.n	8005d34 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8005dca:	f06f 0001 	mvn.w	r0, #1
 8005dce:	e7b6      	b.n	8005d3e <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8005dd0:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8005dd4:	e7b3      	b.n	8005d3e <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8005dd6:	bf00      	nop
 8005dd8:	2400228c 	.word	0x2400228c
 8005ddc:	24002294 	.word	0x24002294

08005de0 <MX_OSPI_ClockConfig>:
{
 8005de0:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8005de6:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005de8:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8005dea:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005dec:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005dee:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8005df0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8005df2:	2305      	movs	r3, #5
 8005df4:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8005df8:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005dfa:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005dfc:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005e00:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005e02:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005e06:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005e08:	f002 ffe4 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005e0c:	b02f      	add	sp, #188	; 0xbc
 8005e0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005e14 <BSP_OSPI_NOR_Init>:
{
 8005e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e18:	460e      	mov	r6, r1
 8005e1a:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 8160 	bne.w	80060e2 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8005e22:	4cb1      	ldr	r4, [pc, #708]	; (80060e8 <BSP_OSPI_NOR_Init+0x2d4>)
 8005e24:	7825      	ldrb	r5, [r4, #0]
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	f040 8159 	bne.w	80060de <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8005e2c:	4baf      	ldr	r3, [pc, #700]	; (80060ec <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005e2e:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005e32:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005e36:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8005e38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005e3c:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005e3e:	48ac      	ldr	r0, [pc, #688]	; (80060f0 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8005e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e44:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005e48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005e4c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e50:	9201      	str	r2, [sp, #4]
 8005e52:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8005e54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e5a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8005e5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8005e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e68:	f042 0220 	orr.w	r2, r2, #32
 8005e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e74:	f002 0220 	and.w	r2, r2, #32
 8005e78:	9202      	str	r2, [sp, #8]
 8005e7a:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8005e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e80:	f042 0202 	orr.w	r2, r2, #2
 8005e84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e8c:	f002 0202 	and.w	r2, r2, #2
 8005e90:	9203      	str	r2, [sp, #12]
 8005e92:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8005e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ea4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005ea8:	9204      	str	r2, [sp, #16]
 8005eaa:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8005eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005eb0:	f042 0208 	orr.w	r2, r2, #8
 8005eb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ebc:	f002 0208 	and.w	r2, r2, #8
 8005ec0:	9205      	str	r2, [sp, #20]
 8005ec2:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8005ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ec8:	f042 0208 	orr.w	r2, r2, #8
 8005ecc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ed4:	f002 0208 	and.w	r2, r2, #8
 8005ed8:	9206      	str	r2, [sp, #24]
 8005eda:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8005edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ee0:	f042 0210 	orr.w	r2, r2, #16
 8005ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005eec:	f002 0210 	and.w	r2, r2, #16
 8005ef0:	9207      	str	r2, [sp, #28]
 8005ef2:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8005ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ef8:	f042 0208 	orr.w	r2, r2, #8
 8005efc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f04:	f002 0208 	and.w	r2, r2, #8
 8005f08:	9208      	str	r2, [sp, #32]
 8005f0a:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8005f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f10:	f042 0208 	orr.w	r2, r2, #8
 8005f14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f1c:	f002 0208 	and.w	r2, r2, #8
 8005f20:	9209      	str	r2, [sp, #36]	; 0x24
 8005f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8005f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f28:	f042 0208 	orr.w	r2, r2, #8
 8005f2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f34:	f002 0208 	and.w	r2, r2, #8
 8005f38:	920a      	str	r2, [sp, #40]	; 0x28
 8005f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8005f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f4c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f50:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f58:	f042 0208 	orr.w	r2, r2, #8
 8005f5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f60:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8005f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f74:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8005f76:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7a:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8005f7e:	f000 fc0d 	bl	800679c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005f82:	a911      	add	r1, sp, #68	; 0x44
 8005f84:	485b      	ldr	r0, [pc, #364]	; (80060f4 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8005f86:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005f88:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8005f8a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005f8e:	f000 fc05 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005f96:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005f98:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005f9a:	a911      	add	r1, sp, #68	; 0x44
 8005f9c:	4856      	ldr	r0, [pc, #344]	; (80060f8 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8005f9e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8005fa0:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005fa2:	f000 fbfb 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8005fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8005faa:	a911      	add	r1, sp, #68	; 0x44
 8005fac:	4853      	ldr	r0, [pc, #332]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8005fae:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8005fb0:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8005fb2:	f000 fbf3 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8005fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8005fba:	a911      	add	r1, sp, #68	; 0x44
 8005fbc:	484f      	ldr	r0, [pc, #316]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8005fbe:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8005fc0:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8005fc2:	f000 fbeb 	bl	800679c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005fc6:	a911      	add	r1, sp, #68	; 0x44
 8005fc8:	484d      	ldr	r0, [pc, #308]	; (8006100 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8005fca:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005fcc:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8005fce:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8005fd0:	f000 fbe4 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005fd8:	a911      	add	r1, sp, #68	; 0x44
 8005fda:	4848      	ldr	r0, [pc, #288]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8005fdc:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8005fde:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8005fe0:	f000 fbdc 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005fe4:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005fe6:	a911      	add	r1, sp, #68	; 0x44
 8005fe8:	4844      	ldr	r0, [pc, #272]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8005fea:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8005fec:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8005ff0:	f000 fbd4 	bl	800679c <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005ff4:	a911      	add	r1, sp, #68	; 0x44
 8005ff6:	4841      	ldr	r0, [pc, #260]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8005ff8:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8005ffa:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8005ffe:	f000 fbcd 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8006002:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8006006:	a911      	add	r1, sp, #68	; 0x44
 8006008:	4839      	ldr	r0, [pc, #228]	; (80060f0 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 800600a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 800600c:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 800600e:	f000 fbc5 	bl	800679c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8006012:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8006014:	a911      	add	r1, sp, #68	; 0x44
 8006016:	4839      	ldr	r0, [pc, #228]	; (80060fc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8006018:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 800601a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 800601e:	f000 fbbd 	bl	800679c <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8006022:	a811      	add	r0, sp, #68	; 0x44
 8006024:	f7ff f81f 	bl	8005066 <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 800602a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800602e:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006032:	b10b      	cbz	r3, 8006038 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006034:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006038:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 800603a:	4832      	ldr	r0, [pc, #200]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800603c:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800603e:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8006040:	7873      	ldrb	r3, [r6, #1]
 8006042:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8006044:	f7ff fecc 	bl	8005de0 <MX_OSPI_ClockConfig>
 8006048:	b120      	cbz	r0, 8006054 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800604a:	f06f 0003 	mvn.w	r0, #3
}
 800604e:	b01b      	add	sp, #108	; 0x6c
 8006050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8006054:	a90d      	add	r1, sp, #52	; 0x34
 8006056:	482b      	ldr	r0, [pc, #172]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 8006058:	f7ff fd94 	bl	8005b84 <MX_OSPI_NOR_Init>
 800605c:	4602      	mov	r2, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d1f3      	bne.n	800604a <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006062:	4601      	mov	r1, r0
 8006064:	4827      	ldr	r0, [pc, #156]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 8006066:	f7ff faa4 	bl	80055b2 <MX25LM51245G_ResetEnable>
 800606a:	4602      	mov	r2, r0
 800606c:	b110      	cbz	r0, 8006074 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800606e:	f06f 0004 	mvn.w	r0, #4
 8006072:	e7ec      	b.n	800604e <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006074:	4601      	mov	r1, r0
 8006076:	4823      	ldr	r0, [pc, #140]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 8006078:	f7ff fad4 	bl	8005624 <MX25LM51245G_ResetMemory>
 800607c:	4602      	mov	r2, r0
 800607e:	2800      	cmp	r0, #0
 8006080:	d1f5      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006082:	2101      	movs	r1, #1
 8006084:	481f      	ldr	r0, [pc, #124]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 8006086:	f7ff fa94 	bl	80055b2 <MX25LM51245G_ResetEnable>
 800608a:	4602      	mov	r2, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	d1ee      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006090:	2101      	movs	r1, #1
 8006092:	481c      	ldr	r0, [pc, #112]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 8006094:	f7ff fac6 	bl	8005624 <MX25LM51245G_ResetMemory>
 8006098:	2800      	cmp	r0, #0
 800609a:	d1e8      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800609c:	2201      	movs	r2, #1
 800609e:	4819      	ldr	r0, [pc, #100]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 80060a0:	4611      	mov	r1, r2
 80060a2:	f7ff fa86 	bl	80055b2 <MX25LM51245G_ResetEnable>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d1e1      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80060aa:	2201      	movs	r2, #1
 80060ac:	4815      	ldr	r0, [pc, #84]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 80060ae:	4611      	mov	r1, r2
 80060b0:	f7ff fab8 	bl	8005624 <MX25LM51245G_ResetMemory>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d1da      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80060b8:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80060ba:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80060bc:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80060be:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80060c0:	f000 f99a 	bl	80063f8 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80060c4:	78a2      	ldrb	r2, [r4, #2]
 80060c6:	7861      	ldrb	r1, [r4, #1]
 80060c8:	480e      	ldr	r0, [pc, #56]	; (8006104 <BSP_OSPI_NOR_Init+0x2f0>)
 80060ca:	f7fe ffe5 	bl	8005098 <MX25LM51245G_AutoPollingMemReady>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d1cd      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80060d2:	7872      	ldrb	r2, [r6, #1]
 80060d4:	7831      	ldrb	r1, [r6, #0]
 80060d6:	f7ff fe1b 	bl	8005d10 <BSP_OSPI_NOR_ConfigFlash>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1c7      	bne.n	800606e <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 80060de:	2000      	movs	r0, #0
 80060e0:	e7b5      	b.n	800604e <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 80060e2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80060e6:	e7b2      	b.n	800604e <BSP_OSPI_NOR_Init+0x23a>
 80060e8:	2400228c 	.word	0x2400228c
 80060ec:	58024400 	.word	0x58024400
 80060f0:	58021800 	.word	0x58021800
 80060f4:	58020400 	.word	0x58020400
 80060f8:	58021400 	.word	0x58021400
 80060fc:	58020c00 	.word	0x58020c00
 8006100:	58021000 	.word	0x58021000
 8006104:	24002294 	.word	0x24002294

08006108 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	460c      	mov	r4, r1
 800610e:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006110:	2800      	cmp	r0, #0
 8006112:	d163      	bne.n	80061dc <BSP_TS_Init+0xd4>
 8006114:	680b      	ldr	r3, [r1, #0]
 8006116:	1e5a      	subs	r2, r3, #1
 8006118:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 800611c:	d25e      	bcs.n	80061dc <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800611e:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006120:	1e51      	subs	r1, r2, #1
 8006122:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 8006126:	d259      	bcs.n	80061dc <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006128:	4293      	cmp	r3, r2
 800612a:	bf28      	it	cs
 800612c:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800612e:	68e2      	ldr	r2, [r4, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d853      	bhi.n	80061dc <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8006134:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006136:	4d2b      	ldr	r5, [pc, #172]	; (80061e4 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 8006138:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800613a:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 800613c:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006140:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <BSP_TS_Init+0xe0>)
 8006144:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006146:	4b29      	ldr	r3, [pc, #164]	; (80061ec <BSP_TS_Init+0xe4>)
 8006148:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800614a:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <BSP_TS_Init+0xe8>)
 800614c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <BSP_TS_Init+0xec>)
 8006150:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <BSP_TS_Init+0xf0>)
 8006154:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8006156:	f7fe fef1 	bl	8004f3c <FT5336_RegisterBusIO>
 800615a:	b128      	cbz	r0, 8006168 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 800615c:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006160:	4628      	mov	r0, r5
 8006162:	b008      	add	sp, #32
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8006168:	a901      	add	r1, sp, #4
 800616a:	4628      	mov	r0, r5
 800616c:	f7fe fe4c 	bl	8004e08 <FT5336_ReadID>
 8006170:	2800      	cmp	r0, #0
 8006172:	d1f3      	bne.n	800615c <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	2b51      	cmp	r3, #81	; 0x51
 8006178:	d1f0      	bne.n	800615c <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800617a:	4b20      	ldr	r3, [pc, #128]	; (80061fc <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800617c:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 800617e:	4f20      	ldr	r7, [pc, #128]	; (8006200 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8006180:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006208 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 8006184:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8006186:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4798      	blx	r3
 800618e:	4605      	mov	r5, r0
 8006190:	2800      	cmp	r0, #0
 8006192:	d1e3      	bne.n	800615c <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006194:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006196:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006198:	4e1a      	ldr	r6, [pc, #104]	; (8006204 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800619a:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800619c:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80061aa:	f8d8 3000 	ldr.w	r3, [r8]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	4798      	blx	r3
 80061b2:	2800      	cmp	r0, #0
 80061b4:	db0f      	blt.n	80061d6 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80061b6:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80061b8:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80061ba:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80061bc:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80061be:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80061c0:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80061c6:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80061c8:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80061ca:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80061cc:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80061ce:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80061d0:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80061d4:	e7c4      	b.n	8006160 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061d6:	f06f 0504 	mvn.w	r5, #4
 80061da:	e7c1      	b.n	8006160 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 80061dc:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80061e0:	e7be      	b.n	8006160 <BSP_TS_Init+0x58>
 80061e2:	bf00      	nop
 80061e4:	240022f4 	.word	0x240022f4
 80061e8:	08005731 	.word	0x08005731
 80061ec:	08005699 	.word	0x08005699
 80061f0:	08005a15 	.word	0x08005a15
 80061f4:	080059e1 	.word	0x080059e1
 80061f8:	08005a49 	.word	0x08005a49
 80061fc:	24000044 	.word	0x24000044
 8006200:	2400231c 	.word	0x2400231c
 8006204:	24002320 	.word	0x24002320
 8006208:	24002348 	.word	0x24002348

0800620c <BSP_TS_GetState>:
{
 800620c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006210:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8006212:	2800      	cmp	r0, #0
 8006214:	d151      	bne.n	80062ba <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006216:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <BSP_TS_GetState+0xb4>)
 8006218:	a901      	add	r1, sp, #4
 800621a:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <BSP_TS_GetState+0xb8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6810      	ldr	r0, [r2, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4798      	blx	r3
 8006224:	2800      	cmp	r0, #0
 8006226:	db45      	blt.n	80062b4 <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <BSP_TS_GetState+0xbc>)
 800622a:	9801      	ldr	r0, [sp, #4]
 800622c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8006230:	6a1f      	ldr	r7, [r3, #32]
 8006232:	2800      	cmp	r0, #0
 8006234:	d03a      	beq.n	80062ac <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006236:	689e      	ldr	r6, [r3, #8]
 8006238:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800623c:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 800623e:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 8006242:	bf4b      	itete	mi
 8006244:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 8006246:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 8006248:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 800624a:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800624c:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8006250:	bf1c      	itt	ne
 8006252:	f108 35ff 	addne.w	r5, r8, #4294967295
 8006256:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800625a:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800625e:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006260:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8006262:	bf48      	it	mi
 8006264:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006268:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800626a:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800626c:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800626e:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006270:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006272:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006276:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800627a:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800627c:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800627e:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006280:	bf8c      	ite	hi
 8006282:	eba5 060c 	subhi.w	r6, r5, ip
 8006286:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800628a:	42ba      	cmp	r2, r7
 800628c:	bf8c      	ite	hi
 800628e:	1bd1      	subhi	r1, r2, r7
 8006290:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006292:	42b0      	cmp	r0, r6
 8006294:	d301      	bcc.n	800629a <BSP_TS_GetState+0x8e>
 8006296:	4288      	cmp	r0, r1
 8006298:	d205      	bcs.n	80062a6 <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800629a:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800629c:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 800629e:	2000      	movs	r0, #0
}
 80062a0:	b004      	add	sp, #16
 80062a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80062a6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80062aa:	e7f8      	b.n	800629e <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80062ac:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80062b0:	60a7      	str	r7, [r4, #8]
 80062b2:	e7f5      	b.n	80062a0 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062b4:	f06f 0004 	mvn.w	r0, #4
 80062b8:	e7f2      	b.n	80062a0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80062ba:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80062be:	e7ef      	b.n	80062a0 <BSP_TS_GetState+0x94>
 80062c0:	24002348 	.word	0x24002348
 80062c4:	2400231c 	.word	0x2400231c
 80062c8:	24002320 	.word	0x24002320

080062cc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80062cc:	4a22      	ldr	r2, [pc, #136]	; (8006358 <SystemInit+0x8c>)
 80062ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80062d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062da:	4a20      	ldr	r2, [pc, #128]	; (800635c <SystemInit+0x90>)
 80062dc:	6813      	ldr	r3, [r2, #0]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	2b06      	cmp	r3, #6
 80062e4:	d805      	bhi.n	80062f2 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	f023 030f 	bic.w	r3, r3, #15
 80062ec:	f043 0307 	orr.w	r3, r3, #7
 80062f0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80062f2:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <SystemInit+0x94>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <SystemInit+0x98>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006306:	4915      	ldr	r1, [pc, #84]	; (800635c <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8006308:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800630a:	680a      	ldr	r2, [r1, #0]
 800630c:	0712      	lsls	r2, r2, #28
 800630e:	d505      	bpl.n	800631c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006310:	680a      	ldr	r2, [r1, #0]
 8006312:	f022 020f 	bic.w	r2, r2, #15
 8006316:	f042 0207 	orr.w	r2, r2, #7
 800631a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800631c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800631e:	4912      	ldr	r1, [pc, #72]	; (8006368 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8006320:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006322:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006324:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006326:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006328:	4910      	ldr	r1, [pc, #64]	; (800636c <SystemInit+0xa0>)
 800632a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800632c:	4910      	ldr	r1, [pc, #64]	; (8006370 <SystemInit+0xa4>)
 800632e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006332:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006336:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006338:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006340:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006344:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <SystemInit+0xa8>)
 800634a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800634c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006350:	4b01      	ldr	r3, [pc, #4]	; (8006358 <SystemInit+0x8c>)
 8006352:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	e000ed00 	.word	0xe000ed00
 800635c:	52002000 	.word	0x52002000
 8006360:	58024400 	.word	0x58024400
 8006364:	eaf6ed7f 	.word	0xeaf6ed7f
 8006368:	02020200 	.word	0x02020200
 800636c:	01ff0000 	.word	0x01ff0000
 8006370:	01010280 	.word	0x01010280
 8006374:	52004000 	.word	0x52004000

08006378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006378:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800637a:	2003      	movs	r0, #3
 800637c:	f000 f84e 	bl	800641c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006380:	f002 fa02 	bl	8008788 <HAL_RCC_GetSysClockFreq>
 8006384:	490f      	ldr	r1, [pc, #60]	; (80063c4 <HAL_Init+0x4c>)
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <HAL_Init+0x50>)
 8006388:	698b      	ldr	r3, [r1, #24]
 800638a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800638e:	5cd3      	ldrb	r3, [r2, r3]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006396:	698b      	ldr	r3, [r1, #24]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	5cd3      	ldrb	r3, [r2, r3]
 800639e:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <HAL_Init+0x54>)
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	fa20 f303 	lsr.w	r3, r0, r3
 80063a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_Init+0x58>)
 80063ac:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063ae:	2000      	movs	r0, #0
 80063b0:	f7fb fc12 	bl	8001bd8 <HAL_InitTick>
 80063b4:	4604      	mov	r4, r0
 80063b6:	b918      	cbnz	r0, 80063c0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80063b8:	f7fb f806 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80063bc:	4620      	mov	r0, r4
 80063be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063c0:	2401      	movs	r4, #1
 80063c2:	e7fb      	b.n	80063bc <HAL_Init+0x44>
 80063c4:	58024400 	.word	0x58024400
 80063c8:	0801e640 	.word	0x0801e640
 80063cc:	24000078 	.word	0x24000078
 80063d0:	24000074 	.word	0x24000074

080063d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80063d4:	4a03      	ldr	r2, [pc, #12]	; (80063e4 <HAL_IncTick+0x10>)
 80063d6:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <HAL_IncTick+0x14>)
 80063d8:	6811      	ldr	r1, [r2, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	440b      	add	r3, r1
 80063de:	6013      	str	r3, [r2, #0]
}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	240072f8 	.word	0x240072f8
 80063e8:	2400007c 	.word	0x2400007c

080063ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <HAL_GetTick+0x8>)
 80063ee:	6818      	ldr	r0, [r3, #0]
}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	240072f8 	.word	0x240072f8

080063f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80063fc:	f7ff fff6 	bl	80063ec <HAL_GetTick>
 8006400:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006402:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006404:	bf1e      	ittt	ne
 8006406:	4b04      	ldrne	r3, [pc, #16]	; (8006418 <HAL_Delay+0x20>)
 8006408:	781b      	ldrbne	r3, [r3, #0]
 800640a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800640c:	f7ff ffee 	bl	80063ec <HAL_GetTick>
 8006410:	1b43      	subs	r3, r0, r5
 8006412:	42a3      	cmp	r3, r4
 8006414:	d3fa      	bcc.n	800640c <HAL_Delay+0x14>
  {
  }
}
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	2400007c 	.word	0x2400007c

0800641c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800641c:	4907      	ldr	r1, [pc, #28]	; (800643c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800641e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006420:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800642a:	0412      	lsls	r2, r2, #16
 800642c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800642e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006438:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800643a:	4770      	bx	lr
 800643c:	e000ed00 	.word	0xe000ed00

08006440 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006440:	4b16      	ldr	r3, [pc, #88]	; (800649c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006442:	b530      	push	{r4, r5, lr}
 8006444:	68dc      	ldr	r4, [r3, #12]
 8006446:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800644a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800644e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006450:	2d04      	cmp	r5, #4
 8006452:	bf28      	it	cs
 8006454:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006456:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800645c:	bf8c      	ite	hi
 800645e:	3c03      	subhi	r4, #3
 8006460:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006462:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8006466:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006468:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800646c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006470:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006474:	fa01 f104 	lsl.w	r1, r1, r4
 8006478:	ea41 0302 	orr.w	r3, r1, r2
 800647c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006480:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006482:	db06      	blt.n	8006492 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006484:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006488:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800648c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006490:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006492:	f000 000f 	and.w	r0, r0, #15
 8006496:	4a02      	ldr	r2, [pc, #8]	; (80064a0 <HAL_NVIC_SetPriority+0x60>)
 8006498:	5413      	strb	r3, [r2, r0]
 800649a:	e7f9      	b.n	8006490 <HAL_NVIC_SetPriority+0x50>
 800649c:	e000ed00 	.word	0xe000ed00
 80064a0:	e000ed14 	.word	0xe000ed14

080064a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80064a4:	2800      	cmp	r0, #0
 80064a6:	db08      	blt.n	80064ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064a8:	2301      	movs	r3, #1
 80064aa:	0942      	lsrs	r2, r0, #5
 80064ac:	f000 001f 	and.w	r0, r0, #31
 80064b0:	fa03 f000 	lsl.w	r0, r3, r0
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <HAL_NVIC_EnableIRQ+0x18>)
 80064b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80064ba:	4770      	bx	lr
 80064bc:	e000e100 	.word	0xe000e100

080064c0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80064c0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <HAL_MPU_Disable+0x18>)
 80064c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80064c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064cc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80064ce:	2200      	movs	r2, #0
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <HAL_MPU_Disable+0x1c>)
 80064d2:	605a      	str	r2, [r3, #4]
}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	e000ed00 	.word	0xe000ed00
 80064dc:	e000ed90 	.word	0xe000ed90

080064e0 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80064e0:	4a06      	ldr	r2, [pc, #24]	; (80064fc <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80064e2:	f040 0001 	orr.w	r0, r0, #1
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_MPU_Enable+0x20>)
 80064e8:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80064ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80064f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80064f6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80064fa:	4770      	bx	lr
 80064fc:	e000ed00 	.word	0xe000ed00
 8006500:	e000ed90 	.word	0xe000ed90

08006504 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006504:	7843      	ldrb	r3, [r0, #1]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <HAL_MPU_ConfigRegion+0x4c>)
{
 8006508:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800650a:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800650c:	7801      	ldrb	r1, [r0, #0]
 800650e:	b1d9      	cbz	r1, 8006548 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006510:	6843      	ldr	r3, [r0, #4]
 8006512:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006514:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006516:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006518:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800651a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800651e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006520:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006522:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006526:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006528:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800652c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800652e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006532:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006534:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006538:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800653a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800653e:	7a01      	ldrb	r1, [r0, #8]
 8006540:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006544:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006546:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8006548:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800654a:	6111      	str	r1, [r2, #16]
}
 800654c:	e7fb      	b.n	8006546 <HAL_MPU_ConfigRegion+0x42>
 800654e:	bf00      	nop
 8006550:	e000ed90 	.word	0xe000ed90

08006554 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006554:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006556:	4604      	mov	r4, r0
 8006558:	b908      	cbnz	r0, 800655e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800655a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800655c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800655e:	7f43      	ldrb	r3, [r0, #29]
 8006560:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006564:	b913      	cbnz	r3, 800656c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006566:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006568:	f7fa ff46 	bl	80013f8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800656c:	2302      	movs	r3, #2
 800656e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006570:	7923      	ldrb	r3, [r4, #4]
 8006572:	b9e3      	cbnz	r3, 80065ae <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <HAL_CRC_Init+0x70>)
 8006578:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	f022 0218 	bic.w	r2, r2, #24
 8006580:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006582:	7962      	ldrb	r2, [r4, #5]
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	b9d2      	cbnz	r2, 80065be <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800658c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800658e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	6961      	ldr	r1, [r4, #20]
 8006594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006598:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800659a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800659c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80065a8:	2301      	movs	r3, #1
 80065aa:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80065ac:	e7d6      	b.n	800655c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80065ae:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 f808 	bl	80065c8 <HAL_CRCEx_Polynomial_Set>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d0e2      	beq.n	8006582 <HAL_CRC_Init+0x2e>
 80065bc:	e7cd      	b.n	800655a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80065be:	6922      	ldr	r2, [r4, #16]
 80065c0:	e7e4      	b.n	800658c <HAL_CRC_Init+0x38>
 80065c2:	bf00      	nop
 80065c4:	04c11db7 	.word	0x04c11db7

080065c8 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80065c8:	231f      	movs	r3, #31
{
 80065ca:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80065cc:	3b01      	subs	r3, #1
 80065ce:	d306      	bcc.n	80065de <HAL_CRCEx_Polynomial_Set+0x16>
 80065d0:	fa21 f403 	lsr.w	r4, r1, r3
 80065d4:	07e4      	lsls	r4, r4, #31
 80065d6:	d5f9      	bpl.n	80065cc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80065d8:	2a08      	cmp	r2, #8
 80065da:	d014      	beq.n	8006606 <HAL_CRCEx_Polynomial_Set+0x3e>
 80065dc:	d802      	bhi.n	80065e4 <HAL_CRCEx_Polynomial_Set+0x1c>
 80065de:	b13a      	cbz	r2, 80065f0 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80065e0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80065e2:	e00d      	b.n	8006600 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80065e4:	2a10      	cmp	r2, #16
 80065e6:	d00c      	beq.n	8006602 <HAL_CRCEx_Polynomial_Set+0x3a>
 80065e8:	2a18      	cmp	r2, #24
 80065ea:	d1f9      	bne.n	80065e0 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 80065ec:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80065ee:	d8f7      	bhi.n	80065e0 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80065f0:	6800      	ldr	r0, [r0, #0]
 80065f2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80065f4:	6883      	ldr	r3, [r0, #8]
 80065f6:	f023 0318 	bic.w	r3, r3, #24
 80065fa:	431a      	orrs	r2, r3
 80065fc:	6082      	str	r2, [r0, #8]
 80065fe:	2000      	movs	r0, #0
}
 8006600:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8006602:	2b07      	cmp	r3, #7
 8006604:	e7f3      	b.n	80065ee <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006606:	2b0f      	cmp	r3, #15
 8006608:	e7f1      	b.n	80065ee <HAL_CRCEx_Polynomial_Set+0x26>

0800660a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800660a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800660c:	4604      	mov	r4, r0
 800660e:	2800      	cmp	r0, #0
 8006610:	d036      	beq.n	8006680 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006612:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800661a:	b91b      	cbnz	r3, 8006624 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800661c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006620:	f7fa ff02 	bl	8001428 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006624:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006626:	69e0      	ldr	r0, [r4, #28]
 8006628:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800662a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006632:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800663a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006642:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006644:	68a2      	ldr	r2, [r4, #8]
 8006646:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800664a:	4302      	orrs	r2, r0
 800664c:	f021 0101 	bic.w	r1, r1, #1
 8006650:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006652:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006654:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006658:	0c12      	lsrs	r2, r2, #16
 800665a:	0412      	lsls	r2, r2, #16
 800665c:	430a      	orrs	r2, r1
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006662:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006666:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800666a:	0552      	lsls	r2, r2, #21
 800666c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006670:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006672:	430a      	orrs	r2, r1
 8006674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006676:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006678:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800667a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800667e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006680:	2001      	movs	r0, #1
 8006682:	e7fc      	b.n	800667e <HAL_DMA2D_Init+0x74>

08006684 <HAL_DMA2D_LineEventCallback>:
 8006684:	4770      	bx	lr

08006686 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8006686:	4770      	bx	lr

08006688 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006688:	6803      	ldr	r3, [r0, #0]
{
 800668a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800668c:	685e      	ldr	r6, [r3, #4]
{
 800668e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006690:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006692:	07f2      	lsls	r2, r6, #31
 8006694:	d514      	bpl.n	80066c0 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006696:	05e9      	lsls	r1, r5, #23
 8006698:	d512      	bpl.n	80066c0 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80066a2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80066aa:	2201      	movs	r2, #1
 80066ac:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066ae:	2304      	movs	r3, #4
 80066b0:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066b4:	2300      	movs	r3, #0
 80066b6:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80066ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066bc:	b103      	cbz	r3, 80066c0 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066be:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80066c0:	06b2      	lsls	r2, r6, #26
 80066c2:	d516      	bpl.n	80066f2 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80066c4:	04ab      	lsls	r3, r5, #18
 80066c6:	d514      	bpl.n	80066f2 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80066d2:	2220      	movs	r2, #32
 80066d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80066d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d8:	f043 0302 	orr.w	r3, r3, #2
 80066dc:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066de:	2304      	movs	r3, #4
 80066e0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066e4:	2300      	movs	r3, #0
 80066e6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80066ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ec:	b10b      	cbz	r3, 80066f2 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066ee:	4620      	mov	r0, r4
 80066f0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066f2:	0730      	lsls	r0, r6, #28
 80066f4:	d516      	bpl.n	8006724 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80066f6:	0529      	lsls	r1, r5, #20
 80066f8:	d514      	bpl.n	8006724 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006702:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006704:	2208      	movs	r2, #8
 8006706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800670a:	f043 0304 	orr.w	r3, r3, #4
 800670e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006710:	2304      	movs	r3, #4
 8006712:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006716:	2300      	movs	r3, #0
 8006718:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800671c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671e:	b10b      	cbz	r3, 8006724 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006720:	4620      	mov	r0, r4
 8006722:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006724:	0772      	lsls	r2, r6, #29
 8006726:	d50b      	bpl.n	8006740 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006728:	056b      	lsls	r3, r5, #21
 800672a:	d509      	bpl.n	8006740 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800672c:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800672e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006738:	2204      	movs	r2, #4
 800673a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800673c:	f7ff ffa2 	bl	8006684 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006740:	07b0      	lsls	r0, r6, #30
 8006742:	d514      	bpl.n	800676e <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006744:	05a9      	lsls	r1, r5, #22
 8006746:	d512      	bpl.n	800676e <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006750:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006752:	2202      	movs	r2, #2
 8006754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006758:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800675a:	2301      	movs	r3, #1
 800675c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006760:	2300      	movs	r3, #0
 8006762:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8006766:	6a23      	ldr	r3, [r4, #32]
 8006768:	b10b      	cbz	r3, 800676e <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800676a:	4620      	mov	r0, r4
 800676c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800676e:	06f2      	lsls	r2, r6, #27
 8006770:	d513      	bpl.n	800679a <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006772:	04eb      	lsls	r3, r5, #19
 8006774:	d511      	bpl.n	800679a <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006776:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006778:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006780:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006782:	2210      	movs	r2, #16
 8006784:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006788:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800678a:	2301      	movs	r3, #1
 800678c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8006790:	2300      	movs	r3, #0
 8006792:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006796:	f7ff ff76 	bl	8006686 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800679a:	bd70      	pop	{r4, r5, r6, pc}

0800679c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800679c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80067a0:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067a2:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 80067a6:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8006964 <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067aa:	680a      	ldr	r2, [r1, #0]
 80067ac:	fa32 f403 	lsrs.w	r4, r2, r3
 80067b0:	d102      	bne.n	80067b8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80067b2:	b003      	add	sp, #12
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067b8:	f04f 0c01 	mov.w	ip, #1
 80067bc:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80067c0:	ea1c 0202 	ands.w	r2, ip, r2
 80067c4:	f000 80b7 	beq.w	8006936 <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067c8:	684d      	ldr	r5, [r1, #4]
 80067ca:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80067ce:	2603      	movs	r6, #3
 80067d0:	f005 0403 	and.w	r4, r5, #3
 80067d4:	fa06 f608 	lsl.w	r6, r6, r8
 80067d8:	1e67      	subs	r7, r4, #1
 80067da:	43f6      	mvns	r6, r6
 80067dc:	2f01      	cmp	r7, #1
 80067de:	d834      	bhi.n	800684a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80067e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067e2:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067e6:	68cf      	ldr	r7, [r1, #12]
 80067e8:	fa07 f708 	lsl.w	r7, r7, r8
 80067ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80067f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80067f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067f4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067f8:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80067fc:	409f      	lsls	r7, r3
 80067fe:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8006802:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006804:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006806:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006808:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800680c:	688f      	ldr	r7, [r1, #8]
 800680e:	fa07 f708 	lsl.w	r7, r7, r8
 8006812:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8006816:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006818:	d119      	bne.n	800684e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800681a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800681e:	f003 0b07 	and.w	fp, r3, #7
 8006822:	f04f 0c0f 	mov.w	ip, #15
 8006826:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800682a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800682e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006832:	fa0c fc0b 	lsl.w	ip, ip, fp
 8006836:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800683a:	690f      	ldr	r7, [r1, #16]
 800683c:	fa07 f70b 	lsl.w	r7, r7, fp
 8006840:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006844:	f8ca 7020 	str.w	r7, [sl, #32]
 8006848:	e001      	b.n	800684e <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800684a:	2c03      	cmp	r4, #3
 800684c:	d1da      	bne.n	8006804 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800684e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006850:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006854:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006858:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800685c:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8006860:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006862:	d068      	beq.n	8006936 <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006864:	4e3d      	ldr	r6, [pc, #244]	; (800695c <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006866:	f003 0703 	and.w	r7, r3, #3
 800686a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686e:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006872:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006874:	f044 0402 	orr.w	r4, r4, #2
 8006878:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 800687c:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 8006880:	f023 0603 	bic.w	r6, r3, #3
 8006884:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 8006888:	f004 0402 	and.w	r4, r4, #2
 800688c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006890:	9401      	str	r4, [sp, #4]
 8006892:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006894:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8006898:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800689c:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068a0:	4c2f      	ldr	r4, [pc, #188]	; (8006960 <HAL_GPIO_Init+0x1c4>)
 80068a2:	42a0      	cmp	r0, r4
 80068a4:	d049      	beq.n	800693a <HAL_GPIO_Init+0x19e>
 80068a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068aa:	42a0      	cmp	r0, r4
 80068ac:	d047      	beq.n	800693e <HAL_GPIO_Init+0x1a2>
 80068ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	d045      	beq.n	8006942 <HAL_GPIO_Init+0x1a6>
 80068b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068ba:	42a0      	cmp	r0, r4
 80068bc:	d043      	beq.n	8006946 <HAL_GPIO_Init+0x1aa>
 80068be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068c2:	42a0      	cmp	r0, r4
 80068c4:	d041      	beq.n	800694a <HAL_GPIO_Init+0x1ae>
 80068c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068ca:	42a0      	cmp	r0, r4
 80068cc:	d03f      	beq.n	800694e <HAL_GPIO_Init+0x1b2>
 80068ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068d2:	42a0      	cmp	r0, r4
 80068d4:	d03d      	beq.n	8006952 <HAL_GPIO_Init+0x1b6>
 80068d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068da:	42a0      	cmp	r0, r4
 80068dc:	d03b      	beq.n	8006956 <HAL_GPIO_Init+0x1ba>
 80068de:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80068e2:	42a0      	cmp	r0, r4
 80068e4:	bf0c      	ite	eq
 80068e6:	2409      	moveq	r4, #9
 80068e8:	240a      	movne	r4, #10
 80068ea:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ec:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 80068ee:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068f2:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068f6:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80068f8:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 80068fc:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8006900:	bf54      	ite	pl
 8006902:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006904:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 8006906:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8006908:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800690a:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 800690c:	bf54      	ite	pl
 800690e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006910:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006912:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8006914:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006918:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 800691c:	bf54      	ite	pl
 800691e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006920:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006922:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006924:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8006928:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800692c:	bf54      	ite	pl
 800692e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006930:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006932:	f8ce 4000 	str.w	r4, [lr]
    position++;
 8006936:	3301      	adds	r3, #1
 8006938:	e737      	b.n	80067aa <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800693a:	2400      	movs	r4, #0
 800693c:	e7d5      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 800693e:	2401      	movs	r4, #1
 8006940:	e7d3      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 8006942:	2402      	movs	r4, #2
 8006944:	e7d1      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 8006946:	2403      	movs	r4, #3
 8006948:	e7cf      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 800694a:	2404      	movs	r4, #4
 800694c:	e7cd      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 800694e:	2405      	movs	r4, #5
 8006950:	e7cb      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 8006952:	2406      	movs	r4, #6
 8006954:	e7c9      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 8006956:	2407      	movs	r4, #7
 8006958:	e7c7      	b.n	80068ea <HAL_GPIO_Init+0x14e>
 800695a:	bf00      	nop
 800695c:	58024400 	.word	0x58024400
 8006960:	58020000 	.word	0x58020000
 8006964:	58000080 	.word	0x58000080

08006968 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800696c:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800696e:	4d49      	ldr	r5, [pc, #292]	; (8006a94 <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006970:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006a9c <HAL_GPIO_DeInit+0x134>
 8006974:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006aa0 <HAL_GPIO_DeInit+0x138>
 8006978:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006aa4 <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 800697c:	fa31 f302 	lsrs.w	r3, r1, r2
 8006980:	d101      	bne.n	8006986 <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006986:	2301      	movs	r3, #1
 8006988:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 800698c:	ea1e 0701 	ands.w	r7, lr, r1
 8006990:	d06e      	beq.n	8006a70 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006992:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006996:	f002 0c03 	and.w	ip, r2, #3
 800699a:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800699c:	4b3e      	ldr	r3, [pc, #248]	; (8006a98 <HAL_GPIO_DeInit+0x130>)
 800699e:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069a6:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069a8:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 80069ac:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80069b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80069b4:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80069b8:	d05c      	beq.n	8006a74 <HAL_GPIO_DeInit+0x10c>
 80069ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069be:	4298      	cmp	r0, r3
 80069c0:	d05a      	beq.n	8006a78 <HAL_GPIO_DeInit+0x110>
 80069c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c6:	4298      	cmp	r0, r3
 80069c8:	d058      	beq.n	8006a7c <HAL_GPIO_DeInit+0x114>
 80069ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ce:	4298      	cmp	r0, r3
 80069d0:	d056      	beq.n	8006a80 <HAL_GPIO_DeInit+0x118>
 80069d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d6:	4298      	cmp	r0, r3
 80069d8:	d054      	beq.n	8006a84 <HAL_GPIO_DeInit+0x11c>
 80069da:	4548      	cmp	r0, r9
 80069dc:	d054      	beq.n	8006a88 <HAL_GPIO_DeInit+0x120>
 80069de:	4550      	cmp	r0, sl
 80069e0:	d054      	beq.n	8006a8c <HAL_GPIO_DeInit+0x124>
 80069e2:	4558      	cmp	r0, fp
 80069e4:	d054      	beq.n	8006a90 <HAL_GPIO_DeInit+0x128>
 80069e6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80069ea:	4298      	cmp	r0, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2309      	moveq	r3, #9
 80069f0:	230a      	movne	r3, #10
 80069f2:	fa03 f30c 	lsl.w	r3, r3, ip
 80069f6:	4543      	cmp	r3, r8
 80069f8:	d118      	bne.n	8006a2c <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	ea23 0307 	bic.w	r3, r3, r7
 8006a00:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006a02:	686b      	ldr	r3, [r5, #4]
 8006a04:	ea23 0307 	bic.w	r3, r3, r7
 8006a08:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8006a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006a12:	ea2c 0c07 	bic.w	ip, ip, r7
 8006a16:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006a1a:	f8d3 c000 	ldr.w	ip, [r3]
 8006a1e:	ea2c 0707 	bic.w	r7, ip, r7
 8006a22:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a24:	68a3      	ldr	r3, [r4, #8]
 8006a26:	ea23 0606 	bic.w	r6, r3, r6
 8006a2a:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a2c:	2603      	movs	r6, #3
 8006a2e:	0053      	lsls	r3, r2, #1
 8006a30:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a32:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a36:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a3a:	270f      	movs	r7, #15
 8006a3c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a40:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a42:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006a46:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006a48:	fa22 f406 	lsr.w	r4, r2, r6
 8006a4c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006a50:	6a26      	ldr	r6, [r4, #32]
 8006a52:	ea26 0707 	bic.w	r7, r6, r7
 8006a56:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a58:	68c4      	ldr	r4, [r0, #12]
 8006a5a:	ea24 0403 	bic.w	r4, r4, r3
 8006a5e:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a60:	6844      	ldr	r4, [r0, #4]
 8006a62:	ea24 040e 	bic.w	r4, r4, lr
 8006a66:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a68:	6884      	ldr	r4, [r0, #8]
 8006a6a:	ea24 0303 	bic.w	r3, r4, r3
 8006a6e:	6083      	str	r3, [r0, #8]
    position++;
 8006a70:	3201      	adds	r2, #1
 8006a72:	e783      	b.n	800697c <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006a74:	2300      	movs	r3, #0
 8006a76:	e7bc      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e7ba      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e7b8      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a80:	2303      	movs	r3, #3
 8006a82:	e7b6      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a84:	2304      	movs	r3, #4
 8006a86:	e7b4      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a88:	2305      	movs	r3, #5
 8006a8a:	e7b2      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a8c:	2306      	movs	r3, #6
 8006a8e:	e7b0      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a90:	2307      	movs	r3, #7
 8006a92:	e7ae      	b.n	80069f2 <HAL_GPIO_DeInit+0x8a>
 8006a94:	58000080 	.word	0x58000080
 8006a98:	58020000 	.word	0x58020000
 8006a9c:	58021400 	.word	0x58021400
 8006aa0:	58021800 	.word	0x58021800
 8006aa4:	58021c00 	.word	0x58021c00

08006aa8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006aa8:	6903      	ldr	r3, [r0, #16]
 8006aaa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006aac:	bf14      	ite	ne
 8006aae:	2001      	movne	r0, #1
 8006ab0:	2000      	moveq	r0, #0
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ab4:	b10a      	cbz	r2, 8006aba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ab6:	6181      	str	r1, [r0, #24]
  }
}
 8006ab8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aba:	0409      	lsls	r1, r1, #16
 8006abc:	e7fb      	b.n	8006ab6 <HAL_GPIO_WritePin+0x2>

08006abe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006abe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ac0:	ea01 0203 	and.w	r2, r1, r3
 8006ac4:	ea21 0103 	bic.w	r1, r1, r3
 8006ac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006acc:	6181      	str	r1, [r0, #24]
}
 8006ace:	4770      	bx	lr

08006ad0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ad0:	6803      	ldr	r3, [r0, #0]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	0791      	lsls	r1, r2, #30
 8006ad6:	d501      	bpl.n	8006adc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ad8:	2200      	movs	r2, #0
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	07d2      	lsls	r2, r2, #31
 8006ae0:	d403      	bmi.n	8006aea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	619a      	str	r2, [r3, #24]
  }
}
 8006aea:	4770      	bx	lr

08006aec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006aec:	b530      	push	{r4, r5, lr}
 8006aee:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006af4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006af8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006afe:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b00:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b02:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b0a:	ea20 0002 	bic.w	r0, r0, r2
 8006b0e:	4303      	orrs	r3, r0
 8006b10:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b12:	bd30      	pop	{r4, r5, pc}
 8006b14:	03ff63ff 	.word	0x03ff63ff

08006b18 <I2C_IsErrorOccurred>:
{
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b1c:	6803      	ldr	r3, [r0, #0]
{
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4688      	mov	r8, r1
 8006b22:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b24:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b26:	f015 0510 	ands.w	r5, r5, #16
 8006b2a:	d079      	beq.n	8006c20 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b2c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b34:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	0695      	lsls	r5, r2, #26
 8006b3c:	d436      	bmi.n	8006bac <I2C_IsErrorOccurred+0x94>
 8006b3e:	b10e      	cbz	r6, 8006b44 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8006b40:	2504      	movs	r5, #4
 8006b42:	e039      	b.n	8006bb8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006b44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b48:	d0f6      	beq.n	8006b38 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7ff fc4f 	bl	80063ec <HAL_GetTick>
 8006b4e:	1bc0      	subs	r0, r0, r7
 8006b50:	4540      	cmp	r0, r8
 8006b52:	d802      	bhi.n	8006b5a <I2C_IsErrorOccurred+0x42>
 8006b54:	f1b8 0f00 	cmp.w	r8, #0
 8006b58:	d1ed      	bne.n	8006b36 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006b5e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b62:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006b64:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b66:	0400      	lsls	r0, r0, #16
 8006b68:	d50a      	bpl.n	8006b80 <I2C_IsErrorOccurred+0x68>
 8006b6a:	0449      	lsls	r1, r1, #17
 8006b6c:	d408      	bmi.n	8006b80 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8006b6e:	2a20      	cmp	r2, #32
 8006b70:	d006      	beq.n	8006b80 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b78:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006b7a:	f7ff fc37 	bl	80063ec <HAL_GetTick>
 8006b7e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	699d      	ldr	r5, [r3, #24]
 8006b84:	f015 0520 	ands.w	r5, r5, #32
 8006b88:	d1d5      	bne.n	8006b36 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b8a:	f7ff fc2f 	bl	80063ec <HAL_GetTick>
 8006b8e:	1bc0      	subs	r0, r0, r7
 8006b90:	2819      	cmp	r0, #25
 8006b92:	d9f5      	bls.n	8006b80 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8006b96:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8006b98:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9c:	f043 0320 	orr.w	r3, r3, #32
 8006ba0:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006ba2:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8006baa:	e7e9      	b.n	8006b80 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8006bac:	2e00      	cmp	r6, #0
 8006bae:	d1c7      	bne.n	8006b40 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb0:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8006bb2:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8006bb4:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bbc:	05d0      	lsls	r0, r2, #23
 8006bbe:	d505      	bpl.n	8006bcc <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006bc4:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8006bc8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bca:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bcc:	0551      	lsls	r1, r2, #21
 8006bce:	d505      	bpl.n	8006bdc <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006bd4:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8006bd8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bda:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bdc:	0592      	lsls	r2, r2, #22
 8006bde:	d521      	bpl.n	8006c24 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006be4:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006be8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006bea:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006bec:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8006bee:	f7ff ff6f 	bl	8006ad0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	6853      	ldr	r3, [r2, #4]
 8006bf6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006bfa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006bfe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006c08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c0a:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006c0e:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006c1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c1e:	e003      	b.n	8006c28 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	462e      	mov	r6, r5
 8006c22:	e7c9      	b.n	8006bb8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	d1e0      	bne.n	8006bea <I2C_IsErrorOccurred+0xd2>
}
 8006c28:	4630      	mov	r0, r6
 8006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c2e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006c2e:	b570      	push	{r4, r5, r6, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	079b      	lsls	r3, r3, #30
 8006c3c:	d501      	bpl.n	8006c42 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c3e:	2000      	movs	r0, #0
}
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c42:	4632      	mov	r2, r6
 8006c44:	4629      	mov	r1, r5
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff ff66 	bl	8006b18 <I2C_IsErrorOccurred>
 8006c4c:	b9a0      	cbnz	r0, 8006c78 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006c4e:	1c6a      	adds	r2, r5, #1
 8006c50:	d0f1      	beq.n	8006c36 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7ff fbcb 	bl	80063ec <HAL_GetTick>
 8006c56:	1b80      	subs	r0, r0, r6
 8006c58:	42a8      	cmp	r0, r5
 8006c5a:	d801      	bhi.n	8006c60 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	d1ea      	bne.n	8006c36 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006c62:	f043 0320 	orr.w	r3, r3, #32
 8006c66:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006c74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e7e1      	b.n	8006c40 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4604      	mov	r4, r0
 8006c80:	460d      	mov	r5, r1
 8006c82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	069b      	lsls	r3, r3, #26
 8006c8a:	d501      	bpl.n	8006c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c8c:	2000      	movs	r0, #0
}
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c90:	4632      	mov	r2, r6
 8006c92:	4629      	mov	r1, r5
 8006c94:	4620      	mov	r0, r4
 8006c96:	f7ff ff3f 	bl	8006b18 <I2C_IsErrorOccurred>
 8006c9a:	b990      	cbnz	r0, 8006cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9c:	f7ff fba6 	bl	80063ec <HAL_GetTick>
 8006ca0:	1b80      	subs	r0, r0, r6
 8006ca2:	42a8      	cmp	r0, r5
 8006ca4:	d801      	bhi.n	8006caa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	d1ec      	bne.n	8006c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006cbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7e3      	b.n	8006c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08006cc6 <I2C_WaitOnFlagUntilTimeout>:
{
 8006cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cca:	9f06      	ldr	r7, [sp, #24]
 8006ccc:	4604      	mov	r4, r0
 8006cce:	4688      	mov	r8, r1
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	6993      	ldr	r3, [r2, #24]
 8006cd8:	ea38 0303 	bics.w	r3, r8, r3
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	42b3      	cmp	r3, r6
 8006ce4:	d001      	beq.n	8006cea <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e015      	b.n	8006d16 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006cea:	1c6b      	adds	r3, r5, #1
 8006cec:	d0f3      	beq.n	8006cd6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cee:	f7ff fb7d 	bl	80063ec <HAL_GetTick>
 8006cf2:	1bc0      	subs	r0, r0, r7
 8006cf4:	42a8      	cmp	r0, r5
 8006cf6:	d801      	bhi.n	8006cfc <I2C_WaitOnFlagUntilTimeout+0x36>
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	d1eb      	bne.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006cfe:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d00:	f043 0320 	orr.w	r3, r3, #32
 8006d04:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d06:	2320      	movs	r3, #32
 8006d08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d1c <I2C_RequestMemoryWrite>:
{
 8006d1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d20:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d22:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <I2C_RequestMemoryWrite+0x68>)
{
 8006d24:	4605      	mov	r5, r0
 8006d26:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	b2f2      	uxtb	r2, r6
 8006d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8006d30:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d34:	f7ff feda 	bl	8006aec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d38:	4628      	mov	r0, r5
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7ff ff76 	bl	8006c2e <I2C_WaitOnTXISFlagUntilTimeout>
 8006d42:	b118      	cbz	r0, 8006d4c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8006d44:	2001      	movs	r0, #1
}
 8006d46:	b002      	add	sp, #8
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d4c:	2e01      	cmp	r6, #1
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	d10d      	bne.n	8006d6e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d52:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d54:	2200      	movs	r2, #0
 8006d56:	2180      	movs	r1, #128	; 0x80
 8006d58:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	f8cd 8000 	str.w	r8, [sp]
 8006d62:	f7ff ffb0 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006d66:	3800      	subs	r0, #0
 8006d68:	bf18      	it	ne
 8006d6a:	2001      	movne	r0, #1
 8006d6c:	e7eb      	b.n	8006d46 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d6e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d70:	4639      	mov	r1, r7
 8006d72:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d76:	4642      	mov	r2, r8
 8006d78:	f7ff ff59 	bl	8006c2e <I2C_WaitOnTXISFlagUntilTimeout>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e1      	bne.n	8006d44 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	e7e6      	b.n	8006d52 <I2C_RequestMemoryWrite+0x36>
 8006d84:	80002000 	.word	0x80002000

08006d88 <I2C_RequestMemoryRead>:
{
 8006d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d8c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <I2C_RequestMemoryRead+0x68>)
{
 8006d90:	4605      	mov	r5, r0
 8006d92:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	b2f2      	uxtb	r2, r6
 8006d98:	2300      	movs	r3, #0
{
 8006d9a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d9e:	f7ff fea5 	bl	8006aec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	4628      	mov	r0, r5
 8006da4:	4642      	mov	r2, r8
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7ff ff41 	bl	8006c2e <I2C_WaitOnTXISFlagUntilTimeout>
 8006dac:	b118      	cbz	r0, 8006db6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
}
 8006db0:	b002      	add	sp, #8
 8006db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006db6:	2e01      	cmp	r6, #1
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	d10d      	bne.n	8006dd8 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dbc:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dc4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	f8cd 8000 	str.w	r8, [sp]
 8006dcc:	f7ff ff7b 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006dd0:	3800      	subs	r0, #0
 8006dd2:	bf18      	it	ne
 8006dd4:	2001      	movne	r0, #1
 8006dd6:	e7eb      	b.n	8006db0 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dd8:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de0:	4642      	mov	r2, r8
 8006de2:	f7ff ff24 	bl	8006c2e <I2C_WaitOnTXISFlagUntilTimeout>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1e1      	bne.n	8006dae <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	e7e6      	b.n	8006dbc <I2C_RequestMemoryRead+0x34>
 8006dee:	bf00      	nop
 8006df0:	80002000 	.word	0x80002000

08006df4 <HAL_I2C_MspInit>:
}
 8006df4:	4770      	bx	lr

08006df6 <HAL_I2C_Init>:
{
 8006df6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d04a      	beq.n	8006e94 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dfe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e06:	b91b      	cbnz	r3, 8006e10 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006e08:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006e0c:	f7ff fff2 	bl	8006df4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	2324      	movs	r3, #36	; 0x24
 8006e12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e26:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e2e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006e34:	2901      	cmp	r1, #1
 8006e36:	d124      	bne.n	8006e82 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e3c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e3e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e40:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e4a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e52:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e54:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006e58:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e5a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006e60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e62:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f042 0201 	orr.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e74:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e7a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006e80:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e86:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e88:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e8a:	d1d8      	bne.n	8006e3e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	e7d4      	b.n	8006e3e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006e94:	2001      	movs	r0, #1
 8006e96:	e7f3      	b.n	8006e80 <HAL_I2C_Init+0x8a>

08006e98 <HAL_I2C_MspDeInit>:
 8006e98:	4770      	bx	lr

08006e9a <HAL_I2C_DeInit>:
{
 8006e9a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	b198      	cbz	r0, 8006ec8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006ea0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea2:	2324      	movs	r3, #36	; 0x24
 8006ea4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006ea8:	6813      	ldr	r3, [r2, #0]
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006eb0:	f7ff fff2 	bl	8006e98 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8006eb8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006ebc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ec0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006ec6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006ec8:	2001      	movs	r0, #1
 8006eca:	e7fc      	b.n	8006ec6 <HAL_I2C_DeInit+0x2c>

08006ecc <HAL_I2C_Mem_Write>:
{
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	469b      	mov	fp, r3
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460f      	mov	r7, r1
 8006ed8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006edc:	4692      	mov	sl, r2
 8006ede:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8006ee2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ee4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	f040 80a3 	bne.w	8007034 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8006eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef0:	b10b      	cbz	r3, 8006ef6 <HAL_I2C_Mem_Write+0x2a>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	b933      	cbnz	r3, 8006f04 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006efc:	2001      	movs	r0, #1
}
 8006efe:	b005      	add	sp, #20
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006f04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	f000 8093 	beq.w	8007034 <HAL_I2C_Mem_Write+0x168>
 8006f0e:	2501      	movs	r5, #1
 8006f10:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006f14:	f7ff fa6a 	bl	80063ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f18:	2319      	movs	r3, #25
 8006f1a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006f1c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f1e:	462a      	mov	r2, r5
 8006f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff fece 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d1e5      	bne.n	8006efc <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f30:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8006f32:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f34:	4652      	mov	r2, sl
 8006f36:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f44:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f46:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006f48:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f4a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8006f50:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f52:	465b      	mov	r3, fp
 8006f54:	f7ff fee2 	bl	8006d1c <I2C_RequestMemoryWrite>
 8006f58:	b110      	cbz	r0, 8006f60 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8006f5a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006f5e:	e7cd      	b.n	8006efc <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	2bff      	cmp	r3, #255	; 0xff
 8006f66:	d955      	bls.n	8007014 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f68:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f6e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f72:	4639      	mov	r1, r7
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7ff fdb9 	bl	8006aec <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff fe55 	bl	8006c2e <I2C_WaitOnTXISFlagUntilTimeout>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d1b9      	bne.n	8006efc <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006f90:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006f92:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006f94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006f96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f98:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006f9a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006f9c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006f9e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fa4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	b1ab      	cbz	r3, 8006fd6 <HAL_I2C_Mem_Write+0x10a>
 8006faa:	b9a2      	cbnz	r2, 8006fd6 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fac:	464b      	mov	r3, r9
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	9600      	str	r6, [sp, #0]
 8006fb4:	f7ff fe87 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d19f      	bne.n	8006efc <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2bff      	cmp	r3, #255	; 0xff
 8006fc2:	d92f      	bls.n	8007024 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fca:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fcc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff fd8b 	bl	8006aec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006fd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1cd      	bne.n	8006f7a <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fde:	4632      	mov	r2, r6
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fe4a 	bl	8006c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d187      	bne.n	8006efc <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	2120      	movs	r1, #32
 8006ff0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006ff8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8006ffc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007006:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800700a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800700e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007012:	e774      	b.n	8006efe <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007014:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800701a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800701c:	b292      	uxth	r2, r2
 800701e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	e7a6      	b.n	8006f72 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8007024:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800702c:	b292      	uxth	r2, r2
 800702e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	e7cc      	b.n	8006fce <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8007034:	2002      	movs	r0, #2
 8007036:	e762      	b.n	8006efe <HAL_I2C_Mem_Write+0x32>

08007038 <HAL_I2C_Mem_Read>:
{
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	b085      	sub	sp, #20
 800703e:	469b      	mov	fp, r3
 8007040:	4604      	mov	r4, r0
 8007042:	460f      	mov	r7, r1
 8007044:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007048:	4692      	mov	sl, r2
 800704a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800704e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007050:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007054:	2b20      	cmp	r3, #32
 8007056:	f040 80a7 	bne.w	80071a8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800705a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800705c:	b10b      	cbz	r3, 8007062 <HAL_I2C_Mem_Read+0x2a>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	b933      	cbnz	r3, 8007070 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007066:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007068:	2001      	movs	r0, #1
}
 800706a:	b005      	add	sp, #20
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007070:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007074:	2b01      	cmp	r3, #1
 8007076:	f000 8097 	beq.w	80071a8 <HAL_I2C_Mem_Read+0x170>
 800707a:	2501      	movs	r5, #1
 800707c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007080:	f7ff f9b4 	bl	80063ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007084:	2319      	movs	r3, #25
 8007086:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007088:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800708a:	462a      	mov	r2, r5
 800708c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007090:	4620      	mov	r0, r4
 8007092:	f7ff fe18 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
 8007096:	4680      	mov	r8, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	d1e5      	bne.n	8007068 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800709c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800709e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070a0:	4652      	mov	r2, sl
 80070a2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070a8:	2340      	movs	r3, #64	; 0x40
 80070aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80070ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070b2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80070b4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80070b6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070b8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80070bc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070be:	465b      	mov	r3, fp
 80070c0:	f7ff fe62 	bl	8006d88 <I2C_RequestMemoryRead>
 80070c4:	b110      	cbz	r0, 80070cc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80070c6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80070ca:	e7cd      	b.n	8007068 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2bff      	cmp	r3, #255	; 0xff
 80070d2:	4b36      	ldr	r3, [pc, #216]	; (80071ac <HAL_I2C_Mem_Read+0x174>)
 80070d4:	d958      	bls.n	8007188 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070e0:	4639      	mov	r1, r7
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff fd02 	bl	8006aec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070e8:	464b      	mov	r3, r9
 80070ea:	2200      	movs	r2, #0
 80070ec:	2104      	movs	r1, #4
 80070ee:	4620      	mov	r0, r4
 80070f0:	9600      	str	r6, [sp, #0]
 80070f2:	f7ff fde8 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d1b6      	bne.n	8007068 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007100:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007102:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007104:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007106:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007108:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800710a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800710c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800710e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007110:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007112:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007114:	b29b      	uxth	r3, r3
 8007116:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007118:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	b1ab      	cbz	r3, 800714a <HAL_I2C_Mem_Read+0x112>
 800711e:	b9a2      	cbnz	r2, 800714a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007120:	464b      	mov	r3, r9
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	4620      	mov	r0, r4
 8007126:	9600      	str	r6, [sp, #0]
 8007128:	f7ff fdcd 	bl	8006cc6 <I2C_WaitOnFlagUntilTimeout>
 800712c:	2800      	cmp	r0, #0
 800712e:	d19b      	bne.n	8007068 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	2bff      	cmp	r3, #255	; 0xff
 8007136:	d92f      	bls.n	8007198 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007138:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800713a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800713e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007140:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007142:	4639      	mov	r1, r7
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff fcd1 	bl	8006aec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800714a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1ca      	bne.n	80070e8 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007152:	4632      	mov	r2, r6
 8007154:	4649      	mov	r1, r9
 8007156:	4620      	mov	r0, r4
 8007158:	f7ff fd90 	bl	8006c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800715c:	2800      	cmp	r0, #0
 800715e:	d183      	bne.n	8007068 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	2120      	movs	r1, #32
 8007164:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800716c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007170:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800717a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800717e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007182:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007186:	e770      	b.n	800706a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007188:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007190:	b292      	uxth	r2, r2
 8007192:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	e7a3      	b.n	80070e0 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8007198:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800719a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800719e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80071a0:	b292      	uxth	r2, r2
 80071a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	e7cc      	b.n	8007142 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80071a8:	2002      	movs	r0, #2
 80071aa:	e75e      	b.n	800706a <HAL_I2C_Mem_Read+0x32>
 80071ac:	80002400 	.word	0x80002400

080071b0 <HAL_I2C_GetState>:
  return hi2c->State;
 80071b0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80071b4:	4770      	bx	lr

080071b6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80071b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80071b8:	4770      	bx	lr

080071ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071ba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	b2dc      	uxtb	r4, r3
 80071c4:	d11d      	bne.n	8007202 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d019      	beq.n	8007202 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071ce:	2324      	movs	r3, #36	; 0x24
 80071d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071d4:	6803      	ldr	r3, [r0, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4311      	orrs	r1, r2
 80071ea:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80071f6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80071fe:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007200:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007202:	2002      	movs	r0, #2
 8007204:	e7fc      	b.n	8007200 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007206 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007206:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007208:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800720c:	2b20      	cmp	r3, #32
 800720e:	b2dc      	uxtb	r4, r3
 8007210:	d11c      	bne.n	800724c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007212:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007216:	2b01      	cmp	r3, #1
 8007218:	d018      	beq.n	800724c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800721a:	2324      	movs	r3, #36	; 0x24
 800721c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800722a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800722c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007230:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007234:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800723e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007240:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007244:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007248:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800724a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800724c:	2002      	movs	r0, #2
 800724e:	e7fc      	b.n	800724a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007250 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007250:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007252:	f8d1 c000 	ldr.w	ip, [r1]
{
 8007256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800725a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800725c:	6804      	ldr	r4, [r0, #0]
 800725e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007260:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007264:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007266:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007268:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800726c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007270:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007272:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007276:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800727a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800727c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800727e:	68e0      	ldr	r0, [r4, #12]
 8007280:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007284:	4430      	add	r0, r6
 8007286:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800728a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800728c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800728e:	68e0      	ldr	r0, [r4, #12]
 8007290:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8007294:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007296:	6898      	ldr	r0, [r3, #8]
 8007298:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800729c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800729e:	6888      	ldr	r0, [r1, #8]
 80072a0:	68e6      	ldr	r6, [r4, #12]
 80072a2:	3001      	adds	r0, #1
 80072a4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80072a8:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072aa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072ac:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80072b0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80072b2:	6918      	ldr	r0, [r3, #16]
 80072b4:	f020 0007 	bic.w	r0, r0, #7
 80072b8:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072ba:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80072bc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80072be:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80072c2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80072c6:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80072ca:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80072ce:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80072d2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80072d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80072da:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072dc:	6958      	ldr	r0, [r3, #20]
 80072de:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80072e2:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072e4:	6948      	ldr	r0, [r1, #20]
 80072e6:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072e8:	69d8      	ldr	r0, [r3, #28]
 80072ea:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80072ee:	f020 0007 	bic.w	r0, r0, #7
 80072f2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072f4:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80072f8:	4305      	orrs	r5, r0
 80072fa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072fe:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007300:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007304:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007306:	b31e      	cbz	r6, 8007350 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007308:	2e01      	cmp	r6, #1
 800730a:	d023      	beq.n	8007354 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800730c:	1eb0      	subs	r0, r6, #2
 800730e:	2802      	cmp	r0, #2
 8007310:	d922      	bls.n	8007358 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007312:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007314:	bf0c      	ite	eq
 8007316:	2002      	moveq	r0, #2
 8007318:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800731a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800731c:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007320:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8007324:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007326:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007328:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800732a:	4345      	muls	r5, r0
 800732c:	4378      	muls	r0, r7
 800732e:	3007      	adds	r0, #7
 8007330:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007334:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007336:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007338:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800733c:	f020 0007 	bic.w	r0, r0, #7
 8007340:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007342:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007344:	58a3      	ldr	r3, [r4, r2]
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	50a3      	str	r3, [r4, r2]
}
 800734c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8007350:	2004      	movs	r0, #4
 8007352:	e7e2      	b.n	800731a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8007354:	2003      	movs	r0, #3
 8007356:	e7e0      	b.n	800731a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8007358:	2002      	movs	r0, #2
 800735a:	e7de      	b.n	800731a <LTDC_SetConfig+0xca>

0800735c <HAL_LTDC_Init>:
{
 800735c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800735e:	4604      	mov	r4, r0
 8007360:	2800      	cmp	r0, #0
 8007362:	d063      	beq.n	800742c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007364:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007368:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800736c:	b91b      	cbnz	r3, 8007376 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800736e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007372:	f7fa f87d 	bl	8001470 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007376:	2302      	movs	r3, #2
 8007378:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007384:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007386:	6999      	ldr	r1, [r3, #24]
 8007388:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800738c:	4302      	orrs	r2, r0
 800738e:	68e0      	ldr	r0, [r4, #12]
 8007390:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007392:	6920      	ldr	r0, [r4, #16]
 8007394:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007396:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007398:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800739a:	4925      	ldr	r1, [pc, #148]	; (8007430 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800739c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	400a      	ands	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80073aa:	69a0      	ldr	r0, [r4, #24]
 80073ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80073ae:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80073b0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	400a      	ands	r2, r1
 80073b6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80073be:	6a20      	ldr	r0, [r4, #32]
 80073c0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80073c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80073c4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	400a      	ands	r2, r1
 80073ca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80073d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80073d4:	4302      	orrs	r2, r0
 80073d6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	4011      	ands	r1, r2
 80073dc:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80073de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80073e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80073e8:	430a      	orrs	r2, r1
 80073ea:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073ee:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073f2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073f6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073fa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073fe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007402:	430a      	orrs	r2, r1
 8007404:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007408:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800740c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800740e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007412:	f042 0206 	orr.w	r2, r2, #6
 8007416:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007420:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007422:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007426:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800742a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800742c:	2001      	movs	r0, #1
 800742e:	e7fc      	b.n	800742a <HAL_LTDC_Init+0xce>
 8007430:	f000f800 	.word	0xf000f800

08007434 <HAL_LTDC_ErrorCallback>:
 8007434:	4770      	bx	lr

08007436 <HAL_LTDC_ReloadEventCallback>:
 8007436:	4770      	bx	lr

08007438 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007438:	6803      	ldr	r3, [r0, #0]
{
 800743a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800743c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800743e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007440:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007442:	0772      	lsls	r2, r6, #29
 8007444:	d514      	bpl.n	8007470 <HAL_LTDC_IRQHandler+0x38>
 8007446:	0769      	lsls	r1, r5, #29
 8007448:	d512      	bpl.n	8007470 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800744a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744c:	f022 0204 	bic.w	r2, r2, #4
 8007450:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007452:	2204      	movs	r2, #4
 8007454:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007456:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007462:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007464:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007468:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800746c:	f7ff ffe2 	bl	8007434 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007470:	07b2      	lsls	r2, r6, #30
 8007472:	d516      	bpl.n	80074a2 <HAL_LTDC_IRQHandler+0x6a>
 8007474:	07ab      	lsls	r3, r5, #30
 8007476:	d514      	bpl.n	80074a2 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007478:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800747a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800747c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747e:	f022 0202 	bic.w	r2, r2, #2
 8007482:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007484:	2202      	movs	r2, #2
 8007486:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007488:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007492:	2304      	movs	r3, #4
 8007494:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007498:	2300      	movs	r3, #0
 800749a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800749e:	f7ff ffc9 	bl	8007434 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074a2:	07f0      	lsls	r0, r6, #31
 80074a4:	d510      	bpl.n	80074c8 <HAL_LTDC_IRQHandler+0x90>
 80074a6:	07e9      	lsls	r1, r5, #31
 80074a8:	d50e      	bpl.n	80074c8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074aa:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80074ac:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074b6:	2201      	movs	r2, #1
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80074ba:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80074bc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074c0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80074c4:	f7fb faa6 	bl	8002a14 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80074c8:	0732      	lsls	r2, r6, #28
 80074ca:	d511      	bpl.n	80074f0 <HAL_LTDC_IRQHandler+0xb8>
 80074cc:	072b      	lsls	r3, r5, #28
 80074ce:	d50f      	bpl.n	80074f0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80074d0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074d2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80074d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d6:	f022 0208 	bic.w	r2, r2, #8
 80074da:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80074dc:	2208      	movs	r2, #8
 80074de:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074ec:	f7ff ffa3 	bl	8007436 <HAL_LTDC_ReloadEventCallback>
}
 80074f0:	bd70      	pop	{r4, r5, r6, pc}

080074f2 <HAL_LTDC_ConfigLayer>:
{
 80074f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80074f6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80074fa:	4606      	mov	r6, r0
 80074fc:	460f      	mov	r7, r1
 80074fe:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8007500:	2b01      	cmp	r3, #1
 8007502:	f04f 0002 	mov.w	r0, #2
 8007506:	d01f      	beq.n	8007548 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007508:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800750a:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800750e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007510:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007514:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007518:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800751c:	3438      	adds	r4, #56	; 0x38
 800751e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800752a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800752c:	4630      	mov	r0, r6
 800752e:	4662      	mov	r2, ip
 8007530:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007532:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007534:	f7ff fe8c 	bl	8007250 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007538:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800753a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800753c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007540:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007544:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800754c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800754c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007550:	2b01      	cmp	r3, #1
 8007552:	f04f 0302 	mov.w	r3, #2
 8007556:	d012      	beq.n	800757e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007558:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800755c:	6803      	ldr	r3, [r0, #0]
 800755e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8007566:	4a07      	ldr	r2, [pc, #28]	; (8007584 <HAL_LTDC_ProgramLineEvent+0x38>)
 8007568:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800756a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007572:	2301      	movs	r3, #1
 8007574:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007578:	2300      	movs	r3, #0
 800757a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800757e:	4618      	mov	r0, r3
}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	50001000 	.word	0x50001000

08007588 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800758c:	f7fe ff2e 	bl	80063ec <HAL_GetTick>
 8007590:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007592:	b144      	cbz	r4, 80075a6 <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007594:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007598:	2b02      	cmp	r3, #2
 800759a:	d006      	beq.n	80075aa <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80075a0:	2300      	movs	r3, #0
 80075a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80075a6:	2001      	movs	r0, #1
 80075a8:	e015      	b.n	80075d6 <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80075b2:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	f022 0201 	bic.w	r2, r2, #1
 80075ba:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	68d3      	ldr	r3, [r2, #12]
 80075c0:	f013 0301 	ands.w	r3, r3, #1
 80075c4:	d108      	bne.n	80075d8 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80075c6:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 80075c8:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80075ca:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 80075cc:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 80075ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80075d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80075d8:	f7fe ff08 	bl	80063ec <HAL_GetTick>
 80075dc:	1b40      	subs	r0, r0, r5
 80075de:	2805      	cmp	r0, #5
 80075e0:	d9ec      	bls.n	80075bc <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80075e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80075e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e8:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 80075ea:	2300      	movs	r3, #0
 80075ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80075f0:	2303      	movs	r3, #3
 80075f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 80075f6:	e7d6      	b.n	80075a6 <HAL_MDMA_Abort+0x1e>

080075f8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80075fc:	6804      	ldr	r4, [r0, #0]
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007604:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8007606:	6883      	ldr	r3, [r0, #8]
 8007608:	b92b      	cbnz	r3, 8007616 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	684a      	ldr	r2, [r1, #4]
 800760e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007612:	4313      	orrs	r3, r2
 8007614:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007616:	680b      	ldr	r3, [r1, #0]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d14e      	bne.n	80076ba <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800761c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8007620:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 8007624:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8007628:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800762c:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8007630:	433b      	orrs	r3, r7
 8007632:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8007634:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007636:	b16b      	cbz	r3, 8007654 <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007638:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800763a:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800763e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8007640:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007642:	f8d2 c000 	ldr.w	ip, [r2]
 8007646:	433b      	orrs	r3, r7
 8007648:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 800764a:	433b      	orrs	r3, r7
 800764c:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8007650:	433b      	orrs	r3, r7
 8007652:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8007654:	6833      	ldr	r3, [r6, #0]
 8007656:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8007658:	f023 031f 	bic.w	r3, r3, #31
 800765c:	433b      	orrs	r3, r7
 800765e:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007660:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007662:	b123      	cbz	r3, 800766e <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007664:	680e      	ldr	r6, [r1, #0]
 8007666:	b916      	cbnz	r6, 800766e <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8007668:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 800766a:	3e01      	subs	r6, #1
 800766c:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800766e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8007672:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8007676:	f1ba 0f00 	cmp.w	sl, #0
 800767a:	d076      	beq.n	800776a <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800767c:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 8007680:	f1b9 0f00 	cmp.w	r9, #0
 8007684:	d047      	beq.n	8007716 <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007686:	6817      	ldr	r7, [r2, #0]
 8007688:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800768c:	b34b      	cbz	r3, 80076e2 <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800768e:	ea43 000a 	orr.w	r0, r3, sl
 8007692:	ea40 0309 	orr.w	r3, r0, r9
 8007696:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8007698:	ea43 0308 	orr.w	r3, r3, r8
 800769c:	ea43 030e 	orr.w	r3, r3, lr
 80076a0:	ea43 030c 	orr.w	r3, r3, ip
 80076a4:	4333      	orrs	r3, r6
 80076a6:	4303      	orrs	r3, r0
 80076a8:	483e      	ldr	r0, [pc, #248]	; (80077a4 <OSPI_ConfigCmd+0x1ac>)
 80076aa:	4038      	ands	r0, r7
 80076ac:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80076ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80076b0:	688b      	ldr	r3, [r1, #8]
 80076b2:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80076b4:	698b      	ldr	r3, [r1, #24]
 80076b6:	64a3      	str	r3, [r4, #72]	; 0x48
 80076b8:	e040      	b.n	800773c <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80076ba:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80076bc:	bf01      	itttt	eq
 80076be:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80076c2:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80076c6:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80076ca:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80076ce:	bf1f      	itttt	ne
 80076d0:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80076d4:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 80076d8:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 80076dc:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 80076e0:	e7a4      	b.n	800762c <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80076e2:	ea4a 0309 	orr.w	r3, sl, r9
 80076e6:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 80076ea:	ea43 0308 	orr.w	r3, r3, r8
 80076ee:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 80076f2:	ea43 030e 	orr.w	r3, r3, lr
 80076f6:	ea43 030c 	orr.w	r3, r3, ip
 80076fa:	4333      	orrs	r3, r6
 80076fc:	433b      	orrs	r3, r7
 80076fe:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007700:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007706:	d1d3      	bne.n	80076b0 <OSPI_ConfigCmd+0xb8>
 8007708:	694b      	ldr	r3, [r1, #20]
 800770a:	2b08      	cmp	r3, #8
 800770c:	d1d0      	bne.n	80076b0 <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007714:	e7cb      	b.n	80076ae <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007716:	b1a3      	cbz	r3, 8007742 <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8007718:	ea43 030a 	orr.w	r3, r3, sl
 800771c:	6810      	ldr	r0, [r2, #0]
 800771e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8007720:	ea43 0308 	orr.w	r3, r3, r8
 8007724:	ea43 030e 	orr.w	r3, r3, lr
 8007728:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 800772c:	4323      	orrs	r3, r4
 800772e:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 8007732:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007736:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 8007738:	688b      	ldr	r3, [r1, #8]
 800773a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8007742:	6814      	ldr	r4, [r2, #0]
 8007744:	ea4a 0308 	orr.w	r3, sl, r8
 8007748:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800774c:	ea43 030e 	orr.w	r3, r3, lr
 8007750:	4323      	orrs	r3, r4
 8007752:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007754:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775a:	d1ed      	bne.n	8007738 <OSPI_ConfigCmd+0x140>
 800775c:	694b      	ldr	r3, [r1, #20]
 800775e:	2b08      	cmp	r3, #8
 8007760:	d1ea      	bne.n	8007738 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007762:	6813      	ldr	r3, [r2, #0]
 8007764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007768:	e7e5      	b.n	8007736 <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800776a:	f1b9 0f00 	cmp.w	r9, #0
 800776e:	d014      	beq.n	800779a <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8007770:	6810      	ldr	r0, [r2, #0]
 8007772:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007776:	b163      	cbz	r3, 8007792 <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8007778:	ea43 0309 	orr.w	r3, r3, r9
 800777c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007780:	4333      	orrs	r3, r6
 8007782:	432b      	orrs	r3, r5
 8007784:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 8007786:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8007788:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800778c:	4303      	orrs	r3, r0
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e790      	b.n	80076b4 <OSPI_ConfigCmd+0xbc>
 8007792:	ea49 0306 	orr.w	r3, r9, r6
 8007796:	432b      	orrs	r3, r5
 8007798:	e7f6      	b.n	8007788 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800779a:	2308      	movs	r3, #8
 800779c:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 800779e:	2001      	movs	r0, #1
 80077a0:	e7cd      	b.n	800773e <OSPI_ConfigCmd+0x146>
 80077a2:	bf00      	nop
 80077a4:	f0ffc0c0 	.word	0xf0ffc0c0

080077a8 <OSPI_WaitFlagStateUntilTimeout>:
{
 80077a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80077b0:	4604      	mov	r4, r0
 80077b2:	460e      	mov	r6, r1
 80077b4:	4615      	mov	r5, r2
 80077b6:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80077b8:	6822      	ldr	r2, [r4, #0]
 80077ba:	6a13      	ldr	r3, [r2, #32]
 80077bc:	4233      	tst	r3, r6
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	d101      	bne.n	80077cc <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80077c8:	2000      	movs	r0, #0
 80077ca:	e012      	b.n	80077f2 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80077cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80077d0:	d0f3      	beq.n	80077ba <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d2:	f7fe fe0b 	bl	80063ec <HAL_GetTick>
 80077d6:	1bc0      	subs	r0, r0, r7
 80077d8:	4540      	cmp	r0, r8
 80077da:	d802      	bhi.n	80077e2 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 80077dc:	f1b8 0f00 	cmp.w	r8, #0
 80077e0:	d1ea      	bne.n	80077b8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80077e2:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80077e6:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80077e8:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80077ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80077f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080077f8 <HAL_OSPI_Init>:
{
 80077f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80077fe:	f7fe fdf5 	bl	80063ec <HAL_GetTick>
 8007802:	4603      	mov	r3, r0
  if (hospi == NULL)
 8007804:	2c00      	cmp	r4, #0
 8007806:	d068      	beq.n	80078da <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007808:	2000      	movs	r0, #0
 800780a:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800780c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800780e:	2e00      	cmp	r6, #0
 8007810:	d161      	bne.n	80078d6 <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 8007812:	4620      	mov	r0, r4
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	f7f9 ff3b 	bl	8001690 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 800781a:	69e0      	ldr	r0, [r4, #28]
 800781c:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800781e:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 8007822:	6825      	ldr	r5, [r4, #0]
 8007824:	4301      	orrs	r1, r0
 8007826:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007828:	68af      	ldr	r7, [r5, #8]
 800782a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800782e:	482c      	ldr	r0, [pc, #176]	; (80078e0 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 8007830:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 8007832:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007834:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 8007836:	4301      	orrs	r1, r0
 8007838:	6920      	ldr	r0, [r4, #16]
 800783a:	3801      	subs	r0, #1
 800783c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007840:	6960      	ldr	r0, [r4, #20]
 8007842:	3801      	subs	r0, #1
 8007844:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007848:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 800784a:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800784c:	68e9      	ldr	r1, [r5, #12]
 800784e:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007852:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007854:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007856:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007858:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800785a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800785e:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007860:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007862:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8007864:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007866:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007868:	6829      	ldr	r1, [r5, #0]
 800786a:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 800786e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007872:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007874:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007876:	2120      	movs	r1, #32
 8007878:	9200      	str	r2, [sp, #0]
 800787a:	4632      	mov	r2, r6
 800787c:	f7ff ff94 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007880:	bb48      	cbnz	r0, 80078d6 <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007886:	68d9      	ldr	r1, [r3, #12]
 8007888:	3a01      	subs	r2, #1
 800788a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800788e:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007890:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007892:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800789e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80078a2:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80078a6:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80078aa:	432a      	orrs	r2, r5
 80078ac:	430a      	orrs	r2, r1
 80078ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80078ba:	69a2      	ldr	r2, [r4, #24]
 80078bc:	2a02      	cmp	r2, #2
 80078be:	d103      	bne.n	80078c8 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	f042 0202 	orr.w	r2, r2, #2
 80078c6:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80078c8:	68e3      	ldr	r3, [r4, #12]
 80078ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 80078d2:	2302      	movne	r3, #2
 80078d4:	6563      	str	r3, [r4, #84]	; 0x54
}
 80078d6:	b005      	add	sp, #20
 80078d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80078da:	2001      	movs	r0, #1
 80078dc:	e7fb      	b.n	80078d6 <HAL_OSPI_Init+0xde>
 80078de:	bf00      	nop
 80078e0:	f8e0f88c 	.word	0xf8e0f88c

080078e4 <HAL_OSPI_DeInit>:
{
 80078e4:	b510      	push	{r4, lr}
  if (hospi == NULL)
 80078e6:	4604      	mov	r4, r0
 80078e8:	b168      	cbz	r0, 8007906 <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 80078ea:	6803      	ldr	r3, [r0, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	f022 0202 	bic.w	r2, r2, #2
 80078fa:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 80078fc:	f7f9 fff8 	bl	80018f0 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8007900:	2000      	movs	r0, #0
 8007902:	6560      	str	r0, [r4, #84]	; 0x54
}
 8007904:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8007906:	2001      	movs	r0, #1
 8007908:	e7fc      	b.n	8007904 <HAL_OSPI_DeInit+0x20>

0800790a <HAL_OSPI_Command>:
{
 800790a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800790c:	4604      	mov	r4, r0
 800790e:	4616      	mov	r6, r2
 8007910:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007912:	f7fe fd6b 	bl	80063ec <HAL_GetTick>
  state = hospi->State;
 8007916:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8007918:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800791a:	2a02      	cmp	r2, #2
 800791c:	d107      	bne.n	800792e <HAL_OSPI_Command+0x24>
 800791e:	68e2      	ldr	r2, [r4, #12]
 8007920:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007924:	d109      	bne.n	800793a <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007926:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007928:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800792a:	65a3      	str	r3, [r4, #88]	; 0x58
 800792c:	e01f      	b.n	800796e <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800792e:	2a14      	cmp	r2, #20
 8007930:	d11f      	bne.n	8007972 <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8007932:	682a      	ldr	r2, [r5, #0]
 8007934:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007936:	2a01      	cmp	r2, #1
 8007938:	d8f5      	bhi.n	8007926 <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800793a:	2200      	movs	r2, #0
 800793c:	2120      	movs	r1, #32
 800793e:	4620      	mov	r0, r4
 8007940:	9600      	str	r6, [sp, #0]
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	f7ff ff30 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007948:	b988      	cbnz	r0, 800796e <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800794a:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 800794c:	4629      	mov	r1, r5
 800794e:	4620      	mov	r0, r4
 8007950:	f7ff fe52 	bl	80075f8 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8007954:	b958      	cbnz	r0, 800796e <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8007956:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	b992      	cbnz	r2, 8007982 <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800795c:	2201      	movs	r2, #1
 800795e:	2102      	movs	r1, #2
 8007960:	4620      	mov	r0, r4
 8007962:	9600      	str	r6, [sp, #0]
 8007964:	f7ff ff20 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	2202      	movs	r2, #2
 800796c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800796e:	b004      	add	sp, #16
 8007970:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8007972:	2a24      	cmp	r2, #36	; 0x24
 8007974:	d1d7      	bne.n	8007926 <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8007976:	682a      	ldr	r2, [r5, #0]
 8007978:	f022 0202 	bic.w	r2, r2, #2
 800797c:	2a01      	cmp	r2, #1
 800797e:	d1d2      	bne.n	8007926 <HAL_OSPI_Command+0x1c>
 8007980:	e7db      	b.n	800793a <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	b90b      	cbnz	r3, 800798a <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007986:	2304      	movs	r3, #4
 8007988:	e005      	b.n	8007996 <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800798a:	2b01      	cmp	r3, #1
 800798c:	d105      	bne.n	800799a <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800798e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007990:	2b24      	cmp	r3, #36	; 0x24
 8007992:	d0f8      	beq.n	8007986 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8007994:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007996:	6563      	str	r3, [r4, #84]	; 0x54
 8007998:	e7e9      	b.n	800796e <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800799a:	2b02      	cmp	r3, #2
 800799c:	d1e7      	bne.n	800796e <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800799e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079a0:	2b14      	cmp	r3, #20
 80079a2:	d0f0      	beq.n	8007986 <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80079a4:	2324      	movs	r3, #36	; 0x24
 80079a6:	e7f6      	b.n	8007996 <HAL_OSPI_Command+0x8c>

080079a8 <HAL_OSPI_HyperbusCfg>:
{
 80079a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	4616      	mov	r6, r2
 80079ae:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80079b0:	f7fe fd1c 	bl	80063ec <HAL_GetTick>
  state = hospi->State;
 80079b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 80079b6:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80079b8:	3a01      	subs	r2, #1
 80079ba:	2a01      	cmp	r2, #1
 80079bc:	d816      	bhi.n	80079ec <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80079be:	2200      	movs	r2, #0
 80079c0:	2120      	movs	r1, #32
 80079c2:	4620      	mov	r0, r4
 80079c4:	9600      	str	r6, [sp, #0]
 80079c6:	f7ff feef 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80079ca:	b968      	cbnz	r0, 80079e8 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6829      	ldr	r1, [r5, #0]
 80079d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079da:	6869      	ldr	r1, [r5, #4]
 80079dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 80079e4:	2302      	movs	r3, #2
 80079e6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80079e8:	b002      	add	sp, #8
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079ec:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80079ee:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80079f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80079f2:	e7f9      	b.n	80079e8 <HAL_OSPI_HyperbusCfg+0x40>

080079f4 <HAL_OSPI_HyperbusCmd>:
{
 80079f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	4616      	mov	r6, r2
 80079fa:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80079fc:	f7fe fcf6 	bl	80063ec <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8007a00:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8007a02:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8007a04:	2a02      	cmp	r2, #2
 8007a06:	d127      	bne.n	8007a58 <HAL_OSPI_HyperbusCmd+0x64>
 8007a08:	68e2      	ldr	r2, [r4, #12]
 8007a0a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007a0e:	d123      	bne.n	8007a58 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007a10:	2200      	movs	r2, #0
 8007a12:	2120      	movs	r1, #32
 8007a14:	4620      	mov	r0, r4
 8007a16:	9600      	str	r6, [sp, #0]
 8007a18:	f7ff fec6 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007a1c:	b9d0      	cbnz	r0, 8007a54 <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a1e:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a20:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a28:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a30:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007a32:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8007a34:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8007a36:	692a      	ldr	r2, [r5, #16]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8007a3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8007a42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8007a46:	68ea      	ldr	r2, [r5, #12]
 8007a48:	3a01      	subs	r2, #1
 8007a4a:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8007a4c:	686a      	ldr	r2, [r5, #4]
 8007a4e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007a50:	2304      	movs	r3, #4
 8007a52:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007a54:	b002      	add	sp, #8
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a58:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007a5a:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a5e:	e7f9      	b.n	8007a54 <HAL_OSPI_HyperbusCmd+0x60>

08007a60 <HAL_OSPI_Transmit>:
{
 8007a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a62:	460f      	mov	r7, r1
 8007a64:	b085      	sub	sp, #20
 8007a66:	4604      	mov	r4, r0
 8007a68:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8007a6a:	f7fe fcbf 	bl	80063ec <HAL_GetTick>
 8007a6e:	4603      	mov	r3, r0
  if (pData == NULL)
 8007a70:	b91f      	cbnz	r7, 8007a7a <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007a72:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007a74:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007a76:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a78:	e02e      	b.n	8007ad8 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007a7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007a7c:	2a04      	cmp	r2, #4
 8007a7e:	d12d      	bne.n	8007adc <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007a80:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007a82:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007a84:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007a86:	3201      	adds	r2, #1
 8007a88:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007a8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007a8c:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007a8e:	6832      	ldr	r2, [r6, #0]
 8007a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a94:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8007a96:	2201      	movs	r2, #1
 8007a98:	2104      	movs	r1, #4
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	9500      	str	r5, [sp, #0]
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	f7ff fe82 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007aa4:	b9c0      	cbnz	r0, 8007ad8 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007aa6:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 8007aa8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 8007ab0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007ab6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ab8:	3a01      	subs	r2, #1
 8007aba:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 8007abc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1e9      	bne.n	8007a96 <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	9500      	str	r5, [sp, #0]
 8007aca:	f7ff fe6d 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007ace:	b918      	cbnz	r0, 8007ad8 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007ad6:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007ad8:	b005      	add	sp, #20
 8007ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007adc:	2310      	movs	r3, #16
 8007ade:	e7c9      	b.n	8007a74 <HAL_OSPI_Transmit+0x14>

08007ae0 <HAL_OSPI_Receive>:
{
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8007aea:	f7fe fc7f 	bl	80063ec <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8007aee:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007af0:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007af2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007af4:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8007af8:	b91f      	cbnz	r7, 8007b02 <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007afa:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8007afc:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007afe:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b00:	e034      	b.n	8007b6c <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007b02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007b04:	2a04      	cmp	r2, #4
 8007b06:	d13b      	bne.n	8007b80 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007b08:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8007b0a:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8007b0c:	3201      	adds	r2, #1
 8007b0e:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8007b10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b12:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b14:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b16:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b18:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b1c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007b20:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007b24:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b26:	d123      	bne.n	8007b70 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007b28:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	2106      	movs	r1, #6
 8007b2e:	4620      	mov	r0, r4
 8007b30:	9600      	str	r6, [sp, #0]
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	f7ff fe38 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007b38:	b9c0      	cbnz	r0, 8007b6c <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b3a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8007b3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8007b40:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8007b42:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8007b44:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b46:	3201      	adds	r2, #1
 8007b48:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8007b4a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b4c:	3a01      	subs	r2, #1
 8007b4e:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8007b50:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d1e9      	bne.n	8007b2a <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b56:	2201      	movs	r2, #1
 8007b58:	2102      	movs	r1, #2
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	9600      	str	r6, [sp, #0]
 8007b5e:	f7ff fe23 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007b62:	b918      	cbnz	r0, 8007b6c <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007b64:	2302      	movs	r3, #2
 8007b66:	6822      	ldr	r2, [r4, #0]
 8007b68:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8007b6a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007b6c:	b005      	add	sp, #20
 8007b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007b70:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8007b74:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8007b78:	d1d6      	bne.n	8007b28 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007b7a:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8007b7e:	e7d4      	b.n	8007b2a <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007b80:	2310      	movs	r3, #16
 8007b82:	e7bb      	b.n	8007afc <HAL_OSPI_Receive+0x1c>

08007b84 <HAL_OSPI_AutoPolling>:
{
 8007b84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4616      	mov	r6, r2
 8007b8c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007b8e:	f7fe fc2d 	bl	80063ec <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8007b92:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007b94:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8007b96:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8007b98:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8007b9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007b9e:	2a04      	cmp	r2, #4
 8007ba0:	d13c      	bne.n	8007c1c <HAL_OSPI_AutoPolling+0x98>
 8007ba2:	68ea      	ldr	r2, [r5, #12]
 8007ba4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007ba8:	d138      	bne.n	8007c1c <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007baa:	9003      	str	r0, [sp, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	2120      	movs	r1, #32
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	9600      	str	r6, [sp, #0]
 8007bb4:	f7ff fdf8 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007bb8:	bb28      	cbnz	r0, 8007c06 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007bba:	6829      	ldr	r1, [r5, #0]
 8007bbc:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007bbe:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8007bc0:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8007bc4:	6869      	ldr	r1, [r5, #4]
 8007bc6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8007bca:	6929      	ldr	r1, [r5, #16]
 8007bcc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8007bd0:	6810      	ldr	r0, [r2, #0]
 8007bd2:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8007bd6:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8007bda:	4329      	orrs	r1, r5
 8007bdc:	4301      	orrs	r1, r0
 8007bde:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007be2:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007be4:	68e1      	ldr	r1, [r4, #12]
 8007be6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007bea:	d10f      	bne.n	8007c0c <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8007bec:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8007bee:	2201      	movs	r2, #1
 8007bf0:	2108      	movs	r1, #8
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	9600      	str	r6, [sp, #0]
 8007bf6:	f7ff fdd7 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007bfa:	b920      	cbnz	r0, 8007c06 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	2208      	movs	r2, #8
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8007c02:	2302      	movs	r3, #2
 8007c04:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007c06:	b004      	add	sp, #16
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8007c0c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8007c10:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8007c14:	d1ea      	bne.n	8007bec <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8007c16:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8007c1a:	e7e8      	b.n	8007bee <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c1c:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007c1e:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c20:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c22:	e7f0      	b.n	8007c06 <HAL_OSPI_AutoPolling+0x82>

08007c24 <HAL_OSPI_MemoryMapped>:
{
 8007c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c26:	4604      	mov	r4, r0
 8007c28:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007c2a:	f7fe fbdf 	bl	80063ec <HAL_GetTick>
 8007c2e:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8007c30:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007c32:	2a04      	cmp	r2, #4
 8007c34:	d121      	bne.n	8007c7a <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007c36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c38:	2120      	movs	r1, #32
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	9200      	str	r2, [sp, #0]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f7ff fdb2 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007c44:	b9b8      	cbnz	r0, 8007c76 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c46:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007c48:	2388      	movs	r3, #136	; 0x88
 8007c4a:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c4c:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8007c4e:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8007c50:	d108      	bne.n	8007c64 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8007c52:	686b      	ldr	r3, [r5, #4]
 8007c54:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8007c58:	2310      	movs	r3, #16
 8007c5a:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007c62:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007c64:	6813      	ldr	r3, [r2, #0]
 8007c66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007c6a:	f023 0308 	bic.w	r3, r3, #8
 8007c6e:	4333      	orrs	r3, r6
 8007c70:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8007c74:	6013      	str	r3, [r2, #0]
}
 8007c76:	b002      	add	sp, #8
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c7a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007c7c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007c7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c80:	e7f9      	b.n	8007c76 <HAL_OSPI_MemoryMapped+0x52>

08007c82 <HAL_OSPI_Abort>:
{
 8007c82:	b530      	push	{r4, r5, lr}
 8007c84:	4604      	mov	r4, r0
 8007c86:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8007c88:	f7fe fbb0 	bl	80063ec <HAL_GetTick>
 8007c8c:	4603      	mov	r3, r0
  state = hospi->State;
 8007c8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007c90:	f012 0f0c 	tst.w	r2, #12
 8007c94:	d035      	beq.n	8007d02 <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	680a      	ldr	r2, [r1, #0]
 8007c9a:	f012 0204 	ands.w	r2, r2, #4
 8007c9e:	d02b      	beq.n	8007cf8 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007ca0:	680a      	ldr	r2, [r1, #0]
 8007ca2:	9003      	str	r0, [sp, #12]
 8007ca4:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007ca8:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007caa:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8007cac:	f7ff fc6c 	bl	8007588 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	b108      	cbz	r0, 8007cb8 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	6a11      	ldr	r1, [r2, #32]
 8007cbc:	0689      	lsls	r1, r1, #26
 8007cbe:	d51d      	bpl.n	8007cfc <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007cc0:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007cc6:	f041 0102 	orr.w	r1, r1, #2
 8007cca:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007ccc:	2102      	movs	r1, #2
 8007cce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007cd0:	9200      	str	r2, [sp, #0]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f7ff fd68 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	b958      	cbnz	r0, 8007cf4 <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007ce0:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007ce2:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007ce4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007ce6:	9200      	str	r2, [sp, #0]
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7ff fd5c 	bl	80077a8 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007cf0:	b900      	cbnz	r0, 8007cf4 <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8007cf2:	6565      	str	r5, [r4, #84]	; 0x54
}
 8007cf4:	b005      	add	sp, #20
 8007cf6:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	e7dd      	b.n	8007cb8 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	6563      	str	r3, [r4, #84]	; 0x54
 8007d00:	e7f8      	b.n	8007cf4 <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d02:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8007d04:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007d06:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d08:	e7f4      	b.n	8007cf4 <HAL_OSPI_Abort+0x72>
	...

08007d0c <HAL_OSPIM_Config>:
    other_instance = 0U;
 8007d0c:	4bc4      	ldr	r3, [pc, #784]	; (8008020 <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8007d0e:	6802      	ldr	r2, [r0, #0]
{
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8007d14:	429a      	cmp	r2, r3
{
 8007d16:	b08f      	sub	sp, #60	; 0x3c
 8007d18:	4688      	mov	r8, r1
    instance = 1U;
 8007d1a:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8007d1e:	bf0b      	itete	eq
 8007d20:	f04f 0c01 	moveq.w	ip, #1
 8007d24:	f04f 0c00 	movne.w	ip, #0
 8007d28:	2400      	moveq	r4, #0
 8007d2a:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007d2c:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007d2e:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007d30:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8008028 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007d34:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 800802c <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8007d38:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8007d3a:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8007d3c:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8007d40:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8007d44:	f040 8126 	bne.w	8007f94 <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007d48:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8007d4c:	f012 0f01 	tst.w	r2, #1
 8007d50:	bf0c      	ite	eq
 8007d52:	4648      	moveq	r0, r9
 8007d54:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007d58:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8007d5a:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8007d5e:	1c79      	adds	r1, r7, #1
 8007d60:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007d62:	07d7      	lsls	r7, r2, #31
 8007d64:	d504      	bpl.n	8007d70 <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007d66:	ea82 0700 	eor.w	r7, r2, r0
 8007d6a:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007d6c:	bf58      	it	pl
 8007d6e:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007d70:	06d7      	lsls	r7, r2, #27
 8007d72:	d504      	bpl.n	8007d7e <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007d74:	ea82 0700 	eor.w	r7, r2, r0
 8007d78:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007d7a:	bf58      	it	pl
 8007d7c:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007d7e:	05d7      	lsls	r7, r2, #23
 8007d80:	d504      	bpl.n	8007d8c <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007d82:	ea82 0700 	eor.w	r7, r2, r0
 8007d86:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007d88:	bf58      	it	pl
 8007d8a:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007d8c:	03d7      	lsls	r7, r2, #15
 8007d8e:	d50a      	bpl.n	8007da6 <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007d90:	ea82 0700 	eor.w	r7, r2, r0
 8007d94:	037f      	lsls	r7, r7, #13
 8007d96:	d406      	bmi.n	8007da6 <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007d98:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007d9a:	bf54      	ite	pl
 8007d9c:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007da0:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8007da4:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007da6:	01d7      	lsls	r7, r2, #7
 8007da8:	d50a      	bpl.n	8007dc0 <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007daa:	ea82 0700 	eor.w	r7, r2, r0
 8007dae:	017f      	lsls	r7, r7, #5
 8007db0:	d406      	bmi.n	8007dc0 <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007db2:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007db4:	bf54      	ite	pl
 8007db6:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007dba:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8007dbe:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007dc0:	2902      	cmp	r1, #2
 8007dc2:	f04f 0701 	mov.w	r7, #1
 8007dc6:	d1c8      	bne.n	8007d5a <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007dc8:	2d02      	cmp	r5, #2
 8007dca:	f103 0318 	add.w	r3, r3, #24
 8007dce:	f040 80df 	bne.w	8007f90 <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007dd2:	4a93      	ldr	r2, [pc, #588]	; (8008020 <HAL_OSPIM_Config+0x314>)
 8007dd4:	6815      	ldr	r5, [r2, #0]
 8007dd6:	403d      	ands	r5, r7
 8007dd8:	d004      	beq.n	8007de4 <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007dda:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007ddc:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007de4:	4b8f      	ldr	r3, [pc, #572]	; (8008024 <HAL_OSPIM_Config+0x318>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	07d0      	lsls	r0, r2, #31
 8007dea:	f140 80d5 	bpl.w	8007f98 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8007df6:	f045 0302 	orr.w	r3, r5, #2
 8007dfa:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007dfc:	ab0e      	add	r3, sp, #56	; 0x38
 8007dfe:	2218      	movs	r2, #24
 8007e00:	fb02 3204 	mla	r2, r2, r4, r3
 8007e04:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e0e:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e18:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007e1a:	4b83      	ldr	r3, [pc, #524]	; (8008028 <HAL_OSPIM_Config+0x31c>)
 8007e1c:	6819      	ldr	r1, [r3, #0]
 8007e1e:	07c9      	lsls	r1, r1, #31
 8007e20:	f140 80bc 	bpl.w	8007f9c <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8007e2c:	f1bc 0f00 	cmp.w	ip, #0
 8007e30:	d030      	beq.n	8007e94 <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8007e32:	9b08      	ldr	r3, [sp, #32]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e3a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	f042 0202 	orr.w	r2, r2, #2
 8007e44:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	b143      	cbz	r3, 8007e5c <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e50:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	f042 0220 	orr.w	r2, r2, #32
 8007e5a:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5e:	b15b      	cbz	r3, 8007e78 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8007e60:	3b01      	subs	r3, #1
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e6c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e76:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7a:	b15b      	cbz	r3, 8007e94 <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007e88:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007e92:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007e94:	ab0e      	add	r3, sp, #56	; 0x38
 8007e96:	f04f 0a18 	mov.w	sl, #24
 8007e9a:	f8d8 7000 	ldr.w	r7, [r8]
 8007e9e:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8007ea2:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8007ea6:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8007eaa:	454f      	cmp	r7, r9
 8007eac:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8007eb0:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8007eb4:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8007eb8:	f000 80ba 	beq.w	8008030 <HAL_OSPIM_Config+0x324>
 8007ebc:	4583      	cmp	fp, r0
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_OSPIM_Config+0x1ca>
 8007ec0:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8007ec4:	4576      	cmp	r6, lr
 8007ec6:	d006      	beq.n	8007ed6 <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007ec8:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8007ecc:	4592      	cmp	sl, r2
 8007ece:	d002      	beq.n	8007ed6 <HAL_OSPIM_Config+0x1ca>
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	f040 80c0 	bne.w	8008056 <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007ed6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007eda:	ae0e      	add	r6, sp, #56	; 0x38
 8007edc:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007ee0:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007ee4:	f8d9 a000 	ldr.w	sl, [r9]
 8007ee8:	f02a 0a01 	bic.w	sl, sl, #1
 8007eec:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007ef0:	f04f 0918 	mov.w	r9, #24
 8007ef4:	fb09 690c 	mla	r9, r9, ip, r6
 8007ef8:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8007efc:	f1b9 0f00 	cmp.w	r9, #0
 8007f00:	d00b      	beq.n	8007f1a <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007f02:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007f06:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007f0a:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8007f0e:	f8d9 a000 	ldr.w	sl, [r9]
 8007f12:	f02a 0a10 	bic.w	sl, sl, #16
 8007f16:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f1a:	f04f 0918 	mov.w	r9, #24
 8007f1e:	ae0e      	add	r6, sp, #56	; 0x38
 8007f20:	fb09 6c0c 	mla	ip, r9, ip, r6
 8007f24:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f28:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8007f2c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007f30:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8007f34:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007f38:	f8d9 a000 	ldr.w	sl, [r9]
 8007f3c:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8007f40:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f44:	f1bc 0f00 	cmp.w	ip, #0
 8007f48:	d00f      	beq.n	8007f6a <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007f4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f4e:	f00c 0c01 	and.w	ip, ip, #1
 8007f52:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f56:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007f5a:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007f5e:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8007f62:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8007f66:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	d073      	beq.n	8008056 <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007f6e:	f101 3cff 	add.w	ip, r1, #4294967295
 8007f72:	f00c 0c01 	and.w	ip, ip, #1
 8007f76:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f7a:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8007f7e:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8007f82:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007f86:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007f8a:	f8cc 1004 	str.w	r1, [ip, #4]
 8007f8e:	e062      	b.n	8008056 <HAL_OSPIM_Config+0x34a>
 8007f90:	460d      	mov	r5, r1
 8007f92:	e6d1      	b.n	8007d38 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 8007f94:	2000      	movs	r0, #0
 8007f96:	e6df      	b.n	8007d58 <HAL_OSPIM_Config+0x4c>
 8007f98:	9501      	str	r5, [sp, #4]
 8007f9a:	e72f      	b.n	8007dfc <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8007f9c:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f43f af77 	beq.w	8007e94 <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007fac:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007fb0:	6819      	ldr	r1, [r3, #0]
 8007fb2:	f021 0101 	bic.w	r1, r1, #1
 8007fb6:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007fb8:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8007fbc:	b143      	cbz	r3, 8007fd0 <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007fc4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	f022 0210 	bic.w	r2, r2, #16
 8007fce:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007fd0:	2318      	movs	r3, #24
 8007fd2:	aa0e      	add	r2, sp, #56	; 0x38
 8007fd4:	fb03 2304 	mla	r3, r3, r4, r2
 8007fd8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007fdc:	b15b      	cbz	r3, 8007ff6 <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8007fea:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ff4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ff6:	2318      	movs	r3, #24
 8007ff8:	aa0e      	add	r2, sp, #56	; 0x38
 8007ffa:	fb03 2304 	mla	r3, r3, r4, r2
 8007ffe:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f43f af46 	beq.w	8007e94 <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8008008:	3b01      	subs	r3, #1
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008014:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800801e:	e738      	b.n	8007e92 <HAL_OSPIM_Config+0x186>
 8008020:	52005000 	.word	0x52005000
 8008024:	5200a000 	.word	0x5200a000
 8008028:	5200b400 	.word	0x5200b400
 800802c:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8008030:	4583      	cmp	fp, r0
 8008032:	f47f af50 	bne.w	8007ed6 <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8008036:	f85a ac24 	ldr.w	sl, [sl, #-36]
 800803a:	4592      	cmp	sl, r2
 800803c:	f47f af4b 	bne.w	8007ed6 <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8008040:	4299      	cmp	r1, r3
 8008042:	f47f af48 	bne.w	8007ed6 <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8008046:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8008244 <HAL_OSPIM_Config+0x538>
 800804a:	f8dc 1000 	ldr.w	r1, [ip]
 800804e:	f041 0101 	orr.w	r1, r1, #1
 8008052:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8008056:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800805a:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 800805e:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 8008062:	f8de 1000 	ldr.w	r1, [lr]
 8008066:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800806a:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 800806e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008072:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8008076:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800807a:	f101 3eff 	add.w	lr, r1, #4294967295
 800807e:	4971      	ldr	r1, [pc, #452]	; (8008244 <HAL_OSPIM_Config+0x538>)
 8008080:	f8d1 c000 	ldr.w	ip, [r1]
 8008084:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8008088:	45e6      	cmp	lr, ip
 800808a:	d907      	bls.n	800809c <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800808c:	f8d1 c000 	ldr.w	ip, [r1]
 8008090:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 8008094:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8008098:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800809c:	6809      	ldr	r1, [r1, #0]
 800809e:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 80080a2:	f011 0f01 	tst.w	r1, #1
 80080a6:	ea4f 0187 	mov.w	r1, r7, lsl #2
 80080aa:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 80080ae:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 80080b2:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 80080b6:	d063      	beq.n	8008180 <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80080b8:	680c      	ldr	r4, [r1, #0]
 80080ba:	f024 0403 	bic.w	r4, r4, #3
 80080be:	f044 0401 	orr.w	r4, r4, #1
 80080c2:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 80080c4:	b150      	cbz	r0, 80080dc <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80080c6:	0080      	lsls	r0, r0, #2
 80080c8:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 80080cc:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80080d0:	6801      	ldr	r1, [r0, #0]
 80080d2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80080d6:	f041 0110 	orr.w	r1, r1, #16
 80080da:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080dc:	f1bc 0f00 	cmp.w	ip, #0
 80080e0:	d02e      	beq.n	8008140 <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80080e2:	3a01      	subs	r2, #1
 80080e4:	f002 0201 	and.w	r2, r2, #1
 80080e8:	0092      	lsls	r2, r2, #2
 80080ea:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80080ee:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80080f2:	6851      	ldr	r1, [r2, #4]
 80080f4:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80080f8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80080fc:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080fe:	b37f      	cbz	r7, 8008160 <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008100:	3b01      	subs	r3, #1
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800810c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008116:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800811a:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800811c:	b125      	cbz	r5, 8008128 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800811e:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <HAL_OSPIM_Config+0x53c>)
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d504      	bpl.n	8008138 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800812e:	4a47      	ldr	r2, [pc, #284]	; (800824c <HAL_OSPIM_Config+0x540>)
 8008130:	6813      	ldr	r3, [r2, #0]
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	6013      	str	r3, [r2, #0]
}
 8008138:	2000      	movs	r0, #0
 800813a:	b00f      	add	sp, #60	; 0x3c
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008140:	2a00      	cmp	r2, #0
 8008142:	d0dc      	beq.n	80080fe <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8008144:	3a01      	subs	r2, #1
 8008146:	f002 0201 	and.w	r2, r2, #1
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8008150:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8008154:	6851      	ldr	r1, [r2, #4]
 8008156:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800815a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800815e:	e7cd      	b.n	80080fc <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0db      	beq.n	800811c <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008164:	3b01      	subs	r3, #1
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008170:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800817a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800817e:	e7cc      	b.n	800811a <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8008180:	f8d1 e000 	ldr.w	lr, [r1]
 8008184:	f02e 0e03 	bic.w	lr, lr, #3
 8008188:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 800818c:	f04e 0e01 	orr.w	lr, lr, #1
 8008190:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 8008194:	b160      	cbz	r0, 80081b0 <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8008196:	0080      	lsls	r0, r0, #2
 8008198:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 800819c:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80081a0:	6801      	ldr	r1, [r0, #0]
 80081a2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80081a6:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80081aa:	f041 0110 	orr.w	r1, r1, #16
 80081ae:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80081b0:	f1bc 0f00 	cmp.w	ip, #0
 80081b4:	d021      	beq.n	80081fa <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80081b6:	3a01      	subs	r2, #1
 80081b8:	f002 0201 	and.w	r2, r2, #1
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80081c2:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80081c6:	6851      	ldr	r1, [r2, #4]
 80081c8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80081cc:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 80081d0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80081d4:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80081d6:	b317      	cbz	r7, 800821e <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081d8:	3b01      	subs	r3, #1
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80081e4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80081ee:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 80081f2:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80081f6:	605c      	str	r4, [r3, #4]
 80081f8:	e790      	b.n	800811c <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	d0eb      	beq.n	80081d6 <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80081fe:	3a01      	subs	r2, #1
 8008200:	f002 0201 	and.w	r2, r2, #1
 8008204:	0092      	lsls	r2, r2, #2
 8008206:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800820a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800820e:	6851      	ldr	r1, [r2, #4]
 8008210:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8008214:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8008218:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800821c:	e7da      	b.n	80081d4 <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800821e:	2b00      	cmp	r3, #0
 8008220:	f43f af7c 	beq.w	800811c <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8008224:	3b01      	subs	r3, #1
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8008230:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800823a:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 800823e:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8008242:	e7d8      	b.n	80081f6 <HAL_OSPIM_Config+0x4ea>
 8008244:	5200b400 	.word	0x5200b400
 8008248:	52005000 	.word	0x52005000
 800824c:	5200a000 	.word	0x5200a000

08008250 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008250:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008252:	4d1d      	ldr	r5, [pc, #116]	; (80082c8 <HAL_PWREx_ConfigSupply+0x78>)
{
 8008254:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008256:	68eb      	ldr	r3, [r5, #12]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	2b06      	cmp	r3, #6
 800825e:	d006      	beq.n	800826e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008260:	68e8      	ldr	r0, [r5, #12]
 8008262:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008266:	1b00      	subs	r0, r0, r4
 8008268:	bf18      	it	ne
 800826a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800826c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800826e:	68eb      	ldr	r3, [r5, #12]
 8008270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008274:	4303      	orrs	r3, r0
 8008276:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008278:	f7fe f8b8 	bl	80063ec <HAL_GetTick>
 800827c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800827e:	686b      	ldr	r3, [r5, #4]
 8008280:	049b      	lsls	r3, r3, #18
 8008282:	d508      	bpl.n	8008296 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008284:	f1a4 031d 	sub.w	r3, r4, #29
 8008288:	2b01      	cmp	r3, #1
 800828a:	d90c      	bls.n	80082a6 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800828c:	3c2d      	subs	r4, #45	; 0x2d
 800828e:	2c01      	cmp	r4, #1
 8008290:	d909      	bls.n	80082a6 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8008292:	2000      	movs	r0, #0
 8008294:	e7ea      	b.n	800826c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008296:	f7fe f8a9 	bl	80063ec <HAL_GetTick>
 800829a:	1b80      	subs	r0, r0, r6
 800829c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80082a0:	d9ed      	bls.n	800827e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80082a2:	2001      	movs	r0, #1
 80082a4:	e7e2      	b.n	800826c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80082a6:	f7fe f8a1 	bl	80063ec <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 80082ac:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082ae:	68eb      	ldr	r3, [r5, #12]
 80082b0:	f003 0311 	and.w	r3, r3, #17
 80082b4:	2b11      	cmp	r3, #17
 80082b6:	d0ec      	beq.n	8008292 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082b8:	f7fe f898 	bl	80063ec <HAL_GetTick>
 80082bc:	1b00      	subs	r0, r0, r4
 80082be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80082c2:	d9f4      	bls.n	80082ae <HAL_PWREx_ConfigSupply+0x5e>
 80082c4:	e7ed      	b.n	80082a2 <HAL_PWREx_ConfigSupply+0x52>
 80082c6:	bf00      	nop
 80082c8:	58024800 	.word	0x58024800

080082cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082ce:	4604      	mov	r4, r0
 80082d0:	b908      	cbnz	r0, 80082d6 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80082d2:	2001      	movs	r0, #1
 80082d4:	e07f      	b.n	80083d6 <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082d6:	6803      	ldr	r3, [r0, #0]
 80082d8:	07df      	lsls	r7, r3, #31
 80082da:	d453      	bmi.n	8008384 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079e      	lsls	r6, r3, #30
 80082e0:	f100 80a3 	bmi.w	800842a <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	06da      	lsls	r2, r3, #27
 80082e8:	d51c      	bpl.n	8008324 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ea:	4ba0      	ldr	r3, [pc, #640]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 80082ec:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082f4:	2a08      	cmp	r2, #8
 80082f6:	d007      	beq.n	8008308 <HAL_RCC_OscConfig+0x3c>
 80082f8:	2a18      	cmp	r2, #24
 80082fa:	f040 80e5 	bne.w	80084c8 <HAL_RCC_OscConfig+0x1fc>
 80082fe:	f001 0203 	and.w	r2, r1, #3
 8008302:	2a01      	cmp	r2, #1
 8008304:	f040 80e0 	bne.w	80084c8 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	05db      	lsls	r3, r3, #23
 800830c:	d502      	bpl.n	8008314 <HAL_RCC_OscConfig+0x48>
 800830e:	69e3      	ldr	r3, [r4, #28]
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d1de      	bne.n	80082d2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008314:	4a95      	ldr	r2, [pc, #596]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 8008316:	6a21      	ldr	r1, [r4, #32]
 8008318:	68d3      	ldr	r3, [r2, #12]
 800831a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800831e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008322:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	0719      	lsls	r1, r3, #28
 8008328:	f100 80fb 	bmi.w	8008522 <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	069a      	lsls	r2, r3, #26
 8008330:	f100 8120 	bmi.w	8008574 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	075d      	lsls	r5, r3, #29
 8008338:	d51e      	bpl.n	8008378 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 800833a:	4d8d      	ldr	r5, [pc, #564]	; (8008570 <HAL_RCC_OscConfig+0x2a4>)
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008342:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008344:	f7fe f852 	bl	80063ec <HAL_GetTick>
 8008348:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	05da      	lsls	r2, r3, #23
 800834e:	f140 8136 	bpl.w	80085be <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	4d85      	ldr	r5, [pc, #532]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 8008356:	2b01      	cmp	r3, #1
 8008358:	f040 8138 	bne.w	80085cc <HAL_RCC_OscConfig+0x300>
 800835c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008364:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008368:	f7fe f840 	bl	80063ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800836c:	4e7f      	ldr	r6, [pc, #508]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 800836e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008370:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008372:	079b      	lsls	r3, r3, #30
 8008374:	f140 8150 	bpl.w	8008618 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008378:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800837a:	2800      	cmp	r0, #0
 800837c:	f040 8153 	bne.w	8008626 <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 8008380:	2000      	movs	r0, #0
 8008382:	e028      	b.n	80083d6 <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008384:	4b79      	ldr	r3, [pc, #484]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 8008386:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008388:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800838e:	2a10      	cmp	r2, #16
 8008390:	d005      	beq.n	800839e <HAL_RCC_OscConfig+0xd2>
 8008392:	2a18      	cmp	r2, #24
 8008394:	d10a      	bne.n	80083ac <HAL_RCC_OscConfig+0xe0>
 8008396:	f001 0203 	and.w	r2, r1, #3
 800839a:	2a02      	cmp	r2, #2
 800839c:	d106      	bne.n	80083ac <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	039d      	lsls	r5, r3, #14
 80083a2:	d59b      	bpl.n	80082dc <HAL_RCC_OscConfig+0x10>
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d198      	bne.n	80082dc <HAL_RCC_OscConfig+0x10>
 80083aa:	e792      	b.n	80082d2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ac:	6862      	ldr	r2, [r4, #4]
 80083ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80083b2:	d111      	bne.n	80083d8 <HAL_RCC_OscConfig+0x10c>
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083bc:	f7fe f816 	bl	80063ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c0:	4e6a      	ldr	r6, [pc, #424]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 80083c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c4:	6833      	ldr	r3, [r6, #0]
 80083c6:	0398      	lsls	r0, r3, #14
 80083c8:	d488      	bmi.n	80082dc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083ca:	f7fe f80f 	bl	80063ec <HAL_GetTick>
 80083ce:	1b40      	subs	r0, r0, r5
 80083d0:	2864      	cmp	r0, #100	; 0x64
 80083d2:	d9f7      	bls.n	80083c4 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 80083d4:	2003      	movs	r0, #3
}
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d8:	4d64      	ldr	r5, [pc, #400]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b99a      	cbnz	r2, 8008406 <HAL_RCC_OscConfig+0x13a>
 80083de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083ec:	f7fd fffe 	bl	80063ec <HAL_GetTick>
 80083f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	0399      	lsls	r1, r3, #14
 80083f6:	f57f af71 	bpl.w	80082dc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083fa:	f7fd fff7 	bl	80063ec <HAL_GetTick>
 80083fe:	1b80      	subs	r0, r0, r6
 8008400:	2864      	cmp	r0, #100	; 0x64
 8008402:	d9f6      	bls.n	80083f2 <HAL_RCC_OscConfig+0x126>
 8008404:	e7e6      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008406:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800840a:	d107      	bne.n	800841c <HAL_RCC_OscConfig+0x150>
 800840c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	e7cf      	b.n	80083bc <HAL_RCC_OscConfig+0xf0>
 800841c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008428:	e7f6      	b.n	8008418 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800842a:	4b50      	ldr	r3, [pc, #320]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 800842c:	68e1      	ldr	r1, [r4, #12]
 800842e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008430:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008432:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008436:	d003      	beq.n	8008440 <HAL_RCC_OscConfig+0x174>
 8008438:	2a18      	cmp	r2, #24
 800843a:	d121      	bne.n	8008480 <HAL_RCC_OscConfig+0x1b4>
 800843c:	0782      	lsls	r2, r0, #30
 800843e:	d11f      	bne.n	8008480 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	075b      	lsls	r3, r3, #29
 8008444:	d502      	bpl.n	800844c <HAL_RCC_OscConfig+0x180>
 8008446:	2900      	cmp	r1, #0
 8008448:	f43f af43 	beq.w	80082d2 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800844c:	4d47      	ldr	r5, [pc, #284]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 800844e:	682a      	ldr	r2, [r5, #0]
 8008450:	f022 0219 	bic.w	r2, r2, #25
 8008454:	430a      	orrs	r2, r1
 8008456:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8008458:	f7fd ffc8 	bl	80063ec <HAL_GetTick>
 800845c:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	075f      	lsls	r7, r3, #29
 8008462:	d507      	bpl.n	8008474 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008464:	686b      	ldr	r3, [r5, #4]
 8008466:	6922      	ldr	r2, [r4, #16]
 8008468:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800846c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008470:	606b      	str	r3, [r5, #4]
 8008472:	e737      	b.n	80082e4 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008474:	f7fd ffba 	bl	80063ec <HAL_GetTick>
 8008478:	1b80      	subs	r0, r0, r6
 800847a:	2802      	cmp	r0, #2
 800847c:	d9ef      	bls.n	800845e <HAL_RCC_OscConfig+0x192>
 800847e:	e7a9      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008480:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008482:	b181      	cbz	r1, 80084a6 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008484:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008488:	4d38      	ldr	r5, [pc, #224]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800848a:	430a      	orrs	r2, r1
 800848c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800848e:	f7fd ffad 	bl	80063ec <HAL_GetTick>
 8008492:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	0758      	lsls	r0, r3, #29
 8008498:	d4e4      	bmi.n	8008464 <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800849a:	f7fd ffa7 	bl	80063ec <HAL_GetTick>
 800849e:	1b80      	subs	r0, r0, r6
 80084a0:	2802      	cmp	r0, #2
 80084a2:	d9f7      	bls.n	8008494 <HAL_RCC_OscConfig+0x1c8>
 80084a4:	e796      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 80084a6:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084aa:	4e30      	ldr	r6, [pc, #192]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 80084ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084ae:	f7fd ff9d 	bl	80063ec <HAL_GetTick>
 80084b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b4:	6833      	ldr	r3, [r6, #0]
 80084b6:	0759      	lsls	r1, r3, #29
 80084b8:	f57f af14 	bpl.w	80082e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084bc:	f7fd ff96 	bl	80063ec <HAL_GetTick>
 80084c0:	1b40      	subs	r0, r0, r5
 80084c2:	2802      	cmp	r0, #2
 80084c4:	d9f6      	bls.n	80084b4 <HAL_RCC_OscConfig+0x1e8>
 80084c6:	e785      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80084c8:	69e2      	ldr	r2, [r4, #28]
 80084ca:	b1c2      	cbz	r2, 80084fe <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 80084cc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084ce:	4d27      	ldr	r5, [pc, #156]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 80084d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084d6:	f7fd ff89 	bl	80063ec <HAL_GetTick>
 80084da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	05df      	lsls	r7, r3, #23
 80084e0:	d507      	bpl.n	80084f2 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e2:	68eb      	ldr	r3, [r5, #12]
 80084e4:	6a22      	ldr	r2, [r4, #32]
 80084e6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80084ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084ee:	60eb      	str	r3, [r5, #12]
 80084f0:	e718      	b.n	8008324 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084f2:	f7fd ff7b 	bl	80063ec <HAL_GetTick>
 80084f6:	1b80      	subs	r0, r0, r6
 80084f8:	2802      	cmp	r0, #2
 80084fa:	d9ef      	bls.n	80084dc <HAL_RCC_OscConfig+0x210>
 80084fc:	e76a      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 80084fe:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008500:	4e1a      	ldr	r6, [pc, #104]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 8008502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008506:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008508:	f7fd ff70 	bl	80063ec <HAL_GetTick>
 800850c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	05d8      	lsls	r0, r3, #23
 8008512:	f57f af07 	bpl.w	8008324 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008516:	f7fd ff69 	bl	80063ec <HAL_GetTick>
 800851a:	1b40      	subs	r0, r0, r5
 800851c:	2802      	cmp	r0, #2
 800851e:	d9f6      	bls.n	800850e <HAL_RCC_OscConfig+0x242>
 8008520:	e758      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008522:	6963      	ldr	r3, [r4, #20]
 8008524:	4d11      	ldr	r5, [pc, #68]	; (800856c <HAL_RCC_OscConfig+0x2a0>)
 8008526:	b183      	cbz	r3, 800854a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8008528:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008530:	f7fd ff5c 	bl	80063ec <HAL_GetTick>
 8008534:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008536:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008538:	079b      	lsls	r3, r3, #30
 800853a:	f53f aef7 	bmi.w	800832c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800853e:	f7fd ff55 	bl	80063ec <HAL_GetTick>
 8008542:	1b80      	subs	r0, r0, r6
 8008544:	2802      	cmp	r0, #2
 8008546:	d9f6      	bls.n	8008536 <HAL_RCC_OscConfig+0x26a>
 8008548:	e744      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 800854a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008552:	f7fd ff4b 	bl	80063ec <HAL_GetTick>
 8008556:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008558:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800855a:	079f      	lsls	r7, r3, #30
 800855c:	f57f aee6 	bpl.w	800832c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008560:	f7fd ff44 	bl	80063ec <HAL_GetTick>
 8008564:	1b80      	subs	r0, r0, r6
 8008566:	2802      	cmp	r0, #2
 8008568:	d9f6      	bls.n	8008558 <HAL_RCC_OscConfig+0x28c>
 800856a:	e733      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
 800856c:	58024400 	.word	0x58024400
 8008570:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008574:	69a3      	ldr	r3, [r4, #24]
 8008576:	4d83      	ldr	r5, [pc, #524]	; (8008784 <HAL_RCC_OscConfig+0x4b8>)
 8008578:	b183      	cbz	r3, 800859c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008580:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008582:	f7fd ff33 	bl	80063ec <HAL_GetTick>
 8008586:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	0498      	lsls	r0, r3, #18
 800858c:	f53f aed2 	bmi.w	8008334 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008590:	f7fd ff2c 	bl	80063ec <HAL_GetTick>
 8008594:	1b80      	subs	r0, r0, r6
 8008596:	2802      	cmp	r0, #2
 8008598:	d9f6      	bls.n	8008588 <HAL_RCC_OscConfig+0x2bc>
 800859a:	e71b      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80085a4:	f7fd ff22 	bl	80063ec <HAL_GetTick>
 80085a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	0499      	lsls	r1, r3, #18
 80085ae:	f57f aec1 	bpl.w	8008334 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085b2:	f7fd ff1b 	bl	80063ec <HAL_GetTick>
 80085b6:	1b80      	subs	r0, r0, r6
 80085b8:	2802      	cmp	r0, #2
 80085ba:	d9f6      	bls.n	80085aa <HAL_RCC_OscConfig+0x2de>
 80085bc:	e70a      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085be:	f7fd ff15 	bl	80063ec <HAL_GetTick>
 80085c2:	1b80      	subs	r0, r0, r6
 80085c4:	2864      	cmp	r0, #100	; 0x64
 80085c6:	f67f aec0 	bls.w	800834a <HAL_RCC_OscConfig+0x7e>
 80085ca:	e703      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085cc:	b9b3      	cbnz	r3, 80085fc <HAL_RCC_OscConfig+0x330>
 80085ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d0:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	672b      	str	r3, [r5, #112]	; 0x70
 80085da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085dc:	f023 0304 	bic.w	r3, r3, #4
 80085e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80085e2:	f7fd ff03 	bl	80063ec <HAL_GetTick>
 80085e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085ea:	0798      	lsls	r0, r3, #30
 80085ec:	f57f aec4 	bpl.w	8008378 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085f0:	f7fd fefc 	bl	80063ec <HAL_GetTick>
 80085f4:	1b80      	subs	r0, r0, r6
 80085f6:	42b8      	cmp	r0, r7
 80085f8:	d9f6      	bls.n	80085e8 <HAL_RCC_OscConfig+0x31c>
 80085fa:	e6eb      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085fc:	2b05      	cmp	r3, #5
 80085fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008600:	d103      	bne.n	800860a <HAL_RCC_OscConfig+0x33e>
 8008602:	f043 0304 	orr.w	r3, r3, #4
 8008606:	672b      	str	r3, [r5, #112]	; 0x70
 8008608:	e6a8      	b.n	800835c <HAL_RCC_OscConfig+0x90>
 800860a:	f023 0301 	bic.w	r3, r3, #1
 800860e:	672b      	str	r3, [r5, #112]	; 0x70
 8008610:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008612:	f023 0304 	bic.w	r3, r3, #4
 8008616:	e6a4      	b.n	8008362 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008618:	f7fd fee8 	bl	80063ec <HAL_GetTick>
 800861c:	1b40      	subs	r0, r0, r5
 800861e:	42b8      	cmp	r0, r7
 8008620:	f67f aea6 	bls.w	8008370 <HAL_RCC_OscConfig+0xa4>
 8008624:	e6d6      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008626:	4d57      	ldr	r5, [pc, #348]	; (8008784 <HAL_RCC_OscConfig+0x4b8>)
 8008628:	692b      	ldr	r3, [r5, #16]
 800862a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862e:	2b18      	cmp	r3, #24
 8008630:	d07a      	beq.n	8008728 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 8008632:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008634:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800863a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800863c:	d167      	bne.n	800870e <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 800863e:	f7fd fed5 	bl	80063ec <HAL_GetTick>
 8008642:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	0199      	lsls	r1, r3, #6
 8008648:	d45b      	bmi.n	8008702 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800864a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800864c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800864e:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	4313      	orrs	r3, r2
 8008658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800865a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800865e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008662:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008664:	3b01      	subs	r3, #1
 8008666:	3a01      	subs	r2, #1
 8008668:	025b      	lsls	r3, r3, #9
 800866a:	0412      	lsls	r2, r2, #16
 800866c:	b29b      	uxth	r3, r3
 800866e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008672:	4313      	orrs	r3, r2
 8008674:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008676:	3a01      	subs	r2, #1
 8008678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800867c:	4313      	orrs	r3, r2
 800867e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008680:	3a01      	subs	r2, #1
 8008682:	0612      	lsls	r2, r2, #24
 8008684:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008688:	4313      	orrs	r3, r2
 800868a:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800868c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800868e:	f023 0301 	bic.w	r3, r3, #1
 8008692:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008694:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008696:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80086a4:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80086aa:	f023 030c 	bic.w	r3, r3, #12
 80086ae:	4313      	orrs	r3, r2
 80086b0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80086b6:	f023 0302 	bic.w	r3, r3, #2
 80086ba:	4313      	orrs	r3, r2
 80086bc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086cc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80086d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086d8:	f043 0301 	orr.w	r3, r3, #1
 80086dc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80086e6:	f7fd fe81 	bl	80063ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ea:	4d26      	ldr	r5, [pc, #152]	; (8008784 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 80086ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	019a      	lsls	r2, r3, #6
 80086f2:	f53f ae45 	bmi.w	8008380 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086f6:	f7fd fe79 	bl	80063ec <HAL_GetTick>
 80086fa:	1b00      	subs	r0, r0, r4
 80086fc:	2802      	cmp	r0, #2
 80086fe:	d9f6      	bls.n	80086ee <HAL_RCC_OscConfig+0x422>
 8008700:	e668      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008702:	f7fd fe73 	bl	80063ec <HAL_GetTick>
 8008706:	1b80      	subs	r0, r0, r6
 8008708:	2802      	cmp	r0, #2
 800870a:	d99b      	bls.n	8008644 <HAL_RCC_OscConfig+0x378>
 800870c:	e662      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 800870e:	f7fd fe6d 	bl	80063ec <HAL_GetTick>
 8008712:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	019b      	lsls	r3, r3, #6
 8008718:	f57f ae32 	bpl.w	8008380 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871c:	f7fd fe66 	bl	80063ec <HAL_GetTick>
 8008720:	1b00      	subs	r0, r0, r4
 8008722:	2802      	cmp	r0, #2
 8008724:	d9f6      	bls.n	8008714 <HAL_RCC_OscConfig+0x448>
 8008726:	e655      	b.n	80083d4 <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008728:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800872a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800872c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800872e:	f43f ae52 	beq.w	80083d6 <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008732:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008736:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008738:	4281      	cmp	r1, r0
 800873a:	f47f adca 	bne.w	80082d2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800873e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008742:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008744:	428a      	cmp	r2, r1
 8008746:	f47f adc4 	bne.w	80082d2 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800874a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800874c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008750:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008752:	4291      	cmp	r1, r2
 8008754:	f47f adbd 	bne.w	80082d2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008758:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800875a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800875e:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008760:	4291      	cmp	r1, r2
 8008762:	f47f adb6 	bne.w	80082d2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008766:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008768:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800876c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800876e:	4291      	cmp	r1, r2
 8008770:	f47f adaf 	bne.w	80082d2 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008774:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008776:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800877a:	3801      	subs	r0, #1
  return HAL_OK;
 800877c:	1a18      	subs	r0, r3, r0
 800877e:	bf18      	it	ne
 8008780:	2001      	movne	r0, #1
 8008782:	e628      	b.n	80083d6 <HAL_RCC_OscConfig+0x10a>
 8008784:	58024400 	.word	0x58024400

08008788 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008788:	4b48      	ldr	r3, [pc, #288]	; (80088ac <HAL_RCC_GetSysClockFreq+0x124>)
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008790:	2a10      	cmp	r2, #16
{
 8008792:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008794:	f000 8086 	beq.w	80088a4 <HAL_RCC_GetSysClockFreq+0x11c>
 8008798:	2a18      	cmp	r2, #24
 800879a:	d00c      	beq.n	80087b6 <HAL_RCC_GetSysClockFreq+0x2e>
 800879c:	2a00      	cmp	r2, #0
 800879e:	f040 8083 	bne.w	80088a8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4842      	ldr	r0, [pc, #264]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x128>)
 80087a6:	f012 0f20 	tst.w	r2, #32
 80087aa:	d003      	beq.n	80087b4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80087b2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80087b4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087b8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80087bc:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087c0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087c4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80087c6:	d0f5      	beq.n	80087b4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087c8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087cc:	f002 0201 	and.w	r2, r2, #1
 80087d0:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087d4:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087d8:	4362      	muls	r2, r4
 80087da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087e2:	2901      	cmp	r1, #1
 80087e4:	ee07 2a90 	vmov	s15, r2
 80087e8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80087ec:	d04c      	beq.n	8008888 <HAL_RCC_GetSysClockFreq+0x100>
 80087ee:	2902      	cmp	r1, #2
 80087f0:	d03c      	beq.n	800886c <HAL_RCC_GetSysClockFreq+0xe4>
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d148      	bne.n	8008888 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	0692      	lsls	r2, r2, #26
 80087fa:	d527      	bpl.n	800884c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087fc:	6819      	ldr	r1, [r3, #0]
 80087fe:	4a2c      	ldr	r2, [pc, #176]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x128>)
 8008800:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008806:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880c:	ee07 2a10 	vmov	s14, r2
 8008810:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008814:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008818:	ee06 3a90 	vmov	s13, r3
 800881c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008824:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008828:	4b20      	ldr	r3, [pc, #128]	; (80088ac <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800882a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008834:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008836:	ee07 3a10 	vmov	s14, r3
 800883a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800883e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008842:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008846:	ee17 0a90 	vmov	r0, s15
 800884a:	e7b3      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a10 	vmov	s14, r3
 8008856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800885a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800885e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008862:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008866:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800886a:	e7dd      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a10 	vmov	s14, r3
 8008876:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800887a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800887e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008882:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80088b8 <HAL_RCC_GetSysClockFreq+0x130>
 8008886:	e7ee      	b.n	8008866 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a10 	vmov	s14, r3
 8008892:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800889a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800889e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80088bc <HAL_RCC_GetSysClockFreq+0x134>
 80088a2:	e7e0      	b.n	8008866 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a4:	4806      	ldr	r0, [pc, #24]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80088a6:	e785      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80088a8:	4806      	ldr	r0, [pc, #24]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80088aa:	e783      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x2c>
 80088ac:	58024400 	.word	0x58024400
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	4c742400 	.word	0x4c742400
 80088b8:	4b989680 	.word	0x4b989680
 80088bc:	4a742400 	.word	0x4a742400
 80088c0:	01312d00 	.word	0x01312d00
 80088c4:	003d0900 	.word	0x003d0900

080088c8 <HAL_RCC_ClockConfig>:
{
 80088c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088cc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80088ce:	4604      	mov	r4, r0
 80088d0:	b910      	cbnz	r0, 80088d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80088d2:	2001      	movs	r0, #1
}
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088d8:	4a88      	ldr	r2, [pc, #544]	; (8008afc <HAL_RCC_ClockConfig+0x234>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	428b      	cmp	r3, r1
 80088e2:	f0c0 8093 	bcc.w	8008a0c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	075f      	lsls	r7, r3, #29
 80088ea:	f100 809b 	bmi.w	8008a24 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ee:	071e      	lsls	r6, r3, #28
 80088f0:	d50b      	bpl.n	800890a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f2:	4983      	ldr	r1, [pc, #524]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 80088f4:	6966      	ldr	r6, [r4, #20]
 80088f6:	69c8      	ldr	r0, [r1, #28]
 80088f8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088fc:	4286      	cmp	r6, r0
 80088fe:	d904      	bls.n	800890a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008900:	69ca      	ldr	r2, [r1, #28]
 8008902:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008906:	4332      	orrs	r2, r6
 8008908:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890a:	06d8      	lsls	r0, r3, #27
 800890c:	d50b      	bpl.n	8008926 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800890e:	497c      	ldr	r1, [pc, #496]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008910:	69a6      	ldr	r6, [r4, #24]
 8008912:	69c8      	ldr	r0, [r1, #28]
 8008914:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008918:	4286      	cmp	r6, r0
 800891a:	d904      	bls.n	8008926 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800891c:	69ca      	ldr	r2, [r1, #28]
 800891e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008922:	4332      	orrs	r2, r6
 8008924:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008926:	0699      	lsls	r1, r3, #26
 8008928:	d50b      	bpl.n	8008942 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800892a:	4975      	ldr	r1, [pc, #468]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 800892c:	69e6      	ldr	r6, [r4, #28]
 800892e:	6a08      	ldr	r0, [r1, #32]
 8008930:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008934:	4286      	cmp	r6, r0
 8008936:	d904      	bls.n	8008942 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008938:	6a0a      	ldr	r2, [r1, #32]
 800893a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800893e:	4332      	orrs	r2, r6
 8008940:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008942:	079a      	lsls	r2, r3, #30
 8008944:	d50b      	bpl.n	800895e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008946:	496e      	ldr	r1, [pc, #440]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008948:	68e6      	ldr	r6, [r4, #12]
 800894a:	6988      	ldr	r0, [r1, #24]
 800894c:	f000 000f 	and.w	r0, r0, #15
 8008950:	4286      	cmp	r6, r0
 8008952:	d904      	bls.n	800895e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008954:	698a      	ldr	r2, [r1, #24]
 8008956:	f022 020f 	bic.w	r2, r2, #15
 800895a:	4332      	orrs	r2, r6
 800895c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895e:	07df      	lsls	r7, r3, #31
 8008960:	d46e      	bmi.n	8008a40 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	079e      	lsls	r6, r3, #30
 8008966:	f100 80a1 	bmi.w	8008aac <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800896a:	4964      	ldr	r1, [pc, #400]	; (8008afc <HAL_RCC_ClockConfig+0x234>)
 800896c:	680a      	ldr	r2, [r1, #0]
 800896e:	f002 020f 	and.w	r2, r2, #15
 8008972:	42aa      	cmp	r2, r5
 8008974:	f200 80a8 	bhi.w	8008ac8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008978:	0758      	lsls	r0, r3, #29
 800897a:	f100 80b1 	bmi.w	8008ae0 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800897e:	0719      	lsls	r1, r3, #28
 8008980:	d50b      	bpl.n	800899a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008982:	495f      	ldr	r1, [pc, #380]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008984:	6965      	ldr	r5, [r4, #20]
 8008986:	69c8      	ldr	r0, [r1, #28]
 8008988:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800898c:	4285      	cmp	r5, r0
 800898e:	d204      	bcs.n	800899a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008990:	69ca      	ldr	r2, [r1, #28]
 8008992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008996:	432a      	orrs	r2, r5
 8008998:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800899a:	06da      	lsls	r2, r3, #27
 800899c:	d50b      	bpl.n	80089b6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800899e:	4958      	ldr	r1, [pc, #352]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 80089a0:	69a5      	ldr	r5, [r4, #24]
 80089a2:	69c8      	ldr	r0, [r1, #28]
 80089a4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80089a8:	4285      	cmp	r5, r0
 80089aa:	d204      	bcs.n	80089b6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089ac:	69ca      	ldr	r2, [r1, #28]
 80089ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089b2:	432a      	orrs	r2, r5
 80089b4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089b6:	069b      	lsls	r3, r3, #26
 80089b8:	d50b      	bpl.n	80089d2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089ba:	4a51      	ldr	r2, [pc, #324]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 80089bc:	69e0      	ldr	r0, [r4, #28]
 80089be:	6a11      	ldr	r1, [r2, #32]
 80089c0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80089c4:	4288      	cmp	r0, r1
 80089c6:	d204      	bcs.n	80089d2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80089c8:	6a13      	ldr	r3, [r2, #32]
 80089ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ce:	4303      	orrs	r3, r0
 80089d0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089d2:	f7ff fed9 	bl	8008788 <HAL_RCC_GetSysClockFreq>
 80089d6:	494a      	ldr	r1, [pc, #296]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 80089d8:	4a4a      	ldr	r2, [pc, #296]	; (8008b04 <HAL_RCC_ClockConfig+0x23c>)
 80089da:	698b      	ldr	r3, [r1, #24]
 80089dc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80089e0:	5cd3      	ldrb	r3, [r2, r3]
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089e8:	698b      	ldr	r3, [r1, #24]
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	5cd3      	ldrb	r3, [r2, r3]
 80089f0:	4a45      	ldr	r2, [pc, #276]	; (8008b08 <HAL_RCC_ClockConfig+0x240>)
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	fa20 f303 	lsr.w	r3, r0, r3
 80089fa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80089fc:	4b43      	ldr	r3, [pc, #268]	; (8008b0c <HAL_RCC_ClockConfig+0x244>)
 80089fe:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8008a00:	4b43      	ldr	r3, [pc, #268]	; (8008b10 <HAL_RCC_ClockConfig+0x248>)
}
 8008a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	f7f9 b8e6 	b.w	8001bd8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0c:	6813      	ldr	r3, [r2, #0]
 8008a0e:	f023 030f 	bic.w	r3, r3, #15
 8008a12:	430b      	orrs	r3, r1
 8008a14:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a16:	6813      	ldr	r3, [r2, #0]
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	f47f af58 	bne.w	80088d2 <HAL_RCC_ClockConfig+0xa>
 8008a22:	e760      	b.n	80088e6 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a24:	4936      	ldr	r1, [pc, #216]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008a26:	6926      	ldr	r6, [r4, #16]
 8008a28:	6988      	ldr	r0, [r1, #24]
 8008a2a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008a2e:	4286      	cmp	r6, r0
 8008a30:	f67f af5d 	bls.w	80088ee <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a34:	698a      	ldr	r2, [r1, #24]
 8008a36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a3a:	4332      	orrs	r2, r6
 8008a3c:	618a      	str	r2, [r1, #24]
 8008a3e:	e756      	b.n	80088ee <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a40:	4b2f      	ldr	r3, [pc, #188]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008a42:	68a1      	ldr	r1, [r4, #8]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a50:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a52:	2a02      	cmp	r2, #2
 8008a54:	d11d      	bne.n	8008a92 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a5a:	f43f af3a 	beq.w	80088d2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a5e:	4e28      	ldr	r6, [pc, #160]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a60:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a64:	6933      	ldr	r3, [r6, #16]
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008a6e:	f7fd fcbd 	bl	80063ec <HAL_GetTick>
 8008a72:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a74:	6933      	ldr	r3, [r6, #16]
 8008a76:	6862      	ldr	r2, [r4, #4]
 8008a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a7c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a80:	f43f af6f 	beq.w	8008962 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a84:	f7fd fcb2 	bl	80063ec <HAL_GetTick>
 8008a88:	1bc0      	subs	r0, r0, r7
 8008a8a:	4540      	cmp	r0, r8
 8008a8c:	d9f2      	bls.n	8008a74 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008a8e:	2003      	movs	r0, #3
 8008a90:	e720      	b.n	80088d4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a92:	2a03      	cmp	r2, #3
 8008a94:	d102      	bne.n	8008a9c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008a9a:	e7de      	b.n	8008a5a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a9c:	2a01      	cmp	r2, #1
 8008a9e:	d102      	bne.n	8008aa6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aa0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008aa4:	e7d9      	b.n	8008a5a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aa6:	f013 0f04 	tst.w	r3, #4
 8008aaa:	e7d6      	b.n	8008a5a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008aac:	4914      	ldr	r1, [pc, #80]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008aae:	68e6      	ldr	r6, [r4, #12]
 8008ab0:	6988      	ldr	r0, [r1, #24]
 8008ab2:	f000 000f 	and.w	r0, r0, #15
 8008ab6:	4286      	cmp	r6, r0
 8008ab8:	f4bf af57 	bcs.w	800896a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008abc:	698a      	ldr	r2, [r1, #24]
 8008abe:	f022 020f 	bic.w	r2, r2, #15
 8008ac2:	4332      	orrs	r2, r6
 8008ac4:	618a      	str	r2, [r1, #24]
 8008ac6:	e750      	b.n	800896a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac8:	680a      	ldr	r2, [r1, #0]
 8008aca:	f022 020f 	bic.w	r2, r2, #15
 8008ace:	432a      	orrs	r2, r5
 8008ad0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	680a      	ldr	r2, [r1, #0]
 8008ad4:	f002 020f 	and.w	r2, r2, #15
 8008ad8:	42aa      	cmp	r2, r5
 8008ada:	f47f aefa 	bne.w	80088d2 <HAL_RCC_ClockConfig+0xa>
 8008ade:	e74b      	b.n	8008978 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ae0:	4907      	ldr	r1, [pc, #28]	; (8008b00 <HAL_RCC_ClockConfig+0x238>)
 8008ae2:	6925      	ldr	r5, [r4, #16]
 8008ae4:	6988      	ldr	r0, [r1, #24]
 8008ae6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008aea:	4285      	cmp	r5, r0
 8008aec:	f4bf af47 	bcs.w	800897e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008af0:	698a      	ldr	r2, [r1, #24]
 8008af2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008af6:	432a      	orrs	r2, r5
 8008af8:	618a      	str	r2, [r1, #24]
 8008afa:	e740      	b.n	800897e <HAL_RCC_ClockConfig+0xb6>
 8008afc:	52002000 	.word	0x52002000
 8008b00:	58024400 	.word	0x58024400
 8008b04:	0801e640 	.word	0x0801e640
 8008b08:	24000078 	.word	0x24000078
 8008b0c:	24000074 	.word	0x24000074
 8008b10:	24000080 	.word	0x24000080

08008b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b14:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <HAL_RCC_GetHCLKFreq+0x34>)
 8008b18:	f7ff fe36 	bl	8008788 <HAL_RCC_GetSysClockFreq>
 8008b1c:	490b      	ldr	r1, [pc, #44]	; (8008b4c <HAL_RCC_GetHCLKFreq+0x38>)
 8008b1e:	69a3      	ldr	r3, [r4, #24]
 8008b20:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008b24:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b26:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b28:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b2c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b30:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b34:	5ccb      	ldrb	r3, [r1, r3]
 8008b36:	f003 031f 	and.w	r3, r3, #31
 8008b3a:	fa22 f003 	lsr.w	r0, r2, r3
 8008b3e:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <HAL_RCC_GetHCLKFreq+0x3c>)
 8008b40:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b42:	4b04      	ldr	r3, [pc, #16]	; (8008b54 <HAL_RCC_GetHCLKFreq+0x40>)
 8008b44:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008b46:	bd10      	pop	{r4, pc}
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	0801e640 	.word	0x0801e640
 8008b50:	24000078 	.word	0x24000078
 8008b54:	24000074 	.word	0x24000074

08008b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b58:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b5a:	f7ff ffdb 	bl	8008b14 <HAL_RCC_GetHCLKFreq>
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008b60:	4a05      	ldr	r2, [pc, #20]	; (8008b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008b68:	5cd3      	ldrb	r3, [r2, r3]
 8008b6a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b6e:	40d8      	lsrs	r0, r3
 8008b70:	bd08      	pop	{r3, pc}
 8008b72:	bf00      	nop
 8008b74:	58024400 	.word	0x58024400
 8008b78:	0801e640 	.word	0x0801e640

08008b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b7c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b7e:	f7ff ffc9 	bl	8008b14 <HAL_RCC_GetHCLKFreq>
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008b84:	4a05      	ldr	r2, [pc, #20]	; (8008b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008b8c:	5cd3      	ldrb	r3, [r2, r3]
 8008b8e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b92:	40d8      	lsrs	r0, r3
 8008b94:	bd08      	pop	{r3, pc}
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	0801e640 	.word	0x0801e640

08008ba0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008ba0:	233f      	movs	r3, #63	; 0x3f
 8008ba2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <HAL_RCC_GetClockConfig+0x4c>)
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	f002 0207 	and.w	r2, r2, #7
 8008bac:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008bb4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	f002 020f 	and.w	r2, r2, #15
 8008bbc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008bbe:	699a      	ldr	r2, [r3, #24]
 8008bc0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008bc4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008bcc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008bce:	69da      	ldr	r2, [r3, #28]
 8008bd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008bd4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bdc:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <HAL_RCC_GetClockConfig+0x50>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	600b      	str	r3, [r1, #0]
}
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	52002000 	.word	0x52002000

08008bf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bf6:	4c3a      	ldr	r4, [pc, #232]	; (8008ce0 <RCCEx_PLL2_Config+0xec>)
{
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d069      	beq.n	8008cda <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c0c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c0e:	f7fd fbed 	bl	80063ec <HAL_GetTick>
 8008c12:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	011a      	lsls	r2, r3, #4
 8008c18:	d44b      	bmi.n	8008cb2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c1c:	6832      	ldr	r2, [r6, #0]
 8008c1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008c26:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c28:	68b3      	ldr	r3, [r6, #8]
 8008c2a:	68f2      	ldr	r2, [r6, #12]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	025b      	lsls	r3, r3, #9
 8008c32:	0412      	lsls	r2, r2, #16
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	6872      	ldr	r2, [r6, #4]
 8008c3e:	3a01      	subs	r2, #1
 8008c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c44:	4313      	orrs	r3, r2
 8008c46:	6932      	ldr	r2, [r6, #16]
 8008c48:	3a01      	subs	r2, #1
 8008c4a:	0612      	lsls	r2, r2, #24
 8008c4c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c50:	4313      	orrs	r3, r2
 8008c52:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c56:	6972      	ldr	r2, [r6, #20]
 8008c58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c62:	69b2      	ldr	r2, [r6, #24]
 8008c64:	f023 0320 	bic.w	r3, r3, #32
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c76:	69f2      	ldr	r2, [r6, #28]
 8008c78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c84:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c88:	f043 0310 	orr.w	r3, r3, #16
 8008c8c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c90:	b9b5      	cbnz	r5, 8008cc0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c96:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c98:	4c11      	ldr	r4, [pc, #68]	; (8008ce0 <RCCEx_PLL2_Config+0xec>)
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ca0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ca2:	f7fd fba3 	bl	80063ec <HAL_GetTick>
 8008ca6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	d50f      	bpl.n	8008cce <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e005      	b.n	8008cbe <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cb2:	f7fd fb9b 	bl	80063ec <HAL_GetTick>
 8008cb6:	1bc0      	subs	r0, r0, r7
 8008cb8:	2802      	cmp	r0, #2
 8008cba:	d9ab      	bls.n	8008c14 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008cbc:	2003      	movs	r0, #3
}
 8008cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cc0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cc2:	bf0c      	ite	eq
 8008cc4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008cc8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008ccc:	e7e3      	b.n	8008c96 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cce:	f7fd fb8d 	bl	80063ec <HAL_GetTick>
 8008cd2:	1b40      	subs	r0, r0, r5
 8008cd4:	2802      	cmp	r0, #2
 8008cd6:	d9e7      	bls.n	8008ca8 <RCCEx_PLL2_Config+0xb4>
 8008cd8:	e7f0      	b.n	8008cbc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008cda:	2001      	movs	r0, #1
 8008cdc:	e7ef      	b.n	8008cbe <RCCEx_PLL2_Config+0xca>
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400

08008ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ce6:	4c3a      	ldr	r4, [pc, #232]	; (8008dd0 <RCCEx_PLL3_Config+0xec>)
{
 8008ce8:	4606      	mov	r6, r0
 8008cea:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d069      	beq.n	8008dca <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cfc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfe:	f7fd fb75 	bl	80063ec <HAL_GetTick>
 8008d02:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	009a      	lsls	r2, r3, #2
 8008d08:	d44b      	bmi.n	8008da2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d0c:	6832      	ldr	r2, [r6, #0]
 8008d0e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008d12:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008d16:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d18:	68b3      	ldr	r3, [r6, #8]
 8008d1a:	68f2      	ldr	r2, [r6, #12]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	3a01      	subs	r2, #1
 8008d20:	025b      	lsls	r3, r3, #9
 8008d22:	0412      	lsls	r2, r2, #16
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	6872      	ldr	r2, [r6, #4]
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d34:	4313      	orrs	r3, r2
 8008d36:	6932      	ldr	r2, [r6, #16]
 8008d38:	3a01      	subs	r2, #1
 8008d3a:	0612      	lsls	r2, r2, #24
 8008d3c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d40:	4313      	orrs	r3, r2
 8008d42:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d46:	6972      	ldr	r2, [r6, #20]
 8008d48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d52:	69b2      	ldr	r2, [r6, #24]
 8008d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d62:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d66:	69f2      	ldr	r2, [r6, #28]
 8008d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d74:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d80:	b9b5      	cbnz	r5, 8008db0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d86:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d88:	4c11      	ldr	r4, [pc, #68]	; (8008dd0 <RCCEx_PLL3_Config+0xec>)
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d90:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d92:	f7fd fb2b 	bl	80063ec <HAL_GetTick>
 8008d96:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	d50f      	bpl.n	8008dbe <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e005      	b.n	8008dae <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008da2:	f7fd fb23 	bl	80063ec <HAL_GetTick>
 8008da6:	1bc0      	subs	r0, r0, r7
 8008da8:	2802      	cmp	r0, #2
 8008daa:	d9ab      	bls.n	8008d04 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008dac:	2003      	movs	r0, #3
}
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008db0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008db2:	bf0c      	ite	eq
 8008db4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008db8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008dbc:	e7e3      	b.n	8008d86 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dbe:	f7fd fb15 	bl	80063ec <HAL_GetTick>
 8008dc2:	1b40      	subs	r0, r0, r5
 8008dc4:	2802      	cmp	r0, #2
 8008dc6:	d9e7      	bls.n	8008d98 <RCCEx_PLL3_Config+0xb4>
 8008dc8:	e7f0      	b.n	8008dac <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7ef      	b.n	8008dae <RCCEx_PLL3_Config+0xca>
 8008dce:	bf00      	nop
 8008dd0:	58024400 	.word	0x58024400

08008dd4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008dd8:	6806      	ldr	r6, [r0, #0]
{
 8008dda:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ddc:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008de0:	d009      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008de2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008de8:	d02c      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8008dea:	d811      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008dec:	b1e3      	cbz	r3, 8008e28 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df2:	d01f      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008df4:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	05d8      	lsls	r0, r3, #23
 8008dfa:	f140 80d7 	bpl.w	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008dfe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	f200 80d2 	bhi.w	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8008e06:	e8df f003 	tbb	[pc, r3]
 8008e0a:	2922      	.short	0x2922
 8008e0c:	27ca      	.short	0x27ca
 8008e0e:	27          	.byte	0x27
 8008e0f:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e14:	d1ee      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e16:	4ab6      	ldr	r2, [pc, #728]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e18:	2600      	movs	r6, #0
 8008e1a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008e1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008e22:	430b      	orrs	r3, r1
 8008e24:	6513      	str	r3, [r2, #80]	; 0x50
 8008e26:	e7e6      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e28:	4ab1      	ldr	r2, [pc, #708]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e32:	e7f0      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e34:	2102      	movs	r1, #2
 8008e36:	3004      	adds	r0, #4
 8008e38:	f7ff fedc 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e3c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d1d9      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8008e42:	e7e8      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e44:	2102      	movs	r1, #2
 8008e46:	3024      	adds	r0, #36	; 0x24
 8008e48:	f7ff ff4c 	bl	8008ce4 <RCCEx_PLL3_Config>
 8008e4c:	e7f6      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e4e:	4aa8      	ldr	r2, [pc, #672]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e56:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e58:	4634      	mov	r4, r6
 8008e5a:	e004      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	1d28      	adds	r0, r5, #4
 8008e60:	f7ff fec8 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e64:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	f040 80a2 	bne.w	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e6c:	4aa0      	ldr	r2, [pc, #640]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008e6e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008e70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	430b      	orrs	r3, r1
 8008e78:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	0559      	lsls	r1, r3, #21
 8008e7e:	d510      	bpl.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e80:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8008e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e88:	f000 80b3 	beq.w	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008e8c:	f200 8092 	bhi.w	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80a2 	beq.w	8008fda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e9a:	f000 80a4 	beq.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008e9e:	2601      	movs	r6, #1
 8008ea0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	051a      	lsls	r2, r3, #20
 8008ea6:	d510      	bpl.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ea8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8008eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eb0:	f000 80c6 	beq.w	8009040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008eb4:	f200 80a5 	bhi.w	8009002 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80b5 	beq.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ec2:	f000 80b7 	beq.w	8009034 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008ec6:	2601      	movs	r6, #1
 8008ec8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	019b      	lsls	r3, r3, #6
 8008ece:	d50d      	bpl.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8008ed0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	f000 80ce 	beq.w	8009074 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8008ed8:	f200 80ba 	bhi.w	8009050 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80ba 	beq.w	8009056 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8008ee2:	2b10      	cmp	r3, #16
 8008ee4:	f000 80c0 	beq.w	8009068 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8008ee8:	2601      	movs	r6, #1
 8008eea:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	04df      	lsls	r7, r3, #19
 8008ef0:	d50f      	bpl.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ef2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef8:	f000 80e0 	beq.w	80090bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8008efc:	f200 80c2 	bhi.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80cf 	beq.w	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0a:	f000 80d1 	beq.w	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008f0e:	2601      	movs	r6, #1
 8008f10:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f12:	682b      	ldr	r3, [r5, #0]
 8008f14:	0498      	lsls	r0, r3, #18
 8008f16:	d50f      	bpl.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f18:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f1e:	f000 80ef 	beq.w	8009100 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8008f22:	f200 80d3 	bhi.w	80090cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 80d9 	beq.w	80090de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f30:	f000 80e0 	beq.w	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8008f34:	2601      	movs	r6, #1
 8008f36:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	0459      	lsls	r1, r3, #17
 8008f3c:	d510      	bpl.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f3e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8008f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f46:	f000 80fc 	beq.w	8009142 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f4a:	f200 80e1 	bhi.w	8009110 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80e7 	beq.w	8009122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f58:	f000 80ed 	beq.w	8009136 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008f5c:	2601      	movs	r6, #1
 8008f5e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	041a      	lsls	r2, r3, #16
 8008f64:	d50d      	bpl.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8008f66:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f6c:	f000 80f1 	beq.w	8009152 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f74:	f000 80fb 	beq.w	800916e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80ef 	beq.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008f7e:	2601      	movs	r6, #1
 8008f80:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	01db      	lsls	r3, r3, #7
 8008f86:	f140 8108 	bpl.w	800919a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8008f8a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	f200 8148 	bhi.w	8009222 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008f92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f96:	00f9      	.short	0x00f9
 8008f98:	014000f4 	.word	0x014000f4
 8008f9c:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008fa4:	f7ff fe9e 	bl	8008ce4 <RCCEx_PLL3_Config>
 8008fa8:	e75c      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008faa:	2601      	movs	r6, #1
 8008fac:	4634      	mov	r4, r6
 8008fae:	e764      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8008fb0:	4626      	mov	r6, r4
 8008fb2:	e762      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008fb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fb8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008fbc:	d003      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8008fbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008fc2:	f47f af6c 	bne.w	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 8008fc6:	b9d4      	cbnz	r4, 8008ffe <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fc8:	4a49      	ldr	r2, [pc, #292]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008fca:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8008fce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008fd0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd8:	e763      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fda:	4a45      	ldr	r2, [pc, #276]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8008fdc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008fe4:	e7ef      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	1d28      	adds	r0, r5, #4
 8008fea:	f7ff fe03 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fee:	4604      	mov	r4, r0
      break;
 8008ff0:	e7e9      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008ff8:	f7ff fe74 	bl	8008ce4 <RCCEx_PLL3_Config>
 8008ffc:	e7f7      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008ffe:	4626      	mov	r6, r4
 8009000:	e74f      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009002:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009006:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800900a:	d003      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800900c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009010:	f47f af59 	bne.w	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8009014:	b9d4      	cbnz	r4, 800904c <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009016:	4a36      	ldr	r2, [pc, #216]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009018:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800901c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800901e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009022:	430b      	orrs	r3, r1
 8009024:	6593      	str	r3, [r2, #88]	; 0x58
 8009026:	e750      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009028:	4a31      	ldr	r2, [pc, #196]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800902a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800902c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009030:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009032:	e7ef      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009034:	2100      	movs	r1, #0
 8009036:	1d28      	adds	r0, r5, #4
 8009038:	f7ff fddc 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800903c:	4604      	mov	r4, r0
      break;
 800903e:	e7e9      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009040:	2100      	movs	r1, #0
 8009042:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009046:	f7ff fe4d 	bl	8008ce4 <RCCEx_PLL3_Config>
 800904a:	e7f7      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x268>
 800904c:	4626      	mov	r6, r4
 800904e:	e73c      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8009050:	2b30      	cmp	r3, #48	; 0x30
 8009052:	f47f af49 	bne.w	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 8009056:	b99c      	cbnz	r4, 8009080 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009058:	4a25      	ldr	r2, [pc, #148]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800905a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800905c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800905e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009062:	430b      	orrs	r3, r1
 8009064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009066:	e741      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4a21      	ldr	r2, [pc, #132]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800906a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800906c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009070:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009072:	e7f0      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009074:	2102      	movs	r1, #2
 8009076:	1d28      	adds	r0, r5, #4
 8009078:	f7ff fdbc 	bl	8008bf4 <RCCEx_PLL2_Config>
 800907c:	4604      	mov	r4, r0
      break;
 800907e:	e7ea      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8009080:	4626      	mov	r6, r4
 8009082:	e733      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009088:	d003      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800908a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800908e:	f47f af3e 	bne.w	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8009092:	b9cc      	cbnz	r4, 80090c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009094:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8009096:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8009098:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909e:	430b      	orrs	r3, r1
 80090a0:	6513      	str	r3, [r2, #80]	; 0x50
 80090a2:	e736      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a4:	4a12      	ldr	r2, [pc, #72]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ac:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80090ae:	e7f0      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090b0:	2100      	movs	r1, #0
 80090b2:	1d28      	adds	r0, r5, #4
 80090b4:	f7ff fd9e 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090b8:	4604      	mov	r4, r0
      break;
 80090ba:	e7ea      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090bc:	2100      	movs	r1, #0
 80090be:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090c2:	f7ff fe0f 	bl	8008ce4 <RCCEx_PLL3_Config>
 80090c6:	e7f7      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80090c8:	4626      	mov	r6, r4
 80090ca:	e722      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80090cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80090d4:	d003      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80090d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090da:	f47f af2b 	bne.w	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80090de:	b9ac      	cbnz	r4, 800910c <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090e0:	4a03      	ldr	r2, [pc, #12]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80090e2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80090e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80090ea:	430b      	orrs	r3, r1
 80090ec:	6513      	str	r3, [r2, #80]	; 0x50
 80090ee:	e723      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80090f0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090f4:	2101      	movs	r1, #1
 80090f6:	1d28      	adds	r0, r5, #4
 80090f8:	f7ff fd7c 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090fc:	4604      	mov	r4, r0
      break;
 80090fe:	e7ee      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009100:	2101      	movs	r1, #1
 8009102:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009106:	f7ff fded 	bl	8008ce4 <RCCEx_PLL3_Config>
 800910a:	e7f7      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x328>
 800910c:	4626      	mov	r6, r4
 800910e:	e713      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009110:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009114:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009118:	d003      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800911a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800911e:	f47f af1d 	bne.w	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 8009122:	b9a4      	cbnz	r4, 800914e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009124:	4a7f      	ldr	r2, [pc, #508]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009126:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800912a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800912c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009130:	430b      	orrs	r3, r1
 8009132:	6593      	str	r3, [r2, #88]	; 0x58
 8009134:	e714      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009136:	2101      	movs	r1, #1
 8009138:	1d28      	adds	r0, r5, #4
 800913a:	f7ff fd5b 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800913e:	4604      	mov	r4, r0
      break;
 8009140:	e7ef      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009142:	2101      	movs	r1, #1
 8009144:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009148:	f7ff fdcc 	bl	8008ce4 <RCCEx_PLL3_Config>
 800914c:	e7f7      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800914e:	4626      	mov	r6, r4
 8009150:	e706      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009152:	4a74      	ldr	r2, [pc, #464]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009154:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800915a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800915c:	b96c      	cbnz	r4, 800917a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800915e:	4a71      	ldr	r2, [pc, #452]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009160:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8009162:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009168:	430b      	orrs	r3, r1
 800916a:	6513      	str	r3, [r2, #80]	; 0x50
 800916c:	e709      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800916e:	2101      	movs	r1, #1
 8009170:	1d28      	adds	r0, r5, #4
 8009172:	f7ff fd3f 	bl	8008bf4 <RCCEx_PLL2_Config>
 8009176:	4604      	mov	r4, r0
      break;
 8009178:	e7f0      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800917a:	4626      	mov	r6, r4
 800917c:	e701      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800917e:	4a69      	ldr	r2, [pc, #420]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8009180:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009186:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009188:	2c00      	cmp	r4, #0
 800918a:	d14d      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800918c:	4a65      	ldr	r2, [pc, #404]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800918e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009190:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	430b      	orrs	r3, r1
 8009198:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	025f      	lsls	r7, r3, #9
 800919e:	d54d      	bpl.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091a0:	4f61      	ldr	r7, [pc, #388]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80091aa:	f7fd f91f 	bl	80063ec <HAL_GetTick>
 80091ae:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	05d8      	lsls	r0, r3, #23
 80091b4:	d53a      	bpl.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	d16c      	bne.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80091ba:	4b5a      	ldr	r3, [pc, #360]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091bc:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 80091c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091c2:	4042      	eors	r2, r0
 80091c4:	f412 7f40 	tst.w	r2, #768	; 0x300
 80091c8:	d00b      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80091cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80091d2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80091d6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80091de:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80091e0:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091e2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80091e6:	d040      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091e8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80091ec:	494d      	ldr	r1, [pc, #308]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80091ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80091f2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80091f6:	d149      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80091f8:	6908      	ldr	r0, [r1, #16]
 80091fa:	4a4c      	ldr	r2, [pc, #304]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80091fc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009200:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009204:	4302      	orrs	r2, r0
 8009206:	610a      	str	r2, [r1, #16]
 8009208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800920c:	4a45      	ldr	r2, [pc, #276]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800920e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009210:	430b      	orrs	r3, r1
 8009212:	6713      	str	r3, [r2, #112]	; 0x70
 8009214:	e012      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009216:	2102      	movs	r1, #2
 8009218:	1d28      	adds	r0, r5, #4
 800921a:	f7ff fceb 	bl	8008bf4 <RCCEx_PLL2_Config>
 800921e:	4604      	mov	r4, r0
      break;
 8009220:	e7b2      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8009222:	2601      	movs	r6, #1
 8009224:	4634      	mov	r4, r6
 8009226:	e7b8      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8009228:	4626      	mov	r6, r4
 800922a:	e7b6      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800922c:	f7fd f8de 	bl	80063ec <HAL_GetTick>
 8009230:	eba0 0008 	sub.w	r0, r0, r8
 8009234:	2864      	cmp	r0, #100	; 0x64
 8009236:	d9bb      	bls.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8009238:	2603      	movs	r6, #3
 800923a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	07da      	lsls	r2, r3, #31
 8009240:	d508      	bpl.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009242:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009244:	2b10      	cmp	r3, #16
 8009246:	d03c      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009248:	d826      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800924a:	b35b      	cbz	r3, 80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800924c:	2b08      	cmp	r3, #8
 800924e:	d032      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009250:	2601      	movs	r6, #1
 8009252:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	d548      	bpl.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800925a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800925c:	2b05      	cmp	r3, #5
 800925e:	d85b      	bhi.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8009260:	e8df f003 	tbb	[pc, r3]
 8009264:	3c54373c 	.word	0x3c54373c
 8009268:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 800926a:	f7fd f8bf 	bl	80063ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800926e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 8009272:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009274:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009278:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800927c:	0799      	lsls	r1, r3, #30
 800927e:	d4b3      	bmi.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009280:	f7fd f8b4 	bl	80063ec <HAL_GetTick>
 8009284:	1bc0      	subs	r0, r0, r7
 8009286:	4548      	cmp	r0, r9
 8009288:	d9f6      	bls.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800928a:	e7d5      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800928c:	690a      	ldr	r2, [r1, #16]
 800928e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009292:	e7b8      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009294:	4626      	mov	r6, r4
 8009296:	e7d1      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009298:	f023 0208 	bic.w	r2, r3, #8
 800929c:	2a20      	cmp	r2, #32
 800929e:	d001      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80092a0:	2b18      	cmp	r3, #24
 80092a2:	d1d5      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 80092a4:	b99c      	cbnz	r4, 80092ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092a6:	4a1f      	ldr	r2, [pc, #124]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80092a8:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80092aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092ac:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6553      	str	r3, [r2, #84]	; 0x54
 80092b4:	e7ce      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b6:	2101      	movs	r1, #1
 80092b8:	1d28      	adds	r0, r5, #4
 80092ba:	f7ff fc9b 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092be:	4604      	mov	r4, r0
      break;
 80092c0:	e7f0      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c2:	2101      	movs	r1, #1
 80092c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80092c8:	f7ff fd0c 	bl	8008ce4 <RCCEx_PLL3_Config>
 80092cc:	e7f7      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80092ce:	4626      	mov	r6, r4
 80092d0:	e7c0      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092d2:	2101      	movs	r1, #1
 80092d4:	1d28      	adds	r0, r5, #4
 80092d6:	f7ff fc8d 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092da:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80092dc:	b9fc      	cbnz	r4, 800931e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092de:	4a11      	ldr	r2, [pc, #68]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80092e0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80092e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092e4:	f023 0307 	bic.w	r3, r3, #7
 80092e8:	430b      	orrs	r3, r1
 80092ea:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	075f      	lsls	r7, r3, #29
 80092f0:	d52e      	bpl.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092f2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	f200 8134 	bhi.w	8009564 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80092fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009300:	0018001d 	.word	0x0018001d
 8009304:	001d012c 	.word	0x001d012c
 8009308:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800930c:	2101      	movs	r1, #1
 800930e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009312:	f7ff fce7 	bl	8008ce4 <RCCEx_PLL3_Config>
 8009316:	e7e0      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009318:	2601      	movs	r6, #1
 800931a:	4634      	mov	r4, r6
 800931c:	e7e6      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800931e:	4626      	mov	r6, r4
 8009320:	e7e4      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400
 8009328:	58024800 	.word	0x58024800
 800932c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009330:	2101      	movs	r1, #1
 8009332:	1d28      	adds	r0, r5, #4
 8009334:	f7ff fc5e 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009338:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800933a:	2c00      	cmp	r4, #0
 800933c:	f040 8115 	bne.w	800956a <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009340:	4ab8      	ldr	r2, [pc, #736]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009342:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009346:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009348:	f023 0307 	bic.w	r3, r3, #7
 800934c:	430b      	orrs	r3, r1
 800934e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	0698      	lsls	r0, r3, #26
 8009354:	d510      	bpl.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009356:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800935e:	f000 811f 	beq.w	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8009362:	f200 8104 	bhi.w	800956e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 810a 	beq.w	8009580 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 800936c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009370:	f000 8110 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009374:	2601      	movs	r6, #1
 8009376:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	0659      	lsls	r1, r3, #25
 800937c:	d510      	bpl.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800937e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009386:	f000 812c 	beq.w	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800938a:	f200 8111 	bhi.w	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 8117 	beq.w	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8009394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009398:	f000 811d 	beq.w	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800939c:	2601      	movs	r6, #1
 800939e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	061a      	lsls	r2, r3, #24
 80093a4:	d510      	bpl.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80093a6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80093aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ae:	f000 813b 	beq.w	8009628 <HAL_RCCEx_PeriphCLKConfig+0x854>
 80093b2:	f200 811e 	bhi.w	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8124 	beq.w	8009604 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80093bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c0:	f000 812a 	beq.w	8009618 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80093c4:	2601      	movs	r6, #1
 80093c6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	071b      	lsls	r3, r3, #28
 80093cc:	d512      	bpl.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80093ce:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80093d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d4:	d107      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093d6:	2102      	movs	r1, #2
 80093d8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80093dc:	f7ff fc82 	bl	8008ce4 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80093e0:	2800      	cmp	r0, #0
 80093e2:	bf18      	it	ne
 80093e4:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80093e6:	4a8f      	ldr	r2, [pc, #572]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80093e8:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80093ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80093ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	06df      	lsls	r7, r3, #27
 80093f8:	d514      	bpl.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80093fa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80093fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009402:	d107      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009404:	2102      	movs	r1, #2
 8009406:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800940a:	f7ff fc6b 	bl	8008ce4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800940e:	2800      	cmp	r0, #0
 8009410:	bf18      	it	ne
 8009412:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009414:	4a83      	ldr	r2, [pc, #524]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009416:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800941a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800941c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009420:	430b      	orrs	r3, r1
 8009422:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	0318      	lsls	r0, r3, #12
 8009428:	d51a      	bpl.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 800942a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800942e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009432:	f000 8101 	beq.w	8009638 <HAL_RCCEx_PeriphCLKConfig+0x864>
 8009436:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800943a:	d006      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800943c:	2900      	cmp	r1, #0
 800943e:	f040 8101 	bne.w	8009644 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009442:	1d28      	adds	r0, r5, #4
 8009444:	f7ff fbd6 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009448:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800944a:	2c00      	cmp	r4, #0
 800944c:	f040 80fd 	bne.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009450:	4a74      	ldr	r2, [pc, #464]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009452:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8009456:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009458:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800945c:	430b      	orrs	r3, r1
 800945e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	0359      	lsls	r1, r3, #13
 8009464:	d51c      	bpl.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 8009466:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800946a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800946e:	f000 80ee 	beq.w	800964e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8009472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009476:	d008      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8009478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800947c:	f040 80ee 	bne.w	800965c <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009480:	4a68      	ldr	r2, [pc, #416]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009482:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009488:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800948a:	2c00      	cmp	r4, #0
 800948c:	f040 80e9 	bne.w	8009662 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009490:	4a64      	ldr	r2, [pc, #400]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009492:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8009496:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009498:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800949c:	430b      	orrs	r3, r1
 800949e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	03da      	lsls	r2, r3, #15
 80094a4:	d509      	bpl.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 80094a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80dc 	beq.w	8009666 <HAL_RCCEx_PeriphCLKConfig+0x892>
 80094ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094b2:	f000 80e6 	beq.w	8009682 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80094b6:	2601      	movs	r6, #1
 80094b8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	d507      	bpl.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80094c0:	2102      	movs	r1, #2
 80094c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80094c6:	f7ff fc0d 	bl	8008ce4 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80094ca:	2800      	cmp	r0, #0
 80094cc:	bf18      	it	ne
 80094ce:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	039f      	lsls	r7, r3, #14
 80094d4:	d50a      	bpl.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 80094d6:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80094d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80094dc:	f000 80e7 	beq.w	80096ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80094e0:	f200 80d7 	bhi.w	8009692 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80094e4:	2900      	cmp	r1, #0
 80094e6:	f000 80da 	beq.w	800969e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80094ea:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094ec:	02d8      	lsls	r0, r3, #11
 80094ee:	d506      	bpl.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094f0:	494c      	ldr	r1, [pc, #304]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80094f2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80094f4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80094f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80094fa:	4302      	orrs	r2, r0
 80094fc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094fe:	0299      	lsls	r1, r3, #10
 8009500:	d506      	bpl.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009502:	4948      	ldr	r1, [pc, #288]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009504:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8009506:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009508:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800950c:	4302      	orrs	r2, r0
 800950e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009510:	005a      	lsls	r2, r3, #1
 8009512:	d509      	bpl.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009514:	4a43      	ldr	r2, [pc, #268]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009516:	6911      	ldr	r1, [r2, #16]
 8009518:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800951c:	6111      	str	r1, [r2, #16]
 800951e:	6911      	ldr	r1, [r2, #16]
 8009520:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8009524:	4301      	orrs	r1, r0
 8009526:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009528:	2b00      	cmp	r3, #0
 800952a:	da06      	bge.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800952c:	493d      	ldr	r1, [pc, #244]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800952e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8009530:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009532:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009536:	4302      	orrs	r2, r0
 8009538:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	d507      	bpl.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800953e:	4a39      	ldr	r2, [pc, #228]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009540:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8009544:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009546:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800954a:	430b      	orrs	r3, r1
 800954c:	6553      	str	r3, [r2, #84]	; 0x54
}
 800954e:	1e30      	subs	r0, r6, #0
 8009550:	bf18      	it	ne
 8009552:	2001      	movne	r0, #1
 8009554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009558:	2101      	movs	r1, #1
 800955a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800955e:	f7ff fbc1 	bl	8008ce4 <RCCEx_PLL3_Config>
 8009562:	e6e9      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009564:	2601      	movs	r6, #1
 8009566:	4634      	mov	r4, r6
 8009568:	e6f2      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800956a:	4626      	mov	r6, r4
 800956c:	e6f0      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800956e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009572:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8009578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800957c:	f47f aefa 	bne.w	8009374 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 8009580:	b9a4      	cbnz	r4, 80095ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009582:	4a28      	ldr	r2, [pc, #160]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009584:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8009588:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800958a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800958e:	430b      	orrs	r3, r1
 8009590:	6553      	str	r3, [r2, #84]	; 0x54
 8009592:	e6f1      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009594:	2100      	movs	r1, #0
 8009596:	1d28      	adds	r0, r5, #4
 8009598:	f7ff fb2c 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800959c:	4604      	mov	r4, r0
      break;
 800959e:	e7ef      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095a0:	2102      	movs	r1, #2
 80095a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095a6:	f7ff fb9d 	bl	8008ce4 <RCCEx_PLL3_Config>
 80095aa:	e7f7      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80095ac:	4626      	mov	r6, r4
 80095ae:	e6e3      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095b4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80095b8:	d003      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80095ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095be:	f47f aeed 	bne.w	800939c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 80095c2:	b9a4      	cbnz	r4, 80095ee <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095c4:	4a17      	ldr	r2, [pc, #92]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80095c6:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80095ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80095cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6593      	str	r3, [r2, #88]	; 0x58
 80095d4:	e6e4      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095d6:	2100      	movs	r1, #0
 80095d8:	1d28      	adds	r0, r5, #4
 80095da:	f7ff fb0b 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095de:	4604      	mov	r4, r0
      break;
 80095e0:	e7ef      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e2:	2102      	movs	r1, #2
 80095e4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095e8:	f7ff fb7c 	bl	8008ce4 <RCCEx_PLL3_Config>
 80095ec:	e7f7      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80095ee:	4626      	mov	r6, r4
 80095f0:	e6d6      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80095fa:	d003      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x830>
 80095fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009600:	f47f aee0 	bne.w	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 8009604:	b9b4      	cbnz	r4, 8009634 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009606:	4a07      	ldr	r2, [pc, #28]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8009608:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800960c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800960e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009612:	430b      	orrs	r3, r1
 8009614:	6593      	str	r3, [r2, #88]	; 0x58
 8009616:	e6d7      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009618:	2100      	movs	r1, #0
 800961a:	1d28      	adds	r0, r5, #4
 800961c:	f7ff faea 	bl	8008bf4 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009620:	4604      	mov	r4, r0
      break;
 8009622:	e7ef      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8009624:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009628:	2102      	movs	r1, #2
 800962a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800962e:	f7ff fb59 	bl	8008ce4 <RCCEx_PLL3_Config>
 8009632:	e7f5      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009634:	4626      	mov	r6, r4
 8009636:	e6c7      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009638:	2102      	movs	r1, #2
 800963a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800963e:	f7ff fb51 	bl	8008ce4 <RCCEx_PLL3_Config>
 8009642:	e701      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 8009644:	2601      	movs	r6, #1
 8009646:	4634      	mov	r4, r6
 8009648:	e70a      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800964a:	4626      	mov	r6, r4
 800964c:	e708      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800964e:	2101      	movs	r1, #1
 8009650:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009654:	f7ff fb46 	bl	8008ce4 <RCCEx_PLL3_Config>
 8009658:	4604      	mov	r4, r0
      break;
 800965a:	e716      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 800965c:	2601      	movs	r6, #1
 800965e:	4634      	mov	r4, r6
 8009660:	e71e      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009662:	4626      	mov	r6, r4
 8009664:	e71c      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009666:	4a16      	ldr	r2, [pc, #88]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009668:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800966a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800966e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009670:	b96c      	cbnz	r4, 800968e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009672:	4a13      	ldr	r2, [pc, #76]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8009674:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8009676:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800967c:	430b      	orrs	r3, r1
 800967e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009680:	e71b      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009682:	2102      	movs	r1, #2
 8009684:	1d28      	adds	r0, r5, #4
 8009686:	f7ff fab5 	bl	8008bf4 <RCCEx_PLL2_Config>
 800968a:	4604      	mov	r4, r0
      break;
 800968c:	e7f0      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800968e:	4626      	mov	r6, r4
 8009690:	e713      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 8009692:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009696:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800969a:	f47f af26 	bne.w	80094ea <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 800969e:	b964      	cbnz	r4, 80096ba <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096a0:	4807      	ldr	r0, [pc, #28]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80096a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80096a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80096a8:	430a      	orrs	r2, r1
 80096aa:	6542      	str	r2, [r0, #84]	; 0x54
 80096ac:	e71e      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ae:	4804      	ldr	r0, [pc, #16]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80096b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80096b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096b6:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80096b8:	e7f1      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80096ba:	4626      	mov	r6, r4
 80096bc:	e716      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x718>
 80096be:	bf00      	nop
 80096c0:	58024400 	.word	0x58024400

080096c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096c4:	6a03      	ldr	r3, [r0, #32]
 80096c6:	f023 0301 	bic.w	r3, r3, #1
{
 80096ca:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096d4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80096d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80096e2:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096e4:	688d      	ldr	r5, [r1, #8]
 80096e6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096e8:	4d1b      	ldr	r5, [pc, #108]	; (8009758 <TIM_OC1_SetConfig+0x94>)
 80096ea:	42a8      	cmp	r0, r5
 80096ec:	d00f      	beq.n	800970e <TIM_OC1_SetConfig+0x4a>
 80096ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80096f2:	42a8      	cmp	r0, r5
 80096f4:	d00b      	beq.n	800970e <TIM_OC1_SetConfig+0x4a>
 80096f6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80096fa:	42a8      	cmp	r0, r5
 80096fc:	d007      	beq.n	800970e <TIM_OC1_SetConfig+0x4a>
 80096fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009702:	42a8      	cmp	r0, r5
 8009704:	d003      	beq.n	800970e <TIM_OC1_SetConfig+0x4a>
 8009706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800970a:	42a8      	cmp	r0, r5
 800970c:	d11e      	bne.n	800974c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800970e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009710:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009714:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009716:	4d10      	ldr	r5, [pc, #64]	; (8009758 <TIM_OC1_SetConfig+0x94>)
 8009718:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800971a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971e:	d00f      	beq.n	8009740 <TIM_OC1_SetConfig+0x7c>
 8009720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009724:	42a8      	cmp	r0, r5
 8009726:	d00b      	beq.n	8009740 <TIM_OC1_SetConfig+0x7c>
 8009728:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800972c:	42a8      	cmp	r0, r5
 800972e:	d007      	beq.n	8009740 <TIM_OC1_SetConfig+0x7c>
 8009730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009734:	42a8      	cmp	r0, r5
 8009736:	d003      	beq.n	8009740 <TIM_OC1_SetConfig+0x7c>
 8009738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800973c:	42a8      	cmp	r0, r5
 800973e:	d105      	bne.n	800974c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009740:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009744:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009748:	4334      	orrs	r4, r6
 800974a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800974e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009750:	684a      	ldr	r2, [r1, #4]
 8009752:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009754:	6203      	str	r3, [r0, #32]
}
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	40010000 	.word	0x40010000

0800975c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800975c:	6a03      	ldr	r3, [r0, #32]
 800975e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8009762:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009764:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009766:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009768:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800976a:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800976c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8009770:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009772:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009776:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800977a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800977c:	688d      	ldr	r5, [r1, #8]
 800977e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009782:	4d16      	ldr	r5, [pc, #88]	; (80097dc <TIM_OC3_SetConfig+0x80>)
 8009784:	42a8      	cmp	r0, r5
 8009786:	d003      	beq.n	8009790 <TIM_OC3_SetConfig+0x34>
 8009788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800978c:	42a8      	cmp	r0, r5
 800978e:	d10d      	bne.n	80097ac <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009790:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009796:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979a:	4d10      	ldr	r5, [pc, #64]	; (80097dc <TIM_OC3_SetConfig+0x80>)
 800979c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800979e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a2:	d00e      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097a8:	42a8      	cmp	r0, r5
 80097aa:	d00a      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097ac:	4d0c      	ldr	r5, [pc, #48]	; (80097e0 <TIM_OC3_SetConfig+0x84>)
 80097ae:	42a8      	cmp	r0, r5
 80097b0:	d007      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097b6:	42a8      	cmp	r0, r5
 80097b8:	d003      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097be:	42a8      	cmp	r0, r5
 80097c0:	d106      	bne.n	80097d0 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097c2:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097c6:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80097ca:	4334      	orrs	r4, r6
 80097cc:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097d4:	684a      	ldr	r2, [r1, #4]
 80097d6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d8:	6203      	str	r3, [r0, #32]
}
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	40010000 	.word	0x40010000
 80097e0:	40014000 	.word	0x40014000

080097e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097e4:	6a03      	ldr	r3, [r0, #32]
 80097e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80097ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097f2:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80097fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009802:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009806:	688d      	ldr	r5, [r1, #8]
 8009808:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980c:	4d0e      	ldr	r5, [pc, #56]	; (8009848 <TIM_OC4_SetConfig+0x64>)
 800980e:	42a8      	cmp	r0, r5
 8009810:	d00f      	beq.n	8009832 <TIM_OC4_SetConfig+0x4e>
 8009812:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009816:	42a8      	cmp	r0, r5
 8009818:	d00b      	beq.n	8009832 <TIM_OC4_SetConfig+0x4e>
 800981a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 800981e:	42a8      	cmp	r0, r5
 8009820:	d007      	beq.n	8009832 <TIM_OC4_SetConfig+0x4e>
 8009822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009826:	42a8      	cmp	r0, r5
 8009828:	d003      	beq.n	8009832 <TIM_OC4_SetConfig+0x4e>
 800982a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800982e:	42a8      	cmp	r0, r5
 8009830:	d104      	bne.n	800983c <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009832:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009836:	694d      	ldr	r5, [r1, #20]
 8009838:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800983e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009840:	684a      	ldr	r2, [r1, #4]
 8009842:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	6203      	str	r3, [r0, #32]
}
 8009846:	bd30      	pop	{r4, r5, pc}
 8009848:	40010000 	.word	0x40010000

0800984c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800984c:	6a03      	ldr	r3, [r0, #32]
 800984e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8009852:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009854:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009856:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009858:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800985a:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800985c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8009860:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800986a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800986c:	688d      	ldr	r5, [r1, #8]
 800986e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009872:	4d0f      	ldr	r5, [pc, #60]	; (80098b0 <TIM_OC5_SetConfig+0x64>)
 8009874:	42a8      	cmp	r0, r5
 8009876:	d00f      	beq.n	8009898 <TIM_OC5_SetConfig+0x4c>
 8009878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800987c:	42a8      	cmp	r0, r5
 800987e:	d00b      	beq.n	8009898 <TIM_OC5_SetConfig+0x4c>
 8009880:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8009884:	42a8      	cmp	r0, r5
 8009886:	d007      	beq.n	8009898 <TIM_OC5_SetConfig+0x4c>
 8009888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800988c:	42a8      	cmp	r0, r5
 800988e:	d003      	beq.n	8009898 <TIM_OC5_SetConfig+0x4c>
 8009890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009894:	42a8      	cmp	r0, r5
 8009896:	d104      	bne.n	80098a2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009898:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800989c:	694d      	ldr	r5, [r1, #20]
 800989e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098a4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098a6:	684a      	ldr	r2, [r1, #4]
 80098a8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098aa:	6203      	str	r3, [r0, #32]
}
 80098ac:	bd30      	pop	{r4, r5, pc}
 80098ae:	bf00      	nop
 80098b0:	40010000 	.word	0x40010000

080098b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098b4:	6a03      	ldr	r3, [r0, #32]
 80098b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80098ba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80098ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098d6:	688d      	ldr	r5, [r1, #8]
 80098d8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098dc:	4d0e      	ldr	r5, [pc, #56]	; (8009918 <TIM_OC6_SetConfig+0x64>)
 80098de:	42a8      	cmp	r0, r5
 80098e0:	d00f      	beq.n	8009902 <TIM_OC6_SetConfig+0x4e>
 80098e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098e6:	42a8      	cmp	r0, r5
 80098e8:	d00b      	beq.n	8009902 <TIM_OC6_SetConfig+0x4e>
 80098ea:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80098ee:	42a8      	cmp	r0, r5
 80098f0:	d007      	beq.n	8009902 <TIM_OC6_SetConfig+0x4e>
 80098f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098f6:	42a8      	cmp	r0, r5
 80098f8:	d003      	beq.n	8009902 <TIM_OC6_SetConfig+0x4e>
 80098fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098fe:	42a8      	cmp	r0, r5
 8009900:	d104      	bne.n	800990c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009902:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009906:	694d      	ldr	r5, [r1, #20]
 8009908:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800990e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009910:	684a      	ldr	r2, [r1, #4]
 8009912:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009914:	6203      	str	r3, [r0, #32]
}
 8009916:	bd30      	pop	{r4, r5, pc}
 8009918:	40010000 	.word	0x40010000

0800991c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800991c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009920:	2b01      	cmp	r3, #1
 8009922:	d13b      	bne.n	800999c <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8009924:	2302      	movs	r3, #2
 8009926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800992a:	6803      	ldr	r3, [r0, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009934:	4a1a      	ldr	r2, [pc, #104]	; (80099a0 <HAL_TIM_Base_Start_IT+0x84>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d022      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d01f      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009940:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009944:	4293      	cmp	r3, r2
 8009946:	d01b      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800994c:	4293      	cmp	r3, r2
 800994e:	d017      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009954:	4293      	cmp	r3, r2
 8009956:	d013      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009958:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800995c:	4293      	cmp	r3, r2
 800995e:	d00f      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009960:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8009964:	4293      	cmp	r3, r2
 8009966:	d00b      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009968:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800996c:	4293      	cmp	r3, r2
 800996e:	d007      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009970:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8009974:	4293      	cmp	r3, r2
 8009976:	d003      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x64>
 8009978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800997c:	4293      	cmp	r3, r2
 800997e:	d107      	bne.n	8009990 <HAL_TIM_Base_Start_IT+0x74>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009980:	6899      	ldr	r1, [r3, #8]
 8009982:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <HAL_TIM_Base_Start_IT+0x88>)
 8009984:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009986:	2a06      	cmp	r2, #6
 8009988:	d006      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x7c>
 800998a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800998e:	d003      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x7c>
    __HAL_TIM_ENABLE(htim);
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009998:	2000      	movs	r0, #0
}
 800999a:	4770      	bx	lr
    return HAL_ERROR;
 800999c:	2001      	movs	r0, #1
 800999e:	4770      	bx	lr
 80099a0:	40010000 	.word	0x40010000
 80099a4:	00010007 	.word	0x00010007

080099a8 <HAL_TIM_Encoder_Start_IT>:
{
 80099a8:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80099aa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80099ae:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80099b2:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80099b6:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099b8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80099bc:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80099be:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099c0:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 80099c2:	b9e9      	cbnz	r1, 8009a00 <HAL_TIM_Encoder_Start_IT+0x58>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099c4:	2a01      	cmp	r2, #1
 80099c6:	d15a      	bne.n	8009a7e <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099c8:	2d01      	cmp	r5, #1
 80099ca:	d15a      	bne.n	8009a82 <HAL_TIM_Encoder_Start_IT+0xda>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099cc:	2302      	movs	r3, #2
 80099ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099d2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80099d6:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099d8:	6a1a      	ldr	r2, [r3, #32]
 80099da:	f022 0201 	bic.w	r2, r2, #1
 80099de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	f042 0201 	orr.w	r2, r2, #1
 80099e6:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099ee:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80099f0:	6802      	ldr	r2, [r0, #0]
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	f043 0301 	orr.w	r3, r3, #1
 80099f8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8009a00:	2904      	cmp	r1, #4
 8009a02:	d115      	bne.n	8009a30 <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d13a      	bne.n	8009a7e <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a08:	2c01      	cmp	r4, #1
 8009a0a:	d1f7      	bne.n	80099fc <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a12:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a16:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8009a18:	6a1a      	ldr	r2, [r3, #32]
 8009a1a:	f022 0210 	bic.w	r2, r2, #16
 8009a1e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a20:	6a1a      	ldr	r2, [r3, #32]
 8009a22:	f042 0210 	orr.w	r2, r2, #16
 8009a26:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	f042 0204 	orr.w	r2, r2, #4
 8009a2e:	e7de      	b.n	80099ee <HAL_TIM_Encoder_Start_IT+0x46>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a30:	2a01      	cmp	r2, #1
 8009a32:	d124      	bne.n	8009a7e <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d124      	bne.n	8009a82 <HAL_TIM_Encoder_Start_IT+0xda>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a38:	2d01      	cmp	r5, #1
 8009a3a:	d1df      	bne.n	80099fc <HAL_TIM_Encoder_Start_IT+0x54>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a3c:	2c01      	cmp	r4, #1
 8009a3e:	d1dd      	bne.n	80099fc <HAL_TIM_Encoder_Start_IT+0x54>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a40:	2302      	movs	r3, #2
 8009a42:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a46:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  switch (Channel)
 8009a52:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8009a54:	6a1a      	ldr	r2, [r3, #32]
 8009a56:	f022 0201 	bic.w	r2, r2, #1
 8009a5a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	f042 0201 	orr.w	r2, r2, #1
 8009a62:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8009a64:	6a1a      	ldr	r2, [r3, #32]
 8009a66:	f022 0210 	bic.w	r2, r2, #16
 8009a6a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a6c:	6a1a      	ldr	r2, [r3, #32]
 8009a6e:	f042 0210 	orr.w	r2, r2, #16
 8009a72:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	f042 0202 	orr.w	r2, r2, #2
 8009a7a:	60da      	str	r2, [r3, #12]
 8009a7c:	e7d4      	b.n	8009a28 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e7bc      	b.n	80099fc <HAL_TIM_Encoder_Start_IT+0x54>
 8009a82:	4613      	mov	r3, r2
 8009a84:	e7ba      	b.n	80099fc <HAL_TIM_Encoder_Start_IT+0x54>

08009a86 <HAL_TIM_OC_DelayElapsedCallback>:
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009a88:	4770      	bx	lr

08009a8a <HAL_TIM_TriggerCallback>:
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a8c:	6803      	ldr	r3, [r0, #0]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	0791      	lsls	r1, r2, #30
{
 8009a92:	b510      	push	{r4, lr}
 8009a94:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a96:	d50f      	bpl.n	8009ab8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	0792      	lsls	r2, r2, #30
 8009a9c:	d50c      	bpl.n	8009ab8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a9e:	f06f 0202 	mvn.w	r2, #2
 8009aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	0799      	lsls	r1, r3, #30
 8009aac:	f000 8085 	beq.w	8009bba <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009ab0:	f7f6 ff50 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	0752      	lsls	r2, r2, #29
 8009abe:	d510      	bpl.n	8009ae2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	0750      	lsls	r0, r2, #29
 8009ac4:	d50d      	bpl.n	8009ae2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ac6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ace:	2202      	movs	r2, #2
 8009ad0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009ad8:	d075      	beq.n	8009bc6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ada:	f7f6 ff3b 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	0711      	lsls	r1, r2, #28
 8009ae8:	d50f      	bpl.n	8009b0a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	0712      	lsls	r2, r2, #28
 8009aee:	d50c      	bpl.n	8009b0a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009af0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8009af4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009af8:	2204      	movs	r2, #4
 8009afa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	079b      	lsls	r3, r3, #30
 8009b00:	d067      	beq.n	8009bd2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b02:	f7f6 ff27 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b06:	2300      	movs	r3, #0
 8009b08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	06d0      	lsls	r0, r2, #27
 8009b10:	d510      	bpl.n	8009b34 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	06d1      	lsls	r1, r2, #27
 8009b16:	d50d      	bpl.n	8009b34 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b18:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8009b1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b20:	2208      	movs	r2, #8
 8009b22:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009b2a:	d058      	beq.n	8009bde <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2c:	f7f6 ff12 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b30:	2300      	movs	r3, #0
 8009b32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	07d2      	lsls	r2, r2, #31
 8009b3a:	d508      	bpl.n	8009b4e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	07d0      	lsls	r0, r2, #31
 8009b40:	d505      	bpl.n	8009b4e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b42:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b4a:	f7f7 fad9 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	0611      	lsls	r1, r2, #24
 8009b54:	d508      	bpl.n	8009b68 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	0612      	lsls	r2, r2, #24
 8009b5a:	d505      	bpl.n	8009b68 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009b60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009b64:	f000 fb7f 	bl	800a266 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	05d0      	lsls	r0, r2, #23
 8009b6e:	d508      	bpl.n	8009b82 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	0611      	lsls	r1, r2, #24
 8009b74:	d505      	bpl.n	8009b82 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b76:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8009b7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009b7e:	f000 fb73 	bl	800a268 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	0652      	lsls	r2, r2, #25
 8009b88:	d508      	bpl.n	8009b9c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	0650      	lsls	r0, r2, #25
 8009b8e:	d505      	bpl.n	8009b9c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009b94:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009b98:	f7ff ff77 	bl	8009a8a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	691a      	ldr	r2, [r3, #16]
 8009ba0:	0691      	lsls	r1, r2, #26
 8009ba2:	d522      	bpl.n	8009bea <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	0692      	lsls	r2, r2, #26
 8009ba8:	d51f      	bpl.n	8009bea <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009baa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009bae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bb0:	611a      	str	r2, [r3, #16]
}
 8009bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009bb6:	f000 bb55 	b.w	800a264 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bba:	f7ff ff64 	bl	8009a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f7ff ff62 	bl	8009a88 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bc4:	e776      	b.n	8009ab4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc6:	f7ff ff5e 	bl	8009a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f7ff ff5c 	bl	8009a88 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bd0:	e785      	b.n	8009ade <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd2:	f7ff ff58 	bl	8009a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff ff56 	bl	8009a88 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bdc:	e793      	b.n	8009b06 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	f7ff ff52 	bl	8009a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7ff ff50 	bl	8009a88 <HAL_TIM_PWM_PulseFinishedCallback>
 8009be8:	e7a2      	b.n	8009b30 <HAL_TIM_IRQHandler+0xa4>
}
 8009bea:	bd10      	pop	{r4, pc}

08009bec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bec:	4a34      	ldr	r2, [pc, #208]	; (8009cc0 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8009bee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf0:	4290      	cmp	r0, r2
 8009bf2:	d012      	beq.n	8009c1a <TIM_Base_SetConfig+0x2e>
 8009bf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009bf8:	d00f      	beq.n	8009c1a <TIM_Base_SetConfig+0x2e>
 8009bfa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009bfe:	4290      	cmp	r0, r2
 8009c00:	d00b      	beq.n	8009c1a <TIM_Base_SetConfig+0x2e>
 8009c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c06:	4290      	cmp	r0, r2
 8009c08:	d007      	beq.n	8009c1a <TIM_Base_SetConfig+0x2e>
 8009c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c0e:	4290      	cmp	r0, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_Base_SetConfig+0x2e>
 8009c12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009c16:	4290      	cmp	r0, r2
 8009c18:	d119      	bne.n	8009c4e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8009c1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c22:	4a27      	ldr	r2, [pc, #156]	; (8009cc0 <TIM_Base_SetConfig+0xd4>)
 8009c24:	4290      	cmp	r0, r2
 8009c26:	d025      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c2c:	d022      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c32:	4290      	cmp	r0, r2
 8009c34:	d01e      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c3a:	4290      	cmp	r0, r2
 8009c3c:	d01a      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c42:	4290      	cmp	r0, r2
 8009c44:	d016      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c46:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009c4a:	4290      	cmp	r0, r2
 8009c4c:	d012      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c4e:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <TIM_Base_SetConfig+0xd8>)
 8009c50:	4290      	cmp	r0, r2
 8009c52:	d00f      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c58:	4290      	cmp	r0, r2
 8009c5a:	d00b      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c60:	4290      	cmp	r0, r2
 8009c62:	d007      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c64:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 8009c68:	4290      	cmp	r0, r2
 8009c6a:	d003      	beq.n	8009c74 <TIM_Base_SetConfig+0x88>
 8009c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c70:	4290      	cmp	r0, r2
 8009c72:	d103      	bne.n	8009c7c <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c78:	68ca      	ldr	r2, [r1, #12]
 8009c7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c7c:	694a      	ldr	r2, [r1, #20]
 8009c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c82:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009c84:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c86:	688b      	ldr	r3, [r1, #8]
 8009c88:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009c8a:	680b      	ldr	r3, [r1, #0]
 8009c8c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <TIM_Base_SetConfig+0xd4>)
 8009c90:	4298      	cmp	r0, r3
 8009c92:	d00f      	beq.n	8009cb4 <TIM_Base_SetConfig+0xc8>
 8009c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	d00b      	beq.n	8009cb4 <TIM_Base_SetConfig+0xc8>
 8009c9c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009ca0:	4298      	cmp	r0, r3
 8009ca2:	d007      	beq.n	8009cb4 <TIM_Base_SetConfig+0xc8>
 8009ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ca8:	4298      	cmp	r0, r3
 8009caa:	d003      	beq.n	8009cb4 <TIM_Base_SetConfig+0xc8>
 8009cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cb0:	4298      	cmp	r0, r3
 8009cb2:	d101      	bne.n	8009cb8 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8009cb4:	690b      	ldr	r3, [r1, #16]
 8009cb6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	6143      	str	r3, [r0, #20]
}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40010000 	.word	0x40010000
 8009cc4:	40014000 	.word	0x40014000

08009cc8 <HAL_TIM_Base_Init>:
{
 8009cc8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009cca:	4604      	mov	r4, r0
 8009ccc:	b350      	cbz	r0, 8009d24 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009cd6:	b91b      	cbnz	r3, 8009ce0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009cd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009cdc:	f7f7 fea8 	bl	8001a30 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cea:	f7ff ff7f 	bl	8009bec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cee:	2301      	movs	r3, #1
  return HAL_OK;
 8009cf0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009cfa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009cfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d1a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009d22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009d24:	2001      	movs	r0, #1
 8009d26:	e7fc      	b.n	8009d22 <HAL_TIM_Base_Init+0x5a>

08009d28 <HAL_TIM_PWM_Init>:
{
 8009d28:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	b350      	cbz	r0, 8009d84 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d36:	b91b      	cbnz	r3, 8009d40 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d3c:	f7f7 fe3a 	bl	80019b4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d42:	6820      	ldr	r0, [r4, #0]
 8009d44:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d4a:	f7ff ff4f 	bl	8009bec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d4e:	2301      	movs	r3, #1
  return HAL_OK;
 8009d50:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d52:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009d5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009d5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009d62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d76:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d7a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009d82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009d84:	2001      	movs	r0, #1
 8009d86:	e7fc      	b.n	8009d82 <HAL_TIM_PWM_Init+0x5a>

08009d88 <HAL_TIM_Encoder_Init>:
{
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	460d      	mov	r5, r1
  if (htim == NULL)
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d04d      	beq.n	8009e2e <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d9a:	b91b      	cbnz	r3, 8009da4 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8009d9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8009da0:	f7f7 fe6a 	bl	8001a78 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009da4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009da6:	2302      	movs	r3, #2
 8009da8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009dac:	f851 0b04 	ldr.w	r0, [r1], #4
 8009db0:	6883      	ldr	r3, [r0, #8]
 8009db2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009db6:	f023 0307 	bic.w	r3, r3, #7
 8009dba:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dbc:	f7ff ff16 	bl	8009bec <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8009dc0:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8009dc2:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8009dc4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8009dc6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009dc8:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8009dca:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009dd0:	69ab      	ldr	r3, [r5, #24]
  tmpccer = htim->Instance->CCER;
 8009dd2:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009dd4:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009dd8:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ddc:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009dde:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009de0:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009de4:	692b      	ldr	r3, [r5, #16]
 8009de6:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009de8:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009dec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009df0:	68e9      	ldr	r1, [r5, #12]
 8009df2:	430b      	orrs	r3, r1
 8009df4:	6a29      	ldr	r1, [r5, #32]
 8009df6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dfa:	6969      	ldr	r1, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009dfc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009dfe:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e02:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8009e04:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e06:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8009e0a:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e0c:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009e0e:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8009e10:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8009e12:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e14:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009e28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7fc      	b.n	8009e2c <HAL_TIM_Encoder_Init+0xa4>
	...

08009e34 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e34:	6a03      	ldr	r3, [r0, #32]
 8009e36:	f023 0310 	bic.w	r3, r3, #16
{
 8009e3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009e3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009e40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009e42:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8009e44:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e4e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e56:	688d      	ldr	r5, [r1, #8]
 8009e58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e5c:	4d16      	ldr	r5, [pc, #88]	; (8009eb8 <TIM_OC2_SetConfig+0x84>)
 8009e5e:	42a8      	cmp	r0, r5
 8009e60:	d003      	beq.n	8009e6a <TIM_OC2_SetConfig+0x36>
 8009e62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e66:	42a8      	cmp	r0, r5
 8009e68:	d10d      	bne.n	8009e86 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e6a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e74:	4d10      	ldr	r5, [pc, #64]	; (8009eb8 <TIM_OC2_SetConfig+0x84>)
 8009e76:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e7c:	d00e      	beq.n	8009e9c <TIM_OC2_SetConfig+0x68>
 8009e7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e82:	42a8      	cmp	r0, r5
 8009e84:	d00a      	beq.n	8009e9c <TIM_OC2_SetConfig+0x68>
 8009e86:	4d0d      	ldr	r5, [pc, #52]	; (8009ebc <TIM_OC2_SetConfig+0x88>)
 8009e88:	42a8      	cmp	r0, r5
 8009e8a:	d007      	beq.n	8009e9c <TIM_OC2_SetConfig+0x68>
 8009e8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e90:	42a8      	cmp	r0, r5
 8009e92:	d003      	beq.n	8009e9c <TIM_OC2_SetConfig+0x68>
 8009e94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e98:	42a8      	cmp	r0, r5
 8009e9a:	d106      	bne.n	8009eaa <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e9c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ea0:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8009ea4:	4334      	orrs	r4, r6
 8009ea6:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8009eaa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009eac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009eae:	684a      	ldr	r2, [r1, #4]
 8009eb0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009eb2:	6203      	str	r3, [r0, #32]
}
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40010000 	.word	0x40010000
 8009ebc:	40014000 	.word	0x40014000

08009ec0 <HAL_TIM_PWM_ConfigChannel>:
{
 8009ec0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8009ec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d07a      	beq.n	8009fc4 <HAL_TIM_PWM_ConfigChannel+0x104>
 8009ece:	2201      	movs	r2, #1
  switch (Channel)
 8009ed0:	2c0c      	cmp	r4, #12
  __HAL_LOCK(htim);
 8009ed2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8009ed6:	d053      	beq.n	8009f80 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8009ed8:	d809      	bhi.n	8009eee <HAL_TIM_PWM_ConfigChannel+0x2e>
 8009eda:	2c04      	cmp	r4, #4
 8009edc:	d02e      	beq.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x7c>
 8009ede:	2c08      	cmp	r4, #8
 8009ee0:	d03d      	beq.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x9e>
 8009ee2:	b1cc      	cbz	r4, 8009f18 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_UNLOCK(htim);
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8009eea:	4610      	mov	r0, r2
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8009eee:	2c10      	cmp	r4, #16
 8009ef0:	d057      	beq.n	8009fa2 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8009ef2:	2c14      	cmp	r4, #20
 8009ef4:	d1f6      	bne.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ef6:	6800      	ldr	r0, [r0, #0]
 8009ef8:	f7ff fcdc 	bl	80098b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009efc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009efe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f16:	e053      	b.n	8009fc0 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f18:	6800      	ldr	r0, [r0, #0]
 8009f1a:	f7ff fbd3 	bl	80096c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f1e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	f042 0208 	orr.w	r2, r2, #8
 8009f28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f2a:	699a      	ldr	r2, [r3, #24]
 8009f2c:	f022 0204 	bic.w	r2, r2, #4
 8009f30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f36:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8009f38:	2200      	movs	r2, #0
      break;
 8009f3a:	e7d3      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f7ff ff79 	bl	8009e34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f42:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f44:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f46:	699a      	ldr	r2, [r3, #24]
 8009f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f4e:	699a      	ldr	r2, [r3, #24]
 8009f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f56:	699a      	ldr	r2, [r3, #24]
 8009f58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f5c:	e7eb      	b.n	8009f36 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f5e:	6800      	ldr	r0, [r0, #0]
 8009f60:	f7ff fbfc 	bl	800975c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f64:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f66:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f68:	69da      	ldr	r2, [r3, #28]
 8009f6a:	f042 0208 	orr.w	r2, r2, #8
 8009f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f70:	69da      	ldr	r2, [r3, #28]
 8009f72:	f022 0204 	bic.w	r2, r2, #4
 8009f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f78:	69da      	ldr	r2, [r3, #28]
 8009f7a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f7c:	61da      	str	r2, [r3, #28]
      break;
 8009f7e:	e7db      	b.n	8009f38 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f80:	6800      	ldr	r0, [r0, #0]
 8009f82:	f7ff fc2f 	bl	80097e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f86:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f88:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f8a:	69da      	ldr	r2, [r3, #28]
 8009f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f92:	69da      	ldr	r2, [r3, #28]
 8009f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009fa0:	e7ec      	b.n	8009f7c <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fa2:	6800      	ldr	r0, [r0, #0]
 8009fa4:	f7ff fc52 	bl	800984c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fa8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009faa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fae:	f042 0208 	orr.w	r2, r2, #8
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fb6:	f022 0204 	bic.w	r2, r2, #4
 8009fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fbe:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8009fc2:	e7b9      	b.n	8009f38 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	e790      	b.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x2a>

08009fc8 <TIM_CCxChannelCmd>:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fc8:	f001 011f 	and.w	r1, r1, #31
  TIMx->CCER &= ~tmp;
 8009fcc:	6a03      	ldr	r3, [r0, #32]
{
 8009fce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fd0:	2401      	movs	r4, #1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fd2:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fd4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009fd6:	ea23 0304 	bic.w	r3, r3, r4
 8009fda:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fdc:	6a03      	ldr	r3, [r0, #32]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	6202      	str	r2, [r0, #32]
}
 8009fe2:	bd10      	pop	{r4, pc}

08009fe4 <HAL_TIM_OC_Start>:
{
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009fe8:	b929      	cbnz	r1, 8009ff6 <HAL_TIM_OC_Start+0x12>
 8009fea:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d031      	beq.n	800a056 <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8009ff2:	2001      	movs	r0, #1
}
 8009ff4:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ff6:	2904      	cmp	r1, #4
 8009ff8:	d107      	bne.n	800a00a <HAL_TIM_OC_Start+0x26>
 8009ffa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d1f7      	bne.n	8009ff2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a002:	2302      	movs	r3, #2
 800a004:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800a008:	e028      	b.n	800a05c <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a00a:	2908      	cmp	r1, #8
 800a00c:	d107      	bne.n	800a01e <HAL_TIM_OC_Start+0x3a>
 800a00e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a012:	2b01      	cmp	r3, #1
 800a014:	d1ed      	bne.n	8009ff2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a016:	2302      	movs	r3, #2
 800a018:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a01c:	e01e      	b.n	800a05c <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a01e:	290c      	cmp	r1, #12
 800a020:	d107      	bne.n	800a032 <HAL_TIM_OC_Start+0x4e>
 800a022:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a026:	2b01      	cmp	r3, #1
 800a028:	d1e3      	bne.n	8009ff2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02a:	2302      	movs	r3, #2
 800a02c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800a030:	e014      	b.n	800a05c <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a032:	2910      	cmp	r1, #16
 800a034:	d107      	bne.n	800a046 <HAL_TIM_OC_Start+0x62>
 800a036:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d1d9      	bne.n	8009ff2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a03e:	2302      	movs	r3, #2
 800a040:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800a044:	e00a      	b.n	800a05c <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a046:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d1d1      	bne.n	8009ff2 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a04e:	2302      	movs	r3, #2
 800a050:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800a054:	e002      	b.n	800a05c <HAL_TIM_OC_Start+0x78>
 800a056:	2302      	movs	r3, #2
 800a058:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a05c:	2201      	movs	r2, #1
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	f7ff ffb2 	bl	8009fc8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	4a26      	ldr	r2, [pc, #152]	; (800a100 <HAL_TIM_OC_Start+0x11c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d019      	beq.n	800a0a0 <HAL_TIM_OC_Start+0xbc>
 800a06c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a070:	4293      	cmp	r3, r2
 800a072:	d015      	beq.n	800a0a0 <HAL_TIM_OC_Start+0xbc>
 800a074:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a078:	4293      	cmp	r3, r2
 800a07a:	d011      	beq.n	800a0a0 <HAL_TIM_OC_Start+0xbc>
 800a07c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a080:	4293      	cmp	r3, r2
 800a082:	d00d      	beq.n	800a0a0 <HAL_TIM_OC_Start+0xbc>
 800a084:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a088:	4293      	cmp	r3, r2
 800a08a:	d009      	beq.n	800a0a0 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a090:	d10e      	bne.n	800a0b0 <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a092:	6899      	ldr	r1, [r3, #8]
 800a094:	4a1b      	ldr	r2, [pc, #108]	; (800a104 <HAL_TIM_OC_Start+0x120>)
 800a096:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a098:	2a06      	cmp	r2, #6
 800a09a:	d12d      	bne.n	800a0f8 <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 800a09c:	2000      	movs	r0, #0
 800a09e:	e7a9      	b.n	8009ff4 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 800a0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0a6:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a8:	4a15      	ldr	r2, [pc, #84]	; (800a100 <HAL_TIM_OC_Start+0x11c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d1ee      	bne.n	800a08c <HAL_TIM_OC_Start+0xa8>
 800a0ae:	e7f0      	b.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <HAL_TIM_OC_Start+0x124>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d0ed      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d0e9      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d0e5      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d0e1      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0ce:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d0dd      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0d6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d0d9      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0de:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d0d5      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
 800a0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d0d1      	beq.n	800a092 <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	e7d1      	b.n	800a09c <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a0fc:	d1f7      	bne.n	800a0ee <HAL_TIM_OC_Start+0x10a>
 800a0fe:	e7cd      	b.n	800a09c <HAL_TIM_OC_Start+0xb8>
 800a100:	40010000 	.word	0x40010000
 800a104:	00010007 	.word	0x00010007
 800a108:	40000400 	.word	0x40000400

0800a10c <HAL_TIM_PWM_Start>:
 800a10c:	f7ff bf6a 	b.w	8009fe4 <HAL_TIM_OC_Start>

0800a110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a110:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a112:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a116:	2b01      	cmp	r3, #1
 800a118:	f04f 0302 	mov.w	r3, #2
 800a11c:	d045      	beq.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a122:	4d23      	ldr	r5, [pc, #140]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  tmpcr2 = htim->Instance->CR2;
 800a124:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a126:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a128:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a12a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a12c:	d003      	beq.n	800a136 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800a12e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a132:	42ab      	cmp	r3, r5
 800a134:	d103      	bne.n	800a13e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a13a:	684d      	ldr	r5, [r1, #4]
 800a13c:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a13e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a140:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a144:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a148:	4a19      	ldr	r2, [pc, #100]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d022      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a152:	d01f      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a154:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a158:	4293      	cmp	r3, r2
 800a15a:	d01b      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a15c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a160:	4293      	cmp	r3, r2
 800a162:	d017      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a168:	4293      	cmp	r3, r2
 800a16a:	d013      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a16c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a170:	4293      	cmp	r3, r2
 800a172:	d00f      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a174:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a178:	4293      	cmp	r3, r2
 800a17a:	d00b      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a17c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a180:	4293      	cmp	r3, r2
 800a182:	d007      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a184:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 800a188:	4293      	cmp	r3, r2
 800a18a:	d003      	beq.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a18c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a190:	4293      	cmp	r3, r2
 800a192:	d104      	bne.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a194:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a196:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a19a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a19c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800a1aa:	4618      	mov	r0, r3

  return HAL_OK;
}
 800a1ac:	bd30      	pop	{r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	40010000 	.word	0x40010000

0800a1b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d04c      	beq.n	800a258 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1be:	68cb      	ldr	r3, [r1, #12]
 800a1c0:	688a      	ldr	r2, [r1, #8]
 800a1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1c6:	4c25      	ldr	r4, [pc, #148]	; (800a25c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1ca:	684a      	ldr	r2, [r1, #4]
 800a1cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1d2:	680a      	ldr	r2, [r1, #0]
 800a1d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1da:	690a      	ldr	r2, [r1, #16]
 800a1dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1e2:	694a      	ldr	r2, [r1, #20]
 800a1e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1ea:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800a1ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1f2:	698a      	ldr	r2, [r1, #24]
 800a1f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a1f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1fc:	6802      	ldr	r2, [r0, #0]
 800a1fe:	42a2      	cmp	r2, r4
 800a200:	d002      	beq.n	800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800a202:	4d17      	ldr	r5, [pc, #92]	; (800a260 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a204:	42aa      	cmp	r2, r5
 800a206:	d121      	bne.n	800a24c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a20c:	69cd      	ldr	r5, [r1, #28]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a20e:	42a2      	cmp	r2, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a210:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a214:	d002      	beq.n	800a21c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800a216:	4c12      	ldr	r4, [pc, #72]	; (800a260 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800a218:	42a2      	cmp	r2, r4
 800a21a:	d117      	bne.n	800a24c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a21c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a21e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a222:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a226:	6a0c      	ldr	r4, [r1, #32]
 800a228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a22c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a22e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a230:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a234:	4323      	orrs	r3, r4
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a236:	4c09      	ldr	r4, [pc, #36]	; (800a25c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800a238:	42a2      	cmp	r2, r4
 800a23a:	d003      	beq.n	800a244 <HAL_TIMEx_ConfigBreakDeadTime+0x90>
 800a23c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a240:	42a2      	cmp	r2, r4
 800a242:	d103      	bne.n	800a24c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a248:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a24a:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a24c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a24e:	2300      	movs	r3, #0
 800a250:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a254:	4618      	mov	r0, r3
}
 800a256:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800a258:	2002      	movs	r0, #2
 800a25a:	e7fc      	b.n	800a256 <HAL_TIMEx_ConfigBreakDeadTime+0xa2>
 800a25c:	40010000 	.word	0x40010000
 800a260:	40010400 	.word	0x40010400

0800a264 <HAL_TIMEx_CommutCallback>:
 800a264:	4770      	bx	lr

0800a266 <HAL_TIMEx_BreakCallback>:
 800a266:	4770      	bx	lr

0800a268 <HAL_TIMEx_Break2Callback>:
 800a268:	4770      	bx	lr
	...

0800a26c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a26c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a26e:	4b05      	ldr	r3, [pc, #20]	; (800a284 <SysTick_Handler+0x18>)
 800a270:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a272:	f001 fe43 	bl	800befc <xTaskGetSchedulerState>
 800a276:	2801      	cmp	r0, #1
 800a278:	d003      	beq.n	800a282 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a27a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a27e:	f000 bbd9 	b.w	800aa34 <xPortSysTickHandler>
}
 800a282:	bd08      	pop	{r3, pc}
 800a284:	e000e010 	.word	0xe000e010

0800a288 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a288:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a28c:	b92b      	cbnz	r3, 800a29a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a28e:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <osKernelInitialize+0x20>)
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	b928      	cbnz	r0, 800a2a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a294:	2201      	movs	r2, #1
 800a296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a298:	4770      	bx	lr
    stat = osErrorISR;
 800a29a:	f06f 0005 	mvn.w	r0, #5
 800a29e:	4770      	bx	lr
    } else {
      stat = osError;
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	240025ac 	.word	0x240025ac

0800a2ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2b2:	b95c      	cbnz	r4, 800a2cc <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a2b4:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <osKernelStart+0x2c>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	2a01      	cmp	r2, #1
 800a2ba:	d10a      	bne.n	800a2d2 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2bc:	4a07      	ldr	r2, [pc, #28]	; (800a2dc <osKernelStart+0x30>)
 800a2be:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2c4:	f001 fcc0 	bl	800bc48 <vTaskStartScheduler>
      stat = osOK;
 800a2c8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800a2ca:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a2cc:	f06f 0005 	mvn.w	r0, #5
 800a2d0:	e7fb      	b.n	800a2ca <osKernelStart+0x1e>
      stat = osError;
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a2d6:	e7f8      	b.n	800a2ca <osKernelStart+0x1e>
 800a2d8:	240025ac 	.word	0x240025ac
 800a2dc:	e000ed00 	.word	0xe000ed00

0800a2e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2e6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2e8:	460b      	mov	r3, r1
  hTask = NULL;
 800a2ea:	9205      	str	r2, [sp, #20]
 800a2ec:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a2f0:	b9d2      	cbnz	r2, 800a328 <osThreadNew+0x48>
 800a2f2:	b1c8      	cbz	r0, 800a328 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d02f      	beq.n	800a358 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a2f8:	69a5      	ldr	r5, [r4, #24]
 800a2fa:	2d00      	cmp	r5, #0
 800a2fc:	bf08      	it	eq
 800a2fe:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a300:	1e69      	subs	r1, r5, #1
 800a302:	46ac      	mov	ip, r5
 800a304:	2937      	cmp	r1, #55	; 0x37
 800a306:	d82b      	bhi.n	800a360 <osThreadNew+0x80>
 800a308:	6861      	ldr	r1, [r4, #4]
 800a30a:	07c9      	lsls	r1, r1, #31
 800a30c:	d428      	bmi.n	800a360 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a30e:	6966      	ldr	r6, [r4, #20]
 800a310:	b16e      	cbz	r6, 800a32e <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a312:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a314:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a316:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a31a:	b157      	cbz	r7, 800a332 <osThreadNew+0x52>
 800a31c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a320:	d902      	bls.n	800a328 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a322:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a324:	b104      	cbz	r4, 800a328 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a326:	b9ee      	cbnz	r6, 800a364 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a328:	9805      	ldr	r0, [sp, #20]
}
 800a32a:	b007      	add	sp, #28
 800a32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a32e:	2280      	movs	r2, #128	; 0x80
 800a330:	e7f0      	b.n	800a314 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a332:	f1be 0f00 	cmp.w	lr, #0
 800a336:	d1f7      	bne.n	800a328 <osThreadNew+0x48>
      if (mem == 0) {
 800a338:	6924      	ldr	r4, [r4, #16]
 800a33a:	2c00      	cmp	r4, #0
 800a33c:	d1f4      	bne.n	800a328 <osThreadNew+0x48>
 800a33e:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a340:	a905      	add	r1, sp, #20
 800a342:	b292      	uxth	r2, r2
 800a344:	e9cd c100 	strd	ip, r1, [sp]
 800a348:	4621      	mov	r1, r4
 800a34a:	f001 faf7 	bl	800b93c <xTaskCreate>
 800a34e:	2801      	cmp	r0, #1
            hTask = NULL;
 800a350:	bf1c      	itt	ne
 800a352:	2300      	movne	r3, #0
 800a354:	9305      	strne	r3, [sp, #20]
 800a356:	e7e7      	b.n	800a328 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800a358:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a35c:	2280      	movs	r2, #128	; 0x80
 800a35e:	e7ef      	b.n	800a340 <osThreadNew+0x60>
        return (NULL);
 800a360:	4610      	mov	r0, r2
 800a362:	e7e2      	b.n	800a32a <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a364:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a368:	9500      	str	r5, [sp, #0]
 800a36a:	f001 faaf 	bl	800b8cc <xTaskCreateStatic>
 800a36e:	9005      	str	r0, [sp, #20]
 800a370:	e7da      	b.n	800a328 <osThreadNew+0x48>

0800a372 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a372:	b510      	push	{r4, lr}
 800a374:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a378:	b924      	cbnz	r4, 800a384 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800a37a:	b110      	cbz	r0, 800a382 <osDelay+0x10>
      vTaskDelay(ticks);
 800a37c:	f001 fc24 	bl	800bbc8 <vTaskDelay>
    stat = osOK;
 800a380:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800a382:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a384:	f06f 0005 	mvn.w	r0, #5
 800a388:	e7fb      	b.n	800a382 <osDelay+0x10>

0800a38a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a38a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a38c:	4604      	mov	r4, r0
 800a38e:	460e      	mov	r6, r1
 800a390:	4615      	mov	r5, r2
 800a392:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a396:	b11a      	cbz	r2, 800a3a0 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a398:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a39a:	4620      	mov	r0, r4
 800a39c:	b003      	add	sp, #12
 800a39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0f9      	beq.n	800a398 <osSemaphoreNew+0xe>
 800a3a4:	4288      	cmp	r0, r1
 800a3a6:	d3f7      	bcc.n	800a398 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800a3a8:	b1e5      	cbz	r5, 800a3e4 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a3aa:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800a3ae:	b1bb      	cbz	r3, 800a3e0 <osSemaphoreNew+0x56>
 800a3b0:	2f4f      	cmp	r7, #79	; 0x4f
 800a3b2:	d9f1      	bls.n	800a398 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a3b4:	2801      	cmp	r0, #1
 800a3b6:	d12a      	bne.n	800a40e <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a3b8:	2103      	movs	r1, #3
 800a3ba:	9100      	str	r1, [sp, #0]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	f000 fce7 	bl	800ad90 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800a3c2:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d0e7      	beq.n	800a398 <osSemaphoreNew+0xe>
 800a3c8:	b1de      	cbz	r6, 800a402 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f000 fd94 	bl	800aefc <xQueueGenericSend>
 800a3d4:	2801      	cmp	r0, #1
 800a3d6:	d014      	beq.n	800a402 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f001 f8d5 	bl	800b588 <vQueueDelete>
 800a3de:	e7db      	b.n	800a398 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3e0:	2f00      	cmp	r7, #0
 800a3e2:	d1d9      	bne.n	800a398 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a3e4:	2c01      	cmp	r4, #1
 800a3e6:	d105      	bne.n	800a3f4 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800a3e8:	2203      	movs	r2, #3
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fd1d 	bl	800ae2c <xQueueGenericCreate>
 800a3f2:	e7e6      	b.n	800a3c2 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	f000 fd61 	bl	800aebe <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0ca      	beq.n	800a398 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800a402:	b955      	cbnz	r5, 800a41a <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800a404:	4629      	mov	r1, r5
 800a406:	4620      	mov	r0, r4
 800a408:	f001 f894 	bl	800b534 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a40c:	e7c5      	b.n	800a39a <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a40e:	461a      	mov	r2, r3
 800a410:	f000 fd33 	bl	800ae7a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a414:	4604      	mov	r4, r0
 800a416:	2800      	cmp	r0, #0
 800a418:	d0be      	beq.n	800a398 <osSemaphoreNew+0xe>
          name = attr->name;
 800a41a:	682d      	ldr	r5, [r5, #0]
 800a41c:	e7f2      	b.n	800a404 <osSemaphoreNew+0x7a>
	...

0800a420 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a420:	b513      	push	{r0, r1, r4, lr}
 800a422:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a424:	b1f8      	cbz	r0, 800a466 <osSemaphoreAcquire+0x46>
 800a426:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a42a:	b1a3      	cbz	r3, 800a456 <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 800a42c:	b9d9      	cbnz	r1, 800a466 <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a42e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a430:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a432:	f001 f82f 	bl	800b494 <xQueueReceiveFromISR>
 800a436:	2801      	cmp	r0, #1
 800a438:	d112      	bne.n	800a460 <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	b913      	cbnz	r3, 800a444 <osSemaphoreAcquire+0x24>
  stat = osOK;
 800a43e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a440:	b002      	add	sp, #8
 800a442:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <osSemaphoreAcquire+0x54>)
 800a446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	e7f3      	b.n	800a43e <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a456:	f000 ff59 	bl	800b30c <xQueueSemaphoreTake>
 800a45a:	2801      	cmp	r0, #1
 800a45c:	d0ef      	beq.n	800a43e <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800a45e:	b92c      	cbnz	r4, 800a46c <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 800a460:	f06f 0002 	mvn.w	r0, #2
 800a464:	e7ec      	b.n	800a440 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a466:	f06f 0003 	mvn.w	r0, #3
 800a46a:	e7e9      	b.n	800a440 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800a46c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a470:	e7e6      	b.n	800a440 <osSemaphoreAcquire+0x20>
 800a472:	bf00      	nop
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a478:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a47a:	b300      	cbz	r0, 800a4be <osSemaphoreRelease+0x46>
 800a47c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a480:	b1a3      	cbz	r3, 800a4ac <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 800a482:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a484:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a486:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a488:	f000 fe4c 	bl	800b124 <xQueueGiveFromISR>
 800a48c:	2801      	cmp	r0, #1
 800a48e:	d113      	bne.n	800a4b8 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	b913      	cbnz	r3, 800a49a <osSemaphoreRelease+0x22>
  stat = osOK;
 800a494:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a496:	b002      	add	sp, #8
 800a498:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <osSemaphoreRelease+0x4c>)
 800a49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	e7f3      	b.n	800a494 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f000 fd24 	bl	800aefc <xQueueGenericSend>
 800a4b4:	2801      	cmp	r0, #1
 800a4b6:	d0ed      	beq.n	800a494 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800a4b8:	f06f 0002 	mvn.w	r0, #2
 800a4bc:	e7eb      	b.n	800a496 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a4be:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a4c2:	e7e8      	b.n	800a496 <osSemaphoreRelease+0x1e>
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460d      	mov	r5, r1
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4d4:	b11f      	cbz	r7, 800a4de <osMessageQueueNew+0x16>
  hQueue = NULL;
 800a4d6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a4d8:	4628      	mov	r0, r5
 800a4da:	b003      	add	sp, #12
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d0f9      	beq.n	800a4d6 <osMessageQueueNew+0xe>
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	d0f7      	beq.n	800a4d6 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800a4e6:	b1da      	cbz	r2, 800a520 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4e8:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800a4ec:	b183      	cbz	r3, 800a510 <osMessageQueueNew+0x48>
 800a4ee:	2a4f      	cmp	r2, #79	; 0x4f
 800a4f0:	d9f1      	bls.n	800a4d6 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4f2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4f4:	2a00      	cmp	r2, #0
 800a4f6:	d0ee      	beq.n	800a4d6 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4f8:	4345      	muls	r5, r0
 800a4fa:	6966      	ldr	r6, [r4, #20]
 800a4fc:	42ae      	cmp	r6, r5
 800a4fe:	d3ea      	bcc.n	800a4d6 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a500:	9700      	str	r7, [sp, #0]
 800a502:	f000 fc45 	bl	800ad90 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a506:	4605      	mov	r5, r0
 800a508:	2800      	cmp	r0, #0
 800a50a:	d0e4      	beq.n	800a4d6 <osMessageQueueNew+0xe>
        name = attr->name;
 800a50c:	6824      	ldr	r4, [r4, #0]
 800a50e:	e011      	b.n	800a534 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a510:	2a00      	cmp	r2, #0
 800a512:	d1e0      	bne.n	800a4d6 <osMessageQueueNew+0xe>
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1dd      	bne.n	800a4d6 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a51a:	6963      	ldr	r3, [r4, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1da      	bne.n	800a4d6 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800a520:	4629      	mov	r1, r5
 800a522:	2200      	movs	r2, #0
 800a524:	4630      	mov	r0, r6
 800a526:	f000 fc81 	bl	800ae2c <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a52a:	4605      	mov	r5, r0
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0d2      	beq.n	800a4d6 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800a530:	2c00      	cmp	r4, #0
 800a532:	d1eb      	bne.n	800a50c <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800a534:	4621      	mov	r1, r4
 800a536:	4628      	mov	r0, r5
 800a538:	f000 fffc 	bl	800b534 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800a53c:	e7cc      	b.n	800a4d8 <osMessageQueueNew+0x10>
	...

0800a540 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a542:	461c      	mov	r4, r3
 800a544:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a548:	b1b6      	cbz	r6, 800a578 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a54a:	b308      	cbz	r0, 800a590 <osMessageQueuePut+0x50>
 800a54c:	b301      	cbz	r1, 800a590 <osMessageQueuePut+0x50>
 800a54e:	b9fb      	cbnz	r3, 800a590 <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a550:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a552:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a554:	f000 fd84 	bl	800b060 <xQueueGenericSendFromISR>
 800a558:	2801      	cmp	r0, #1
 800a55a:	d116      	bne.n	800a58a <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	b913      	cbnz	r3, 800a566 <osMessageQueuePut+0x26>
  stat = osOK;
 800a560:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a562:	b002      	add	sp, #8
 800a564:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800a566:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <osMessageQueuePut+0x5c>)
 800a568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	e7f3      	b.n	800a560 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a578:	b150      	cbz	r0, 800a590 <osMessageQueuePut+0x50>
 800a57a:	b149      	cbz	r1, 800a590 <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a57c:	4633      	mov	r3, r6
 800a57e:	4622      	mov	r2, r4
 800a580:	f000 fcbc 	bl	800aefc <xQueueGenericSend>
 800a584:	2801      	cmp	r0, #1
 800a586:	d0eb      	beq.n	800a560 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800a588:	b92c      	cbnz	r4, 800a596 <osMessageQueuePut+0x56>
          stat = osErrorResource;
 800a58a:	f06f 0002 	mvn.w	r0, #2
 800a58e:	e7e8      	b.n	800a562 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800a590:	f06f 0003 	mvn.w	r0, #3
 800a594:	e7e5      	b.n	800a562 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800a596:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a59a:	e7e2      	b.n	800a562 <osMessageQueuePut+0x22>
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5a2:	461c      	mov	r4, r3
 800a5a4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a5a8:	b1b3      	cbz	r3, 800a5d8 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5aa:	b300      	cbz	r0, 800a5ee <osMessageQueueGet+0x4e>
 800a5ac:	b1f9      	cbz	r1, 800a5ee <osMessageQueueGet+0x4e>
 800a5ae:	b9f4      	cbnz	r4, 800a5ee <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a5b0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a5b2:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a5b4:	f000 ff6e 	bl	800b494 <xQueueReceiveFromISR>
 800a5b8:	2801      	cmp	r0, #1
 800a5ba:	d115      	bne.n	800a5e8 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a5bc:	9b01      	ldr	r3, [sp, #4]
 800a5be:	b913      	cbnz	r3, 800a5c6 <osMessageQueueGet+0x26>
  stat = osOK;
 800a5c0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a5c2:	b003      	add	sp, #12
 800a5c4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <osMessageQueueGet+0x5c>)
 800a5c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	e7f3      	b.n	800a5c0 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5d8:	b148      	cbz	r0, 800a5ee <osMessageQueueGet+0x4e>
 800a5da:	b141      	cbz	r1, 800a5ee <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5dc:	4622      	mov	r2, r4
 800a5de:	f000 fdf5 	bl	800b1cc <xQueueReceive>
 800a5e2:	2801      	cmp	r0, #1
 800a5e4:	d0ec      	beq.n	800a5c0 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800a5e6:	b92c      	cbnz	r4, 800a5f4 <osMessageQueueGet+0x54>
          stat = osErrorResource;
 800a5e8:	f06f 0002 	mvn.w	r0, #2
 800a5ec:	e7e9      	b.n	800a5c2 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800a5ee:	f06f 0003 	mvn.w	r0, #3
 800a5f2:	e7e6      	b.n	800a5c2 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800a5f4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a5f8:	e7e3      	b.n	800a5c2 <osMessageQueueGet+0x22>
 800a5fa:	bf00      	nop
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a600:	4b03      	ldr	r3, [pc, #12]	; (800a610 <vApplicationGetIdleTaskMemory+0x10>)
 800a602:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <vApplicationGetIdleTaskMemory+0x14>)
 800a606:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	6013      	str	r3, [r2, #0]
}
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	2400254c 	.word	0x2400254c
 800a614:	2400234c 	.word	0x2400234c

0800a618 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a618:	4b03      	ldr	r3, [pc, #12]	; (800a628 <vApplicationGetTimerTaskMemory+0x10>)
 800a61a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a61c:	4b03      	ldr	r3, [pc, #12]	; (800a62c <vApplicationGetTimerTaskMemory+0x14>)
 800a61e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a620:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a624:	6013      	str	r3, [r2, #0]
}
 800a626:	4770      	bx	lr
 800a628:	240029b0 	.word	0x240029b0
 800a62c:	240025b0 	.word	0x240025b0

0800a630 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a630:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <prvInsertBlockIntoFreeList+0x40>)
{
 800a632:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a634:	461a      	mov	r2, r3
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4283      	cmp	r3, r0
 800a63a:	d3fb      	bcc.n	800a634 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a63c:	6854      	ldr	r4, [r2, #4]
 800a63e:	1911      	adds	r1, r2, r4
 800a640:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a642:	bf01      	itttt	eq
 800a644:	6841      	ldreq	r1, [r0, #4]
 800a646:	4610      	moveq	r0, r2
 800a648:	1909      	addeq	r1, r1, r4
 800a64a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64c:	6844      	ldr	r4, [r0, #4]
 800a64e:	1901      	adds	r1, r0, r4
 800a650:	428b      	cmp	r3, r1
 800a652:	d107      	bne.n	800a664 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a654:	4907      	ldr	r1, [pc, #28]	; (800a674 <prvInsertBlockIntoFreeList+0x44>)
 800a656:	6809      	ldr	r1, [r1, #0]
 800a658:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a65a:	bf1f      	itttt	ne
 800a65c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a65e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a660:	1909      	addne	r1, r1, r4
 800a662:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a664:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a666:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a668:	bf18      	it	ne
 800a66a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	bf00      	nop
 800a670:	24006628 	.word	0x24006628
 800a674:	24002a10 	.word	0x24002a10

0800a678 <pvPortMalloc>:
{
 800a678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a67e:	f001 f98b 	bl	800b998 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a682:	4b3e      	ldr	r3, [pc, #248]	; (800a77c <pvPortMalloc+0x104>)
 800a684:	483e      	ldr	r0, [pc, #248]	; (800a780 <pvPortMalloc+0x108>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	469c      	mov	ip, r3
 800a68a:	b9d2      	cbnz	r2, 800a6c2 <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800a68c:	4a3d      	ldr	r2, [pc, #244]	; (800a784 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800a68e:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a690:	4b3d      	ldr	r3, [pc, #244]	; (800a788 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a692:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800a694:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a696:	bf1c      	itt	ne
 800a698:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a69a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a69e:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 800a6a0:	4b3a      	ldr	r3, [pc, #232]	; (800a78c <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6a2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a6a6:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6aa:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a6ac:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6b0:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b4:	4b36      	ldr	r3, [pc, #216]	; (800a790 <pvPortMalloc+0x118>)
 800a6b6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b8:	4b36      	ldr	r3, [pc, #216]	; (800a794 <pvPortMalloc+0x11c>)
 800a6ba:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6c0:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6c2:	6807      	ldr	r7, [r0, #0]
 800a6c4:	4227      	tst	r7, r4
 800a6c6:	d153      	bne.n	800a770 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d044      	beq.n	800a756 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800a6cc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6d0:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6d2:	bf1c      	itt	ne
 800a6d4:	f023 0307 	bicne.w	r3, r3, #7
 800a6d8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d048      	beq.n	800a770 <pvPortMalloc+0xf8>
 800a6de:	4a2d      	ldr	r2, [pc, #180]	; (800a794 <pvPortMalloc+0x11c>)
 800a6e0:	6816      	ldr	r6, [r2, #0]
 800a6e2:	4690      	mov	r8, r2
 800a6e4:	429e      	cmp	r6, r3
 800a6e6:	d343      	bcc.n	800a770 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 800a6e8:	4a27      	ldr	r2, [pc, #156]	; (800a788 <pvPortMalloc+0x110>)
 800a6ea:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ec:	6869      	ldr	r1, [r5, #4]
 800a6ee:	4299      	cmp	r1, r3
 800a6f0:	d201      	bcs.n	800a6f6 <pvPortMalloc+0x7e>
 800a6f2:	6828      	ldr	r0, [r5, #0]
 800a6f4:	b9a8      	cbnz	r0, 800a722 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 800a6f6:	f8dc 0000 	ldr.w	r0, [ip]
 800a6fa:	42a8      	cmp	r0, r5
 800a6fc:	d038      	beq.n	800a770 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6fe:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a700:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a702:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a704:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a706:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a708:	d912      	bls.n	800a730 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a70a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a70c:	0742      	lsls	r2, r0, #29
 800a70e:	d00b      	beq.n	800a728 <pvPortMalloc+0xb0>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	e7fe      	b.n	800a720 <pvPortMalloc+0xa8>
 800a722:	462a      	mov	r2, r5
 800a724:	4605      	mov	r5, r0
 800a726:	e7e1      	b.n	800a6ec <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a728:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a72a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a72c:	f7ff ff80 	bl	800a630 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a730:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a732:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a734:	4916      	ldr	r1, [pc, #88]	; (800a790 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a736:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a738:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800a73a:	4a17      	ldr	r2, [pc, #92]	; (800a798 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800a73c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a73e:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a740:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800a742:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a744:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a746:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 800a74a:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a74e:	bf38      	it	cc
 800a750:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a752:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800a754:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800a756:	f001 f9c3 	bl	800bae0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a75a:	0763      	lsls	r3, r4, #29
 800a75c:	d00a      	beq.n	800a774 <pvPortMalloc+0xfc>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	e7fe      	b.n	800a76e <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 800a770:	2400      	movs	r4, #0
 800a772:	e7f0      	b.n	800a756 <pvPortMalloc+0xde>
}
 800a774:	4620      	mov	r0, r4
 800a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77a:	bf00      	nop
 800a77c:	24002a10 	.word	0x24002a10
 800a780:	24006614 	.word	0x24006614
 800a784:	24002a14 	.word	0x24002a14
 800a788:	24006628 	.word	0x24006628
 800a78c:	2400660c 	.word	0x2400660c
 800a790:	2400661c 	.word	0x2400661c
 800a794:	24006618 	.word	0x24006618
 800a798:	24006620 	.word	0x24006620

0800a79c <vPortFree>:
{
 800a79c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b390      	cbz	r0, 800a808 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7a2:	4a1a      	ldr	r2, [pc, #104]	; (800a80c <vPortFree+0x70>)
 800a7a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	4213      	tst	r3, r2
 800a7ac:	d108      	bne.n	800a7c0 <vPortFree+0x24>
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	e7fe      	b.n	800a7be <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7c0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a7c4:	b141      	cbz	r1, 800a7d8 <vPortFree+0x3c>
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	e7fe      	b.n	800a7d6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7d8:	ea23 0302 	bic.w	r3, r3, r2
 800a7dc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a7e0:	f001 f8da 	bl	800b998 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7e4:	4a0a      	ldr	r2, [pc, #40]	; (800a810 <vPortFree+0x74>)
 800a7e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ea:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7ee:	6811      	ldr	r1, [r2, #0]
 800a7f0:	440b      	add	r3, r1
 800a7f2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7f4:	f7ff ff1c 	bl	800a630 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7f8:	4a06      	ldr	r2, [pc, #24]	; (800a814 <vPortFree+0x78>)
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	3301      	adds	r3, #1
}
 800a7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800a802:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a804:	f001 b96c 	b.w	800bae0 <xTaskResumeAll>
}
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	24006614 	.word	0x24006614
 800a810:	24006618 	.word	0x24006618
 800a814:	24006624 	.word	0x24006624

0800a818 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a818:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a81c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a820:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a822:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a824:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a828:	2300      	movs	r3, #0
 800a82a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a82c:	4770      	bx	lr

0800a82e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a832:	4770      	bx	lr

0800a834 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a834:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a836:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800a838:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a83a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a840:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a842:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a844:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a846:	3301      	adds	r3, #1
 800a848:	6003      	str	r3, [r0, #0]
}
 800a84a:	4770      	bx	lr

0800a84c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a84c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a84e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a850:	1c63      	adds	r3, r4, #1
 800a852:	d10a      	bne.n	800a86a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a854:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a85a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a85c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a85e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a860:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a862:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a864:	3301      	adds	r3, #1
 800a866:	6003      	str	r3, [r0, #0]
}
 800a868:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a86a:	f100 0208 	add.w	r2, r0, #8
 800a86e:	4613      	mov	r3, r2
 800a870:	6852      	ldr	r2, [r2, #4]
 800a872:	6815      	ldr	r5, [r2, #0]
 800a874:	42a5      	cmp	r5, r4
 800a876:	d9fa      	bls.n	800a86e <vListInsert+0x22>
 800a878:	e7ed      	b.n	800a856 <vListInsert+0xa>

0800a87a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a87a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a87c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800a880:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a882:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a884:	6859      	ldr	r1, [r3, #4]
 800a886:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a888:	bf08      	it	eq
 800a88a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a88c:	2200      	movs	r2, #0
 800a88e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	3a01      	subs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a896:	6818      	ldr	r0, [r3, #0]
}
 800a898:	4770      	bx	lr
	...

0800a89c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a89c:	4808      	ldr	r0, [pc, #32]	; (800a8c0 <prvPortStartFirstTask+0x24>)
 800a89e:	6800      	ldr	r0, [r0, #0]
 800a8a0:	6800      	ldr	r0, [r0, #0]
 800a8a2:	f380 8808 	msr	MSP, r0
 800a8a6:	f04f 0000 	mov.w	r0, #0
 800a8aa:	f380 8814 	msr	CONTROL, r0
 800a8ae:	b662      	cpsie	i
 800a8b0:	b661      	cpsie	f
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	df00      	svc	0
 800a8bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8be:	0000      	.short	0x0000
 800a8c0:	e000ed08 	.word	0xe000ed08

0800a8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8d4 <vPortEnableVFP+0x10>
 800a8c8:	6801      	ldr	r1, [r0, #0]
 800a8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8ce:	6001      	str	r1, [r0, #0]
 800a8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8d2:	0000      	.short	0x0000
 800a8d4:	e000ed88 	.word	0xe000ed88

0800a8d8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a8d8:	2300      	movs	r3, #0
{
 800a8da:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a8dc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <prvTaskExitError+0x3c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	d008      	beq.n	800a8f8 <prvTaskExitError+0x20>
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	e7fe      	b.n	800a8f6 <prvTaskExitError+0x1e>
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0fc      	beq.n	800a908 <prvTaskExitError+0x30>
}
 800a90e:	b002      	add	sp, #8
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	24000084 	.word	0x24000084

0800a918 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a91c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a920:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a924:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a926:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a928:	4b03      	ldr	r3, [pc, #12]	; (800a938 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a92a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a92c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a92e:	f06f 0302 	mvn.w	r3, #2
 800a932:	6203      	str	r3, [r0, #32]
}
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	0800a8d9 	.word	0x0800a8d9
 800a93c:	00000000 	.word	0x00000000

0800a940 <SVC_Handler>:
	__asm volatile (
 800a940:	4b07      	ldr	r3, [pc, #28]	; (800a960 <pxCurrentTCBConst2>)
 800a942:	6819      	ldr	r1, [r3, #0]
 800a944:	6808      	ldr	r0, [r1, #0]
 800a946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94a:	f380 8809 	msr	PSP, r0
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8811 	msr	BASEPRI, r0
 800a95a:	4770      	bx	lr
 800a95c:	f3af 8000 	nop.w

0800a960 <pxCurrentTCBConst2>:
 800a960:	24006638 	.word	0x24006638

0800a964 <vPortEnterCritical>:
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <vPortEnterCritical+0x3c>)
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a97a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a97c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a97e:	d10d      	bne.n	800a99c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a980:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <vPortEnterCritical+0x40>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a988:	d008      	beq.n	800a99c <vPortEnterCritical+0x38>
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	e7fe      	b.n	800a99a <vPortEnterCritical+0x36>
}
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	24000084 	.word	0x24000084
 800a9a4:	e000ed04 	.word	0xe000ed04

0800a9a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a9a8:	4a08      	ldr	r2, [pc, #32]	; (800a9cc <vPortExitCritical+0x24>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b943      	cbnz	r3, 800a9c0 <vPortExitCritical+0x18>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	e7fe      	b.n	800a9be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9c4:	b90b      	cbnz	r3, 800a9ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9c6:	f383 8811 	msr	BASEPRI, r3
}
 800a9ca:	4770      	bx	lr
 800a9cc:	24000084 	.word	0x24000084

0800a9d0 <PendSV_Handler>:
	__asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f001 f96c 	bl	800bcdc <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	24006638 	.word	0x24006638

0800aa34 <xPortSysTickHandler>:
{
 800aa34:	b508      	push	{r3, lr}
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800aa46:	f000 ffb5 	bl	800b9b4 <xTaskIncrementTick>
 800aa4a:	b118      	cbz	r0, 800aa54 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa4c:	4b03      	ldr	r3, [pc, #12]	; (800aa5c <xPortSysTickHandler+0x28>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aa54:	2300      	movs	r3, #0
 800aa56:	f383 8811 	msr	BASEPRI, r3
}
 800aa5a:	bd08      	pop	{r3, pc}
 800aa5c:	e000ed04 	.word	0xe000ed04

0800aa60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa60:	2300      	movs	r3, #0
 800aa62:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa64:	4908      	ldr	r1, [pc, #32]	; (800aa88 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa68:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aa6e:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <vPortSetupTimerInterrupt+0x2c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa76:	4906      	ldr	r1, [pc, #24]	; (800aa90 <vPortSetupTimerInterrupt+0x30>)
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa7c:	2307      	movs	r3, #7
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	e000e010 	.word	0xe000e010
 800aa88:	e000e018 	.word	0xe000e018
 800aa8c:	24000074 	.word	0x24000074
 800aa90:	e000e014 	.word	0xe000e014

0800aa94 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa94:	4b37      	ldr	r3, [pc, #220]	; (800ab74 <xPortStartScheduler+0xe0>)
 800aa96:	4a38      	ldr	r2, [pc, #224]	; (800ab78 <xPortStartScheduler+0xe4>)
{
 800aa98:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa9a:	6819      	ldr	r1, [r3, #0]
 800aa9c:	4291      	cmp	r1, r2
 800aa9e:	d108      	bne.n	800aab2 <xPortStartScheduler+0x1e>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	e7fe      	b.n	800aab0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	4b31      	ldr	r3, [pc, #196]	; (800ab7c <xPortStartScheduler+0xe8>)
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d108      	bne.n	800aacc <xPortStartScheduler+0x38>
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	e7fe      	b.n	800aaca <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aacc:	4b2c      	ldr	r3, [pc, #176]	; (800ab80 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aace:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aad6:	22ff      	movs	r2, #255	; 0xff
 800aad8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aada:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aadc:	4a29      	ldr	r2, [pc, #164]	; (800ab84 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aae4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aae8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaec:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaee:	2307      	movs	r3, #7
 800aaf0:	4a25      	ldr	r2, [pc, #148]	; (800ab88 <xPortStartScheduler+0xf4>)
 800aaf2:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaf4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800aaf8:	1e5c      	subs	r4, r3, #1
 800aafa:	0600      	lsls	r0, r0, #24
 800aafc:	d40c      	bmi.n	800ab18 <xPortStartScheduler+0x84>
 800aafe:	b111      	cbz	r1, 800ab06 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	d011      	beq.n	800ab2a <xPortStartScheduler+0x96>
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	e7fe      	b.n	800ab16 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f88d 3003 	strb.w	r3, [sp, #3]
 800ab26:	4623      	mov	r3, r4
 800ab28:	e7e4      	b.n	800aaf4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab2a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800ab2e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab30:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab32:	9b01      	ldr	r3, [sp, #4]
 800ab34:	4a12      	ldr	r2, [pc, #72]	; (800ab80 <xPortStartScheduler+0xec>)
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab3a:	4b14      	ldr	r3, [pc, #80]	; (800ab8c <xPortStartScheduler+0xf8>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ab42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800ab4a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800ab4c:	f7ff ff88 	bl	800aa60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <xPortStartScheduler+0xfc>)
 800ab52:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800ab54:	f7ff feb6 	bl	800a8c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab58:	4a0e      	ldr	r2, [pc, #56]	; (800ab94 <xPortStartScheduler+0x100>)
 800ab5a:	6813      	ldr	r3, [r2, #0]
 800ab5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab60:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ab62:	f7ff fe9b 	bl	800a89c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ab66:	f001 f8b9 	bl	800bcdc <vTaskSwitchContext>
	prvTaskExitError();
 800ab6a:	f7ff feb5 	bl	800a8d8 <prvTaskExitError>
}
 800ab6e:	4620      	mov	r0, r4
 800ab70:	b002      	add	sp, #8
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	e000ed00 	.word	0xe000ed00
 800ab78:	410fc271 	.word	0x410fc271
 800ab7c:	410fc270 	.word	0x410fc270
 800ab80:	e000e400 	.word	0xe000e400
 800ab84:	24006630 	.word	0x24006630
 800ab88:	24006634 	.word	0x24006634
 800ab8c:	e000ed20 	.word	0xe000ed20
 800ab90:	24000084 	.word	0x24000084
 800ab94:	e000ef34 	.word	0xe000ef34

0800ab98 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab98:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab9c:	2b0f      	cmp	r3, #15
 800ab9e:	d90e      	bls.n	800abbe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aba0:	4a10      	ldr	r2, [pc, #64]	; (800abe4 <vPortValidateInterruptPriority+0x4c>)
 800aba2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aba4:	4a10      	ldr	r2, [pc, #64]	; (800abe8 <vPortValidateInterruptPriority+0x50>)
 800aba6:	7812      	ldrb	r2, [r2, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d908      	bls.n	800abbe <vPortValidateInterruptPriority+0x26>
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	e7fe      	b.n	800abbc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abbe:	4b0b      	ldr	r3, [pc, #44]	; (800abec <vPortValidateInterruptPriority+0x54>)
 800abc0:	4a0b      	ldr	r2, [pc, #44]	; (800abf0 <vPortValidateInterruptPriority+0x58>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6812      	ldr	r2, [r2, #0]
 800abc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abca:	4293      	cmp	r3, r2
 800abcc:	d908      	bls.n	800abe0 <vPortValidateInterruptPriority+0x48>
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	e7fe      	b.n	800abde <vPortValidateInterruptPriority+0x46>
	}
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	e000e3f0 	.word	0xe000e3f0
 800abe8:	24006630 	.word	0x24006630
 800abec:	e000ed0c 	.word	0xe000ed0c
 800abf0:	24006634 	.word	0x24006634

0800abf4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abf4:	b510      	push	{r4, lr}
 800abf6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abf8:	f7ff feb4 	bl	800a964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abfc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800abfe:	f7ff fed3 	bl	800a9a8 <vPortExitCritical>

	return xReturn;
}
 800ac02:	fab4 f084 	clz	r0, r4
 800ac06:	0940      	lsrs	r0, r0, #5
 800ac08:	bd10      	pop	{r4, pc}

0800ac0a <prvCopyDataToQueue>:
{
 800ac0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800ac10:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac12:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac14:	b952      	cbnz	r2, 800ac2c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac16:	6807      	ldr	r7, [r0, #0]
 800ac18:	bb47      	cbnz	r7, 800ac6c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac1a:	6880      	ldr	r0, [r0, #8]
 800ac1c:	f001 f9c0 	bl	800bfa0 <xTaskPriorityDisinherit>
 800ac20:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac22:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac24:	3601      	adds	r6, #1
}
 800ac26:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac28:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ac2c:	b965      	cbnz	r5, 800ac48 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac2e:	6840      	ldr	r0, [r0, #4]
 800ac30:	f011 fbd2 	bl	801c3d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac38:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac3a:	68a2      	ldr	r2, [r4, #8]
 800ac3c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac3e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac40:	d3f0      	bcc.n	800ac24 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	6063      	str	r3, [r4, #4]
 800ac46:	e7ed      	b.n	800ac24 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac48:	68c0      	ldr	r0, [r0, #12]
 800ac4a:	f011 fbc5 	bl	801c3d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac50:	68e3      	ldr	r3, [r4, #12]
 800ac52:	4251      	negs	r1, r2
 800ac54:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac5a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac5c:	bf3e      	ittt	cc
 800ac5e:	68a3      	ldrcc	r3, [r4, #8]
 800ac60:	185b      	addcc	r3, r3, r1
 800ac62:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ac64:	2d02      	cmp	r5, #2
 800ac66:	d101      	bne.n	800ac6c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac68:	b116      	cbz	r6, 800ac70 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800ac6a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ac6c:	2500      	movs	r5, #0
 800ac6e:	e7d9      	b.n	800ac24 <prvCopyDataToQueue+0x1a>
 800ac70:	4635      	mov	r5, r6
 800ac72:	e7d7      	b.n	800ac24 <prvCopyDataToQueue+0x1a>

0800ac74 <prvCopyDataFromQueue>:
{
 800ac74:	4603      	mov	r3, r0
 800ac76:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800ac7a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac7c:	b162      	cbz	r2, 800ac98 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac7e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac80:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac82:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac84:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac86:	60dc      	str	r4, [r3, #12]
}
 800ac88:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac8c:	bf24      	itt	cs
 800ac8e:	6819      	ldrcs	r1, [r3, #0]
 800ac90:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac92:	68d9      	ldr	r1, [r3, #12]
 800ac94:	f011 bba0 	b.w	801c3d8 <memcpy>
}
 800ac98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <prvUnlockQueue>:
{
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800aca2:	f7ff fe5f 	bl	800a964 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800aca6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acaa:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800acae:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acb0:	2d00      	cmp	r5, #0
 800acb2:	dc14      	bgt.n	800acde <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800acb4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800acba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800acbe:	f7ff fe73 	bl	800a9a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800acc2:	f7ff fe4f 	bl	800a964 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800acc6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800acca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800accc:	2d00      	cmp	r5, #0
 800acce:	dc12      	bgt.n	800acf6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800acd0:	23ff      	movs	r3, #255	; 0xff
 800acd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800acd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800acda:	f7ff be65 	b.w	800a9a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0e7      	beq.n	800acb4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ace4:	4630      	mov	r0, r6
 800ace6:	f001 f877 	bl	800bdd8 <xTaskRemoveFromEventList>
 800acea:	b108      	cbz	r0, 800acf0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800acec:	f001 f900 	bl	800bef0 <vTaskMissedYield>
			--cTxLock;
 800acf0:	3d01      	subs	r5, #1
 800acf2:	b26d      	sxtb	r5, r5
 800acf4:	e7dc      	b.n	800acb0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0e9      	beq.n	800acd0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acfc:	4630      	mov	r0, r6
 800acfe:	f001 f86b 	bl	800bdd8 <xTaskRemoveFromEventList>
 800ad02:	b108      	cbz	r0, 800ad08 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ad04:	f001 f8f4 	bl	800bef0 <vTaskMissedYield>
				--cRxLock;
 800ad08:	3d01      	subs	r5, #1
 800ad0a:	b26d      	sxtb	r5, r5
 800ad0c:	e7de      	b.n	800accc <prvUnlockQueue+0x2e>
	...

0800ad10 <xQueueGenericReset>:
{
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ad14:	4604      	mov	r4, r0
 800ad16:	b940      	cbnz	r0, 800ad2a <xQueueGenericReset+0x1a>
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	e7fe      	b.n	800ad28 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ad2a:	f7ff fe1b 	bl	800a964 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad2e:	6822      	ldr	r2, [r4, #0]
 800ad30:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad34:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad36:	434b      	muls	r3, r1
 800ad38:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad3e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad40:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad42:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad44:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ad48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ad50:	b995      	cbnz	r5, 800ad78 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	b163      	cbz	r3, 800ad70 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad56:	f104 0010 	add.w	r0, r4, #16
 800ad5a:	f001 f83d 	bl	800bdd8 <xTaskRemoveFromEventList>
 800ad5e:	b138      	cbz	r0, 800ad70 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <xQueueGenericReset+0x7c>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ad70:	f7ff fe1a 	bl	800a9a8 <vPortExitCritical>
}
 800ad74:	2001      	movs	r0, #1
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad78:	f104 0010 	add.w	r0, r4, #16
 800ad7c:	f7ff fd4c 	bl	800a818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ad84:	f7ff fd48 	bl	800a818 <vListInitialise>
 800ad88:	e7f2      	b.n	800ad70 <xQueueGenericReset+0x60>
 800ad8a:	bf00      	nop
 800ad8c:	e000ed04 	.word	0xe000ed04

0800ad90 <xQueueGenericCreateStatic>:
	{
 800ad90:	b513      	push	{r0, r1, r4, lr}
 800ad92:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad94:	b940      	cbnz	r0, 800ada8 <xQueueGenericCreateStatic+0x18>
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	e7fe      	b.n	800ada6 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800ada8:	b943      	cbnz	r3, 800adbc <xQueueGenericCreateStatic+0x2c>
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	e7fe      	b.n	800adba <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adbc:	b14a      	cbz	r2, 800add2 <xQueueGenericCreateStatic+0x42>
 800adbe:	b991      	cbnz	r1, 800ade6 <xQueueGenericCreateStatic+0x56>
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	e7fe      	b.n	800add0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800add2:	b141      	cbz	r1, 800ade6 <xQueueGenericCreateStatic+0x56>
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	e7fe      	b.n	800ade4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ade6:	2350      	movs	r3, #80	; 0x50
 800ade8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	2b50      	cmp	r3, #80	; 0x50
 800adee:	d008      	beq.n	800ae02 <xQueueGenericCreateStatic+0x72>
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	e7fe      	b.n	800ae00 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae02:	2900      	cmp	r1, #0
 800ae04:	bf08      	it	eq
 800ae06:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae08:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	6022      	str	r2, [r4, #0]
 800ae0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800ae12:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae16:	4619      	mov	r1, r3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff ff79 	bl	800ad10 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ae1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800ae22:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ae24:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800ae28:	b002      	add	sp, #8
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <xQueueGenericCreate>:
	{
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	460d      	mov	r5, r1
 800ae30:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae32:	4606      	mov	r6, r0
 800ae34:	b940      	cbnz	r0, 800ae48 <xQueueGenericCreate+0x1c>
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	e7fe      	b.n	800ae46 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae48:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae4a:	3050      	adds	r0, #80	; 0x50
 800ae4c:	f7ff fc14 	bl	800a678 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ae50:	4604      	mov	r4, r0
 800ae52:	b170      	cbz	r0, 800ae72 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae5a:	b165      	cbz	r5, 800ae76 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae5c:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae60:	2101      	movs	r1, #1
 800ae62:	4620      	mov	r0, r4
 800ae64:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ae66:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae6a:	f7ff ff51 	bl	800ad10 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ae6e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800ae72:	4620      	mov	r0, r4
 800ae74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae76:	4603      	mov	r3, r0
 800ae78:	e7f2      	b.n	800ae60 <xQueueGenericCreate+0x34>

0800ae7a <xQueueCreateCountingSemaphoreStatic>:
	{
 800ae7a:	b513      	push	{r0, r1, r4, lr}
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ae80:	b940      	cbnz	r0, 800ae94 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	e7fe      	b.n	800ae92 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae94:	4288      	cmp	r0, r1
 800ae96:	d208      	bcs.n	800aeaa <xQueueCreateCountingSemaphoreStatic+0x30>
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	e7fe      	b.n	800aea8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aeaa:	2202      	movs	r2, #2
 800aeac:	9200      	str	r2, [sp, #0]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	f7ff ff6d 	bl	800ad90 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800aeb6:	b100      	cbz	r0, 800aeba <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aeb8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800aeba:	b002      	add	sp, #8
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <xQueueCreateCountingSemaphore>:
	{
 800aebe:	b510      	push	{r4, lr}
 800aec0:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800aec2:	b940      	cbnz	r0, 800aed6 <xQueueCreateCountingSemaphore+0x18>
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	e7fe      	b.n	800aed4 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aed6:	4288      	cmp	r0, r1
 800aed8:	d208      	bcs.n	800aeec <xQueueCreateCountingSemaphore+0x2e>
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	e7fe      	b.n	800aeea <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aeec:	2202      	movs	r2, #2
 800aeee:	2100      	movs	r1, #0
 800aef0:	f7ff ff9c 	bl	800ae2c <xQueueGenericCreate>
		if( xHandle != NULL )
 800aef4:	b100      	cbz	r0, 800aef8 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aef6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800aef8:	bd10      	pop	{r4, pc}
	...

0800aefc <xQueueGenericSend>:
{
 800aefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	4688      	mov	r8, r1
 800af02:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800af04:	4604      	mov	r4, r0
{
 800af06:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800af08:	b940      	cbnz	r0, 800af1c <xQueueGenericSend+0x20>
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	e7fe      	b.n	800af1a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af1c:	b951      	cbnz	r1, 800af34 <xQueueGenericSend+0x38>
 800af1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af20:	b143      	cbz	r3, 800af34 <xQueueGenericSend+0x38>
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	e7fe      	b.n	800af32 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af34:	2f02      	cmp	r7, #2
 800af36:	d10b      	bne.n	800af50 <xQueueGenericSend+0x54>
 800af38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d008      	beq.n	800af50 <xQueueGenericSend+0x54>
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	e7fe      	b.n	800af4e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af50:	f000 ffd4 	bl	800befc <xTaskGetSchedulerState>
 800af54:	4606      	mov	r6, r0
 800af56:	b950      	cbnz	r0, 800af6e <xQueueGenericSend+0x72>
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	b14b      	cbz	r3, 800af70 <xQueueGenericSend+0x74>
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	e7fe      	b.n	800af6c <xQueueGenericSend+0x70>
 800af6e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800af70:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800af74:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b05c <xQueueGenericSend+0x160>
 800af78:	e037      	b.n	800afea <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800af7a:	9d01      	ldr	r5, [sp, #4]
 800af7c:	b91d      	cbnz	r5, 800af86 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800af7e:	f7ff fd13 	bl	800a9a8 <vPortExitCritical>
			return errQUEUE_FULL;
 800af82:	2000      	movs	r0, #0
 800af84:	e050      	b.n	800b028 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800af86:	b916      	cbnz	r6, 800af8e <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af88:	a802      	add	r0, sp, #8
 800af8a:	f000 ff69 	bl	800be60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800af8e:	f7ff fd0b 	bl	800a9a8 <vPortExitCritical>
		vTaskSuspendAll();
 800af92:	f000 fd01 	bl	800b998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af96:	f7ff fce5 	bl	800a964 <vPortEnterCritical>
 800af9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800af9e:	2bff      	cmp	r3, #255	; 0xff
 800afa0:	d101      	bne.n	800afa6 <xQueueGenericSend+0xaa>
 800afa2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800afa6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800afaa:	2bff      	cmp	r3, #255	; 0xff
 800afac:	d101      	bne.n	800afb2 <xQueueGenericSend+0xb6>
 800afae:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800afb2:	f7ff fcf9 	bl	800a9a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afb6:	a901      	add	r1, sp, #4
 800afb8:	a802      	add	r0, sp, #8
 800afba:	f000 ff5d 	bl	800be78 <xTaskCheckForTimeOut>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d146      	bne.n	800b050 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afc2:	f7ff fccf 	bl	800a964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800afc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afca:	429a      	cmp	r2, r3
 800afcc:	d12f      	bne.n	800b02e <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800afce:	f7ff fceb 	bl	800a9a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afd2:	9901      	ldr	r1, [sp, #4]
 800afd4:	f104 0010 	add.w	r0, r4, #16
 800afd8:	f000 fec6 	bl	800bd68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afdc:	4620      	mov	r0, r4
 800afde:	f7ff fe5e 	bl	800ac9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afe2:	f000 fd7d 	bl	800bae0 <xTaskResumeAll>
 800afe6:	b350      	cbz	r0, 800b03e <xQueueGenericSend+0x142>
 800afe8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800afea:	f7ff fcbb 	bl	800a964 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d301      	bcc.n	800affa <xQueueGenericSend+0xfe>
 800aff6:	2f02      	cmp	r7, #2
 800aff8:	d1bf      	bne.n	800af7a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800affa:	463a      	mov	r2, r7
 800affc:	4641      	mov	r1, r8
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff fe03 	bl	800ac0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b006:	b11b      	cbz	r3, 800b010 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b008:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b00c:	f000 fee4 	bl	800bdd8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800b010:	b138      	cbz	r0, 800b022 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800b012:	4b12      	ldr	r3, [pc, #72]	; (800b05c <xQueueGenericSend+0x160>)
 800b014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b022:	f7ff fcc1 	bl	800a9a8 <vPortExitCritical>
				return pdPASS;
 800b026:	2001      	movs	r0, #1
}
 800b028:	b004      	add	sp, #16
 800b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800b02e:	f7ff fcbb 	bl	800a9a8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b032:	4620      	mov	r0, r4
 800b034:	f7ff fe33 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b038:	f000 fd52 	bl	800bae0 <xTaskResumeAll>
 800b03c:	e7d4      	b.n	800afe8 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800b03e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b042:	f8ca 3000 	str.w	r3, [sl]
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	e7cb      	b.n	800afe8 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 800b050:	4620      	mov	r0, r4
 800b052:	f7ff fe24 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b056:	f000 fd43 	bl	800bae0 <xTaskResumeAll>
 800b05a:	e792      	b.n	800af82 <xQueueGenericSend+0x86>
 800b05c:	e000ed04 	.word	0xe000ed04

0800b060 <xQueueGenericSendFromISR>:
{
 800b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b064:	4689      	mov	r9, r1
 800b066:	4690      	mov	r8, r2
 800b068:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b06a:	4604      	mov	r4, r0
 800b06c:	b940      	cbnz	r0, 800b080 <xQueueGenericSendFromISR+0x20>
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	e7fe      	b.n	800b07e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b080:	b951      	cbnz	r1, 800b098 <xQueueGenericSendFromISR+0x38>
 800b082:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b084:	b143      	cbz	r3, 800b098 <xQueueGenericSendFromISR+0x38>
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	e7fe      	b.n	800b096 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b098:	2f02      	cmp	r7, #2
 800b09a:	d10b      	bne.n	800b0b4 <xQueueGenericSendFromISR+0x54>
 800b09c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d008      	beq.n	800b0b4 <xQueueGenericSendFromISR+0x54>
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	e7fe      	b.n	800b0b2 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0b4:	f7ff fd70 	bl	800ab98 <vPortValidateInterruptPriority>
	__asm volatile
 800b0b8:	f3ef 8611 	mrs	r6, BASEPRI
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b0ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d301      	bcc.n	800b0d8 <xQueueGenericSendFromISR+0x78>
 800b0d4:	2f02      	cmp	r7, #2
 800b0d6:	d123      	bne.n	800b120 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0dc:	463a      	mov	r2, r7
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0e2:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0e6:	f7ff fd90 	bl	800ac0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b0ea:	1c6b      	adds	r3, r5, #1
 800b0ec:	d113      	bne.n	800b116 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f0:	b90b      	cbnz	r3, 800b0f6 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e00b      	b.n	800b10e <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b0fa:	f000 fe6d 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d0f7      	beq.n	800b0f2 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800b102:	f1b8 0f00 	cmp.w	r8, #0
 800b106:	d0f4      	beq.n	800b0f2 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b108:	2001      	movs	r0, #1
 800b10a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b10e:	f386 8811 	msr	BASEPRI, r6
}
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b116:	3501      	adds	r5, #1
 800b118:	b26d      	sxtb	r5, r5
 800b11a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b11e:	e7e8      	b.n	800b0f2 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800b120:	2000      	movs	r0, #0
 800b122:	e7f4      	b.n	800b10e <xQueueGenericSendFromISR+0xae>

0800b124 <xQueueGiveFromISR>:
{
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b128:	4604      	mov	r4, r0
 800b12a:	b940      	cbnz	r0, 800b13e <xQueueGiveFromISR+0x1a>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	e7fe      	b.n	800b13c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b13e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b140:	b143      	cbz	r3, 800b154 <xQueueGiveFromISR+0x30>
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	e7fe      	b.n	800b152 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b154:	6803      	ldr	r3, [r0, #0]
 800b156:	b953      	cbnz	r3, 800b16e <xQueueGiveFromISR+0x4a>
 800b158:	6883      	ldr	r3, [r0, #8]
 800b15a:	b143      	cbz	r3, 800b16e <xQueueGiveFromISR+0x4a>
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	e7fe      	b.n	800b16c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b16e:	f7ff fd13 	bl	800ab98 <vPortValidateInterruptPriority>
	__asm volatile
 800b172:	f3ef 8611 	mrs	r6, BASEPRI
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d91c      	bls.n	800b1c8 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b18e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b192:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b194:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b196:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b198:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b19a:	d110      	bne.n	800b1be <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b19e:	b90b      	cbnz	r3, 800b1a4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	e009      	b.n	800b1b8 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b1a8:	f000 fe16 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0f7      	beq.n	800b1a0 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	d0f5      	beq.n	800b1a0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1b4:	2001      	movs	r0, #1
 800b1b6:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b1b8:	f386 8811 	msr	BASEPRI, r6
}
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1be:	3301      	adds	r3, #1
 800b1c0:	b25b      	sxtb	r3, r3
 800b1c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1c6:	e7eb      	b.n	800b1a0 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	e7f5      	b.n	800b1b8 <xQueueGiveFromISR+0x94>

0800b1cc <xQueueReceive>:
{
 800b1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b1d4:	4604      	mov	r4, r0
{
 800b1d6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b1d8:	b940      	cbnz	r0, 800b1ec <xQueueReceive+0x20>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	e7fe      	b.n	800b1ea <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ec:	b951      	cbnz	r1, 800b204 <xQueueReceive+0x38>
 800b1ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b1f0:	b143      	cbz	r3, 800b204 <xQueueReceive+0x38>
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	e7fe      	b.n	800b202 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b204:	f000 fe7a 	bl	800befc <xTaskGetSchedulerState>
 800b208:	4606      	mov	r6, r0
 800b20a:	b950      	cbnz	r0, 800b222 <xQueueReceive+0x56>
 800b20c:	9b01      	ldr	r3, [sp, #4]
 800b20e:	b14b      	cbz	r3, 800b224 <xQueueReceive+0x58>
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	e7fe      	b.n	800b220 <xQueueReceive+0x54>
 800b222:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b224:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800b228:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800b308 <xQueueReceive+0x13c>
 800b22c:	e03b      	b.n	800b2a6 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b22e:	9d01      	ldr	r5, [sp, #4]
 800b230:	b91d      	cbnz	r5, 800b23a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800b232:	f7ff fbb9 	bl	800a9a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b236:	2000      	movs	r0, #0
 800b238:	e052      	b.n	800b2e0 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800b23a:	b916      	cbnz	r6, 800b242 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b23c:	a802      	add	r0, sp, #8
 800b23e:	f000 fe0f 	bl	800be60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b242:	f7ff fbb1 	bl	800a9a8 <vPortExitCritical>
		vTaskSuspendAll();
 800b246:	f000 fba7 	bl	800b998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b24a:	f7ff fb8b 	bl	800a964 <vPortEnterCritical>
 800b24e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b252:	2bff      	cmp	r3, #255	; 0xff
 800b254:	d101      	bne.n	800b25a <xQueueReceive+0x8e>
 800b256:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b25a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b25e:	2bff      	cmp	r3, #255	; 0xff
 800b260:	d101      	bne.n	800b266 <xQueueReceive+0x9a>
 800b262:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b266:	f7ff fb9f 	bl	800a9a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b26a:	a901      	add	r1, sp, #4
 800b26c:	a802      	add	r0, sp, #8
 800b26e:	f000 fe03 	bl	800be78 <xTaskCheckForTimeOut>
 800b272:	2800      	cmp	r0, #0
 800b274:	d13d      	bne.n	800b2f2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b276:	4620      	mov	r0, r4
 800b278:	f7ff fcbc 	bl	800abf4 <prvIsQueueEmpty>
 800b27c:	b398      	cbz	r0, 800b2e6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b27e:	9901      	ldr	r1, [sp, #4]
 800b280:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b284:	f000 fd70 	bl	800bd68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b288:	4620      	mov	r0, r4
 800b28a:	f7ff fd08 	bl	800ac9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b28e:	f000 fc27 	bl	800bae0 <xTaskResumeAll>
 800b292:	b938      	cbnz	r0, 800b2a4 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800b294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b298:	f8c9 3000 	str.w	r3, [r9]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b2a6:	f7ff fb5d 	bl	800a964 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2aa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	d0be      	beq.n	800b22e <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2b0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7ff fcdd 	bl	800ac74 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2ba:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b163      	cbz	r3, 800b2da <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2c0:	f104 0010 	add.w	r0, r4, #16
 800b2c4:	f000 fd88 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b2c8:	b138      	cbz	r0, 800b2da <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <xQueueReceive+0x13c>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b2da:	f7ff fb65 	bl	800a9a8 <vPortExitCritical>
				return pdPASS;
 800b2de:	2001      	movs	r0, #1
}
 800b2e0:	b005      	add	sp, #20
 800b2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff fcd9 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ec:	f000 fbf8 	bl	800bae0 <xTaskResumeAll>
 800b2f0:	e7d8      	b.n	800b2a4 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f7ff fcd3 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f8:	f000 fbf2 	bl	800bae0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f7ff fc79 	bl	800abf4 <prvIsQueueEmpty>
 800b302:	2800      	cmp	r0, #0
 800b304:	d0ce      	beq.n	800b2a4 <xQueueReceive+0xd8>
 800b306:	e796      	b.n	800b236 <xQueueReceive+0x6a>
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <xQueueSemaphoreTake>:
{
 800b30c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800b310:	4604      	mov	r4, r0
{
 800b312:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b314:	b940      	cbnz	r0, 800b328 <xQueueSemaphoreTake+0x1c>
 800b316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	e7fe      	b.n	800b326 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b328:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b32a:	b145      	cbz	r5, 800b33e <xQueueSemaphoreTake+0x32>
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	e7fe      	b.n	800b33c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b33e:	f000 fddd 	bl	800befc <xTaskGetSchedulerState>
 800b342:	4606      	mov	r6, r0
 800b344:	b950      	cbnz	r0, 800b35c <xQueueSemaphoreTake+0x50>
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	b16b      	cbz	r3, 800b366 <xQueueSemaphoreTake+0x5a>
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	e7fe      	b.n	800b35a <xQueueSemaphoreTake+0x4e>
 800b35c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b35e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800b360:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800b490 <xQueueSemaphoreTake+0x184>
 800b364:	e051      	b.n	800b40a <xQueueSemaphoreTake+0xfe>
 800b366:	4605      	mov	r5, r0
 800b368:	e7f9      	b.n	800b35e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b36a:	9b01      	ldr	r3, [sp, #4]
 800b36c:	b963      	cbnz	r3, 800b388 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b36e:	b145      	cbz	r5, 800b382 <xQueueSemaphoreTake+0x76>
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	e7fe      	b.n	800b380 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800b382:	f7ff fb11 	bl	800a9a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b386:	e05e      	b.n	800b446 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800b388:	b916      	cbnz	r6, 800b390 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b38a:	a802      	add	r0, sp, #8
 800b38c:	f000 fd68 	bl	800be60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b390:	f7ff fb0a 	bl	800a9a8 <vPortExitCritical>
		vTaskSuspendAll();
 800b394:	f000 fb00 	bl	800b998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b398:	f7ff fae4 	bl	800a964 <vPortEnterCritical>
 800b39c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3a0:	2bff      	cmp	r3, #255	; 0xff
 800b3a2:	d101      	bne.n	800b3a8 <xQueueSemaphoreTake+0x9c>
 800b3a4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b3a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3ac:	2bff      	cmp	r3, #255	; 0xff
 800b3ae:	d101      	bne.n	800b3b4 <xQueueSemaphoreTake+0xa8>
 800b3b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3b4:	f7ff faf8 	bl	800a9a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3b8:	a901      	add	r1, sp, #4
 800b3ba:	a802      	add	r0, sp, #8
 800b3bc:	f000 fd5c 	bl	800be78 <xTaskCheckForTimeOut>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d14a      	bne.n	800b45a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f7ff fc15 	bl	800abf4 <prvIsQueueEmpty>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d03f      	beq.n	800b44e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	b93b      	cbnz	r3, 800b3e2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800b3d2:	f7ff fac7 	bl	800a964 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3d6:	68a0      	ldr	r0, [r4, #8]
 800b3d8:	f000 fda0 	bl	800bf1c <xTaskPriorityInherit>
 800b3dc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b3de:	f7ff fae3 	bl	800a9a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3e2:	9901      	ldr	r1, [sp, #4]
 800b3e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b3e8:	f000 fcbe 	bl	800bd68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7ff fc56 	bl	800ac9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3f2:	f000 fb75 	bl	800bae0 <xTaskResumeAll>
 800b3f6:	b938      	cbnz	r0, 800b408 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800b3f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3fc:	f8c8 3000 	str.w	r3, [r8]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b40a:	f7ff faab 	bl	800a964 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b40e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b410:	2b00      	cmp	r3, #0
 800b412:	d0aa      	beq.n	800b36a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b414:	3b01      	subs	r3, #1
 800b416:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	b913      	cbnz	r3, 800b422 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b41c:	f000 fe56 	bl	800c0cc <pvTaskIncrementMutexHeldCount>
 800b420:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	b163      	cbz	r3, 800b440 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b426:	f104 0010 	add.w	r0, r4, #16
 800b42a:	f000 fcd5 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b42e:	b138      	cbz	r0, 800b440 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800b430:	4b17      	ldr	r3, [pc, #92]	; (800b490 <xQueueSemaphoreTake+0x184>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b440:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b442:	f7ff fab1 	bl	800a9a8 <vPortExitCritical>
}
 800b446:	4628      	mov	r0, r5
 800b448:	b004      	add	sp, #16
 800b44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff fc25 	bl	800ac9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b454:	f000 fb44 	bl	800bae0 <xTaskResumeAll>
 800b458:	e7d6      	b.n	800b408 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff fc1f 	bl	800ac9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b460:	f000 fb3e 	bl	800bae0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b464:	4620      	mov	r0, r4
 800b466:	f7ff fbc5 	bl	800abf4 <prvIsQueueEmpty>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d0cc      	beq.n	800b408 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800b46e:	2d00      	cmp	r5, #0
 800b470:	d0e9      	beq.n	800b446 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800b472:	f7ff fa77 	bl	800a964 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b476:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b478:	b119      	cbz	r1, 800b482 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b47a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b47c:	6819      	ldr	r1, [r3, #0]
 800b47e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b482:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b484:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b486:	f000 fdcf 	bl	800c028 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b48a:	f7ff fa8d 	bl	800a9a8 <vPortExitCritical>
 800b48e:	e7da      	b.n	800b446 <xQueueSemaphoreTake+0x13a>
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <xQueueReceiveFromISR>:
{
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	4689      	mov	r9, r1
 800b49a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b49c:	4605      	mov	r5, r0
 800b49e:	b940      	cbnz	r0, 800b4b2 <xQueueReceiveFromISR+0x1e>
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4b2:	b951      	cbnz	r1, 800b4ca <xQueueReceiveFromISR+0x36>
 800b4b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b4b6:	b143      	cbz	r3, 800b4ca <xQueueReceiveFromISR+0x36>
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	e7fe      	b.n	800b4c8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4ca:	f7ff fb65 	bl	800ab98 <vPortValidateInterruptPriority>
	__asm volatile
 800b4ce:	f3ef 8711 	mrs	r7, BASEPRI
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4e2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4e4:	b31c      	cbz	r4, 800b52e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4e6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4ee:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4f0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4f2:	f7ff fbbf 	bl	800ac74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4f6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b4f8:	1c73      	adds	r3, r6, #1
 800b4fa:	d113      	bne.n	800b524 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4fc:	692b      	ldr	r3, [r5, #16]
 800b4fe:	b90b      	cbnz	r3, 800b504 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800b500:	2001      	movs	r0, #1
 800b502:	e00b      	b.n	800b51c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b504:	f105 0010 	add.w	r0, r5, #16
 800b508:	f000 fc66 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d0f7      	beq.n	800b500 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800b510:	f1b8 0f00 	cmp.w	r8, #0
 800b514:	d0f4      	beq.n	800b500 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b516:	2001      	movs	r0, #1
 800b518:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b51c:	f387 8811 	msr	BASEPRI, r7
}
 800b520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b524:	3601      	adds	r6, #1
 800b526:	b276      	sxtb	r6, r6
 800b528:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b52c:	e7e8      	b.n	800b500 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800b52e:	4620      	mov	r0, r4
 800b530:	e7f4      	b.n	800b51c <xQueueReceiveFromISR+0x88>
	...

0800b534 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b534:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b536:	4a07      	ldr	r2, [pc, #28]	; (800b554 <vQueueAddToRegistry+0x20>)
	{
 800b538:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b53a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800b53e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800b542:	b91d      	cbnz	r5, 800b54c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b544:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b548:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b54a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b54c:	3301      	adds	r3, #1
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d1f3      	bne.n	800b53a <vQueueAddToRegistry+0x6>
 800b552:	e7fa      	b.n	800b54a <vQueueAddToRegistry+0x16>
 800b554:	240072fc 	.word	0x240072fc

0800b558 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b558:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b55a:	4909      	ldr	r1, [pc, #36]	; (800b580 <vQueueUnregisterQueue+0x28>)
	{
 800b55c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b55e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800b562:	00dc      	lsls	r4, r3, #3
 800b564:	4282      	cmp	r2, r0
 800b566:	d106      	bne.n	800b576 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b568:	4a06      	ldr	r2, [pc, #24]	; (800b584 <vQueueUnregisterQueue+0x2c>)
 800b56a:	2100      	movs	r1, #0
 800b56c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b570:	4422      	add	r2, r4
 800b572:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b574:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b576:	3301      	adds	r3, #1
 800b578:	2b08      	cmp	r3, #8
 800b57a:	d1f0      	bne.n	800b55e <vQueueUnregisterQueue+0x6>
 800b57c:	e7fa      	b.n	800b574 <vQueueUnregisterQueue+0x1c>
 800b57e:	bf00      	nop
 800b580:	24007300 	.word	0x24007300
 800b584:	240072fc 	.word	0x240072fc

0800b588 <vQueueDelete>:
{
 800b588:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800b58a:	b940      	cbnz	r0, 800b59e <vQueueDelete+0x16>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	e7fe      	b.n	800b59c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800b59e:	f7ff ffdb 	bl	800b558 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b5a2:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800b5a6:	b91b      	cbnz	r3, 800b5b0 <vQueueDelete+0x28>
}
 800b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800b5ac:	f7ff b8f6 	b.w	800a79c <vPortFree>
}
 800b5b0:	bd10      	pop	{r4, pc}

0800b5b2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5b2:	b570      	push	{r4, r5, r6, lr}
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5ba:	f7ff f9d3 	bl	800a964 <vPortEnterCritical>
 800b5be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b5c2:	2bff      	cmp	r3, #255	; 0xff
 800b5c4:	d102      	bne.n	800b5cc <vQueueWaitForMessageRestricted+0x1a>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b5cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b5d0:	2bff      	cmp	r3, #255	; 0xff
 800b5d2:	d102      	bne.n	800b5da <vQueueWaitForMessageRestricted+0x28>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5da:	f7ff f9e5 	bl	800a9a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b5e0:	b92b      	cbnz	r3, 800b5ee <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b5ea:	f000 fbd7 	bl	800bd9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5ee:	4620      	mov	r0, r4
	}
 800b5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800b5f4:	f7ff bb53 	b.w	800ac9e <prvUnlockQueue>

0800b5f8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5fe:	f7ff f9b1 	bl	800a964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b602:	4b2e      	ldr	r3, [pc, #184]	; (800b6bc <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800b604:	4d2e      	ldr	r5, [pc, #184]	; (800b6c0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	4f2e      	ldr	r7, [pc, #184]	; (800b6c4 <prvAddNewTaskToReadyList+0xcc>)
 800b60a:	3201      	adds	r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b60e:	682e      	ldr	r6, [r5, #0]
 800b610:	2e00      	cmp	r6, #0
 800b612:	d148      	bne.n	800b6a6 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b614:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d11f      	bne.n	800b65c <prvAddNewTaskToReadyList+0x64>
 800b61c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b61e:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b620:	4640      	mov	r0, r8
 800b622:	f7ff f8f9 	bl	800a818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b626:	f108 0814 	add.w	r8, r8, #20
 800b62a:	2e38      	cmp	r6, #56	; 0x38
 800b62c:	d1f7      	bne.n	800b61e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b62e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b6f0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800b632:	4e25      	ldr	r6, [pc, #148]	; (800b6c8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800b634:	4640      	mov	r0, r8
 800b636:	f7ff f8ef 	bl	800a818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7ff f8ec 	bl	800a818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b640:	4822      	ldr	r0, [pc, #136]	; (800b6cc <prvAddNewTaskToReadyList+0xd4>)
 800b642:	f7ff f8e9 	bl	800a818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b646:	4822      	ldr	r0, [pc, #136]	; (800b6d0 <prvAddNewTaskToReadyList+0xd8>)
 800b648:	f7ff f8e6 	bl	800a818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b64c:	4821      	ldr	r0, [pc, #132]	; (800b6d4 <prvAddNewTaskToReadyList+0xdc>)
 800b64e:	f7ff f8e3 	bl	800a818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <prvAddNewTaskToReadyList+0xe0>)
 800b654:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b658:	4b20      	ldr	r3, [pc, #128]	; (800b6dc <prvAddNewTaskToReadyList+0xe4>)
 800b65a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800b65c:	4a20      	ldr	r2, [pc, #128]	; (800b6e0 <prvAddNewTaskToReadyList+0xe8>)
 800b65e:	6813      	ldr	r3, [r2, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800b664:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b666:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b668:	6811      	ldr	r1, [r2, #0]
 800b66a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b66c:	428b      	cmp	r3, r1
 800b66e:	d900      	bls.n	800b672 <prvAddNewTaskToReadyList+0x7a>
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	2014      	movs	r0, #20
 800b674:	1d21      	adds	r1, r4, #4
 800b676:	fb00 7003 	mla	r0, r0, r3, r7
 800b67a:	f7ff f8db 	bl	800a834 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b67e:	f7ff f993 	bl	800a9a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b682:	4b19      	ldr	r3, [pc, #100]	; (800b6e8 <prvAddNewTaskToReadyList+0xf0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	b163      	cbz	r3, 800b6a2 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b68e:	429a      	cmp	r2, r3
 800b690:	d207      	bcs.n	800b6a2 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800b692:	4b16      	ldr	r3, [pc, #88]	; (800b6ec <prvAddNewTaskToReadyList+0xf4>)
 800b694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	f3bf 8f6f 	isb	sy
}
 800b6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <prvAddNewTaskToReadyList+0xf0>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1d6      	bne.n	800b65c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d8d1      	bhi.n	800b65c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800b6b8:	602c      	str	r4, [r5, #0]
 800b6ba:	e7cf      	b.n	800b65c <prvAddNewTaskToReadyList+0x64>
 800b6bc:	24006aa4 	.word	0x24006aa4
 800b6c0:	24006638 	.word	0x24006638
 800b6c4:	24006644 	.word	0x24006644
 800b6c8:	24006acc 	.word	0x24006acc
 800b6cc:	24006aec 	.word	0x24006aec
 800b6d0:	24006b18 	.word	0x24006b18
 800b6d4:	24006b04 	.word	0x24006b04
 800b6d8:	2400663c 	.word	0x2400663c
 800b6dc:	24006640 	.word	0x24006640
 800b6e0:	24006ab0 	.word	0x24006ab0
 800b6e4:	24006ab4 	.word	0x24006ab4
 800b6e8:	24006b00 	.word	0x24006b00
 800b6ec:	e000ed04 	.word	0xe000ed04
 800b6f0:	24006ab8 	.word	0x24006ab8

0800b6f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f4:	4a06      	ldr	r2, [pc, #24]	; (800b710 <prvResetNextTaskUnblockTime+0x1c>)
 800b6f6:	6813      	ldr	r3, [r2, #0]
 800b6f8:	6819      	ldr	r1, [r3, #0]
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <prvResetNextTaskUnblockTime+0x20>)
 800b6fc:	b919      	cbnz	r1, 800b706 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b702:	601a      	str	r2, [r3, #0]
	}
}
 800b704:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	6812      	ldr	r2, [r2, #0]
 800b708:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b70a:	68d2      	ldr	r2, [r2, #12]
 800b70c:	6852      	ldr	r2, [r2, #4]
 800b70e:	e7f8      	b.n	800b702 <prvResetNextTaskUnblockTime+0xe>
 800b710:	2400663c 	.word	0x2400663c
 800b714:	24006ae0 	.word	0x24006ae0

0800b718 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b71c:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b720:	4606      	mov	r6, r0
 800b722:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b724:	21a5      	movs	r1, #165	; 0xa5
 800b726:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b728:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b72a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b72e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b732:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b734:	f010 fe5e 	bl	801c3f4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b738:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b73a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b73c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800b740:	2d00      	cmp	r5, #0
 800b742:	d037      	beq.n	800b7b4 <prvInitialiseNewTask.isra.0+0x9c>
 800b744:	1e6b      	subs	r3, r5, #1
 800b746:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800b74a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b74c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b750:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800b754:	7819      	ldrb	r1, [r3, #0]
 800b756:	b109      	cbz	r1, 800b75c <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b758:	42ab      	cmp	r3, r5
 800b75a:	d1f7      	bne.n	800b74c <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b75c:	2300      	movs	r3, #0
 800b75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b762:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800b764:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b768:	1d20      	adds	r0, r4, #4
 800b76a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b76c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800b770:	bf28      	it	cs
 800b772:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b774:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b776:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b778:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b77c:	f7ff f857 	bl	800a82e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b780:	f104 0018 	add.w	r0, r4, #24
 800b784:	f7ff f853 	bl	800a82e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800b788:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b78c:	463a      	mov	r2, r7
 800b78e:	4631      	mov	r1, r6
 800b790:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b792:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b794:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b796:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800b798:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b79c:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7a0:	f7ff f8ba 	bl	800a918 <pxPortInitialiseStack>
 800b7a4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b7a6:	f1b8 0f00 	cmp.w	r8, #0
 800b7aa:	d001      	beq.n	800b7b0 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7ac:	f8c8 4000 	str.w	r4, [r8]
}
 800b7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7b4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800b7b8:	e7d3      	b.n	800b762 <prvInitialiseNewTask.isra.0+0x4a>

0800b7ba <prvDeleteTCB>:
	{
 800b7ba:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7bc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800b7c0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7c2:	b93b      	cbnz	r3, 800b7d4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800b7c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b7c6:	f7fe ffe9 	bl	800a79c <vPortFree>
				vPortFree( pxTCB );
 800b7ca:	4620      	mov	r0, r4
	}
 800b7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800b7d0:	f7fe bfe4 	b.w	800a79c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d0f9      	beq.n	800b7cc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d008      	beq.n	800b7ee <prvDeleteTCB+0x34>
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	e7fe      	b.n	800b7ec <prvDeleteTCB+0x32>
	}
 800b7ee:	bd10      	pop	{r4, pc}

0800b7f0 <prvIdleTask>:
{
 800b7f0:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f2:	4e14      	ldr	r6, [pc, #80]	; (800b844 <prvIdleTask+0x54>)
				taskYIELD();
 800b7f4:	4f14      	ldr	r7, [pc, #80]	; (800b848 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f6:	4c15      	ldr	r4, [pc, #84]	; (800b84c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800b7f8:	4d15      	ldr	r5, [pc, #84]	; (800b850 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	b96b      	cbnz	r3, 800b81a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7fe:	4b15      	ldr	r3, [pc, #84]	; (800b854 <prvIdleTask+0x64>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d906      	bls.n	800b814 <prvIdleTask+0x24>
				taskYIELD();
 800b806:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800b814:	f7f4 ff88 	bl	8000728 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b818:	e7ed      	b.n	800b7f6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800b81a:	f7ff f8a3 	bl	800a964 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b81e:	68f3      	ldr	r3, [r6, #12]
 800b820:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b824:	f108 0004 	add.w	r0, r8, #4
 800b828:	f7ff f827 	bl	800a87a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	3b01      	subs	r3, #1
 800b830:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	3b01      	subs	r3, #1
 800b836:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800b838:	f7ff f8b6 	bl	800a9a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b83c:	4640      	mov	r0, r8
 800b83e:	f7ff ffbc 	bl	800b7ba <prvDeleteTCB>
 800b842:	e7da      	b.n	800b7fa <prvIdleTask+0xa>
 800b844:	24006b18 	.word	0x24006b18
 800b848:	e000ed04 	.word	0xe000ed04
 800b84c:	24006aa8 	.word	0x24006aa8
 800b850:	24006aa4 	.word	0x24006aa4
 800b854:	24006644 	.word	0x24006644

0800b858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b85a:	4b16      	ldr	r3, [pc, #88]	; (800b8b4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800b85c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b85e:	4e16      	ldr	r6, [pc, #88]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800b860:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800b862:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b864:	6830      	ldr	r0, [r6, #0]
 800b866:	3004      	adds	r0, #4
 800b868:	f7ff f807 	bl	800a87a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b86c:	1c63      	adds	r3, r4, #1
 800b86e:	4633      	mov	r3, r6
 800b870:	d107      	bne.n	800b882 <prvAddCurrentTaskToDelayedList+0x2a>
 800b872:	b137      	cbz	r7, 800b882 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b874:	6831      	ldr	r1, [r6, #0]
 800b876:	4811      	ldr	r0, [pc, #68]	; (800b8bc <prvAddCurrentTaskToDelayedList+0x64>)
 800b878:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b87e:	f7fe bfd9 	b.w	800a834 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b882:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800b888:	d307      	bcc.n	800b89a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b88c:	6810      	ldr	r0, [r2, #0]
 800b88e:	6819      	ldr	r1, [r3, #0]
}
 800b890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b894:	3104      	adds	r1, #4
 800b896:	f7fe bfd9 	b.w	800a84c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b89a:	4a0a      	ldr	r2, [pc, #40]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b89c:	6810      	ldr	r0, [r2, #0]
 800b89e:	6819      	ldr	r1, [r3, #0]
 800b8a0:	3104      	adds	r1, #4
 800b8a2:	f7fe ffd3 	bl	800a84c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8a6:	4b08      	ldr	r3, [pc, #32]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0x70>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	42a2      	cmp	r2, r4
 800b8ac:	d900      	bls.n	800b8b0 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800b8ae:	601c      	str	r4, [r3, #0]
}
 800b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	24006b2c 	.word	0x24006b2c
 800b8b8:	24006638 	.word	0x24006638
 800b8bc:	24006b04 	.word	0x24006b04
 800b8c0:	24006640 	.word	0x24006640
 800b8c4:	2400663c 	.word	0x2400663c
 800b8c8:	24006ae0 	.word	0x24006ae0

0800b8cc <xTaskCreateStatic>:
	{
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800b8d4:	b945      	cbnz	r5, 800b8e8 <xTaskCreateStatic+0x1c>
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	e7fe      	b.n	800b8e6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b8e8:	b944      	cbnz	r4, 800b8fc <xTaskCreateStatic+0x30>
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	e7fe      	b.n	800b8fa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8fc:	2660      	movs	r6, #96	; 0x60
 800b8fe:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b900:	9e05      	ldr	r6, [sp, #20]
 800b902:	2e60      	cmp	r6, #96	; 0x60
 800b904:	d008      	beq.n	800b918 <xTaskCreateStatic+0x4c>
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	e7fe      	b.n	800b916 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b918:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b91a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b91c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b91e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b922:	ad04      	add	r5, sp, #16
 800b924:	9402      	str	r4, [sp, #8]
 800b926:	9501      	str	r5, [sp, #4]
 800b928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b92a:	9500      	str	r5, [sp, #0]
 800b92c:	f7ff fef4 	bl	800b718 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b930:	4620      	mov	r0, r4
 800b932:	f7ff fe61 	bl	800b5f8 <prvAddNewTaskToReadyList>
	}
 800b936:	9804      	ldr	r0, [sp, #16]
 800b938:	b006      	add	sp, #24
 800b93a:	bd70      	pop	{r4, r5, r6, pc}

0800b93c <xTaskCreate>:
	{
 800b93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b940:	4607      	mov	r7, r0
 800b942:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b944:	0090      	lsls	r0, r2, #2
	{
 800b946:	4688      	mov	r8, r1
 800b948:	4616      	mov	r6, r2
 800b94a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b94c:	f7fe fe94 	bl	800a678 <pvPortMalloc>
			if( pxStack != NULL )
 800b950:	4605      	mov	r5, r0
 800b952:	b1e8      	cbz	r0, 800b990 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b954:	2060      	movs	r0, #96	; 0x60
 800b956:	f7fe fe8f 	bl	800a678 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b95a:	4604      	mov	r4, r0
 800b95c:	b1a8      	cbz	r0, 800b98a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b95e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800b960:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b962:	4632      	mov	r2, r6
 800b964:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b966:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b96c:	9002      	str	r0, [sp, #8]
 800b96e:	4638      	mov	r0, r7
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	464b      	mov	r3, r9
 800b978:	f7ff fece 	bl	800b718 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b97c:	4620      	mov	r0, r4
 800b97e:	f7ff fe3b 	bl	800b5f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b982:	2001      	movs	r0, #1
	}
 800b984:	b005      	add	sp, #20
 800b986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7fe ff06 	bl	800a79c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b994:	e7f6      	b.n	800b984 <xTaskCreate+0x48>
	...

0800b998 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b998:	4a02      	ldr	r2, [pc, #8]	; (800b9a4 <vTaskSuspendAll+0xc>)
 800b99a:	6813      	ldr	r3, [r2, #0]
 800b99c:	3301      	adds	r3, #1
 800b99e:	6013      	str	r3, [r2, #0]
}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	24006aac 	.word	0x24006aac

0800b9a8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b9a8:	4b01      	ldr	r3, [pc, #4]	; (800b9b0 <xTaskGetTickCount+0x8>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
}
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	24006b2c 	.word	0x24006b2c

0800b9b4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b4:	4b3f      	ldr	r3, [pc, #252]	; (800bab4 <xTaskIncrementTick+0x100>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
{
 800b9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d172      	bne.n	800baa6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9c0:	4b3d      	ldr	r3, [pc, #244]	; (800bab8 <xTaskIncrementTick+0x104>)
 800b9c2:	681d      	ldr	r5, [r3, #0]
 800b9c4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b9c6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9c8:	b9bd      	cbnz	r5, 800b9fa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b9ca:	4b3c      	ldr	r3, [pc, #240]	; (800babc <xTaskIncrementTick+0x108>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	b142      	cbz	r2, 800b9e4 <xTaskIncrementTick+0x30>
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	e7fe      	b.n	800b9e2 <xTaskIncrementTick+0x2e>
 800b9e4:	4a36      	ldr	r2, [pc, #216]	; (800bac0 <xTaskIncrementTick+0x10c>)
 800b9e6:	6819      	ldr	r1, [r3, #0]
 800b9e8:	6810      	ldr	r0, [r2, #0]
 800b9ea:	6018      	str	r0, [r3, #0]
 800b9ec:	6011      	str	r1, [r2, #0]
 800b9ee:	4a35      	ldr	r2, [pc, #212]	; (800bac4 <xTaskIncrementTick+0x110>)
 800b9f0:	6813      	ldr	r3, [r2, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	f7ff fe7d 	bl	800b6f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9fa:	4e33      	ldr	r6, [pc, #204]	; (800bac8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800b9fc:	2400      	movs	r4, #0
 800b9fe:	4f33      	ldr	r7, [pc, #204]	; (800bacc <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba00:	6833      	ldr	r3, [r6, #0]
 800ba02:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800bad8 <xTaskIncrementTick+0x124>
 800ba06:	429d      	cmp	r5, r3
 800ba08:	d211      	bcs.n	800ba2e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	2314      	movs	r3, #20
 800ba12:	4353      	muls	r3, r2
 800ba14:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800ba16:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800ba18:	4b2d      	ldr	r3, [pc, #180]	; (800bad0 <xTaskIncrementTick+0x11c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800ba1c:	bf28      	it	cs
 800ba1e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf18      	it	ne
 800ba24:	2401      	movne	r4, #1
}
 800ba26:	4620      	mov	r0, r4
 800ba28:	b003      	add	sp, #12
 800ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba2e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800babc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800ba32:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800badc <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba36:	f8d9 3000 	ldr.w	r3, [r9]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	b91b      	cbnz	r3, 800ba46 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba42:	6033      	str	r3, [r6, #0]
					break;
 800ba44:	e7e1      	b.n	800ba0a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba46:	f8d9 3000 	ldr.w	r3, [r9]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba50:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800ba54:	4295      	cmp	r5, r2
 800ba56:	d201      	bcs.n	800ba5c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800ba58:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba5a:	e7d6      	b.n	800ba0a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba5c:	f10b 0104 	add.w	r1, fp, #4
 800ba60:	4608      	mov	r0, r1
 800ba62:	9101      	str	r1, [sp, #4]
 800ba64:	f7fe ff09 	bl	800a87a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba68:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800ba6c:	9901      	ldr	r1, [sp, #4]
 800ba6e:	b122      	cbz	r2, 800ba7a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba70:	f10b 0018 	add.w	r0, fp, #24
 800ba74:	f7fe ff01 	bl	800a87a <uxListRemove>
 800ba78:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800ba7a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800ba7e:	f8da 2000 	ldr.w	r2, [sl]
 800ba82:	4290      	cmp	r0, r2
 800ba84:	d901      	bls.n	800ba8a <xTaskIncrementTick+0xd6>
 800ba86:	f8ca 0000 	str.w	r0, [sl]
 800ba8a:	2314      	movs	r3, #20
 800ba8c:	fb03 7000 	mla	r0, r3, r0, r7
 800ba90:	f7fe fed0 	bl	800a834 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba94:	f8d8 1000 	ldr.w	r1, [r8]
 800ba98:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ba9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	bf28      	it	cs
 800baa2:	2401      	movcs	r4, #1
 800baa4:	e7c7      	b.n	800ba36 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800baa6:	4a0b      	ldr	r2, [pc, #44]	; (800bad4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800baa8:	2400      	movs	r4, #0
		++xPendedTicks;
 800baaa:	6813      	ldr	r3, [r2, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800bab0:	e7b9      	b.n	800ba26 <xTaskIncrementTick+0x72>
 800bab2:	bf00      	nop
 800bab4:	24006aac 	.word	0x24006aac
 800bab8:	24006b2c 	.word	0x24006b2c
 800babc:	2400663c 	.word	0x2400663c
 800bac0:	24006640 	.word	0x24006640
 800bac4:	24006ae4 	.word	0x24006ae4
 800bac8:	24006ae0 	.word	0x24006ae0
 800bacc:	24006644 	.word	0x24006644
 800bad0:	24006b30 	.word	0x24006b30
 800bad4:	24006ae8 	.word	0x24006ae8
 800bad8:	24006638 	.word	0x24006638
 800badc:	24006ab4 	.word	0x24006ab4

0800bae0 <xTaskResumeAll>:
{
 800bae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800bae2:	4c30      	ldr	r4, [pc, #192]	; (800bba4 <xTaskResumeAll+0xc4>)
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	b943      	cbnz	r3, 800bafa <xTaskResumeAll+0x1a>
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	e7fe      	b.n	800baf8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800bafa:	f7fe ff33 	bl	800a964 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb04:	6824      	ldr	r4, [r4, #0]
 800bb06:	b12c      	cbz	r4, 800bb14 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800bb08:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bb0a:	f7fe ff4d 	bl	800a9a8 <vPortExitCritical>
}
 800bb0e:	4620      	mov	r0, r4
 800bb10:	b003      	add	sp, #12
 800bb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb14:	4b24      	ldr	r3, [pc, #144]	; (800bba8 <xTaskResumeAll+0xc8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0f5      	beq.n	800bb08 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb1c:	4d23      	ldr	r5, [pc, #140]	; (800bbac <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800bb1e:	4e24      	ldr	r6, [pc, #144]	; (800bbb0 <xTaskResumeAll+0xd0>)
 800bb20:	4f24      	ldr	r7, [pc, #144]	; (800bbb4 <xTaskResumeAll+0xd4>)
 800bb22:	e01e      	b.n	800bb62 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb24:	68eb      	ldr	r3, [r5, #12]
 800bb26:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb28:	f104 0018 	add.w	r0, r4, #24
 800bb2c:	f7fe fea5 	bl	800a87a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb30:	1d21      	adds	r1, r4, #4
 800bb32:	4608      	mov	r0, r1
 800bb34:	9101      	str	r1, [sp, #4]
 800bb36:	f7fe fea0 	bl	800a87a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb3c:	6832      	ldr	r2, [r6, #0]
 800bb3e:	9901      	ldr	r1, [sp, #4]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d900      	bls.n	800bb46 <xTaskResumeAll+0x66>
 800bb44:	6033      	str	r3, [r6, #0]
 800bb46:	2014      	movs	r0, #20
 800bb48:	fb00 7003 	mla	r0, r0, r3, r7
 800bb4c:	f7fe fe72 	bl	800a834 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb50:	4b19      	ldr	r3, [pc, #100]	; (800bbb8 <xTaskResumeAll+0xd8>)
 800bb52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d302      	bcc.n	800bb62 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800bb5c:	4b17      	ldr	r3, [pc, #92]	; (800bbbc <xTaskResumeAll+0xdc>)
 800bb5e:	2201      	movs	r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb62:	682b      	ldr	r3, [r5, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1dd      	bne.n	800bb24 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800bb68:	b10c      	cbz	r4, 800bb6e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800bb6a:	f7ff fdc3 	bl	800b6f4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb6e:	4d14      	ldr	r5, [pc, #80]	; (800bbc0 <xTaskResumeAll+0xe0>)
 800bb70:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bb72:	b144      	cbz	r4, 800bb86 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800bb74:	4e11      	ldr	r6, [pc, #68]	; (800bbbc <xTaskResumeAll+0xdc>)
 800bb76:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bb78:	f7ff ff1c 	bl	800b9b4 <xTaskIncrementTick>
 800bb7c:	b100      	cbz	r0, 800bb80 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800bb7e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb80:	3c01      	subs	r4, #1
 800bb82:	d1f9      	bne.n	800bb78 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800bb84:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <xTaskResumeAll+0xdc>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0bc      	beq.n	800bb08 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <xTaskResumeAll+0xe4>)
 800bb90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bb9e:	2401      	movs	r4, #1
 800bba0:	e7b3      	b.n	800bb0a <xTaskResumeAll+0x2a>
 800bba2:	bf00      	nop
 800bba4:	24006aac 	.word	0x24006aac
 800bba8:	24006aa4 	.word	0x24006aa4
 800bbac:	24006aec 	.word	0x24006aec
 800bbb0:	24006ab4 	.word	0x24006ab4
 800bbb4:	24006644 	.word	0x24006644
 800bbb8:	24006638 	.word	0x24006638
 800bbbc:	24006b30 	.word	0x24006b30
 800bbc0:	24006ae8 	.word	0x24006ae8
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <vTaskDelay>:
	{
 800bbc8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbca:	b940      	cbnz	r0, 800bbde <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800bbcc:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <vTaskDelay+0x40>)
 800bbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	f3bf 8f6f 	isb	sy
	}
 800bbdc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800bbde:	4b0b      	ldr	r3, [pc, #44]	; (800bc0c <vTaskDelay+0x44>)
 800bbe0:	6819      	ldr	r1, [r3, #0]
 800bbe2:	b141      	cbz	r1, 800bbf6 <vTaskDelay+0x2e>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	e7fe      	b.n	800bbf4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bbf6:	f7ff fecf 	bl	800b998 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbfa:	f7ff fe2d 	bl	800b858 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800bbfe:	f7ff ff6f 	bl	800bae0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d0e2      	beq.n	800bbcc <vTaskDelay+0x4>
 800bc06:	e7e9      	b.n	800bbdc <vTaskDelay+0x14>
 800bc08:	e000ed04 	.word	0xe000ed04
 800bc0c:	24006aac 	.word	0x24006aac

0800bc10 <vTaskSetApplicationTaskTag>:
	{
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	460d      	mov	r5, r1
		if( xTask == NULL )
 800bc14:	4604      	mov	r4, r0
 800bc16:	b908      	cbnz	r0, 800bc1c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800bc18:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <vTaskSetApplicationTaskTag+0x1c>)
 800bc1a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800bc1c:	f7fe fea2 	bl	800a964 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800bc20:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800bc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800bc26:	f7fe bebf 	b.w	800a9a8 <vPortExitCritical>
 800bc2a:	bf00      	nop
 800bc2c:	24006638 	.word	0x24006638

0800bc30 <xTaskCallApplicationTaskHook>:
	{
 800bc30:	4603      	mov	r3, r0
 800bc32:	4608      	mov	r0, r1
		if( xTask == NULL )
 800bc34:	b90b      	cbnz	r3, 800bc3a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800bc36:	4b03      	ldr	r3, [pc, #12]	; (800bc44 <xTaskCallApplicationTaskHook+0x14>)
 800bc38:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800bc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3c:	b103      	cbz	r3, 800bc40 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800bc3e:	4718      	bx	r3
	}
 800bc40:	4618      	mov	r0, r3
 800bc42:	4770      	bx	lr
 800bc44:	24006638 	.word	0x24006638

0800bc48 <vTaskStartScheduler>:
{
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc4c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc4e:	aa07      	add	r2, sp, #28
 800bc50:	a906      	add	r1, sp, #24
 800bc52:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc54:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc58:	f7fe fcd2 	bl	800a600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc5c:	9b05      	ldr	r3, [sp, #20]
 800bc5e:	9a07      	ldr	r2, [sp, #28]
 800bc60:	9302      	str	r3, [sp, #8]
 800bc62:	9b06      	ldr	r3, [sp, #24]
 800bc64:	4917      	ldr	r1, [pc, #92]	; (800bcc4 <vTaskStartScheduler+0x7c>)
 800bc66:	4818      	ldr	r0, [pc, #96]	; (800bcc8 <vTaskStartScheduler+0x80>)
 800bc68:	e9cd 4300 	strd	r4, r3, [sp]
 800bc6c:	4623      	mov	r3, r4
 800bc6e:	f7ff fe2d 	bl	800b8cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bc72:	b1d0      	cbz	r0, 800bcaa <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800bc74:	f000 fa88 	bl	800c188 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800bc78:	2801      	cmp	r0, #1
 800bc7a:	d118      	bne.n	800bcae <vTaskStartScheduler+0x66>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <vTaskStartScheduler+0x84>)
 800bc8e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800bc92:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc96:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <vTaskStartScheduler+0x88>)
 800bc98:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc9a:	4b0e      	ldr	r3, [pc, #56]	; (800bcd4 <vTaskStartScheduler+0x8c>)
 800bc9c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800bc9e:	4b0e      	ldr	r3, [pc, #56]	; (800bcd8 <vTaskStartScheduler+0x90>)
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f7ff ffc5 	bl	800bc30 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800bca6:	f7fe fef5 	bl	800aa94 <xPortStartScheduler>
}
 800bcaa:	b008      	add	sp, #32
 800bcac:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d1fb      	bne.n	800bcaa <vTaskStartScheduler+0x62>
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	e7fe      	b.n	800bcc2 <vTaskStartScheduler+0x7a>
 800bcc4:	0801e650 	.word	0x0801e650
 800bcc8:	0800b7f1 	.word	0x0800b7f1
 800bccc:	24006ae0 	.word	0x24006ae0
 800bcd0:	24006b00 	.word	0x24006b00
 800bcd4:	24006b2c 	.word	0x24006b2c
 800bcd8:	24006638 	.word	0x24006638

0800bcdc <vTaskSwitchContext>:
{
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcde:	4b1d      	ldr	r3, [pc, #116]	; (800bd54 <vTaskSwitchContext+0x78>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	4b1d      	ldr	r3, [pc, #116]	; (800bd58 <vTaskSwitchContext+0x7c>)
 800bce4:	b112      	cbz	r2, 800bcec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
}
 800bcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800bcec:	4e1b      	ldr	r6, [pc, #108]	; (800bd5c <vTaskSwitchContext+0x80>)
 800bcee:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800bcf0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800bcf2:	6830      	ldr	r0, [r6, #0]
 800bcf4:	f7ff ff9c 	bl	800bc30 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf8:	4d19      	ldr	r5, [pc, #100]	; (800bd60 <vTaskSwitchContext+0x84>)
 800bcfa:	4a1a      	ldr	r2, [pc, #104]	; (800bd64 <vTaskSwitchContext+0x88>)
 800bcfc:	f04f 0c14 	mov.w	ip, #20
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	4617      	mov	r7, r2
 800bd04:	fb0c f103 	mul.w	r1, ip, r3
 800bd08:	5854      	ldr	r4, [r2, r1]
 800bd0a:	1850      	adds	r0, r2, r1
 800bd0c:	b1ac      	cbz	r4, 800bd3a <vTaskSwitchContext+0x5e>
 800bd0e:	6844      	ldr	r4, [r0, #4]
 800bd10:	3108      	adds	r1, #8
 800bd12:	6864      	ldr	r4, [r4, #4]
 800bd14:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800bd16:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd18:	4294      	cmp	r4, r2
 800bd1a:	6044      	str	r4, [r0, #4]
 800bd1c:	bf04      	itt	eq
 800bd1e:	6862      	ldreq	r2, [r4, #4]
 800bd20:	6042      	streq	r2, [r0, #4]
 800bd22:	2214      	movs	r2, #20
 800bd24:	fb02 7203 	mla	r2, r2, r3, r7
 800bd28:	6852      	ldr	r2, [r2, #4]
 800bd2a:	68d2      	ldr	r2, [r2, #12]
 800bd2c:	6032      	str	r2, [r6, #0]
 800bd2e:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800bd30:	6830      	ldr	r0, [r6, #0]
}
 800bd32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800bd36:	f7ff bf7b 	b.w	800bc30 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3a:	b943      	cbnz	r3, 800bd4e <vTaskSwitchContext+0x72>
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	e7fe      	b.n	800bd4c <vTaskSwitchContext+0x70>
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	e7d8      	b.n	800bd04 <vTaskSwitchContext+0x28>
 800bd52:	bf00      	nop
 800bd54:	24006aac 	.word	0x24006aac
 800bd58:	24006b30 	.word	0x24006b30
 800bd5c:	24006638 	.word	0x24006638
 800bd60:	24006ab4 	.word	0x24006ab4
 800bd64:	24006644 	.word	0x24006644

0800bd68 <vTaskPlaceOnEventList>:
{
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800bd6c:	b940      	cbnz	r0, 800bd80 <vTaskPlaceOnEventList+0x18>
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	e7fe      	b.n	800bd7e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <vTaskPlaceOnEventList+0x30>)
 800bd82:	6819      	ldr	r1, [r3, #0]
 800bd84:	3118      	adds	r1, #24
 800bd86:	f7fe fd61 	bl	800a84c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	2101      	movs	r1, #1
}
 800bd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd92:	f7ff bd61 	b.w	800b858 <prvAddCurrentTaskToDelayedList>
 800bd96:	bf00      	nop
 800bd98:	24006638 	.word	0x24006638

0800bd9c <vTaskPlaceOnEventListRestricted>:
	{
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	460d      	mov	r5, r1
 800bda0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800bda2:	b940      	cbnz	r0, 800bdb6 <vTaskPlaceOnEventListRestricted+0x1a>
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	e7fe      	b.n	800bdb4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <vTaskPlaceOnEventListRestricted+0x38>)
 800bdb8:	6819      	ldr	r1, [r3, #0]
 800bdba:	3118      	adds	r1, #24
 800bdbc:	f7fe fd3a 	bl	800a834 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800bdc0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	bf0c      	ite	eq
 800bdc6:	4628      	moveq	r0, r5
 800bdc8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800bdcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdd0:	f7ff bd42 	b.w	800b858 <prvAddCurrentTaskToDelayedList>
 800bdd4:	24006638 	.word	0x24006638

0800bdd8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd8:	68c3      	ldr	r3, [r0, #12]
{
 800bdda:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bddc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bdde:	b944      	cbnz	r4, 800bdf2 <xTaskRemoveFromEventList+0x1a>
 800bde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	e7fe      	b.n	800bdf0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdf2:	f104 0118 	add.w	r1, r4, #24
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	9101      	str	r1, [sp, #4]
 800bdfa:	f7fe fd3e 	bl	800a87a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfe:	4b12      	ldr	r3, [pc, #72]	; (800be48 <xTaskRemoveFromEventList+0x70>)
 800be00:	9901      	ldr	r1, [sp, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	b9e3      	cbnz	r3, 800be40 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be06:	1d21      	adds	r1, r4, #4
 800be08:	4608      	mov	r0, r1
 800be0a:	9101      	str	r1, [sp, #4]
 800be0c:	f7fe fd35 	bl	800a87a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be10:	4a0e      	ldr	r2, [pc, #56]	; (800be4c <xTaskRemoveFromEventList+0x74>)
 800be12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be14:	6810      	ldr	r0, [r2, #0]
 800be16:	9901      	ldr	r1, [sp, #4]
 800be18:	4283      	cmp	r3, r0
 800be1a:	d900      	bls.n	800be1e <xTaskRemoveFromEventList+0x46>
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	4a0c      	ldr	r2, [pc, #48]	; (800be50 <xTaskRemoveFromEventList+0x78>)
 800be20:	2014      	movs	r0, #20
 800be22:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be26:	f7fe fd05 	bl	800a834 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be2a:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <xTaskRemoveFromEventList+0x7c>)
 800be2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be32:	429a      	cmp	r2, r3
 800be34:	d906      	bls.n	800be44 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800be36:	2001      	movs	r0, #1
 800be38:	4b07      	ldr	r3, [pc, #28]	; (800be58 <xTaskRemoveFromEventList+0x80>)
 800be3a:	6018      	str	r0, [r3, #0]
}
 800be3c:	b002      	add	sp, #8
 800be3e:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be40:	4806      	ldr	r0, [pc, #24]	; (800be5c <xTaskRemoveFromEventList+0x84>)
 800be42:	e7f0      	b.n	800be26 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800be44:	2000      	movs	r0, #0
	return xReturn;
 800be46:	e7f9      	b.n	800be3c <xTaskRemoveFromEventList+0x64>
 800be48:	24006aac 	.word	0x24006aac
 800be4c:	24006ab4 	.word	0x24006ab4
 800be50:	24006644 	.word	0x24006644
 800be54:	24006638 	.word	0x24006638
 800be58:	24006b30 	.word	0x24006b30
 800be5c:	24006aec 	.word	0x24006aec

0800be60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be60:	4b03      	ldr	r3, [pc, #12]	; (800be70 <vTaskInternalSetTimeOutState+0x10>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be66:	4b03      	ldr	r3, [pc, #12]	; (800be74 <vTaskInternalSetTimeOutState+0x14>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6043      	str	r3, [r0, #4]
}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	24006ae4 	.word	0x24006ae4
 800be74:	24006b2c 	.word	0x24006b2c

0800be78 <xTaskCheckForTimeOut>:
{
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800be7c:	4605      	mov	r5, r0
 800be7e:	b940      	cbnz	r0, 800be92 <xTaskCheckForTimeOut+0x1a>
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	e7fe      	b.n	800be90 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800be92:	b941      	cbnz	r1, 800bea6 <xTaskCheckForTimeOut+0x2e>
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	e7fe      	b.n	800bea4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800bea6:	f7fe fd5d 	bl	800a964 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800beaa:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <xTaskCheckForTimeOut+0x70>)
 800beac:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	d010      	beq.n	800bed6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beb4:	480d      	ldr	r0, [pc, #52]	; (800beec <xTaskCheckForTimeOut+0x74>)
 800beb6:	682e      	ldr	r6, [r5, #0]
 800beb8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800beba:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bebc:	4286      	cmp	r6, r0
 800bebe:	d001      	beq.n	800bec4 <xTaskCheckForTimeOut+0x4c>
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d90f      	bls.n	800bee4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bec4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bec6:	4283      	cmp	r3, r0
 800bec8:	d90a      	bls.n	800bee0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800beca:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800becc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800bece:	4413      	add	r3, r2
 800bed0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bed2:	f7ff ffc5 	bl	800be60 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800bed6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bed8:	f7fe fd66 	bl	800a9a8 <vPortExitCritical>
}
 800bedc:	4620      	mov	r0, r4
 800bede:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800bee4:	2401      	movs	r4, #1
 800bee6:	e7f7      	b.n	800bed8 <xTaskCheckForTimeOut+0x60>
 800bee8:	24006b2c 	.word	0x24006b2c
 800beec:	24006ae4 	.word	0x24006ae4

0800bef0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800bef0:	4b01      	ldr	r3, [pc, #4]	; (800bef8 <vTaskMissedYield+0x8>)
 800bef2:	2201      	movs	r2, #1
 800bef4:	601a      	str	r2, [r3, #0]
}
 800bef6:	4770      	bx	lr
 800bef8:	24006b30 	.word	0x24006b30

0800befc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800befc:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <xTaskGetSchedulerState+0x18>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	b133      	cbz	r3, 800bf10 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <xTaskGetSchedulerState+0x1c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf08:	bf0c      	ite	eq
 800bf0a:	2002      	moveq	r0, #2
 800bf0c:	2000      	movne	r0, #0
 800bf0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf10:	2001      	movs	r0, #1
	}
 800bf12:	4770      	bx	lr
 800bf14:	24006b00 	.word	0x24006b00
 800bf18:	24006aac 	.word	0x24006aac

0800bf1c <xTaskPriorityInherit>:
	{
 800bf1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800bf1e:	4604      	mov	r4, r0
 800bf20:	b348      	cbz	r0, 800bf76 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf22:	4a1c      	ldr	r2, [pc, #112]	; (800bf94 <xTaskPriorityInherit+0x78>)
 800bf24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bf26:	6811      	ldr	r1, [r2, #0]
 800bf28:	4616      	mov	r6, r2
 800bf2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	d228      	bcs.n	800bf82 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf30:	6982      	ldr	r2, [r0, #24]
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	db04      	blt.n	800bf40 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf36:	6832      	ldr	r2, [r6, #0]
 800bf38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bf3a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bf3e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf40:	2214      	movs	r2, #20
 800bf42:	4d15      	ldr	r5, [pc, #84]	; (800bf98 <xTaskPriorityInherit+0x7c>)
 800bf44:	fb02 5303 	mla	r3, r2, r3, r5
 800bf48:	6962      	ldr	r2, [r4, #20]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d115      	bne.n	800bf7a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf4e:	1d21      	adds	r1, r4, #4
 800bf50:	4608      	mov	r0, r1
 800bf52:	9101      	str	r1, [sp, #4]
 800bf54:	f7fe fc91 	bl	800a87a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf58:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf5a:	4a10      	ldr	r2, [pc, #64]	; (800bf9c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf5e:	6810      	ldr	r0, [r2, #0]
 800bf60:	9901      	ldr	r1, [sp, #4]
 800bf62:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf64:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf66:	d900      	bls.n	800bf6a <xTaskPriorityInherit+0x4e>
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	2014      	movs	r0, #20
 800bf6c:	fb00 5003 	mla	r0, r0, r3, r5
 800bf70:	f7fe fc60 	bl	800a834 <vListInsertEnd>
				xReturn = pdTRUE;
 800bf74:	2001      	movs	r0, #1
	}
 800bf76:	b002      	add	sp, #8
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf7a:	6833      	ldr	r3, [r6, #0]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf80:	e7f8      	b.n	800bf74 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800bf86:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	bf2c      	ite	cs
 800bf8c:	2000      	movcs	r0, #0
 800bf8e:	2001      	movcc	r0, #1
 800bf90:	e7f1      	b.n	800bf76 <xTaskPriorityInherit+0x5a>
 800bf92:	bf00      	nop
 800bf94:	24006638 	.word	0x24006638
 800bf98:	24006644 	.word	0x24006644
 800bf9c:	24006ab4 	.word	0x24006ab4

0800bfa0 <xTaskPriorityDisinherit>:
	{
 800bfa0:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800bfa2:	b910      	cbnz	r0, 800bfaa <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800bfa4:	2000      	movs	r0, #0
	}
 800bfa6:	b002      	add	sp, #8
 800bfa8:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800bfaa:	4b1c      	ldr	r3, [pc, #112]	; (800c01c <xTaskPriorityDisinherit+0x7c>)
 800bfac:	681c      	ldr	r4, [r3, #0]
 800bfae:	4284      	cmp	r4, r0
 800bfb0:	d008      	beq.n	800bfc4 <xTaskPriorityDisinherit+0x24>
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	e7fe      	b.n	800bfc2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bfc6:	b943      	cbnz	r3, 800bfda <xTaskPriorityDisinherit+0x3a>
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	e7fe      	b.n	800bfd8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800bfdc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfde:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800bfe0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfe2:	4291      	cmp	r1, r2
 800bfe4:	d0de      	beq.n	800bfa4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1dc      	bne.n	800bfa4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfea:	1d21      	adds	r1, r4, #4
 800bfec:	4608      	mov	r0, r1
 800bfee:	9101      	str	r1, [sp, #4]
 800bff0:	f7fe fc43 	bl	800a87a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bff4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800bff6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bffc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bffe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c000:	4a07      	ldr	r2, [pc, #28]	; (800c020 <xTaskPriorityDisinherit+0x80>)
 800c002:	6810      	ldr	r0, [r2, #0]
 800c004:	4283      	cmp	r3, r0
 800c006:	d900      	bls.n	800c00a <xTaskPriorityDisinherit+0x6a>
 800c008:	6013      	str	r3, [r2, #0]
 800c00a:	4a06      	ldr	r2, [pc, #24]	; (800c024 <xTaskPriorityDisinherit+0x84>)
 800c00c:	2014      	movs	r0, #20
 800c00e:	fb00 2003 	mla	r0, r0, r3, r2
 800c012:	f7fe fc0f 	bl	800a834 <vListInsertEnd>
					xReturn = pdTRUE;
 800c016:	2001      	movs	r0, #1
		return xReturn;
 800c018:	e7c5      	b.n	800bfa6 <xTaskPriorityDisinherit+0x6>
 800c01a:	bf00      	nop
 800c01c:	24006638 	.word	0x24006638
 800c020:	24006ab4 	.word	0x24006ab4
 800c024:	24006644 	.word	0x24006644

0800c028 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c028:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800c02a:	4604      	mov	r4, r0
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d044      	beq.n	800c0ba <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800c030:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c032:	b942      	cbnz	r2, 800c046 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	e7fe      	b.n	800c044 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c046:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c048:	4299      	cmp	r1, r3
 800c04a:	bf38      	it	cc
 800c04c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c04e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c050:	428b      	cmp	r3, r1
 800c052:	d032      	beq.n	800c0ba <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c054:	2a01      	cmp	r2, #1
 800c056:	d130      	bne.n	800c0ba <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	4282      	cmp	r2, r0
 800c05e:	d108      	bne.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	e7fe      	b.n	800c070 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c072:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c074:	4d13      	ldr	r5, [pc, #76]	; (800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c076:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c078:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c07c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c07e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c082:	bfa8      	it	ge
 800c084:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c088:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c08a:	bfa8      	it	ge
 800c08c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c08e:	429a      	cmp	r2, r3
 800c090:	d113      	bne.n	800c0ba <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c092:	1d01      	adds	r1, r0, #4
 800c094:	4608      	mov	r0, r1
 800c096:	9101      	str	r1, [sp, #4]
 800c098:	f7fe fbef 	bl	800a87a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c09c:	4a0a      	ldr	r2, [pc, #40]	; (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c09e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0a0:	6810      	ldr	r0, [r2, #0]
 800c0a2:	9901      	ldr	r1, [sp, #4]
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	d900      	bls.n	800c0aa <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c0a8:	6013      	str	r3, [r2, #0]
 800c0aa:	2014      	movs	r0, #20
 800c0ac:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c0b0:	b003      	add	sp, #12
 800c0b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c0b6:	f7fe bbbd 	b.w	800a834 <vListInsertEnd>
	}
 800c0ba:	b003      	add	sp, #12
 800c0bc:	bd30      	pop	{r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	24006638 	.word	0x24006638
 800c0c4:	24006644 	.word	0x24006644
 800c0c8:	24006ab4 	.word	0x24006ab4

0800c0cc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c0cc:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <pvTaskIncrementMutexHeldCount+0x14>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	b11a      	cbz	r2, 800c0da <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c0d2:	6819      	ldr	r1, [r3, #0]
 800c0d4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c0d6:	3201      	adds	r2, #1
 800c0d8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c0da:	6818      	ldr	r0, [r3, #0]
	}
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	24006638 	.word	0x24006638

0800c0e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c0e6:	4c11      	ldr	r4, [pc, #68]	; (800c12c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c0e8:	f7fe fc3c 	bl	800a964 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c0ec:	6825      	ldr	r5, [r4, #0]
 800c0ee:	b9bd      	cbnz	r5, 800c120 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0f0:	4f0f      	ldr	r7, [pc, #60]	; (800c130 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c0f2:	4e10      	ldr	r6, [pc, #64]	; (800c134 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f7fe fb8f 	bl	800a818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7fe fb8c 	bl	800a818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c100:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c102:	4a0e      	ldr	r2, [pc, #56]	; (800c13c <prvCheckForValidListAndQueue+0x58>)
 800c104:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c106:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c108:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c10a:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <prvCheckForValidListAndQueue+0x5c>)
 800c10c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c10e:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <prvCheckForValidListAndQueue+0x60>)
 800c110:	9500      	str	r5, [sp, #0]
 800c112:	f7fe fe3d 	bl	800ad90 <xQueueGenericCreateStatic>
 800c116:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c118:	b110      	cbz	r0, 800c120 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c11a:	490b      	ldr	r1, [pc, #44]	; (800c148 <prvCheckForValidListAndQueue+0x64>)
 800c11c:	f7ff fa0a 	bl	800b534 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c120:	b003      	add	sp, #12
 800c122:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c126:	f7fe bc3f 	b.w	800a9a8 <vPortExitCritical>
 800c12a:	bf00      	nop
 800c12c:	24006c58 	.word	0x24006c58
 800c130:	24006bdc 	.word	0x24006bdc
 800c134:	24006bf0 	.word	0x24006bf0
 800c138:	24006b34 	.word	0x24006b34
 800c13c:	24006b3c 	.word	0x24006b3c
 800c140:	24006b38 	.word	0x24006b38
 800c144:	24006c08 	.word	0x24006c08
 800c148:	0801e655 	.word	0x0801e655

0800c14c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c14c:	4291      	cmp	r1, r2
{
 800c14e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c150:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c152:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c154:	d80a      	bhi.n	800c16c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	6983      	ldr	r3, [r0, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d20d      	bcs.n	800c17a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c15e:	1d01      	adds	r1, r0, #4
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	f7fe fb72 	bl	800a84c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c168:	2000      	movs	r0, #0
}
 800c16a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d201      	bcs.n	800c174 <prvInsertTimerInActiveList+0x28>
 800c170:	4299      	cmp	r1, r3
 800c172:	d202      	bcs.n	800c17a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c174:	1d01      	adds	r1, r0, #4
 800c176:	4b03      	ldr	r3, [pc, #12]	; (800c184 <prvInsertTimerInActiveList+0x38>)
 800c178:	e7f3      	b.n	800c162 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c17a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c17c:	e7f5      	b.n	800c16a <prvInsertTimerInActiveList+0x1e>
 800c17e:	bf00      	nop
 800c180:	24006b38 	.word	0x24006b38
 800c184:	24006b34 	.word	0x24006b34

0800c188 <xTimerCreateTimerTask>:
{
 800c188:	b510      	push	{r4, lr}
 800c18a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c18c:	f7ff ffaa 	bl	800c0e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c190:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <xTimerCreateTimerTask+0x54>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	b1b3      	cbz	r3, 800c1c4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c196:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c198:	aa07      	add	r2, sp, #28
 800c19a:	a906      	add	r1, sp, #24
 800c19c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c19e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1a2:	f7fe fa39 	bl	800a618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1a6:	9b05      	ldr	r3, [sp, #20]
 800c1a8:	9a07      	ldr	r2, [sp, #28]
 800c1aa:	9302      	str	r3, [sp, #8]
 800c1ac:	9b06      	ldr	r3, [sp, #24]
 800c1ae:	490c      	ldr	r1, [pc, #48]	; (800c1e0 <xTimerCreateTimerTask+0x58>)
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	480b      	ldr	r0, [pc, #44]	; (800c1e4 <xTimerCreateTimerTask+0x5c>)
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	f7ff fb87 	bl	800b8cc <xTaskCreateStatic>
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <xTimerCreateTimerTask+0x60>)
 800c1c0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c1c2:	b940      	cbnz	r0, 800c1d6 <xTimerCreateTimerTask+0x4e>
 800c1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c1d4:	e7fe      	b.n	800c1d4 <xTimerCreateTimerTask+0x4c>
}
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	b008      	add	sp, #32
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	24006c58 	.word	0x24006c58
 800c1e0:	0801e65a 	.word	0x0801e65a
 800c1e4:	0800c2bd 	.word	0x0800c2bd
 800c1e8:	24006c5c 	.word	0x24006c5c

0800c1ec <xTimerGenericCommand>:
{
 800c1ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c1ee:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c1f0:	4604      	mov	r4, r0
{
 800c1f2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c1f4:	b940      	cbnz	r0, 800c208 <xTimerGenericCommand+0x1c>
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	e7fe      	b.n	800c206 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800c208:	4d0c      	ldr	r5, [pc, #48]	; (800c23c <xTimerGenericCommand+0x50>)
 800c20a:	6828      	ldr	r0, [r5, #0]
 800c20c:	b178      	cbz	r0, 800c22e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c20e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c210:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c212:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c216:	dc0c      	bgt.n	800c232 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c218:	f7ff fe70 	bl	800befc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c21c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c21e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c220:	4669      	mov	r1, sp
 800c222:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c224:	bf0c      	ite	eq
 800c226:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c228:	461a      	movne	r2, r3
 800c22a:	f7fe fe67 	bl	800aefc <xQueueGenericSend>
}
 800c22e:	b004      	add	sp, #16
 800c230:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c232:	2300      	movs	r3, #0
 800c234:	4669      	mov	r1, sp
 800c236:	f7fe ff13 	bl	800b060 <xQueueGenericSendFromISR>
 800c23a:	e7f8      	b.n	800c22e <xTimerGenericCommand+0x42>
 800c23c:	24006c58 	.word	0x24006c58

0800c240 <prvSwitchTimerLists>:
{
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c242:	4d1c      	ldr	r5, [pc, #112]	; (800c2b4 <prvSwitchTimerLists+0x74>)
{
 800c244:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c246:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	b92a      	cbnz	r2, 800c25a <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800c24e:	4a1a      	ldr	r2, [pc, #104]	; (800c2b8 <prvSwitchTimerLists+0x78>)
 800c250:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c252:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c254:	6029      	str	r1, [r5, #0]
}
 800c256:	b005      	add	sp, #20
 800c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c25c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c260:	1d21      	adds	r1, r4, #4
 800c262:	4608      	mov	r0, r1
 800c264:	9103      	str	r1, [sp, #12]
 800c266:	f7fe fb08 	bl	800a87a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c26a:	6a23      	ldr	r3, [r4, #32]
 800c26c:	4620      	mov	r0, r4
 800c26e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c270:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c274:	9903      	ldr	r1, [sp, #12]
 800c276:	f013 0f04 	tst.w	r3, #4
 800c27a:	d0e5      	beq.n	800c248 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c27c:	69a3      	ldr	r3, [r4, #24]
 800c27e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800c280:	429e      	cmp	r6, r3
 800c282:	d205      	bcs.n	800c290 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c284:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c286:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c288:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c28a:	f7fe fadf 	bl	800a84c <vListInsert>
 800c28e:	e7db      	b.n	800c248 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c290:	2300      	movs	r3, #0
 800c292:	4632      	mov	r2, r6
 800c294:	4620      	mov	r0, r4
 800c296:	9700      	str	r7, [sp, #0]
 800c298:	4619      	mov	r1, r3
 800c29a:	f7ff ffa7 	bl	800c1ec <xTimerGenericCommand>
				configASSERT( xResult );
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d1d2      	bne.n	800c248 <prvSwitchTimerLists+0x8>
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	e7fe      	b.n	800c2b2 <prvSwitchTimerLists+0x72>
 800c2b4:	24006b34 	.word	0x24006b34
 800c2b8:	24006b38 	.word	0x24006b38

0800c2bc <prvTimerTask>:
{
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2c0:	4f77      	ldr	r7, [pc, #476]	; (800c4a0 <prvTimerTask+0x1e4>)
{
 800c2c2:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800c2c4:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800c4b0 <prvTimerTask+0x1f4>
 800c2c8:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	f8d3 b000 	ldr.w	fp, [r3]
 800c2d0:	f1bb 0f00 	cmp.w	fp, #0
 800c2d4:	d028      	beq.n	800c328 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2d6:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2d8:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2da:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800c2de:	4e71      	ldr	r6, [pc, #452]	; (800c4a4 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800c2e0:	f7ff fb5a 	bl	800b998 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c2e4:	f7ff fb60 	bl	800b9a8 <xTaskGetTickCount>
 800c2e8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c2ea:	6833      	ldr	r3, [r6, #0]
 800c2ec:	46b0      	mov	r8, r6
 800c2ee:	4298      	cmp	r0, r3
 800c2f0:	d31c      	bcc.n	800c32c <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800c2f2:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2f4:	b31c      	cbz	r4, 800c33e <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2f6:	4b6c      	ldr	r3, [pc, #432]	; (800c4a8 <prvTimerTask+0x1ec>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681c      	ldr	r4, [r3, #0]
 800c2fc:	fab4 f484 	clz	r4, r4
 800c300:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c302:	4b6a      	ldr	r3, [pc, #424]	; (800c4ac <prvTimerTask+0x1f0>)
 800c304:	4622      	mov	r2, r4
 800c306:	ebab 0105 	sub.w	r1, fp, r5
 800c30a:	6818      	ldr	r0, [r3, #0]
 800c30c:	f7ff f951 	bl	800b5b2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c310:	f7ff fbe6 	bl	800bae0 <xTaskResumeAll>
 800c314:	b978      	cbnz	r0, 800c336 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800c316:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c31a:	f8ca 3000 	str.w	r3, [sl]
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	e006      	b.n	800c336 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c328:	2401      	movs	r4, #1
 800c32a:	e7d8      	b.n	800c2de <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800c32c:	f7ff ff88 	bl	800c240 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c330:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800c332:	f7ff fbd5 	bl	800bae0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c336:	4e5d      	ldr	r6, [pc, #372]	; (800c4ac <prvTimerTask+0x1f0>)
 800c338:	f04f 0b00 	mov.w	fp, #0
 800c33c:	e035      	b.n	800c3aa <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c33e:	4583      	cmp	fp, r0
 800c340:	d8df      	bhi.n	800c302 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800c342:	f7ff fbcd 	bl	800bae0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c346:	f8d9 3000 	ldr.w	r3, [r9]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c34e:	1d30      	adds	r0, r6, #4
 800c350:	f7fe fa93 	bl	800a87a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c354:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800c358:	0758      	lsls	r0, r3, #29
 800c35a:	d518      	bpl.n	800c38e <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c35c:	69b1      	ldr	r1, [r6, #24]
 800c35e:	465b      	mov	r3, fp
 800c360:	462a      	mov	r2, r5
 800c362:	4630      	mov	r0, r6
 800c364:	4459      	add	r1, fp
 800c366:	f7ff fef1 	bl	800c14c <prvInsertTimerInActiveList>
 800c36a:	b1a0      	cbz	r0, 800c396 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c36c:	4623      	mov	r3, r4
 800c36e:	465a      	mov	r2, fp
 800c370:	4621      	mov	r1, r4
 800c372:	4630      	mov	r0, r6
 800c374:	9400      	str	r4, [sp, #0]
 800c376:	f7ff ff39 	bl	800c1ec <xTimerGenericCommand>
			configASSERT( xResult );
 800c37a:	b960      	cbnz	r0, 800c396 <prvTimerTask+0xda>
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	e7fe      	b.n	800c38c <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c38e:	f023 0301 	bic.w	r3, r3, #1
 800c392:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c396:	6a33      	ldr	r3, [r6, #32]
 800c398:	4630      	mov	r0, r6
 800c39a:	4798      	blx	r3
}
 800c39c:	e7cb      	b.n	800c336 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	9905      	ldr	r1, [sp, #20]
 800c3a2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	da0a      	bge.n	800c3c0 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	a902      	add	r1, sp, #8
 800c3ae:	6830      	ldr	r0, [r6, #0]
 800c3b0:	f7fe ff0c 	bl	800b1cc <xQueueReceive>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d088      	beq.n	800c2ca <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	9804      	ldr	r0, [sp, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dbee      	blt.n	800c39e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3c0:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3c2:	6963      	ldr	r3, [r4, #20]
 800c3c4:	b9a3      	cbnz	r3, 800c3f0 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800c3c6:	f7ff faef 	bl	800b9a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c3ca:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800c3ce:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c3d0:	4298      	cmp	r0, r3
 800c3d2:	d201      	bcs.n	800c3d8 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800c3d4:	f7ff ff34 	bl	800c240 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c3d8:	9b02      	ldr	r3, [sp, #8]
 800c3da:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800c3de:	2b09      	cmp	r3, #9
 800c3e0:	d8e3      	bhi.n	800c3aa <prvTimerTask+0xee>
 800c3e2:	e8df f003 	tbb	[pc, r3]
 800c3e6:	0909      	.short	0x0909
 800c3e8:	543b3409 	.word	0x543b3409
 800c3ec:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3f0:	1d20      	adds	r0, r4, #4
 800c3f2:	f7fe fa42 	bl	800a87a <uxListRemove>
 800c3f6:	e7e6      	b.n	800c3c6 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3fc:	462a      	mov	r2, r5
 800c3fe:	69a1      	ldr	r1, [r4, #24]
 800c400:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	4419      	add	r1, r3
 800c40e:	f7ff fe9d 	bl	800c14c <prvInsertTimerInActiveList>
 800c412:	2800      	cmp	r0, #0
 800c414:	d0c9      	beq.n	800c3aa <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c416:	6a23      	ldr	r3, [r4, #32]
 800c418:	4620      	mov	r0, r4
 800c41a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c41c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c420:	0759      	lsls	r1, r3, #29
 800c422:	d5c2      	bpl.n	800c3aa <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c424:	69a2      	ldr	r2, [r4, #24]
 800c426:	2300      	movs	r3, #0
 800c428:	9903      	ldr	r1, [sp, #12]
 800c42a:	4620      	mov	r0, r4
 800c42c:	f8cd b000 	str.w	fp, [sp]
 800c430:	440a      	add	r2, r1
 800c432:	4619      	mov	r1, r3
 800c434:	f7ff feda 	bl	800c1ec <xTimerGenericCommand>
							configASSERT( xResult );
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1b6      	bne.n	800c3aa <prvTimerTask+0xee>
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	e7fe      	b.n	800c44c <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c44e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c452:	f023 0301 	bic.w	r3, r3, #1
 800c456:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c45a:	e7a6      	b.n	800c3aa <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c45c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c460:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c462:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c466:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c468:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c46c:	b941      	cbnz	r1, 800c480 <prvTimerTask+0x1c4>
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	e7fe      	b.n	800c47e <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c480:	462b      	mov	r3, r5
 800c482:	462a      	mov	r2, r5
 800c484:	4429      	add	r1, r5
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff fe60 	bl	800c14c <prvInsertTimerInActiveList>
					break;
 800c48c:	e78d      	b.n	800c3aa <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c48e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c492:	079a      	lsls	r2, r3, #30
 800c494:	d4dd      	bmi.n	800c452 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800c496:	4620      	mov	r0, r4
 800c498:	f7fe f980 	bl	800a79c <vPortFree>
 800c49c:	e785      	b.n	800c3aa <prvTimerTask+0xee>
 800c49e:	bf00      	nop
 800c4a0:	24006b34 	.word	0x24006b34
 800c4a4:	24006c04 	.word	0x24006c04
 800c4a8:	24006b38 	.word	0x24006b38
 800c4ac:	24006c58 	.word	0x24006c58
 800c4b0:	e000ed04 	.word	0xe000ed04

0800c4b4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c4b4:	8880      	ldrh	r0, [r0, #4]
 800c4b6:	4770      	bx	lr

0800c4b8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	8083      	strh	r3, [r0, #4]
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	6803      	ldr	r3, [r0, #0]
 800c4c4:	460e      	mov	r6, r1
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	4798      	blx	r3
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	1b34      	subs	r4, r6, r4
 800c4d6:	6a1b      	ldr	r3, [r3, #32]
 800c4d8:	b2a4      	uxth	r4, r4
 800c4da:	4798      	blx	r3
 800c4dc:	88ab      	ldrh	r3, [r5, #4]
 800c4de:	fbb4 f4f0 	udiv	r4, r4, r0
 800c4e2:	42a3      	cmp	r3, r4
 800c4e4:	d805      	bhi.n	800c4f2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800c4e8:	211e      	movs	r1, #30
 800c4ea:	4a0e      	ldr	r2, [pc, #56]	; (800c524 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c4ec:	480e      	ldr	r0, [pc, #56]	; (800c528 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c4ee:	f00f fef5 	bl	801c2dc <__assert_func>
 800c4f2:	682b      	ldr	r3, [r5, #0]
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	4798      	blx	r3
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	4607      	mov	r7, r0
 800c500:	4628      	mov	r0, r5
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	4798      	blx	r3
 800c506:	1bf3      	subs	r3, r6, r7
 800c508:	b29b      	uxth	r3, r3
 800c50a:	fbb3 f2f0 	udiv	r2, r3, r0
 800c50e:	fb02 3010 	mls	r0, r2, r0, r3
 800c512:	b118      	cbz	r0, 800c51c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800c516:	211f      	movs	r1, #31
 800c518:	4a02      	ldr	r2, [pc, #8]	; (800c524 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c51a:	e7e7      	b.n	800c4ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800c51c:	4620      	mov	r0, r4
 800c51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c520:	0801e662 	.word	0x0801e662
 800c524:	0801e7ce 	.word	0x0801e7ce
 800c528:	0801e677 	.word	0x0801e677
 800c52c:	0801e6a5 	.word	0x0801e6a5

0800c530 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	6803      	ldr	r3, [r0, #0]
 800c534:	460d      	mov	r5, r1
 800c536:	4604      	mov	r4, r0
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	4798      	blx	r3
 800c53c:	4285      	cmp	r5, r0
 800c53e:	d905      	bls.n	800c54c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800c540:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800c542:	2130      	movs	r1, #48	; 0x30
 800c544:	4a0c      	ldr	r2, [pc, #48]	; (800c578 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c546:	480d      	ldr	r0, [pc, #52]	; (800c57c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800c548:	f00f fec8 	bl	801c2dc <__assert_func>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	4620      	mov	r0, r4
 800c550:	88a5      	ldrh	r5, [r4, #4]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	4798      	blx	r3
 800c556:	4285      	cmp	r5, r0
 800c558:	d303      	bcc.n	800c562 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800c55a:	4b09      	ldr	r3, [pc, #36]	; (800c580 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800c55c:	2131      	movs	r1, #49	; 0x31
 800c55e:	4a06      	ldr	r2, [pc, #24]	; (800c578 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c560:	e7f1      	b.n	800c546 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	4620      	mov	r0, r4
 800c566:	88a1      	ldrh	r1, [r4, #4]
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56a:	4798      	blx	r3
 800c56c:	88a3      	ldrh	r3, [r4, #4]
 800c56e:	3301      	adds	r3, #1
 800c570:	80a3      	strh	r3, [r4, #4]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	0801e71f 	.word	0x0801e71f
 800c578:	0801e811 	.word	0x0801e811
 800c57c:	0801e677 	.word	0x0801e677
 800c580:	0801e736 	.word	0x0801e736

0800c584 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	6803      	ldr	r3, [r0, #0]
 800c588:	4616      	mov	r6, r2
 800c58a:	4604      	mov	r4, r0
 800c58c:	460d      	mov	r5, r1
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	4798      	blx	r3
 800c592:	4286      	cmp	r6, r0
 800c594:	d905      	bls.n	800c5a2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800c596:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800c598:	213a      	movs	r1, #58	; 0x3a
 800c59a:	4a06      	ldr	r2, [pc, #24]	; (800c5b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800c59c:	4806      	ldr	r0, [pc, #24]	; (800c5b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800c59e:	f00f fe9d 	bl	801c2dc <__assert_func>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5ae:	4718      	bx	r3
 800c5b0:	0801e71f 	.word	0x0801e71f
 800c5b4:	0801e784 	.word	0x0801e784
 800c5b8:	0801e677 	.word	0x0801e677

0800c5bc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c5bc:	4770      	bx	lr
	...

0800c5c0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c5c0:	4a02      	ldr	r2, [pc, #8]	; (800c5cc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c5c2:	6002      	str	r2, [r0, #0]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	8082      	strh	r2, [r0, #4]
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	0801e758 	.word	0x0801e758

0800c5d0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800c5d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c5d2:	4770      	bx	lr

0800c5d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c5d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	b12b      	cbz	r3, 800c5e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c5da:	b920      	cbnz	r0, 800c5e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c5dc:	1a5a      	subs	r2, r3, r1
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	4250      	negs	r0, r2
 800c5e2:	4150      	adcs	r0, r2
 800c5e4:	e7f8      	b.n	800c5d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c5e6:	4770      	bx	lr

0800c5e8 <_ZN8touchgfx9Container9removeAllEv>:
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5ec:	b123      	cbz	r3, 800c5f8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c5ee:	6999      	ldr	r1, [r3, #24]
 800c5f0:	6281      	str	r1, [r0, #40]	; 0x28
 800c5f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c5f6:	e7f8      	b.n	800c5ea <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c5f8:	4770      	bx	lr

0800c5fa <_ZN8touchgfx9Container6unlinkEv>:
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	6283      	str	r3, [r0, #40]	; 0x28
 800c5fe:	4770      	bx	lr

0800c600 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c600:	2200      	movs	r2, #0
 800c602:	8002      	strh	r2, [r0, #0]
 800c604:	8042      	strh	r2, [r0, #2]
 800c606:	8082      	strh	r2, [r0, #4]
 800c608:	80c2      	strh	r2, [r0, #6]
 800c60a:	4770      	bx	lr

0800c60c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	460d      	mov	r5, r1
 800c610:	4616      	mov	r6, r2
 800c612:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c614:	b13c      	cbz	r4, 800c626 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	4620      	mov	r0, r4
 800c61a:	4632      	mov	r2, r6
 800c61c:	4629      	mov	r1, r5
 800c61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c620:	4798      	blx	r3
 800c622:	69a4      	ldr	r4, [r4, #24]
 800c624:	e7f6      	b.n	800c614 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c626:	bd70      	pop	{r4, r5, r6, pc}

0800c628 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	460d      	mov	r5, r1
 800c62c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c62e:	b134      	cbz	r4, 800c63e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c630:	682b      	ldr	r3, [r5, #0]
 800c632:	4621      	mov	r1, r4
 800c634:	4628      	mov	r0, r5
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	4798      	blx	r3
 800c63a:	69a4      	ldr	r4, [r4, #24]
 800c63c:	e7f7      	b.n	800c62e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c63e:	bd38      	pop	{r3, r4, r5, pc}

0800c640 <_ZN8touchgfx9ContainerD1Ev>:
 800c640:	4770      	bx	lr

0800c642 <_ZN8touchgfx9ContainerD0Ev>:
 800c642:	b510      	push	{r4, lr}
 800c644:	4604      	mov	r4, r0
 800c646:	212c      	movs	r1, #44	; 0x2c
 800c648:	f00f fd32 	bl	801c0b0 <_ZdlPvj>
 800c64c:	4620      	mov	r0, r4
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c652:	b19b      	cbz	r3, 800c67c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c654:	428b      	cmp	r3, r1
 800c656:	d109      	bne.n	800c66c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	2100      	movs	r1, #0
 800c65c:	6159      	str	r1, [r3, #20]
 800c65e:	6282      	str	r2, [r0, #40]	; 0x28
 800c660:	b902      	cbnz	r2, 800c664 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c662:	4770      	bx	lr
 800c664:	6199      	str	r1, [r3, #24]
 800c666:	4770      	bx	lr
 800c668:	4613      	mov	r3, r2
 800c66a:	b13a      	cbz	r2, 800c67c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c66c:	699a      	ldr	r2, [r3, #24]
 800c66e:	428a      	cmp	r2, r1
 800c670:	d1fa      	bne.n	800c668 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c672:	698a      	ldr	r2, [r1, #24]
 800c674:	619a      	str	r2, [r3, #24]
 800c676:	2300      	movs	r3, #0
 800c678:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c67c:	4770      	bx	lr

0800c67e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c67e:	b410      	push	{r4}
 800c680:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c682:	4604      	mov	r4, r0
 800c684:	b92b      	cbnz	r3, 800c692 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c686:	6803      	ldr	r3, [r0, #0]
 800c688:	4611      	mov	r1, r2
 800c68a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c690:	4718      	bx	r3
 800c692:	b941      	cbnz	r1, 800c6a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c694:	6193      	str	r3, [r2, #24]
 800c696:	6282      	str	r2, [r0, #40]	; 0x28
 800c698:	6154      	str	r4, [r2, #20]
 800c69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d0f9      	beq.n	800c69a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c6a6:	4299      	cmp	r1, r3
 800c6a8:	6998      	ldr	r0, [r3, #24]
 800c6aa:	d1f9      	bne.n	800c6a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c6ac:	6190      	str	r0, [r2, #24]
 800c6ae:	618a      	str	r2, [r1, #24]
 800c6b0:	e7f2      	b.n	800c698 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800c6b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c6b4:	4288      	cmp	r0, r1
 800c6b6:	b508      	push	{r3, lr}
 800c6b8:	d105      	bne.n	800c6c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c6ba:	4b11      	ldr	r3, [pc, #68]	; (800c700 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800c6bc:	2123      	movs	r1, #35	; 0x23
 800c6be:	4a11      	ldr	r2, [pc, #68]	; (800c704 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6c0:	4811      	ldr	r0, [pc, #68]	; (800c708 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c6c2:	f00f fe0b 	bl	801c2dc <__assert_func>
 800c6c6:	694b      	ldr	r3, [r1, #20]
 800c6c8:	b11b      	cbz	r3, 800c6d2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c6cc:	2124      	movs	r1, #36	; 0x24
 800c6ce:	4a0d      	ldr	r2, [pc, #52]	; (800c704 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6d0:	e7f6      	b.n	800c6c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6d2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800c6d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c6d8:	b913      	cbnz	r3, 800c6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c6da:	6281      	str	r1, [r0, #40]	; 0x28
 800c6dc:	bd08      	pop	{r3, pc}
 800c6de:	4613      	mov	r3, r2
 800c6e0:	699a      	ldr	r2, [r3, #24]
 800c6e2:	b12a      	cbz	r2, 800c6f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800c6e4:	428b      	cmp	r3, r1
 800c6e6:	d1fa      	bne.n	800c6de <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c6ea:	2135      	movs	r1, #53	; 0x35
 800c6ec:	4a05      	ldr	r2, [pc, #20]	; (800c704 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6ee:	e7e7      	b.n	800c6c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6f0:	428b      	cmp	r3, r1
 800c6f2:	d103      	bne.n	800c6fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800c6f4:	4b06      	ldr	r3, [pc, #24]	; (800c710 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800c6f6:	2138      	movs	r1, #56	; 0x38
 800c6f8:	4a02      	ldr	r2, [pc, #8]	; (800c704 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c6fa:	e7e1      	b.n	800c6c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c6fc:	6199      	str	r1, [r3, #24]
 800c6fe:	e7ed      	b.n	800c6dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800c700:	0801e84f 	.word	0x0801e84f
 800c704:	0801e9a4 	.word	0x0801e9a4
 800c708:	0801e87b 	.word	0x0801e87b
 800c70c:	0801e8ae 	.word	0x0801e8ae
 800c710:	0801e8e4 	.word	0x0801e8e4

0800c714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	461f      	mov	r7, r3
 800c71a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c71e:	460d      	mov	r5, r1
 800c720:	4616      	mov	r6, r2
 800c722:	b103      	cbz	r3, 800c726 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800c724:	6038      	str	r0, [r7, #0]
 800c726:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c728:	b314      	cbz	r4, 800c770 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c72a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c72e:	b1eb      	cbz	r3, 800c76c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c730:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c734:	428d      	cmp	r5, r1
 800c736:	db19      	blt.n	800c76c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c738:	b289      	uxth	r1, r1
 800c73a:	8923      	ldrh	r3, [r4, #8]
 800c73c:	440b      	add	r3, r1
 800c73e:	b21b      	sxth	r3, r3
 800c740:	429d      	cmp	r5, r3
 800c742:	da13      	bge.n	800c76c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c744:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c748:	4296      	cmp	r6, r2
 800c74a:	db0f      	blt.n	800c76c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c74c:	b292      	uxth	r2, r2
 800c74e:	8963      	ldrh	r3, [r4, #10]
 800c750:	4413      	add	r3, r2
 800c752:	b21b      	sxth	r3, r3
 800c754:	429e      	cmp	r6, r3
 800c756:	da09      	bge.n	800c76c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	1ab2      	subs	r2, r6, r2
 800c75c:	1a69      	subs	r1, r5, r1
 800c75e:	4620      	mov	r0, r4
 800c760:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800c764:	b212      	sxth	r2, r2
 800c766:	463b      	mov	r3, r7
 800c768:	b209      	sxth	r1, r1
 800c76a:	47c0      	blx	r8
 800c76c:	69a4      	ldr	r4, [r4, #24]
 800c76e:	e7db      	b.n	800c728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c774 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c778:	4c6d      	ldr	r4, [pc, #436]	; (800c930 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800c77a:	b0a1      	sub	sp, #132	; 0x84
 800c77c:	4606      	mov	r6, r0
 800c77e:	6824      	ldr	r4, [r4, #0]
 800c780:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800c782:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800c786:	2400      	movs	r4, #0
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	802c      	strh	r4, [r5, #0]
 800c78c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c78e:	802c      	strh	r4, [r5, #0]
 800c790:	601c      	str	r4, [r3, #0]
 800c792:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c796:	f7ff ffbd 	bl	800c714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c79a:	f1b9 0f03 	cmp.w	r9, #3
 800c79e:	f340 80c1 	ble.w	800c924 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	a80c      	add	r0, sp, #48	; 0x30
 800c7a6:	f004 fff1 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c7aa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c7ae:	9306      	str	r3, [sp, #24]
 800c7b0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c7b4:	9307      	str	r3, [sp, #28]
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	f8d3 a000 	ldr.w	sl, [r3]
 800c7bc:	f1ba 0f00 	cmp.w	sl, #0
 800c7c0:	f000 80b3 	beq.w	800c92a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800c7c4:	4651      	mov	r1, sl
 800c7c6:	a810      	add	r0, sp, #64	; 0x40
 800c7c8:	f004 ffe0 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c7cc:	2002      	movs	r0, #2
 800c7ce:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	9a06      	ldr	r2, [sp, #24]
 800c7d6:	fb91 f1f0 	sdiv	r1, r1, r0
 800c7da:	189d      	adds	r5, r3, r2
 800c7dc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800c7e0:	9a07      	ldr	r2, [sp, #28]
 800c7e2:	4419      	add	r1, r3
 800c7e4:	9b02      	ldr	r3, [sp, #8]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800c7ec:	1a6d      	subs	r5, r5, r1
 800c7ee:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800c7f2:	fb92 f2f0 	sdiv	r2, r2, r0
 800c7f6:	440a      	add	r2, r1
 800c7f8:	1a9b      	subs	r3, r3, r2
 800c7fa:	435b      	muls	r3, r3
 800c7fc:	fb05 3505 	mla	r5, r5, r5, r3
 800c800:	4f4c      	ldr	r7, [pc, #304]	; (800c934 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800c802:	ac10      	add	r4, sp, #64	; 0x40
 800c804:	f1b9 0f0c 	cmp.w	r9, #12
 800c808:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c80a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c80c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c80e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c810:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c814:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c81c:	f04f 0303 	mov.w	r3, #3
 800c820:	bfd8      	it	le
 800c822:	f109 32ff 	addle.w	r2, r9, #4294967295
 800c826:	f04f 0400 	mov.w	r4, #0
 800c82a:	f8cd 9000 	str.w	r9, [sp]
 800c82e:	bfcc      	ite	gt
 800c830:	4698      	movgt	r8, r3
 800c832:	fb92 f8f3 	sdivle	r8, r2, r3
 800c836:	1c63      	adds	r3, r4, #1
 800c838:	aa10      	add	r2, sp, #64	; 0x40
 800c83a:	f004 0401 	and.w	r4, r4, #1
 800c83e:	f04f 0b00 	mov.w	fp, #0
 800c842:	9308      	str	r3, [sp, #32]
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800c84a:	fb93 f3f8 	sdiv	r3, r3, r8
 800c84e:	3404      	adds	r4, #4
 800c850:	b29b      	uxth	r3, r3
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	9a04      	ldr	r2, [sp, #16]
 800c856:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c85a:	fb13 f302 	smulbb	r3, r3, r2
 800c85e:	9a01      	ldr	r2, [sp, #4]
 800c860:	b29b      	uxth	r3, r3
 800c862:	1899      	adds	r1, r3, r2
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c86a:	b209      	sxth	r1, r1
 800c86c:	4299      	cmp	r1, r3
 800c86e:	db4d      	blt.n	800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c870:	8932      	ldrh	r2, [r6, #8]
 800c872:	4413      	add	r3, r2
 800c874:	b21b      	sxth	r3, r3
 800c876:	4299      	cmp	r1, r3
 800c878:	da48      	bge.n	800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c87a:	9b04      	ldr	r3, [sp, #16]
 800c87c:	6827      	ldr	r7, [r4, #0]
 800c87e:	fb17 f703 	smulbb	r7, r7, r3
 800c882:	9b02      	ldr	r3, [sp, #8]
 800c884:	b2bf      	uxth	r7, r7
 800c886:	18fa      	adds	r2, r7, r3
 800c888:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c88c:	b212      	sxth	r2, r2
 800c88e:	429a      	cmp	r2, r3
 800c890:	db3c      	blt.n	800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c892:	8970      	ldrh	r0, [r6, #10]
 800c894:	4403      	add	r3, r0
 800c896:	b21b      	sxth	r3, r3
 800c898:	429a      	cmp	r2, r3
 800c89a:	da37      	bge.n	800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c89c:	2300      	movs	r3, #0
 800c89e:	4630      	mov	r0, r6
 800c8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8a2:	ab0b      	add	r3, sp, #44	; 0x2c
 800c8a4:	f7ff ff36 	bl	800c714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c8a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8aa:	b37a      	cbz	r2, 800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8ac:	4552      	cmp	r2, sl
 800c8ae:	d02d      	beq.n	800c90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	a80e      	add	r0, sp, #56	; 0x38
 800c8b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8b6:	f004 ff69 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c8ba:	f04f 0e02 	mov.w	lr, #2
 800c8be:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c8c2:	9a06      	ldr	r2, [sp, #24]
 800c8c4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800c8ce:	4413      	add	r3, r2
 800c8d0:	9a07      	ldr	r2, [sp, #28]
 800c8d2:	fb91 f1fe 	sdiv	r1, r1, lr
 800c8d6:	fb9c fcfe 	sdiv	ip, ip, lr
 800c8da:	4401      	add	r1, r0
 800c8dc:	1a58      	subs	r0, r3, r1
 800c8de:	9b02      	ldr	r3, [sp, #8]
 800c8e0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c8e4:	4413      	add	r3, r2
 800c8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e8:	448c      	add	ip, r1
 800c8ea:	eba3 030c 	sub.w	r3, r3, ip
 800c8ee:	435b      	muls	r3, r3
 800c8f0:	fb00 3300 	mla	r3, r0, r0, r3
 800c8f4:	42ab      	cmp	r3, r5
 800c8f6:	d208      	bcs.n	800c90a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800c8f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8fa:	461d      	mov	r5, r3
 800c8fc:	9803      	ldr	r0, [sp, #12]
 800c8fe:	6001      	str	r1, [r0, #0]
 800c900:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c902:	9805      	ldr	r0, [sp, #20]
 800c904:	8008      	strh	r0, [r1, #0]
 800c906:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c908:	800f      	strh	r7, [r1, #0]
 800c90a:	4692      	mov	sl, r2
 800c90c:	f10b 0b01 	add.w	fp, fp, #1
 800c910:	3408      	adds	r4, #8
 800c912:	f1bb 0f04 	cmp.w	fp, #4
 800c916:	d19d      	bne.n	800c854 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800c918:	9b00      	ldr	r3, [sp, #0]
 800c91a:	9c08      	ldr	r4, [sp, #32]
 800c91c:	444b      	add	r3, r9
 800c91e:	4544      	cmp	r4, r8
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	d188      	bne.n	800c836 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800c924:	b021      	add	sp, #132	; 0x84
 800c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92a:	f04f 35ff 	mov.w	r5, #4294967295
 800c92e:	e767      	b.n	800c800 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800c930:	24006c6c 	.word	0x24006c6c
 800c934:	0801d3e8 	.word	0x0801d3e8

0800c938 <_ZN8touchgfx4RectaNERKS0_>:
 800c938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c93c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c940:	888c      	ldrh	r4, [r1, #4]
 800c942:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c946:	443c      	add	r4, r7
 800c948:	b2a4      	uxth	r4, r4
 800c94a:	fa0f f884 	sxth.w	r8, r4
 800c94e:	45c1      	cmp	r9, r8
 800c950:	da2f      	bge.n	800c9b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c952:	8882      	ldrh	r2, [r0, #4]
 800c954:	444a      	add	r2, r9
 800c956:	b292      	uxth	r2, r2
 800c958:	fa0f fe82 	sxth.w	lr, r2
 800c95c:	4577      	cmp	r7, lr
 800c95e:	da28      	bge.n	800c9b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c960:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c964:	88cb      	ldrh	r3, [r1, #6]
 800c966:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c96a:	442b      	add	r3, r5
 800c96c:	b21b      	sxth	r3, r3
 800c96e:	429e      	cmp	r6, r3
 800c970:	da1f      	bge.n	800c9b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c972:	88c3      	ldrh	r3, [r0, #6]
 800c974:	4433      	add	r3, r6
 800c976:	b29b      	uxth	r3, r3
 800c978:	fa0f fc83 	sxth.w	ip, r3
 800c97c:	4565      	cmp	r5, ip
 800c97e:	da18      	bge.n	800c9b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c980:	454f      	cmp	r7, r9
 800c982:	bfb8      	it	lt
 800c984:	464f      	movlt	r7, r9
 800c986:	42b5      	cmp	r5, r6
 800c988:	bfb8      	it	lt
 800c98a:	4635      	movlt	r5, r6
 800c98c:	45f0      	cmp	r8, lr
 800c98e:	bfd8      	it	le
 800c990:	4622      	movle	r2, r4
 800c992:	1bd2      	subs	r2, r2, r7
 800c994:	8082      	strh	r2, [r0, #4]
 800c996:	884a      	ldrh	r2, [r1, #2]
 800c998:	88c9      	ldrh	r1, [r1, #6]
 800c99a:	8007      	strh	r7, [r0, #0]
 800c99c:	440a      	add	r2, r1
 800c99e:	8045      	strh	r5, [r0, #2]
 800c9a0:	b292      	uxth	r2, r2
 800c9a2:	b211      	sxth	r1, r2
 800c9a4:	458c      	cmp	ip, r1
 800c9a6:	bfa8      	it	ge
 800c9a8:	4613      	movge	r3, r2
 800c9aa:	1b5b      	subs	r3, r3, r5
 800c9ac:	80c3      	strh	r3, [r0, #6]
 800c9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	8003      	strh	r3, [r0, #0]
 800c9b6:	8043      	strh	r3, [r0, #2]
 800c9b8:	8083      	strh	r3, [r0, #4]
 800c9ba:	80c3      	strh	r3, [r0, #6]
 800c9bc:	e7f7      	b.n	800c9ae <_ZN8touchgfx4RectaNERKS0_+0x76>

0800c9be <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c9be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dd06      	ble.n	800c9d4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c9c6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	bfcc      	ite	gt
 800c9ce:	2000      	movgt	r0, #0
 800c9d0:	2001      	movle	r0, #1
 800c9d2:	4770      	bx	lr
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	4770      	bx	lr

0800c9d8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4604      	mov	r4, r0
 800c9e0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c9e2:	8003      	strh	r3, [r0, #0]
 800c9e4:	8043      	strh	r3, [r0, #2]
 800c9e6:	8083      	strh	r3, [r0, #4]
 800c9e8:	80c3      	strh	r3, [r0, #6]
 800c9ea:	2d00      	cmp	r5, #0
 800c9ec:	d040      	beq.n	800ca70 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800c9ee:	1d28      	adds	r0, r5, #4
 800c9f0:	f7ff ffe5 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 800c9f4:	b988      	cbnz	r0, 800ca1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f7ff ffe1 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 800c9fc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ca00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ca04:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ca08:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ca0c:	b138      	cbz	r0, 800ca1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ca0e:	8022      	strh	r2, [r4, #0]
 800ca10:	8063      	strh	r3, [r4, #2]
 800ca12:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ca16:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ca1a:	69ad      	ldr	r5, [r5, #24]
 800ca1c:	e7e5      	b.n	800c9ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ca1e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ca22:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ca26:	4290      	cmp	r0, r2
 800ca28:	4607      	mov	r7, r0
 800ca2a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ca2e:	460e      	mov	r6, r1
 800ca30:	bfa8      	it	ge
 800ca32:	4617      	movge	r7, r2
 800ca34:	4299      	cmp	r1, r3
 800ca36:	4472      	add	r2, lr
 800ca38:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ca3c:	bfa8      	it	ge
 800ca3e:	461e      	movge	r6, r3
 800ca40:	4440      	add	r0, r8
 800ca42:	4471      	add	r1, lr
 800ca44:	4463      	add	r3, ip
 800ca46:	b200      	sxth	r0, r0
 800ca48:	8027      	strh	r7, [r4, #0]
 800ca4a:	b212      	sxth	r2, r2
 800ca4c:	8066      	strh	r6, [r4, #2]
 800ca4e:	b209      	sxth	r1, r1
 800ca50:	b21b      	sxth	r3, r3
 800ca52:	4290      	cmp	r0, r2
 800ca54:	bfac      	ite	ge
 800ca56:	ebc7 0200 	rsbge	r2, r7, r0
 800ca5a:	ebc7 0202 	rsblt	r2, r7, r2
 800ca5e:	4299      	cmp	r1, r3
 800ca60:	bfac      	ite	ge
 800ca62:	ebc6 0301 	rsbge	r3, r6, r1
 800ca66:	ebc6 0303 	rsblt	r3, r6, r3
 800ca6a:	80a2      	strh	r2, [r4, #4]
 800ca6c:	80e3      	strh	r3, [r4, #6]
 800ca6e:	e7d4      	b.n	800ca1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ca70:	4620      	mov	r0, r4
 800ca72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca76 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800ca76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ca7e:	b383      	cbz	r3, 800cae2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ca80:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ca82:	b374      	cbz	r4, 800cae2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ca84:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ca88:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800ca8c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ca90:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ca94:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ca98:	b303      	cbz	r3, 800cadc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ca9a:	4668      	mov	r0, sp
 800ca9c:	1d21      	adds	r1, r4, #4
 800ca9e:	f8ad 5000 	strh.w	r5, [sp]
 800caa2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800caa6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800caaa:	f8ad 8006 	strh.w	r8, [sp, #6]
 800caae:	f7ff ff43 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800cab2:	4668      	mov	r0, sp
 800cab4:	f7ff ff83 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 800cab8:	b980      	cbnz	r0, 800cadc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800caba:	f8bd 3000 	ldrh.w	r3, [sp]
 800cabe:	4669      	mov	r1, sp
 800cac0:	88a2      	ldrh	r2, [r4, #4]
 800cac2:	4620      	mov	r0, r4
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	88e2      	ldrh	r2, [r4, #6]
 800cac8:	f8ad 3000 	strh.w	r3, [sp]
 800cacc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cad0:	1a9b      	subs	r3, r3, r2
 800cad2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	4798      	blx	r3
 800cadc:	69a4      	ldr	r4, [r4, #24]
 800cade:	2c00      	cmp	r4, #0
 800cae0:	d1d8      	bne.n	800ca94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cae8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800cae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800caee:	460d      	mov	r5, r1
 800caf0:	4616      	mov	r6, r2
 800caf2:	b323      	cbz	r3, 800cb3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800caf4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800caf6:	b314      	cbz	r4, 800cb3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800caf8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cafc:	b1eb      	cbz	r3, 800cb3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cafe:	6828      	ldr	r0, [r5, #0]
 800cb00:	466b      	mov	r3, sp
 800cb02:	6869      	ldr	r1, [r5, #4]
 800cb04:	c303      	stmia	r3!, {r0, r1}
 800cb06:	4668      	mov	r0, sp
 800cb08:	1d21      	adds	r1, r4, #4
 800cb0a:	f7ff ff15 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800cb0e:	4668      	mov	r0, sp
 800cb10:	f7ff ff55 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 800cb14:	b988      	cbnz	r0, 800cb3a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800cb16:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb1a:	4669      	mov	r1, sp
 800cb1c:	88a2      	ldrh	r2, [r4, #4]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	1a9b      	subs	r3, r3, r2
 800cb22:	88e2      	ldrh	r2, [r4, #6]
 800cb24:	f8ad 3000 	strh.w	r3, [sp]
 800cb28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	4632      	mov	r2, r6
 800cb30:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb38:	4798      	blx	r3
 800cb3a:	69a4      	ldr	r4, [r4, #24]
 800cb3c:	e7db      	b.n	800caf6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800cb3e:	b002      	add	sp, #8
 800cb40:	bd70      	pop	{r4, r5, r6, pc}

0800cb42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800cb42:	6803      	ldr	r3, [r0, #0]
 800cb44:	b513      	push	{r0, r1, r4, lr}
 800cb46:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e9cd 3300 	strd	r3, r3, [sp]
 800cb50:	466b      	mov	r3, sp
 800cb52:	47a0      	blx	r4
 800cb54:	b002      	add	sp, #8
 800cb56:	bd10      	pop	{r4, pc}

0800cb58 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cb5e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cb62:	4770      	bx	lr

0800cb64 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800cb64:	2301      	movs	r3, #1
 800cb66:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cb6a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cb6e:	4770      	bx	lr

0800cb70 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800cb70:	6843      	ldr	r3, [r0, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	725a      	strb	r2, [r3, #9]
 800cb76:	6840      	ldr	r0, [r0, #4]
 800cb78:	6803      	ldr	r3, [r0, #0]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	4718      	bx	r3

0800cb7e <_ZN8touchgfx3HAL8flushDMAEv>:
 800cb7e:	6840      	ldr	r0, [r0, #4]
 800cb80:	6803      	ldr	r3, [r0, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	4718      	bx	r3

0800cb86 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800cb86:	b530      	push	{r4, r5, lr}
 800cb88:	b08b      	sub	sp, #44	; 0x2c
 800cb8a:	6804      	ldr	r4, [r0, #0]
 800cb8c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800cb90:	9509      	str	r5, [sp, #36]	; 0x24
 800cb92:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800cb96:	9508      	str	r5, [sp, #32]
 800cb98:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800cb9c:	9507      	str	r5, [sp, #28]
 800cb9e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800cba2:	9506      	str	r5, [sp, #24]
 800cba4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800cba8:	9505      	str	r5, [sp, #20]
 800cbaa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800cbae:	9504      	str	r5, [sp, #16]
 800cbb0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800cbb4:	9503      	str	r5, [sp, #12]
 800cbb6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800cbba:	9502      	str	r5, [sp, #8]
 800cbbc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800cbc0:	e9cd 3500 	strd	r3, r5, [sp]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800cbc8:	2200      	movs	r2, #0
 800cbca:	47a0      	blx	r4
 800cbcc:	b00b      	add	sp, #44	; 0x2c
 800cbce:	bd30      	pop	{r4, r5, pc}

0800cbd0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800cbd0:	4b04      	ldr	r3, [pc, #16]	; (800cbe4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b123      	cbz	r3, 800cbe0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800cbd6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800cbda:	f080 0001 	eor.w	r0, r0, #1
 800cbde:	4770      	bx	lr
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	4770      	bx	lr
 800cbe4:	24006c6a 	.word	0x24006c6a

0800cbe8 <_ZN8touchgfx3HAL8endFrameEv>:
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	4604      	mov	r4, r0
 800cbec:	6840      	ldr	r0, [r0, #4]
 800cbee:	6803      	ldr	r3, [r0, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	4798      	blx	r3
 800cbf4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800cbf8:	b113      	cbz	r3, 800cc00 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cc00:	bd10      	pop	{r4, pc}

0800cc02 <_ZN8touchgfx3HAL10initializeEv>:
 800cc02:	b510      	push	{r4, lr}
 800cc04:	4604      	mov	r4, r0
 800cc06:	f7f5 fad9 	bl	80021bc <_ZN8touchgfx10OSWrappers10initializeEv>
 800cc0a:	6860      	ldr	r0, [r4, #4]
 800cc0c:	6803      	ldr	r3, [r0, #0]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	4798      	blx	r3
 800cc12:	68e0      	ldr	r0, [r4, #12]
 800cc14:	6803      	ldr	r3, [r0, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	4798      	blx	r3
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc24:	4718      	bx	r3
	...

0800cc28 <_ZN8touchgfx3HAL4tickEv>:
 800cc28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cc2a:	6803      	ldr	r3, [r0, #0]
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4d5c      	ldr	r5, [pc, #368]	; (800cda0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800cc30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc34:	4798      	blx	r3
 800cc36:	2800      	cmp	r0, #0
 800cc38:	f000 8097 	beq.w	800cd6a <_ZN8touchgfx3HAL4tickEv+0x142>
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	2600      	movs	r6, #0
 800cc40:	f7f5 f93a 	bl	8001eb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cc44:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800cc48:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800cc4c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cc50:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cc54:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800cc58:	b133      	cbz	r3, 800cc68 <_ZN8touchgfx3HAL4tickEv+0x40>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cc62:	4798      	blx	r3
 800cc64:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800cc68:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800cc6c:	2601      	movs	r6, #1
 800cc6e:	6862      	ldr	r2, [r4, #4]
 800cc70:	f083 0301 	eor.w	r3, r3, #1
 800cc74:	702e      	strb	r6, [r5, #0]
 800cc76:	7253      	strb	r3, [r2, #9]
 800cc78:	f003 fd6e 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 800cc7c:	6803      	ldr	r3, [r0, #0]
 800cc7e:	4631      	mov	r1, r6
 800cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc82:	4798      	blx	r3
 800cc84:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cc88:	b90b      	cbnz	r3, 800cc8e <_ZN8touchgfx3HAL4tickEv+0x66>
 800cc8a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800cc8e:	f003 fd63 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 800cc92:	6803      	ldr	r3, [r0, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	4798      	blx	r3
 800cc98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9a:	6803      	ldr	r3, [r0, #0]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	4798      	blx	r3
 800cca0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cca4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ccb0:	b10a      	cbz	r2, 800ccb6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1eb      	bne.n	800cc8e <_ZN8touchgfx3HAL4tickEv+0x66>
 800ccb6:	4a3b      	ldr	r2, [pc, #236]	; (800cda4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ccb8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ccbc:	7813      	ldrb	r3, [r2, #0]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	4299      	cmp	r1, r3
 800ccc4:	7013      	strb	r3, [r2, #0]
 800ccc6:	dc10      	bgt.n	800ccea <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	68e0      	ldr	r0, [r4, #12]
 800cccc:	a902      	add	r1, sp, #8
 800ccce:	7013      	strb	r3, [r2, #0]
 800ccd0:	aa03      	add	r2, sp, #12
 800ccd2:	6803      	ldr	r3, [r0, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	4798      	blx	r3
 800ccd8:	6823      	ldr	r3, [r4, #0]
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d051      	beq.n	800cd82 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ccde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cce2:	4620      	mov	r0, r4
 800cce4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cce8:	4798      	blx	r3
 800ccea:	2300      	movs	r3, #0
 800ccec:	6960      	ldr	r0, [r4, #20]
 800ccee:	f88d 3007 	strb.w	r3, [sp, #7]
 800ccf2:	b158      	cbz	r0, 800cd0c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ccf4:	6803      	ldr	r3, [r0, #0]
 800ccf6:	f10d 0107 	add.w	r1, sp, #7
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	4798      	blx	r3
 800ccfe:	b128      	cbz	r0, 800cd0c <_ZN8touchgfx3HAL4tickEv+0xe4>
 800cd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd02:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	4798      	blx	r3
 800cd0c:	f104 001c 	add.w	r0, r4, #28
 800cd10:	f00f f8f6 	bl	801bf00 <_ZN8touchgfx8Gestures4tickEv>
 800cd14:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800cd18:	b30b      	cbz	r3, 800cd5e <_ZN8touchgfx3HAL4tickEv+0x136>
 800cd1a:	6920      	ldr	r0, [r4, #16]
 800cd1c:	6803      	ldr	r3, [r0, #0]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	4798      	blx	r3
 800cd22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd24:	4606      	mov	r6, r0
 800cd26:	b903      	cbnz	r3, 800cd2a <_ZN8touchgfx3HAL4tickEv+0x102>
 800cd28:	6720      	str	r0, [r4, #112]	; 0x70
 800cd2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd2c:	4a1e      	ldr	r2, [pc, #120]	; (800cda8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800cd2e:	1af3      	subs	r3, r6, r3
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d914      	bls.n	800cd5e <_ZN8touchgfx3HAL4tickEv+0x136>
 800cd34:	6920      	ldr	r0, [r4, #16]
 800cd36:	6803      	ldr	r3, [r0, #0]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	4798      	blx	r3
 800cd3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd3e:	2264      	movs	r2, #100	; 0x64
 800cd40:	1af3      	subs	r3, r6, r3
 800cd42:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd46:	fbb0 f0f3 	udiv	r0, r0, r3
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	dc1e      	bgt.n	800cd8c <_ZN8touchgfx3HAL4tickEv+0x164>
 800cd4e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800cd52:	6920      	ldr	r0, [r4, #16]
 800cd54:	2100      	movs	r1, #0
 800cd56:	6803      	ldr	r3, [r0, #0]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	4798      	blx	r3
 800cd5c:	6726      	str	r6, [r4, #112]	; 0x70
 800cd5e:	f003 fcfb 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 800cd62:	6803      	ldr	r3, [r0, #0]
 800cd64:	2100      	movs	r1, #0
 800cd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd68:	4798      	blx	r3
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd72:	4798      	blx	r3
 800cd74:	2001      	movs	r0, #1
 800cd76:	f7f5 f8b7 	bl	8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	702b      	strb	r3, [r5, #0]
 800cd7e:	b004      	add	sp, #16
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
 800cd82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd86:	4620      	mov	r0, r4
 800cd88:	4798      	blx	r3
 800cd8a:	e7ae      	b.n	800ccea <_ZN8touchgfx3HAL4tickEv+0xc2>
 800cd8c:	2863      	cmp	r0, #99	; 0x63
 800cd8e:	bfcb      	itete	gt
 800cd90:	2300      	movgt	r3, #0
 800cd92:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800cd96:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800cd9a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800cd9e:	e7d8      	b.n	800cd52 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800cda0:	24006c70 	.word	0x24006c70
 800cda4:	24006c71 	.word	0x24006c71
 800cda8:	05f5e100 	.word	0x05f5e100

0800cdac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800cdac:	f7f5 ba36 	b.w	800221c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800cdb0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800cdb0:	6581      	str	r1, [r0, #88]	; 0x58
 800cdb2:	301c      	adds	r0, #28
 800cdb4:	f00f b8a2 	b.w	801befc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800cdb8 <_ZN8touchgfx3HAL5touchEll>:
 800cdb8:	b530      	push	{r4, r5, lr}
 800cdba:	b087      	sub	sp, #28
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	a804      	add	r0, sp, #16
 800cdc0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800cdc4:	f003 fa62 	bl	801028c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800cdc8:	9b04      	ldr	r3, [sp, #16]
 800cdca:	a906      	add	r1, sp, #24
 800cdcc:	a803      	add	r0, sp, #12
 800cdce:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cdd2:	9b05      	ldr	r3, [sp, #20]
 800cdd4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800cdd8:	f003 faaa 	bl	8010330 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800cddc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800cde0:	f104 001c 	add.w	r0, r4, #28
 800cde4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800cde8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cdec:	b189      	cbz	r1, 800ce12 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800cdee:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	f00f f88e 	bl	801bf1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ce00:	b128      	cbz	r0, 800ce0e <_ZN8touchgfx3HAL5touchEll+0x56>
 800ce02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ce06:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ce08:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ce0c:	6623      	str	r3, [r4, #96]	; 0x60
 800ce0e:	b007      	add	sp, #28
 800ce10:	bd30      	pop	{r4, r5, pc}
 800ce12:	f00f f8c7 	bl	801bfa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ce16:	2301      	movs	r3, #1
 800ce18:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ce1c:	e7f1      	b.n	800ce02 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ce1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d046      	beq.n	800ceb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce24:	ea81 0002 	eor.w	r0, r1, r2
 800ce28:	07c4      	lsls	r4, r0, #31
 800ce2a:	d508      	bpl.n	800ce3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ce2c:	440b      	add	r3, r1
 800ce2e:	3a01      	subs	r2, #1
 800ce30:	428b      	cmp	r3, r1
 800ce32:	d93e      	bls.n	800ceb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce34:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce38:	f801 0b01 	strb.w	r0, [r1], #1
 800ce3c:	e7f8      	b.n	800ce30 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ce3e:	07d0      	lsls	r0, r2, #31
 800ce40:	bf42      	ittt	mi
 800ce42:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800ce46:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800ce4a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d911      	bls.n	800ce76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ce52:	ea81 0402 	eor.w	r4, r1, r2
 800ce56:	4610      	mov	r0, r2
 800ce58:	07a4      	lsls	r4, r4, #30
 800ce5a:	d022      	beq.n	800cea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800ce5c:	f023 0401 	bic.w	r4, r3, #1
 800ce60:	440c      	add	r4, r1
 800ce62:	428c      	cmp	r4, r1
 800ce64:	4602      	mov	r2, r0
 800ce66:	d904      	bls.n	800ce72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800ce68:	8812      	ldrh	r2, [r2, #0]
 800ce6a:	3002      	adds	r0, #2
 800ce6c:	f821 2b02 	strh.w	r2, [r1], #2
 800ce70:	e7f7      	b.n	800ce62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	f023 0003 	bic.w	r0, r3, #3
 800ce7a:	4408      	add	r0, r1
 800ce7c:	4288      	cmp	r0, r1
 800ce7e:	4614      	mov	r4, r2
 800ce80:	d904      	bls.n	800ce8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800ce82:	6824      	ldr	r4, [r4, #0]
 800ce84:	3204      	adds	r2, #4
 800ce86:	f841 4b04 	str.w	r4, [r1], #4
 800ce8a:	e7f7      	b.n	800ce7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800ce8c:	f003 0303 	and.w	r3, r3, #3
 800ce90:	3a01      	subs	r2, #1
 800ce92:	440b      	add	r3, r1
 800ce94:	428b      	cmp	r3, r1
 800ce96:	d90c      	bls.n	800ceb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ce98:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce9c:	f801 0b01 	strb.w	r0, [r1], #1
 800cea0:	e7f8      	b.n	800ce94 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800cea2:	0790      	lsls	r0, r2, #30
 800cea4:	d0e7      	beq.n	800ce76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800cea6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ceaa:	3b02      	subs	r3, #2
 800ceac:	f821 0b02 	strh.w	r0, [r1], #2
 800ceb0:	e7e1      	b.n	800ce76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	bd10      	pop	{r4, pc}

0800ceb6 <_ZN8touchgfx3HAL7noTouchEv>:
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800cebc:	4604      	mov	r4, r0
 800cebe:	b153      	cbz	r3, 800ced6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800cec0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800cec4:	2101      	movs	r1, #1
 800cec6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ceca:	301c      	adds	r0, #28
 800cecc:	f00f f86a 	bl	801bfa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ced0:	2300      	movs	r3, #0
 800ced2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ced6:	bd10      	pop	{r4, pc}

0800ced8 <_ZN8touchgfx3HAL3lcdEv>:
 800ced8:	4b04      	ldr	r3, [pc, #16]	; (800ceec <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cee0:	b10a      	cbz	r2, 800cee6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800cee2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cee4:	b900      	cbnz	r0, 800cee8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800cee6:	6898      	ldr	r0, [r3, #8]
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	24006c6c 	.word	0x24006c6c

0800cef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cef4:	4604      	mov	r4, r0
 800cef6:	6980      	ldr	r0, [r0, #24]
 800cef8:	b085      	sub	sp, #20
 800cefa:	460f      	mov	r7, r1
 800cefc:	4690      	mov	r8, r2
 800cefe:	4699      	mov	r9, r3
 800cf00:	b930      	cbnz	r0, 800cf10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800cf02:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800cf04:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800cf08:	4a1b      	ldr	r2, [pc, #108]	; (800cf78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cf0a:	481c      	ldr	r0, [pc, #112]	; (800cf7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800cf0c:	f00f f9e6 	bl	801c2dc <__assert_func>
 800cf10:	ad04      	add	r5, sp, #16
 800cf12:	2600      	movs	r6, #0
 800cf14:	f845 6d04 	str.w	r6, [r5, #-4]!
 800cf18:	6806      	ldr	r6, [r0, #0]
 800cf1a:	9501      	str	r5, [sp, #4]
 800cf1c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800cf20:	9500      	str	r5, [sp, #0]
 800cf22:	6835      	ldr	r5, [r6, #0]
 800cf24:	47a8      	blx	r5
 800cf26:	4d16      	ldr	r5, [pc, #88]	; (800cf80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800cf28:	4606      	mov	r6, r0
 800cf2a:	f8a5 9000 	strh.w	r9, [r5]
 800cf2e:	f7ff ffd3 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf36:	4798      	blx	r3
 800cf38:	2801      	cmp	r0, #1
 800cf3a:	d012      	beq.n	800cf62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800cf3c:	d306      	bcc.n	800cf4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800cf3e:	280d      	cmp	r0, #13
 800cf40:	d80b      	bhi.n	800cf5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800cf44:	f240 1167 	movw	r1, #359	; 0x167
 800cf48:	4a0b      	ldr	r2, [pc, #44]	; (800cf78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800cf4a:	e7de      	b.n	800cf0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800cf4c:	882b      	ldrh	r3, [r5, #0]
 800cf4e:	fb08 7203 	mla	r2, r8, r3, r7
 800cf52:	9b03      	ldr	r3, [sp, #12]
 800cf54:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800cf58:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	b005      	add	sp, #20
 800cf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf62:	882a      	ldrh	r2, [r5, #0]
 800cf64:	9b03      	ldr	r3, [sp, #12]
 800cf66:	fb08 7202 	mla	r2, r8, r2, r7
 800cf6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cf6e:	1a9a      	subs	r2, r3, r2
 800cf70:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cf72:	e7f2      	b.n	800cf5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800cf74:	0801eb4c 	.word	0x0801eb4c
 800cf78:	0801ee0a 	.word	0x0801ee0a
 800cf7c:	0801eb91 	.word	0x0801eb91
 800cf80:	24006c66 	.word	0x24006c66
 800cf84:	0801ebb7 	.word	0x0801ebb7

0800cf88 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8a:	b08b      	sub	sp, #44	; 0x2c
 800cf8c:	4617      	mov	r7, r2
 800cf8e:	4604      	mov	r4, r0
 800cf90:	460e      	mov	r6, r1
 800cf92:	461d      	mov	r5, r3
 800cf94:	f7ff ffa0 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800cf98:	6803      	ldr	r3, [r0, #0]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9c:	4798      	blx	r3
 800cf9e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cfa2:	9007      	str	r0, [sp, #28]
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	6822      	ldr	r2, [r4, #0]
 800cfa8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800cfac:	4b0c      	ldr	r3, [pc, #48]	; (800cfe0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800cfae:	4620      	mov	r0, r4
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	9306      	str	r3, [sp, #24]
 800cfb4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cfb8:	9305      	str	r3, [sp, #20]
 800cfba:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800cfbe:	9304      	str	r3, [sp, #16]
 800cfc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cfc4:	9303      	str	r3, [sp, #12]
 800cfc6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cfca:	9302      	str	r3, [sp, #8]
 800cfcc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cfd0:	e9cd 5300 	strd	r5, r3, [sp]
 800cfd4:	463b      	mov	r3, r7
 800cfd6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800cfd8:	2200      	movs	r2, #0
 800cfda:	47a8      	blx	r5
 800cfdc:	b00b      	add	sp, #44	; 0x2c
 800cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe0:	24006c66 	.word	0x24006c66

0800cfe4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800cfe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	4698      	mov	r8, r3
 800cfea:	6803      	ldr	r3, [r0, #0]
 800cfec:	b08b      	sub	sp, #44	; 0x2c
 800cfee:	4617      	mov	r7, r2
 800cff0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800cff2:	460e      	mov	r6, r1
 800cff4:	4b13      	ldr	r3, [pc, #76]	; (800d044 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800cff6:	4604      	mov	r4, r0
 800cff8:	f8b3 9000 	ldrh.w	r9, [r3]
 800cffc:	f7ff ff6c 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d000:	6803      	ldr	r3, [r0, #0]
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	4798      	blx	r3
 800d006:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d00a:	2200      	movs	r2, #0
 800d00c:	4631      	mov	r1, r6
 800d00e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d012:	2302      	movs	r3, #2
 800d014:	4620      	mov	r0, r4
 800d016:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d01a:	2301      	movs	r3, #1
 800d01c:	9305      	str	r3, [sp, #20]
 800d01e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d022:	9304      	str	r3, [sp, #16]
 800d024:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d028:	9303      	str	r3, [sp, #12]
 800d02a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d02e:	9302      	str	r3, [sp, #8]
 800d030:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d034:	e9cd 8300 	strd	r8, r3, [sp]
 800d038:	463b      	mov	r3, r7
 800d03a:	47a8      	blx	r5
 800d03c:	b00b      	add	sp, #44	; 0x2c
 800d03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d042:	bf00      	nop
 800d044:	24006c66 	.word	0x24006c66

0800d048 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d04c:	4698      	mov	r8, r3
 800d04e:	6803      	ldr	r3, [r0, #0]
 800d050:	b087      	sub	sp, #28
 800d052:	460e      	mov	r6, r1
 800d054:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d056:	4617      	mov	r7, r2
 800d058:	4b0f      	ldr	r3, [pc, #60]	; (800d098 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d05a:	4604      	mov	r4, r0
 800d05c:	f8b3 9000 	ldrh.w	r9, [r3]
 800d060:	f7ff ff3a 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d064:	6803      	ldr	r3, [r0, #0]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	4798      	blx	r3
 800d06a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d06e:	463a      	mov	r2, r7
 800d070:	4631      	mov	r1, r6
 800d072:	f8cd 900c 	str.w	r9, [sp, #12]
 800d076:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d07a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d07e:	4620      	mov	r0, r4
 800d080:	9302      	str	r3, [sp, #8]
 800d082:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d086:	9301      	str	r3, [sp, #4]
 800d088:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	4643      	mov	r3, r8
 800d090:	47a8      	blx	r5
 800d092:	b007      	add	sp, #28
 800d094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d098:	24006c66 	.word	0x24006c66

0800d09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	b08f      	sub	sp, #60	; 0x3c
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	4691      	mov	r9, r2
 800d0aa:	461e      	mov	r6, r3
 800d0ac:	f006 fc4a 	bl	8013944 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f000 809c 	beq.w	800d1ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800d0be:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c4:	4798      	blx	r3
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d0:	4798      	blx	r3
 800d0d2:	f8bb 3000 	ldrh.w	r3, [fp]
 800d0d6:	4f5b      	ldr	r7, [pc, #364]	; (800d244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	f8ba 3000 	ldrh.w	r3, [sl]
 800d0de:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	9302      	str	r3, [sp, #8]
 800d0e6:	883b      	ldrh	r3, [r7, #0]
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	4b57      	ldr	r3, [pc, #348]	; (800d248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d0ec:	881a      	ldrh	r2, [r3, #0]
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	9204      	str	r2, [sp, #16]
 800d0f2:	f006 fce1 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d0f6:	8038      	strh	r0, [r7, #0]
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	f006 fd17 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d0fe:	9b05      	ldr	r3, [sp, #20]
 800d100:	8018      	strh	r0, [r3, #0]
 800d102:	4b52      	ldr	r3, [pc, #328]	; (800d24c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d174      	bne.n	800d1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800d10a:	883b      	ldrh	r3, [r7, #0]
 800d10c:	f8aa 0000 	strh.w	r0, [sl]
 800d110:	f8ab 3000 	strh.w	r3, [fp]
 800d114:	4648      	mov	r0, r9
 800d116:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d11a:	f006 fc13 	bl	8013944 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d11e:	2200      	movs	r2, #0
 800d120:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d124:	4611      	mov	r1, r2
 800d126:	4628      	mov	r0, r5
 800d128:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d12c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d130:	f7f6 f870 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 800d134:	2301      	movs	r3, #1
 800d136:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d13a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d13e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	dd5c      	ble.n	800d200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d146:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dd58      	ble.n	800d200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d14e:	462a      	mov	r2, r5
 800d150:	ab0a      	add	r3, sp, #40	; 0x28
 800d152:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d156:	6851      	ldr	r1, [r2, #4]
 800d158:	c303      	stmia	r3!, {r0, r1}
 800d15a:	4631      	mov	r1, r6
 800d15c:	a80a      	add	r0, sp, #40	; 0x28
 800d15e:	f7ff fbeb 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800d162:	4b38      	ldr	r3, [pc, #224]	; (800d244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d164:	2100      	movs	r1, #0
 800d166:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d16a:	4b37      	ldr	r3, [pc, #220]	; (800d248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d16c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d170:	aa0a      	add	r2, sp, #40	; 0x28
 800d172:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d176:	910c      	str	r1, [sp, #48]	; 0x30
 800d178:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d17c:	ab08      	add	r3, sp, #32
 800d17e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d182:	e883 0003 	stmia.w	r3, {r0, r1}
 800d186:	4618      	mov	r0, r3
 800d188:	a90c      	add	r1, sp, #48	; 0x30
 800d18a:	f7ff fbd5 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800d18e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d13c      	bne.n	800d20e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800d194:	2000      	movs	r0, #0
 800d196:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d19a:	2600      	movs	r6, #0
 800d19c:	696b      	ldr	r3, [r5, #20]
 800d19e:	a908      	add	r1, sp, #32
 800d1a0:	682a      	ldr	r2, [r5, #0]
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	9305      	str	r3, [sp, #20]
 800d1a6:	616e      	str	r6, [r5, #20]
 800d1a8:	6892      	ldr	r2, [r2, #8]
 800d1aa:	4790      	blx	r2
 800d1ac:	9b05      	ldr	r3, [sp, #20]
 800d1ae:	4652      	mov	r2, sl
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	616b      	str	r3, [r5, #20]
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d1ba:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d1be:	f7f6 f829 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 800d1c2:	9a01      	ldr	r2, [sp, #4]
 800d1c4:	4b22      	ldr	r3, [pc, #136]	; (800d250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	801a      	strh	r2, [r3, #0]
 800d1ca:	9a02      	ldr	r2, [sp, #8]
 800d1cc:	4b21      	ldr	r3, [pc, #132]	; (800d254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d1ce:	801a      	strh	r2, [r3, #0]
 800d1d0:	9a03      	ldr	r2, [sp, #12]
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d1d4:	801a      	strh	r2, [r3, #0]
 800d1d6:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d1d8:	9a04      	ldr	r2, [sp, #16]
 800d1da:	801a      	strh	r2, [r3, #0]
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e4:	4798      	blx	r3
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ec:	4798      	blx	r3
 800d1ee:	b00f      	add	sp, #60	; 0x3c
 800d1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f4:	883b      	ldrh	r3, [r7, #0]
 800d1f6:	f8ab 0000 	strh.w	r0, [fp]
 800d1fa:	f8aa 3000 	strh.w	r3, [sl]
 800d1fe:	e789      	b.n	800d114 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800d200:	462a      	mov	r2, r5
 800d202:	ab0a      	add	r3, sp, #40	; 0x28
 800d204:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d208:	6851      	ldr	r1, [r2, #4]
 800d20a:	c303      	stmia	r3!, {r0, r1}
 800d20c:	e7a9      	b.n	800d162 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d20e:	a807      	add	r0, sp, #28
 800d210:	f006 fde4 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d214:	4606      	mov	r6, r0
 800d216:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d218:	6803      	ldr	r3, [r0, #0]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	4798      	blx	r3
 800d21e:	4286      	cmp	r6, r0
 800d220:	d1b8      	bne.n	800d194 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800d222:	f7ff fe59 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d226:	6803      	ldr	r3, [r0, #0]
 800d228:	4606      	mov	r6, r0
 800d22a:	a807      	add	r0, sp, #28
 800d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22e:	9305      	str	r3, [sp, #20]
 800d230:	f006 fdd4 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d234:	9b05      	ldr	r3, [sp, #20]
 800d236:	4601      	mov	r1, r0
 800d238:	4630      	mov	r0, r6
 800d23a:	4798      	blx	r3
 800d23c:	f080 0001 	eor.w	r0, r0, #1
 800d240:	b2c0      	uxtb	r0, r0
 800d242:	e7a8      	b.n	800d196 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d244:	24006c60 	.word	0x24006c60
 800d248:	24006c62 	.word	0x24006c62
 800d24c:	24006c64 	.word	0x24006c64
 800d250:	24006c66 	.word	0x24006c66
 800d254:	24006c68 	.word	0x24006c68

0800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d258:	4b07      	ldr	r3, [pc, #28]	; (800d278 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d25a:	b510      	push	{r4, lr}
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	4604      	mov	r4, r0
 800d260:	b13b      	cbz	r3, 800d272 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d262:	6803      	ldr	r3, [r0, #0]
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	4798      	blx	r3
 800d268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d26a:	4283      	cmp	r3, r0
 800d26c:	d101      	bne.n	800d272 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d26e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d270:	bd10      	pop	{r4, pc}
 800d272:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d274:	e7fc      	b.n	800d270 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d276:	bf00      	nop
 800d278:	24006c6a 	.word	0x24006c6a

0800d27c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	b088      	sub	sp, #32
 800d282:	4692      	mov	sl, r2
 800d284:	461d      	mov	r5, r3
 800d286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d28a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800d28e:	2400      	movs	r4, #0
 800d290:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800d294:	4606      	mov	r6, r0
 800d296:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800d29a:	fb09 a505 	mla	r5, r9, r5, sl
 800d29e:	9403      	str	r4, [sp, #12]
 800d2a0:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d2a4:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d2a8:	f88d 401c 	strb.w	r4, [sp, #28]
 800d2ac:	e9cd 3100 	strd	r3, r1, [sp]
 800d2b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d2b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d2b8:	f7ff ffce 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d2bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d2c0:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d2c4:	f88d 401e 	strb.w	r4, [sp, #30]
 800d2c8:	9504      	str	r5, [sp, #16]
 800d2ca:	f88d 401d 	strb.w	r4, [sp, #29]
 800d2ce:	f88d 401f 	strb.w	r4, [sp, #31]
 800d2d2:	f1b8 0f00 	cmp.w	r8, #0
 800d2d6:	d000      	beq.n	800d2da <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800d2d8:	b937      	cbnz	r7, 800d2e8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800d2da:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800d2dc:	f240 210b 	movw	r1, #523	; 0x20b
 800d2e0:	4a0c      	ldr	r2, [pc, #48]	; (800d314 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d2e2:	480d      	ldr	r0, [pc, #52]	; (800d318 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d2e4:	f00e fffa 	bl	801c2dc <__assert_func>
 800d2e8:	6833      	ldr	r3, [r6, #0]
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	9c00      	ldr	r4, [sp, #0]
 800d2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f0:	4798      	blx	r3
 800d2f2:	4220      	tst	r0, r4
 800d2f4:	d104      	bne.n	800d300 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800d2f8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800d2fc:	4a05      	ldr	r2, [pc, #20]	; (800d314 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d2fe:	e7f0      	b.n	800d2e2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800d300:	6870      	ldr	r0, [r6, #4]
 800d302:	4669      	mov	r1, sp
 800d304:	6803      	ldr	r3, [r0, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	4798      	blx	r3
 800d30a:	b008      	add	sp, #32
 800d30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d310:	0801e9df 	.word	0x0801e9df
 800d314:	0801ec3f 	.word	0x0801ec3f
 800d318:	0801eb91 	.word	0x0801eb91
 800d31c:	0801ea17 	.word	0x0801ea17

0800d320 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	b089      	sub	sp, #36	; 0x24
 800d326:	4693      	mov	fp, r2
 800d328:	461d      	mov	r5, r3
 800d32a:	2400      	movs	r4, #0
 800d32c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800d330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d334:	468a      	mov	sl, r1
 800d336:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800d33a:	fb09 b505 	mla	r5, r9, r5, fp
 800d33e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d342:	4606      	mov	r6, r0
 800d344:	9403      	str	r4, [sp, #12]
 800d346:	e9cd 3400 	strd	r3, r4, [sp]
 800d34a:	f7ff ff85 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d34e:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d352:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d356:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d35a:	f8ad 4018 	strh.w	r4, [sp, #24]
 800d35e:	9504      	str	r5, [sp, #16]
 800d360:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d364:	f8cd a00c 	str.w	sl, [sp, #12]
 800d368:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d36c:	f88d 401e 	strb.w	r4, [sp, #30]
 800d370:	f88d 401f 	strb.w	r4, [sp, #31]
 800d374:	f1b8 0f00 	cmp.w	r8, #0
 800d378:	d000      	beq.n	800d37c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800d37a:	b937      	cbnz	r7, 800d38a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800d37c:	4b0d      	ldr	r3, [pc, #52]	; (800d3b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800d37e:	f240 2121 	movw	r1, #545	; 0x221
 800d382:	4a0d      	ldr	r2, [pc, #52]	; (800d3b8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d384:	480d      	ldr	r0, [pc, #52]	; (800d3bc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800d386:	f00e ffa9 	bl	801c2dc <__assert_func>
 800d38a:	6833      	ldr	r3, [r6, #0]
 800d38c:	4630      	mov	r0, r6
 800d38e:	9c00      	ldr	r4, [sp, #0]
 800d390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d392:	4798      	blx	r3
 800d394:	4220      	tst	r0, r4
 800d396:	d104      	bne.n	800d3a2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800d39a:	f240 2122 	movw	r1, #546	; 0x222
 800d39e:	4a06      	ldr	r2, [pc, #24]	; (800d3b8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d3a0:	e7f0      	b.n	800d384 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800d3a2:	6870      	ldr	r0, [r6, #4]
 800d3a4:	4669      	mov	r1, sp
 800d3a6:	6803      	ldr	r3, [r0, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	4798      	blx	r3
 800d3ac:	b009      	add	sp, #36	; 0x24
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	bf00      	nop
 800d3b4:	0801ea5c 	.word	0x0801ea5c
 800d3b8:	0801ecb5 	.word	0x0801ecb5
 800d3bc:	0801eb91 	.word	0x0801eb91
 800d3c0:	0801ea94 	.word	0x0801ea94

0800d3c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800d3c4:	b508      	push	{r3, lr}
 800d3c6:	290d      	cmp	r1, #13
 800d3c8:	d817      	bhi.n	800d3fa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800d3ca:	e8df f001 	tbb	[pc, r1]
 800d3ce:	090b      	.short	0x090b
 800d3d0:	0d0d0d07 	.word	0x0d0d0d07
 800d3d4:	1414140d 	.word	0x1414140d
 800d3d8:	0d0d1414 	.word	0x0d0d1414
 800d3dc:	2020      	movs	r0, #32
 800d3de:	bd08      	pop	{r3, pc}
 800d3e0:	2018      	movs	r0, #24
 800d3e2:	e7fc      	b.n	800d3de <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3e4:	2010      	movs	r0, #16
 800d3e6:	e7fa      	b.n	800d3de <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3e8:	4b05      	ldr	r3, [pc, #20]	; (800d400 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800d3ea:	f240 2182 	movw	r1, #642	; 0x282
 800d3ee:	4a05      	ldr	r2, [pc, #20]	; (800d404 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800d3f0:	4805      	ldr	r0, [pc, #20]	; (800d408 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800d3f2:	f00e ff73 	bl	801c2dc <__assert_func>
 800d3f6:	2008      	movs	r0, #8
 800d3f8:	e7f1      	b.n	800d3de <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e7ef      	b.n	800d3de <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d3fe:	bf00      	nop
 800d400:	0801ec0d 	.word	0x0801ec0d
 800d404:	0801efe0 	.word	0x0801efe0
 800d408:	0801eb91 	.word	0x0801eb91

0800d40c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	460d      	mov	r5, r1
 800d410:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d414:	4616      	mov	r6, r2
 800d416:	461c      	mov	r4, r3
 800d418:	f7ff ffd4 	bl	800d3c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800d41c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d420:	10c0      	asrs	r0, r0, #3
 800d422:	fb06 5101 	mla	r1, r6, r1, r5
 800d426:	fb00 4001 	mla	r0, r0, r1, r4
 800d42a:	bd70      	pop	{r4, r5, r6, pc}

0800d42c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	b08a      	sub	sp, #40	; 0x28
 800d432:	f04f 0c00 	mov.w	ip, #0
 800d436:	4604      	mov	r4, r0
 800d438:	469a      	mov	sl, r3
 800d43a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800d43e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d442:	2d0b      	cmp	r5, #11
 800d444:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800d448:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d44c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800d450:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800d454:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800d458:	f8cd c014 	str.w	ip, [sp, #20]
 800d45c:	d12d      	bne.n	800d4ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800d45e:	2080      	movs	r0, #128	; 0x80
 800d460:	9204      	str	r2, [sp, #16]
 800d462:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800d466:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d46a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d46e:	f8ad 701c 	strh.w	r7, [sp, #28]
 800d472:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d47a:	4620      	mov	r0, r4
 800d47c:	f7ff feec 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d480:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800d484:	4603      	mov	r3, r0
 800d486:	4651      	mov	r1, sl
 800d488:	4620      	mov	r0, r4
 800d48a:	e9cd 9800 	strd	r9, r8, [sp]
 800d48e:	f7ff ffbd 	bl	800d40c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d492:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800d496:	9006      	str	r0, [sp, #24]
 800d498:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800d49c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d4a0:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800d4a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d4a8:	b107      	cbz	r7, 800d4ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800d4aa:	b9d6      	cbnz	r6, 800d4e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800d4ac:	4b17      	ldr	r3, [pc, #92]	; (800d50c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800d4ae:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d4b2:	4a17      	ldr	r2, [pc, #92]	; (800d510 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d4b4:	4817      	ldr	r0, [pc, #92]	; (800d514 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800d4b6:	f00e ff11 	bl	801c2dc <__assert_func>
 800d4ba:	2d02      	cmp	r5, #2
 800d4bc:	d108      	bne.n	800d4d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800d4be:	2bff      	cmp	r3, #255	; 0xff
 800d4c0:	d104      	bne.n	800d4cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	bf14      	ite	ne
 800d4c6:	2040      	movne	r0, #64	; 0x40
 800d4c8:	2020      	moveq	r0, #32
 800d4ca:	e7c9      	b.n	800d460 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4cc:	2040      	movs	r0, #64	; 0x40
 800d4ce:	e7c7      	b.n	800d460 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4d0:	2bff      	cmp	r3, #255	; 0xff
 800d4d2:	d104      	bne.n	800d4de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	bf14      	ite	ne
 800d4d8:	2004      	movne	r0, #4
 800d4da:	2001      	moveq	r0, #1
 800d4dc:	e7c0      	b.n	800d460 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4de:	2004      	movs	r0, #4
 800d4e0:	e7be      	b.n	800d460 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	9d02      	ldr	r5, [sp, #8]
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	4798      	blx	r3
 800d4ec:	4228      	tst	r0, r5
 800d4ee:	d104      	bne.n	800d4fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800d4f2:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d4f6:	4a06      	ldr	r2, [pc, #24]	; (800d510 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d4f8:	e7dc      	b.n	800d4b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800d4fa:	6860      	ldr	r0, [r4, #4]
 800d4fc:	a902      	add	r1, sp, #8
 800d4fe:	6803      	ldr	r3, [r0, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	4798      	blx	r3
 800d504:	b00a      	add	sp, #40	; 0x28
 800d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50a:	bf00      	nop
 800d50c:	0801e9df 	.word	0x0801e9df
 800d510:	0801ee6e 	.word	0x0801ee6e
 800d514:	0801eb91 	.word	0x0801eb91
 800d518:	0801ea17 	.word	0x0801ea17

0800d51c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	b08b      	sub	sp, #44	; 0x2c
 800d522:	469b      	mov	fp, r3
 800d524:	4604      	mov	r4, r0
 800d526:	4692      	mov	sl, r2
 800d528:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800d52c:	2600      	movs	r6, #0
 800d52e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800d532:	4689      	mov	r9, r1
 800d534:	2fff      	cmp	r7, #255	; 0xff
 800d536:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800d53a:	9605      	str	r6, [sp, #20]
 800d53c:	bf14      	ite	ne
 800d53e:	2308      	movne	r3, #8
 800d540:	2302      	moveq	r3, #2
 800d542:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800d546:	f7ff fe87 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d54a:	465a      	mov	r2, fp
 800d54c:	4603      	mov	r3, r0
 800d54e:	4651      	mov	r1, sl
 800d550:	4620      	mov	r0, r4
 800d552:	e9cd 8500 	strd	r8, r5, [sp]
 800d556:	f7ff ff59 	bl	800d40c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d55a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d55e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d562:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d566:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d56a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800d56e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d572:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d576:	9d02      	ldr	r5, [sp, #8]
 800d578:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	9006      	str	r0, [sp, #24]
 800d580:	4620      	mov	r0, r4
 800d582:	f8ad 6020 	strh.w	r6, [sp, #32]
 800d586:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800d58a:	f8cd 9014 	str.w	r9, [sp, #20]
 800d58e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800d592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d594:	4798      	blx	r3
 800d596:	4228      	tst	r0, r5
 800d598:	d106      	bne.n	800d5a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800d59a:	4b07      	ldr	r3, [pc, #28]	; (800d5b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800d59c:	f240 2137 	movw	r1, #567	; 0x237
 800d5a0:	4a06      	ldr	r2, [pc, #24]	; (800d5bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800d5a2:	4807      	ldr	r0, [pc, #28]	; (800d5c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800d5a4:	f00e fe9a 	bl	801c2dc <__assert_func>
 800d5a8:	6860      	ldr	r0, [r4, #4]
 800d5aa:	a902      	add	r1, sp, #8
 800d5ac:	6803      	ldr	r3, [r0, #0]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4798      	blx	r3
 800d5b2:	b00b      	add	sp, #44	; 0x2c
 800d5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b8:	0801ea17 	.word	0x0801ea17
 800d5bc:	0801ef45 	.word	0x0801ef45
 800d5c0:	0801eb91 	.word	0x0801eb91

0800d5c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d5c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d5c8:	461f      	mov	r7, r3
 800d5ca:	4b0b      	ldr	r3, [pc, #44]	; (800d5f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d5cc:	460d      	mov	r5, r1
 800d5ce:	4616      	mov	r6, r2
 800d5d0:	f8b3 8000 	ldrh.w	r8, [r3]
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	f7ff fc7f 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d5da:	6803      	ldr	r3, [r0, #0]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	4798      	blx	r3
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	e9cd 8000 	strd	r8, r0, [sp]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f7ff ff0e 	bl	800d40c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d5f0:	b002      	add	sp, #8
 800d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f6:	bf00      	nop
 800d5f8:	24006c66 	.word	0x24006c66

0800d5fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	4698      	mov	r8, r3
 800d602:	b088      	sub	sp, #32
 800d604:	2300      	movs	r3, #0
 800d606:	4617      	mov	r7, r2
 800d608:	4604      	mov	r4, r0
 800d60a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d614:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d618:	f8ad 6014 	strh.w	r6, [sp, #20]
 800d61c:	f8ad 5016 	strh.w	r5, [sp, #22]
 800d620:	e9cd 3100 	strd	r3, r1, [sp]
 800d624:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d628:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d62c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d630:	f88d 301c 	strb.w	r3, [sp, #28]
 800d634:	f7ff fe10 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d638:	4642      	mov	r2, r8
 800d63a:	4603      	mov	r3, r0
 800d63c:	4639      	mov	r1, r7
 800d63e:	4620      	mov	r0, r4
 800d640:	f7ff ffc0 	bl	800d5c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d644:	4b18      	ldr	r3, [pc, #96]	; (800d6a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800d646:	9004      	str	r0, [sp, #16]
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d64e:	f7ff fc43 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d652:	6803      	ldr	r3, [r0, #0]
 800d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d656:	4798      	blx	r3
 800d658:	f88d 001e 	strb.w	r0, [sp, #30]
 800d65c:	f88d 001d 	strb.w	r0, [sp, #29]
 800d660:	b106      	cbz	r6, 800d664 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800d662:	b935      	cbnz	r5, 800d672 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800d664:	4b11      	ldr	r3, [pc, #68]	; (800d6ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800d666:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d66a:	4a11      	ldr	r2, [pc, #68]	; (800d6b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d66c:	4811      	ldr	r0, [pc, #68]	; (800d6b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800d66e:	f00e fe35 	bl	801c2dc <__assert_func>
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	4620      	mov	r0, r4
 800d676:	9d00      	ldr	r5, [sp, #0]
 800d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67a:	4798      	blx	r3
 800d67c:	4228      	tst	r0, r5
 800d67e:	d104      	bne.n	800d68a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800d680:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800d682:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d686:	4a0a      	ldr	r2, [pc, #40]	; (800d6b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d688:	e7f0      	b.n	800d66c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800d68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d68c:	4669      	mov	r1, sp
 800d68e:	6860      	ldr	r0, [r4, #4]
 800d690:	9303      	str	r3, [sp, #12]
 800d692:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d696:	f88d 301f 	strb.w	r3, [sp, #31]
 800d69a:	6803      	ldr	r3, [r0, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	4798      	blx	r3
 800d6a0:	b008      	add	sp, #32
 800d6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a6:	bf00      	nop
 800d6a8:	24006c66 	.word	0x24006c66
 800d6ac:	0801e9df 	.word	0x0801e9df
 800d6b0:	0801ed1a 	.word	0x0801ed1a
 800d6b4:	0801eb91 	.word	0x0801eb91
 800d6b8:	0801ea17 	.word	0x0801ea17

0800d6bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6be:	b08b      	sub	sp, #44	; 0x2c
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	466b      	mov	r3, sp
 800d6c4:	e883 0006 	stmia.w	r3, {r1, r2}
 800d6c8:	4b20      	ldr	r3, [pc, #128]	; (800d74c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	b933      	cbnz	r3, 800d6dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d6ce:	4b20      	ldr	r3, [pc, #128]	; (800d750 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800d6d0:	f44f 7112 	mov.w	r1, #584	; 0x248
 800d6d4:	4a1f      	ldr	r2, [pc, #124]	; (800d754 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800d6d6:	4820      	ldr	r0, [pc, #128]	; (800d758 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800d6d8:	f00e fe00 	bl	801c2dc <__assert_func>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	2500      	movs	r5, #0
 800d6e0:	f8bd 6000 	ldrh.w	r6, [sp]
 800d6e4:	9302      	str	r3, [sp, #8]
 800d6e6:	6803      	ldr	r3, [r0, #0]
 800d6e8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d6ec:	9505      	str	r5, [sp, #20]
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	4798      	blx	r3
 800d6f2:	463a      	mov	r2, r7
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7ff ff63 	bl	800d5c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d6fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d700:	9003      	str	r0, [sp, #12]
 800d702:	9306      	str	r3, [sp, #24]
 800d704:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d708:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d70c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d710:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d714:	4b11      	ldr	r3, [pc, #68]	; (800d75c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d71c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d720:	f7ff fbda 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d724:	6803      	ldr	r3, [r0, #0]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	4798      	blx	r3
 800d72a:	23ff      	movs	r3, #255	; 0xff
 800d72c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d730:	a902      	add	r1, sp, #8
 800d732:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d736:	6860      	ldr	r0, [r4, #4]
 800d738:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d73c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800d740:	6803      	ldr	r3, [r0, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4798      	blx	r3
 800d746:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d748:	b00b      	add	sp, #44	; 0x2c
 800d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d74c:	24006c6b 	.word	0x24006c6b
 800d750:	0801eade 	.word	0x0801eade
 800d754:	0801edc4 	.word	0x0801edc4
 800d758:	0801eb91 	.word	0x0801eb91
 800d75c:	24006c66 	.word	0x24006c66

0800d760 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d764:	b08a      	sub	sp, #40	; 0x28
 800d766:	2600      	movs	r6, #0
 800d768:	4604      	mov	r4, r0
 800d76a:	466d      	mov	r5, sp
 800d76c:	9605      	str	r6, [sp, #20]
 800d76e:	e885 0006 	stmia.w	r5, {r1, r2}
 800d772:	461d      	mov	r5, r3
 800d774:	2301      	movs	r3, #1
 800d776:	f8bd 7000 	ldrh.w	r7, [sp]
 800d77a:	9302      	str	r3, [sp, #8]
 800d77c:	6803      	ldr	r3, [r0, #0]
 800d77e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800d782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d784:	4798      	blx	r3
 800d786:	4642      	mov	r2, r8
 800d788:	4639      	mov	r1, r7
 800d78a:	4603      	mov	r3, r0
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7ff ff19 	bl	800d5c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d792:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d796:	9003      	str	r0, [sp, #12]
 800d798:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d79c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d7a0:	9506      	str	r5, [sp, #24]
 800d7a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d7b4:	f7ff fb90 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800d7b8:	6803      	ldr	r3, [r0, #0]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	4798      	blx	r3
 800d7be:	23ff      	movs	r3, #255	; 0xff
 800d7c0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800d7c4:	a902      	add	r1, sp, #8
 800d7c6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800d7ca:	6860      	ldr	r0, [r4, #4]
 800d7cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d7d0:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800d7d4:	6803      	ldr	r3, [r0, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	4798      	blx	r3
 800d7da:	4628      	mov	r0, r5
 800d7dc:	b00a      	add	sp, #40	; 0x28
 800d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e2:	bf00      	nop
 800d7e4:	24006c66 	.word	0x24006c66

0800d7e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	b19b      	cbz	r3, 800d81a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d7f2:	2002      	movs	r0, #2
 800d7f4:	f7f4 fb90 	bl	8001f18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d800:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800d80a:	f7ff fd25 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d80e:	4601      	mov	r1, r0
 800d810:	4620      	mov	r0, r4
 800d812:	462b      	mov	r3, r5
 800d814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d818:	4718      	bx	r3
 800d81a:	bd70      	pop	{r4, r5, r6, pc}

0800d81c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4605      	mov	r5, r0
 800d820:	460c      	mov	r4, r1
 800d822:	2003      	movs	r0, #3
 800d824:	b149      	cbz	r1, 800d83a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800d826:	f7f4 fb47 	bl	8001eb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d82a:	6928      	ldr	r0, [r5, #16]
 800d82c:	b168      	cbz	r0, 800d84a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d82e:	6803      	ldr	r3, [r0, #0]
 800d830:	2101      	movs	r1, #1
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d838:	4718      	bx	r3
 800d83a:	f7f4 fb55 	bl	8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d83e:	6928      	ldr	r0, [r5, #16]
 800d840:	b118      	cbz	r0, 800d84a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d842:	6803      	ldr	r3, [r0, #0]
 800d844:	4621      	mov	r1, r4
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	e7f4      	b.n	800d834 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800d84a:	bd70      	pop	{r4, r5, r6, pc}

0800d84c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800d852:	4604      	mov	r4, r0
 800d854:	460d      	mov	r5, r1
 800d856:	428a      	cmp	r2, r1
 800d858:	d008      	beq.n	800d86c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800d85a:	2a01      	cmp	r2, #1
 800d85c:	6803      	ldr	r3, [r0, #0]
 800d85e:	d106      	bne.n	800d86e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d860:	b929      	cbnz	r1, 800d86e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800d862:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d866:	4798      	blx	r3
 800d868:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800d86c:	bd38      	pop	{r3, r4, r5, pc}
 800d86e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d872:	4620      	mov	r0, r4
 800d874:	e7f7      	b.n	800d866 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800d878 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d878:	4b0d      	ldr	r3, [pc, #52]	; (800d8b0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800d87a:	b510      	push	{r4, lr}
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	4604      	mov	r4, r0
 800d880:	b95b      	cbnz	r3, 800d89a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d882:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d886:	2b02      	cmp	r3, #2
 800d888:	d007      	beq.n	800d89a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d88a:	6840      	ldr	r0, [r0, #4]
 800d88c:	f000 f93a 	bl	800db04 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d890:	b118      	cbz	r0, 800d89a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d892:	6862      	ldr	r2, [r4, #4]
 800d894:	7a53      	ldrb	r3, [r2, #9]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0fc      	beq.n	800d894 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800d89a:	f7f4 fcb7 	bl	800220c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d89e:	4620      	mov	r0, r4
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	f7ff ffd3 	bl	800d84c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f7ff fcd6 	bl	800d258 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d8ac:	bd10      	pop	{r4, pc}
 800d8ae:	bf00      	nop
 800d8b0:	24006c6a 	.word	0x24006c6a

0800d8b4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d8b4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800d8b8:	1a13      	subs	r3, r2, r0
 800d8ba:	4258      	negs	r0, r3
 800d8bc:	4158      	adcs	r0, r3
 800d8be:	4770      	bx	lr

0800d8c0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d8c0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d8c4:	1a9b      	subs	r3, r3, r2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bfdc      	itt	le
 800d8ca:	6882      	ldrle	r2, [r0, #8]
 800d8cc:	189b      	addle	r3, r3, r2
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	bfcc      	ite	gt
 800d8d2:	2000      	movgt	r0, #0
 800d8d4:	2001      	movle	r0, #1
 800d8d6:	4770      	bx	lr

0800d8d8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d8d8:	6902      	ldr	r2, [r0, #16]
 800d8da:	6840      	ldr	r0, [r0, #4]
 800d8dc:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800d8e0:	4770      	bx	lr

0800d8e2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d8e2:	6803      	ldr	r3, [r0, #0]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	4718      	bx	r3

0800d8e8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d8e8:	4770      	bx	lr

0800d8ea <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d8ea:	4770      	bx	lr

0800d8ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800d8ec:	4770      	bx	lr
	...

0800d8f0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	b570      	push	{r4, r5, r6, lr}
 800d8f4:	7203      	strb	r3, [r0, #8]
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	6840      	ldr	r0, [r0, #4]
 800d8fa:	6803      	ldr	r3, [r0, #0]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	4798      	blx	r3
 800d900:	6803      	ldr	r3, [r0, #0]
 800d902:	4605      	mov	r5, r0
 800d904:	2b40      	cmp	r3, #64	; 0x40
 800d906:	d039      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d908:	d815      	bhi.n	800d936 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800d90a:	2b04      	cmp	r3, #4
 800d90c:	d022      	beq.n	800d954 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d90e:	d808      	bhi.n	800d922 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d910:	2b01      	cmp	r3, #1
 800d912:	d033      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d914:	2b02      	cmp	r3, #2
 800d916:	d108      	bne.n	800d92a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	4620      	mov	r0, r4
 800d91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91e:	4798      	blx	r3
 800d920:	e025      	b.n	800d96e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800d922:	2b08      	cmp	r3, #8
 800d924:	d01e      	beq.n	800d964 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800d926:	2b20      	cmp	r3, #32
 800d928:	d028      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d92a:	4b17      	ldr	r3, [pc, #92]	; (800d988 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800d92c:	218b      	movs	r1, #139	; 0x8b
 800d92e:	4a17      	ldr	r2, [pc, #92]	; (800d98c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800d930:	4817      	ldr	r0, [pc, #92]	; (800d990 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800d932:	f00e fcd3 	bl	801c2dc <__assert_func>
 800d936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d93a:	d01f      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d93c:	d804      	bhi.n	800d948 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800d93e:	2b80      	cmp	r3, #128	; 0x80
 800d940:	d01c      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d946:	e7ef      	b.n	800d928 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800d948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d94c:	d016      	beq.n	800d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800d94e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d952:	e7e0      	b.n	800d916 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	7f01      	ldrb	r1, [r0, #28]
 800d958:	4620      	mov	r0, r4
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95c:	4798      	blx	r3
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	e006      	b.n	800d972 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	7f01      	ldrb	r1, [r0, #28]
 800d968:	4620      	mov	r0, r4
 800d96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96c:	4798      	blx	r3
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d972:	4629      	mov	r1, r5
 800d974:	4620      	mov	r0, r4
 800d976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d97a:	4718      	bx	r3
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	4620      	mov	r0, r4
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	4798      	blx	r3
 800d984:	e7eb      	b.n	800d95e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800d986:	bf00      	nop
 800d988:	0801f029 	.word	0x0801f029
 800d98c:	0801f0e8 	.word	0x0801f0e8
 800d990:	0801f04e 	.word	0x0801f04e

0800d994 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	4604      	mov	r4, r0
 800d998:	460e      	mov	r6, r1
 800d99a:	6860      	ldr	r0, [r4, #4]
 800d99c:	6803      	ldr	r3, [r0, #0]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	4798      	blx	r3
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d1f9      	bne.n	800d99a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d9a6:	4d0d      	ldr	r5, [pc, #52]	; (800d9dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800d9a8:	6828      	ldr	r0, [r5, #0]
 800d9aa:	6803      	ldr	r3, [r0, #0]
 800d9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ae:	4798      	blx	r3
 800d9b0:	f7f4 fc3a 	bl	8002228 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d9b4:	6828      	ldr	r0, [r5, #0]
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	f7ff ff48 	bl	800d84c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d9bc:	6860      	ldr	r0, [r4, #4]
 800d9be:	4631      	mov	r1, r6
 800d9c0:	6803      	ldr	r3, [r0, #0]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	4798      	blx	r3
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	4798      	blx	r3
 800d9ce:	6828      	ldr	r0, [r5, #0]
 800d9d0:	6803      	ldr	r3, [r0, #0]
 800d9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9d8:	4718      	bx	r3
 800d9da:	bf00      	nop
 800d9dc:	24006c6c 	.word	0x24006c6c

0800d9e0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d9e0:	b508      	push	{r3, lr}
 800d9e2:	f7f4 fc13 	bl	800220c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d9e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9ea:	f7f4 bc17 	b.w	800221c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d9ee <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d9ee:	b510      	push	{r4, lr}
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	2114      	movs	r1, #20
 800d9f4:	f00e fb5c 	bl	801c0b0 <_ZdlPvj>
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	bd10      	pop	{r4, pc}

0800d9fc <_ZN8touchgfx13DMA_Interface5startEv>:
 800d9fc:	b510      	push	{r4, lr}
 800d9fe:	4604      	mov	r4, r0
 800da00:	6840      	ldr	r0, [r0, #4]
 800da02:	6803      	ldr	r3, [r0, #0]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4798      	blx	r3
 800da08:	b948      	cbnz	r0, 800da1e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da0a:	7a63      	ldrb	r3, [r4, #9]
 800da0c:	b13b      	cbz	r3, 800da1e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da0e:	7a23      	ldrb	r3, [r4, #8]
 800da10:	b92b      	cbnz	r3, 800da1e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	4620      	mov	r0, r4
 800da16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da1c:	4718      	bx	r3
 800da1e:	bd10      	pop	{r4, pc}

0800da20 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800da26:	4606      	mov	r6, r0
 800da28:	1a9b      	subs	r3, r3, r2
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfdc      	itt	le
 800da2e:	6880      	ldrle	r0, [r0, #8]
 800da30:	181b      	addle	r3, r3, r0
 800da32:	2b01      	cmp	r3, #1
 800da34:	dd13      	ble.n	800da5e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800da36:	6874      	ldr	r4, [r6, #4]
 800da38:	460d      	mov	r5, r1
 800da3a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800da3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800da46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da4a:	68f3      	ldr	r3, [r6, #12]
 800da4c:	68b2      	ldr	r2, [r6, #8]
 800da4e:	f3bf 8f5b 	dmb	ish
 800da52:	3301      	adds	r3, #1
 800da54:	429a      	cmp	r2, r3
 800da56:	bfd8      	it	le
 800da58:	1a9b      	suble	r3, r3, r2
 800da5a:	60f3      	str	r3, [r6, #12]
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	4b03      	ldr	r3, [pc, #12]	; (800da6c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800da60:	2139      	movs	r1, #57	; 0x39
 800da62:	4a03      	ldr	r2, [pc, #12]	; (800da70 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800da64:	4803      	ldr	r0, [pc, #12]	; (800da74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800da66:	f00e fc39 	bl	801c2dc <__assert_func>
 800da6a:	bf00      	nop
 800da6c:	0801f074 	.word	0x0801f074
 800da70:	0801f118 	.word	0x0801f118
 800da74:	0801f04e 	.word	0x0801f04e

0800da78 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800da78:	b510      	push	{r4, lr}
 800da7a:	6803      	ldr	r3, [r0, #0]
 800da7c:	4604      	mov	r4, r0
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4798      	blx	r3
 800da82:	b128      	cbz	r0, 800da90 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800da84:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800da86:	213f      	movs	r1, #63	; 0x3f
 800da88:	4a07      	ldr	r2, [pc, #28]	; (800daa8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800da8a:	4808      	ldr	r0, [pc, #32]	; (800daac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800da8c:	f00e fc26 	bl	801c2dc <__assert_func>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	68a2      	ldr	r2, [r4, #8]
 800da94:	f3bf 8f5b 	dmb	ish
 800da98:	3301      	adds	r3, #1
 800da9a:	429a      	cmp	r2, r3
 800da9c:	bfd8      	it	le
 800da9e:	1a9b      	suble	r3, r3, r2
 800daa0:	6123      	str	r3, [r4, #16]
 800daa2:	bd10      	pop	{r4, pc}
 800daa4:	0801f097 	.word	0x0801f097
 800daa8:	0801f166 	.word	0x0801f166
 800daac:	0801f04e 	.word	0x0801f04e

0800dab0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	4604      	mov	r4, r0
 800dab4:	6840      	ldr	r0, [r0, #4]
 800dab6:	6803      	ldr	r3, [r0, #0]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4798      	blx	r3
 800dabc:	4605      	mov	r5, r0
 800dabe:	b930      	cbnz	r0, 800dace <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800dac0:	7a23      	ldrb	r3, [r4, #8]
 800dac2:	b123      	cbz	r3, 800dace <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800dac4:	6860      	ldr	r0, [r4, #4]
 800dac6:	6803      	ldr	r3, [r0, #0]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	4798      	blx	r3
 800dacc:	7225      	strb	r5, [r4, #8]
 800dace:	6860      	ldr	r0, [r4, #4]
 800dad0:	6803      	ldr	r3, [r0, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4798      	blx	r3
 800dad6:	b928      	cbnz	r0, 800dae4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	4620      	mov	r0, r4
 800dadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dae2:	4718      	bx	r3
 800dae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dae8:	f7f4 bba6 	b.w	8002238 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800daec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800daec:	b510      	push	{r4, lr}
 800daee:	6082      	str	r2, [r0, #8]
 800daf0:	2200      	movs	r2, #0
 800daf2:	4c03      	ldr	r4, [pc, #12]	; (800db00 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800daf4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800daf8:	e9c0 4100 	strd	r4, r1, [r0]
 800dafc:	bd10      	pop	{r4, pc}
 800dafe:	bf00      	nop
 800db00:	0801f0cc 	.word	0x0801f0cc

0800db04 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800db04:	6840      	ldr	r0, [r0, #4]
 800db06:	6803      	ldr	r3, [r0, #0]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4718      	bx	r3

0800db0c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800db0c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800db10:	4770      	bx	lr

0800db12 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800db12:	4770      	bx	lr

0800db14 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800db14:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800db18:	b133      	cbz	r3, 800db28 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800db1a:	790b      	ldrb	r3, [r1, #4]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	bf01      	itttt	eq
 800db20:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800db22:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800db24:	8603      	strheq	r3, [r0, #48]	; 0x30
 800db26:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800db28:	f00e ba9e 	b.w	801c068 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800db2c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800db2c:	8813      	ldrh	r3, [r2, #0]
 800db2e:	8683      	strh	r3, [r0, #52]	; 0x34
 800db30:	f000 bcb2 	b.w	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800db34 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800db34:	b510      	push	{r4, lr}
 800db36:	4604      	mov	r4, r0
 800db38:	2138      	movs	r1, #56	; 0x38
 800db3a:	f00e fab9 	bl	801c0b0 <_ZdlPvj>
 800db3e:	4620      	mov	r0, r4
 800db40:	bd10      	pop	{r4, pc}

0800db42 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800db42:	b510      	push	{r4, lr}
 800db44:	4604      	mov	r4, r0
 800db46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800db48:	b150      	cbz	r0, 800db60 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800db4a:	6803      	ldr	r3, [r0, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	4798      	blx	r3
 800db50:	b130      	cbz	r0, 800db60 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800db52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800db54:	4621      	mov	r1, r4
 800db56:	6803      	ldr	r3, [r0, #0]
 800db58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	4718      	bx	r3
 800db60:	bd10      	pop	{r4, pc}
	...

0800db64 <_ZNK8touchgfx6Bitmap5getIdEv>:
 800db64:	b508      	push	{r3, lr}
 800db66:	4b05      	ldr	r3, [pc, #20]	; (800db7c <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	b92b      	cbnz	r3, 800db78 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 800db6c:	4b04      	ldr	r3, [pc, #16]	; (800db80 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800db6e:	2187      	movs	r1, #135	; 0x87
 800db70:	4a04      	ldr	r2, [pc, #16]	; (800db84 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800db72:	4805      	ldr	r0, [pc, #20]	; (800db88 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 800db74:	f00e fbb2 	bl	801c2dc <__assert_func>
 800db78:	8800      	ldrh	r0, [r0, #0]
 800db7a:	bd08      	pop	{r3, pc}
 800db7c:	24006cf4 	.word	0x24006cf4
 800db80:	0801f196 	.word	0x0801f196
 800db84:	0801f268 	.word	0x0801f268
 800db88:	0801f1d2 	.word	0x0801f1d2

0800db8c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	4604      	mov	r4, r0
 800db90:	f100 0534 	add.w	r5, r0, #52	; 0x34
 800db94:	b169      	cbz	r1, 800dbb2 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 800db96:	302e      	adds	r0, #46	; 0x2e
 800db98:	f7ff ffe4 	bl	800db64 <_ZNK8touchgfx6Bitmap5getIdEv>
 800db9c:	4606      	mov	r6, r0
 800db9e:	4628      	mov	r0, r5
 800dba0:	f7ff ffe0 	bl	800db64 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dba4:	4286      	cmp	r6, r0
 800dba6:	d003      	beq.n	800dbb0 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 800dba8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800dbaa:	8623      	strh	r3, [r4, #48]	; 0x30
 800dbac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800dbae:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	3030      	adds	r0, #48	; 0x30
 800dbb4:	f7ff ffd6 	bl	800db64 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dbb8:	4606      	mov	r6, r0
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f7ff ffd2 	bl	800db64 <_ZNK8touchgfx6Bitmap5getIdEv>
 800dbc0:	4286      	cmp	r6, r0
 800dbc2:	bf1f      	itttt	ne
 800dbc4:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 800dbc6:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 800dbc8:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 800dbca:	8623      	strhne	r3, [r4, #48]	; 0x30
 800dbcc:	e7f0      	b.n	800dbb0 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0800dbce <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800dbce:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800dbd2:	4770      	bx	lr

0800dbd4 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800dbd4:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800dbd8:	4770      	bx	lr

0800dbda <_ZN8touchgfx13ScalableImageD1Ev>:
 800dbda:	4770      	bx	lr

0800dbdc <_ZN8touchgfx13ScalableImageD0Ev>:
 800dbdc:	b510      	push	{r4, lr}
 800dbde:	4604      	mov	r4, r0
 800dbe0:	212c      	movs	r1, #44	; 0x2c
 800dbe2:	f00e fa65 	bl	801c0b0 <_ZdlPvj>
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	bd10      	pop	{r4, pc}

0800dbea <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800dbea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dbec:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	2bff      	cmp	r3, #255	; 0xff
 800dbf4:	d007      	beq.n	800dc06 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	802b      	strh	r3, [r5, #0]
 800dbfa:	806b      	strh	r3, [r5, #2]
 800dbfc:	80ab      	strh	r3, [r5, #4]
 800dbfe:	80eb      	strh	r3, [r5, #6]
 800dc00:	4628      	mov	r0, r5
 800dc02:	b004      	add	sp, #16
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800dc0a:	4668      	mov	r0, sp
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	f005 ffc7 	bl	8013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc12:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800dc16:	4620      	mov	r0, r4
 800dc18:	f005 ff4e 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dc1c:	4286      	cmp	r6, r0
 800dc1e:	d1ea      	bne.n	800dbf6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dc20:	4621      	mov	r1, r4
 800dc22:	a802      	add	r0, sp, #8
 800dc24:	f005 ffbc 	bl	8013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc28:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f005 ff7d 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dc32:	4286      	cmp	r6, r0
 800dc34:	d1df      	bne.n	800dbf6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f005 ffb1 	bl	8013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800dc3e:	e7df      	b.n	800dc00 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>

0800dc40 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	2300      	movs	r3, #0
 800dc44:	2501      	movs	r5, #1
 800dc46:	4604      	mov	r4, r0
 800dc48:	8083      	strh	r3, [r0, #4]
 800dc4a:	80c3      	strh	r3, [r0, #6]
 800dc4c:	8103      	strh	r3, [r0, #8]
 800dc4e:	8143      	strh	r3, [r0, #10]
 800dc50:	8183      	strh	r3, [r0, #12]
 800dc52:	81c3      	strh	r3, [r0, #14]
 800dc54:	8203      	strh	r3, [r0, #16]
 800dc56:	8243      	strh	r3, [r0, #18]
 800dc58:	61c3      	str	r3, [r0, #28]
 800dc5a:	8403      	strh	r3, [r0, #32]
 800dc5c:	8443      	strh	r3, [r0, #34]	; 0x22
 800dc5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800dc62:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800dc66:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800dc6a:	4b07      	ldr	r3, [pc, #28]	; (800dc88 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	880b      	ldrh	r3, [r1, #0]
 800dc70:	84c3      	strh	r3, [r0, #38]	; 0x26
 800dc72:	23ff      	movs	r3, #255	; 0xff
 800dc74:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800dc78:	f000 ff35 	bl	800eae6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800dc7c:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800dc7e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800dc82:	4620      	mov	r0, r4
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	0801f608 	.word	0x0801f608
 800dc8c:	0801f2a4 	.word	0x0801f2a4

0800dc90 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800dc90:	4603      	mov	r3, r0
 800dc92:	3026      	adds	r0, #38	; 0x26
 800dc94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dc98:	b90b      	cbnz	r3, 800dc9e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800dc9a:	f003 be15 	b.w	80118c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800dc9e:	f003 be23 	b.w	80118e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800dca4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	4604      	mov	r4, r0
 800dcaa:	469b      	mov	fp, r3
 800dcac:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800dcb0:	b0b3      	sub	sp, #204	; 0xcc
 800dcb2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800dcb6:	f9b1 6000 	ldrsh.w	r6, [r1]
 800dcba:	8888      	ldrh	r0, [r1, #4]
 800dcbc:	9206      	str	r2, [sp, #24]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	4430      	add	r0, r6
 800dcc2:	9211      	str	r2, [sp, #68]	; 0x44
 800dcc4:	b280      	uxth	r0, r0
 800dcc6:	fa0f fe80 	sxth.w	lr, r0
 800dcca:	4596      	cmp	lr, r2
 800dccc:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800dcd0:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800dcd4:	f340 811a 	ble.w	800df0c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcd8:	45b4      	cmp	ip, r6
 800dcda:	f340 8117 	ble.w	800df0c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcde:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dce2:	88ca      	ldrh	r2, [r1, #6]
 800dce4:	442a      	add	r2, r5
 800dce6:	b292      	uxth	r2, r2
 800dce8:	b211      	sxth	r1, r2
 800dcea:	2900      	cmp	r1, #0
 800dcec:	f340 810e 	ble.w	800df0c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	f340 810b 	ble.w	800df0c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800dcf6:	45f4      	cmp	ip, lr
 800dcf8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800dcfc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800dd00:	bfb8      	it	lt
 800dd02:	fa1f f08c 	uxthlt.w	r0, ip
 800dd06:	428b      	cmp	r3, r1
 800dd08:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800dd0c:	bfb8      	it	lt
 800dd0e:	b29a      	uxthlt	r2, r3
 800dd10:	1b80      	subs	r0, r0, r6
 800dd12:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800dd16:	1b52      	subs	r2, r2, r5
 800dd18:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800dd1c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800dd20:	ab11      	add	r3, sp, #68	; 0x44
 800dd22:	ad13      	add	r5, sp, #76	; 0x4c
 800dd24:	6822      	ldr	r2, [r4, #0]
 800dd26:	1d26      	adds	r6, r4, #4
 800dd28:	9307      	str	r3, [sp, #28]
 800dd2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dd2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd30:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd34:	4629      	mov	r1, r5
 800dd36:	4620      	mov	r0, r4
 800dd38:	4790      	blx	r2
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	a815      	add	r0, sp, #84	; 0x54
 800dd3e:	f003 fd25 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dd42:	a815      	add	r0, sp, #84	; 0x54
 800dd44:	f002 fb22 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dd48:	9b07      	ldr	r3, [sp, #28]
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f002 fb61 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800dd52:	4628      	mov	r0, r5
 800dd54:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800dd58:	f002 fb18 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	f005 ffb3 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 800dd62:	9007      	str	r0, [sp, #28]
 800dd64:	2800      	cmp	r0, #0
 800dd66:	f000 80ce 	beq.w	800df06 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800dd6a:	f8db 2000 	ldr.w	r2, [fp]
 800dd6e:	a90d      	add	r1, sp, #52	; 0x34
 800dd70:	a809      	add	r0, sp, #36	; 0x24
 800dd72:	9209      	str	r2, [sp, #36]	; 0x24
 800dd74:	f8db 2004 	ldr.w	r2, [fp, #4]
 800dd78:	920a      	str	r2, [sp, #40]	; 0x28
 800dd7a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800dd7e:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd80:	f8db 200c 	ldr.w	r2, [fp, #12]
 800dd84:	920c      	str	r2, [sp, #48]	; 0x30
 800dd86:	f8da 2000 	ldr.w	r2, [sl]
 800dd8a:	920d      	str	r2, [sp, #52]	; 0x34
 800dd8c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dd90:	920e      	str	r2, [sp, #56]	; 0x38
 800dd92:	f8da 2008 	ldr.w	r2, [sl, #8]
 800dd96:	920f      	str	r2, [sp, #60]	; 0x3c
 800dd98:	f8da 200c 	ldr.w	r2, [sl, #12]
 800dd9c:	9210      	str	r2, [sp, #64]	; 0x40
 800dd9e:	4632      	mov	r2, r6
 800dda0:	f002 fb1c 	bl	80103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800dda4:	4632      	mov	r2, r6
 800dda6:	a90e      	add	r1, sp, #56	; 0x38
 800dda8:	a80a      	add	r0, sp, #40	; 0x28
 800ddaa:	f002 fb17 	bl	80103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800ddae:	4632      	mov	r2, r6
 800ddb0:	a90f      	add	r1, sp, #60	; 0x3c
 800ddb2:	a80b      	add	r0, sp, #44	; 0x2c
 800ddb4:	f002 fb12 	bl	80103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800ddb8:	4632      	mov	r2, r6
 800ddba:	a910      	add	r1, sp, #64	; 0x40
 800ddbc:	a80c      	add	r0, sp, #48	; 0x30
 800ddbe:	f002 fb0d 	bl	80103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800ddc2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800ddc6:	edd7 3a00 	vldr	s7, [r7]
 800ddca:	eef0 6a67 	vmov.f32	s13, s15
 800ddce:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800ddd2:	ed97 5a01 	vldr	s10, [r7, #4]
 800ddd6:	eeb0 7a67 	vmov.f32	s14, s15
 800ddda:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ddde:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800dde2:	edd9 2a00 	vldr	s5, [r9]
 800dde6:	eeb0 6a67 	vmov.f32	s12, s15
 800ddea:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800ddee:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800ddf2:	ed98 3a00 	vldr	s6, [r8]
 800ddf6:	ed99 4a01 	vldr	s8, [r9, #4]
 800ddfa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800ddfe:	edd8 4a01 	vldr	s9, [r8, #4]
 800de02:	edd9 5a02 	vldr	s11, [r9, #8]
 800de06:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800de0a:	ee16 6a10 	vmov	r6, s12
 800de0e:	eeb0 6a67 	vmov.f32	s12, s15
 800de12:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800de16:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800de1a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de1e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800de22:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800de26:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800de2a:	ee16 0a10 	vmov	r0, s12
 800de2e:	eeb0 6a67 	vmov.f32	s12, s15
 800de32:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800de36:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800de3a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de3e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800de42:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800de46:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800de4a:	ee16 1a10 	vmov	r1, s12
 800de4e:	eeb0 6a67 	vmov.f32	s12, s15
 800de52:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800de56:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800de5a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de5e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800de62:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800de66:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800de6a:	68ff      	ldr	r7, [r7, #12]
 800de6c:	ee16 2a10 	vmov	r2, s12
 800de70:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800de74:	9624      	str	r6, [sp, #144]	; 0x90
 800de76:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800de7a:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800de7e:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800de82:	4628      	mov	r0, r5
 800de84:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800de88:	9b06      	ldr	r3, [sp, #24]
 800de8a:	922d      	str	r2, [sp, #180]	; 0xb4
 800de8c:	4a21      	ldr	r2, [pc, #132]	; (800df14 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800de8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800de90:	8812      	ldrh	r2, [r2, #0]
 800de92:	9b07      	ldr	r3, [sp, #28]
 800de94:	9218      	str	r2, [sp, #96]	; 0x60
 800de96:	9319      	str	r3, [sp, #100]	; 0x64
 800de98:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800de9c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800dea0:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800dea4:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800dea8:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800deac:	9731      	str	r7, [sp, #196]	; 0xc4
 800deae:	f005 ff3d 	bl	8013d2c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800deb2:	901a      	str	r0, [sp, #104]	; 0x68
 800deb4:	4628      	mov	r0, r5
 800deb6:	f005 fdff 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800deba:	901b      	str	r0, [sp, #108]	; 0x6c
 800debc:	4628      	mov	r0, r5
 800debe:	f005 fe35 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dec2:	901c      	str	r0, [sp, #112]	; 0x70
 800dec4:	4628      	mov	r0, r5
 800dec6:	f005 fdf7 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800deca:	4b13      	ldr	r3, [pc, #76]	; (800df18 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800decc:	901d      	str	r0, [sp, #116]	; 0x74
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ded4:	b10a      	cbz	r2, 800deda <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800ded6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800ded8:	b905      	cbnz	r5, 800dedc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800deda:	689d      	ldr	r5, [r3, #8]
 800dedc:	682b      	ldr	r3, [r5, #0]
 800dede:	4620      	mov	r0, r4
 800dee0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800dee2:	f7ff fed5 	bl	800dc90 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800dee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800deea:	aa1e      	add	r2, sp, #120	; 0x78
 800deec:	a917      	add	r1, sp, #92	; 0x5c
 800deee:	9304      	str	r3, [sp, #16]
 800def0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800def4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800def8:	ab13      	add	r3, sp, #76	; 0x4c
 800defa:	4628      	mov	r0, r5
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	ab15      	add	r3, sp, #84	; 0x54
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	ab19      	add	r3, sp, #100	; 0x64
 800df04:	47b0      	blx	r6
 800df06:	b033      	add	sp, #204	; 0xcc
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	2300      	movs	r3, #0
 800df0e:	9312      	str	r3, [sp, #72]	; 0x48
 800df10:	e706      	b.n	800dd20 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800df12:	bf00      	nop
 800df14:	24006c66 	.word	0x24006c66
 800df18:	24006c6c 	.word	0x24006c6c

0800df1c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	ed2d 8b04 	vpush	{d8-d9}
 800df22:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800df26:	b098      	sub	sp, #96	; 0x60
 800df28:	4604      	mov	r4, r0
 800df2a:	460e      	mov	r6, r1
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d065      	beq.n	800dffc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800df30:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800df34:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800df38:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800e018 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800df3c:	ee09 3a10 	vmov	s18, r3
 800df40:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800df44:	4628      	mov	r0, r5
 800df46:	ee08 3a90 	vmov	s17, r3
 800df4a:	4b34      	ldr	r3, [pc, #208]	; (800e01c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800df4c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800df50:	930c      	str	r3, [sp, #48]	; 0x30
 800df52:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800df56:	930d      	str	r3, [sp, #52]	; 0x34
 800df58:	930e      	str	r3, [sp, #56]	; 0x38
 800df5a:	ee39 9a08 	vadd.f32	s18, s18, s16
 800df5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df60:	f005 fdaa 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800df64:	ee07 0a90 	vmov	s15, r0
 800df68:	4628      	mov	r0, r5
 800df6a:	ee78 8a88 	vadd.f32	s17, s17, s16
 800df6e:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800df72:	f005 fddb 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800df76:	4b2a      	ldr	r3, [pc, #168]	; (800e020 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800df78:	ee07 0a90 	vmov	s15, r0
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800df82:	eef0 7a48 	vmov.f32	s15, s16
 800df86:	2b01      	cmp	r3, #1
 800df88:	d13c      	bne.n	800e004 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800df8a:	eef0 6a69 	vmov.f32	s13, s19
 800df8e:	ee19 3a90 	vmov	r3, s19
 800df92:	eeb0 6a47 	vmov.f32	s12, s14
 800df96:	eef0 5a47 	vmov.f32	s11, s14
 800df9a:	eef0 9a48 	vmov.f32	s19, s16
 800df9e:	eeb0 7a48 	vmov.f32	s14, s16
 800dfa2:	9314      	str	r3, [sp, #80]	; 0x50
 800dfa4:	ab14      	add	r3, sp, #80	; 0x50
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	9303      	str	r3, [sp, #12]
 800dfac:	ab10      	add	r3, sp, #64	; 0x40
 800dfae:	4620      	mov	r0, r4
 800dfb0:	edcd 7a04 	vstr	s15, [sp, #16]
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	ab0c      	add	r3, sp, #48	; 0x30
 800dfb8:	ed8d 9a05 	vstr	s18, [sp, #20]
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	ab08      	add	r3, sp, #32
 800dfc0:	ed8d 9a06 	vstr	s18, [sp, #24]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	ab04      	add	r3, sp, #16
 800dfc8:	edcd 7a07 	vstr	s15, [sp, #28]
 800dfcc:	edcd 7a08 	vstr	s15, [sp, #32]
 800dfd0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800dfd4:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800dfd8:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800dfdc:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800dfe0:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800dfe4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800dfe8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800dfec:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800dff0:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800dff4:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800dff8:	f7ff fe54 	bl	800dca4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800dffc:	b018      	add	sp, #96	; 0x60
 800dffe:	ecbd 8b04 	vpop	{d8-d9}
 800e002:	bd70      	pop	{r4, r5, r6, pc}
 800e004:	eef0 6a47 	vmov.f32	s13, s14
 800e008:	ee18 3a10 	vmov	r3, s16
 800e00c:	eef0 5a69 	vmov.f32	s11, s19
 800e010:	eeb0 6a48 	vmov.f32	s12, s16
 800e014:	e7c5      	b.n	800dfa2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800e016:	bf00      	nop
 800e018:	00000000 	.word	0x00000000
 800e01c:	42c80000 	.word	0x42c80000
 800e020:	24006c64 	.word	0x24006c64

0800e024 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800e024:	2200      	movs	r2, #0
 800e026:	8002      	strh	r2, [r0, #0]
 800e028:	8042      	strh	r2, [r0, #2]
 800e02a:	8082      	strh	r2, [r0, #4]
 800e02c:	80c2      	strh	r2, [r0, #6]
 800e02e:	4770      	bx	lr

0800e030 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	6803      	ldr	r3, [r0, #0]
 800e034:	4604      	mov	r4, r0
 800e036:	4615      	mov	r5, r2
 800e038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03a:	4798      	blx	r3
 800e03c:	6823      	ldr	r3, [r4, #0]
 800e03e:	4629      	mov	r1, r5
 800e040:	4620      	mov	r0, r4
 800e042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e048:	4718      	bx	r3

0800e04a <_ZN8touchgfx8TextAreaD1Ev>:
 800e04a:	4770      	bx	lr

0800e04c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800e04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e04e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e052:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e054:	4299      	cmp	r1, r3
 800e056:	d029      	beq.n	800e0ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800e058:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	b92b      	cbnz	r3, 800e06a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800e05e:	4b15      	ldr	r3, [pc, #84]	; (800e0b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800e060:	21ae      	movs	r1, #174	; 0xae
 800e062:	4a15      	ldr	r2, [pc, #84]	; (800e0b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e064:	4815      	ldr	r0, [pc, #84]	; (800e0bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800e066:	f00e f939 	bl	801c2dc <__assert_func>
 800e06a:	4a15      	ldr	r2, [pc, #84]	; (800e0c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800e06c:	8812      	ldrh	r2, [r2, #0]
 800e06e:	428a      	cmp	r2, r1
 800e070:	d803      	bhi.n	800e07a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800e072:	4b14      	ldr	r3, [pc, #80]	; (800e0c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800e074:	21af      	movs	r1, #175	; 0xaf
 800e076:	4a10      	ldr	r2, [pc, #64]	; (800e0b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e078:	e7f4      	b.n	800e064 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800e07a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e07e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e082:	4b11      	ldr	r3, [pc, #68]	; (800e0c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800e084:	7854      	ldrb	r4, [r2, #1]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e08c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	69de      	ldr	r6, [r3, #28]
 800e094:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800e096:	6818      	ldr	r0, [r3, #0]
 800e098:	f7f6 fbfc 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e09c:	2300      	movs	r3, #0
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	47b0      	blx	r6
 800e0a8:	b002      	add	sp, #8
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e7fb      	b.n	800e0a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800e0b0:	24006cbc 	.word	0x24006cbc
 800e0b4:	0801e0a8 	.word	0x0801e0a8
 800e0b8:	0801f384 	.word	0x0801f384
 800e0bc:	0801e136 	.word	0x0801e136
 800e0c0:	24006cc0 	.word	0x24006cc0
 800e0c4:	0801e15f 	.word	0x0801e15f
 800e0c8:	24006cc4 	.word	0x24006cc4
 800e0cc:	24006cc8 	.word	0x24006cc8

0800e0d0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	6803      	ldr	r3, [r0, #0]
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	b28d      	uxth	r5, r1
 800e0d8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e0da:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800e0dc:	4b10      	ldr	r3, [pc, #64]	; (800e120 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	b92b      	cbnz	r3, 800e0ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800e0e2:	4b10      	ldr	r3, [pc, #64]	; (800e124 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800e0e4:	21ae      	movs	r1, #174	; 0xae
 800e0e6:	4a10      	ldr	r2, [pc, #64]	; (800e128 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e0e8:	4810      	ldr	r0, [pc, #64]	; (800e12c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800e0ea:	f00e f8f7 	bl	801c2dc <__assert_func>
 800e0ee:	4910      	ldr	r1, [pc, #64]	; (800e130 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800e0f0:	8809      	ldrh	r1, [r1, #0]
 800e0f2:	4291      	cmp	r1, r2
 800e0f4:	d803      	bhi.n	800e0fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800e0f6:	4b0f      	ldr	r3, [pc, #60]	; (800e134 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800e0f8:	21af      	movs	r1, #175	; 0xaf
 800e0fa:	4a0b      	ldr	r2, [pc, #44]	; (800e128 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800e0fc:	e7f4      	b.n	800e0e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800e0fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800e102:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e10a:	6803      	ldr	r3, [r0, #0]
 800e10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10e:	4798      	blx	r3
 800e110:	1a29      	subs	r1, r5, r0
 800e112:	4633      	mov	r3, r6
 800e114:	4620      	mov	r0, r4
 800e116:	b209      	sxth	r1, r1
 800e118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e11c:	4718      	bx	r3
 800e11e:	bf00      	nop
 800e120:	24006cbc 	.word	0x24006cbc
 800e124:	0801e0a8 	.word	0x0801e0a8
 800e128:	0801f384 	.word	0x0801f384
 800e12c:	0801e136 	.word	0x0801e136
 800e130:	24006cc0 	.word	0x24006cc0
 800e134:	0801e15f 	.word	0x0801e15f
 800e138:	24006cc4 	.word	0x24006cc4

0800e13c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e144:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e146:	b08c      	sub	sp, #48	; 0x30
 800e148:	4604      	mov	r4, r0
 800e14a:	4293      	cmp	r3, r2
 800e14c:	4688      	mov	r8, r1
 800e14e:	d05f      	beq.n	800e210 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e150:	4e31      	ldr	r6, [pc, #196]	; (800e218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800e152:	6832      	ldr	r2, [r6, #0]
 800e154:	b92a      	cbnz	r2, 800e162 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800e156:	4b31      	ldr	r3, [pc, #196]	; (800e21c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800e158:	21ae      	movs	r1, #174	; 0xae
 800e15a:	4a31      	ldr	r2, [pc, #196]	; (800e220 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e15c:	4831      	ldr	r0, [pc, #196]	; (800e224 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800e15e:	f00e f8bd 	bl	801c2dc <__assert_func>
 800e162:	4d31      	ldr	r5, [pc, #196]	; (800e228 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800e164:	8829      	ldrh	r1, [r5, #0]
 800e166:	4299      	cmp	r1, r3
 800e168:	d803      	bhi.n	800e172 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800e16a:	4b30      	ldr	r3, [pc, #192]	; (800e22c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800e16c:	21af      	movs	r1, #175	; 0xaf
 800e16e:	4a2c      	ldr	r2, [pc, #176]	; (800e220 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800e170:	e7f4      	b.n	800e15c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800e172:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e176:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e17a:	4b2d      	ldr	r3, [pc, #180]	; (800e230 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e182:	2a00      	cmp	r2, #0
 800e184:	d044      	beq.n	800e210 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800e186:	784b      	ldrb	r3, [r1, #1]
 800e188:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e18c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e190:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e194:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e198:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e19c:	4b25      	ldr	r3, [pc, #148]	; (800e234 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800e19e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800e1a8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e1ac:	9207      	str	r2, [sp, #28]
 800e1ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e1b0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e1b4:	f88d a020 	strb.w	sl, [sp, #32]
 800e1b8:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e1bc:	9009      	str	r0, [sp, #36]	; 0x24
 800e1be:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e1c2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e1c6:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800e1ca:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e1ce:	b10a      	cbz	r2, 800e1d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800e1d0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800e1d2:	b907      	cbnz	r7, 800e1d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800e1d4:	689f      	ldr	r7, [r3, #8]
 800e1d6:	f10d 0914 	add.w	r9, sp, #20
 800e1da:	4621      	mov	r1, r4
 800e1dc:	4648      	mov	r0, r9
 800e1de:	f003 fad5 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e1e2:	6833      	ldr	r3, [r6, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0b6      	beq.n	800e156 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800e1e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e1ea:	882b      	ldrh	r3, [r5, #0]
 800e1ec:	428b      	cmp	r3, r1
 800e1ee:	d9bc      	bls.n	800e16a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800e1f0:	4b11      	ldr	r3, [pc, #68]	; (800e238 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800e1f2:	6818      	ldr	r0, [r3, #0]
 800e1f4:	f7f6 fb4e 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	9001      	str	r0, [sp, #4]
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e202:	ab07      	add	r3, sp, #28
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4643      	mov	r3, r8
 800e208:	e899 0006 	ldmia.w	r9, {r1, r2}
 800e20c:	f7f6 faf4 	bl	80047f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e210:	b00c      	add	sp, #48	; 0x30
 800e212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e216:	bf00      	nop
 800e218:	24006cbc 	.word	0x24006cbc
 800e21c:	0801e0a8 	.word	0x0801e0a8
 800e220:	0801f384 	.word	0x0801f384
 800e224:	0801e136 	.word	0x0801e136
 800e228:	24006cc0 	.word	0x24006cc0
 800e22c:	0801e15f 	.word	0x0801e15f
 800e230:	24006cc4 	.word	0x24006cc4
 800e234:	24006c6c 	.word	0x24006c6c
 800e238:	24006cc8 	.word	0x24006cc8

0800e23c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800e23c:	b40e      	push	{r1, r2, r3}
 800e23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e246:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e248:	b09c      	sub	sp, #112	; 0x70
 800e24a:	4604      	mov	r4, r0
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d06b      	beq.n	800e328 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800e250:	aa26      	add	r2, sp, #152	; 0x98
 800e252:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800e33c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800e256:	9202      	str	r2, [sp, #8]
 800e258:	f8da 2000 	ldr.w	r2, [sl]
 800e25c:	b92a      	cbnz	r2, 800e26a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800e25e:	4b33      	ldr	r3, [pc, #204]	; (800e32c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800e260:	21ae      	movs	r1, #174	; 0xae
 800e262:	4a33      	ldr	r2, [pc, #204]	; (800e330 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e264:	4833      	ldr	r0, [pc, #204]	; (800e334 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800e266:	f00e f839 	bl	801c2dc <__assert_func>
 800e26a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e340 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800e26e:	f8b8 1000 	ldrh.w	r1, [r8]
 800e272:	4299      	cmp	r1, r3
 800e274:	d803      	bhi.n	800e27e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800e276:	4b30      	ldr	r3, [pc, #192]	; (800e338 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800e278:	21af      	movs	r1, #175	; 0xaf
 800e27a:	4a2d      	ldr	r2, [pc, #180]	; (800e330 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e27c:	e7f2      	b.n	800e264 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800e27e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800e344 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800e282:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e286:	f8d9 3000 	ldr.w	r3, [r9]
 800e28a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e28e:	682b      	ldr	r3, [r5, #0]
 800e290:	4628      	mov	r0, r5
 800e292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e294:	4798      	blx	r3
 800e296:	4606      	mov	r6, r0
 800e298:	b207      	sxth	r7, r0
 800e29a:	a803      	add	r0, sp, #12
 800e29c:	f003 fe50 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a6:	4798      	blx	r3
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	4683      	mov	fp, r0
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b0:	4798      	blx	r3
 800e2b2:	465b      	mov	r3, fp
 800e2b4:	9000      	str	r0, [sp, #0]
 800e2b6:	a803      	add	r0, sp, #12
 800e2b8:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e2ba:	9a02      	ldr	r2, [sp, #8]
 800e2bc:	f003 fe93 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e2c0:	f8da 3000 	ldr.w	r3, [sl]
 800e2c4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d0c8      	beq.n	800e25e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800e2cc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e2ce:	f8b8 0000 	ldrh.w	r0, [r8]
 800e2d2:	4290      	cmp	r0, r2
 800e2d4:	d9cf      	bls.n	800e276 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800e2d6:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e2da:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800e2de:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800e2e2:	786a      	ldrb	r2, [r5, #1]
 800e2e4:	8925      	ldrh	r5, [r4, #8]
 800e2e6:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800e2ee:	eba5 050c 	sub.w	r5, r5, ip
 800e2f2:	b22d      	sxth	r5, r5
 800e2f4:	9500      	str	r5, [sp, #0]
 800e2f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e2fa:	a803      	add	r0, sp, #12
 800e2fc:	f001 fd61 	bl	800fdc2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800e300:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800e304:	b203      	sxth	r3, r0
 800e306:	18b9      	adds	r1, r7, r2
 800e308:	2900      	cmp	r1, #0
 800e30a:	dd0b      	ble.n	800e324 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800e30c:	3b01      	subs	r3, #1
 800e30e:	fb13 f302 	smulbb	r3, r3, r2
 800e312:	fb16 3300 	smlabb	r3, r6, r0, r3
 800e316:	b21f      	sxth	r7, r3
 800e318:	4638      	mov	r0, r7
 800e31a:	b01c      	add	sp, #112	; 0x70
 800e31c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e320:	b003      	add	sp, #12
 800e322:	4770      	bx	lr
 800e324:	2b00      	cmp	r3, #0
 800e326:	dcf7      	bgt.n	800e318 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e328:	2700      	movs	r7, #0
 800e32a:	e7f5      	b.n	800e318 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e32c:	0801e0a8 	.word	0x0801e0a8
 800e330:	0801f384 	.word	0x0801f384
 800e334:	0801e136 	.word	0x0801e136
 800e338:	0801e15f 	.word	0x0801e15f
 800e33c:	24006cbc 	.word	0x24006cbc
 800e340:	24006cc0 	.word	0x24006cc0
 800e344:	24006cc4 	.word	0x24006cc4

0800e348 <_ZN8touchgfx8TextAreaD0Ev>:
 800e348:	b510      	push	{r4, lr}
 800e34a:	4604      	mov	r4, r0
 800e34c:	213c      	movs	r1, #60	; 0x3c
 800e34e:	f00d feaf 	bl	801c0b0 <_ZdlPvj>
 800e352:	4620      	mov	r0, r4
 800e354:	bd10      	pop	{r4, pc}
	...

0800e358 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e35e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e360:	4604      	mov	r4, r0
 800e362:	4299      	cmp	r1, r3
 800e364:	d01e      	beq.n	800e3a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800e366:	6803      	ldr	r3, [r0, #0]
 800e368:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e36a:	4b0f      	ldr	r3, [pc, #60]	; (800e3a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	b92b      	cbnz	r3, 800e37c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800e370:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800e372:	21ae      	movs	r1, #174	; 0xae
 800e374:	4a0e      	ldr	r2, [pc, #56]	; (800e3b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e376:	480f      	ldr	r0, [pc, #60]	; (800e3b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800e378:	f00d ffb0 	bl	801c2dc <__assert_func>
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	428b      	cmp	r3, r1
 800e382:	d803      	bhi.n	800e38c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800e384:	4b0d      	ldr	r3, [pc, #52]	; (800e3bc <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800e386:	21af      	movs	r1, #175	; 0xaf
 800e388:	4a09      	ldr	r2, [pc, #36]	; (800e3b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e38a:	e7f4      	b.n	800e376 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800e38c:	4b0c      	ldr	r3, [pc, #48]	; (800e3c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800e38e:	6818      	ldr	r0, [r3, #0]
 800e390:	f7f6 fa80 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e394:	2300      	movs	r3, #0
 800e396:	4601      	mov	r1, r0
 800e398:	46ac      	mov	ip, r5
 800e39a:	4620      	mov	r0, r4
 800e39c:	461a      	mov	r2, r3
 800e39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3a2:	4760      	bx	ip
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	24006cbc 	.word	0x24006cbc
 800e3ac:	0801e0a8 	.word	0x0801e0a8
 800e3b0:	0801f384 	.word	0x0801f384
 800e3b4:	0801e136 	.word	0x0801e136
 800e3b8:	24006cc0 	.word	0x24006cc0
 800e3bc:	0801e15f 	.word	0x0801e15f
 800e3c0:	24006cc8 	.word	0x24006cc8

0800e3c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	6803      	ldr	r3, [r0, #0]
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	4615      	mov	r5, r2
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	4798      	blx	r3
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3dc:	4718      	bx	r3

0800e3de <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800e3de:	b538      	push	{r3, r4, r5, lr}
 800e3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3e4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d014      	beq.n	800e416 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800e3ec:	6803      	ldr	r3, [r0, #0]
 800e3ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3f0:	4798      	blx	r3
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3fa:	4798      	blx	r3
 800e3fc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e400:	b22d      	sxth	r5, r5
 800e402:	4601      	mov	r1, r0
 800e404:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e408:	bf06      	itte	eq
 800e40a:	4602      	moveq	r2, r0
 800e40c:	4629      	moveq	r1, r5
 800e40e:	462a      	movne	r2, r5
 800e410:	4620      	mov	r0, r4
 800e412:	f7ff ffd7 	bl	800e3c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e416:	bd38      	pop	{r3, r4, r5, pc}

0800e418 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800e418:	888a      	ldrh	r2, [r1, #4]
 800e41a:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e41c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800e420:	b922      	cbnz	r2, 800e42c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e422:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e426:	b90b      	cbnz	r3, 800e42c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e428:	f7ff bfd9 	b.w	800e3de <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800e42c:	4770      	bx	lr

0800e42e <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e42e:	2300      	movs	r3, #0
 800e430:	8083      	strh	r3, [r0, #4]
 800e432:	80c3      	strh	r3, [r0, #6]
 800e434:	8003      	strh	r3, [r0, #0]
 800e436:	8043      	strh	r3, [r0, #2]
 800e438:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800e43c:	2bff      	cmp	r3, #255	; 0xff
 800e43e:	bf01      	itttt	eq
 800e440:	890b      	ldrheq	r3, [r1, #8]
 800e442:	8083      	strheq	r3, [r0, #4]
 800e444:	894b      	ldrheq	r3, [r1, #10]
 800e446:	80c3      	strheq	r3, [r0, #6]
 800e448:	4770      	bx	lr
	...

0800e44c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e44e:	4604      	mov	r4, r0
 800e450:	466b      	mov	r3, sp
 800e452:	6808      	ldr	r0, [r1, #0]
 800e454:	6849      	ldr	r1, [r1, #4]
 800e456:	c303      	stmia	r3!, {r0, r1}
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	4669      	mov	r1, sp
 800e45c:	4620      	mov	r0, r4
 800e45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e460:	4798      	blx	r3
 800e462:	4b08      	ldr	r3, [pc, #32]	; (800e484 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e46a:	b10a      	cbz	r2, 800e470 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e46c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e46e:	b900      	cbnz	r0, 800e472 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e470:	6898      	ldr	r0, [r3, #8]
 800e472:	6803      	ldr	r3, [r0, #0]
 800e474:	4669      	mov	r1, sp
 800e476:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e478:	699d      	ldr	r5, [r3, #24]
 800e47a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e47e:	47a8      	blx	r5
 800e480:	b003      	add	sp, #12
 800e482:	bd30      	pop	{r4, r5, pc}
 800e484:	24006c6c 	.word	0x24006c6c

0800e488 <_ZN8touchgfx3BoxD1Ev>:
 800e488:	4770      	bx	lr

0800e48a <_ZN8touchgfx3BoxD0Ev>:
 800e48a:	b510      	push	{r4, lr}
 800e48c:	4604      	mov	r4, r0
 800e48e:	212c      	movs	r1, #44	; 0x2c
 800e490:	f00d fe0e 	bl	801c0b0 <_ZdlPvj>
 800e494:	4620      	mov	r0, r4
 800e496:	bd10      	pop	{r4, pc}

0800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	880b      	ldrh	r3, [r1, #0]
 800e49c:	4605      	mov	r5, r0
 800e49e:	4604      	mov	r4, r0
 800e4a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e4a2:	8813      	ldrh	r3, [r2, #0]
 800e4a4:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f005 fb05 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f005 fb3b 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	b231      	sxth	r1, r6
 800e4bc:	4620      	mov	r0, r4
 800e4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c0:	4798      	blx	r3
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	b229      	sxth	r1, r5
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ce:	4718      	bx	r3

0800e4d0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	2bff      	cmp	r3, #255	; 0xff
 800e4da:	d006      	beq.n	800e4ea <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	8003      	strh	r3, [r0, #0]
 800e4e0:	8043      	strh	r3, [r0, #2]
 800e4e2:	8083      	strh	r3, [r0, #4]
 800e4e4:	80c3      	strh	r3, [r0, #6]
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	bd10      	pop	{r4, pc}
 800e4ea:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800e4ee:	b11b      	cbz	r3, 800e4f8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e4f0:	3130      	adds	r1, #48	; 0x30
 800e4f2:	f005 fb55 	bl	8013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e4f6:	e7f6      	b.n	800e4e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e4f8:	312e      	adds	r1, #46	; 0x2e
 800e4fa:	e7fa      	b.n	800e4f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e4fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e500:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e504:	b08a      	sub	sp, #40	; 0x28
 800e506:	4604      	mov	r4, r0
 800e508:	4688      	mov	r8, r1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d044      	beq.n	800e598 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800e50e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e510:	a805      	add	r0, sp, #20
 800e512:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e516:	f005 facf 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e51a:	4605      	mov	r5, r0
 800e51c:	b206      	sxth	r6, r0
 800e51e:	a805      	add	r0, sp, #20
 800e520:	f005 fb04 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e524:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e528:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800e52c:	2300      	movs	r3, #0
 800e52e:	fa0f fc80 	sxth.w	ip, r0
 800e532:	4417      	add	r7, r2
 800e534:	9306      	str	r3, [sp, #24]
 800e536:	b2bf      	uxth	r7, r7
 800e538:	fa0f fe87 	sxth.w	lr, r7
 800e53c:	459e      	cmp	lr, r3
 800e53e:	dd2d      	ble.n	800e59c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e540:	4296      	cmp	r6, r2
 800e542:	dd2b      	ble.n	800e59c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e544:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800e548:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800e54c:	4419      	add	r1, r3
 800e54e:	b289      	uxth	r1, r1
 800e550:	fa0f f881 	sxth.w	r8, r1
 800e554:	f1b8 0f00 	cmp.w	r8, #0
 800e558:	dd20      	ble.n	800e59c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e55a:	459c      	cmp	ip, r3
 800e55c:	dd1e      	ble.n	800e59c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e55e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e566:	4576      	cmp	r6, lr
 800e568:	bfa8      	it	ge
 800e56a:	463d      	movge	r5, r7
 800e56c:	45c4      	cmp	ip, r8
 800e56e:	bfa8      	it	ge
 800e570:	4608      	movge	r0, r1
 800e572:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e576:	1aad      	subs	r5, r5, r2
 800e578:	1ac0      	subs	r0, r0, r3
 800e57a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e57e:	f8ad 501c 	strh.w	r5, [sp, #28]
 800e582:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e586:	4b1f      	ldr	r3, [pc, #124]	; (800e604 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	b953      	cbnz	r3, 800e5a2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800e58c:	4b1e      	ldr	r3, [pc, #120]	; (800e608 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800e58e:	2187      	movs	r1, #135	; 0x87
 800e590:	4a1e      	ldr	r2, [pc, #120]	; (800e60c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800e592:	481f      	ldr	r0, [pc, #124]	; (800e610 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800e594:	f00d fea2 	bl	801c2dc <__assert_func>
 800e598:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e59a:	e7b9      	b.n	800e510 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e59c:	2300      	movs	r3, #0
 800e59e:	9307      	str	r3, [sp, #28]
 800e5a0:	e7f1      	b.n	800e586 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e5a2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e5a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d026      	beq.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e5ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dd22      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e5b6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	dd1e      	ble.n	800e5fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	a908      	add	r1, sp, #32
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5cc:	4798      	blx	r3
 800e5ce:	4b11      	ldr	r3, [pc, #68]	; (800e614 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e5d6:	b10a      	cbz	r2, 800e5dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e5d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e5da:	b900      	cbnz	r0, 800e5de <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800e5dc:	6898      	ldr	r0, [r3, #8]
 800e5de:	2501      	movs	r5, #1
 800e5e0:	6801      	ldr	r1, [r0, #0]
 800e5e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800e5e6:	9502      	str	r5, [sp, #8]
 800e5e8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800e5ec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e5f0:	9401      	str	r4, [sp, #4]
 800e5f2:	ac06      	add	r4, sp, #24
 800e5f4:	9400      	str	r4, [sp, #0]
 800e5f6:	688c      	ldr	r4, [r1, #8]
 800e5f8:	a905      	add	r1, sp, #20
 800e5fa:	47a0      	blx	r4
 800e5fc:	b00a      	add	sp, #40	; 0x28
 800e5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e602:	bf00      	nop
 800e604:	24006cf4 	.word	0x24006cf4
 800e608:	0801f196 	.word	0x0801f196
 800e60c:	0801f418 	.word	0x0801f418
 800e610:	0801f1d2 	.word	0x0801f1d2
 800e614:	24006c6c 	.word	0x24006c6c

0800e618 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 800e618:	4770      	bx	lr
	...

0800e61c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800e61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e61e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e622:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e624:	4606      	mov	r6, r0
 800e626:	4299      	cmp	r1, r3
 800e628:	d02a      	beq.n	800e680 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800e62a:	4b16      	ldr	r3, [pc, #88]	; (800e684 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	b92b      	cbnz	r3, 800e63c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800e630:	4b15      	ldr	r3, [pc, #84]	; (800e688 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800e632:	21ae      	movs	r1, #174	; 0xae
 800e634:	4a15      	ldr	r2, [pc, #84]	; (800e68c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e636:	4816      	ldr	r0, [pc, #88]	; (800e690 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800e638:	f00d fe50 	bl	801c2dc <__assert_func>
 800e63c:	4a15      	ldr	r2, [pc, #84]	; (800e694 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800e63e:	8812      	ldrh	r2, [r2, #0]
 800e640:	428a      	cmp	r2, r1
 800e642:	d803      	bhi.n	800e64c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800e644:	4b14      	ldr	r3, [pc, #80]	; (800e698 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800e646:	21af      	movs	r1, #175	; 0xaf
 800e648:	4a10      	ldr	r2, [pc, #64]	; (800e68c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e64a:	e7f4      	b.n	800e636 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800e64c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e650:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e654:	4b11      	ldr	r3, [pc, #68]	; (800e69c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800e656:	7854      	ldrb	r4, [r2, #1]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e65e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e662:	682b      	ldr	r3, [r5, #0]
 800e664:	69df      	ldr	r7, [r3, #28]
 800e666:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	f7f6 f913 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e66e:	2300      	movs	r3, #0
 800e670:	4602      	mov	r2, r0
 800e672:	4621      	mov	r1, r4
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	4628      	mov	r0, r5
 800e678:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e67a:	47b8      	blx	r7
 800e67c:	b003      	add	sp, #12
 800e67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e680:	2000      	movs	r0, #0
 800e682:	e7fb      	b.n	800e67c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800e684:	24006cbc 	.word	0x24006cbc
 800e688:	0801e0a8 	.word	0x0801e0a8
 800e68c:	0801f4c4 	.word	0x0801f4c4
 800e690:	0801e136 	.word	0x0801e136
 800e694:	24006cc0 	.word	0x24006cc0
 800e698:	0801e15f 	.word	0x0801e15f
 800e69c:	24006cc4 	.word	0x24006cc4
 800e6a0:	24006cc8 	.word	0x24006cc8

0800e6a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	4299      	cmp	r1, r3
 800e6b0:	d01e      	beq.n	800e6f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800e6b2:	6803      	ldr	r3, [r0, #0]
 800e6b4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e6b6:	4b0f      	ldr	r3, [pc, #60]	; (800e6f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	b92b      	cbnz	r3, 800e6c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	; (800e6f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800e6be:	21ae      	movs	r1, #174	; 0xae
 800e6c0:	4a0e      	ldr	r2, [pc, #56]	; (800e6fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e6c2:	480f      	ldr	r0, [pc, #60]	; (800e700 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800e6c4:	f00d fe0a 	bl	801c2dc <__assert_func>
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	428b      	cmp	r3, r1
 800e6ce:	d803      	bhi.n	800e6d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800e6d0:	4b0d      	ldr	r3, [pc, #52]	; (800e708 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800e6d2:	21af      	movs	r1, #175	; 0xaf
 800e6d4:	4a09      	ldr	r2, [pc, #36]	; (800e6fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e6d6:	e7f4      	b.n	800e6c2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800e6d8:	4b0c      	ldr	r3, [pc, #48]	; (800e70c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800e6da:	6818      	ldr	r0, [r3, #0]
 800e6dc:	f7f6 f8da 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e6e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6e2:	4601      	mov	r1, r0
 800e6e4:	46ac      	mov	ip, r5
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6ee:	4760      	bx	ip
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	bd70      	pop	{r4, r5, r6, pc}
 800e6f4:	24006cbc 	.word	0x24006cbc
 800e6f8:	0801e0a8 	.word	0x0801e0a8
 800e6fc:	0801f4c4 	.word	0x0801f4c4
 800e700:	0801e136 	.word	0x0801e136
 800e704:	24006cc0 	.word	0x24006cc0
 800e708:	0801e15f 	.word	0x0801e15f
 800e70c:	24006cc8 	.word	0x24006cc8

0800e710 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e710:	b510      	push	{r4, lr}
 800e712:	4604      	mov	r4, r0
 800e714:	2140      	movs	r1, #64	; 0x40
 800e716:	f00d fccb 	bl	801c0b0 <_ZdlPvj>
 800e71a:	4620      	mov	r0, r4
 800e71c:	bd10      	pop	{r4, pc}
	...

0800e720 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e728:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e72a:	b08c      	sub	sp, #48	; 0x30
 800e72c:	4604      	mov	r4, r0
 800e72e:	4293      	cmp	r3, r2
 800e730:	460e      	mov	r6, r1
 800e732:	d05d      	beq.n	800e7f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e734:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800e814 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800e738:	f8d8 2000 	ldr.w	r2, [r8]
 800e73c:	b92a      	cbnz	r2, 800e74a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800e73e:	4b2e      	ldr	r3, [pc, #184]	; (800e7f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800e740:	21ae      	movs	r1, #174	; 0xae
 800e742:	4a2e      	ldr	r2, [pc, #184]	; (800e7fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e744:	482e      	ldr	r0, [pc, #184]	; (800e800 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800e746:	f00d fdc9 	bl	801c2dc <__assert_func>
 800e74a:	4f2e      	ldr	r7, [pc, #184]	; (800e804 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800e74c:	8839      	ldrh	r1, [r7, #0]
 800e74e:	4299      	cmp	r1, r3
 800e750:	d803      	bhi.n	800e75a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800e752:	4b2d      	ldr	r3, [pc, #180]	; (800e808 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800e754:	21af      	movs	r1, #175	; 0xaf
 800e756:	4a29      	ldr	r2, [pc, #164]	; (800e7fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e758:	e7f4      	b.n	800e744 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800e75a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e75e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e762:	4b2a      	ldr	r3, [pc, #168]	; (800e80c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e76a:	2a00      	cmp	r2, #0
 800e76c:	d040      	beq.n	800e7f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e76e:	784b      	ldrb	r3, [r1, #1]
 800e770:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800e774:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e778:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e77c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e780:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e784:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e788:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e78c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e790:	ad05      	add	r5, sp, #20
 800e792:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e794:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e798:	9207      	str	r2, [sp, #28]
 800e79a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e79e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e7a2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e7a6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e7aa:	f88d a020 	strb.w	sl, [sp, #32]
 800e7ae:	9009      	str	r0, [sp, #36]	; 0x24
 800e7b0:	f7fe fb92 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	4681      	mov	r9, r0
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	f002 ffe7 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e7be:	f8d8 3000 	ldr.w	r3, [r8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d0bb      	beq.n	800e73e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800e7c6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e7c8:	883b      	ldrh	r3, [r7, #0]
 800e7ca:	428b      	cmp	r3, r1
 800e7cc:	d9c1      	bls.n	800e752 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800e7ce:	4b10      	ldr	r3, [pc, #64]	; (800e810 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800e7d0:	6818      	ldr	r0, [r3, #0]
 800e7d2:	f7f6 f85f 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e7dc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800e7e0:	ab07      	add	r3, sp, #28
 800e7e2:	4648      	mov	r0, r9
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4633      	mov	r3, r6
 800e7e8:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e7ec:	f7f6 f804 	bl	80047f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e7f0:	b00c      	add	sp, #48	; 0x30
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	bf00      	nop
 800e7f8:	0801e0a8 	.word	0x0801e0a8
 800e7fc:	0801f4c4 	.word	0x0801f4c4
 800e800:	0801e136 	.word	0x0801e136
 800e804:	24006cc0 	.word	0x24006cc0
 800e808:	0801e15f 	.word	0x0801e15f
 800e80c:	24006cc4 	.word	0x24006cc4
 800e810:	24006cc8 	.word	0x24006cc8
 800e814:	24006cbc 	.word	0x24006cbc

0800e818 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800e818:	4770      	bx	lr

0800e81a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800e81a:	b510      	push	{r4, lr}
 800e81c:	4604      	mov	r4, r0
 800e81e:	2134      	movs	r1, #52	; 0x34
 800e820:	f00d fc46 	bl	801c0b0 <_ZdlPvj>
 800e824:	4620      	mov	r0, r4
 800e826:	bd10      	pop	{r4, pc}

0800e828 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800e828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e82c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e82e:	4604      	mov	r4, r0
 800e830:	460e      	mov	r6, r1
 800e832:	b08e      	sub	sp, #56	; 0x38
 800e834:	b218      	sxth	r0, r3
 800e836:	8921      	ldrh	r1, [r4, #8]
 800e838:	005b      	lsls	r3, r3, #1
 800e83a:	8962      	ldrh	r2, [r4, #10]
 800e83c:	f8ad 0000 	strh.w	r0, [sp]
 800e840:	b29b      	uxth	r3, r3
 800e842:	f8ad 0002 	strh.w	r0, [sp, #2]
 800e846:	1ac9      	subs	r1, r1, r3
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	b209      	sxth	r1, r1
 800e84c:	b21b      	sxth	r3, r3
 800e84e:	2900      	cmp	r1, #0
 800e850:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e854:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e858:	dd5e      	ble.n	800e918 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dd5c      	ble.n	800e918 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800e85e:	6830      	ldr	r0, [r6, #0]
 800e860:	ab02      	add	r3, sp, #8
 800e862:	6871      	ldr	r1, [r6, #4]
 800e864:	c303      	stmia	r3!, {r0, r1}
 800e866:	4669      	mov	r1, sp
 800e868:	a802      	add	r0, sp, #8
 800e86a:	f7fe f865 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800e86e:	4620      	mov	r0, r4
 800e870:	a902      	add	r1, sp, #8
 800e872:	f7ff fdeb 	bl	800e44c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800e876:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800e878:	2800      	cmp	r0, #0
 800e87a:	d05f      	beq.n	800e93c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e87c:	8963      	ldrh	r3, [r4, #10]
 800e87e:	b202      	sxth	r2, r0
 800e880:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e884:	2500      	movs	r5, #0
 800e886:	1a1f      	subs	r7, r3, r0
 800e888:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800e88c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e890:	b21b      	sxth	r3, r3
 800e892:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e896:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800e89a:	af04      	add	r7, sp, #16
 800e89c:	1a09      	subs	r1, r1, r0
 800e89e:	9506      	str	r5, [sp, #24]
 800e8a0:	f8ad 201e 	strh.w	r2, [sp, #30]
 800e8a4:	f8ad 5020 	strh.w	r5, [sp, #32]
 800e8a8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e8ac:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800e8b0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e8b4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e8b8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e8bc:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800e8c0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800e8c4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e8c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e8cc:	ab06      	add	r3, sp, #24
 800e8ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e8d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8d6:	e887 0003 	stmia.w	r7, {r0, r1}
 800e8da:	4631      	mov	r1, r6
 800e8dc:	4638      	mov	r0, r7
 800e8de:	f7fe f82b 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800e8e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	dd12      	ble.n	800e910 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e8ea:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dd0e      	ble.n	800e910 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800e8f2:	6823      	ldr	r3, [r4, #0]
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	4798      	blx	r3
 800e8fc:	f7fe faec 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800e900:	6803      	ldr	r3, [r0, #0]
 800e902:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e904:	4639      	mov	r1, r7
 800e906:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e90a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e90e:	47c0      	blx	r8
 800e910:	3501      	adds	r5, #1
 800e912:	2d04      	cmp	r5, #4
 800e914:	d1da      	bne.n	800e8cc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800e916:	e011      	b.n	800e93c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800e918:	6830      	ldr	r0, [r6, #0]
 800e91a:	ab06      	add	r3, sp, #24
 800e91c:	6871      	ldr	r1, [r6, #4]
 800e91e:	c303      	stmia	r3!, {r0, r1}
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	a906      	add	r1, sp, #24
 800e924:	4620      	mov	r0, r4
 800e926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e928:	4798      	blx	r3
 800e92a:	f7fe fad5 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 800e92e:	6803      	ldr	r3, [r0, #0]
 800e930:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e932:	a906      	add	r1, sp, #24
 800e934:	699d      	ldr	r5, [r3, #24]
 800e936:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e93a:	47a8      	blx	r5
 800e93c:	b00e      	add	sp, #56	; 0x38
 800e93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e942 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 800e942:	4770      	bx	lr

0800e944 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800e944:	b510      	push	{r4, lr}
 800e946:	4604      	mov	r4, r0
 800e948:	213c      	movs	r1, #60	; 0x3c
 800e94a:	f00d fbb1 	bl	801c0b0 <_ZdlPvj>
 800e94e:	4620      	mov	r0, r4
 800e950:	bd10      	pop	{r4, pc}

0800e952 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 800e952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e956:	461c      	mov	r4, r3
 800e958:	4606      	mov	r6, r0
 800e95a:	9f06      	ldr	r7, [sp, #24]
 800e95c:	f7ff fd9c 	bl	800e498 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800e960:	8823      	ldrh	r3, [r4, #0]
 800e962:	f04f 0802 	mov.w	r8, #2
 800e966:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 800e96a:	4638      	mov	r0, r7
 800e96c:	86b3      	strh	r3, [r6, #52]	; 0x34
 800e96e:	883b      	ldrh	r3, [r7, #0]
 800e970:	fb95 f5f8 	sdiv	r5, r5, r8
 800e974:	86f3      	strh	r3, [r6, #54]	; 0x36
 800e976:	b2ad      	uxth	r5, r5
 800e978:	f005 f89e 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e97c:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800e980:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 800e984:	fb94 f4f8 	sdiv	r4, r4, r8
 800e988:	b2a4      	uxth	r4, r4
 800e98a:	8730      	strh	r0, [r6, #56]	; 0x38
 800e98c:	4638      	mov	r0, r7
 800e98e:	f005 f8cd 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e992:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800e996:	8770      	strh	r0, [r6, #58]	; 0x3a
 800e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e99c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 800e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	b08c      	sub	sp, #48	; 0x30
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	f7ff fda9 	bl	800e4fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800e9aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e9ae:	b33b      	cbz	r3, 800ea00 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 800e9b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e9b2:	a805      	add	r0, sp, #20
 800e9b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e9b8:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 800e9bc:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 800e9c0:	f005 f87a 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	a805      	add	r0, sp, #20
 800e9c8:	f005 f8b0 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e9cc:	6869      	ldr	r1, [r5, #4]
 800e9ce:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e9d2:	ab08      	add	r3, sp, #32
 800e9d4:	6828      	ldr	r0, [r5, #0]
 800e9d6:	ad08      	add	r5, sp, #32
 800e9d8:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e9dc:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e9e0:	f8ad 601c 	strh.w	r6, [sp, #28]
 800e9e4:	c303      	stmia	r3!, {r0, r1}
 800e9e6:	a906      	add	r1, sp, #24
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f7fd ffa5 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800e9ee:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	b93b      	cbnz	r3, 800ea04 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 800e9f4:	4b24      	ldr	r3, [pc, #144]	; (800ea88 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 800e9f6:	2187      	movs	r1, #135	; 0x87
 800e9f8:	4a24      	ldr	r2, [pc, #144]	; (800ea8c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 800e9fa:	4825      	ldr	r0, [pc, #148]	; (800ea90 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 800e9fc:	f00d fc6e 	bl	801c2dc <__assert_func>
 800ea00:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ea02:	e7d6      	b.n	800e9b2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 800ea04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ea08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d035      	beq.n	800ea7c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea10:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	dd31      	ble.n	800ea7c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea18:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dd2d      	ble.n	800ea7c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800ea20:	2300      	movs	r3, #0
 800ea22:	a90a      	add	r1, sp, #40	; 0x28
 800ea24:	4620      	mov	r0, r4
 800ea26:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2e:	4798      	blx	r3
 800ea30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ea34:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800ea36:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ea3a:	1a9b      	subs	r3, r3, r2
 800ea3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ea40:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800ea42:	1ac9      	subs	r1, r1, r3
 800ea44:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800ea48:	4912      	ldr	r1, [pc, #72]	; (800ea94 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 800ea4a:	6809      	ldr	r1, [r1, #0]
 800ea4c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 800ea50:	b108      	cbz	r0, 800ea56 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 800ea52:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800ea54:	b900      	cbnz	r0, 800ea58 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 800ea56:	6888      	ldr	r0, [r1, #8]
 800ea58:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800ea5c:	2601      	movs	r6, #1
 800ea5e:	440b      	add	r3, r1
 800ea60:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800ea64:	440a      	add	r2, r1
 800ea66:	6801      	ldr	r1, [r0, #0]
 800ea68:	9602      	str	r6, [sp, #8]
 800ea6a:	b21b      	sxth	r3, r3
 800ea6c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800ea70:	b212      	sxth	r2, r2
 800ea72:	e9cd 5400 	strd	r5, r4, [sp]
 800ea76:	688c      	ldr	r4, [r1, #8]
 800ea78:	a905      	add	r1, sp, #20
 800ea7a:	47a0      	blx	r4
 800ea7c:	b00c      	add	sp, #48	; 0x30
 800ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea82:	bf00      	nop
 800ea84:	24006cf4 	.word	0x24006cf4
 800ea88:	0801f196 	.word	0x0801f196
 800ea8c:	0801f5cc 	.word	0x0801f5cc
 800ea90:	0801f1d2 	.word	0x0801f1d2
 800ea94:	24006c6c 	.word	0x24006c6c

0800ea98 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 800ea98:	2101      	movs	r1, #1
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800eaa2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800eaa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eaaa:	4c0d      	ldr	r4, [pc, #52]	; (800eae0 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800eaac:	8082      	strh	r2, [r0, #4]
 800eaae:	80c2      	strh	r2, [r0, #6]
 800eab0:	8102      	strh	r2, [r0, #8]
 800eab2:	8142      	strh	r2, [r0, #10]
 800eab4:	8182      	strh	r2, [r0, #12]
 800eab6:	81c2      	strh	r2, [r0, #14]
 800eab8:	8202      	strh	r2, [r0, #16]
 800eaba:	8242      	strh	r2, [r0, #18]
 800eabc:	61c2      	str	r2, [r0, #28]
 800eabe:	8402      	strh	r2, [r0, #32]
 800eac0:	8442      	strh	r2, [r0, #34]	; 0x22
 800eac2:	6282      	str	r2, [r0, #40]	; 0x28
 800eac4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800eac8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800eaca:	8601      	strh	r1, [r0, #48]	; 0x30
 800eacc:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800ead0:	6004      	str	r4, [r0, #0]
 800ead2:	8681      	strh	r1, [r0, #52]	; 0x34
 800ead4:	86c1      	strh	r1, [r0, #54]	; 0x36
 800ead6:	8702      	strh	r2, [r0, #56]	; 0x38
 800ead8:	8742      	strh	r2, [r0, #58]	; 0x3a
 800eada:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800eade:	bd10      	pop	{r4, pc}
 800eae0:	0801f560 	.word	0x0801f560

0800eae4 <_ZN8touchgfx5ImageD1Ev>:
 800eae4:	4770      	bx	lr

0800eae6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800eae6:	b570      	push	{r4, r5, r6, lr}
 800eae8:	880b      	ldrh	r3, [r1, #0]
 800eaea:	460d      	mov	r5, r1
 800eaec:	4604      	mov	r4, r0
 800eaee:	84c3      	strh	r3, [r0, #38]	; 0x26
 800eaf0:	4608      	mov	r0, r1
 800eaf2:	f004 ffe1 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f005 f817 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	4605      	mov	r5, r0
 800eb02:	b231      	sxth	r1, r6
 800eb04:	4620      	mov	r0, r4
 800eb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb08:	4798      	blx	r3
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	b229      	sxth	r1, r5
 800eb0e:	4620      	mov	r0, r4
 800eb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb16:	4718      	bx	r3

0800eb18 <_ZN8touchgfx5ImageD0Ev>:
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	212c      	movs	r1, #44	; 0x2c
 800eb1e:	f00d fac7 	bl	801c0b0 <_ZdlPvj>
 800eb22:	4620      	mov	r0, r4
 800eb24:	bd10      	pop	{r4, pc}

0800eb26 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800eb26:	b510      	push	{r4, lr}
 800eb28:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	2bff      	cmp	r3, #255	; 0xff
 800eb30:	d006      	beq.n	800eb40 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800eb32:	2300      	movs	r3, #0
 800eb34:	8003      	strh	r3, [r0, #0]
 800eb36:	8043      	strh	r3, [r0, #2]
 800eb38:	8083      	strh	r3, [r0, #4]
 800eb3a:	80c3      	strh	r3, [r0, #6]
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	3126      	adds	r1, #38	; 0x26
 800eb42:	f005 f82d 	bl	8013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800eb46:	e7f9      	b.n	800eb3c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800eb48 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	b088      	sub	sp, #32
 800eb50:	2500      	movs	r5, #0
 800eb52:	460f      	mov	r7, r1
 800eb54:	f854 3b26 	ldr.w	r3, [r4], #38
 800eb58:	a904      	add	r1, sp, #16
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb62:	4798      	blx	r3
 800eb64:	4620      	mov	r0, r4
 800eb66:	f004 ffa7 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eb6a:	4680      	mov	r8, r0
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f004 ffdd 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eb72:	9506      	str	r5, [sp, #24]
 800eb74:	ad06      	add	r5, sp, #24
 800eb76:	f8ad 001e 	strh.w	r0, [sp, #30]
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800eb80:	4628      	mov	r0, r5
 800eb82:	f7fd fed9 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800eb86:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	dd19      	ble.n	800ebc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eb8e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	dd15      	ble.n	800ebc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eb96:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800eb9e:	b10a      	cbz	r2, 800eba4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800eba0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eba2:	b900      	cbnz	r0, 800eba6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800eba4:	6898      	ldr	r0, [r3, #8]
 800eba6:	2701      	movs	r7, #1
 800eba8:	6801      	ldr	r1, [r0, #0]
 800ebaa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ebae:	9702      	str	r7, [sp, #8]
 800ebb0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800ebb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800ebb8:	e9cd 5600 	strd	r5, r6, [sp]
 800ebbc:	688d      	ldr	r5, [r1, #8]
 800ebbe:	4621      	mov	r1, r4
 800ebc0:	47a8      	blx	r5
 800ebc2:	b008      	add	sp, #32
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	24006c6c 	.word	0x24006c6c

0800ebcc <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 800ebcc:	4770      	bx	lr

0800ebce <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	2148      	movs	r1, #72	; 0x48
 800ebd4:	f00d fa6c 	bl	801c0b0 <_ZdlPvj>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	bd10      	pop	{r4, pc}

0800ebdc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 800ebdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	b08c      	sub	sp, #48	; 0x30
 800ebe4:	4688      	mov	r8, r1
 800ebe6:	f7ff fc89 	bl	800e4fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 800ebea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ebec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	f000 809a 	beq.w	800ed2a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ebf6:	4e55      	ldr	r6, [pc, #340]	; (800ed4c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 800ebf8:	6832      	ldr	r2, [r6, #0]
 800ebfa:	b92a      	cbnz	r2, 800ec08 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 800ebfc:	4b54      	ldr	r3, [pc, #336]	; (800ed50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 800ebfe:	21ae      	movs	r1, #174	; 0xae
 800ec00:	4a54      	ldr	r2, [pc, #336]	; (800ed54 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ec02:	4855      	ldr	r0, [pc, #340]	; (800ed58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 800ec04:	f00d fb6a 	bl	801c2dc <__assert_func>
 800ec08:	4d54      	ldr	r5, [pc, #336]	; (800ed5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 800ec0a:	8829      	ldrh	r1, [r5, #0]
 800ec0c:	4299      	cmp	r1, r3
 800ec0e:	d803      	bhi.n	800ec18 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 800ec10:	4b53      	ldr	r3, [pc, #332]	; (800ed60 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 800ec12:	21af      	movs	r1, #175	; 0xaf
 800ec14:	4a4f      	ldr	r2, [pc, #316]	; (800ed54 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 800ec16:	e7f4      	b.n	800ec02 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 800ec18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ec1c:	f04f 0c02 	mov.w	ip, #2
 800ec20:	4b50      	ldr	r3, [pc, #320]	; (800ed64 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 800ec22:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec2c:	f1be 0f01 	cmp.w	lr, #1
 800ec30:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ec34:	f04f 0300 	mov.w	r3, #0
 800ec38:	b208      	sxth	r0, r1
 800ec3a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ec3e:	9303      	str	r3, [sp, #12]
 800ec40:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ec44:	d074      	beq.n	800ed30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ec46:	f1be 0f03 	cmp.w	lr, #3
 800ec4a:	d071      	beq.n	800ed30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 800ec4c:	1a52      	subs	r2, r2, r1
 800ec4e:	f8ad 3010 	strh.w	r3, [sp, #16]
 800ec52:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ec56:	fb92 f2fc 	sdiv	r2, r2, ip
 800ec5a:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ec5e:	f10d 090c 	add.w	r9, sp, #12
 800ec62:	f10d 0a14 	add.w	sl, sp, #20
 800ec66:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ec6a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800ec6e:	4641      	mov	r1, r8
 800ec70:	4650      	mov	r0, sl
 800ec72:	f7fd fe61 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 800ec76:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	dd55      	ble.n	800ed2a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ec7e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	dd51      	ble.n	800ed2a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 800ec86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ec90:	4620      	mov	r0, r4
 800ec92:	1a9b      	subs	r3, r3, r2
 800ec94:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800ec98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800eca0:	1a9b      	subs	r3, r3, r2
 800eca2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecaa:	4798      	blx	r3
 800ecac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d047      	beq.n	800ed44 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800ecb4:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800ecb8:	6833      	ldr	r3, [r6, #0]
 800ecba:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d09c      	beq.n	800ebfc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 800ecc2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800ecc4:	882d      	ldrh	r5, [r5, #0]
 800ecc6:	428d      	cmp	r5, r1
 800ecc8:	d9a2      	bls.n	800ec10 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 800ecca:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ecce:	6812      	ldr	r2, [r2, #0]
 800ecd0:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ecd8:	f3c3 0501 	ubfx	r5, r3, #0, #2
 800ecdc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ece0:	9707      	str	r7, [sp, #28]
 800ece2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800ece6:	2300      	movs	r3, #0
 800ece8:	f88d 5020 	strb.w	r5, [sp, #32]
 800ecec:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800ecf0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ecf4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ecf8:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 800ecfa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ed04:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ed08:	b10a      	cbz	r2, 800ed0e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 800ed0a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ed0c:	b904      	cbnz	r4, 800ed10 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 800ed0e:	689c      	ldr	r4, [r3, #8]
 800ed10:	4b16      	ldr	r3, [pc, #88]	; (800ed6c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	f7f5 fdbe 	bl	8004894 <_ZNK8touchgfx5Texts7getTextEt>
 800ed18:	ab07      	add	r3, sp, #28
 800ed1a:	9001      	str	r0, [sp, #4]
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	4653      	mov	r3, sl
 800ed22:	e899 0006 	ldmia.w	r9, {r1, r2}
 800ed26:	f7f5 fd67 	bl	80047f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ed2a:	b00c      	add	sp, #48	; 0x30
 800ed2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed30:	1a5b      	subs	r3, r3, r1
 800ed32:	f8ad 0010 	strh.w	r0, [sp, #16]
 800ed36:	f8ad 2012 	strh.w	r2, [sp, #18]
 800ed3a:	fb93 f3fc 	sdiv	r3, r3, ip
 800ed3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ed42:	e78c      	b.n	800ec5e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 800ed44:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800ed48:	e7b6      	b.n	800ecb8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 800ed4a:	bf00      	nop
 800ed4c:	24006cbc 	.word	0x24006cbc
 800ed50:	0801e0a8 	.word	0x0801e0a8
 800ed54:	0801f6d8 	.word	0x0801f6d8
 800ed58:	0801e136 	.word	0x0801e136
 800ed5c:	24006cc0 	.word	0x24006cc0
 800ed60:	0801e15f 	.word	0x0801e15f
 800ed64:	24006cc4 	.word	0x24006cc4
 800ed68:	24006c6c 	.word	0x24006c6c
 800ed6c:	24006cc8 	.word	0x24006cc8

0800ed70 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 800ed70:	2101      	movs	r1, #1
 800ed72:	2200      	movs	r2, #0
 800ed74:	b510      	push	{r4, lr}
 800ed76:	4c13      	ldr	r4, [pc, #76]	; (800edc4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 800ed78:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800ed7c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ed80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed84:	6004      	str	r4, [r0, #0]
 800ed86:	4c10      	ldr	r4, [pc, #64]	; (800edc8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800ed88:	8082      	strh	r2, [r0, #4]
 800ed8a:	80c2      	strh	r2, [r0, #6]
 800ed8c:	8102      	strh	r2, [r0, #8]
 800ed8e:	8142      	strh	r2, [r0, #10]
 800ed90:	8182      	strh	r2, [r0, #12]
 800ed92:	81c2      	strh	r2, [r0, #14]
 800ed94:	8202      	strh	r2, [r0, #16]
 800ed96:	8242      	strh	r2, [r0, #18]
 800ed98:	61c2      	str	r2, [r0, #28]
 800ed9a:	8402      	strh	r2, [r0, #32]
 800ed9c:	8442      	strh	r2, [r0, #34]	; 0x22
 800ed9e:	6282      	str	r2, [r0, #40]	; 0x28
 800eda0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800eda4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800eda6:	8601      	strh	r1, [r0, #48]	; 0x30
 800eda8:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 800edac:	6344      	str	r4, [r0, #52]	; 0x34
 800edae:	8701      	strh	r1, [r0, #56]	; 0x38
 800edb0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800edb4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800edb8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800edbc:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	bf00      	nop
 800edc4:	0801f670 	.word	0x0801f670
 800edc8:	0801dba4 	.word	0x0801dba4

0800edcc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	6803      	ldr	r3, [r0, #0]
 800edd0:	460c      	mov	r4, r1
 800edd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd4:	4798      	blx	r3
 800edd6:	1b03      	subs	r3, r0, r4
 800edd8:	4258      	negs	r0, r3
 800edda:	4158      	adcs	r0, r3
 800eddc:	bd10      	pop	{r4, pc}
	...

0800ede0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800ede0:	4b01      	ldr	r3, [pc, #4]	; (800ede8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800ede2:	6019      	str	r1, [r3, #0]
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	24006c74 	.word	0x24006c74

0800edec <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	4696      	mov	lr, r2
 800edf2:	b097      	sub	sp, #92	; 0x5c
 800edf4:	4605      	mov	r5, r0
 800edf6:	4614      	mov	r4, r2
 800edf8:	460e      	mov	r6, r1
 800edfa:	461f      	mov	r7, r3
 800edfc:	f10d 0c1c 	add.w	ip, sp, #28
 800ee00:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800ee04:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800ee08:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800ee0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee14:	f8de 3000 	ldr.w	r3, [lr]
 800ee18:	f104 0e14 	add.w	lr, r4, #20
 800ee1c:	f8cc 3000 	str.w	r3, [ip]
 800ee20:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ee24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee2c:	f8de 3000 	ldr.w	r3, [lr]
 800ee30:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ee34:	f8cc 3000 	str.w	r3, [ip]
 800ee38:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ee3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee44:	f8de 3000 	ldr.w	r3, [lr]
 800ee48:	4631      	mov	r1, r6
 800ee4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f8cc 3000 	str.w	r3, [ip]
 800ee52:	682b      	ldr	r3, [r5, #0]
 800ee54:	9201      	str	r2, [sp, #4]
 800ee56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee58:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee5c:	9200      	str	r2, [sp, #0]
 800ee5e:	aa07      	add	r2, sp, #28
 800ee60:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ee64:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800ee68:	463b      	mov	r3, r7
 800ee6a:	47d8      	blx	fp
 800ee6c:	46a6      	mov	lr, r4
 800ee6e:	f10d 0c1c 	add.w	ip, sp, #28
 800ee72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee7a:	f8de 3000 	ldr.w	r3, [lr]
 800ee7e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ee82:	343c      	adds	r4, #60	; 0x3c
 800ee84:	f8cc 3000 	str.w	r3, [ip]
 800ee88:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ee8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee94:	f8de 3000 	ldr.w	r3, [lr]
 800ee98:	f8cc 3000 	str.w	r3, [ip]
 800ee9c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800eea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	4631      	mov	r1, r6
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f8cc 3000 	str.w	r3, [ip]
 800eeb0:	682b      	ldr	r3, [r5, #0]
 800eeb2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800eeb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eeb8:	f8cd 8008 	str.w	r8, [sp, #8]
 800eebc:	9201      	str	r2, [sp, #4]
 800eebe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eec0:	9200      	str	r2, [sp, #0]
 800eec2:	aa07      	add	r2, sp, #28
 800eec4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800eec6:	463b      	mov	r3, r7
 800eec8:	47a0      	blx	r4
 800eeca:	b017      	add	sp, #92	; 0x5c
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eed0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800eed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed4:	b08d      	sub	sp, #52	; 0x34
 800eed6:	4688      	mov	r8, r1
 800eed8:	f8d3 c000 	ldr.w	ip, [r3]
 800eedc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eede:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800eee2:	680f      	ldr	r7, [r1, #0]
 800eee4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800eee8:	eba7 070c 	sub.w	r7, r7, ip
 800eeec:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800eef0:	edd3 6a07 	vldr	s13, [r3, #28]
 800eef4:	42bc      	cmp	r4, r7
 800eef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eef8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800eefc:	bfa8      	it	ge
 800eefe:	463c      	movge	r4, r7
 800ef00:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ef04:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ef08:	ee07 4a90 	vmov	s15, r4
 800ef0c:	eb09 0e0c 	add.w	lr, r9, ip
 800ef10:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800ef14:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ef18:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ef1c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800ef20:	4571      	cmp	r1, lr
 800ef22:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ef26:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ef2a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ef2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef32:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ef36:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ef3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ef3e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ef42:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ef46:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ef4a:	f340 808c 	ble.w	800f066 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800ef4e:	eba1 060e 	sub.w	r6, r1, lr
 800ef52:	fb96 f5f4 	sdiv	r5, r6, r4
 800ef56:	ee07 5a10 	vmov	s14, r5
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	fb04 6615 	mls	r6, r4, r5, r6
 800ef60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ef64:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ef68:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ef6c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ef70:	dd12      	ble.n	800ef98 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800ef72:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ef76:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ef7a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ef7e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ef82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef86:	bf14      	ite	ne
 800ef88:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ef8c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ef90:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ef94:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ef98:	fb05 f204 	mul.w	r2, r5, r4
 800ef9c:	1abf      	subs	r7, r7, r2
 800ef9e:	4494      	add	ip, r2
 800efa0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800efa4:	4411      	add	r1, r2
 800efa6:	eb09 020c 	add.w	r2, r9, ip
 800efaa:	b209      	sxth	r1, r1
 800efac:	443a      	add	r2, r7
 800efae:	428a      	cmp	r2, r1
 800efb0:	bfc4      	itt	gt
 800efb2:	eba1 0209 	subgt.w	r2, r1, r9
 800efb6:	eba2 070c 	subgt.w	r7, r2, ip
 800efba:	2f00      	cmp	r7, #0
 800efbc:	dd50      	ble.n	800f060 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800efbe:	fb97 f1f4 	sdiv	r1, r7, r4
 800efc2:	fb04 7211 	mls	r2, r4, r1, r7
 800efc6:	b90a      	cbnz	r2, 800efcc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800efc8:	3901      	subs	r1, #1
 800efca:	4622      	mov	r2, r4
 800efcc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800efd0:	6840      	ldr	r0, [r0, #4]
 800efd2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800efd6:	44b6      	add	lr, r6
 800efd8:	f8d0 a000 	ldr.w	sl, [r0]
 800efdc:	2900      	cmp	r1, #0
 800efde:	bfcc      	ite	gt
 800efe0:	46a1      	movgt	r9, r4
 800efe2:	4691      	movle	r9, r2
 800efe4:	900b      	str	r0, [sp, #44]	; 0x2c
 800efe6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800efe8:	fb04 e505 	mla	r5, r4, r5, lr
 800efec:	eef0 6a42 	vmov.f32	s13, s4
 800eff0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800eff4:	9008      	str	r0, [sp, #32]
 800eff6:	eeb0 7a61 	vmov.f32	s14, s3
 800effa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800effc:	695b      	ldr	r3, [r3, #20]
 800effe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f002:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800f006:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f00a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f00c:	445b      	add	r3, fp
 800f00e:	9307      	str	r3, [sp, #28]
 800f010:	ee16 3a90 	vmov	r3, s13
 800f014:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800f018:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f01c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f020:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f024:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f028:	ee17 7a90 	vmov	r7, s15
 800f02c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f030:	fb97 f7f4 	sdiv	r7, r7, r4
 800f034:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f038:	ee17 ca90 	vmov	ip, s15
 800f03c:	fb9c fcf4 	sdiv	ip, ip, r4
 800f040:	fb0c 3306 	mla	r3, ip, r6, r3
 800f044:	9302      	str	r3, [sp, #8]
 800f046:	ee17 3a10 	vmov	r3, s14
 800f04a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f04e:	fb07 3706 	mla	r7, r7, r6, r3
 800f052:	eba9 0306 	sub.w	r3, r9, r6
 800f056:	e9cd 4700 	strd	r4, r7, [sp]
 800f05a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f05e:	47a0      	blx	r4
 800f060:	b00d      	add	sp, #52	; 0x34
 800f062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f066:	2500      	movs	r5, #0
 800f068:	462e      	mov	r6, r5
 800f06a:	e799      	b.n	800efa0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f06c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	b0db      	sub	sp, #364	; 0x16c
 800f072:	461d      	mov	r5, r3
 800f074:	4614      	mov	r4, r2
 800f076:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f07a:	910f      	str	r1, [sp, #60]	; 0x3c
 800f07c:	4629      	mov	r1, r5
 800f07e:	930a      	str	r3, [sp, #40]	; 0x28
 800f080:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f084:	9009      	str	r0, [sp, #36]	; 0x24
 800f086:	930b      	str	r3, [sp, #44]	; 0x2c
 800f088:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f08c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f090:	9310      	str	r3, [sp, #64]	; 0x40
 800f092:	6803      	ldr	r3, [r0, #0]
 800f094:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800f096:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f09a:	47b8      	blx	r7
 800f09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09e:	6058      	str	r0, [r3, #4]
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f000 83a1 	beq.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0a6:	682b      	ldr	r3, [r5, #0]
 800f0a8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f0ac:	ed94 7a02 	vldr	s14, [r4, #8]
 800f0b0:	9314      	str	r3, [sp, #80]	; 0x50
 800f0b2:	686b      	ldr	r3, [r5, #4]
 800f0b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0b8:	9315      	str	r3, [sp, #84]	; 0x54
 800f0ba:	4bc1      	ldr	r3, [pc, #772]	; (800f3c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f0bc:	7819      	ldrb	r1, [r3, #0]
 800f0be:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f0c2:	2900      	cmp	r1, #0
 800f0c4:	bf16      	itet	ne
 800f0c6:	4619      	movne	r1, r3
 800f0c8:	4611      	moveq	r1, r2
 800f0ca:	4613      	movne	r3, r2
 800f0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d0:	9116      	str	r1, [sp, #88]	; 0x58
 800f0d2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f0d6:	f240 8387 	bls.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0da:	ed94 7a07 	vldr	s14, [r4, #28]
 800f0de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e6:	f240 837f 	bls.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0ea:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f0ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f6:	f240 8377 	bls.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	4bb1      	ldr	r3, [pc, #708]	; (800f3c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f0fe:	429a      	cmp	r2, r3
 800f100:	f2c0 8372 	blt.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f104:	49b0      	ldr	r1, [pc, #704]	; (800f3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f106:	6963      	ldr	r3, [r4, #20]
 800f108:	428a      	cmp	r2, r1
 800f10a:	f300 836d 	bgt.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f10e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f112:	48ae      	ldr	r0, [pc, #696]	; (800f3cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f114:	33ff      	adds	r3, #255	; 0xff
 800f116:	4283      	cmp	r3, r0
 800f118:	f200 8366 	bhi.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f11c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f11e:	4dac      	ldr	r5, [pc, #688]	; (800f3d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f120:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f124:	33ff      	adds	r3, #255	; 0xff
 800f126:	42ab      	cmp	r3, r5
 800f128:	f200 835e 	bhi.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f12c:	6862      	ldr	r2, [r4, #4]
 800f12e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f132:	33ff      	adds	r3, #255	; 0xff
 800f134:	4283      	cmp	r3, r0
 800f136:	f200 8357 	bhi.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f13a:	69a1      	ldr	r1, [r4, #24]
 800f13c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f140:	33ff      	adds	r3, #255	; 0xff
 800f142:	4283      	cmp	r3, r0
 800f144:	f200 8350 	bhi.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f14a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f14e:	30ff      	adds	r0, #255	; 0xff
 800f150:	42a8      	cmp	r0, r5
 800f152:	f200 8349 	bhi.w	800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f156:	428a      	cmp	r2, r1
 800f158:	f280 8110 	bge.w	800f37c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f15c:	429a      	cmp	r2, r3
 800f15e:	f300 8119 	bgt.w	800f394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f162:	4299      	cmp	r1, r3
 800f164:	f280 811d 	bge.w	800f3a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f168:	2502      	movs	r5, #2
 800f16a:	2701      	movs	r7, #1
 800f16c:	46a9      	mov	r9, r5
 800f16e:	46b8      	mov	r8, r7
 800f170:	f04f 0a00 	mov.w	sl, #0
 800f174:	4621      	mov	r1, r4
 800f176:	a849      	add	r0, sp, #292	; 0x124
 800f178:	f003 fcb2 	bl	8012ae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f17c:	4622      	mov	r2, r4
 800f17e:	4653      	mov	r3, sl
 800f180:	a949      	add	r1, sp, #292	; 0x124
 800f182:	f8cd 9000 	str.w	r9, [sp]
 800f186:	a819      	add	r0, sp, #100	; 0x64
 800f188:	f003 fdda 	bl	8012d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f18c:	4622      	mov	r2, r4
 800f18e:	4653      	mov	r3, sl
 800f190:	a949      	add	r1, sp, #292	; 0x124
 800f192:	f8cd 8000 	str.w	r8, [sp]
 800f196:	a829      	add	r0, sp, #164	; 0xa4
 800f198:	f003 fdd2 	bl	8012d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f19c:	4643      	mov	r3, r8
 800f19e:	4622      	mov	r2, r4
 800f1a0:	a949      	add	r1, sp, #292	; 0x124
 800f1a2:	f8cd 9000 	str.w	r9, [sp]
 800f1a6:	a839      	add	r0, sp, #228	; 0xe4
 800f1a8:	f003 fdca 	bl	8012d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f1ac:	42af      	cmp	r7, r5
 800f1ae:	af12      	add	r7, sp, #72	; 0x48
 800f1b0:	bfb7      	itett	lt
 800f1b2:	2300      	movlt	r3, #0
 800f1b4:	2301      	movge	r3, #1
 800f1b6:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f1b8:	ac19      	addlt	r4, sp, #100	; 0x64
 800f1ba:	bfb1      	iteee	lt
 800f1bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f1be:	ad19      	addge	r5, sp, #100	; 0x64
 800f1c0:	930e      	strge	r3, [sp, #56]	; 0x38
 800f1c2:	ac29      	addge	r4, sp, #164	; 0xa4
 800f1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f1ca:	e887 0003 	stmia.w	r7, {r0, r1}
 800f1ce:	b928      	cbnz	r0, 800f1dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f1d0:	4b80      	ldr	r3, [pc, #512]	; (800f3d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f1d2:	6818      	ldr	r0, [r3, #0]
 800f1d4:	6803      	ldr	r3, [r0, #0]
 800f1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d8:	4798      	blx	r3
 800f1da:	6038      	str	r0, [r7, #0]
 800f1dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f1de:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f1e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1e6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f1e8:	930c      	str	r3, [sp, #48]	; 0x30
 800f1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f1ec:	6963      	ldr	r3, [r4, #20]
 800f1ee:	440b      	add	r3, r1
 800f1f0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f1f4:	4408      	add	r0, r1
 800f1f6:	b200      	sxth	r0, r0
 800f1f8:	4283      	cmp	r3, r0
 800f1fa:	900d      	str	r0, [sp, #52]	; 0x34
 800f1fc:	f280 80dd 	bge.w	800f3ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f200:	428b      	cmp	r3, r1
 800f202:	da08      	bge.n	800f216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f204:	2a00      	cmp	r2, #0
 800f206:	dd06      	ble.n	800f216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f208:	1acb      	subs	r3, r1, r3
 800f20a:	429a      	cmp	r2, r3
 800f20c:	f2c0 80e4 	blt.w	800f3d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f210:	2b00      	cmp	r3, #0
 800f212:	f300 80e2 	bgt.w	800f3da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f216:	6967      	ldr	r7, [r4, #20]
 800f218:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f21e:	443b      	add	r3, r7
 800f220:	461f      	mov	r7, r3
 800f222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f224:	1bdf      	subs	r7, r3, r7
 800f226:	4297      	cmp	r7, r2
 800f228:	bfa8      	it	ge
 800f22a:	4617      	movge	r7, r2
 800f22c:	2f00      	cmp	r7, #0
 800f22e:	f340 8166 	ble.w	800f4fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f232:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f234:	6829      	ldr	r1, [r5, #0]
 800f236:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f23a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f23e:	4411      	add	r1, r2
 800f240:	6820      	ldr	r0, [r4, #0]
 800f242:	4299      	cmp	r1, r3
 800f244:	dd1a      	ble.n	800f27c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f246:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f24a:	4402      	add	r2, r0
 800f24c:	440b      	add	r3, r1
 800f24e:	b21b      	sxth	r3, r3
 800f250:	429a      	cmp	r2, r3
 800f252:	dc13      	bgt.n	800f27c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f256:	a912      	add	r1, sp, #72	; 0x48
 800f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	9206      	str	r2, [sp, #24]
 800f260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f262:	9500      	str	r5, [sp, #0]
 800f264:	9205      	str	r2, [sp, #20]
 800f266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f268:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f26c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f26e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f272:	aa49      	add	r2, sp, #292	; 0x124
 800f274:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f278:	4623      	mov	r3, r4
 800f27a:	47c8      	blx	r9
 800f27c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f280:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f284:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f28c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f290:	68a1      	ldr	r1, [r4, #8]
 800f292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f296:	ed94 6a08 	vldr	s12, [r4, #32]
 800f29a:	edd4 6a07 	vldr	s13, [r4, #28]
 800f29e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f2a2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f2a6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f2aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2ae:	edc4 6a07 	vstr	s13, [r4, #28]
 800f2b2:	441a      	add	r2, r3
 800f2b4:	6963      	ldr	r3, [r4, #20]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	6022      	str	r2, [r4, #0]
 800f2ba:	6163      	str	r3, [r4, #20]
 800f2bc:	69a3      	ldr	r3, [r4, #24]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	61a3      	str	r3, [r4, #24]
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	440b      	add	r3, r1
 800f2c6:	68e1      	ldr	r1, [r4, #12]
 800f2c8:	428b      	cmp	r3, r1
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	db15      	blt.n	800f2fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f2ce:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f2d2:	3201      	adds	r2, #1
 800f2d4:	1a5b      	subs	r3, r3, r1
 800f2d6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f2da:	6022      	str	r2, [r4, #0]
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	edc4 6a07 	vstr	s13, [r4, #28]
 800f2e2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f2e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f2ea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f2ee:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f2f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2f6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f2fa:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f2fe:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f302:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f30a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f30e:	68a9      	ldr	r1, [r5, #8]
 800f310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f314:	ed95 6a08 	vldr	s12, [r5, #32]
 800f318:	edd5 6a07 	vldr	s13, [r5, #28]
 800f31c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f320:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f324:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f32c:	edc5 6a07 	vstr	s13, [r5, #28]
 800f330:	441a      	add	r2, r3
 800f332:	696b      	ldr	r3, [r5, #20]
 800f334:	3301      	adds	r3, #1
 800f336:	602a      	str	r2, [r5, #0]
 800f338:	616b      	str	r3, [r5, #20]
 800f33a:	69ab      	ldr	r3, [r5, #24]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	61ab      	str	r3, [r5, #24]
 800f340:	692b      	ldr	r3, [r5, #16]
 800f342:	440b      	add	r3, r1
 800f344:	68e9      	ldr	r1, [r5, #12]
 800f346:	428b      	cmp	r3, r1
 800f348:	612b      	str	r3, [r5, #16]
 800f34a:	db15      	blt.n	800f378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f34c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f350:	3201      	adds	r2, #1
 800f352:	1a5b      	subs	r3, r3, r1
 800f354:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	612b      	str	r3, [r5, #16]
 800f35c:	edc5 6a07 	vstr	s13, [r5, #28]
 800f360:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f364:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f368:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f36c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f374:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f378:	3f01      	subs	r7, #1
 800f37a:	e757      	b.n	800f22c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f37c:	4299      	cmp	r1, r3
 800f37e:	dc13      	bgt.n	800f3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f380:	429a      	cmp	r2, r3
 800f382:	da14      	bge.n	800f3ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f384:	2502      	movs	r5, #2
 800f386:	2703      	movs	r7, #3
 800f388:	f04f 0800 	mov.w	r8, #0
 800f38c:	46a9      	mov	r9, r5
 800f38e:	f04f 0a01 	mov.w	sl, #1
 800f392:	e6ef      	b.n	800f174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f394:	2501      	movs	r5, #1
 800f396:	2700      	movs	r7, #0
 800f398:	46a9      	mov	r9, r5
 800f39a:	46b8      	mov	r8, r7
 800f39c:	f04f 0a02 	mov.w	sl, #2
 800f3a0:	e6e8      	b.n	800f174 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f3a2:	2501      	movs	r5, #1
 800f3a4:	2702      	movs	r7, #2
 800f3a6:	e6e1      	b.n	800f16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f3a8:	2500      	movs	r5, #0
 800f3aa:	2701      	movs	r7, #1
 800f3ac:	e7f4      	b.n	800f398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f3ae:	2702      	movs	r7, #2
 800f3b0:	2503      	movs	r5, #3
 800f3b2:	f04f 0900 	mov.w	r9, #0
 800f3b6:	46b8      	mov	r8, r7
 800f3b8:	e7e9      	b.n	800f38e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	e728      	b.n	800f210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f3be:	bf00      	nop
 800f3c0:	24006c64 	.word	0x24006c64
 800f3c4:	fffd8f01 	.word	0xfffd8f01
 800f3c8:	00027100 	.word	0x00027100
 800f3cc:	0004e1ff 	.word	0x0004e1ff
 800f3d0:	0004e1fe 	.word	0x0004e1fe
 800f3d4:	24006c6c 	.word	0x24006c6c
 800f3d8:	4613      	mov	r3, r2
 800f3da:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f3dc:	469e      	mov	lr, r3
 800f3de:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f3e0:	469c      	mov	ip, r3
 800f3e2:	9111      	str	r1, [sp, #68]	; 0x44
 800f3e4:	f04f 0900 	mov.w	r9, #0
 800f3e8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f3ec:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f3f0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f3f4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f3f8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f3fc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f400:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f404:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f408:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f40c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f410:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f414:	f1bc 0f00 	cmp.w	ip, #0
 800f418:	d147      	bne.n	800f4aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f41a:	eb03 0c07 	add.w	ip, r3, r7
 800f41e:	1ad7      	subs	r7, r2, r3
 800f420:	f1b9 0f00 	cmp.w	r9, #0
 800f424:	d009      	beq.n	800f43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f426:	9029      	str	r0, [sp, #164]	; 0xa4
 800f428:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f42c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f430:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f434:	912d      	str	r1, [sp, #180]	; 0xb4
 800f436:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f43a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f43c:	f04f 0800 	mov.w	r8, #0
 800f440:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f444:	9111      	str	r1, [sp, #68]	; 0x44
 800f446:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f44a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f44e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f452:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f456:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f45a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f45e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f462:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f466:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f46a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f46e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f472:	f1be 0f00 	cmp.w	lr, #0
 800f476:	d031      	beq.n	800f4dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f478:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f47a:	4450      	add	r0, sl
 800f47c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f480:	4431      	add	r1, r6
 800f482:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f486:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f48a:	4549      	cmp	r1, r9
 800f48c:	db08      	blt.n	800f4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f48e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f492:	3001      	adds	r0, #1
 800f494:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f498:	eba1 0109 	sub.w	r1, r1, r9
 800f49c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f4a0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f4a4:	f04f 0801 	mov.w	r8, #1
 800f4a8:	e7e3      	b.n	800f472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f4aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f4ac:	4450      	add	r0, sl
 800f4ae:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f4b2:	4431      	add	r1, r6
 800f4b4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f4b8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f4bc:	4541      	cmp	r1, r8
 800f4be:	db08      	blt.n	800f4d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f4c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f4ca:	eba1 0108 	sub.w	r1, r1, r8
 800f4ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f4d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f4d6:	f04f 0901 	mov.w	r9, #1
 800f4da:	e79b      	b.n	800f414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f4dc:	449c      	add	ip, r3
 800f4de:	1aff      	subs	r7, r7, r3
 800f4e0:	f1b8 0f00 	cmp.w	r8, #0
 800f4e4:	d009      	beq.n	800f4fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f4e6:	9019      	str	r0, [sp, #100]	; 0x64
 800f4e8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f4ec:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f4f0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f4f4:	911d      	str	r1, [sp, #116]	; 0x74
 800f4f6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f4fa:	1ad2      	subs	r2, r2, r3
 800f4fc:	e68b      	b.n	800f216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f500:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f502:	2b00      	cmp	r3, #0
 800f504:	f000 80d1 	beq.w	800f6aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f508:	ad19      	add	r5, sp, #100	; 0x64
 800f50a:	ac39      	add	r4, sp, #228	; 0xe4
 800f50c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f50e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f516:	930c      	str	r3, [sp, #48]	; 0x30
 800f518:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f51a:	6963      	ldr	r3, [r4, #20]
 800f51c:	440b      	add	r3, r1
 800f51e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f522:	4408      	add	r0, r1
 800f524:	b200      	sxth	r0, r0
 800f526:	4283      	cmp	r3, r0
 800f528:	900d      	str	r0, [sp, #52]	; 0x34
 800f52a:	f280 80c1 	bge.w	800f6b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f52e:	428b      	cmp	r3, r1
 800f530:	da08      	bge.n	800f544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f532:	2a00      	cmp	r2, #0
 800f534:	dd06      	ble.n	800f544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f536:	1acb      	subs	r3, r1, r3
 800f538:	429a      	cmp	r2, r3
 800f53a:	f2c0 80bb 	blt.w	800f6b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f300 80b9 	bgt.w	800f6b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f544:	6967      	ldr	r7, [r4, #20]
 800f546:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f54c:	443b      	add	r3, r7
 800f54e:	461f      	mov	r7, r3
 800f550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f552:	1bdf      	subs	r7, r3, r7
 800f554:	4297      	cmp	r7, r2
 800f556:	bfa8      	it	ge
 800f558:	4617      	movge	r7, r2
 800f55a:	2f00      	cmp	r7, #0
 800f55c:	f340 813c 	ble.w	800f7d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f560:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f562:	6829      	ldr	r1, [r5, #0]
 800f564:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f568:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f56c:	4411      	add	r1, r2
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	4299      	cmp	r1, r3
 800f572:	dd1a      	ble.n	800f5aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f574:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f578:	4402      	add	r2, r0
 800f57a:	440b      	add	r3, r1
 800f57c:	b21b      	sxth	r3, r3
 800f57e:	429a      	cmp	r2, r3
 800f580:	dc13      	bgt.n	800f5aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f584:	a912      	add	r1, sp, #72	; 0x48
 800f586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	9206      	str	r2, [sp, #24]
 800f58e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f590:	9500      	str	r5, [sp, #0]
 800f592:	9205      	str	r2, [sp, #20]
 800f594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f596:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f59a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f59c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f5a0:	aa49      	add	r2, sp, #292	; 0x124
 800f5a2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800f5a6:	4623      	mov	r3, r4
 800f5a8:	47c8      	blx	r9
 800f5aa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f5ae:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f5b2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f5b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5ba:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f5be:	68a1      	ldr	r1, [r4, #8]
 800f5c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5c4:	ed94 6a08 	vldr	s12, [r4, #32]
 800f5c8:	edd4 6a07 	vldr	s13, [r4, #28]
 800f5cc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f5d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f5d4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f5d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5dc:	edc4 6a07 	vstr	s13, [r4, #28]
 800f5e0:	441a      	add	r2, r3
 800f5e2:	6963      	ldr	r3, [r4, #20]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	6022      	str	r2, [r4, #0]
 800f5e8:	6163      	str	r3, [r4, #20]
 800f5ea:	69a3      	ldr	r3, [r4, #24]
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	61a3      	str	r3, [r4, #24]
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	440b      	add	r3, r1
 800f5f4:	68e1      	ldr	r1, [r4, #12]
 800f5f6:	428b      	cmp	r3, r1
 800f5f8:	6123      	str	r3, [r4, #16]
 800f5fa:	db15      	blt.n	800f628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f5fc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f600:	3201      	adds	r2, #1
 800f602:	1a5b      	subs	r3, r3, r1
 800f604:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f608:	6022      	str	r2, [r4, #0]
 800f60a:	6123      	str	r3, [r4, #16]
 800f60c:	edc4 6a07 	vstr	s13, [r4, #28]
 800f610:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f614:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f618:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f61c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f620:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f624:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f628:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f62c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f630:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f634:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f638:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f63c:	68a9      	ldr	r1, [r5, #8]
 800f63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f642:	ed95 6a08 	vldr	s12, [r5, #32]
 800f646:	edd5 6a07 	vldr	s13, [r5, #28]
 800f64a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f64e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f652:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f656:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f65a:	edc5 6a07 	vstr	s13, [r5, #28]
 800f65e:	441a      	add	r2, r3
 800f660:	696b      	ldr	r3, [r5, #20]
 800f662:	3301      	adds	r3, #1
 800f664:	602a      	str	r2, [r5, #0]
 800f666:	616b      	str	r3, [r5, #20]
 800f668:	69ab      	ldr	r3, [r5, #24]
 800f66a:	3b01      	subs	r3, #1
 800f66c:	61ab      	str	r3, [r5, #24]
 800f66e:	692b      	ldr	r3, [r5, #16]
 800f670:	440b      	add	r3, r1
 800f672:	68e9      	ldr	r1, [r5, #12]
 800f674:	428b      	cmp	r3, r1
 800f676:	612b      	str	r3, [r5, #16]
 800f678:	db15      	blt.n	800f6a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f67a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f67e:	3201      	adds	r2, #1
 800f680:	1a5b      	subs	r3, r3, r1
 800f682:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f686:	602a      	str	r2, [r5, #0]
 800f688:	612b      	str	r3, [r5, #16]
 800f68a:	edc5 6a07 	vstr	s13, [r5, #28]
 800f68e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f692:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f696:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f69a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f69e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6a2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f6a6:	3f01      	subs	r7, #1
 800f6a8:	e757      	b.n	800f55a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f6aa:	ad39      	add	r5, sp, #228	; 0xe4
 800f6ac:	ac19      	add	r4, sp, #100	; 0x64
 800f6ae:	e72d      	b.n	800f50c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	e744      	b.n	800f53e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f6b8:	469e      	mov	lr, r3
 800f6ba:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f6be:	461f      	mov	r7, r3
 800f6c0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f6c4:	f04f 0900 	mov.w	r9, #0
 800f6c8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f6cc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f6d0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f6d4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f6d8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f6dc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f6de:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f6e2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f6e6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f6ea:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f6ee:	960e      	str	r6, [sp, #56]	; 0x38
 800f6f0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f6f4:	2f00      	cmp	r7, #0
 800f6f6:	d146      	bne.n	800f786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f6f8:	449c      	add	ip, r3
 800f6fa:	1ad7      	subs	r7, r2, r3
 800f6fc:	f1b9 0f00 	cmp.w	r9, #0
 800f700:	d009      	beq.n	800f716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f702:	9039      	str	r0, [sp, #228]	; 0xe4
 800f704:	913d      	str	r1, [sp, #244]	; 0xf4
 800f706:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f70a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f70e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f712:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f716:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f718:	f04f 0800 	mov.w	r8, #0
 800f71c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f720:	910e      	str	r1, [sp, #56]	; 0x38
 800f722:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f726:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f72a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f72e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f732:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f736:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f73a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f73e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f742:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f746:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f74a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f74e:	f1be 0f00 	cmp.w	lr, #0
 800f752:	d030      	beq.n	800f7b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f754:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f756:	4450      	add	r0, sl
 800f758:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f75c:	4431      	add	r1, r6
 800f75e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f762:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f766:	4549      	cmp	r1, r9
 800f768:	db08      	blt.n	800f77c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f76a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f76e:	3001      	adds	r0, #1
 800f770:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f774:	eba1 0109 	sub.w	r1, r1, r9
 800f778:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f77c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f780:	f04f 0801 	mov.w	r8, #1
 800f784:	e7e3      	b.n	800f74e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f786:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f788:	4450      	add	r0, sl
 800f78a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f78e:	4431      	add	r1, r6
 800f790:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f794:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f798:	4541      	cmp	r1, r8
 800f79a:	db08      	blt.n	800f7ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f79c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f7a6:	eba1 0108 	sub.w	r1, r1, r8
 800f7aa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f7ae:	3f01      	subs	r7, #1
 800f7b0:	f04f 0901 	mov.w	r9, #1
 800f7b4:	e79e      	b.n	800f6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f7b6:	449c      	add	ip, r3
 800f7b8:	1aff      	subs	r7, r7, r3
 800f7ba:	f1b8 0f00 	cmp.w	r8, #0
 800f7be:	d009      	beq.n	800f7d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f7c0:	9019      	str	r0, [sp, #100]	; 0x64
 800f7c2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f7c6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f7ca:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f7ce:	911d      	str	r1, [sp, #116]	; 0x74
 800f7d0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f7d4:	1ad2      	subs	r2, r2, r3
 800f7d6:	e6b5      	b.n	800f544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	b923      	cbnz	r3, 800f7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f7de:	4b04      	ldr	r3, [pc, #16]	; (800f7f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f7e0:	6818      	ldr	r0, [r3, #0]
 800f7e2:	6803      	ldr	r3, [r0, #0]
 800f7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e6:	4798      	blx	r3
 800f7e8:	b05b      	add	sp, #364	; 0x16c
 800f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ee:	bf00      	nop
 800f7f0:	24006c6c 	.word	0x24006c6c

0800f7f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	2500      	movs	r5, #0
 800f7fa:	9804      	ldr	r0, [sp, #16]
 800f7fc:	7223      	strb	r3, [r4, #8]
 800f7fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f802:	8025      	strh	r5, [r4, #0]
 800f804:	6061      	str	r1, [r4, #4]
 800f806:	7263      	strb	r3, [r4, #9]
 800f808:	60e0      	str	r0, [r4, #12]
 800f80a:	8222      	strh	r2, [r4, #16]
 800f80c:	8265      	strh	r5, [r4, #18]
 800f80e:	82a5      	strh	r5, [r4, #20]
 800f810:	82e5      	strh	r5, [r4, #22]
 800f812:	8325      	strh	r5, [r4, #24]
 800f814:	8365      	strh	r5, [r4, #26]
 800f816:	83a5      	strh	r5, [r4, #28]
 800f818:	77a5      	strb	r5, [r4, #30]
 800f81a:	6803      	ldr	r3, [r0, #0]
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	4798      	blx	r3
 800f820:	4606      	mov	r6, r0
 800f822:	b1f8      	cbz	r0, 800f864 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f824:	68e0      	ldr	r0, [r4, #12]
 800f826:	4631      	mov	r1, r6
 800f828:	6803      	ldr	r3, [r0, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	4798      	blx	r3
 800f82e:	7b43      	ldrb	r3, [r0, #13]
 800f830:	7a82      	ldrb	r2, [r0, #10]
 800f832:	4605      	mov	r5, r0
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f83a:	4313      	orrs	r3, r2
 800f83c:	83a3      	strh	r3, [r4, #28]
 800f83e:	7a63      	ldrb	r3, [r4, #9]
 800f840:	2b04      	cmp	r3, #4
 800f842:	d10f      	bne.n	800f864 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f844:	68e0      	ldr	r0, [r4, #12]
 800f846:	462a      	mov	r2, r5
 800f848:	4631      	mov	r1, r6
 800f84a:	6803      	ldr	r3, [r0, #0]
 800f84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84e:	4798      	blx	r3
 800f850:	7b6b      	ldrb	r3, [r5, #13]
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f858:	7aab      	ldrb	r3, [r5, #10]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	4418      	add	r0, r3
 800f85e:	8ba3      	ldrh	r3, [r4, #28]
 800f860:	4418      	add	r0, r3
 800f862:	83a0      	strh	r0, [r4, #28]
 800f864:	4620      	mov	r0, r4
 800f866:	bd70      	pop	{r4, r5, r6, pc}

0800f868 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	2400      	movs	r4, #0
 800f86e:	b085      	sub	sp, #20
 800f870:	4681      	mov	r9, r0
 800f872:	4688      	mov	r8, r1
 800f874:	4692      	mov	sl, r2
 800f876:	469b      	mov	fp, r3
 800f878:	4627      	mov	r7, r4
 800f87a:	4625      	mov	r5, r4
 800f87c:	4626      	mov	r6, r4
 800f87e:	4554      	cmp	r4, sl
 800f880:	da2a      	bge.n	800f8d8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f882:	2300      	movs	r3, #0
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f88a:	429d      	cmp	r5, r3
 800f88c:	d004      	beq.n	800f898 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f88e:	f242 030b 	movw	r3, #8203	; 0x200b
 800f892:	429d      	cmp	r5, r3
 800f894:	bf18      	it	ne
 800f896:	462f      	movne	r7, r5
 800f898:	ab03      	add	r3, sp, #12
 800f89a:	4642      	mov	r2, r8
 800f89c:	4659      	mov	r1, fp
 800f89e:	4648      	mov	r0, r9
 800f8a0:	f002 fea2 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f8a4:	4605      	mov	r5, r0
 800f8a6:	b1b8      	cbz	r0, 800f8d8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f8a8:	280a      	cmp	r0, #10
 800f8aa:	d015      	beq.n	800f8d8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f8ac:	9a03      	ldr	r2, [sp, #12]
 800f8ae:	b18a      	cbz	r2, 800f8d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f8b0:	7b50      	ldrb	r0, [r2, #13]
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	7a93      	ldrb	r3, [r2, #10]
 800f8b6:	0040      	lsls	r0, r0, #1
 800f8b8:	8895      	ldrh	r5, [r2, #4]
 800f8ba:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f8be:	4303      	orrs	r3, r0
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	9301      	str	r3, [sp, #4]
 800f8c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ca:	4798      	blx	r3
 800f8cc:	9b01      	ldr	r3, [sp, #4]
 800f8ce:	4418      	add	r0, r3
 800f8d0:	4406      	add	r6, r0
 800f8d2:	b2b6      	uxth	r6, r6
 800f8d4:	3401      	adds	r4, #1
 800f8d6:	e7d2      	b.n	800f87e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800f8d8:	4630      	mov	r0, r6
 800f8da:	b005      	add	sp, #20
 800f8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f8e0:	2a02      	cmp	r2, #2
 800f8e2:	b530      	push	{r4, r5, lr}
 800f8e4:	d011      	beq.n	800f90a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f8e6:	2a03      	cmp	r2, #3
 800f8e8:	d01c      	beq.n	800f924 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f8ea:	2a01      	cmp	r2, #1
 800f8ec:	d10c      	bne.n	800f908 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f8ee:	888b      	ldrh	r3, [r1, #4]
 800f8f0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f8f4:	8801      	ldrh	r1, [r0, #0]
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	8844      	ldrh	r4, [r0, #2]
 800f8fa:	1a5b      	subs	r3, r3, r1
 800f8fc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f900:	8004      	strh	r4, [r0, #0]
 800f902:	8043      	strh	r3, [r0, #2]
 800f904:	8081      	strh	r1, [r0, #4]
 800f906:	80c2      	strh	r2, [r0, #6]
 800f908:	bd30      	pop	{r4, r5, pc}
 800f90a:	88cb      	ldrh	r3, [r1, #6]
 800f90c:	88c2      	ldrh	r2, [r0, #6]
 800f90e:	1a9b      	subs	r3, r3, r2
 800f910:	8842      	ldrh	r2, [r0, #2]
 800f912:	1a9b      	subs	r3, r3, r2
 800f914:	888a      	ldrh	r2, [r1, #4]
 800f916:	8881      	ldrh	r1, [r0, #4]
 800f918:	8043      	strh	r3, [r0, #2]
 800f91a:	1a52      	subs	r2, r2, r1
 800f91c:	8801      	ldrh	r1, [r0, #0]
 800f91e:	1a52      	subs	r2, r2, r1
 800f920:	8002      	strh	r2, [r0, #0]
 800f922:	e7f1      	b.n	800f908 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f924:	88cb      	ldrh	r3, [r1, #6]
 800f926:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f92a:	8841      	ldrh	r1, [r0, #2]
 800f92c:	1a9b      	subs	r3, r3, r2
 800f92e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f932:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f936:	1a5b      	subs	r3, r3, r1
 800f938:	8045      	strh	r5, [r0, #2]
 800f93a:	8082      	strh	r2, [r0, #4]
 800f93c:	8003      	strh	r3, [r0, #0]
 800f93e:	80c4      	strh	r4, [r0, #6]
 800f940:	e7e2      	b.n	800f908 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f942 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f946:	b09f      	sub	sp, #124	; 0x7c
 800f948:	9116      	str	r1, [sp, #88]	; 0x58
 800f94a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f94c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f94e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f950:	8809      	ldrh	r1, [r1, #0]
 800f952:	889b      	ldrh	r3, [r3, #4]
 800f954:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800f958:	440b      	add	r3, r1
 800f95a:	9212      	str	r2, [sp, #72]	; 0x48
 800f95c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800f960:	b21b      	sxth	r3, r3
 800f962:	9011      	str	r0, [sp, #68]	; 0x44
 800f964:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800f968:	9310      	str	r3, [sp, #64]	; 0x40
 800f96a:	f8d8 3000 	ldr.w	r3, [r8]
 800f96e:	7a59      	ldrb	r1, [r3, #9]
 800f970:	7a1b      	ldrb	r3, [r3, #8]
 800f972:	9114      	str	r1, [sp, #80]	; 0x50
 800f974:	9315      	str	r3, [sp, #84]	; 0x54
 800f976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f97c:	2a00      	cmp	r2, #0
 800f97e:	d067      	beq.n	800fa50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800f980:	f898 3010 	ldrb.w	r3, [r8, #16]
 800f984:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f986:	2b04      	cmp	r3, #4
 800f988:	bf14      	ite	ne
 800f98a:	2301      	movne	r3, #1
 800f98c:	2302      	moveq	r3, #2
 800f98e:	4413      	add	r3, r2
 800f990:	f04f 0900 	mov.w	r9, #0
 800f994:	930f      	str	r3, [sp, #60]	; 0x3c
 800f996:	464c      	mov	r4, r9
 800f998:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f99c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800f9a0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	f280 808c 	bge.w	800fac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	931c      	str	r3, [sp, #112]	; 0x70
 800f9ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f9b2:	429c      	cmp	r4, r3
 800f9b4:	d006      	beq.n	800f9c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800f9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b8:	f242 020b 	movw	r2, #8203	; 0x200b
 800f9bc:	4294      	cmp	r4, r2
 800f9be:	bf18      	it	ne
 800f9c0:	4623      	movne	r3, r4
 800f9c2:	930d      	str	r3, [sp, #52]	; 0x34
 800f9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9c6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800f9cc:	428b      	cmp	r3, r1
 800f9ce:	db41      	blt.n	800fa54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800f9d0:	6813      	ldr	r3, [r2, #0]
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	4798      	blx	r3
 800f9d8:	4604      	mov	r4, r0
 800f9da:	f8d8 0000 	ldr.w	r0, [r8]
 800f9de:	aa1d      	add	r2, sp, #116	; 0x74
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	6803      	ldr	r3, [r0, #0]
 800f9e4:	689e      	ldr	r6, [r3, #8]
 800f9e6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800f9ea:	47b0      	blx	r6
 800f9ec:	901c      	str	r0, [sp, #112]	; 0x70
 800f9ee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f9f2:	429c      	cmp	r4, r3
 800f9f4:	f000 80ea 	beq.w	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f9f8:	f242 030b 	movw	r3, #8203	; 0x200b
 800f9fc:	429c      	cmp	r4, r3
 800f9fe:	f000 80e5 	beq.w	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa02:	2c00      	cmp	r4, #0
 800fa04:	f000 80f7 	beq.w	800fbf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fa08:	2c0a      	cmp	r4, #10
 800fa0a:	d060      	beq.n	800face <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fa0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa0e:	b36a      	cbz	r2, 800fa6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800fa10:	8894      	ldrh	r4, [r2, #4]
 800fa12:	f1bb 0f00 	cmp.w	fp, #0
 800fa16:	d03b      	beq.n	800fa90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800fa18:	f892 900d 	ldrb.w	r9, [r2, #13]
 800fa1c:	f1bb 0f01 	cmp.w	fp, #1
 800fa20:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fa24:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800fa28:	f892 900a 	ldrb.w	r9, [r2, #10]
 800fa2c:	ea49 0903 	orr.w	r9, r9, r3
 800fa30:	d134      	bne.n	800fa9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800fa32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa34:	eba5 0509 	sub.w	r5, r5, r9
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d14f      	bne.n	800fadc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800fa3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa3e:	eb09 0305 	add.w	r3, r9, r5
 800fa42:	4413      	add	r3, r2
 800fa44:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fa46:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	da51      	bge.n	800faf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fa4e:	e038      	b.n	800fac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800fa50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa52:	e79d      	b.n	800f990 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800fa54:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fa58:	4659      	mov	r1, fp
 800fa5a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	ab1c      	add	r3, sp, #112	; 0x70
 800fa64:	f002 fe18 	bl	8012698 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800fa68:	4604      	mov	r4, r0
 800fa6a:	e7c0      	b.n	800f9ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800fa6c:	f8d8 0000 	ldr.w	r0, [r8]
 800fa70:	6803      	ldr	r3, [r0, #0]
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	4798      	blx	r3
 800fa76:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fa7a:	4298      	cmp	r0, r3
 800fa7c:	f000 80a6 	beq.w	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa80:	f242 030b 	movw	r3, #8203	; 0x200b
 800fa84:	4298      	cmp	r0, r3
 800fa86:	f000 80a1 	beq.w	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa8a:	f1bb 0f00 	cmp.w	fp, #0
 800fa8e:	d100      	bne.n	800fa92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800fa90:	444d      	add	r5, r9
 800fa92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	d1bf      	bne.n	800fa18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800fa98:	4691      	mov	r9, r2
 800fa9a:	e097      	b.n	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fa9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 80ab 	beq.w	800fbfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800faa4:	f1bb 0f00 	cmp.w	fp, #0
 800faa8:	d118      	bne.n	800fadc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800faaa:	f8d8 0000 	ldr.w	r0, [r8]
 800faae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fab0:	6803      	ldr	r3, [r0, #0]
 800fab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fab4:	4798      	blx	r3
 800fab6:	4405      	add	r5, r0
 800fab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fabc:	1aeb      	subs	r3, r5, r3
 800fabe:	4293      	cmp	r3, r2
 800fac0:	dd17      	ble.n	800faf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800fac2:	2c00      	cmp	r4, #0
 800fac4:	f000 8097 	beq.w	800fbf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fac8:	2c0a      	cmp	r4, #10
 800faca:	f040 8085 	bne.w	800fbd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800face:	240a      	movs	r4, #10
 800fad0:	fab4 f084 	clz	r0, r4
 800fad4:	0940      	lsrs	r0, r0, #5
 800fad6:	b01f      	add	sp, #124	; 0x7c
 800fad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fadc:	f8d8 0000 	ldr.w	r0, [r8]
 800fae0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fae2:	6803      	ldr	r3, [r0, #0]
 800fae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fae6:	4798      	blx	r3
 800fae8:	f1bb 0f01 	cmp.w	fp, #1
 800faec:	eba5 0500 	sub.w	r5, r5, r0
 800faf0:	d0a4      	beq.n	800fa3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800faf2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800faf4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800faf6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800fafa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fafe:	7b43      	ldrb	r3, [r0, #13]
 800fb00:	4429      	add	r1, r5
 800fb02:	015b      	lsls	r3, r3, #5
 800fb04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fb08:	7983      	ldrb	r3, [r0, #6]
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	440b      	add	r3, r1
 800fb0e:	42b3      	cmp	r3, r6
 800fb10:	db5c      	blt.n	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb14:	4299      	cmp	r1, r3
 800fb16:	da59      	bge.n	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb18:	f8d8 0000 	ldr.w	r0, [r8]
 800fb1c:	42ae      	cmp	r6, r5
 800fb1e:	6803      	ldr	r3, [r0, #0]
 800fb20:	bfcc      	ite	gt
 800fb22:	1b76      	subgt	r6, r6, r5
 800fb24:	2600      	movle	r6, #0
 800fb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb28:	bfc8      	it	gt
 800fb2a:	b2b6      	uxthgt	r6, r6
 800fb2c:	4798      	blx	r3
 800fb2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fb30:	7b5a      	ldrb	r2, [r3, #13]
 800fb32:	00d1      	lsls	r1, r2, #3
 800fb34:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800fb38:	7a19      	ldrb	r1, [r3, #8]
 800fb3a:	4339      	orrs	r1, r7
 800fb3c:	0657      	lsls	r7, r2, #25
 800fb3e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fb40:	bf48      	it	mi
 800fb42:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800fb46:	4407      	add	r7, r0
 800fb48:	bf48      	it	mi
 800fb4a:	b209      	sxthmi	r1, r1
 800fb4c:	1a7f      	subs	r7, r7, r1
 800fb4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fb50:	b2bf      	uxth	r7, r7
 800fb52:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800fb56:	fa0f fa87 	sxth.w	sl, r7
 800fb5a:	4551      	cmp	r1, sl
 800fb5c:	dd3a      	ble.n	800fbd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800fb5e:	0112      	lsls	r2, r2, #4
 800fb60:	79d8      	ldrb	r0, [r3, #7]
 800fb62:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fb66:	4302      	orrs	r2, r0
 800fb68:	4492      	add	sl, r2
 800fb6a:	4551      	cmp	r1, sl
 800fb6c:	dc2e      	bgt.n	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800fb6e:	1bcf      	subs	r7, r1, r7
 800fb70:	468a      	mov	sl, r1
 800fb72:	b2bf      	uxth	r7, r7
 800fb74:	9319      	str	r3, [sp, #100]	; 0x64
 800fb76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb78:	f8d8 0000 	ldr.w	r0, [r8]
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	6801      	ldr	r1, [r0, #0]
 800fb80:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fb82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fb84:	9313      	str	r3, [sp, #76]	; 0x4c
 800fb86:	9218      	str	r2, [sp, #96]	; 0x60
 800fb88:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800fb8a:	4788      	blx	r1
 800fb8c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fb90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb92:	910b      	str	r1, [sp, #44]	; 0x2c
 800fb94:	f898 100e 	ldrb.w	r1, [r8, #14]
 800fb98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb9a:	910a      	str	r1, [sp, #40]	; 0x28
 800fb9c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800fba0:	9109      	str	r1, [sp, #36]	; 0x24
 800fba2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fba6:	9305      	str	r3, [sp, #20]
 800fba8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fbaa:	9206      	str	r2, [sp, #24]
 800fbac:	e9cd a601 	strd	sl, r6, [sp, #4]
 800fbb0:	442e      	add	r6, r5
 800fbb2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800fbb6:	b236      	sxth	r6, r6
 800fbb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbba:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800fbbe:	9600      	str	r6, [sp, #0]
 800fbc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fbca:	47b0      	blx	r6
 800fbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbce:	3301      	adds	r3, #1
 800fbd0:	930e      	str	r3, [sp, #56]	; 0x38
 800fbd2:	e6e5      	b.n	800f9a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800fbd4:	2700      	movs	r7, #0
 800fbd6:	e7cd      	b.n	800fb74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800fbd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fbda:	3501      	adds	r5, #1
 800fbdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbde:	429d      	cmp	r5, r3
 800fbe0:	f6bf af76 	bge.w	800fad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fbe4:	4659      	mov	r1, fp
 800fbe6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fbe8:	f7f4 fdc2 	bl	8004770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fbec:	4604      	mov	r4, r0
 800fbee:	b110      	cbz	r0, 800fbf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800fbf0:	280a      	cmp	r0, #10
 800fbf2:	d1f2      	bne.n	800fbda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800fbf4:	e76b      	b.n	800face <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800fbf6:	2400      	movs	r4, #0
 800fbf8:	e76a      	b.n	800fad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800fbfa:	f1bb 0f00 	cmp.w	fp, #0
 800fbfe:	f43f af5b 	beq.w	800fab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800fc02:	e776      	b.n	800faf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800fc04 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	8a44      	ldrh	r4, [r0, #18]
 800fc08:	8ac5      	ldrh	r5, [r0, #22]
 800fc0a:	82c3      	strh	r3, [r0, #22]
 800fc0c:	442c      	add	r4, r5
 800fc0e:	1ae4      	subs	r4, r4, r3
 800fc10:	8b03      	ldrh	r3, [r0, #24]
 800fc12:	8244      	strh	r4, [r0, #18]
 800fc14:	8a84      	ldrh	r4, [r0, #20]
 800fc16:	4422      	add	r2, r4
 800fc18:	440c      	add	r4, r1
 800fc1a:	1a59      	subs	r1, r3, r1
 800fc1c:	8342      	strh	r2, [r0, #26]
 800fc1e:	8284      	strh	r4, [r0, #20]
 800fc20:	8301      	strh	r1, [r0, #24]
 800fc22:	bd30      	pop	{r4, r5, pc}

0800fc24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc28:	7a43      	ldrb	r3, [r0, #9]
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	460f      	mov	r7, r1
 800fc30:	1eda      	subs	r2, r3, #3
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	2900      	cmp	r1, #0
 800fc36:	d036      	beq.n	800fca6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800fc38:	2a01      	cmp	r2, #1
 800fc3a:	d932      	bls.n	800fca2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800fc3c:	1e58      	subs	r0, r3, #1
 800fc3e:	f1d0 0b00 	rsbs	fp, r0, #0
 800fc42:	eb4b 0b00 	adc.w	fp, fp, r0
 800fc46:	1e99      	subs	r1, r3, #2
 800fc48:	424b      	negs	r3, r1
 800fc4a:	414b      	adcs	r3, r1
 800fc4c:	9303      	str	r3, [sp, #12]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fc54:	2500      	movs	r5, #0
 800fc56:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800fc5a:	46a9      	mov	r9, r5
 800fc5c:	8265      	strh	r5, [r4, #18]
 800fc5e:	82a5      	strh	r5, [r4, #20]
 800fc60:	2300      	movs	r3, #0
 800fc62:	9305      	str	r3, [sp, #20]
 800fc64:	8823      	ldrh	r3, [r4, #0]
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	d02b      	beq.n	800fcc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800fc6a:	eba3 020a 	sub.w	r2, r3, sl
 800fc6e:	4256      	negs	r6, r2
 800fc70:	4156      	adcs	r6, r2
 800fc72:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d004      	beq.n	800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fc7a:	4553      	cmp	r3, sl
 800fc7c:	bf16      	itet	ne
 800fc7e:	4699      	movne	r9, r3
 800fc80:	2601      	moveq	r6, #1
 800fc82:	2600      	movne	r6, #0
 800fc84:	ab05      	add	r3, sp, #20
 800fc86:	68e2      	ldr	r2, [r4, #12]
 800fc88:	7a21      	ldrb	r1, [r4, #8]
 800fc8a:	6860      	ldr	r0, [r4, #4]
 800fc8c:	f002 fcac 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fc90:	8020      	strh	r0, [r4, #0]
 800fc92:	b9c8      	cbnz	r0, 800fcc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800fc94:	8b22      	ldrh	r2, [r4, #24]
 800fc96:	2300      	movs	r3, #0
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f7ff ffb2 	bl	800fc04 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fca0:	e066      	b.n	800fd70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fca2:	468b      	mov	fp, r1
 800fca4:	e7cf      	b.n	800fc46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800fca6:	3b01      	subs	r3, #1
 800fca8:	2a01      	cmp	r2, #1
 800fcaa:	9103      	str	r1, [sp, #12]
 800fcac:	468b      	mov	fp, r1
 800fcae:	bf8c      	ite	hi
 800fcb0:	2200      	movhi	r2, #0
 800fcb2:	2201      	movls	r2, #1
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	9202      	str	r2, [sp, #8]
 800fcb8:	bf8c      	ite	hi
 800fcba:	2300      	movhi	r3, #0
 800fcbc:	2301      	movls	r3, #1
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	e7c8      	b.n	800fc54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800fcc2:	4699      	mov	r9, r3
 800fcc4:	2601      	movs	r6, #1
 800fcc6:	e7dd      	b.n	800fc84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fcc8:	8ae3      	ldrh	r3, [r4, #22]
 800fcca:	280a      	cmp	r0, #10
 800fccc:	f103 0301 	add.w	r3, r3, #1
 800fcd0:	82e3      	strh	r3, [r4, #22]
 800fcd2:	d0df      	beq.n	800fc94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800fcd4:	9a05      	ldr	r2, [sp, #20]
 800fcd6:	bb42      	cbnz	r2, 800fd2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800fcd8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fcdc:	4298      	cmp	r0, r3
 800fcde:	d001      	beq.n	800fce4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fce0:	4550      	cmp	r0, sl
 800fce2:	d1bd      	bne.n	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fce4:	8823      	ldrh	r3, [r4, #0]
 800fce6:	8b21      	ldrh	r1, [r4, #24]
 800fce8:	2b20      	cmp	r3, #32
 800fcea:	d001      	beq.n	800fcf0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800fcec:	4553      	cmp	r3, sl
 800fcee:	d131      	bne.n	800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800fcf0:	2e00      	cmp	r6, #0
 800fcf2:	bf0a      	itet	eq
 800fcf4:	460d      	moveq	r5, r1
 800fcf6:	4630      	movne	r0, r6
 800fcf8:	2001      	moveq	r0, #1
 800fcfa:	440a      	add	r2, r1
 800fcfc:	8aa3      	ldrh	r3, [r4, #20]
 800fcfe:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fd02:	b292      	uxth	r2, r2
 800fd04:	8322      	strh	r2, [r4, #24]
 800fd06:	4413      	add	r3, r2
 800fd08:	2f00      	cmp	r7, #0
 800fd0a:	d03a      	beq.n	800fd82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800fd0c:	f1bb 0f00 	cmp.w	fp, #0
 800fd10:	d102      	bne.n	800fd18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800fd12:	9903      	ldr	r1, [sp, #12]
 800fd14:	b301      	cbz	r1, 800fd58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fd16:	b1f8      	cbz	r0, 800fd58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fd18:	8ba1      	ldrh	r1, [r4, #28]
 800fd1a:	4419      	add	r1, r3
 800fd1c:	458c      	cmp	ip, r1
 800fd1e:	da2a      	bge.n	800fd76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fd20:	8a61      	ldrh	r1, [r4, #18]
 800fd22:	b341      	cbz	r1, 800fd76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fd24:	4563      	cmp	r3, ip
 800fd26:	dd9b      	ble.n	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd28:	e01c      	b.n	800fd64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800fd2a:	8893      	ldrh	r3, [r2, #4]
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	8023      	strh	r3, [r4, #0]
 800fd30:	f892 800d 	ldrb.w	r8, [r2, #13]
 800fd34:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800fd38:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800fd3c:	f892 800a 	ldrb.w	r8, [r2, #10]
 800fd40:	ea48 0800 	orr.w	r8, r8, r0
 800fd44:	68e0      	ldr	r0, [r4, #12]
 800fd46:	6803      	ldr	r3, [r0, #0]
 800fd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd4a:	4798      	blx	r3
 800fd4c:	eb08 0200 	add.w	r2, r8, r0
 800fd50:	b292      	uxth	r2, r2
 800fd52:	e7c7      	b.n	800fce4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fd54:	2000      	movs	r0, #0
 800fd56:	e7d0      	b.n	800fcfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800fd58:	4563      	cmp	r3, ip
 800fd5a:	dd81      	ble.n	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd5c:	8a63      	ldrh	r3, [r4, #18]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f43f af7e 	beq.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd64:	2301      	movs	r3, #1
 800fd66:	8ba2      	ldrh	r2, [r4, #28]
 800fd68:	77a3      	strb	r3, [r4, #30]
 800fd6a:	8b63      	ldrh	r3, [r4, #26]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	8363      	strh	r3, [r4, #26]
 800fd70:	b007      	add	sp, #28
 800fd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd76:	2300      	movs	r3, #0
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f7ff ff42 	bl	800fc04 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fd80:	e76e      	b.n	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd82:	4563      	cmp	r3, ip
 800fd84:	dd14      	ble.n	800fdb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800fd86:	9b02      	ldr	r3, [sp, #8]
 800fd88:	b113      	cbz	r3, 800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	460a      	mov	r2, r1
 800fd8e:	e783      	b.n	800fc98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800fd90:	9b01      	ldr	r3, [sp, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f43f af64 	beq.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f47f af61 	bne.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fd9e:	b116      	cbz	r6, 800fda6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800fda0:	2301      	movs	r3, #1
 800fda2:	462a      	mov	r2, r5
 800fda4:	e779      	b.n	800fc9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800fda6:	8a63      	ldrh	r3, [r4, #18]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f43f af59 	beq.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdae:	e7df      	b.n	800fd70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	f47f af55 	bne.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdb6:	2e00      	cmp	r6, #0
 800fdb8:	f43f af52 	beq.w	800fc60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	462a      	mov	r2, r5
 800fdc0:	e7db      	b.n	800fd7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800fdc2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800fdc2:	b530      	push	{r4, r5, lr}
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	b08b      	sub	sp, #44	; 0x2c
 800fdc8:	b191      	cbz	r1, 800fdf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800fdca:	2401      	movs	r4, #1
 800fdcc:	e9cd 3100 	strd	r3, r1, [sp]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800fdd8:	a802      	add	r0, sp, #8
 800fdda:	f7ff fd0b 	bl	800f7f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fdde:	2100      	movs	r1, #0
 800fde0:	a802      	add	r0, sp, #8
 800fde2:	f7ff ff1f 	bl	800fc24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fde6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fdea:	b163      	cbz	r3, 800fe06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800fdec:	3401      	adds	r4, #1
 800fdee:	e7f6      	b.n	800fdde <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800fdf0:	2401      	movs	r4, #1
 800fdf2:	f002 fcf3 	bl	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fdf6:	280a      	cmp	r0, #10
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	bf08      	it	eq
 800fdfc:	3401      	addeq	r4, #1
 800fdfe:	f002 fced 	bl	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d1f7      	bne.n	800fdf6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800fe06:	b2a0      	uxth	r0, r4
 800fe08:	b00b      	add	sp, #44	; 0x2c
 800fe0a:	bd30      	pop	{r4, r5, pc}

0800fe0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	b0e5      	sub	sp, #404	; 0x194
 800fe12:	4689      	mov	r9, r1
 800fe14:	461c      	mov	r4, r3
 800fe16:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800fe1a:	900a      	str	r0, [sp, #40]	; 0x28
 800fe1c:	f1ba 0f00 	cmp.w	sl, #0
 800fe20:	f000 80b4 	beq.w	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80b0 	beq.w	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe2c:	7ba3      	ldrb	r3, [r4, #14]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f000 80ac 	beq.w	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800fe34:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800fe38:	6810      	ldr	r0, [r2, #0]
 800fe3a:	6851      	ldr	r1, [r2, #4]
 800fe3c:	2500      	movs	r5, #0
 800fe3e:	4643      	mov	r3, r8
 800fe40:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800fe44:	950f      	str	r5, [sp, #60]	; 0x3c
 800fe46:	af19      	add	r7, sp, #100	; 0x64
 800fe48:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe4c:	79a2      	ldrb	r2, [r4, #6]
 800fe4e:	c303      	stmia	r3!, {r0, r1}
 800fe50:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800fe54:	a90f      	add	r1, sp, #60	; 0x3c
 800fe56:	4640      	mov	r0, r8
 800fe58:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800fe5c:	f7ff fd40 	bl	800f8e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fe60:	a90f      	add	r1, sp, #60	; 0x3c
 800fe62:	79a2      	ldrb	r2, [r4, #6]
 800fe64:	4608      	mov	r0, r1
 800fe66:	f7ff fd3b 	bl	800f8e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f002 f868 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 800fe70:	6820      	ldr	r0, [r4, #0]
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe76:	4798      	blx	r3
 800fe78:	4606      	mov	r6, r0
 800fe7a:	6820      	ldr	r0, [r4, #0]
 800fe7c:	6803      	ldr	r3, [r0, #0]
 800fe7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe80:	4798      	blx	r3
 800fe82:	4633      	mov	r3, r6
 800fe84:	9000      	str	r0, [sp, #0]
 800fe86:	4651      	mov	r1, sl
 800fe88:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	f002 f8ab 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fe90:	7923      	ldrb	r3, [r4, #4]
 800fe92:	6820      	ldr	r0, [r4, #0]
 800fe94:	9308      	str	r3, [sp, #32]
 800fe96:	6803      	ldr	r3, [r0, #0]
 800fe98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9a:	4798      	blx	r3
 800fe9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fea0:	181e      	adds	r6, r3, r0
 800fea2:	42ae      	cmp	r6, r5
 800fea4:	dd06      	ble.n	800feb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800fea6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800feaa:	4282      	cmp	r2, r0
 800feac:	bfa4      	itt	ge
 800feae:	189d      	addge	r5, r3, r2
 800feb0:	fb95 f5f6 	sdivge	r5, r5, r6
 800feb4:	a832      	add	r0, sp, #200	; 0xc8
 800feb6:	f002 f843 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 800feba:	7c23      	ldrb	r3, [r4, #16]
 800febc:	b17b      	cbz	r3, 800fede <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800febe:	6820      	ldr	r0, [r4, #0]
 800fec0:	6803      	ldr	r3, [r0, #0]
 800fec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec4:	4798      	blx	r3
 800fec6:	4683      	mov	fp, r0
 800fec8:	6820      	ldr	r0, [r4, #0]
 800feca:	6803      	ldr	r3, [r0, #0]
 800fecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fece:	4798      	blx	r3
 800fed0:	465b      	mov	r3, fp
 800fed2:	9000      	str	r0, [sp, #0]
 800fed4:	4651      	mov	r1, sl
 800fed6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800fed8:	a832      	add	r0, sp, #200	; 0xc8
 800feda:	f002 f884 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fede:	7be1      	ldrb	r1, [r4, #15]
 800fee0:	a811      	add	r0, sp, #68	; 0x44
 800fee2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800fee6:	7963      	ldrb	r3, [r4, #5]
 800fee8:	1a52      	subs	r2, r2, r1
 800feea:	7c21      	ldrb	r1, [r4, #16]
 800feec:	9101      	str	r1, [sp, #4]
 800feee:	b292      	uxth	r2, r2
 800fef0:	6821      	ldr	r1, [r4, #0]
 800fef2:	9100      	str	r1, [sp, #0]
 800fef4:	a932      	add	r1, sp, #200	; 0xc8
 800fef6:	f7ff fc7d 	bl	800f7f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fefa:	7c23      	ldrb	r3, [r4, #16]
 800fefc:	b9bb      	cbnz	r3, 800ff2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800fefe:	fa1f fa86 	uxth.w	sl, r6
 800ff02:	2d00      	cmp	r5, #0
 800ff04:	dd45      	ble.n	800ff92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ff06:	4638      	mov	r0, r7
 800ff08:	f002 fc68 	bl	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d03d      	beq.n	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ff10:	280a      	cmp	r0, #10
 800ff12:	d1f6      	bne.n	800ff02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ff14:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ff18:	3d01      	subs	r5, #1
 800ff1a:	4453      	add	r3, sl
 800ff1c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ff20:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ff24:	eba3 030a 	sub.w	r3, r3, sl
 800ff28:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ff2c:	e7e9      	b.n	800ff02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800ff2e:	0073      	lsls	r3, r6, #1
 800ff30:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ff34:	fa1f fa86 	uxth.w	sl, r6
 800ff38:	9309      	str	r3, [sp, #36]	; 0x24
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	dd29      	ble.n	800ff92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800ff3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ff42:	a811      	add	r0, sp, #68	; 0x44
 800ff44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff46:	428b      	cmp	r3, r1
 800ff48:	bfd4      	ite	le
 800ff4a:	2100      	movle	r1, #0
 800ff4c:	2101      	movgt	r1, #1
 800ff4e:	f7ff fe69 	bl	800fc24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ff52:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800ff56:	3b01      	subs	r3, #1
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	455b      	cmp	r3, fp
 800ff5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff5e:	d005      	beq.n	800ff6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800ff60:	7961      	ldrb	r1, [r4, #5]
 800ff62:	4638      	mov	r0, r7
 800ff64:	f7f4 fc04 	bl	8004770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ff68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff6a:	e7f4      	b.n	800ff56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800ff6c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ff70:	3d01      	subs	r5, #1
 800ff72:	4453      	add	r3, sl
 800ff74:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ff78:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ff7c:	eba3 030a 	sub.w	r3, r3, sl
 800ff80:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ff84:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1d6      	bne.n	800ff3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800ff8c:	b065      	add	sp, #404	; 0x194
 800ff8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff92:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800ff96:	ad4b      	add	r5, sp, #300	; 0x12c
 800ff98:	f04f 0b00 	mov.w	fp, #0
 800ff9c:	7c23      	ldrb	r3, [r4, #16]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d067      	beq.n	8010072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800ffa2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ffa6:	a811      	add	r0, sp, #68	; 0x44
 800ffa8:	458a      	cmp	sl, r1
 800ffaa:	bfd4      	ite	le
 800ffac:	2100      	movle	r1, #0
 800ffae:	2101      	movgt	r1, #1
 800ffb0:	f7ff fe38 	bl	800fc24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ffb4:	9b08      	ldr	r3, [sp, #32]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d056      	beq.n	8010068 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800ffba:	7c23      	ldrb	r3, [r4, #16]
 800ffbc:	2264      	movs	r2, #100	; 0x64
 800ffbe:	4639      	mov	r1, r7
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc4:	f00c fa08 	bl	801c3d8 <memcpy>
 800ffc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d059      	beq.n	8010082 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800ffce:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800ffd2:	7922      	ldrb	r2, [r4, #4]
 800ffd4:	2a01      	cmp	r2, #1
 800ffd6:	d13d      	bne.n	8010054 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800ffd8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800ffdc:	1ac0      	subs	r0, r0, r3
 800ffde:	2302      	movs	r3, #2
 800ffe0:	fb90 f0f3 	sdiv	r0, r0, r3
 800ffe4:	b200      	sxth	r0, r0
 800ffe6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ffea:	4418      	add	r0, r3
 800ffec:	7c23      	ldrb	r3, [r4, #16]
 800ffee:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d03a      	beq.n	801006c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800fff6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800fffa:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800fffe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8010002:	9500      	str	r5, [sp, #0]
 8010004:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010006:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801000a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801000e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8010012:	464a      	mov	r2, r9
 8010014:	2100      	movs	r1, #0
 8010016:	f7ff fc94 	bl	800f942 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801001a:	2800      	cmp	r0, #0
 801001c:	d1b6      	bne.n	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801001e:	b2b2      	uxth	r2, r6
 8010020:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010024:	4611      	mov	r1, r2
 8010026:	4413      	add	r3, r2
 8010028:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801002c:	b21b      	sxth	r3, r3
 801002e:	1a52      	subs	r2, r2, r1
 8010030:	7c21      	ldrb	r1, [r4, #16]
 8010032:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010036:	b212      	sxth	r2, r2
 8010038:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801003c:	b109      	cbz	r1, 8010042 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801003e:	42b2      	cmp	r2, r6
 8010040:	dba4      	blt.n	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010042:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8010046:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801004a:	440a      	add	r2, r1
 801004c:	b212      	sxth	r2, r2
 801004e:	4293      	cmp	r3, r2
 8010050:	dda4      	ble.n	800ff9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8010052:	e79b      	b.n	800ff8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010054:	2a02      	cmp	r2, #2
 8010056:	d105      	bne.n	8010064 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8010058:	7be2      	ldrb	r2, [r4, #15]
 801005a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801005e:	1a80      	subs	r0, r0, r2
 8010060:	1ac0      	subs	r0, r0, r3
 8010062:	e7bf      	b.n	800ffe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8010064:	2000      	movs	r0, #0
 8010066:	e7be      	b.n	800ffe6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8010068:	7be0      	ldrb	r0, [r4, #15]
 801006a:	e7bc      	b.n	800ffe6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801006c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010070:	e7c3      	b.n	800fffa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8010072:	9b08      	ldr	r3, [sp, #32]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d0f7      	beq.n	8010068 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8010078:	2264      	movs	r2, #100	; 0x64
 801007a:	4639      	mov	r1, r7
 801007c:	4628      	mov	r0, r5
 801007e:	f00c f9ab 	bl	801c3d8 <memcpy>
 8010082:	2300      	movs	r3, #0
 8010084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010088:	6821      	ldr	r1, [r4, #0]
 801008a:	4628      	mov	r0, r5
 801008c:	f7ff fbec 	bl	800f868 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010090:	b203      	sxth	r3, r0
 8010092:	e79e      	b.n	800ffd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

08010094 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8010094:	2b02      	cmp	r3, #2
 8010096:	b510      	push	{r4, lr}
 8010098:	f9b0 4000 	ldrsh.w	r4, [r0]
 801009c:	d00b      	beq.n	80100b6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801009e:	2b03      	cmp	r3, #3
 80100a0:	d00e      	beq.n	80100c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d001      	beq.n	80100aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80100a6:	1860      	adds	r0, r4, r1
 80100a8:	bd10      	pop	{r4, pc}
 80100aa:	8880      	ldrh	r0, [r0, #4]
 80100ac:	4420      	add	r0, r4
 80100ae:	b200      	sxth	r0, r0
 80100b0:	1a80      	subs	r0, r0, r2
 80100b2:	3801      	subs	r0, #1
 80100b4:	e7f8      	b.n	80100a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80100b6:	8880      	ldrh	r0, [r0, #4]
 80100b8:	4420      	add	r0, r4
 80100ba:	b200      	sxth	r0, r0
 80100bc:	1a40      	subs	r0, r0, r1
 80100be:	e7f8      	b.n	80100b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80100c0:	18a0      	adds	r0, r4, r2
 80100c2:	e7f1      	b.n	80100a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080100c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	b510      	push	{r4, lr}
 80100c8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80100cc:	d006      	beq.n	80100dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d00a      	beq.n	80100e8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	bf14      	ite	ne
 80100d6:	18a0      	addne	r0, r4, r2
 80100d8:	1860      	addeq	r0, r4, r1
 80100da:	bd10      	pop	{r4, pc}
 80100dc:	88c0      	ldrh	r0, [r0, #6]
 80100de:	4420      	add	r0, r4
 80100e0:	b200      	sxth	r0, r0
 80100e2:	1a80      	subs	r0, r0, r2
 80100e4:	3801      	subs	r0, #1
 80100e6:	e7f8      	b.n	80100da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80100e8:	88c0      	ldrh	r0, [r0, #6]
 80100ea:	4420      	add	r0, r4
 80100ec:	b200      	sxth	r0, r0
 80100ee:	1a40      	subs	r0, r0, r1
 80100f0:	e7f8      	b.n	80100e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080100f4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80100f4:	4b01      	ldr	r3, [pc, #4]	; (80100fc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	4770      	bx	lr
 80100fc:	24006c74 	.word	0x24006c74

08010100 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8010100:	4603      	mov	r3, r0
 8010102:	b1c8      	cbz	r0, 8010138 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8010104:	0c02      	lsrs	r2, r0, #16
 8010106:	0412      	lsls	r2, r2, #16
 8010108:	b9a2      	cbnz	r2, 8010134 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801010a:	0403      	lsls	r3, r0, #16
 801010c:	2010      	movs	r0, #16
 801010e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010112:	bf04      	itt	eq
 8010114:	021b      	lsleq	r3, r3, #8
 8010116:	3008      	addeq	r0, #8
 8010118:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801011c:	bf04      	itt	eq
 801011e:	011b      	lsleq	r3, r3, #4
 8010120:	3004      	addeq	r0, #4
 8010122:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010126:	bf04      	itt	eq
 8010128:	009b      	lsleq	r3, r3, #2
 801012a:	3002      	addeq	r0, #2
 801012c:	2b00      	cmp	r3, #0
 801012e:	db04      	blt.n	801013a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8010130:	3001      	adds	r0, #1
 8010132:	4770      	bx	lr
 8010134:	2000      	movs	r0, #0
 8010136:	e7ea      	b.n	801010e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8010138:	2020      	movs	r0, #32
 801013a:	4770      	bx	lr

0801013c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010140:	b087      	sub	sp, #28
 8010142:	4681      	mov	r9, r0
 8010144:	4698      	mov	r8, r3
 8010146:	4610      	mov	r0, r2
 8010148:	460d      	mov	r5, r1
 801014a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801014e:	b981      	cbnz	r1, 8010172 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8010150:	b14b      	cbz	r3, 8010166 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8010152:	460b      	mov	r3, r1
 8010154:	464a      	mov	r2, r9
 8010156:	4641      	mov	r1, r8
 8010158:	e9cd 4700 	strd	r4, r7, [sp]
 801015c:	f7ff ffee 	bl	801013c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010160:	b007      	add	sp, #28
 8010162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010166:	f04f 33ff 	mov.w	r3, #4294967295
 801016a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	e7f6      	b.n	8010160 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8010172:	fa32 fa01 	lsrs.w	sl, r2, r1
 8010176:	d107      	bne.n	8010188 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8010178:	fb09 f602 	mul.w	r6, r9, r2
 801017c:	fbb6 f0f4 	udiv	r0, r6, r4
 8010180:	fb04 6610 	mls	r6, r4, r0, r6
 8010184:	603e      	str	r6, [r7, #0]
 8010186:	e7eb      	b.n	8010160 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8010188:	2601      	movs	r6, #1
 801018a:	fa09 fb01 	lsl.w	fp, r9, r1
 801018e:	408e      	lsls	r6, r1
 8010190:	fbbb f3f4 	udiv	r3, fp, r4
 8010194:	3e01      	subs	r6, #1
 8010196:	9302      	str	r3, [sp, #8]
 8010198:	fb0a f303 	mul.w	r3, sl, r3
 801019c:	4016      	ands	r6, r2
 801019e:	9303      	str	r3, [sp, #12]
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7ff ffad 	bl	8010100 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80101a6:	464a      	mov	r2, r9
 80101a8:	460b      	mov	r3, r1
 80101aa:	4601      	mov	r1, r0
 80101ac:	4630      	mov	r0, r6
 80101ae:	e9cd 4700 	strd	r4, r7, [sp]
 80101b2:	f7ff ffc3 	bl	801013c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80101b6:	9b02      	ldr	r3, [sp, #8]
 80101b8:	4606      	mov	r6, r0
 80101ba:	eb05 0108 	add.w	r1, r5, r8
 80101be:	fb04 bb13 	mls	fp, r4, r3, fp
 80101c2:	4658      	mov	r0, fp
 80101c4:	f7ff ff9c 	bl	8010100 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80101c8:	ab05      	add	r3, sp, #20
 80101ca:	465a      	mov	r2, fp
 80101cc:	e9cd 4300 	strd	r4, r3, [sp]
 80101d0:	4603      	mov	r3, r0
 80101d2:	4650      	mov	r0, sl
 80101d4:	f7ff ffb2 	bl	801013c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80101d8:	6839      	ldr	r1, [r7, #0]
 80101da:	9a05      	ldr	r2, [sp, #20]
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	4411      	add	r1, r2
 80101e0:	fbb1 f2f4 	udiv	r2, r1, r4
 80101e4:	18d3      	adds	r3, r2, r3
 80101e6:	fb04 1412 	mls	r4, r4, r2, r1
 80101ea:	441e      	add	r6, r3
 80101ec:	603c      	str	r4, [r7, #0]
 80101ee:	4430      	add	r0, r6
 80101f0:	e7b6      	b.n	8010160 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080101f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80101f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101f6:	b085      	sub	sp, #20
 80101f8:	f1b0 0900 	subs.w	r9, r0, #0
 80101fc:	461d      	mov	r5, r3
 80101fe:	4617      	mov	r7, r2
 8010200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010202:	bfbb      	ittet	lt
 8010204:	f1c9 0900 	rsblt	r9, r9, #0
 8010208:	f04f 36ff 	movlt.w	r6, #4294967295
 801020c:	2601      	movge	r6, #1
 801020e:	6823      	ldrlt	r3, [r4, #0]
 8010210:	bfbc      	itt	lt
 8010212:	425b      	neglt	r3, r3
 8010214:	6023      	strlt	r3, [r4, #0]
 8010216:	2a00      	cmp	r2, #0
 8010218:	da04      	bge.n	8010224 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801021a:	6823      	ldr	r3, [r4, #0]
 801021c:	4257      	negs	r7, r2
 801021e:	4276      	negs	r6, r6
 8010220:	425b      	negs	r3, r3
 8010222:	6023      	str	r3, [r4, #0]
 8010224:	2d00      	cmp	r5, #0
 8010226:	4638      	mov	r0, r7
 8010228:	bfba      	itte	lt
 801022a:	426d      	neglt	r5, r5
 801022c:	f04f 38ff 	movlt.w	r8, #4294967295
 8010230:	f04f 0801 	movge.w	r8, #1
 8010234:	f7ff ff64 	bl	8010100 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010238:	ab03      	add	r3, sp, #12
 801023a:	463a      	mov	r2, r7
 801023c:	e9cd 5300 	strd	r5, r3, [sp]
 8010240:	4603      	mov	r3, r0
 8010242:	4648      	mov	r0, r9
 8010244:	f7ff ff7a 	bl	801013c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	9a03      	ldr	r2, [sp, #12]
 801024c:	4546      	cmp	r6, r8
 801024e:	441a      	add	r2, r3
 8010250:	fb92 f3f5 	sdiv	r3, r2, r5
 8010254:	4418      	add	r0, r3
 8010256:	fb05 2313 	mls	r3, r5, r3, r2
 801025a:	bf18      	it	ne
 801025c:	4240      	negne	r0, r0
 801025e:	1c72      	adds	r2, r6, #1
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	d105      	bne.n	8010270 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8010264:	2b00      	cmp	r3, #0
 8010266:	f1c3 0200 	rsb	r2, r3, #0
 801026a:	db0b      	blt.n	8010284 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801026c:	6022      	str	r2, [r4, #0]
 801026e:	e006      	b.n	801027e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010270:	2e01      	cmp	r6, #1
 8010272:	d104      	bne.n	801027e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010274:	2b00      	cmp	r3, #0
 8010276:	da02      	bge.n	801027e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8010278:	442b      	add	r3, r5
 801027a:	3801      	subs	r0, #1
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	b005      	add	sp, #20
 8010280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010284:	3801      	subs	r0, #1
 8010286:	1b52      	subs	r2, r2, r5
 8010288:	e7f0      	b.n	801026c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801028c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801028c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010290:	4c1c      	ldr	r4, [pc, #112]	; (8010304 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8010292:	4605      	mov	r5, r0
 8010294:	6807      	ldr	r7, [r0, #0]
 8010296:	69a3      	ldr	r3, [r4, #24]
 8010298:	b92b      	cbnz	r3, 80102a6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801029a:	6840      	ldr	r0, [r0, #4]
 801029c:	e9c5 7000 	strd	r7, r0, [r5]
 80102a0:	b004      	add	sp, #16
 80102a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a6:	f04f 0802 	mov.w	r8, #2
 80102aa:	68a2      	ldr	r2, [r4, #8]
 80102ac:	ae04      	add	r6, sp, #16
 80102ae:	6820      	ldr	r0, [r4, #0]
 80102b0:	fb93 f1f8 	sdiv	r1, r3, r8
 80102b4:	440a      	add	r2, r1
 80102b6:	69e1      	ldr	r1, [r4, #28]
 80102b8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80102bc:	463a      	mov	r2, r7
 80102be:	9600      	str	r6, [sp, #0]
 80102c0:	f7ff ff97 	bl	80101f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102c4:	69a3      	ldr	r3, [r4, #24]
 80102c6:	4607      	mov	r7, r0
 80102c8:	686a      	ldr	r2, [r5, #4]
 80102ca:	6a21      	ldr	r1, [r4, #32]
 80102cc:	9600      	str	r6, [sp, #0]
 80102ce:	6860      	ldr	r0, [r4, #4]
 80102d0:	f7ff ff8f 	bl	80101f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102d4:	69a3      	ldr	r3, [r4, #24]
 80102d6:	6962      	ldr	r2, [r4, #20]
 80102d8:	4407      	add	r7, r0
 80102da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80102dc:	9600      	str	r6, [sp, #0]
 80102de:	68e0      	ldr	r0, [r4, #12]
 80102e0:	fb93 f8f8 	sdiv	r8, r3, r8
 80102e4:	4442      	add	r2, r8
 80102e6:	9203      	str	r2, [sp, #12]
 80102e8:	682a      	ldr	r2, [r5, #0]
 80102ea:	f7ff ff82 	bl	80101f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102ee:	4680      	mov	r8, r0
 80102f0:	9600      	str	r6, [sp, #0]
 80102f2:	69a3      	ldr	r3, [r4, #24]
 80102f4:	686a      	ldr	r2, [r5, #4]
 80102f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80102f8:	6920      	ldr	r0, [r4, #16]
 80102fa:	f7ff ff7a 	bl	80101f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80102fe:	4440      	add	r0, r8
 8010300:	e7cc      	b.n	801029c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8010302:	bf00      	nop
 8010304:	24006c78 	.word	0x24006c78

08010308 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d109      	bne.n	8010324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8010310:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010314:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010318:	8003      	strh	r3, [r0, #0]
 801031a:	4b04      	ldr	r3, [pc, #16]	; (801032c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801031c:	881b      	ldrh	r3, [r3, #0]
 801031e:	3b01      	subs	r3, #1
 8010320:	1a9b      	subs	r3, r3, r2
 8010322:	800b      	strh	r3, [r1, #0]
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	24006c64 	.word	0x24006c64
 801032c:	24006c68 	.word	0x24006c68

08010330 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8010330:	4b07      	ldr	r3, [pc, #28]	; (8010350 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8010332:	b510      	push	{r4, lr}
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d108      	bne.n	801034c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801033a:	4b06      	ldr	r3, [pc, #24]	; (8010354 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801033c:	880c      	ldrh	r4, [r1, #0]
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010344:	3b01      	subs	r3, #1
 8010346:	1b1b      	subs	r3, r3, r4
 8010348:	8003      	strh	r3, [r0, #0]
 801034a:	800a      	strh	r2, [r1, #0]
 801034c:	bd10      	pop	{r4, pc}
 801034e:	bf00      	nop
 8010350:	24006c64 	.word	0x24006c64
 8010354:	24006c68 	.word	0x24006c68

08010358 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801035a:	b510      	push	{r4, lr}
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d10e      	bne.n	8010380 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8010362:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010366:	8843      	ldrh	r3, [r0, #2]
 8010368:	f9b0 4000 	ldrsh.w	r4, [r0]
 801036c:	18ca      	adds	r2, r1, r3
 801036e:	4b06      	ldr	r3, [pc, #24]	; (8010388 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8010370:	8044      	strh	r4, [r0, #2]
 8010372:	881b      	ldrh	r3, [r3, #0]
 8010374:	1a9b      	subs	r3, r3, r2
 8010376:	8003      	strh	r3, [r0, #0]
 8010378:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801037c:	8081      	strh	r1, [r0, #4]
 801037e:	80c3      	strh	r3, [r0, #6]
 8010380:	bd10      	pop	{r4, pc}
 8010382:	bf00      	nop
 8010384:	24006c64 	.word	0x24006c64
 8010388:	24006c68 	.word	0x24006c68

0801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801038c:	4b08      	ldr	r3, [pc, #32]	; (80103b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d10c      	bne.n	80103ae <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8010394:	8803      	ldrh	r3, [r0, #0]
 8010396:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801039a:	8842      	ldrh	r2, [r0, #2]
 801039c:	8002      	strh	r2, [r0, #0]
 801039e:	185a      	adds	r2, r3, r1
 80103a0:	4b04      	ldr	r3, [pc, #16]	; (80103b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80103a2:	881b      	ldrh	r3, [r3, #0]
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	8043      	strh	r3, [r0, #2]
 80103a8:	88c3      	ldrh	r3, [r0, #6]
 80103aa:	80c1      	strh	r1, [r0, #6]
 80103ac:	8083      	strh	r3, [r0, #4]
 80103ae:	4770      	bx	lr
 80103b0:	24006c64 	.word	0x24006c64
 80103b4:	24006c68 	.word	0x24006c68

080103b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80103b8:	4b07      	ldr	r3, [pc, #28]	; (80103d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80103ba:	b510      	push	{r4, lr}
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d108      	bne.n	80103d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80103c2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80103c6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80103ca:	8003      	strh	r3, [r0, #0]
 80103cc:	8893      	ldrh	r3, [r2, #4]
 80103ce:	3b01      	subs	r3, #1
 80103d0:	1b1b      	subs	r3, r3, r4
 80103d2:	800b      	strh	r3, [r1, #0]
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	bf00      	nop
 80103d8:	24006c64 	.word	0x24006c64

080103dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80103dc:	4b0b      	ldr	r3, [pc, #44]	; (801040c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d111      	bne.n	8010408 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80103e4:	680b      	ldr	r3, [r1, #0]
 80103e6:	ed90 7a00 	vldr	s14, [r0]
 80103ea:	6003      	str	r3, [r0, #0]
 80103ec:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80103f0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80103f4:	ee07 3a90 	vmov	s15, r3
 80103f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010404:	edc1 7a00 	vstr	s15, [r1]
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	24006c64 	.word	0x24006c64
 8010410:	38d1b717 	.word	0x38d1b717

08010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8010416:	460a      	mov	r2, r1
 8010418:	b510      	push	{r4, lr}
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d10d      	bne.n	801043c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8010420:	8881      	ldrh	r1, [r0, #4]
 8010422:	8803      	ldrh	r3, [r0, #0]
 8010424:	440b      	add	r3, r1
 8010426:	4601      	mov	r1, r0
 8010428:	3b01      	subs	r3, #1
 801042a:	f821 3b02 	strh.w	r3, [r1], #2
 801042e:	f7ff ffc3 	bl	80103b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010432:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010436:	88c2      	ldrh	r2, [r0, #6]
 8010438:	80c3      	strh	r3, [r0, #6]
 801043a:	8082      	strh	r2, [r0, #4]
 801043c:	bd10      	pop	{r4, pc}
 801043e:	bf00      	nop
 8010440:	24006c64 	.word	0x24006c64

08010444 <_ZN8touchgfx11Application13requestRedrawEv>:
 8010444:	4b06      	ldr	r3, [pc, #24]	; (8010460 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8010446:	2100      	movs	r1, #0
 8010448:	f9b3 2000 	ldrsh.w	r2, [r3]
 801044c:	4b05      	ldr	r3, [pc, #20]	; (8010464 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801044e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8010452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010456:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801045a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801045e:	4770      	bx	lr
 8010460:	24006c60 	.word	0x24006c60
 8010464:	24006c62 	.word	0x24006c62

08010468 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8010468:	4b03      	ldr	r3, [pc, #12]	; (8010478 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801046a:	6818      	ldr	r0, [r3, #0]
 801046c:	b110      	cbz	r0, 8010474 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801046e:	6803      	ldr	r3, [r0, #0]
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	4718      	bx	r3
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	24006ca8 	.word	0x24006ca8

0801047c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801047c:	4770      	bx	lr
	...

08010480 <_ZN8touchgfx11Application4drawEv>:
 8010480:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8010482:	b507      	push	{r0, r1, r2, lr}
 8010484:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010488:	2100      	movs	r1, #0
 801048a:	4b08      	ldr	r3, [pc, #32]	; (80104ac <_ZN8touchgfx11Application4drawEv+0x2c>)
 801048c:	9100      	str	r1, [sp, #0]
 801048e:	4669      	mov	r1, sp
 8010490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010494:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010498:	f8ad 3006 	strh.w	r3, [sp, #6]
 801049c:	6803      	ldr	r3, [r0, #0]
 801049e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104a0:	4798      	blx	r3
 80104a2:	b003      	add	sp, #12
 80104a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80104a8:	24006c60 	.word	0x24006c60
 80104ac:	24006c62 	.word	0x24006c62

080104b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80104b0:	4b03      	ldr	r3, [pc, #12]	; (80104c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80104b2:	6818      	ldr	r0, [r3, #0]
 80104b4:	b110      	cbz	r0, 80104bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80104b6:	6803      	ldr	r3, [r0, #0]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	4718      	bx	r3
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	24006ca8 	.word	0x24006ca8

080104c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80104c4:	4b03      	ldr	r3, [pc, #12]	; (80104d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80104c6:	6818      	ldr	r0, [r3, #0]
 80104c8:	b110      	cbz	r0, 80104d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	6a1b      	ldr	r3, [r3, #32]
 80104ce:	4718      	bx	r3
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop
 80104d4:	24006ca8 	.word	0x24006ca8

080104d8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80104d8:	4b03      	ldr	r3, [pc, #12]	; (80104e8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80104da:	6818      	ldr	r0, [r3, #0]
 80104dc:	b110      	cbz	r0, 80104e4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80104de:	6803      	ldr	r3, [r0, #0]
 80104e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e2:	4718      	bx	r3
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	24006ca8 	.word	0x24006ca8

080104ec <_ZN8touchgfx11ApplicationD1Ev>:
 80104ec:	4770      	bx	lr

080104ee <_ZN8touchgfx11ApplicationD0Ev>:
 80104ee:	b510      	push	{r4, lr}
 80104f0:	4604      	mov	r4, r0
 80104f2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80104f6:	f00b fddb 	bl	801c0b0 <_ZdlPvj>
 80104fa:	4620      	mov	r0, r4
 80104fc:	bd10      	pop	{r4, pc}
	...

08010500 <_ZN8touchgfx11Application15handleTickEventEv>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	4d38      	ldr	r5, [pc, #224]	; (80105e4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8010504:	4604      	mov	r4, r0
 8010506:	6828      	ldr	r0, [r5, #0]
 8010508:	b140      	cbz	r0, 801051c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801050a:	7a03      	ldrb	r3, [r0, #8]
 801050c:	b933      	cbnz	r3, 801051c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801050e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8010512:	6803      	ldr	r3, [r0, #0]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801051a:	4718      	bx	r3
 801051c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8010520:	b97b      	cbnz	r3, 8010542 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010522:	b170      	cbz	r0, 8010542 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010524:	7a03      	ldrb	r3, [r0, #8]
 8010526:	b163      	cbz	r3, 8010542 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010528:	4b2f      	ldr	r3, [pc, #188]	; (80105e8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801052a:	6818      	ldr	r0, [r3, #0]
 801052c:	b110      	cbz	r0, 8010534 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801052e:	6803      	ldr	r3, [r0, #0]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	4798      	blx	r3
 8010534:	6828      	ldr	r0, [r5, #0]
 8010536:	6803      	ldr	r3, [r0, #0]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	4798      	blx	r3
 801053c:	2301      	movs	r3, #1
 801053e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8010542:	2500      	movs	r5, #0
 8010544:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8010548:	42a8      	cmp	r0, r5
 801054a:	dd0c      	ble.n	8010566 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801054c:	1963      	adds	r3, r4, r5
 801054e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010552:	b132      	cbz	r2, 8010562 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8010554:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8010558:	4413      	add	r3, r2
 801055a:	6858      	ldr	r0, [r3, #4]
 801055c:	6803      	ldr	r3, [r0, #0]
 801055e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010560:	4798      	blx	r3
 8010562:	3501      	adds	r5, #1
 8010564:	e7ee      	b.n	8010544 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010566:	2300      	movs	r3, #0
 8010568:	461a      	mov	r2, r3
 801056a:	4298      	cmp	r0, r3
 801056c:	d10f      	bne.n	801058e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801056e:	1d25      	adds	r5, r4, #4
 8010570:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8010574:	4291      	cmp	r1, r2
 8010576:	dd2d      	ble.n	80105d4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8010578:	1e48      	subs	r0, r1, #1
 801057a:	b280      	uxth	r0, r0
 801057c:	4288      	cmp	r0, r1
 801057e:	d31a      	bcc.n	80105b6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8010580:	4b1a      	ldr	r3, [pc, #104]	; (80105ec <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8010582:	f240 11a9 	movw	r1, #425	; 0x1a9
 8010586:	4a1a      	ldr	r2, [pc, #104]	; (80105f0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8010588:	481a      	ldr	r0, [pc, #104]	; (80105f4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801058a:	f00b fea7 	bl	801c2dc <__assert_func>
 801058e:	18e1      	adds	r1, r4, r3
 8010590:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8010594:	b16d      	cbz	r5, 80105b2 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8010596:	429a      	cmp	r2, r3
 8010598:	d00a      	beq.n	80105b0 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801059a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801059e:	4431      	add	r1, r6
 80105a0:	684e      	ldr	r6, [r1, #4]
 80105a2:	b291      	uxth	r1, r2
 80105a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80105a8:	604e      	str	r6, [r1, #4]
 80105aa:	18a1      	adds	r1, r4, r2
 80105ac:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80105b0:	3201      	adds	r2, #1
 80105b2:	3301      	adds	r3, #1
 80105b4:	e7d9      	b.n	801056a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80105b6:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80105ba:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80105be:	3304      	adds	r3, #4
 80105c0:	428b      	cmp	r3, r1
 80105c2:	d004      	beq.n	80105ce <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 80105c4:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80105c8:	f843 6c04 	str.w	r6, [r3, #-4]
 80105cc:	e7f8      	b.n	80105c0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80105ce:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80105d2:	e7cd      	b.n	8010570 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80105d4:	4b04      	ldr	r3, [pc, #16]	; (80105e8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80105d6:	6818      	ldr	r0, [r3, #0]
 80105d8:	b110      	cbz	r0, 80105e0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80105da:	6803      	ldr	r3, [r0, #0]
 80105dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105de:	e79a      	b.n	8010516 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80105e0:	bd70      	pop	{r4, r5, r6, pc}
 80105e2:	bf00      	nop
 80105e4:	24006cac 	.word	0x24006cac
 80105e8:	24006ca8 	.word	0x24006ca8
 80105ec:	0801f73a 	.word	0x0801f73a
 80105f0:	0801f924 	.word	0x0801f924
 80105f4:	0801f748 	.word	0x0801f748

080105f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	4606      	mov	r6, r0
 80105fc:	460c      	mov	r4, r1
 80105fe:	b929      	cbnz	r1, 801060c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8010600:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8010602:	2167      	movs	r1, #103	; 0x67
 8010604:	4a0c      	ldr	r2, [pc, #48]	; (8010638 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8010606:	480d      	ldr	r0, [pc, #52]	; (801063c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8010608:	f00b fe68 	bl	801c2dc <__assert_func>
 801060c:	2300      	movs	r3, #0
 801060e:	4d0c      	ldr	r5, [pc, #48]	; (8010640 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8010610:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010614:	6828      	ldr	r0, [r5, #0]
 8010616:	b110      	cbz	r0, 801061e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8010618:	6803      	ldr	r3, [r0, #0]
 801061a:	695b      	ldr	r3, [r3, #20]
 801061c:	4798      	blx	r3
 801061e:	602c      	str	r4, [r5, #0]
 8010620:	4620      	mov	r0, r4
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	4798      	blx	r3
 8010628:	6833      	ldr	r3, [r6, #0]
 801062a:	4630      	mov	r0, r6
 801062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801062e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010632:	4718      	bx	r3
 8010634:	0801f706 	.word	0x0801f706
 8010638:	0801f7e4 	.word	0x0801f7e4
 801063c:	0801f710 	.word	0x0801f710
 8010640:	24006ca8 	.word	0x24006ca8

08010644 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010644:	b510      	push	{r4, lr}
 8010646:	f9b1 4000 	ldrsh.w	r4, [r1]
 801064a:	888a      	ldrh	r2, [r1, #4]
 801064c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010650:	4422      	add	r2, r4
 8010652:	b212      	sxth	r2, r2
 8010654:	4293      	cmp	r3, r2
 8010656:	da15      	bge.n	8010684 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010658:	8882      	ldrh	r2, [r0, #4]
 801065a:	4413      	add	r3, r2
 801065c:	b21b      	sxth	r3, r3
 801065e:	429c      	cmp	r4, r3
 8010660:	da10      	bge.n	8010684 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010662:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010666:	88c9      	ldrh	r1, [r1, #6]
 8010668:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801066c:	4419      	add	r1, r3
 801066e:	b209      	sxth	r1, r1
 8010670:	428a      	cmp	r2, r1
 8010672:	da07      	bge.n	8010684 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010674:	88c0      	ldrh	r0, [r0, #6]
 8010676:	4410      	add	r0, r2
 8010678:	b200      	sxth	r0, r0
 801067a:	4283      	cmp	r3, r0
 801067c:	bfac      	ite	ge
 801067e:	2000      	movge	r0, #0
 8010680:	2001      	movlt	r0, #1
 8010682:	bd10      	pop	{r4, pc}
 8010684:	2000      	movs	r0, #0
 8010686:	e7fc      	b.n	8010682 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08010688 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8010688:	b570      	push	{r4, r5, r6, lr}
 801068a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801068e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010692:	42ac      	cmp	r4, r5
 8010694:	db18      	blt.n	80106c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010696:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801069a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801069e:	429a      	cmp	r2, r3
 80106a0:	db12      	blt.n	80106c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80106a2:	8886      	ldrh	r6, [r0, #4]
 80106a4:	4435      	add	r5, r6
 80106a6:	888e      	ldrh	r6, [r1, #4]
 80106a8:	4434      	add	r4, r6
 80106aa:	b22d      	sxth	r5, r5
 80106ac:	b224      	sxth	r4, r4
 80106ae:	42a5      	cmp	r5, r4
 80106b0:	db0a      	blt.n	80106c8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80106b2:	88c0      	ldrh	r0, [r0, #6]
 80106b4:	4418      	add	r0, r3
 80106b6:	88cb      	ldrh	r3, [r1, #6]
 80106b8:	441a      	add	r2, r3
 80106ba:	b200      	sxth	r0, r0
 80106bc:	b212      	sxth	r2, r2
 80106be:	4290      	cmp	r0, r2
 80106c0:	bfb4      	ite	lt
 80106c2:	2000      	movlt	r0, #0
 80106c4:	2001      	movge	r0, #1
 80106c6:	bd70      	pop	{r4, r5, r6, pc}
 80106c8:	2000      	movs	r0, #0
 80106ca:	e7fc      	b.n	80106c6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080106cc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80106cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ce:	4604      	mov	r4, r0
 80106d0:	4608      	mov	r0, r1
 80106d2:	460d      	mov	r5, r1
 80106d4:	f7fc f973 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 80106d8:	b978      	cbnz	r0, 80106fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80106da:	4620      	mov	r0, r4
 80106dc:	f7fc f96f 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 80106e0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80106e4:	b150      	cbz	r0, 80106fc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80106e6:	8026      	strh	r6, [r4, #0]
 80106e8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80106ec:	8063      	strh	r3, [r4, #2]
 80106ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80106f2:	80a3      	strh	r3, [r4, #4]
 80106f4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80106f8:	80e3      	strh	r3, [r4, #6]
 80106fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fc:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010700:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010704:	42b1      	cmp	r1, r6
 8010706:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801070a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801070e:	460f      	mov	r7, r1
 8010710:	88ed      	ldrh	r5, [r5, #6]
 8010712:	bfa8      	it	ge
 8010714:	4637      	movge	r7, r6
 8010716:	4293      	cmp	r3, r2
 8010718:	4618      	mov	r0, r3
 801071a:	4466      	add	r6, ip
 801071c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010720:	bfa8      	it	ge
 8010722:	4610      	movge	r0, r2
 8010724:	442a      	add	r2, r5
 8010726:	88e5      	ldrh	r5, [r4, #6]
 8010728:	4461      	add	r1, ip
 801072a:	b236      	sxth	r6, r6
 801072c:	8027      	strh	r7, [r4, #0]
 801072e:	442b      	add	r3, r5
 8010730:	b209      	sxth	r1, r1
 8010732:	b212      	sxth	r2, r2
 8010734:	8060      	strh	r0, [r4, #2]
 8010736:	b21b      	sxth	r3, r3
 8010738:	428e      	cmp	r6, r1
 801073a:	bfac      	ite	ge
 801073c:	ebc7 0106 	rsbge	r1, r7, r6
 8010740:	ebc7 0101 	rsblt	r1, r7, r1
 8010744:	429a      	cmp	r2, r3
 8010746:	bfac      	ite	ge
 8010748:	ebc0 0202 	rsbge	r2, r0, r2
 801074c:	ebc0 0203 	rsblt	r2, r0, r3
 8010750:	80a1      	strh	r1, [r4, #4]
 8010752:	80e2      	strh	r2, [r4, #6]
 8010754:	e7d1      	b.n	80106fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08010758 <_ZN8touchgfx11Application11getInstanceEv>:
 8010758:	4b01      	ldr	r3, [pc, #4]	; (8010760 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801075a:	6818      	ldr	r0, [r3, #0]
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	24006cb8 	.word	0x24006cb8

08010764 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010764:	2300      	movs	r3, #0
 8010766:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801076a:	30a8      	adds	r0, #168	; 0xa8
 801076c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8010770:	f802 3b01 	strb.w	r3, [r2], #1
 8010774:	4282      	cmp	r2, r0
 8010776:	d1fb      	bne.n	8010770 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010778:	4770      	bx	lr

0801077a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801077a:	4603      	mov	r3, r0
 801077c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8010780:	2200      	movs	r2, #0
 8010782:	801a      	strh	r2, [r3, #0]
 8010784:	3308      	adds	r3, #8
 8010786:	f823 2c06 	strh.w	r2, [r3, #-6]
 801078a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801078e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010792:	428b      	cmp	r3, r1
 8010794:	d1f5      	bne.n	8010782 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8010796:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801079a:	4770      	bx	lr

0801079c <_ZN8touchgfx11ApplicationC1Ev>:
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	4b1a      	ldr	r3, [pc, #104]	; (8010808 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80107a0:	2500      	movs	r5, #0
 80107a2:	4604      	mov	r4, r0
 80107a4:	30a8      	adds	r0, #168	; 0xa8
 80107a6:	f840 3ca8 	str.w	r3, [r0, #-168]
 80107aa:	f820 5c24 	strh.w	r5, [r0, #-36]
 80107ae:	f7ff ffe4 	bl	801077a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80107b2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80107b6:	f7ff ffe0 	bl	801077a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80107ba:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80107be:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80107c2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80107c6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80107ca:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80107ce:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80107d2:	490e      	ldr	r1, [pc, #56]	; (801080c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80107d4:	480e      	ldr	r0, [pc, #56]	; (8010810 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80107d6:	f00b fb3f 	bl	801be58 <CRC_Lock>
 80107da:	4e0e      	ldr	r6, [pc, #56]	; (8010814 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80107dc:	4b0e      	ldr	r3, [pc, #56]	; (8010818 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80107de:	b158      	cbz	r0, 80107f8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80107e0:	801d      	strh	r5, [r3, #0]
 80107e2:	2300      	movs	r3, #0
 80107e4:	4a0d      	ldr	r2, [pc, #52]	; (801081c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80107e6:	4620      	mov	r0, r4
 80107e8:	6013      	str	r3, [r2, #0]
 80107ea:	4a0d      	ldr	r2, [pc, #52]	; (8010820 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80107ec:	6033      	str	r3, [r6, #0]
 80107ee:	6013      	str	r3, [r2, #0]
 80107f0:	f7ff ffb8 	bl	8010764 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80107f4:	4620      	mov	r0, r4
 80107f6:	bd70      	pop	{r4, r5, r6, pc}
 80107f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80107fc:	2002      	movs	r0, #2
 80107fe:	801a      	strh	r2, [r3, #0]
 8010800:	6030      	str	r0, [r6, #0]
 8010802:	f001 fa23 	bl	8011c4c <_ZN8touchgfx6Screen4drawEv>
 8010806:	e7ec      	b.n	80107e2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8010808:	0801f7a8 	.word	0x0801f7a8
 801080c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010810:	f407a5c2 	.word	0xf407a5c2
 8010814:	24006ca8 	.word	0x24006ca8
 8010818:	24000088 	.word	0x24000088
 801081c:	24006cb8 	.word	0x24006cb8
 8010820:	24006cac 	.word	0x24006cac

08010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010824:	b510      	push	{r4, lr}
 8010826:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801082a:	428b      	cmp	r3, r1
 801082c:	d806      	bhi.n	801083c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801082e:	4b0b      	ldr	r3, [pc, #44]	; (801085c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8010830:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8010834:	4a0a      	ldr	r2, [pc, #40]	; (8010860 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8010836:	480b      	ldr	r0, [pc, #44]	; (8010864 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8010838:	f00b fd50 	bl	801c2dc <__assert_func>
 801083c:	3b01      	subs	r3, #1
 801083e:	b29b      	uxth	r3, r3
 8010840:	428b      	cmp	r3, r1
 8010842:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8010846:	d908      	bls.n	801085a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8010848:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801084c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8010856:	685a      	ldr	r2, [r3, #4]
 8010858:	6062      	str	r2, [r4, #4]
 801085a:	bd10      	pop	{r4, pc}
 801085c:	0801f73a 	.word	0x0801f73a
 8010860:	0801f828 	.word	0x0801f828
 8010864:	0801f748 	.word	0x0801f748

08010868 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8010868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801086a:	466b      	mov	r3, sp
 801086c:	4604      	mov	r4, r0
 801086e:	e883 0006 	stmia.w	r3, {r1, r2}
 8010872:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010876:	2a07      	cmp	r2, #7
 8010878:	d906      	bls.n	8010888 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801087a:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801087c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8010880:	4a08      	ldr	r2, [pc, #32]	; (80108a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010882:	4809      	ldr	r0, [pc, #36]	; (80108a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010884:	f00b fd2a 	bl	801c2dc <__assert_func>
 8010888:	1c51      	adds	r1, r2, #1
 801088a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801088e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010892:	cb03      	ldmia	r3!, {r0, r1}
 8010894:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8010898:	6069      	str	r1, [r5, #4]
 801089a:	b003      	add	sp, #12
 801089c:	bd30      	pop	{r4, r5, pc}
 801089e:	bf00      	nop
 80108a0:	0801f771 	.word	0x0801f771
 80108a4:	0801f8be 	.word	0x0801f8be
 80108a8:	0801f748 	.word	0x0801f748

080108ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80108ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b0:	b08d      	sub	sp, #52	; 0x34
 80108b2:	4683      	mov	fp, r0
 80108b4:	ac08      	add	r4, sp, #32
 80108b6:	4620      	mov	r0, r4
 80108b8:	e884 0006 	stmia.w	r4, {r1, r2}
 80108bc:	f7fc f87f 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d16a      	bne.n	801099a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80108c4:	9402      	str	r4, [sp, #8]
 80108c6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80108ca:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80108ce:	2400      	movs	r4, #0
 80108d0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	36a0      	adds	r6, #160	; 0xa0
 80108d8:	42a5      	cmp	r5, r4
 80108da:	d00d      	beq.n	80108f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80108dc:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80108e0:	9802      	ldr	r0, [sp, #8]
 80108e2:	f7ff fed1 	bl	8010688 <_ZNK8touchgfx4Rect8includesERKS0_>
 80108e6:	b128      	cbz	r0, 80108f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80108e8:	1e69      	subs	r1, r5, #1
 80108ea:	9801      	ldr	r0, [sp, #4]
 80108ec:	1b09      	subs	r1, r1, r4
 80108ee:	b289      	uxth	r1, r1
 80108f0:	f7ff ff98 	bl	8010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80108f4:	3401      	adds	r4, #1
 80108f6:	e7ef      	b.n	80108d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80108f8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80108fc:	1e7b      	subs	r3, r7, #1
 80108fe:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8010902:	9703      	str	r7, [sp, #12]
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	2400      	movs	r4, #0
 8010908:	4655      	mov	r5, sl
 801090a:	9704      	str	r7, [sp, #16]
 801090c:	4626      	mov	r6, r4
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d078      	beq.n	8010a06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8010914:	9902      	ldr	r1, [sp, #8]
 8010916:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801091a:	f7ff fe93 	bl	8010644 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801091e:	b360      	cbz	r0, 801097a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010920:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8010924:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8010928:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801092c:	45e6      	cmp	lr, ip
 801092e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010932:	db35      	blt.n	80109a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010934:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010938:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801093c:	4472      	add	r2, lr
 801093e:	4463      	add	r3, ip
 8010940:	b212      	sxth	r2, r2
 8010942:	b21b      	sxth	r3, r3
 8010944:	429a      	cmp	r2, r3
 8010946:	dc2b      	bgt.n	80109a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8010948:	fa1f f288 	uxth.w	r2, r8
 801094c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010950:	45c1      	cmp	r9, r8
 8010952:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010956:	4413      	add	r3, r2
 8010958:	fa1f fc89 	uxth.w	ip, r9
 801095c:	b29b      	uxth	r3, r3
 801095e:	fa0f fe83 	sxth.w	lr, r3
 8010962:	db0f      	blt.n	8010984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8010964:	eba3 030c 	sub.w	r3, r3, ip
 8010968:	1ac9      	subs	r1, r1, r3
 801096a:	b209      	sxth	r1, r1
 801096c:	2900      	cmp	r1, #0
 801096e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010972:	dd12      	ble.n	801099a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010974:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8010978:	4604      	mov	r4, r0
 801097a:	9b04      	ldr	r3, [sp, #16]
 801097c:	3d08      	subs	r5, #8
 801097e:	3b01      	subs	r3, #1
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	e7c4      	b.n	801090e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8010984:	4461      	add	r1, ip
 8010986:	b209      	sxth	r1, r1
 8010988:	4571      	cmp	r1, lr
 801098a:	dc3a      	bgt.n	8010a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801098c:	eba2 020c 	sub.w	r2, r2, ip
 8010990:	b212      	sxth	r2, r2
 8010992:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010996:	2a00      	cmp	r2, #0
 8010998:	dcee      	bgt.n	8010978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801099a:	b00d      	add	sp, #52	; 0x34
 801099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a0:	45c1      	cmp	r9, r8
 80109a2:	db2e      	blt.n	8010a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80109a4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80109a8:	4499      	add	r9, r3
 80109aa:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80109ae:	4498      	add	r8, r3
 80109b0:	fa0f f989 	sxth.w	r9, r9
 80109b4:	fa0f f888 	sxth.w	r8, r8
 80109b8:	45c1      	cmp	r9, r8
 80109ba:	dc22      	bgt.n	8010a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80109bc:	fa1f f28c 	uxth.w	r2, ip
 80109c0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80109c4:	45e6      	cmp	lr, ip
 80109c6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80109ca:	4413      	add	r3, r2
 80109cc:	fa1f f88e 	uxth.w	r8, lr
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	fa0f f983 	sxth.w	r9, r3
 80109d6:	db0a      	blt.n	80109ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 80109d8:	eba3 0308 	sub.w	r3, r3, r8
 80109dc:	1ac9      	subs	r1, r1, r3
 80109de:	b209      	sxth	r1, r1
 80109e0:	2900      	cmp	r1, #0
 80109e2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80109e6:	ddd8      	ble.n	801099a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80109e8:	f8ad 9020 	strh.w	r9, [sp, #32]
 80109ec:	e7c4      	b.n	8010978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80109ee:	4441      	add	r1, r8
 80109f0:	b209      	sxth	r1, r1
 80109f2:	4549      	cmp	r1, r9
 80109f4:	dc05      	bgt.n	8010a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80109f6:	eba2 0208 	sub.w	r2, r2, r8
 80109fa:	b212      	sxth	r2, r2
 80109fc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010a00:	e7c9      	b.n	8010996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010a02:	4606      	mov	r6, r0
 8010a04:	e7b9      	b.n	801097a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8010a06:	2c00      	cmp	r4, #0
 8010a08:	f47f af7d 	bne.w	8010906 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8010a0c:	2e00      	cmp	r6, #0
 8010a0e:	f000 81dc 	beq.w	8010dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010a12:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8010a16:	4655      	mov	r5, sl
 8010a18:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8010a1c:	b2b9      	uxth	r1, r7
 8010a1e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010a22:	b2b3      	uxth	r3, r6
 8010a24:	9104      	str	r1, [sp, #16]
 8010a26:	9804      	ldr	r0, [sp, #16]
 8010a28:	441a      	add	r2, r3
 8010a2a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010a2e:	b292      	uxth	r2, r2
 8010a30:	4401      	add	r1, r0
 8010a32:	fa0f f882 	sxth.w	r8, r2
 8010a36:	b289      	uxth	r1, r1
 8010a38:	9105      	str	r1, [sp, #20]
 8010a3a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d054      	beq.n	8010af2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8010a48:	9902      	ldr	r1, [sp, #8]
 8010a4a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010a4e:	f7ff fdf9 	bl	8010644 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010a52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a56:	b1d8      	cbz	r0, 8010a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010a58:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010a5c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010a60:	4576      	cmp	r6, lr
 8010a62:	dc26      	bgt.n	8010ab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010a64:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8010a68:	44f4      	add	ip, lr
 8010a6a:	fa0f fc8c 	sxth.w	ip, ip
 8010a6e:	45e0      	cmp	r8, ip
 8010a70:	db1f      	blt.n	8010ab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010a72:	428f      	cmp	r7, r1
 8010a74:	fa1f fc81 	uxth.w	ip, r1
 8010a78:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010a7c:	dc0f      	bgt.n	8010a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010a7e:	9805      	ldr	r0, [sp, #20]
 8010a80:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010a84:	eba0 0c0c 	sub.w	ip, r0, ip
 8010a88:	eba1 010c 	sub.w	r1, r1, ip
 8010a8c:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010a90:	4620      	mov	r0, r4
 8010a92:	9903      	ldr	r1, [sp, #12]
 8010a94:	3d08      	subs	r5, #8
 8010a96:	4604      	mov	r4, r0
 8010a98:	3901      	subs	r1, #1
 8010a9a:	9103      	str	r1, [sp, #12]
 8010a9c:	e7cf      	b.n	8010a3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8010a9e:	4461      	add	r1, ip
 8010aa0:	b209      	sxth	r1, r1
 8010aa2:	4549      	cmp	r1, r9
 8010aa4:	dcf5      	bgt.n	8010a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010aa6:	9904      	ldr	r1, [sp, #16]
 8010aa8:	eba1 0c0c 	sub.w	ip, r1, ip
 8010aac:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010ab0:	e7ee      	b.n	8010a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ab2:	428f      	cmp	r7, r1
 8010ab4:	dced      	bgt.n	8010a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010ab6:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8010aba:	4461      	add	r1, ip
 8010abc:	b209      	sxth	r1, r1
 8010abe:	4589      	cmp	r9, r1
 8010ac0:	dbe7      	blt.n	8010a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010ac2:	4576      	cmp	r6, lr
 8010ac4:	fa1f fc8e 	uxth.w	ip, lr
 8010ac8:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010acc:	dc08      	bgt.n	8010ae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8010ace:	eba2 0c0c 	sub.w	ip, r2, ip
 8010ad2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8010ad6:	eba1 010c 	sub.w	r1, r1, ip
 8010ada:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8010ade:	e7d7      	b.n	8010a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010ae0:	4461      	add	r1, ip
 8010ae2:	b209      	sxth	r1, r1
 8010ae4:	4588      	cmp	r8, r1
 8010ae6:	dbd4      	blt.n	8010a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010ae8:	eba3 0c0c 	sub.w	ip, r3, ip
 8010aec:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010af0:	e7ce      	b.n	8010a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010af2:	2c00      	cmp	r4, #0
 8010af4:	f000 8169 	beq.w	8010dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010af8:	9b00      	ldr	r3, [sp, #0]
 8010afa:	3301      	adds	r3, #1
 8010afc:	f000 8165 	beq.w	8010dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8010b00:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010b04:	9802      	ldr	r0, [sp, #8]
 8010b06:	4621      	mov	r1, r4
 8010b08:	f7ff fdbe 	bl	8010688 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010b0c:	b120      	cbz	r0, 8010b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8010b0e:	f8bd 1000 	ldrh.w	r1, [sp]
 8010b12:	9801      	ldr	r0, [sp, #4]
 8010b14:	f7ff fe86 	bl	8010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010b18:	9902      	ldr	r1, [sp, #8]
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f7ff fd92 	bl	8010644 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	f000 809b 	beq.w	8010c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8010b26:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8010b2a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8010b2e:	fa1f f288 	uxth.w	r2, r8
 8010b32:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8010b36:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8010b3a:	19d5      	adds	r5, r2, r7
 8010b3c:	b2a1      	uxth	r1, r4
 8010b3e:	45a0      	cmp	r8, r4
 8010b40:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010b44:	fa1f f985 	uxth.w	r9, r5
 8010b48:	440b      	add	r3, r1
 8010b4a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8010b4e:	fa0f f589 	sxth.w	r5, r9
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	9503      	str	r5, [sp, #12]
 8010b56:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010b5a:	9507      	str	r5, [sp, #28]
 8010b5c:	f340 809d 	ble.w	8010c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8010b60:	1a52      	subs	r2, r2, r1
 8010b62:	4584      	cmp	ip, r0
 8010b64:	fa0f fe83 	sxth.w	lr, r3
 8010b68:	b292      	uxth	r2, r2
 8010b6a:	b215      	sxth	r5, r2
 8010b6c:	dd2f      	ble.n	8010bce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8010b6e:	9e00      	ldr	r6, [sp, #0]
 8010b70:	fa1f fc8c 	uxth.w	ip, ip
 8010b74:	b280      	uxth	r0, r0
 8010b76:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8010b7a:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8010b7e:	9e03      	ldr	r6, [sp, #12]
 8010b80:	ebac 0300 	sub.w	r3, ip, r0
 8010b84:	448c      	add	ip, r1
 8010b86:	eba6 060e 	sub.w	r6, r6, lr
 8010b8a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	4470      	add	r0, lr
 8010b92:	fa0f fc8c 	sxth.w	ip, ip
 8010b96:	b21c      	sxth	r4, r3
 8010b98:	b200      	sxth	r0, r0
 8010b9a:	4366      	muls	r6, r4
 8010b9c:	ebac 0000 	sub.w	r0, ip, r0
 8010ba0:	4368      	muls	r0, r5
 8010ba2:	4286      	cmp	r6, r0
 8010ba4:	db09      	blt.n	8010bba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8010ba6:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8010baa:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010bae:	4417      	add	r7, r2
 8010bb0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010bb4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010bb8:	e685      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010bba:	440b      	add	r3, r1
 8010bbc:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8010bc0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010bc4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8010bc8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010bcc:	e67b      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010bce:	9e03      	ldr	r6, [sp, #12]
 8010bd0:	45b6      	cmp	lr, r6
 8010bd2:	da28      	bge.n	8010c26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8010bd4:	9b00      	ldr	r3, [sp, #0]
 8010bd6:	eba6 060e 	sub.w	r6, r6, lr
 8010bda:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8010bde:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8010be2:	eb04 030c 	add.w	r3, r4, ip
 8010be6:	fa1f f883 	uxth.w	r8, r3
 8010bea:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8010bee:	4403      	add	r3, r0
 8010bf0:	fa0f f988 	sxth.w	r9, r8
 8010bf4:	eba0 000c 	sub.w	r0, r0, ip
 8010bf8:	eba3 0308 	sub.w	r3, r3, r8
 8010bfc:	4368      	muls	r0, r5
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	fa0f f883 	sxth.w	r8, r3
 8010c04:	fb08 f606 	mul.w	r6, r8, r6
 8010c08:	42b0      	cmp	r0, r6
 8010c0a:	dc06      	bgt.n	8010c1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8010c0c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8010c10:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8010c14:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8010c18:	e7c9      	b.n	8010bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8010c1a:	4423      	add	r3, r4
 8010c1c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8010c20:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010c24:	e64f      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c26:	eba3 0309 	sub.w	r3, r3, r9
 8010c2a:	9807      	ldr	r0, [sp, #28]
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	2806      	cmp	r0, #6
 8010c30:	fa0f fc83 	sxth.w	ip, r3
 8010c34:	d818      	bhi.n	8010c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8010c36:	4652      	mov	r2, sl
 8010c38:	ab0a      	add	r3, sp, #40	; 0x28
 8010c3a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8010c3e:	6851      	ldr	r1, [r2, #4]
 8010c40:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010c44:	c303      	stmia	r3!, {r0, r1}
 8010c46:	9b03      	ldr	r3, [sp, #12]
 8010c48:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8010c4c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010c50:	ab0a      	add	r3, sp, #40	; 0x28
 8010c52:	9801      	ldr	r0, [sp, #4]
 8010c54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010c58:	f7ff fe06 	bl	8010868 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010c5c:	9b00      	ldr	r3, [sp, #0]
 8010c5e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010c62:	3b01      	subs	r3, #1
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	e747      	b.n	8010af8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8010c68:	9800      	ldr	r0, [sp, #0]
 8010c6a:	45ac      	cmp	ip, r5
 8010c6c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010c70:	db0c      	blt.n	8010c8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8010c72:	4417      	add	r7, r2
 8010c74:	4458      	add	r0, fp
 8010c76:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010c7a:	b2bf      	uxth	r7, r7
 8010c7c:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8010c80:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010c84:	440f      	add	r7, r1
 8010c86:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8010c8a:	e61c      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c8c:	4458      	add	r0, fp
 8010c8e:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8010c92:	443b      	add	r3, r7
 8010c94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010c98:	e615      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010c9a:	fa1f f18c 	uxth.w	r1, ip
 8010c9e:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8010ca2:	b282      	uxth	r2, r0
 8010ca4:	4584      	cmp	ip, r0
 8010ca6:	eb01 0e05 	add.w	lr, r1, r5
 8010caa:	9204      	str	r2, [sp, #16]
 8010cac:	fa1f fe8e 	uxth.w	lr, lr
 8010cb0:	9e04      	ldr	r6, [sp, #16]
 8010cb2:	fa0f f28e 	sxth.w	r2, lr
 8010cb6:	9205      	str	r2, [sp, #20]
 8010cb8:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8010cbc:	4432      	add	r2, r6
 8010cbe:	b292      	uxth	r2, r2
 8010cc0:	9206      	str	r2, [sp, #24]
 8010cc2:	da26      	bge.n	8010d12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8010cc4:	eba3 0309 	sub.w	r3, r3, r9
 8010cc8:	eba2 020e 	sub.w	r2, r2, lr
 8010ccc:	eba0 000c 	sub.w	r0, r0, ip
 8010cd0:	eba4 0408 	sub.w	r4, r4, r8
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	b292      	uxth	r2, r2
 8010cd8:	fa0f fa83 	sxth.w	sl, r3
 8010cdc:	b211      	sxth	r1, r2
 8010cde:	fb0a f000 	mul.w	r0, sl, r0
 8010ce2:	434c      	muls	r4, r1
 8010ce4:	42a0      	cmp	r0, r4
 8010ce6:	9800      	ldr	r0, [sp, #0]
 8010ce8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010cec:	dc06      	bgt.n	8010cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8010cee:	4458      	add	r0, fp
 8010cf0:	9a05      	ldr	r2, [sp, #20]
 8010cf2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8010cf6:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8010cfa:	e7ca      	b.n	8010c92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010cfc:	eb0b 0300 	add.w	r3, fp, r0
 8010d00:	9903      	ldr	r1, [sp, #12]
 8010d02:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8010d06:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8010d0a:	442a      	add	r2, r5
 8010d0c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8010d10:	e5d9      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010d12:	9e04      	ldr	r6, [sp, #16]
 8010d14:	9a03      	ldr	r2, [sp, #12]
 8010d16:	1b89      	subs	r1, r1, r6
 8010d18:	b21e      	sxth	r6, r3
 8010d1a:	b289      	uxth	r1, r1
 8010d1c:	4296      	cmp	r6, r2
 8010d1e:	fa0f fc81 	sxth.w	ip, r1
 8010d22:	dd25      	ble.n	8010d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8010d24:	eba3 0309 	sub.w	r3, r3, r9
 8010d28:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010d2c:	9e05      	ldr	r6, [sp, #20]
 8010d2e:	eba4 0408 	sub.w	r4, r4, r8
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	eba6 0902 	sub.w	r9, r6, r2
 8010d38:	fb0c f404 	mul.w	r4, ip, r4
 8010d3c:	b218      	sxth	r0, r3
 8010d3e:	9a00      	ldr	r2, [sp, #0]
 8010d40:	fb00 f909 	mul.w	r9, r0, r9
 8010d44:	00d2      	lsls	r2, r2, #3
 8010d46:	454c      	cmp	r4, r9
 8010d48:	db03      	blt.n	8010d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8010d4a:	445a      	add	r2, fp
 8010d4c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010d50:	e79f      	b.n	8010c92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010d52:	eb0b 0302 	add.w	r3, fp, r2
 8010d56:	9a03      	ldr	r2, [sp, #12]
 8010d58:	4429      	add	r1, r5
 8010d5a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010d5e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010d62:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010d66:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010d6a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010d6e:	e5aa      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010d70:	9b06      	ldr	r3, [sp, #24]
 8010d72:	9c07      	ldr	r4, [sp, #28]
 8010d74:	eba3 020e 	sub.w	r2, r3, lr
 8010d78:	2c06      	cmp	r4, #6
 8010d7a:	b292      	uxth	r2, r2
 8010d7c:	b213      	sxth	r3, r2
 8010d7e:	d80d      	bhi.n	8010d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8010d80:	4651      	mov	r1, sl
 8010d82:	aa0a      	add	r2, sp, #40	; 0x28
 8010d84:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8010d88:	6849      	ldr	r1, [r1, #4]
 8010d8a:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010d8e:	9b05      	ldr	r3, [sp, #20]
 8010d90:	c203      	stmia	r2!, {r0, r1}
 8010d92:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010d96:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8010d9a:	e759      	b.n	8010c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8010d9c:	9c00      	ldr	r4, [sp, #0]
 8010d9e:	4563      	cmp	r3, ip
 8010da0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010da4:	db0d      	blt.n	8010dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8010da6:	4429      	add	r1, r5
 8010da8:	9a04      	ldr	r2, [sp, #16]
 8010daa:	445c      	add	r4, fp
 8010dac:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010db0:	b289      	uxth	r1, r1
 8010db2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8010db6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010dba:	4411      	add	r1, r2
 8010dbc:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010dc0:	e581      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010dc2:	445c      	add	r4, fp
 8010dc4:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8010dc8:	e79f      	b.n	8010d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8010dca:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010dce:	2f07      	cmp	r7, #7
 8010dd0:	d806      	bhi.n	8010de0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8010dd2:	ab08      	add	r3, sp, #32
 8010dd4:	9801      	ldr	r0, [sp, #4]
 8010dd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010dda:	f7ff fd45 	bl	8010868 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010dde:	e5dc      	b.n	801099a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010de0:	f107 39ff 	add.w	r9, r7, #4294967295
 8010de4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010de8:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8010dec:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010df0:	f04f 35ff 	mov.w	r5, #4294967295
 8010df4:	2400      	movs	r4, #0
 8010df6:	9304      	str	r3, [sp, #16]
 8010df8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8010dfc:	f109 32ff 	add.w	r2, r9, #4294967295
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	4690      	mov	r8, r2
 8010e04:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8010e08:	9303      	str	r3, [sp, #12]
 8010e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e0e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010e18:	9206      	str	r2, [sp, #24]
 8010e1a:	bf16      	itet	ne
 8010e1c:	9904      	ldrne	r1, [sp, #16]
 8010e1e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8010e22:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8010e26:	9305      	str	r3, [sp, #20]
 8010e28:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010e2c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8010e30:	fb16 f601 	smulbb	r6, r6, r1
 8010e34:	6859      	ldr	r1, [r3, #4]
 8010e36:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010e3a:	4671      	mov	r1, lr
 8010e3c:	a80a      	add	r0, sp, #40	; 0x28
 8010e3e:	f7ff fc45 	bl	80106cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e42:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8010e46:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	9a00      	ldr	r2, [sp, #0]
 8010e4e:	fb11 f100 	smulbb	r1, r1, r0
 8010e52:	2008      	movs	r0, #8
 8010e54:	fb02 6603 	mla	r6, r2, r3, r6
 8010e58:	1b8e      	subs	r6, r1, r6
 8010e5a:	fb91 f1f0 	sdiv	r1, r1, r0
 8010e5e:	42b1      	cmp	r1, r6
 8010e60:	dc21      	bgt.n	8010ea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010e62:	4556      	cmp	r6, sl
 8010e64:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8010e68:	da03      	bge.n	8010e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8010e6a:	b1e6      	cbz	r6, 8010ea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010e6c:	46b2      	mov	sl, r6
 8010e6e:	4645      	mov	r5, r8
 8010e70:	464c      	mov	r4, r9
 8010e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e76:	f118 0f02 	cmn.w	r8, #2
 8010e7a:	d1c8      	bne.n	8010e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8010e7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e80:	f1a7 0708 	sub.w	r7, r7, #8
 8010e84:	4691      	mov	r9, r2
 8010e86:	d1b7      	bne.n	8010df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8010e88:	9b01      	ldr	r3, [sp, #4]
 8010e8a:	b2a6      	uxth	r6, r4
 8010e8c:	00e4      	lsls	r4, r4, #3
 8010e8e:	1918      	adds	r0, r3, r4
 8010e90:	1c6b      	adds	r3, r5, #1
 8010e92:	d10b      	bne.n	8010eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8010e94:	4601      	mov	r1, r0
 8010e96:	9802      	ldr	r0, [sp, #8]
 8010e98:	f7ff fc18 	bl	80106cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010e9c:	4631      	mov	r1, r6
 8010e9e:	9801      	ldr	r0, [sp, #4]
 8010ea0:	f7ff fcc0 	bl	8010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010ea4:	e50f      	b.n	80108c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010ea6:	4645      	mov	r5, r8
 8010ea8:	464c      	mov	r4, r9
 8010eaa:	e7ed      	b.n	8010e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8010eac:	9b01      	ldr	r3, [sp, #4]
 8010eae:	00ed      	lsls	r5, r5, #3
 8010eb0:	445c      	add	r4, fp
 8010eb2:	1959      	adds	r1, r3, r5
 8010eb4:	445d      	add	r5, fp
 8010eb6:	f7ff fc09 	bl	80106cc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010eba:	9b02      	ldr	r3, [sp, #8]
 8010ebc:	cb03      	ldmia	r3!, {r0, r1}
 8010ebe:	9b02      	ldr	r3, [sp, #8]
 8010ec0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8010ec4:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8010ec8:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8010ecc:	6861      	ldr	r1, [r4, #4]
 8010ece:	c303      	stmia	r3!, {r0, r1}
 8010ed0:	e7e4      	b.n	8010e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08010ed4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8010ed4:	4b1d      	ldr	r3, [pc, #116]	; (8010f4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8010ed6:	b530      	push	{r4, r5, lr}
 8010ed8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010edc:	b085      	sub	sp, #20
 8010ede:	4b1c      	ldr	r3, [pc, #112]	; (8010f50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010eea:	6820      	ldr	r0, [r4, #0]
 8010eec:	9100      	str	r1, [sp, #0]
 8010eee:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010ef2:	ab02      	add	r3, sp, #8
 8010ef4:	6861      	ldr	r1, [r4, #4]
 8010ef6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010efa:	c303      	stmia	r3!, {r0, r1}
 8010efc:	4669      	mov	r1, sp
 8010efe:	a802      	add	r0, sp, #8
 8010f00:	f7fb fd1a 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 8010f04:	ab02      	add	r3, sp, #8
 8010f06:	cb03      	ldmia	r3!, {r0, r1}
 8010f08:	4b12      	ldr	r3, [pc, #72]	; (8010f54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8010f0a:	6020      	str	r0, [r4, #0]
 8010f0c:	6818      	ldr	r0, [r3, #0]
 8010f0e:	6061      	str	r1, [r4, #4]
 8010f10:	b138      	cbz	r0, 8010f22 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010f12:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8010f16:	b133      	cbz	r3, 8010f26 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8010f18:	6821      	ldr	r1, [r4, #0]
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	6862      	ldr	r2, [r4, #4]
 8010f1e:	f7ff fcc5 	bl	80108ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010f22:	b005      	add	sp, #20
 8010f24:	bd30      	pop	{r4, r5, pc}
 8010f26:	6803      	ldr	r3, [r0, #0]
 8010f28:	4621      	mov	r1, r4
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	4798      	blx	r3
 8010f2e:	4b0a      	ldr	r3, [pc, #40]	; (8010f58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8010f30:	6818      	ldr	r0, [r3, #0]
 8010f32:	b118      	cbz	r0, 8010f3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8010f34:	6803      	ldr	r3, [r0, #0]
 8010f36:	4621      	mov	r1, r4
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	4798      	blx	r3
 8010f3c:	4b07      	ldr	r3, [pc, #28]	; (8010f5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8010f3e:	4621      	mov	r1, r4
 8010f40:	6818      	ldr	r0, [r3, #0]
 8010f42:	6803      	ldr	r3, [r0, #0]
 8010f44:	69db      	ldr	r3, [r3, #28]
 8010f46:	4798      	blx	r3
 8010f48:	e7eb      	b.n	8010f22 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010f4a:	bf00      	nop
 8010f4c:	24006c60 	.word	0x24006c60
 8010f50:	24006c62 	.word	0x24006c62
 8010f54:	24006ca8 	.word	0x24006ca8
 8010f58:	24006ca4 	.word	0x24006ca4
 8010f5c:	24006c6c 	.word	0x24006c6c

08010f60 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	4604      	mov	r4, r0
 8010f66:	b09b      	sub	sp, #108	; 0x6c
 8010f68:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8010f6c:	b129      	cbz	r1, 8010f7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010f74:	b01b      	add	sp, #108	; 0x6c
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f7fb fd1d 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f84:	4605      	mov	r5, r0
 8010f86:	b940      	cbnz	r0, 8010f9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8010f88:	4620      	mov	r0, r4
 8010f8a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010f8e:	f7ff fc8d 	bl	80108ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010f92:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8010f96:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8010f9a:	4ba6      	ldr	r3, [pc, #664]	; (8011234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	b33b      	cbz	r3, 8010ff0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010fa0:	4da5      	ldr	r5, [pc, #660]	; (8011238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f7fb fd0b 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 8010fa8:	4606      	mov	r6, r0
 8010faa:	bb08      	cbnz	r0, 8010ff0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010fac:	4628      	mov	r0, r5
 8010fae:	f7ff f9d3 	bl	8010358 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010fb2:	6829      	ldr	r1, [r5, #0]
 8010fb4:	686a      	ldr	r2, [r5, #4]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f7ff fc78 	bl	80108ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010fbc:	802e      	strh	r6, [r5, #0]
 8010fbe:	806e      	strh	r6, [r5, #2]
 8010fc0:	80ae      	strh	r6, [r5, #4]
 8010fc2:	80ee      	strh	r6, [r5, #6]
 8010fc4:	4f9d      	ldr	r7, [pc, #628]	; (801123c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8010fc6:	a809      	add	r0, sp, #36	; 0x24
 8010fc8:	f7ff fbd7 	bl	801077a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010fcc:	883d      	ldrh	r5, [r7, #0]
 8010fce:	462e      	mov	r6, r5
 8010fd0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010fd4:	42b3      	cmp	r3, r6
 8010fd6:	d910      	bls.n	8010ffa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8010fd8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010fdc:	3601      	adds	r6, #1
 8010fde:	a809      	add	r0, sp, #36	; 0x24
 8010fe0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8010fe4:	b2b6      	uxth	r6, r6
 8010fe6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8010fea:	f7ff fc3d 	bl	8010868 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010fee:	e7ef      	b.n	8010fd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8010ff0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d1e5      	bne.n	8010fc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8010ff8:	e7bc      	b.n	8010f74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8010ffa:	462e      	mov	r6, r5
 8010ffc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8011000:	42b3      	cmp	r3, r6
 8011002:	d90b      	bls.n	801101c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8011004:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011008:	3601      	adds	r6, #1
 801100a:	4620      	mov	r0, r4
 801100c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8011010:	b2b6      	uxth	r6, r6
 8011012:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8011016:	f7ff fc49 	bl	80108ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801101a:	e7ef      	b.n	8010ffc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801101c:	4a88      	ldr	r2, [pc, #544]	; (8011240 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801101e:	6813      	ldr	r3, [r2, #0]
 8011020:	4690      	mov	r8, r2
 8011022:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011026:	2b01      	cmp	r3, #1
 8011028:	f040 8094 	bne.w	8011154 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801102c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8011030:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8011034:	f04f 0900 	mov.w	r9, #0
 8011038:	33aa      	adds	r3, #170	; 0xaa
 801103a:	42a8      	cmp	r0, r5
 801103c:	f103 0308 	add.w	r3, r3, #8
 8011040:	dd0a      	ble.n	8011058 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8011042:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011046:	3501      	adds	r5, #1
 8011048:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801104c:	440a      	add	r2, r1
 801104e:	b212      	sxth	r2, r2
 8011050:	4591      	cmp	r9, r2
 8011052:	bfb8      	it	lt
 8011054:	4691      	movlt	r9, r2
 8011056:	e7f0      	b.n	801103a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8011058:	4b7a      	ldr	r3, [pc, #488]	; (8011244 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801105a:	4e7b      	ldr	r6, [pc, #492]	; (8011248 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801105c:	881d      	ldrh	r5, [r3, #0]
 801105e:	2300      	movs	r3, #0
 8011060:	2d0f      	cmp	r5, #15
 8011062:	bf8c      	ite	hi
 8011064:	08ed      	lsrhi	r5, r5, #3
 8011066:	2501      	movls	r5, #1
 8011068:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801106c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011070:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8011074:	f8d8 0000 	ldr.w	r0, [r8]
 8011078:	440b      	add	r3, r1
 801107a:	6802      	ldr	r2, [r0, #0]
 801107c:	b21b      	sxth	r3, r3
 801107e:	4599      	cmp	r9, r3
 8011080:	dd4b      	ble.n	801111a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8011082:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8011086:	4798      	blx	r3
 8011088:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801108c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011090:	4413      	add	r3, r2
 8011092:	b21b      	sxth	r3, r3
 8011094:	195a      	adds	r2, r3, r5
 8011096:	4290      	cmp	r0, r2
 8011098:	da07      	bge.n	80110aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801109a:	4581      	cmp	r9, r0
 801109c:	dd05      	ble.n	80110aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801109e:	4298      	cmp	r0, r3
 80110a0:	da33      	bge.n	801110a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	dd31      	ble.n	801110a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80110a6:	4648      	mov	r0, r9
 80110a8:	e004      	b.n	80110b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80110aa:	4298      	cmp	r0, r3
 80110ac:	dbfb      	blt.n	80110a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80110ae:	4548      	cmp	r0, r9
 80110b0:	bfa8      	it	ge
 80110b2:	4648      	movge	r0, r9
 80110b4:	f9b6 2000 	ldrsh.w	r2, [r6]
 80110b8:	2100      	movs	r1, #0
 80110ba:	1ac0      	subs	r0, r0, r3
 80110bc:	f8b7 a000 	ldrh.w	sl, [r7]
 80110c0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80110c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80110c8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80110cc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80110d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80110d4:	4553      	cmp	r3, sl
 80110d6:	d9c9      	bls.n	801106c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80110d8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80110dc:	ab07      	add	r3, sp, #28
 80110de:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80110e2:	6851      	ldr	r1, [r2, #4]
 80110e4:	c303      	stmia	r3!, {r0, r1}
 80110e6:	a807      	add	r0, sp, #28
 80110e8:	a905      	add	r1, sp, #20
 80110ea:	f7fb fc25 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 80110ee:	a807      	add	r0, sp, #28
 80110f0:	f7fb fc65 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 80110f4:	b920      	cbnz	r0, 8011100 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	a907      	add	r1, sp, #28
 80110fa:	4620      	mov	r0, r4
 80110fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fe:	4798      	blx	r3
 8011100:	f10a 0a01 	add.w	sl, sl, #1
 8011104:	fa1f fa8a 	uxth.w	sl, sl
 8011108:	e7e2      	b.n	80110d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801110a:	f8d8 0000 	ldr.w	r0, [r8]
 801110e:	2101      	movs	r1, #1
 8011110:	6803      	ldr	r3, [r0, #0]
 8011112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011116:	4798      	blx	r3
 8011118:	e7a8      	b.n	801106c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801111a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801111c:	4798      	blx	r3
 801111e:	4b4b      	ldr	r3, [pc, #300]	; (801124c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	f43f af26 	beq.w	8010f74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011128:	2300      	movs	r3, #0
 801112a:	883d      	ldrh	r5, [r7, #0]
 801112c:	34ea      	adds	r4, #234	; 0xea
 801112e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8011132:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8011136:	42ab      	cmp	r3, r5
 8011138:	f67f af1c 	bls.w	8010f74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801113c:	ab1a      	add	r3, sp, #104	; 0x68
 801113e:	4620      	mov	r0, r4
 8011140:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011144:	3501      	adds	r5, #1
 8011146:	3b44      	subs	r3, #68	; 0x44
 8011148:	b2ad      	uxth	r5, r5
 801114a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801114e:	f7ff fb8b 	bl	8010868 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011152:	e7ee      	b.n	8011132 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8011154:	2b02      	cmp	r3, #2
 8011156:	f040 813d 	bne.w	80113d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801115a:	4b3d      	ldr	r3, [pc, #244]	; (8011250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d02c      	beq.n	80111bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8011162:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8011166:	883a      	ldrh	r2, [r7, #0]
 8011168:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801116c:	3201      	adds	r2, #1
 801116e:	b292      	uxth	r2, r2
 8011170:	2900      	cmp	r1, #0
 8011172:	d0d4      	beq.n	801111e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8011174:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8011178:	4610      	mov	r0, r2
 801117a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801117e:	f04f 0a00 	mov.w	sl, #0
 8011182:	441d      	add	r5, r3
 8011184:	b22d      	sxth	r5, r5
 8011186:	b283      	uxth	r3, r0
 8011188:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801118c:	4299      	cmp	r1, r3
 801118e:	f240 80c3 	bls.w	8011318 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8011192:	4426      	add	r6, r4
 8011194:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8011198:	4684      	mov	ip, r0
 801119a:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801119e:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80111a2:	4573      	cmp	r3, lr
 80111a4:	f340 80a5 	ble.w	80112f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80111a8:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80111ac:	4475      	add	r5, lr
 80111ae:	b22d      	sxth	r5, r5
 80111b0:	429d      	cmp	r5, r3
 80111b2:	bfa8      	it	ge
 80111b4:	461d      	movge	r5, r3
 80111b6:	3001      	adds	r0, #1
 80111b8:	46e2      	mov	sl, ip
 80111ba:	e7e4      	b.n	8011186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 80111bc:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80111c0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80111c4:	f1bb 0f00 	cmp.w	fp, #0
 80111c8:	d0a9      	beq.n	801111e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80111ca:	883b      	ldrh	r3, [r7, #0]
 80111cc:	2600      	movs	r6, #0
 80111ce:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80111d2:	3301      	adds	r3, #1
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	b299      	uxth	r1, r3
 80111d8:	00f5      	lsls	r5, r6, #3
 80111da:	458b      	cmp	fp, r1
 80111dc:	d93a      	bls.n	8011254 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80111de:	4425      	add	r5, r4
 80111e0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80111e4:	469c      	mov	ip, r3
 80111e6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80111ea:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80111ee:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80111f2:	4408      	add	r0, r1
 80111f4:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80111f8:	4471      	add	r1, lr
 80111fa:	b200      	sxth	r0, r0
 80111fc:	b209      	sxth	r1, r1
 80111fe:	4288      	cmp	r0, r1
 8011200:	da06      	bge.n	8011210 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8011202:	4586      	cmp	lr, r0
 8011204:	4672      	mov	r2, lr
 8011206:	bfb8      	it	lt
 8011208:	4602      	movlt	r2, r0
 801120a:	3301      	adds	r3, #1
 801120c:	4666      	mov	r6, ip
 801120e:	e7e2      	b.n	80111d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8011210:	d10b      	bne.n	801122a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8011212:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8011216:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801121a:	458c      	cmp	ip, r1
 801121c:	bfb4      	ite	lt
 801121e:	469c      	movlt	ip, r3
 8011220:	46b4      	movge	ip, r6
 8011222:	4572      	cmp	r2, lr
 8011224:	bfb8      	it	lt
 8011226:	4672      	movlt	r2, lr
 8011228:	e7ef      	b.n	801120a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801122a:	428a      	cmp	r2, r1
 801122c:	46b4      	mov	ip, r6
 801122e:	bfb8      	it	lt
 8011230:	460a      	movlt	r2, r1
 8011232:	e7ea      	b.n	801120a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8011234:	24006ca4 	.word	0x24006ca4
 8011238:	24006cb0 	.word	0x24006cb0
 801123c:	24000088 	.word	0x24000088
 8011240:	24006c6c 	.word	0x24006c6c
 8011244:	24006c62 	.word	0x24006c62
 8011248:	24006c60 	.word	0x24006c60
 801124c:	24006c6a 	.word	0x24006c6a
 8011250:	24006c64 	.word	0x24006c64
 8011254:	1961      	adds	r1, r4, r5
 8011256:	ab07      	add	r3, sp, #28
 8011258:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801125c:	6849      	ldr	r1, [r1, #4]
 801125e:	c303      	stmia	r3!, {r0, r1}
 8011260:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011264:	a807      	add	r0, sp, #28
 8011266:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801126a:	2b13      	cmp	r3, #19
 801126c:	440b      	add	r3, r1
 801126e:	bfd8      	it	le
 8011270:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8011274:	1a9b      	subs	r3, r3, r2
 8011276:	f8ad 201c 	strh.w	r2, [sp, #28]
 801127a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801127e:	f7ff f885 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011282:	a807      	add	r0, sp, #28
 8011284:	f7fb fb9b 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 8011288:	2800      	cmp	r0, #0
 801128a:	d199      	bne.n	80111c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801128c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8011290:	4425      	add	r5, r4
 8011292:	f8d8 0000 	ldr.w	r0, [r8]
 8011296:	f1bc 0f14 	cmp.w	ip, #20
 801129a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801129e:	f8d0 e000 	ldr.w	lr, [r0]
 80112a2:	bfa8      	it	ge
 80112a4:	f04f 0c14 	movge.w	ip, #20
 80112a8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80112ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80112b0:	fa1f fc8c 	uxth.w	ip, ip
 80112b4:	f8cd c000 	str.w	ip, [sp]
 80112b8:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 80112bc:	47d0      	blx	sl
 80112be:	4682      	mov	sl, r0
 80112c0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80112c4:	a807      	add	r0, sp, #28
 80112c6:	f7ff f847 	bl	8010358 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	4620      	mov	r0, r4
 80112ce:	a907      	add	r1, sp, #28
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	4798      	blx	r3
 80112d4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80112d8:	eba0 000a 	sub.w	r0, r0, sl
 80112dc:	b200      	sxth	r0, r0
 80112de:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80112e2:	2800      	cmp	r0, #0
 80112e4:	f47f af6c 	bne.w	80111c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80112e8:	b2b1      	uxth	r1, r6
 80112ea:	4648      	mov	r0, r9
 80112ec:	f7ff fa9a 	bl	8010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80112f0:	e766      	b.n	80111c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80112f2:	d10c      	bne.n	801130e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80112f4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80112f8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80112fc:	45b4      	cmp	ip, r6
 80112fe:	bfb4      	ite	lt
 8011300:	4684      	movlt	ip, r0
 8011302:	46d4      	movge	ip, sl
 8011304:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8011308:	4433      	add	r3, r6
 801130a:	b21b      	sxth	r3, r3
 801130c:	e750      	b.n	80111b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801130e:	4575      	cmp	r5, lr
 8011310:	46d4      	mov	ip, sl
 8011312:	bfa8      	it	ge
 8011314:	4675      	movge	r5, lr
 8011316:	e74e      	b.n	80111b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8011318:	eb0b 0006 	add.w	r0, fp, r6
 801131c:	4426      	add	r6, r4
 801131e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8011322:	f1b9 0f13 	cmp.w	r9, #19
 8011326:	bfdc      	itt	le
 8011328:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801132c:	444d      	addle	r5, r9
 801132e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011332:	bfd8      	it	le
 8011334:	b22d      	sxthle	r5, r5
 8011336:	f7fb fb42 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 801133a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801133e:	2800      	cmp	r0, #0
 8011340:	f47f af16 	bne.w	8011170 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8011344:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8011348:	fa1f f989 	uxth.w	r9, r9
 801134c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011350:	eba5 050c 	sub.w	r5, r5, ip
 8011354:	fa1f f28c 	uxth.w	r2, ip
 8011358:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801135c:	eb02 0009 	add.w	r0, r2, r9
 8011360:	2d14      	cmp	r5, #20
 8011362:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8011366:	bfa8      	it	ge
 8011368:	2514      	movge	r5, #20
 801136a:	b200      	sxth	r0, r0
 801136c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011370:	b289      	uxth	r1, r1
 8011372:	fa1f fe85 	uxth.w	lr, r5
 8011376:	eba0 000c 	sub.w	r0, r0, ip
 801137a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801137e:	4586      	cmp	lr, r0
 8011380:	f8d8 0000 	ldr.w	r0, [r8]
 8011384:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011388:	b29b      	uxth	r3, r3
 801138a:	bfb8      	it	lt
 801138c:	46f1      	movlt	r9, lr
 801138e:	6805      	ldr	r5, [r0, #0]
 8011390:	f8cd 9000 	str.w	r9, [sp]
 8011394:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8011398:	47a8      	blx	r5
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80113a0:	a907      	add	r1, sp, #28
 80113a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a4:	4620      	mov	r0, r4
 80113a6:	4798      	blx	r3
 80113a8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80113ac:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80113b0:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80113b4:	1a5b      	subs	r3, r3, r1
 80113b6:	440a      	add	r2, r1
 80113b8:	b21b      	sxth	r3, r3
 80113ba:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80113be:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f47f aecf 	bne.w	8011166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80113c8:	fa1f f18a 	uxth.w	r1, sl
 80113cc:	4658      	mov	r0, fp
 80113ce:	f7ff fa29 	bl	8010824 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80113d2:	e6c8      	b.n	8011166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80113d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80113d8:	42ab      	cmp	r3, r5
 80113da:	f67f aea0 	bls.w	801111e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80113de:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80113e2:	ab07      	add	r3, sp, #28
 80113e4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80113e8:	6851      	ldr	r1, [r2, #4]
 80113ea:	c303      	stmia	r3!, {r0, r1}
 80113ec:	a807      	add	r0, sp, #28
 80113ee:	f7fb fae6 	bl	800c9be <_ZNK8touchgfx4Rect7isEmptyEv>
 80113f2:	b920      	cbnz	r0, 80113fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80113f4:	6823      	ldr	r3, [r4, #0]
 80113f6:	a907      	add	r1, sp, #28
 80113f8:	4620      	mov	r0, r4
 80113fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113fc:	4798      	blx	r3
 80113fe:	3501      	adds	r5, #1
 8011400:	b2ad      	uxth	r5, r5
 8011402:	e7e7      	b.n	80113d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08011404 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011404:	4b03      	ldr	r3, [pc, #12]	; (8011414 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011406:	2200      	movs	r2, #0
 8011408:	801a      	strh	r2, [r3, #0]
 801140a:	805a      	strh	r2, [r3, #2]
 801140c:	809a      	strh	r2, [r3, #4]
 801140e:	80da      	strh	r2, [r3, #6]
 8011410:	4770      	bx	lr
 8011412:	bf00      	nop
 8011414:	24006cb0 	.word	0x24006cb0

08011418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	b09d      	sub	sp, #116	; 0x74
 801141e:	4606      	mov	r6, r0
 8011420:	4614      	mov	r4, r2
 8011422:	468a      	mov	sl, r1
 8011424:	a803      	add	r0, sp, #12
 8011426:	461d      	mov	r5, r3
 8011428:	f000 fd8a 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 801142c:	6833      	ldr	r3, [r6, #0]
 801142e:	4630      	mov	r0, r6
 8011430:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011436:	4798      	blx	r3
 8011438:	6833      	ldr	r3, [r6, #0]
 801143a:	4607      	mov	r7, r0
 801143c:	4630      	mov	r0, r6
 801143e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011440:	4798      	blx	r3
 8011442:	462a      	mov	r2, r5
 8011444:	2500      	movs	r5, #0
 8011446:	4621      	mov	r1, r4
 8011448:	9000      	str	r0, [sp, #0]
 801144a:	463b      	mov	r3, r7
 801144c:	462c      	mov	r4, r5
 801144e:	46a9      	mov	r9, r5
 8011450:	46a8      	mov	r8, r5
 8011452:	a803      	add	r0, sp, #12
 8011454:	f000 fdc7 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011458:	2300      	movs	r3, #0
 801145a:	9302      	str	r3, [sp, #8]
 801145c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011460:	429c      	cmp	r4, r3
 8011462:	d002      	beq.n	801146a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011464:	455c      	cmp	r4, fp
 8011466:	bf18      	it	ne
 8011468:	4625      	movne	r5, r4
 801146a:	ab02      	add	r3, sp, #8
 801146c:	4632      	mov	r2, r6
 801146e:	4651      	mov	r1, sl
 8011470:	a803      	add	r0, sp, #12
 8011472:	f001 f8b9 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011476:	4604      	mov	r4, r0
 8011478:	b108      	cbz	r0, 801147e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801147a:	280a      	cmp	r0, #10
 801147c:	d10a      	bne.n	8011494 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801147e:	45c1      	cmp	r9, r8
 8011480:	bf38      	it	cc
 8011482:	46c1      	movcc	r9, r8
 8011484:	f04f 0800 	mov.w	r8, #0
 8011488:	2c00      	cmp	r4, #0
 801148a:	d1e5      	bne.n	8011458 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801148c:	4648      	mov	r0, r9
 801148e:	b01d      	add	sp, #116	; 0x74
 8011490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011494:	9a02      	ldr	r2, [sp, #8]
 8011496:	2a00      	cmp	r2, #0
 8011498:	d0de      	beq.n	8011458 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801149a:	7b57      	ldrb	r7, [r2, #13]
 801149c:	4629      	mov	r1, r5
 801149e:	6833      	ldr	r3, [r6, #0]
 80114a0:	007f      	lsls	r7, r7, #1
 80114a2:	8894      	ldrh	r4, [r2, #4]
 80114a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80114aa:	7a97      	ldrb	r7, [r2, #10]
 80114ac:	4307      	orrs	r7, r0
 80114ae:	4630      	mov	r0, r6
 80114b0:	4798      	blx	r3
 80114b2:	4438      	add	r0, r7
 80114b4:	4480      	add	r8, r0
 80114b6:	fa1f f888 	uxth.w	r8, r8
 80114ba:	e7e5      	b.n	8011488 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080114bc <_ZNK8touchgfx4Font12getCharWidthEt>:
 80114bc:	b508      	push	{r3, lr}
 80114be:	6803      	ldr	r3, [r0, #0]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	4798      	blx	r3
 80114c4:	b128      	cbz	r0, 80114d2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80114c6:	7b43      	ldrb	r3, [r0, #13]
 80114c8:	7a80      	ldrb	r0, [r0, #10]
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114d0:	4318      	orrs	r0, r3
 80114d2:	bd08      	pop	{r3, pc}

080114d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80114d4:	b40e      	push	{r1, r2, r3}
 80114d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114d8:	b09e      	sub	sp, #120	; 0x78
 80114da:	4605      	mov	r5, r0
 80114dc:	ab23      	add	r3, sp, #140	; 0x8c
 80114de:	a805      	add	r0, sp, #20
 80114e0:	f853 4b04 	ldr.w	r4, [r3], #4
 80114e4:	9303      	str	r3, [sp, #12]
 80114e6:	f000 fd2b 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	4628      	mov	r0, r5
 80114ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114f0:	4798      	blx	r3
 80114f2:	682b      	ldr	r3, [r5, #0]
 80114f4:	4606      	mov	r6, r0
 80114f6:	4628      	mov	r0, r5
 80114f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114fa:	4798      	blx	r3
 80114fc:	4633      	mov	r3, r6
 80114fe:	4621      	mov	r1, r4
 8011500:	ae1e      	add	r6, sp, #120	; 0x78
 8011502:	2400      	movs	r4, #0
 8011504:	9000      	str	r0, [sp, #0]
 8011506:	9a03      	ldr	r2, [sp, #12]
 8011508:	a805      	add	r0, sp, #20
 801150a:	f000 fd6c 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801150e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8011512:	462a      	mov	r2, r5
 8011514:	4633      	mov	r3, r6
 8011516:	4621      	mov	r1, r4
 8011518:	a805      	add	r0, sp, #20
 801151a:	f001 f865 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801151e:	b300      	cbz	r0, 8011562 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8011520:	280a      	cmp	r0, #10
 8011522:	d01a      	beq.n	801155a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011524:	9f04      	ldr	r7, [sp, #16]
 8011526:	b1c7      	cbz	r7, 801155a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011528:	7b78      	ldrb	r0, [r7, #13]
 801152a:	7a3b      	ldrb	r3, [r7, #8]
 801152c:	00c1      	lsls	r1, r0, #3
 801152e:	88aa      	ldrh	r2, [r5, #4]
 8011530:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011534:	4319      	orrs	r1, r3
 8011536:	0643      	lsls	r3, r0, #25
 8011538:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801153c:	bf48      	it	mi
 801153e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8011542:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011546:	bf48      	it	mi
 8011548:	b219      	sxthmi	r1, r3
 801154a:	79fb      	ldrb	r3, [r7, #7]
 801154c:	4303      	orrs	r3, r0
 801154e:	4413      	add	r3, r2
 8011550:	1a5b      	subs	r3, r3, r1
 8011552:	b29b      	uxth	r3, r3
 8011554:	42a3      	cmp	r3, r4
 8011556:	bfc8      	it	gt
 8011558:	b21c      	sxthgt	r4, r3
 801155a:	4633      	mov	r3, r6
 801155c:	462a      	mov	r2, r5
 801155e:	2100      	movs	r1, #0
 8011560:	e7da      	b.n	8011518 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8011562:	b2a0      	uxth	r0, r4
 8011564:	b01e      	add	sp, #120	; 0x78
 8011566:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801156a:	b003      	add	sp, #12
 801156c:	4770      	bx	lr

0801156e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801156e:	b40e      	push	{r1, r2, r3}
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	b09d      	sub	sp, #116	; 0x74
 8011574:	4604      	mov	r4, r0
 8011576:	ab21      	add	r3, sp, #132	; 0x84
 8011578:	a803      	add	r0, sp, #12
 801157a:	f853 5b04 	ldr.w	r5, [r3], #4
 801157e:	9302      	str	r3, [sp, #8]
 8011580:	f000 fcde 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	4620      	mov	r0, r4
 8011588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801158a:	4798      	blx	r3
 801158c:	6823      	ldr	r3, [r4, #0]
 801158e:	4606      	mov	r6, r0
 8011590:	4620      	mov	r0, r4
 8011592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011594:	2401      	movs	r4, #1
 8011596:	4798      	blx	r3
 8011598:	4633      	mov	r3, r6
 801159a:	9000      	str	r0, [sp, #0]
 801159c:	4629      	mov	r1, r5
 801159e:	9a02      	ldr	r2, [sp, #8]
 80115a0:	a803      	add	r0, sp, #12
 80115a2:	f000 fd20 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80115a6:	a803      	add	r0, sp, #12
 80115a8:	f001 f918 	bl	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80115ac:	b2a3      	uxth	r3, r4
 80115ae:	b138      	cbz	r0, 80115c0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80115b0:	280a      	cmp	r0, #10
 80115b2:	a803      	add	r0, sp, #12
 80115b4:	bf04      	itt	eq
 80115b6:	3301      	addeq	r3, #1
 80115b8:	b21c      	sxtheq	r4, r3
 80115ba:	f001 f90f 	bl	80127dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80115be:	e7f5      	b.n	80115ac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80115c0:	4618      	mov	r0, r3
 80115c2:	b01d      	add	sp, #116	; 0x74
 80115c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115c8:	b003      	add	sp, #12
 80115ca:	4770      	bx	lr

080115cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80115cc:	b40e      	push	{r1, r2, r3}
 80115ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d0:	b09e      	sub	sp, #120	; 0x78
 80115d2:	4604      	mov	r4, r0
 80115d4:	ab23      	add	r3, sp, #140	; 0x8c
 80115d6:	a805      	add	r0, sp, #20
 80115d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80115dc:	9303      	str	r3, [sp, #12]
 80115de:	f000 fcaf 	bl	8011f40 <_ZN8touchgfx12TextProviderC1Ev>
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	4620      	mov	r0, r4
 80115e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e8:	4798      	blx	r3
 80115ea:	6823      	ldr	r3, [r4, #0]
 80115ec:	4606      	mov	r6, r0
 80115ee:	4620      	mov	r0, r4
 80115f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115f2:	4798      	blx	r3
 80115f4:	4633      	mov	r3, r6
 80115f6:	4629      	mov	r1, r5
 80115f8:	9000      	str	r0, [sp, #0]
 80115fa:	9a03      	ldr	r2, [sp, #12]
 80115fc:	a805      	add	r0, sp, #20
 80115fe:	f000 fcf2 	bl	8011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011602:	ad1e      	add	r5, sp, #120	; 0x78
 8011604:	2100      	movs	r1, #0
 8011606:	26ff      	movs	r6, #255	; 0xff
 8011608:	4622      	mov	r2, r4
 801160a:	a805      	add	r0, sp, #20
 801160c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8011610:	462b      	mov	r3, r5
 8011612:	f000 ffe9 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011616:	b1d8      	cbz	r0, 8011650 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8011618:	280a      	cmp	r0, #10
 801161a:	d012      	beq.n	8011642 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801161c:	9804      	ldr	r0, [sp, #16]
 801161e:	b180      	cbz	r0, 8011642 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011620:	7b47      	ldrb	r7, [r0, #13]
 8011622:	7922      	ldrb	r2, [r4, #4]
 8011624:	00fb      	lsls	r3, r7, #3
 8011626:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801162a:	7a03      	ldrb	r3, [r0, #8]
 801162c:	430b      	orrs	r3, r1
 801162e:	0679      	lsls	r1, r7, #25
 8011630:	bf44      	itt	mi
 8011632:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011636:	b21b      	sxthmi	r3, r3
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	b2db      	uxtb	r3, r3
 801163c:	429e      	cmp	r6, r3
 801163e:	bf28      	it	cs
 8011640:	461e      	movcs	r6, r3
 8011642:	462b      	mov	r3, r5
 8011644:	4622      	mov	r2, r4
 8011646:	2100      	movs	r1, #0
 8011648:	a805      	add	r0, sp, #20
 801164a:	f000 ffcd 	bl	80125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801164e:	e7e2      	b.n	8011616 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8011650:	4630      	mov	r0, r6
 8011652:	b01e      	add	sp, #120	; 0x78
 8011654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011658:	b003      	add	sp, #12
 801165a:	4770      	bx	lr

0801165c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801165c:	b513      	push	{r0, r1, r4, lr}
 801165e:	6803      	ldr	r3, [r0, #0]
 8011660:	2400      	movs	r4, #0
 8011662:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011666:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801166a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801166e:	4669      	mov	r1, sp
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	9400      	str	r4, [sp, #0]
 8011674:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011678:	4798      	blx	r3
 801167a:	b002      	add	sp, #8
 801167c:	bd10      	pop	{r4, pc}

0801167e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801167e:	b538      	push	{r3, r4, r5, lr}
 8011680:	680b      	ldr	r3, [r1, #0]
 8011682:	460c      	mov	r4, r1
 8011684:	4605      	mov	r5, r0
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	4798      	blx	r3
 801168a:	6823      	ldr	r3, [r4, #0]
 801168c:	4620      	mov	r0, r4
 801168e:	4629      	mov	r1, r5
 8011690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011692:	4798      	blx	r3
 8011694:	4628      	mov	r0, r5
 8011696:	bd38      	pop	{r3, r4, r5, pc}

08011698 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8011698:	b410      	push	{r4}
 801169a:	880a      	ldrh	r2, [r1, #0]
 801169c:	8884      	ldrh	r4, [r0, #4]
 801169e:	4422      	add	r2, r4
 80116a0:	800a      	strh	r2, [r1, #0]
 80116a2:	884a      	ldrh	r2, [r1, #2]
 80116a4:	88c4      	ldrh	r4, [r0, #6]
 80116a6:	4422      	add	r2, r4
 80116a8:	804a      	strh	r2, [r1, #2]
 80116aa:	6940      	ldr	r0, [r0, #20]
 80116ac:	b120      	cbz	r0, 80116b8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80116ae:	6803      	ldr	r3, [r0, #0]
 80116b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b6:	4718      	bx	r3
 80116b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116bc:	4770      	bx	lr

080116be <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80116be:	b570      	push	{r4, r5, r6, lr}
 80116c0:	8882      	ldrh	r2, [r0, #4]
 80116c2:	460c      	mov	r4, r1
 80116c4:	880b      	ldrh	r3, [r1, #0]
 80116c6:	4605      	mov	r5, r0
 80116c8:	4413      	add	r3, r2
 80116ca:	800b      	strh	r3, [r1, #0]
 80116cc:	884b      	ldrh	r3, [r1, #2]
 80116ce:	88c2      	ldrh	r2, [r0, #6]
 80116d0:	4413      	add	r3, r2
 80116d2:	804b      	strh	r3, [r1, #2]
 80116d4:	1d01      	adds	r1, r0, #4
 80116d6:	4620      	mov	r0, r4
 80116d8:	f7fb f92e 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 80116dc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dd0b      	ble.n	80116fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	dd07      	ble.n	80116fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116ec:	6968      	ldr	r0, [r5, #20]
 80116ee:	b128      	cbz	r0, 80116fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80116f0:	6803      	ldr	r3, [r0, #0]
 80116f2:	4621      	mov	r1, r4
 80116f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116fa:	4718      	bx	r3
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011700 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8011700:	b570      	push	{r4, r5, r6, lr}
 8011702:	8882      	ldrh	r2, [r0, #4]
 8011704:	460c      	mov	r4, r1
 8011706:	880b      	ldrh	r3, [r1, #0]
 8011708:	4605      	mov	r5, r0
 801170a:	4413      	add	r3, r2
 801170c:	800b      	strh	r3, [r1, #0]
 801170e:	884b      	ldrh	r3, [r1, #2]
 8011710:	88c2      	ldrh	r2, [r0, #6]
 8011712:	4413      	add	r3, r2
 8011714:	804b      	strh	r3, [r1, #2]
 8011716:	1d01      	adds	r1, r0, #4
 8011718:	4620      	mov	r0, r4
 801171a:	f7fb f90d 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 801171e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011722:	2b00      	cmp	r3, #0
 8011724:	dd15      	ble.n	8011752 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8011726:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801172a:	2b00      	cmp	r3, #0
 801172c:	dd11      	ble.n	8011752 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801172e:	6968      	ldr	r0, [r5, #20]
 8011730:	b128      	cbz	r0, 801173e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8011732:	6803      	ldr	r3, [r0, #0]
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	4621      	mov	r1, r4
 8011738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801173c:	4718      	bx	r3
 801173e:	4b05      	ldr	r3, [pc, #20]	; (8011754 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	3304      	adds	r3, #4
 8011744:	429d      	cmp	r5, r3
 8011746:	d104      	bne.n	8011752 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8011748:	f7ff f806 	bl	8010758 <_ZN8touchgfx11Application11getInstanceEv>
 801174c:	6803      	ldr	r3, [r0, #0]
 801174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011750:	e7f1      	b.n	8011736 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8011752:	bd70      	pop	{r4, r5, r6, pc}
 8011754:	24006ca8 	.word	0x24006ca8

08011758 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8011758:	b570      	push	{r4, r5, r6, lr}
 801175a:	4604      	mov	r4, r0
 801175c:	4616      	mov	r6, r2
 801175e:	460d      	mov	r5, r1
 8011760:	b901      	cbnz	r1, 8011764 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011762:	b192      	cbz	r2, 801178a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	4620      	mov	r0, r4
 8011768:	695b      	ldr	r3, [r3, #20]
 801176a:	4798      	blx	r3
 801176c:	88e2      	ldrh	r2, [r4, #6]
 801176e:	88a1      	ldrh	r1, [r4, #4]
 8011770:	4620      	mov	r0, r4
 8011772:	4432      	add	r2, r6
 8011774:	4429      	add	r1, r5
 8011776:	b212      	sxth	r2, r2
 8011778:	b209      	sxth	r1, r1
 801177a:	f7f1 fd4b 	bl	8003214 <_ZN8touchgfx8Drawable5setXYEss>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	4620      	mov	r0, r4
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011788:	4718      	bx	r3
 801178a:	bd70      	pop	{r4, r5, r6, pc}

0801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801178c:	b510      	push	{r4, lr}
 801178e:	2300      	movs	r3, #0
 8011790:	4604      	mov	r4, r0
 8011792:	4608      	mov	r0, r1
 8011794:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8011798:	8023      	strh	r3, [r4, #0]
 801179a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801179e:	8063      	strh	r3, [r4, #2]
 80117a0:	6803      	ldr	r3, [r0, #0]
 80117a2:	80a1      	strh	r1, [r4, #4]
 80117a4:	4621      	mov	r1, r4
 80117a6:	80e2      	strh	r2, [r4, #6]
 80117a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117aa:	4798      	blx	r3
 80117ac:	4620      	mov	r0, r4
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80117b0:	b530      	push	{r4, r5, lr}
 80117b2:	8083      	strh	r3, [r0, #4]
 80117b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80117b8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80117bc:	7183      	strb	r3, [r0, #6]
 80117be:	79c3      	ldrb	r3, [r0, #7]
 80117c0:	6101      	str	r1, [r0, #16]
 80117c2:	f365 0306 	bfi	r3, r5, #0, #7
 80117c6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80117ca:	8282      	strh	r2, [r0, #20]
 80117cc:	f365 13c7 	bfi	r3, r5, #7, #1
 80117d0:	71c3      	strb	r3, [r0, #7]
 80117d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80117d6:	7203      	strb	r3, [r0, #8]
 80117d8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80117dc:	7243      	strb	r3, [r0, #9]
 80117de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80117e2:	8143      	strh	r3, [r0, #10]
 80117e4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80117e8:	8183      	strh	r3, [r0, #12]
 80117ea:	4b01      	ldr	r3, [pc, #4]	; (80117f0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80117ec:	6003      	str	r3, [r0, #0]
 80117ee:	bd30      	pop	{r4, r5, pc}
 80117f0:	0801fa24 	.word	0x0801fa24

080117f4 <_ZNK8touchgfx9ConstFont4findEt>:
 80117f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117f6:	6904      	ldr	r4, [r0, #16]
 80117f8:	b3bc      	cbz	r4, 801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80117fa:	88a3      	ldrh	r3, [r4, #4]
 80117fc:	8a82      	ldrh	r2, [r0, #20]
 80117fe:	1acb      	subs	r3, r1, r3
 8011800:	f102 32ff 	add.w	r2, r2, #4294967295
 8011804:	d431      	bmi.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011806:	4293      	cmp	r3, r2
 8011808:	dd0c      	ble.n	8011824 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801180a:	230e      	movs	r3, #14
 801180c:	fb03 4302 	mla	r3, r3, r2, r4
 8011810:	889b      	ldrh	r3, [r3, #4]
 8011812:	1a5b      	subs	r3, r3, r1
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	429a      	cmp	r2, r3
 8011818:	db27      	blt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801181a:	2b00      	cmp	r3, #0
 801181c:	bfbc      	itt	lt
 801181e:	2302      	movlt	r3, #2
 8011820:	fb92 f3f3 	sdivlt	r3, r2, r3
 8011824:	2500      	movs	r5, #0
 8011826:	260e      	movs	r6, #14
 8011828:	4295      	cmp	r5, r2
 801182a:	dc1e      	bgt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801182c:	fb06 4003 	mla	r0, r6, r3, r4
 8011830:	8887      	ldrh	r7, [r0, #4]
 8011832:	42b9      	cmp	r1, r7
 8011834:	d01a      	beq.n	801186c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011836:	d20d      	bcs.n	8011854 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011838:	1e5a      	subs	r2, r3, #1
 801183a:	4295      	cmp	r5, r2
 801183c:	dc15      	bgt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801183e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011842:	1a5b      	subs	r3, r3, r1
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	429a      	cmp	r2, r3
 8011848:	db0f      	blt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801184a:	429d      	cmp	r5, r3
 801184c:	ddec      	ble.n	8011828 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801184e:	1953      	adds	r3, r2, r5
 8011850:	105b      	asrs	r3, r3, #1
 8011852:	e7e9      	b.n	8011828 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011854:	1c5d      	adds	r5, r3, #1
 8011856:	42aa      	cmp	r2, r5
 8011858:	db07      	blt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801185a:	8a43      	ldrh	r3, [r0, #18]
 801185c:	1acb      	subs	r3, r1, r3
 801185e:	442b      	add	r3, r5
 8011860:	429d      	cmp	r5, r3
 8011862:	dc02      	bgt.n	801186a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011864:	429a      	cmp	r2, r3
 8011866:	dadf      	bge.n	8011828 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011868:	e7f1      	b.n	801184e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801186a:	2000      	movs	r0, #0
 801186c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801186e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801186e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011870:	4604      	mov	r4, r0
 8011872:	4617      	mov	r7, r2
 8011874:	461e      	mov	r6, r3
 8011876:	b911      	cbnz	r1, 801187e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011878:	2500      	movs	r5, #0
 801187a:	4628      	mov	r0, r5
 801187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801187e:	290a      	cmp	r1, #10
 8011880:	d0fa      	beq.n	8011878 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011882:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011886:	4291      	cmp	r1, r2
 8011888:	d0f6      	beq.n	8011878 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801188a:	f242 020b 	movw	r2, #8203	; 0x200b
 801188e:	4291      	cmp	r1, r2
 8011890:	d0f2      	beq.n	8011878 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011892:	f7ff ffaf 	bl	80117f4 <_ZNK8touchgfx9ConstFont4findEt>
 8011896:	4605      	mov	r5, r0
 8011898:	b950      	cbnz	r0, 80118b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	4620      	mov	r0, r4
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	4798      	blx	r3
 80118a2:	4601      	mov	r1, r0
 80118a4:	4620      	mov	r0, r4
 80118a6:	f7ff ffa5 	bl	80117f4 <_ZNK8touchgfx9ConstFont4findEt>
 80118aa:	4605      	mov	r5, r0
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d0e3      	beq.n	8011878 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80118b0:	6823      	ldr	r3, [r4, #0]
 80118b2:	4629      	mov	r1, r5
 80118b4:	4620      	mov	r0, r4
 80118b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118b8:	4798      	blx	r3
 80118ba:	6038      	str	r0, [r7, #0]
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	4620      	mov	r0, r4
 80118c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c2:	4798      	blx	r3
 80118c4:	7030      	strb	r0, [r6, #0]
 80118c6:	e7d8      	b.n	801187a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080118c8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4605      	mov	r5, r0
 80118cc:	f002 fa86 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118d0:	4604      	mov	r4, r0
 80118d2:	4628      	mov	r0, r5
 80118d4:	f002 f9be 	bl	8013c54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80118d8:	2800      	cmp	r0, #0
 80118da:	bf14      	ite	ne
 80118dc:	2002      	movne	r0, #2
 80118de:	2000      	moveq	r0, #0
 80118e0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80118e4:	b280      	uxth	r0, r0
 80118e6:	bd38      	pop	{r3, r4, r5, pc}

080118e8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	4605      	mov	r5, r0
 80118ec:	f002 fa76 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118f0:	4604      	mov	r4, r0
 80118f2:	4628      	mov	r0, r5
 80118f4:	f002 f9ae 	bl	8013c54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	bf14      	ite	ne
 80118fc:	2002      	movne	r0, #2
 80118fe:	2000      	moveq	r0, #0
 8011900:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8011904:	f040 0001 	orr.w	r0, r0, #1
 8011908:	b280      	uxth	r0, r0
 801190a:	bd38      	pop	{r3, r4, r5, pc}

0801190c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801190c:	2000      	movs	r0, #0
 801190e:	4770      	bx	lr

08011910 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8011910:	2001      	movs	r0, #1
 8011912:	4770      	bx	lr

08011914 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8011914:	2002      	movs	r0, #2
 8011916:	4770      	bx	lr

08011918 <_ZN8touchgfx6ScreenD1Ev>:
 8011918:	4770      	bx	lr

0801191a <_ZN8touchgfx12GestureEventD1Ev>:
 801191a:	4770      	bx	lr

0801191c <_ZN8touchgfx9DragEventD1Ev>:
 801191c:	4770      	bx	lr

0801191e <_ZN8touchgfx10ClickEventD1Ev>:
 801191e:	4770      	bx	lr

08011920 <_ZN8touchgfx10ClickEventD0Ev>:
 8011920:	b510      	push	{r4, lr}
 8011922:	4604      	mov	r4, r0
 8011924:	210c      	movs	r1, #12
 8011926:	f00a fbc3 	bl	801c0b0 <_ZdlPvj>
 801192a:	4620      	mov	r0, r4
 801192c:	bd10      	pop	{r4, pc}

0801192e <_ZN8touchgfx9DragEventD0Ev>:
 801192e:	b510      	push	{r4, lr}
 8011930:	4604      	mov	r4, r0
 8011932:	2110      	movs	r1, #16
 8011934:	f00a fbbc 	bl	801c0b0 <_ZdlPvj>
 8011938:	4620      	mov	r0, r4
 801193a:	bd10      	pop	{r4, pc}

0801193c <_ZN8touchgfx12GestureEventD0Ev>:
 801193c:	b510      	push	{r4, lr}
 801193e:	4604      	mov	r4, r0
 8011940:	210c      	movs	r1, #12
 8011942:	f00a fbb5 	bl	801c0b0 <_ZdlPvj>
 8011946:	4620      	mov	r0, r4
 8011948:	bd10      	pop	{r4, pc}

0801194a <_ZN8touchgfx6ScreenD0Ev>:
 801194a:	b510      	push	{r4, lr}
 801194c:	4604      	mov	r4, r0
 801194e:	213c      	movs	r1, #60	; 0x3c
 8011950:	f00a fbae 	bl	801c0b0 <_ZdlPvj>
 8011954:	4620      	mov	r0, r4
 8011956:	bd10      	pop	{r4, pc}

08011958 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8011958:	b530      	push	{r4, r5, lr}
 801195a:	460d      	mov	r5, r1
 801195c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801195e:	b087      	sub	sp, #28
 8011960:	4604      	mov	r4, r0
 8011962:	b301      	cbz	r1, 80119a6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011964:	a801      	add	r0, sp, #4
 8011966:	f7ff ff11 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801196a:	892a      	ldrh	r2, [r5, #8]
 801196c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011970:	7928      	ldrb	r0, [r5, #4]
 8011972:	1ad2      	subs	r2, r2, r3
 8011974:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011976:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801197a:	441a      	add	r2, r3
 801197c:	896b      	ldrh	r3, [r5, #10]
 801197e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011982:	f88d 0010 	strb.w	r0, [sp, #16]
 8011986:	1b5b      	subs	r3, r3, r5
 8011988:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801198a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801198c:	442b      	add	r3, r5
 801198e:	4d07      	ldr	r5, [pc, #28]	; (80119ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011990:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011994:	a903      	add	r1, sp, #12
 8011996:	9503      	str	r5, [sp, #12]
 8011998:	f8ad 2014 	strh.w	r2, [sp, #20]
 801199c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119a0:	6803      	ldr	r3, [r0, #0]
 80119a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119a4:	4798      	blx	r3
 80119a6:	b007      	add	sp, #28
 80119a8:	bd30      	pop	{r4, r5, pc}
 80119aa:	bf00      	nop
 80119ac:	0801faa4 	.word	0x0801faa4

080119b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80119b6:	b08a      	sub	sp, #40	; 0x28
 80119b8:	4604      	mov	r4, r0
 80119ba:	460d      	mov	r5, r1
 80119bc:	b113      	cbz	r3, 80119c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80119be:	790b      	ldrb	r3, [r1, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d044      	beq.n	8011a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80119c4:	f104 0804 	add.w	r8, r4, #4
 80119c8:	a803      	add	r0, sp, #12
 80119ca:	4641      	mov	r1, r8
 80119cc:	f7ff fede 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80119d0:	792b      	ldrb	r3, [r5, #4]
 80119d2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80119d6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80119da:	b983      	cbnz	r3, 80119fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80119dc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80119e0:	892a      	ldrh	r2, [r5, #8]
 80119e2:	88e9      	ldrh	r1, [r5, #6]
 80119e4:	4640      	mov	r0, r8
 80119e6:	1b92      	subs	r2, r2, r6
 80119e8:	9301      	str	r3, [sp, #4]
 80119ea:	1bc9      	subs	r1, r1, r7
 80119ec:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80119f0:	b212      	sxth	r2, r2
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	b209      	sxth	r1, r1
 80119f6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80119fa:	f7fa febb 	bl	800c774 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80119fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011a00:	b329      	cbz	r1, 8011a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011a02:	a805      	add	r0, sp, #20
 8011a04:	f7ff fec2 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a08:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011a0c:	792b      	ldrb	r3, [r5, #4]
 8011a0e:	a907      	add	r1, sp, #28
 8011a10:	1abf      	subs	r7, r7, r2
 8011a12:	88ea      	ldrh	r2, [r5, #6]
 8011a14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011a16:	4417      	add	r7, r2
 8011a18:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8011a1a:	f88d 3020 	strb.w	r3, [sp, #32]
 8011a1e:	4417      	add	r7, r2
 8011a20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011a24:	1ab6      	subs	r6, r6, r2
 8011a26:	892a      	ldrh	r2, [r5, #8]
 8011a28:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8011a2c:	4416      	add	r6, r2
 8011a2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011a30:	4416      	add	r6, r2
 8011a32:	4a08      	ldr	r2, [pc, #32]	; (8011a54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011a34:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8011a38:	2600      	movs	r6, #0
 8011a3a:	9207      	str	r2, [sp, #28]
 8011a3c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8011a40:	6803      	ldr	r3, [r0, #0]
 8011a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a44:	4798      	blx	r3
 8011a46:	792b      	ldrb	r3, [r5, #4]
 8011a48:	b10b      	cbz	r3, 8011a4e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011a4a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011a4e:	b00a      	add	sp, #40	; 0x28
 8011a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a54:	0801fa7c 	.word	0x0801fa7c

08011a58 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011a60:	b088      	sub	sp, #32
 8011a62:	4605      	mov	r5, r0
 8011a64:	2900      	cmp	r1, #0
 8011a66:	d06d      	beq.n	8011b44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8011a68:	4668      	mov	r0, sp
 8011a6a:	f7ff fe8f 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a6e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8011a70:	88e3      	ldrh	r3, [r4, #6]
 8011a72:	f9bd 8000 	ldrsh.w	r8, [sp]
 8011a76:	440b      	add	r3, r1
 8011a78:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011a7c:	b21b      	sxth	r3, r3
 8011a7e:	4543      	cmp	r3, r8
 8011a80:	db31      	blt.n	8011ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a82:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8011a86:	44c4      	add	ip, r8
 8011a88:	fa0f fc8c 	sxth.w	ip, ip
 8011a8c:	4563      	cmp	r3, ip
 8011a8e:	da2a      	bge.n	8011ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a90:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011a92:	8926      	ldrh	r6, [r4, #8]
 8011a94:	4416      	add	r6, r2
 8011a96:	b236      	sxth	r6, r6
 8011a98:	42be      	cmp	r6, r7
 8011a9a:	db24      	blt.n	8011ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011a9c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011aa0:	4438      	add	r0, r7
 8011aa2:	b200      	sxth	r0, r0
 8011aa4:	4286      	cmp	r6, r0
 8011aa6:	da1e      	bge.n	8011ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011aa8:	8963      	ldrh	r3, [r4, #10]
 8011aaa:	4419      	add	r1, r3
 8011aac:	b209      	sxth	r1, r1
 8011aae:	4541      	cmp	r1, r8
 8011ab0:	db08      	blt.n	8011ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011ab2:	4561      	cmp	r1, ip
 8011ab4:	da06      	bge.n	8011ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011ab6:	89a3      	ldrh	r3, [r4, #12]
 8011ab8:	441a      	add	r2, r3
 8011aba:	b212      	sxth	r2, r2
 8011abc:	42ba      	cmp	r2, r7
 8011abe:	db01      	blt.n	8011ac4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011ac0:	4282      	cmp	r2, r0
 8011ac2:	db10      	blt.n	8011ae6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011ac4:	4b21      	ldr	r3, [pc, #132]	; (8011b4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8011ac6:	a904      	add	r1, sp, #16
 8011ac8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011aca:	9304      	str	r3, [sp, #16]
 8011acc:	2302      	movs	r3, #2
 8011ace:	f88d 3014 	strb.w	r3, [sp, #20]
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011ad8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011adc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011ae0:	6803      	ldr	r3, [r0, #0]
 8011ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae4:	4798      	blx	r3
 8011ae6:	1d29      	adds	r1, r5, #4
 8011ae8:	a802      	add	r0, sp, #8
 8011aea:	f7ff fe4f 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011aee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011af2:	88e0      	ldrh	r0, [r4, #6]
 8011af4:	eba3 0808 	sub.w	r8, r3, r8
 8011af8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011afc:	7921      	ldrb	r1, [r4, #4]
 8011afe:	fa1f f888 	uxth.w	r8, r8
 8011b02:	1bdf      	subs	r7, r3, r7
 8011b04:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011b08:	b2bb      	uxth	r3, r7
 8011b0a:	4440      	add	r0, r8
 8011b0c:	8922      	ldrh	r2, [r4, #8]
 8011b0e:	8967      	ldrh	r7, [r4, #10]
 8011b10:	4460      	add	r0, ip
 8011b12:	89a4      	ldrh	r4, [r4, #12]
 8011b14:	441a      	add	r2, r3
 8011b16:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011b18:	44b8      	add	r8, r7
 8011b1a:	4423      	add	r3, r4
 8011b1c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011b20:	4432      	add	r2, r6
 8011b22:	44e0      	add	r8, ip
 8011b24:	4433      	add	r3, r6
 8011b26:	4c0a      	ldr	r4, [pc, #40]	; (8011b50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011b28:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011b2a:	f88d 1014 	strb.w	r1, [sp, #20]
 8011b2e:	a904      	add	r1, sp, #16
 8011b30:	9404      	str	r4, [sp, #16]
 8011b32:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011b36:	f8ad 801a 	strh.w	r8, [sp, #26]
 8011b3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b3e:	6803      	ldr	r3, [r0, #0]
 8011b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b42:	4798      	blx	r3
 8011b44:	b008      	add	sp, #32
 8011b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4a:	bf00      	nop
 8011b4c:	0801fa7c 	.word	0x0801fa7c
 8011b50:	0801fa90 	.word	0x0801fa90

08011b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b56:	4604      	mov	r4, r0
 8011b58:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011b5c:	3201      	adds	r2, #1
 8011b5e:	d112      	bne.n	8011b86 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011b60:	2500      	movs	r5, #0
 8011b62:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011b66:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011b6a:	6803      	ldr	r3, [r0, #0]
 8011b6c:	9500      	str	r5, [sp, #0]
 8011b6e:	466d      	mov	r5, sp
 8011b70:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011b74:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b78:	4629      	mov	r1, r5
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7c:	4798      	blx	r3
 8011b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b82:	e884 0003 	stmia.w	r4, {r0, r1}
 8011b86:	4620      	mov	r0, r4
 8011b88:	b003      	add	sp, #12
 8011b8a:	bd30      	pop	{r4, r5, pc}

08011b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011b8c:	b513      	push	{r0, r1, r4, lr}
 8011b8e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011b92:	4604      	mov	r4, r0
 8011b94:	3301      	adds	r3, #1
 8011b96:	d109      	bne.n	8011bac <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011b98:	4601      	mov	r1, r0
 8011b9a:	4668      	mov	r0, sp
 8011b9c:	f7ff fdf6 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ba0:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ba4:	8423      	strh	r3, [r4, #32]
 8011ba6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011baa:	8463      	strh	r3, [r4, #34]	; 0x22
 8011bac:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011bb0:	b002      	add	sp, #8
 8011bb2:	bd10      	pop	{r4, pc}

08011bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011bb4:	b513      	push	{r0, r1, r4, lr}
 8011bb6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011bba:	4604      	mov	r4, r0
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	d109      	bne.n	8011bd4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	4668      	mov	r0, sp
 8011bc4:	f7ff fde2 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011bc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8011bcc:	8423      	strh	r3, [r4, #32]
 8011bce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011bd2:	8463      	strh	r3, [r4, #34]	; 0x22
 8011bd4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011bd8:	b002      	add	sp, #8
 8011bda:	bd10      	pop	{r4, pc}

08011bdc <_ZN8touchgfx6ScreenC1Ev>:
 8011bdc:	b570      	push	{r4, r5, r6, lr}
 8011bde:	4b17      	ldr	r3, [pc, #92]	; (8011c3c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011be0:	4605      	mov	r5, r0
 8011be2:	4a17      	ldr	r2, [pc, #92]	; (8011c40 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011be4:	2101      	movs	r1, #1
 8011be6:	f845 3b04 	str.w	r3, [r5], #4
 8011bea:	2300      	movs	r3, #0
 8011bec:	6042      	str	r2, [r0, #4]
 8011bee:	4604      	mov	r4, r0
 8011bf0:	8103      	strh	r3, [r0, #8]
 8011bf2:	8143      	strh	r3, [r0, #10]
 8011bf4:	8183      	strh	r3, [r0, #12]
 8011bf6:	81c3      	strh	r3, [r0, #14]
 8011bf8:	8203      	strh	r3, [r0, #16]
 8011bfa:	8243      	strh	r3, [r0, #18]
 8011bfc:	8283      	strh	r3, [r0, #20]
 8011bfe:	82c3      	strh	r3, [r0, #22]
 8011c00:	6203      	str	r3, [r0, #32]
 8011c02:	8483      	strh	r3, [r0, #36]	; 0x24
 8011c04:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011c06:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8011c0a:	6343      	str	r3, [r0, #52]	; 0x34
 8011c0c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011c10:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011c14:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011c18:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011c1c:	4b09      	ldr	r3, [pc, #36]	; (8011c44 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011c24:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011c26:	4a08      	ldr	r2, [pc, #32]	; (8011c48 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011c28:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011c2c:	4798      	blx	r3
 8011c2e:	6863      	ldr	r3, [r4, #4]
 8011c30:	4628      	mov	r0, r5
 8011c32:	4631      	mov	r1, r6
 8011c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c36:	4798      	blx	r3
 8011c38:	4620      	mov	r0, r4
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}
 8011c3c:	0801fab8 	.word	0x0801fab8
 8011c40:	0801e920 	.word	0x0801e920
 8011c44:	24006c62 	.word	0x24006c62
 8011c48:	24006c60 	.word	0x24006c60

08011c4c <_ZN8touchgfx6Screen4drawEv>:
 8011c4c:	4b09      	ldr	r3, [pc, #36]	; (8011c74 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011c4e:	b507      	push	{r0, r1, r2, lr}
 8011c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c54:	2100      	movs	r1, #0
 8011c56:	4b08      	ldr	r3, [pc, #32]	; (8011c78 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011c58:	9100      	str	r1, [sp, #0]
 8011c5a:	4669      	mov	r1, sp
 8011c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c60:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011c64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c68:	6803      	ldr	r3, [r0, #0]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	4798      	blx	r3
 8011c6e:	b003      	add	sp, #12
 8011c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c74:	24006c60 	.word	0x24006c60
 8011c78:	24006c62 	.word	0x24006c62

08011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011c84:	b089      	sub	sp, #36	; 0x24
 8011c86:	4680      	mov	r8, r0
 8011c88:	460c      	mov	r4, r1
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	dd0e      	ble.n	8011cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c90:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	dd0a      	ble.n	8011cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011c98:	4628      	mov	r0, r5
 8011c9a:	f7ff ff5b 	bl	8011b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	f7fe fcd0 	bl	8010644 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011ca4:	69eb      	ldr	r3, [r5, #28]
 8011ca6:	b928      	cbnz	r0, 8011cb4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011ca8:	461d      	mov	r5, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1f4      	bne.n	8011c98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011cae:	b009      	add	sp, #36	; 0x24
 8011cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb4:	ae04      	add	r6, sp, #16
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 80b5 	beq.w	8011e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	a802      	add	r0, sp, #8
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	4798      	blx	r3
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f7ff ff60 	bl	8011b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011ccc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011cd0:	4407      	add	r7, r0
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	f7ff ff6e 	bl	8011bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011cd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011cdc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011ce0:	b23f      	sxth	r7, r7
 8011ce2:	4418      	add	r0, r3
 8011ce4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011ce8:	4621      	mov	r1, r4
 8011cea:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011cee:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cf8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011cfc:	f7fa fe1c 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 8011d00:	4628      	mov	r0, r5
 8011d02:	f7ff ff27 	bl	8011b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011d06:	ab06      	add	r3, sp, #24
 8011d08:	4602      	mov	r2, r0
 8011d0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d12:	4611      	mov	r1, r2
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fa fe0f 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 8011d1a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011d1e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011d22:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011d26:	4299      	cmp	r1, r3
 8011d28:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011d2c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011d30:	d10b      	bne.n	8011d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d32:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d36:	4552      	cmp	r2, sl
 8011d38:	d107      	bne.n	8011d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d3a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011d3e:	455a      	cmp	r2, fp
 8011d40:	d103      	bne.n	8011d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011d42:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011d46:	454a      	cmp	r2, r9
 8011d48:	d06d      	beq.n	8011e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011d4a:	f1bb 0f00 	cmp.w	fp, #0
 8011d4e:	dd65      	ble.n	8011e1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011d50:	f1b9 0f00 	cmp.w	r9, #0
 8011d54:	dd62      	ble.n	8011e1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011d56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d5a:	fa1f f08a 	uxth.w	r0, sl
 8011d5e:	4552      	cmp	r2, sl
 8011d60:	9000      	str	r0, [sp, #0]
 8011d62:	da12      	bge.n	8011d8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011d64:	9301      	str	r3, [sp, #4]
 8011d66:	9b00      	ldr	r3, [sp, #0]
 8011d68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011d6c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011d70:	1a9a      	subs	r2, r3, r2
 8011d72:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011d76:	4631      	mov	r1, r6
 8011d78:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011d82:	69ea      	ldr	r2, [r5, #28]
 8011d84:	f7ff ff7a 	bl	8011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011d88:	9b01      	ldr	r3, [sp, #4]
 8011d8a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011d8e:	b29f      	uxth	r7, r3
 8011d90:	429a      	cmp	r2, r3
 8011d92:	da0d      	bge.n	8011db0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011d94:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011d98:	1aba      	subs	r2, r7, r2
 8011d9a:	f8ad a012 	strh.w	sl, [sp, #18]
 8011d9e:	4631      	mov	r1, r6
 8011da0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011da4:	4640      	mov	r0, r8
 8011da6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011daa:	69ea      	ldr	r2, [r5, #28]
 8011dac:	f7ff ff66 	bl	8011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011db0:	8822      	ldrh	r2, [r4, #0]
 8011db2:	445f      	add	r7, fp
 8011db4:	88a3      	ldrh	r3, [r4, #4]
 8011db6:	b2bf      	uxth	r7, r7
 8011db8:	4413      	add	r3, r2
 8011dba:	b23a      	sxth	r2, r7
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	b219      	sxth	r1, r3
 8011dc0:	4291      	cmp	r1, r2
 8011dc2:	dd0d      	ble.n	8011de0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011dc4:	1bdb      	subs	r3, r3, r7
 8011dc6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011dca:	f8ad a012 	strh.w	sl, [sp, #18]
 8011dce:	4631      	mov	r1, r6
 8011dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011dd4:	4640      	mov	r0, r8
 8011dd6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011dda:	69ea      	ldr	r2, [r5, #28]
 8011ddc:	f7ff ff4e 	bl	8011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011de0:	88e2      	ldrh	r2, [r4, #6]
 8011de2:	8863      	ldrh	r3, [r4, #2]
 8011de4:	4413      	add	r3, r2
 8011de6:	9a00      	ldr	r2, [sp, #0]
 8011de8:	444a      	add	r2, r9
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	fa1f f982 	uxth.w	r9, r2
 8011df0:	b219      	sxth	r1, r3
 8011df2:	fa0f f289 	sxth.w	r2, r9
 8011df6:	428a      	cmp	r2, r1
 8011df8:	da15      	bge.n	8011e26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011dfa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011dfe:	eba3 0309 	sub.w	r3, r3, r9
 8011e02:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011e06:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011e0a:	4631      	mov	r1, r6
 8011e0c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011e10:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011e14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e18:	69ea      	ldr	r2, [r5, #28]
 8011e1a:	e001      	b.n	8011e20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011e1c:	69ea      	ldr	r2, [r5, #28]
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4640      	mov	r0, r8
 8011e22:	f7ff ff2b 	bl	8011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011e26:	4628      	mov	r0, r5
 8011e28:	f7ff fe94 	bl	8011b54 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011e2c:	6861      	ldr	r1, [r4, #4]
 8011e2e:	4602      	mov	r2, r0
 8011e30:	4633      	mov	r3, r6
 8011e32:	6820      	ldr	r0, [r4, #0]
 8011e34:	c303      	stmia	r3!, {r0, r1}
 8011e36:	4611      	mov	r1, r2
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f7fa fd7d 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 8011e3e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f77f af33 	ble.w	8011cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e48:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f77f af2e 	ble.w	8011cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e52:	4628      	mov	r0, r5
 8011e54:	f7ff fe9a 	bl	8011b8c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011e58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011e5c:	1a18      	subs	r0, r3, r0
 8011e5e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011e62:	4628      	mov	r0, r5
 8011e64:	f7ff fea6 	bl	8011bb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011e68:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	1a18      	subs	r0, r3, r0
 8011e70:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011e74:	4628      	mov	r0, r5
 8011e76:	682b      	ldr	r3, [r5, #0]
 8011e78:	689b      	ldr	r3, [r3, #8]
 8011e7a:	4798      	blx	r3
 8011e7c:	e717      	b.n	8011cae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08011e7e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011e7e:	b570      	push	{r4, r5, r6, lr}
 8011e80:	1d06      	adds	r6, r0, #4
 8011e82:	b086      	sub	sp, #24
 8011e84:	460c      	mov	r4, r1
 8011e86:	2300      	movs	r3, #0
 8011e88:	4631      	mov	r1, r6
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	a802      	add	r0, sp, #8
 8011e8e:	9301      	str	r3, [sp, #4]
 8011e90:	f7ff fc7c 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011e98:	8822      	ldrh	r2, [r4, #0]
 8011e9a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8011e9e:	1ad2      	subs	r2, r2, r3
 8011ea0:	8863      	ldrh	r3, [r4, #2]
 8011ea2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011ea6:	1a5b      	subs	r3, r3, r1
 8011ea8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011eac:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011eb0:	aa01      	add	r2, sp, #4
 8011eb2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011ebc:	a904      	add	r1, sp, #16
 8011ebe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011ec2:	f7fa fe11 	bl	800cae8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011ec6:	9a01      	ldr	r2, [sp, #4]
 8011ec8:	b11a      	cbz	r2, 8011ed2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f7ff fed5 	bl	8011c7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011ed2:	b006      	add	sp, #24
 8011ed4:	bd70      	pop	{r4, r5, r6, pc}

08011ed6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	b530      	push	{r4, r5, lr}
 8011eda:	4604      	mov	r4, r0
 8011edc:	b085      	sub	sp, #20
 8011ede:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011ee2:	460d      	mov	r5, r1
 8011ee4:	466b      	mov	r3, sp
 8011ee6:	6851      	ldr	r1, [r2, #4]
 8011ee8:	c303      	stmia	r3!, {r0, r1}
 8011eea:	4629      	mov	r1, r5
 8011eec:	4668      	mov	r0, sp
 8011eee:	f7fa fd23 	bl	800c938 <_ZN8touchgfx4RectaNERKS0_>
 8011ef2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011ef6:	b12b      	cbz	r3, 8011f04 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011ef8:	4669      	mov	r1, sp
 8011efa:	4620      	mov	r0, r4
 8011efc:	f7ff ffbf 	bl	8011e7e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011f00:	b005      	add	sp, #20
 8011f02:	bd30      	pop	{r4, r5, pc}
 8011f04:	3404      	adds	r4, #4
 8011f06:	a802      	add	r0, sp, #8
 8011f08:	4621      	mov	r1, r4
 8011f0a:	f7ff fc3f 	bl	801178c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011f0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f12:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011f16:	4669      	mov	r1, sp
 8011f18:	4620      	mov	r0, r4
 8011f1a:	1a9b      	subs	r3, r3, r2
 8011f1c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011f20:	f8ad 3000 	strh.w	r3, [sp]
 8011f24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f28:	1a9b      	subs	r3, r3, r2
 8011f2a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f2e:	f7fa fda2 	bl	800ca76 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8011f32:	e7e5      	b.n	8011f00 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011f34 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011f34:	460b      	mov	r3, r1
 8011f36:	680a      	ldr	r2, [r1, #0]
 8011f38:	1d01      	adds	r1, r0, #4
 8011f3a:	6992      	ldr	r2, [r2, #24]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	4710      	bx	r2

08011f40 <_ZN8touchgfx12TextProviderC1Ev>:
 8011f40:	b538      	push	{r3, r4, r5, lr}
 8011f42:	2500      	movs	r5, #0
 8011f44:	2302      	movs	r3, #2
 8011f46:	4604      	mov	r4, r0
 8011f48:	220e      	movs	r2, #14
 8011f4a:	7403      	strb	r3, [r0, #16]
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	6145      	str	r5, [r0, #20]
 8011f50:	7605      	strb	r5, [r0, #24]
 8011f52:	83c5      	strh	r5, [r0, #30]
 8011f54:	8405      	strh	r5, [r0, #32]
 8011f56:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011f58:	8705      	strh	r5, [r0, #56]	; 0x38
 8011f5a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8011f5c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8011f60:	e9c0 5500 	strd	r5, r5, [r0]
 8011f64:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8011f68:	304c      	adds	r0, #76	; 0x4c
 8011f6a:	f00a fa43 	bl	801c3f4 <memset>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	4620      	mov	r0, r4
 8011f72:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8011f76:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011f7a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8011f7e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8011f82:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8011f86:	f7f2 fc35 	bl	80047f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	bd38      	pop	{r3, r4, r5, pc}

08011f8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011f8e:	b530      	push	{r4, r5, lr}
 8011f90:	2500      	movs	r5, #0
 8011f92:	2401      	movs	r4, #1
 8011f94:	6843      	ldr	r3, [r0, #4]
 8011f96:	b913      	cbnz	r3, 8011f9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011f98:	6803      	ldr	r3, [r0, #0]
 8011f9a:	b313      	cbz	r3, 8011fe2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011f9c:	6043      	str	r3, [r0, #4]
 8011f9e:	7e03      	ldrb	r3, [r0, #24]
 8011fa0:	b143      	cbz	r3, 8011fb4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8011fa2:	6943      	ldr	r3, [r0, #20]
 8011fa4:	b12b      	cbz	r3, 8011fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011fa6:	881a      	ldrh	r2, [r3, #0]
 8011fa8:	b11a      	cbz	r2, 8011fb2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011faa:	1c9a      	adds	r2, r3, #2
 8011fac:	6142      	str	r2, [r0, #20]
 8011fae:	8818      	ldrh	r0, [r3, #0]
 8011fb0:	bd30      	pop	{r4, r5, pc}
 8011fb2:	7605      	strb	r5, [r0, #24]
 8011fb4:	6843      	ldr	r3, [r0, #4]
 8011fb6:	8819      	ldrh	r1, [r3, #0]
 8011fb8:	b199      	cbz	r1, 8011fe2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011fba:	1c9a      	adds	r2, r3, #2
 8011fbc:	2902      	cmp	r1, #2
 8011fbe:	6042      	str	r2, [r0, #4]
 8011fc0:	d1f5      	bne.n	8011fae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8011fc2:	7c03      	ldrb	r3, [r0, #16]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d8e5      	bhi.n	8011f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	3302      	adds	r3, #2
 8011fcc:	7402      	strb	r2, [r0, #16]
 8011fce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011fd2:	6143      	str	r3, [r0, #20]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d0dd      	beq.n	8011f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d0da      	beq.n	8011f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fde:	7604      	strb	r4, [r0, #24]
 8011fe0:	e7d8      	b.n	8011f94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	e7e4      	b.n	8011fb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011fe6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8011fe6:	b430      	push	{r4, r5}
 8011fe8:	6815      	ldr	r5, [r2, #0]
 8011fea:	6085      	str	r5, [r0, #8]
 8011fec:	6852      	ldr	r2, [r2, #4]
 8011fee:	6443      	str	r3, [r0, #68]	; 0x44
 8011ff0:	60c2      	str	r2, [r0, #12]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	9b02      	ldr	r3, [sp, #8]
 8011ff6:	7402      	strb	r2, [r0, #16]
 8011ff8:	6001      	str	r1, [r0, #0]
 8011ffa:	6483      	str	r3, [r0, #72]	; 0x48
 8011ffc:	6042      	str	r2, [r0, #4]
 8011ffe:	6142      	str	r2, [r0, #20]
 8012000:	7602      	strb	r2, [r0, #24]
 8012002:	8702      	strh	r2, [r0, #56]	; 0x38
 8012004:	8402      	strh	r2, [r0, #32]
 8012006:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801200a:	bc30      	pop	{r4, r5}
 801200c:	f7f2 bbf2 	b.w	80047f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08012010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8012010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	4608      	mov	r0, r1
 8012016:	b1f1      	cbz	r1, 8012056 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8012018:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801201c:	460b      	mov	r3, r1
 801201e:	f101 0708 	add.w	r7, r1, #8
 8012022:	4622      	mov	r2, r4
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	3308      	adds	r3, #8
 8012028:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801202c:	4626      	mov	r6, r4
 801202e:	42bb      	cmp	r3, r7
 8012030:	c603      	stmia	r6!, {r0, r1}
 8012032:	4634      	mov	r4, r6
 8012034:	d1f6      	bne.n	8012024 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8012036:	6818      	ldr	r0, [r3, #0]
 8012038:	6030      	str	r0, [r6, #0]
 801203a:	4610      	mov	r0, r2
 801203c:	889b      	ldrh	r3, [r3, #4]
 801203e:	80b3      	strh	r3, [r6, #4]
 8012040:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8012044:	015b      	lsls	r3, r3, #5
 8012046:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801204a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801204e:	430b      	orrs	r3, r1
 8012050:	425b      	negs	r3, r3
 8012052:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8012056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012058 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8012058:	b538      	push	{r3, r4, r5, lr}
 801205a:	460c      	mov	r4, r1
 801205c:	6811      	ldr	r1, [r2, #0]
 801205e:	4610      	mov	r0, r2
 8012060:	68cd      	ldr	r5, [r1, #12]
 8012062:	4619      	mov	r1, r3
 8012064:	47a8      	blx	r5
 8012066:	2800      	cmp	r0, #0
 8012068:	bf08      	it	eq
 801206a:	4620      	moveq	r0, r4
 801206c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012070 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	4604      	mov	r4, r0
 8012074:	4615      	mov	r5, r2
 8012076:	4608      	mov	r0, r1
 8012078:	b93a      	cbnz	r2, 801208a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801207a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801207e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8012082:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8012086:	4628      	mov	r0, r5
 8012088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801208a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801208e:	8893      	ldrh	r3, [r2, #4]
 8012090:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8012094:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012098:	79ee      	ldrb	r6, [r5, #7]
 801209a:	4316      	orrs	r6, r2
 801209c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80120a0:	189a      	adds	r2, r3, r2
 80120a2:	b2b7      	uxth	r7, r6
 80120a4:	b291      	uxth	r1, r2
 80120a6:	291d      	cmp	r1, #29
 80120a8:	f200 8084 	bhi.w	80121b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80120ac:	2201      	movs	r2, #1
 80120ae:	10f6      	asrs	r6, r6, #3
 80120b0:	408a      	lsls	r2, r1
 80120b2:	4978      	ldr	r1, [pc, #480]	; (8012294 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80120b4:	420a      	tst	r2, r1
 80120b6:	d12e      	bne.n	8012116 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80120b8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80120bc:	d07a      	beq.n	80121b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80120be:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80120c2:	462b      	mov	r3, r5
 80120c4:	f105 0e08 	add.w	lr, r5, #8
 80120c8:	4615      	mov	r5, r2
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	3308      	adds	r3, #8
 80120ce:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80120d2:	4694      	mov	ip, r2
 80120d4:	4573      	cmp	r3, lr
 80120d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80120da:	4662      	mov	r2, ip
 80120dc:	d1f5      	bne.n	80120ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80120de:	6818      	ldr	r0, [r3, #0]
 80120e0:	f8cc 0000 	str.w	r0, [ip]
 80120e4:	889b      	ldrh	r3, [r3, #4]
 80120e6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80120ea:	b2b3      	uxth	r3, r6
 80120ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80120f0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80120f4:	1aca      	subs	r2, r1, r3
 80120f6:	1bcf      	subs	r7, r1, r7
 80120f8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80120fc:	b292      	uxth	r2, r2
 80120fe:	1afb      	subs	r3, r7, r3
 8012100:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8012104:	10d2      	asrs	r2, r2, #3
 8012106:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801210a:	4302      	orrs	r2, r0
 801210c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8012110:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012114:	e7b7      	b.n	8012086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012116:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012118:	b92b      	cbnz	r3, 8012126 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801211a:	4b5f      	ldr	r3, [pc, #380]	; (8012298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801211c:	21c0      	movs	r1, #192	; 0xc0
 801211e:	4a5f      	ldr	r2, [pc, #380]	; (801229c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8012120:	485f      	ldr	r0, [pc, #380]	; (80122a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8012122:	f00a f8db 	bl	801c2dc <__assert_func>
 8012126:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012128:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801212c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801212e:	f640 6333 	movw	r3, #3635	; 0xe33
 8012132:	4299      	cmp	r1, r3
 8012134:	d110      	bne.n	8012158 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8012136:	6803      	ldr	r3, [r0, #0]
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	4798      	blx	r3
 801213c:	7b41      	ldrb	r1, [r0, #13]
 801213e:	00cb      	lsls	r3, r1, #3
 8012140:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012144:	7a03      	ldrb	r3, [r0, #8]
 8012146:	0648      	lsls	r0, r1, #25
 8012148:	ea43 0302 	orr.w	r3, r3, r2
 801214c:	bf44      	itt	mi
 801214e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012152:	b21b      	sxthmi	r3, r3
 8012154:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012158:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801215c:	462a      	mov	r2, r5
 801215e:	f105 0c08 	add.w	ip, r5, #8
 8012162:	443b      	add	r3, r7
 8012164:	4433      	add	r3, r6
 8012166:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801216a:	b29b      	uxth	r3, r3
 801216c:	4635      	mov	r5, r6
 801216e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012172:	6810      	ldr	r0, [r2, #0]
 8012174:	3208      	adds	r2, #8
 8012176:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801217a:	4637      	mov	r7, r6
 801217c:	4562      	cmp	r2, ip
 801217e:	c703      	stmia	r7!, {r0, r1}
 8012180:	463e      	mov	r6, r7
 8012182:	d1f6      	bne.n	8012172 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8012184:	6810      	ldr	r0, [r2, #0]
 8012186:	6038      	str	r0, [r7, #0]
 8012188:	8892      	ldrh	r2, [r2, #4]
 801218a:	80ba      	strh	r2, [r7, #4]
 801218c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012190:	10db      	asrs	r3, r3, #3
 8012192:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801219a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801219e:	4313      	orrs	r3, r2
 80121a0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80121a4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80121a8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80121b2:	e768      	b.n	8012086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80121b4:	f023 0204 	bic.w	r2, r3, #4
 80121b8:	f640 611b 	movw	r1, #3611	; 0xe1b
 80121bc:	428a      	cmp	r2, r1
 80121be:	d003      	beq.n	80121c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80121c0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80121c4:	4293      	cmp	r3, r2
 80121c6:	d120      	bne.n	801220a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80121c8:	3b01      	subs	r3, #1
 80121ca:	4602      	mov	r2, r0
 80121cc:	4629      	mov	r1, r5
 80121ce:	4620      	mov	r0, r4
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	f7ff ff41 	bl	8012058 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80121d6:	7b41      	ldrb	r1, [r0, #13]
 80121d8:	00cb      	lsls	r3, r1, #3
 80121da:	0649      	lsls	r1, r1, #25
 80121dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80121e0:	7a03      	ldrb	r3, [r0, #8]
 80121e2:	ea43 0302 	orr.w	r3, r3, r2
 80121e6:	bf44      	itt	mi
 80121e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80121ec:	b21b      	sxthmi	r3, r3
 80121ee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80121f2:	7b6b      	ldrb	r3, [r5, #13]
 80121f4:	7aaa      	ldrb	r2, [r5, #10]
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121fc:	4313      	orrs	r3, r2
 80121fe:	115a      	asrs	r2, r3, #5
 8012200:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8012204:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8012208:	e035      	b.n	8012276 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801220a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801220e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8012212:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8012216:	7a2a      	ldrb	r2, [r5, #8]
 8012218:	ea42 0201 	orr.w	r2, r2, r1
 801221c:	f640 6109 	movw	r1, #3593	; 0xe09
 8012220:	bf1c      	itt	ne
 8012222:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8012226:	b212      	sxthne	r2, r2
 8012228:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801222c:	f023 0210 	bic.w	r2, r3, #16
 8012230:	428a      	cmp	r2, r1
 8012232:	d003      	beq.n	801223c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8012234:	f640 6213 	movw	r2, #3603	; 0xe13
 8012238:	4293      	cmp	r3, r2
 801223a:	d129      	bne.n	8012290 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801223c:	7b6e      	ldrb	r6, [r5, #13]
 801223e:	4629      	mov	r1, r5
 8012240:	0076      	lsls	r6, r6, #1
 8012242:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012246:	7aae      	ldrb	r6, [r5, #10]
 8012248:	4316      	orrs	r6, r2
 801224a:	f640 6213 	movw	r2, #3603	; 0xe13
 801224e:	4293      	cmp	r3, r2
 8012250:	4602      	mov	r2, r0
 8012252:	4620      	mov	r0, r4
 8012254:	bf16      	itet	ne
 8012256:	f103 33ff 	addne.w	r3, r3, #4294967295
 801225a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801225e:	b29b      	uxthne	r3, r3
 8012260:	f7ff fefa 	bl	8012058 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012264:	7b43      	ldrb	r3, [r0, #13]
 8012266:	7a82      	ldrb	r2, [r0, #10]
 8012268:	005b      	lsls	r3, r3, #1
 801226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801226e:	4313      	orrs	r3, r2
 8012270:	1af6      	subs	r6, r6, r3
 8012272:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8012276:	7b69      	ldrb	r1, [r5, #13]
 8012278:	00cb      	lsls	r3, r1, #3
 801227a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801227e:	7a2b      	ldrb	r3, [r5, #8]
 8012280:	4313      	orrs	r3, r2
 8012282:	064a      	lsls	r2, r1, #25
 8012284:	bf44      	itt	mi
 8012286:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801228a:	b21b      	sxthmi	r3, r3
 801228c:	1bdb      	subs	r3, r3, r7
 801228e:	e73f      	b.n	8012110 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8012290:	2300      	movs	r3, #0
 8012292:	e7b7      	b.n	8012204 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8012294:	3fc00079 	.word	0x3fc00079
 8012298:	0801e2cc 	.word	0x0801e2cc
 801229c:	0801fd13 	.word	0x0801fd13
 80122a0:	0801e39e 	.word	0x0801e39e

080122a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80122a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122a8:	4604      	mov	r4, r0
 80122aa:	b942      	cbnz	r2, 80122be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80122ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122b0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80122b4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80122b8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80122bc:	e046      	b.n	801234c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80122be:	7b51      	ldrb	r1, [r2, #13]
 80122c0:	8893      	ldrh	r3, [r2, #4]
 80122c2:	010f      	lsls	r7, r1, #4
 80122c4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80122c8:	79d7      	ldrb	r7, [r2, #7]
 80122ca:	4307      	orrs	r7, r0
 80122cc:	2f04      	cmp	r7, #4
 80122ce:	b2bd      	uxth	r5, r7
 80122d0:	bfcc      	ite	gt
 80122d2:	08bf      	lsrgt	r7, r7, #2
 80122d4:	2701      	movle	r7, #1
 80122d6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80122da:	f200 80ab 	bhi.w	8012434 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80122de:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80122e2:	4283      	cmp	r3, r0
 80122e4:	d216      	bcs.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122e6:	f240 605b 	movw	r0, #1627	; 0x65b
 80122ea:	4283      	cmp	r3, r0
 80122ec:	d859      	bhi.n	80123a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80122ee:	f240 6057 	movw	r0, #1623	; 0x657
 80122f2:	4283      	cmp	r3, r0
 80122f4:	d20e      	bcs.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80122f6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80122fa:	d24a      	bcs.n	8012392 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80122fc:	f240 604e 	movw	r0, #1614	; 0x64e
 8012300:	4283      	cmp	r3, r0
 8012302:	d207      	bcs.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012304:	f240 601a 	movw	r0, #1562	; 0x61a
 8012308:	4283      	cmp	r3, r0
 801230a:	d02a      	beq.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801230c:	d821      	bhi.n	8012352 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801230e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8012312:	d35b      	bcc.n	80123cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012314:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8012318:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801231c:	f040 80d0 	bne.w	80124c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8012320:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8012324:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012328:	f040 80ca 	bne.w	80124c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801232c:	00cb      	lsls	r3, r1, #3
 801232e:	0649      	lsls	r1, r1, #25
 8012330:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012334:	7a13      	ldrb	r3, [r2, #8]
 8012336:	ea43 0300 	orr.w	r3, r3, r0
 801233a:	bf44      	itt	mi
 801233c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012340:	b21b      	sxthmi	r3, r3
 8012342:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012346:	1b5d      	subs	r5, r3, r5
 8012348:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801234c:	4610      	mov	r0, r2
 801234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012352:	f240 604b 	movw	r0, #1611	; 0x64b
 8012356:	4283      	cmp	r3, r0
 8012358:	d338      	bcc.n	80123cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801235a:	f240 604c 	movw	r0, #1612	; 0x64c
 801235e:	4283      	cmp	r3, r0
 8012360:	d9d8      	bls.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012362:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8012366:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801236a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801236e:	f040 80f2 	bne.w	8012556 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8012372:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012376:	f040 80ee 	bne.w	8012556 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801237a:	00cb      	lsls	r3, r1, #3
 801237c:	064e      	lsls	r6, r1, #25
 801237e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012382:	7a13      	ldrb	r3, [r2, #8]
 8012384:	ea43 0300 	orr.w	r3, r3, r0
 8012388:	bf44      	itt	mi
 801238a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801238e:	b21b      	sxthmi	r3, r3
 8012390:	e7d9      	b.n	8012346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8012392:	f240 6054 	movw	r0, #1620	; 0x654
 8012396:	4283      	cmp	r3, r0
 8012398:	d8e3      	bhi.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801239a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801239e:	d9e0      	bls.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80123a0:	e7b8      	b.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123a2:	f240 6074 	movw	r0, #1652	; 0x674
 80123a6:	4283      	cmp	r3, r0
 80123a8:	d0b4      	beq.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123aa:	d82d      	bhi.n	8012408 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80123ac:	f240 605e 	movw	r0, #1630	; 0x65e
 80123b0:	4283      	cmp	r3, r0
 80123b2:	d804      	bhi.n	80123be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80123b4:	f240 605d 	movw	r0, #1629	; 0x65d
 80123b8:	4283      	cmp	r3, r0
 80123ba:	d3d2      	bcc.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80123bc:	e7aa      	b.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123be:	f240 605f 	movw	r0, #1631	; 0x65f
 80123c2:	4283      	cmp	r3, r0
 80123c4:	d0cd      	beq.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80123c6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80123ca:	d0a3      	beq.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80123cc:	00cb      	lsls	r3, r1, #3
 80123ce:	0649      	lsls	r1, r1, #25
 80123d0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80123d4:	7a13      	ldrb	r3, [r2, #8]
 80123d6:	ea43 0300 	orr.w	r3, r3, r0
 80123da:	bf44      	itt	mi
 80123dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123e0:	b21b      	sxthmi	r3, r3
 80123e2:	1b5d      	subs	r5, r3, r5
 80123e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80123e8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80123ec:	7b53      	ldrb	r3, [r2, #13]
 80123ee:	015b      	lsls	r3, r3, #5
 80123f0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80123f4:	7993      	ldrb	r3, [r2, #6]
 80123f6:	430b      	orrs	r3, r1
 80123f8:	2105      	movs	r1, #5
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8012400:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8012404:	440b      	add	r3, r1
 8012406:	e757      	b.n	80122b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8012408:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801240c:	4283      	cmp	r3, r0
 801240e:	d809      	bhi.n	8012424 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8012410:	f240 60df 	movw	r0, #1759	; 0x6df
 8012414:	4283      	cmp	r3, r0
 8012416:	f4bf af7d 	bcs.w	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801241a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801241e:	2b05      	cmp	r3, #5
 8012420:	d8d4      	bhi.n	80123cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012422:	e777      	b.n	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012424:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8012428:	4283      	cmp	r3, r0
 801242a:	d09a      	beq.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801242c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012430:	4283      	cmp	r3, r0
 8012432:	e7ca      	b.n	80123ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8012434:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8012438:	d22b      	bcs.n	8012492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801243a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801243e:	4283      	cmp	r3, r0
 8012440:	d28f      	bcs.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012442:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012446:	4283      	cmp	r3, r0
 8012448:	d816      	bhi.n	8012478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801244a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801244e:	4283      	cmp	r3, r0
 8012450:	f4bf af60 	bcs.w	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012454:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8012458:	4283      	cmp	r3, r0
 801245a:	d80a      	bhi.n	8012472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801245c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012460:	4283      	cmp	r3, r0
 8012462:	f4bf af57 	bcs.w	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012466:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801246a:	4283      	cmp	r3, r0
 801246c:	f43f af79 	beq.w	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012470:	e7ac      	b.n	80123cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8012472:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8012476:	e7f8      	b.n	801246a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8012478:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801247c:	4283      	cmp	r3, r0
 801247e:	d802      	bhi.n	8012486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8012480:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012484:	e798      	b.n	80123b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8012486:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801248a:	4283      	cmp	r3, r0
 801248c:	f47f af42 	bne.w	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8012490:	e767      	b.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8012492:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8012496:	4283      	cmp	r3, r0
 8012498:	f43f af63 	beq.w	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801249c:	d802      	bhi.n	80124a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801249e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80124a2:	e7f2      	b.n	801248a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80124a4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80124a8:	4283      	cmp	r3, r0
 80124aa:	d805      	bhi.n	80124b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80124ac:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80124b0:	4283      	cmp	r3, r0
 80124b2:	f4ff af2f 	bcc.w	8012314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80124b6:	e754      	b.n	8012362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80124b8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80124bc:	4283      	cmp	r3, r0
 80124be:	e7af      	b.n	8012420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80124c0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80124c4:	4617      	mov	r7, r2
 80124c6:	f102 0808 	add.w	r8, r2, #8
 80124ca:	4666      	mov	r6, ip
 80124cc:	6838      	ldr	r0, [r7, #0]
 80124ce:	3708      	adds	r7, #8
 80124d0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80124d4:	46e6      	mov	lr, ip
 80124d6:	4547      	cmp	r7, r8
 80124d8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80124dc:	46f4      	mov	ip, lr
 80124de:	d1f5      	bne.n	80124cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80124e0:	6838      	ldr	r0, [r7, #0]
 80124e2:	f8ce 0000 	str.w	r0, [lr]
 80124e6:	88b9      	ldrh	r1, [r7, #4]
 80124e8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80124ec:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80124f0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80124f4:	d009      	beq.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80124f6:	7b51      	ldrb	r1, [r2, #13]
 80124f8:	7992      	ldrb	r2, [r2, #6]
 80124fa:	0149      	lsls	r1, r1, #5
 80124fc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012500:	4311      	orrs	r1, r2
 8012502:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012506:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801250a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801250e:	d00d      	beq.n	801252c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8012510:	442b      	add	r3, r5
 8012512:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012516:	b29b      	uxth	r3, r3
 8012518:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801251c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012520:	10db      	asrs	r3, r3, #3
 8012522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012526:	4313      	orrs	r3, r2
 8012528:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801252c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012530:	00cb      	lsls	r3, r1, #3
 8012532:	064f      	lsls	r7, r1, #25
 8012534:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012538:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801253c:	ea43 0302 	orr.w	r3, r3, r2
 8012540:	bf44      	itt	mi
 8012542:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012546:	b21b      	sxthmi	r3, r3
 8012548:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801254c:	1b5d      	subs	r5, r3, r5
 801254e:	4632      	mov	r2, r6
 8012550:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012554:	e6fa      	b.n	801234c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8012556:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801255a:	4694      	mov	ip, r2
 801255c:	f102 0908 	add.w	r9, r2, #8
 8012560:	4676      	mov	r6, lr
 8012562:	f8dc 0000 	ldr.w	r0, [ip]
 8012566:	f10c 0c08 	add.w	ip, ip, #8
 801256a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801256e:	46f0      	mov	r8, lr
 8012570:	45cc      	cmp	ip, r9
 8012572:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8012576:	46c6      	mov	lr, r8
 8012578:	d1f3      	bne.n	8012562 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801257a:	f8dc 0000 	ldr.w	r0, [ip]
 801257e:	f8c8 0000 	str.w	r0, [r8]
 8012582:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8012586:	f8a8 1004 	strh.w	r1, [r8, #4]
 801258a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801258e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012592:	d009      	beq.n	80125a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8012594:	7b51      	ldrb	r1, [r2, #13]
 8012596:	7992      	ldrb	r2, [r2, #6]
 8012598:	0149      	lsls	r1, r1, #5
 801259a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801259e:	4311      	orrs	r1, r2
 80125a0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80125a4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80125a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80125ac:	d00d      	beq.n	80125ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80125ae:	1bdb      	subs	r3, r3, r7
 80125b0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80125ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80125be:	10db      	asrs	r3, r3, #3
 80125c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125c4:	4313      	orrs	r3, r2
 80125c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80125ca:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80125ce:	00cb      	lsls	r3, r1, #3
 80125d0:	0648      	lsls	r0, r1, #25
 80125d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80125d6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80125da:	ea43 0302 	orr.w	r3, r3, r2
 80125de:	bf44      	itt	mi
 80125e0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80125e4:	b21b      	sxthmi	r3, r3
 80125e6:	e7b1      	b.n	801254c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080125e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80125e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ec:	461e      	mov	r6, r3
 80125ee:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80125f0:	4604      	mov	r4, r0
 80125f2:	4617      	mov	r7, r2
 80125f4:	b92b      	cbnz	r3, 8012602 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80125f6:	4b25      	ldr	r3, [pc, #148]	; (801268c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80125f8:	21c0      	movs	r1, #192	; 0xc0
 80125fa:	4a25      	ldr	r2, [pc, #148]	; (8012690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80125fc:	4825      	ldr	r0, [pc, #148]	; (8012694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80125fe:	f009 fe6d 	bl	801c2dc <__assert_func>
 8012602:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012604:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012608:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801260c:	f7f2 f8b0 	bl	8004770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012610:	4605      	mov	r5, r0
 8012612:	b918      	cbnz	r0, 801261c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8012614:	6030      	str	r0, [r6, #0]
 8012616:	4628      	mov	r0, r5
 8012618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	4601      	mov	r1, r0
 8012620:	4638      	mov	r0, r7
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	4798      	blx	r3
 8012626:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801262a:	4602      	mov	r2, r0
 801262c:	6030      	str	r0, [r6, #0]
 801262e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012632:	d213      	bcs.n	801265c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8012634:	4643      	mov	r3, r8
 8012636:	4639      	mov	r1, r7
 8012638:	4620      	mov	r0, r4
 801263a:	f7ff fe33 	bl	80122a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801263e:	6030      	str	r0, [r6, #0]
 8012640:	6833      	ldr	r3, [r6, #0]
 8012642:	b143      	cbz	r3, 8012656 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8012644:	7b5a      	ldrb	r2, [r3, #13]
 8012646:	7a9b      	ldrb	r3, [r3, #10]
 8012648:	0052      	lsls	r2, r2, #1
 801264a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801264e:	4313      	orrs	r3, r2
 8012650:	bf0c      	ite	eq
 8012652:	2301      	moveq	r3, #1
 8012654:	2300      	movne	r3, #0
 8012656:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801265a:	e7dc      	b.n	8012616 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801265c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012660:	b29b      	uxth	r3, r3
 8012662:	2b7f      	cmp	r3, #127	; 0x7f
 8012664:	d804      	bhi.n	8012670 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8012666:	4639      	mov	r1, r7
 8012668:	4620      	mov	r0, r4
 801266a:	f7ff fd01 	bl	8012070 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801266e:	e7e6      	b.n	801263e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8012670:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8012674:	2b00      	cmp	r3, #0
 8012676:	d0e3      	beq.n	8012640 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012678:	f640 1302 	movw	r3, #2306	; 0x902
 801267c:	429d      	cmp	r5, r3
 801267e:	d1df      	bne.n	8012640 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8012680:	4601      	mov	r1, r0
 8012682:	4620      	mov	r0, r4
 8012684:	f7ff fcc4 	bl	8012010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012688:	e7d9      	b.n	801263e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801268a:	bf00      	nop
 801268c:	0801e2cc 	.word	0x0801e2cc
 8012690:	0801fd13 	.word	0x0801fd13
 8012694:	0801e39e 	.word	0x0801e39e

08012698 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801269c:	461e      	mov	r6, r3
 801269e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80126a0:	4604      	mov	r4, r0
 80126a2:	4617      	mov	r7, r2
 80126a4:	b92b      	cbnz	r3, 80126b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 80126a6:	4b26      	ldr	r3, [pc, #152]	; (8012740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 80126a8:	21c0      	movs	r1, #192	; 0xc0
 80126aa:	4a26      	ldr	r2, [pc, #152]	; (8012744 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 80126ac:	4826      	ldr	r0, [pc, #152]	; (8012748 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 80126ae:	f009 fe15 	bl	801c2dc <__assert_func>
 80126b2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80126b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80126b8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80126bc:	f7f2 f858 	bl	8004770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80126c0:	4605      	mov	r5, r0
 80126c2:	b918      	cbnz	r0, 80126cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 80126c4:	6030      	str	r0, [r6, #0]
 80126c6:	4628      	mov	r0, r5
 80126c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	4601      	mov	r1, r0
 80126d0:	4638      	mov	r0, r7
 80126d2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80126d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126da:	47c8      	blx	r9
 80126dc:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80126e0:	4602      	mov	r2, r0
 80126e2:	6030      	str	r0, [r6, #0]
 80126e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126e8:	d213      	bcs.n	8012712 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80126ea:	4643      	mov	r3, r8
 80126ec:	4639      	mov	r1, r7
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7ff fdd8 	bl	80122a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80126f4:	6030      	str	r0, [r6, #0]
 80126f6:	6833      	ldr	r3, [r6, #0]
 80126f8:	b143      	cbz	r3, 801270c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80126fa:	7b5a      	ldrb	r2, [r3, #13]
 80126fc:	7a9b      	ldrb	r3, [r3, #10]
 80126fe:	0052      	lsls	r2, r2, #1
 8012700:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012704:	4313      	orrs	r3, r2
 8012706:	bf0c      	ite	eq
 8012708:	2301      	moveq	r3, #1
 801270a:	2300      	movne	r3, #0
 801270c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8012710:	e7d9      	b.n	80126c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8012712:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012716:	b29b      	uxth	r3, r3
 8012718:	2b7f      	cmp	r3, #127	; 0x7f
 801271a:	d804      	bhi.n	8012726 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801271c:	4639      	mov	r1, r7
 801271e:	4620      	mov	r0, r4
 8012720:	f7ff fca6 	bl	8012070 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012724:	e7e6      	b.n	80126f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8012726:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801272a:	2b00      	cmp	r3, #0
 801272c:	d0e3      	beq.n	80126f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801272e:	f640 1302 	movw	r3, #2306	; 0x902
 8012732:	429d      	cmp	r5, r3
 8012734:	d1df      	bne.n	80126f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8012736:	4601      	mov	r1, r0
 8012738:	4620      	mov	r0, r4
 801273a:	f7ff fc69 	bl	8012010 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801273e:	e7d9      	b.n	80126f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8012740:	0801e2cc 	.word	0x0801e2cc
 8012744:	0801fd13 	.word	0x0801fd13
 8012748:	0801e39e 	.word	0x0801e39e

0801274c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801274c:	b510      	push	{r4, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8012754:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012756:	b9d9      	cbnz	r1, 8012790 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8012758:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801275a:	2b0a      	cmp	r3, #10
 801275c:	d037      	beq.n	80127ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801275e:	4620      	mov	r0, r4
 8012760:	f7ff fc15 	bl	8011f8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8012764:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012766:	2b09      	cmp	r3, #9
 8012768:	d906      	bls.n	8012778 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801276a:	4b19      	ldr	r3, [pc, #100]	; (80127d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801276c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8012770:	4a18      	ldr	r2, [pc, #96]	; (80127d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8012772:	4819      	ldr	r0, [pc, #100]	; (80127d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8012774:	f009 fdb2 	bl	801c2dc <__assert_func>
 8012778:	1c5a      	adds	r2, r3, #1
 801277a:	8722      	strh	r2, [r4, #56]	; 0x38
 801277c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801277e:	4413      	add	r3, r2
 8012780:	b29b      	uxth	r3, r3
 8012782:	2b09      	cmp	r3, #9
 8012784:	bf88      	it	hi
 8012786:	3b0a      	subhi	r3, #10
 8012788:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801278c:	8458      	strh	r0, [r3, #34]	; 0x22
 801278e:	e7e3      	b.n	8012758 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8012790:	2b0a      	cmp	r3, #10
 8012792:	d01c      	beq.n	80127ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8012794:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012796:	3901      	subs	r1, #1
 8012798:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801279c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801279e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80127a2:	1c51      	adds	r1, r2, #1
 80127a4:	b289      	uxth	r1, r1
 80127a6:	2901      	cmp	r1, #1
 80127a8:	bf8a      	itet	hi
 80127aa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80127ae:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80127b0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80127b2:	2b09      	cmp	r3, #9
 80127b4:	d8d9      	bhi.n	801276a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 80127b6:	1c5a      	adds	r2, r3, #1
 80127b8:	8722      	strh	r2, [r4, #56]	; 0x38
 80127ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80127bc:	4413      	add	r3, r2
 80127be:	b29b      	uxth	r3, r3
 80127c0:	2b09      	cmp	r3, #9
 80127c2:	bf88      	it	hi
 80127c4:	3b0a      	subhi	r3, #10
 80127c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80127ca:	8458      	strh	r0, [r3, #34]	; 0x22
 80127cc:	e7c0      	b.n	8012750 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80127ce:	bd10      	pop	{r4, pc}
 80127d0:	0801fae4 	.word	0x0801fae4
 80127d4:	0801fe69 	.word	0x0801fe69
 80127d8:	0801e39e 	.word	0x0801e39e

080127dc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80127e0:	4604      	mov	r4, r0
 80127e2:	b92a      	cbnz	r2, 80127f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80127e4:	4b13      	ldr	r3, [pc, #76]	; (8012834 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80127e6:	21d5      	movs	r1, #213	; 0xd5
 80127e8:	4a13      	ldr	r2, [pc, #76]	; (8012838 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80127ea:	4814      	ldr	r0, [pc, #80]	; (801283c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80127ec:	f009 fd76 	bl	801c2dc <__assert_func>
 80127f0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80127f2:	3a01      	subs	r2, #1
 80127f4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80127f8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 80127fa:	8702      	strh	r2, [r0, #56]	; 0x38
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	b292      	uxth	r2, r2
 8012800:	2a09      	cmp	r2, #9
 8012802:	bf8a      	itet	hi
 8012804:	3b09      	subhi	r3, #9
 8012806:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8012808:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801280a:	f7ff ff9f 	bl	801274c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801280e:	8c23      	ldrh	r3, [r4, #32]
 8012810:	2b01      	cmp	r3, #1
 8012812:	bf9c      	itt	ls
 8012814:	3301      	addls	r3, #1
 8012816:	8423      	strhls	r3, [r4, #32]
 8012818:	8be3      	ldrh	r3, [r4, #30]
 801281a:	b90b      	cbnz	r3, 8012820 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801281c:	2302      	movs	r3, #2
 801281e:	83e3      	strh	r3, [r4, #30]
 8012820:	8be3      	ldrh	r3, [r4, #30]
 8012822:	4628      	mov	r0, r5
 8012824:	3b01      	subs	r3, #1
 8012826:	b29b      	uxth	r3, r3
 8012828:	83e3      	strh	r3, [r4, #30]
 801282a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801282e:	8365      	strh	r5, [r4, #26]
 8012830:	bd38      	pop	{r3, r4, r5, pc}
 8012832:	bf00      	nop
 8012834:	0801e2cc 	.word	0x0801e2cc
 8012838:	0801fdbe 	.word	0x0801fdbe
 801283c:	0801e39e 	.word	0x0801e39e

08012840 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8012840:	428a      	cmp	r2, r1
 8012842:	b538      	push	{r3, r4, r5, lr}
 8012844:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8012846:	d90c      	bls.n	8012862 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8012848:	b92c      	cbnz	r4, 8012856 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801284a:	4b1c      	ldr	r3, [pc, #112]	; (80128bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801284c:	21e1      	movs	r1, #225	; 0xe1
 801284e:	4a1c      	ldr	r2, [pc, #112]	; (80128c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8012850:	481c      	ldr	r0, [pc, #112]	; (80128c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8012852:	f009 fd43 	bl	801c2dc <__assert_func>
 8012856:	3c01      	subs	r4, #1
 8012858:	4b1b      	ldr	r3, [pc, #108]	; (80128c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801285a:	4a1c      	ldr	r2, [pc, #112]	; (80128cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801285c:	21c5      	movs	r1, #197	; 0xc5
 801285e:	8704      	strh	r4, [r0, #56]	; 0x38
 8012860:	e7f6      	b.n	8012850 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8012862:	428c      	cmp	r4, r1
 8012864:	d203      	bcs.n	801286e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8012866:	4b1a      	ldr	r3, [pc, #104]	; (80128d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8012868:	21cb      	movs	r1, #203	; 0xcb
 801286a:	4a1a      	ldr	r2, [pc, #104]	; (80128d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801286c:	e7f0      	b.n	8012850 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801286e:	1a64      	subs	r4, r4, r1
 8012870:	250a      	movs	r5, #10
 8012872:	8704      	strh	r4, [r0, #56]	; 0x38
 8012874:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8012876:	4421      	add	r1, r4
 8012878:	b289      	uxth	r1, r1
 801287a:	2909      	cmp	r1, #9
 801287c:	bf88      	it	hi
 801287e:	390a      	subhi	r1, #10
 8012880:	86c1      	strh	r1, [r0, #54]	; 0x36
 8012882:	b1ba      	cbz	r2, 80128b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8012884:	3a01      	subs	r2, #1
 8012886:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8012888:	b292      	uxth	r2, r2
 801288a:	2909      	cmp	r1, #9
 801288c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012890:	d903      	bls.n	801289a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8012892:	4b11      	ldr	r3, [pc, #68]	; (80128d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8012894:	21e6      	movs	r1, #230	; 0xe6
 8012896:	4a11      	ldr	r2, [pc, #68]	; (80128dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8012898:	e7da      	b.n	8012850 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801289a:	3101      	adds	r1, #1
 801289c:	8701      	strh	r1, [r0, #56]	; 0x38
 801289e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80128a0:	b901      	cbnz	r1, 80128a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80128a2:	86c5      	strh	r5, [r0, #54]	; 0x36
 80128a4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80128a6:	3901      	subs	r1, #1
 80128a8:	b289      	uxth	r1, r1
 80128aa:	86c1      	strh	r1, [r0, #54]	; 0x36
 80128ac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80128b0:	844c      	strh	r4, [r1, #34]	; 0x22
 80128b2:	e7e6      	b.n	8012882 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80128b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128b8:	f7ff bf48 	b.w	801274c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80128bc:	0801e2cc 	.word	0x0801e2cc
 80128c0:	0801fb97 	.word	0x0801fb97
 80128c4:	0801e39e 	.word	0x0801e39e
 80128c8:	0801e3ca 	.word	0x0801e3ca
 80128cc:	0801fc41 	.word	0x0801fc41
 80128d0:	0801faf0 	.word	0x0801faf0
 80128d4:	0801ff18 	.word	0x0801ff18
 80128d8:	0801fafc 	.word	0x0801fafc
 80128dc:	0801fb0f 	.word	0x0801fb0f

080128e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80128e0:	3a01      	subs	r2, #1
 80128e2:	b570      	push	{r4, r5, r6, lr}
 80128e4:	b292      	uxth	r2, r2
 80128e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80128ea:	42b2      	cmp	r2, r6
 80128ec:	d019      	beq.n	8012922 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80128ee:	8c04      	ldrh	r4, [r0, #32]
 80128f0:	f831 5b02 	ldrh.w	r5, [r1], #2
 80128f4:	4294      	cmp	r4, r2
 80128f6:	d805      	bhi.n	8012904 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80128f8:	4b19      	ldr	r3, [pc, #100]	; (8012960 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80128fa:	4a1a      	ldr	r2, [pc, #104]	; (8012964 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80128fc:	21c5      	movs	r1, #197	; 0xc5
 80128fe:	481a      	ldr	r0, [pc, #104]	; (8012968 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8012900:	f009 fcec 	bl	801c2dc <__assert_func>
 8012904:	8bc4      	ldrh	r4, [r0, #30]
 8012906:	4414      	add	r4, r2
 8012908:	3a01      	subs	r2, #1
 801290a:	b2a4      	uxth	r4, r4
 801290c:	b292      	uxth	r2, r2
 801290e:	2c01      	cmp	r4, #1
 8012910:	bf88      	it	hi
 8012912:	3c02      	subhi	r4, #2
 8012914:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012918:	8b64      	ldrh	r4, [r4, #26]
 801291a:	42ac      	cmp	r4, r5
 801291c:	d0e5      	beq.n	80128ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801291e:	2000      	movs	r0, #0
 8012920:	bd70      	pop	{r4, r5, r6, pc}
 8012922:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012926:	2400      	movs	r4, #0
 8012928:	4413      	add	r3, r2
 801292a:	b2a2      	uxth	r2, r4
 801292c:	429a      	cmp	r2, r3
 801292e:	da14      	bge.n	801295a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8012930:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8012932:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012936:	4296      	cmp	r6, r2
 8012938:	d802      	bhi.n	8012940 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801293a:	4b09      	ldr	r3, [pc, #36]	; (8012960 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801293c:	4a0b      	ldr	r2, [pc, #44]	; (801296c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801293e:	e7dd      	b.n	80128fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8012940:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8012942:	3401      	adds	r4, #1
 8012944:	4432      	add	r2, r6
 8012946:	b292      	uxth	r2, r2
 8012948:	2a09      	cmp	r2, #9
 801294a:	bf88      	it	hi
 801294c:	3a0a      	subhi	r2, #10
 801294e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012952:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8012954:	42aa      	cmp	r2, r5
 8012956:	d0e8      	beq.n	801292a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8012958:	e7e1      	b.n	801291e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801295a:	2001      	movs	r0, #1
 801295c:	e7e0      	b.n	8012920 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801295e:	bf00      	nop
 8012960:	0801e3ca 	.word	0x0801e3ca
 8012964:	0801ff9c 	.word	0x0801ff9c
 8012968:	0801e39e 	.word	0x0801e39e
 801296c:	0801fc41 	.word	0x0801fc41

08012970 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8012970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012974:	4605      	mov	r5, r0
 8012976:	4616      	mov	r6, r2
 8012978:	1c8c      	adds	r4, r1, #2
 801297a:	8809      	ldrh	r1, [r1, #0]
 801297c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8012980:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8012984:	42b3      	cmp	r3, r6
 8012986:	d124      	bne.n	80129d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8012988:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801298c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012990:	f001 070f 	and.w	r7, r1, #15
 8012994:	4652      	mov	r2, sl
 8012996:	f8cd 8000 	str.w	r8, [sp]
 801299a:	464b      	mov	r3, r9
 801299c:	4621      	mov	r1, r4
 801299e:	4628      	mov	r0, r5
 80129a0:	f7ff ff9e 	bl	80128e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80129a4:	4683      	mov	fp, r0
 80129a6:	b168      	cbz	r0, 80129c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80129a8:	eb0a 0109 	add.w	r1, sl, r9
 80129ac:	463a      	mov	r2, r7
 80129ae:	4628      	mov	r0, r5
 80129b0:	4441      	add	r1, r8
 80129b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80129b6:	4649      	mov	r1, r9
 80129b8:	f7ff ff42 	bl	8012840 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80129bc:	4658      	mov	r0, fp
 80129be:	b003      	add	sp, #12
 80129c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c4:	eb07 010a 	add.w	r1, r7, sl
 80129c8:	4449      	add	r1, r9
 80129ca:	4441      	add	r1, r8
 80129cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80129d0:	e7d2      	b.n	8012978 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80129d2:	f04f 0b00 	mov.w	fp, #0
 80129d6:	e7f1      	b.n	80129bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080129d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	8810      	ldrh	r0, [r2, #0]
 80129dc:	4298      	cmp	r0, r3
 80129de:	d817      	bhi.n	8012a10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129e0:	1e48      	subs	r0, r1, #1
 80129e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80129e6:	4298      	cmp	r0, r3
 80129e8:	d312      	bcc.n	8012a10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129ea:	2400      	movs	r4, #0
 80129ec:	428c      	cmp	r4, r1
 80129ee:	d20f      	bcs.n	8012a10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80129f0:	1860      	adds	r0, r4, r1
 80129f2:	1040      	asrs	r0, r0, #1
 80129f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80129f8:	0085      	lsls	r5, r0, #2
 80129fa:	42b3      	cmp	r3, r6
 80129fc:	d902      	bls.n	8012a04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80129fe:	3001      	adds	r0, #1
 8012a00:	b284      	uxth	r4, r0
 8012a02:	e7f3      	b.n	80129ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012a04:	d201      	bcs.n	8012a0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012a06:	b281      	uxth	r1, r0
 8012a08:	e7f0      	b.n	80129ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012a0a:	442a      	add	r2, r5
 8012a0c:	8850      	ldrh	r0, [r2, #2]
 8012a0e:	bd70      	pop	{r4, r5, r6, pc}
 8012a10:	2000      	movs	r0, #0
 8012a12:	e7fc      	b.n	8012a0e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012a14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a18:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	260b      	movs	r6, #11
 8012a1e:	886f      	ldrh	r7, [r5, #2]
 8012a20:	087f      	lsrs	r7, r7, #1
 8012a22:	3e01      	subs	r6, #1
 8012a24:	d01b      	beq.n	8012a5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012a26:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012a28:	b92b      	cbnz	r3, 8012a36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8012a2a:	4b0e      	ldr	r3, [pc, #56]	; (8012a64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8012a2c:	21c0      	movs	r1, #192	; 0xc0
 8012a2e:	4a0e      	ldr	r2, [pc, #56]	; (8012a68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8012a30:	480e      	ldr	r0, [pc, #56]	; (8012a6c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8012a32:	f009 fc53 	bl	801c2dc <__assert_func>
 8012a36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012a38:	462a      	mov	r2, r5
 8012a3a:	4639      	mov	r1, r7
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a42:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012a46:	4643      	mov	r3, r8
 8012a48:	f7ff ffc6 	bl	80129d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012a4c:	b138      	cbz	r0, 8012a5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012a4e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012a52:	4642      	mov	r2, r8
 8012a54:	4620      	mov	r0, r4
 8012a56:	f7ff ff8b 	bl	8012970 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d1e1      	bne.n	8012a22 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a62:	bf00      	nop
 8012a64:	0801e2cc 	.word	0x0801e2cc
 8012a68:	0801fd13 	.word	0x0801fd13
 8012a6c:	0801e39e 	.word	0x0801e39e

08012a70 <_ZN8touchgfx8ceil28_4El>:
 8012a70:	f110 030f 	adds.w	r3, r0, #15
 8012a74:	d401      	bmi.n	8012a7a <_ZN8touchgfx8ceil28_4El+0xa>
 8012a76:	1118      	asrs	r0, r3, #4
 8012a78:	4770      	bx	lr
 8012a7a:	2210      	movs	r2, #16
 8012a7c:	f1c0 0001 	rsb	r0, r0, #1
 8012a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a84:	f010 000f 	ands.w	r0, r0, #15
 8012a88:	bf18      	it	ne
 8012a8a:	2001      	movne	r0, #1
 8012a8c:	1a18      	subs	r0, r3, r0
 8012a8e:	4770      	bx	lr

08012a90 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8012a90:	2900      	cmp	r1, #0
 8012a92:	b538      	push	{r3, r4, r5, lr}
 8012a94:	dc05      	bgt.n	8012aa2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8012a96:	4b0f      	ldr	r3, [pc, #60]	; (8012ad4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8012a98:	21f7      	movs	r1, #247	; 0xf7
 8012a9a:	4a0f      	ldr	r2, [pc, #60]	; (8012ad8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8012a9c:	480f      	ldr	r0, [pc, #60]	; (8012adc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8012a9e:	f009 fc1d 	bl	801c2dc <__assert_func>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	db06      	blt.n	8012ab4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8012aa6:	fb90 f4f1 	sdiv	r4, r0, r1
 8012aaa:	fb01 0114 	mls	r1, r1, r4, r0
 8012aae:	6014      	str	r4, [r2, #0]
 8012ab0:	6019      	str	r1, [r3, #0]
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	4240      	negs	r0, r0
 8012ab6:	fb90 f4f1 	sdiv	r4, r0, r1
 8012aba:	4265      	negs	r5, r4
 8012abc:	fb01 0014 	mls	r0, r1, r4, r0
 8012ac0:	6015      	str	r5, [r2, #0]
 8012ac2:	6018      	str	r0, [r3, #0]
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d0f4      	beq.n	8012ab2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8012ac8:	6810      	ldr	r0, [r2, #0]
 8012aca:	3801      	subs	r0, #1
 8012acc:	6010      	str	r0, [r2, #0]
 8012ace:	6818      	ldr	r0, [r3, #0]
 8012ad0:	1a09      	subs	r1, r1, r0
 8012ad2:	e7ed      	b.n	8012ab0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8012ad4:	0802006d 	.word	0x0802006d
 8012ad8:	080200ac 	.word	0x080200ac
 8012adc:	0802007d 	.word	0x0802007d

08012ae0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012ae0:	b570      	push	{r4, r5, r6, lr}
 8012ae2:	694a      	ldr	r2, [r1, #20]
 8012ae4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012ae6:	684b      	ldr	r3, [r1, #4]
 8012ae8:	1b54      	subs	r4, r2, r5
 8012aea:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012aec:	f000 8106 	beq.w	8012cfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012af0:	1b9b      	subs	r3, r3, r6
 8012af2:	d003      	beq.n	8012afc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012af4:	4363      	muls	r3, r4
 8012af6:	2210      	movs	r2, #16
 8012af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012afc:	680c      	ldr	r4, [r1, #0]
 8012afe:	698a      	ldr	r2, [r1, #24]
 8012b00:	1b65      	subs	r5, r4, r5
 8012b02:	f000 80fd 	beq.w	8012d00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012b06:	1b92      	subs	r2, r2, r6
 8012b08:	d003      	beq.n	8012b12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012b0a:	436a      	muls	r2, r5
 8012b0c:	2410      	movs	r4, #16
 8012b0e:	fb92 f2f4 	sdiv	r2, r2, r4
 8012b12:	1a9b      	subs	r3, r3, r2
 8012b14:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012d3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b1c:	460a      	mov	r2, r1
 8012b1e:	ee07 3a90 	vmov	s15, r3
 8012b22:	f100 040c 	add.w	r4, r0, #12
 8012b26:	4603      	mov	r3, r0
 8012b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b2c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b30:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012b34:	eeb1 6a43 	vneg.f32	s12, s6
 8012b38:	edd2 7a02 	vldr	s15, [r2, #8]
 8012b3c:	3214      	adds	r2, #20
 8012b3e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b42:	ece3 6a01 	vstmia	r3!, {s13}
 8012b46:	429c      	cmp	r4, r3
 8012b48:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012b4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b50:	edc3 7a02 	vstr	s15, [r3, #8]
 8012b54:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b5c:	edc3 7a05 	vstr	s15, [r3, #20]
 8012b60:	d1ea      	bne.n	8012b38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012b62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012b64:	698b      	ldr	r3, [r1, #24]
 8012b66:	edd0 4a02 	vldr	s9, [r0, #8]
 8012b6a:	1a9b      	subs	r3, r3, r2
 8012b6c:	edd0 3a00 	vldr	s7, [r0]
 8012b70:	edd0 6a01 	vldr	s13, [r0, #4]
 8012b74:	ee07 3a90 	vmov	s15, r3
 8012b78:	684b      	ldr	r3, [r1, #4]
 8012b7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012b7e:	ed90 5a05 	vldr	s10, [r0, #20]
 8012b82:	1a9b      	subs	r3, r3, r2
 8012b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b88:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012b8c:	ed90 2a03 	vldr	s4, [r0, #12]
 8012b90:	ee07 3a10 	vmov	s14, r3
 8012b94:	edd0 5a04 	vldr	s11, [r0, #16]
 8012b98:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b9c:	ed90 1a07 	vldr	s2, [r0, #28]
 8012ba0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ba4:	edd0 2a06 	vldr	s5, [r0, #24]
 8012ba8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012bac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012bb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012bb4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012bb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012bbc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012bc0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012bc4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012bc6:	694a      	ldr	r2, [r1, #20]
 8012bc8:	1b13      	subs	r3, r2, r4
 8012bca:	ee07 3a10 	vmov	s14, r3
 8012bce:	680b      	ldr	r3, [r1, #0]
 8012bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bd4:	1b1b      	subs	r3, r3, r4
 8012bd6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012bda:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012bde:	ee07 3a10 	vmov	s14, r3
 8012be2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012be6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012bea:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012bee:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012bf2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012bf6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012bf8:	698b      	ldr	r3, [r1, #24]
 8012bfa:	1a9b      	subs	r3, r3, r2
 8012bfc:	ee06 3a90 	vmov	s13, r3
 8012c00:	684b      	ldr	r3, [r1, #4]
 8012c02:	1a9b      	subs	r3, r3, r2
 8012c04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c08:	ee07 3a10 	vmov	s14, r3
 8012c0c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012c10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c14:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012c18:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c1c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012c20:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012c24:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012c28:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c2a:	694a      	ldr	r2, [r1, #20]
 8012c2c:	1b13      	subs	r3, r2, r4
 8012c2e:	ee07 3a10 	vmov	s14, r3
 8012c32:	680b      	ldr	r3, [r1, #0]
 8012c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c38:	1b1b      	subs	r3, r3, r4
 8012c3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c3e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012c42:	ee07 3a10 	vmov	s14, r3
 8012c46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c4e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012c52:	edd0 5a08 	vldr	s11, [r0, #32]
 8012c56:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012c5a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012c5e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012c62:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012c66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012c68:	698b      	ldr	r3, [r1, #24]
 8012c6a:	1a9b      	subs	r3, r3, r2
 8012c6c:	ee07 3a10 	vmov	s14, r3
 8012c70:	684b      	ldr	r3, [r1, #4]
 8012c72:	1a9b      	subs	r3, r3, r2
 8012c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c78:	ee01 3a90 	vmov	s3, r3
 8012c7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c80:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012c84:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012c88:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012c8c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012c90:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012c94:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012c98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c9a:	694a      	ldr	r2, [r1, #20]
 8012c9c:	1b13      	subs	r3, r2, r4
 8012c9e:	ee03 3a10 	vmov	s6, r3
 8012ca2:	680b      	ldr	r3, [r1, #0]
 8012ca4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012ca8:	1b1b      	subs	r3, r3, r4
 8012caa:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012cae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012cb2:	ee03 3a10 	vmov	s6, r3
 8012cb6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012cba:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012cbe:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012cc2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012cc6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8012cca:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8012cce:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012cd2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cda:	dd13      	ble.n	8012d04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ce0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012ce4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012ce6:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf2:	dd15      	ble.n	8012d20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cf8:	6403      	str	r3, [r0, #64]	; 0x40
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	4623      	mov	r3, r4
 8012cfe:	e6fd      	b.n	8012afc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012d00:	462a      	mov	r2, r5
 8012d02:	e706      	b.n	8012b12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012d04:	d502      	bpl.n	8012d0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012d06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012d0a:	e7e9      	b.n	8012ce0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012d0c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012d10:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012d14:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1c:	dade      	bge.n	8012cdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012d1e:	e7f2      	b.n	8012d06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012d20:	d502      	bpl.n	8012d28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012d22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012d26:	e7e7      	b.n	8012cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012d28:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012d2c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012d30:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d38:	dadc      	bge.n	8012cf4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012d3a:	e7f2      	b.n	8012d22 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012d3c:	3d800000 	.word	0x3d800000

08012d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d44:	f04f 0814 	mov.w	r8, #20
 8012d48:	4604      	mov	r4, r0
 8012d4a:	4617      	mov	r7, r2
 8012d4c:	460d      	mov	r5, r1
 8012d4e:	fb08 f903 	mul.w	r9, r8, r3
 8012d52:	461e      	mov	r6, r3
 8012d54:	eb02 0a09 	add.w	sl, r2, r9
 8012d58:	f8da 0004 	ldr.w	r0, [sl, #4]
 8012d5c:	f7ff fe88 	bl	8012a70 <_ZN8touchgfx8ceil28_4El>
 8012d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d62:	6160      	str	r0, [r4, #20]
 8012d64:	fb08 f803 	mul.w	r8, r8, r3
 8012d68:	9001      	str	r0, [sp, #4]
 8012d6a:	eb07 0b08 	add.w	fp, r7, r8
 8012d6e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012d72:	f7ff fe7d 	bl	8012a70 <_ZN8touchgfx8ceil28_4El>
 8012d76:	9a01      	ldr	r2, [sp, #4]
 8012d78:	1a80      	subs	r0, r0, r2
 8012d7a:	61a0      	str	r0, [r4, #24]
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	f000 8088 	beq.w	8012e92 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8012d82:	f857 3009 	ldr.w	r3, [r7, r9]
 8012d86:	f857 c008 	ldr.w	ip, [r7, r8]
 8012d8a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012d8e:	ebac 0c03 	sub.w	ip, ip, r3
 8012d92:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012d96:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8012d9a:	1a40      	subs	r0, r0, r1
 8012d9c:	fb0b f202 	mul.w	r2, fp, r2
 8012da0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8012da4:	fb0c 2211 	mls	r2, ip, r1, r2
 8012da8:	4641      	mov	r1, r8
 8012daa:	fb00 2003 	mla	r0, r0, r3, r2
 8012dae:	f104 0310 	add.w	r3, r4, #16
 8012db2:	4622      	mov	r2, r4
 8012db4:	3801      	subs	r0, #1
 8012db6:	4440      	add	r0, r8
 8012db8:	f7ff fe6a 	bl	8012a90 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012dbc:	f104 0308 	add.w	r3, r4, #8
 8012dc0:	1d22      	adds	r2, r4, #4
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	4658      	mov	r0, fp
 8012dc6:	f7ff fe63 	bl	8012a90 <_ZN8touchgfx11floorDivModEllRlS0_>
 8012dca:	f8c4 800c 	str.w	r8, [r4, #12]
 8012dce:	6962      	ldr	r2, [r4, #20]
 8012dd0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012dd4:	eddf 6a31 	vldr	s13, [pc, #196]	; 8012e9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012dd8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012ddc:	6822      	ldr	r2, [r4, #0]
 8012dde:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012de2:	ee07 3a10 	vmov	s14, r3
 8012de6:	f857 3009 	ldr.w	r3, [r7, r9]
 8012dea:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8012dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012df2:	ee07 3a90 	vmov	s15, r3
 8012df6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8012dfa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e06:	edd3 6a00 	vldr	s13, [r3]
 8012e0a:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012e0e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012e12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012e16:	edc4 6a07 	vstr	s13, [r4, #28]
 8012e1a:	edd4 6a01 	vldr	s13, [r4, #4]
 8012e1e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8012e22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e26:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012e2a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012e2e:	ed84 6a08 	vstr	s12, [r4, #32]
 8012e32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012e34:	6262      	str	r2, [r4, #36]	; 0x24
 8012e36:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8012e3a:	ed93 6a03 	vldr	s12, [r3, #12]
 8012e3e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e42:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012e46:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012e4a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8012e4e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8012e52:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8012e56:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012e5a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8012e5e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8012e60:	6322      	str	r2, [r4, #48]	; 0x30
 8012e62:	ed93 6a06 	vldr	s12, [r3, #24]
 8012e66:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8012e6a:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e6e:	eeb0 7a46 	vmov.f32	s14, s12
 8012e72:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8012e76:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012e7a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8012e7e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8012e82:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8012e86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012e8a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8012e8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012e90:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012e92:	4620      	mov	r0, r4
 8012e94:	b003      	add	sp, #12
 8012e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9a:	bf00      	nop
 8012e9c:	3d800000 	.word	0x3d800000

08012ea0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	b148      	cbz	r0, 8012eb8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	b298      	uxth	r0, r3
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8012eae:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8012eb2:	2900      	cmp	r1, #0
 8012eb4:	d1f7      	bne.n	8012ea6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8012eb6:	4770      	bx	lr
 8012eb8:	4770      	bx	lr

08012eba <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8012eba:	b530      	push	{r4, r5, lr}
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	b159      	cbz	r1, 8012ed8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8012ec0:	b148      	cbz	r0, 8012ed6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	b298      	uxth	r0, r3
 8012ec6:	4282      	cmp	r2, r0
 8012ec8:	d905      	bls.n	8012ed6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012eca:	5ccd      	ldrb	r5, [r1, r3]
 8012ecc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	2d00      	cmp	r5, #0
 8012ed4:	d1f6      	bne.n	8012ec4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8012ed6:	bd30      	pop	{r4, r5, pc}
 8012ed8:	4608      	mov	r0, r1
 8012eda:	e7fc      	b.n	8012ed6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08012edc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8012edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ede:	468c      	mov	ip, r1
 8012ee0:	b08b      	sub	sp, #44	; 0x2c
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	ae01      	add	r6, sp, #4
 8012ee6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012eea:	211f      	movs	r1, #31
 8012eec:	fbb0 f7f3 	udiv	r7, r0, r3
 8012ef0:	fb03 0517 	mls	r5, r3, r7, r0
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	b2ec      	uxtb	r4, r5
 8012ef8:	2d09      	cmp	r5, #9
 8012efa:	bfd4      	ite	le
 8012efc:	3430      	addle	r4, #48	; 0x30
 8012efe:	3457      	addgt	r4, #87	; 0x57
 8012f00:	b2e4      	uxtb	r4, r4
 8012f02:	558c      	strb	r4, [r1, r6]
 8012f04:	1e4c      	subs	r4, r1, #1
 8012f06:	b92f      	cbnz	r7, 8012f14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8012f08:	4431      	add	r1, r6
 8012f0a:	4660      	mov	r0, ip
 8012f0c:	f7ff ffd5 	bl	8012eba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012f10:	b00b      	add	sp, #44	; 0x2c
 8012f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f14:	4621      	mov	r1, r4
 8012f16:	e7e9      	b.n	8012eec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08012f18 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8012f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f1a:	4607      	mov	r7, r0
 8012f1c:	b08b      	sub	sp, #44	; 0x2c
 8012f1e:	4608      	mov	r0, r1
 8012f20:	b341      	cbz	r1, 8012f74 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012f22:	1e99      	subs	r1, r3, #2
 8012f24:	2922      	cmp	r1, #34	; 0x22
 8012f26:	d825      	bhi.n	8012f74 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012f28:	2100      	movs	r1, #0
 8012f2a:	463c      	mov	r4, r7
 8012f2c:	261f      	movs	r6, #31
 8012f2e:	f10d 0c04 	add.w	ip, sp, #4
 8012f32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8012f36:	1e71      	subs	r1, r6, #1
 8012f38:	fb94 fef3 	sdiv	lr, r4, r3
 8012f3c:	fb03 441e 	mls	r4, r3, lr, r4
 8012f40:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8012f44:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8012f48:	b2ec      	uxtb	r4, r5
 8012f4a:	2d09      	cmp	r5, #9
 8012f4c:	bfd4      	ite	le
 8012f4e:	3430      	addle	r4, #48	; 0x30
 8012f50:	3457      	addgt	r4, #87	; 0x57
 8012f52:	b2e4      	uxtb	r4, r4
 8012f54:	f80c 4006 	strb.w	r4, [ip, r6]
 8012f58:	4674      	mov	r4, lr
 8012f5a:	b96c      	cbnz	r4, 8012f78 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8012f5c:	2f00      	cmp	r7, #0
 8012f5e:	da05      	bge.n	8012f6c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8012f60:	ab0a      	add	r3, sp, #40	; 0x28
 8012f62:	4419      	add	r1, r3
 8012f64:	232d      	movs	r3, #45	; 0x2d
 8012f66:	f801 3c24 	strb.w	r3, [r1, #-36]
 8012f6a:	1eb1      	subs	r1, r6, #2
 8012f6c:	3101      	adds	r1, #1
 8012f6e:	4461      	add	r1, ip
 8012f70:	f7ff ffa3 	bl	8012eba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012f74:	b00b      	add	sp, #44	; 0x2c
 8012f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f78:	460e      	mov	r6, r1
 8012f7a:	e7dc      	b.n	8012f36 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08012f7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	b085      	sub	sp, #20
 8012f82:	4691      	mov	r9, r2
 8012f84:	6802      	ldr	r2, [r0, #0]
 8012f86:	4688      	mov	r8, r1
 8012f88:	461c      	mov	r4, r3
 8012f8a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8012f8e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012f92:	4683      	mov	fp, r0
 8012f94:	4610      	mov	r0, r2
 8012f96:	9103      	str	r1, [sp, #12]
 8012f98:	9302      	str	r3, [sp, #8]
 8012f9a:	9201      	str	r2, [sp, #4]
 8012f9c:	f7ff ff80 	bl	8012ea0 <_ZN8touchgfx7Unicode6strlenEPKt>
 8012fa0:	f1b8 0f00 	cmp.w	r8, #0
 8012fa4:	bf0c      	ite	eq
 8012fa6:	4684      	moveq	ip, r0
 8012fa8:	f100 0c01 	addne.w	ip, r0, #1
 8012fac:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8012fb0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8012fb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012fb6:	fa1f fc8c 	uxth.w	ip, ip
 8012fba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012fbc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8012fc0:	9903      	ldr	r1, [sp, #12]
 8012fc2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012fc6:	d041      	beq.n	801304c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012fc8:	d834      	bhi.n	8013034 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8012fca:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8012fce:	d059      	beq.n	8013084 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8012fd0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8012fd4:	d03a      	beq.n	801304c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012fd6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8012fda:	d034      	beq.n	8013046 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8012fdc:	2400      	movs	r4, #0
 8012fde:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8012fe2:	3a01      	subs	r2, #1
 8012fe4:	b169      	cbz	r1, 8013002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012fe6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012fe8:	458c      	cmp	ip, r1
 8012fea:	da09      	bge.n	8013000 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8012fec:	eba1 010c 	sub.w	r1, r1, ip
 8012ff0:	b289      	uxth	r1, r1
 8012ff2:	b933      	cbnz	r3, 8013002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012ff4:	2e00      	cmp	r6, #0
 8012ff6:	d051      	beq.n	801309c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d04f      	beq.n	801309c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8012ffc:	440c      	add	r4, r1
 8012ffe:	b2a4      	uxth	r4, r4
 8013000:	2100      	movs	r1, #0
 8013002:	682b      	ldr	r3, [r5, #0]
 8013004:	4293      	cmp	r3, r2
 8013006:	da07      	bge.n	8013018 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8013008:	f1b8 0f00 	cmp.w	r8, #0
 801300c:	d004      	beq.n	8013018 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801300e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8013012:	682b      	ldr	r3, [r5, #0]
 8013014:	3301      	adds	r3, #1
 8013016:	602b      	str	r3, [r5, #0]
 8013018:	2730      	movs	r7, #48	; 0x30
 801301a:	2c00      	cmp	r4, #0
 801301c:	d04e      	beq.n	80130bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801301e:	682e      	ldr	r6, [r5, #0]
 8013020:	3c01      	subs	r4, #1
 8013022:	42b2      	cmp	r2, r6
 8013024:	b2a4      	uxth	r4, r4
 8013026:	dd49      	ble.n	80130bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8013028:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801302c:	682b      	ldr	r3, [r5, #0]
 801302e:	3301      	adds	r3, #1
 8013030:	602b      	str	r3, [r5, #0]
 8013032:	e7f2      	b.n	801301a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8013034:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8013038:	d01d      	beq.n	8013076 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801303a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801303e:	d002      	beq.n	8013046 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8013040:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8013044:	e7c9      	b.n	8012fda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8013046:	4684      	mov	ip, r0
 8013048:	f04f 0800 	mov.w	r8, #0
 801304c:	2c00      	cmp	r4, #0
 801304e:	d0c6      	beq.n	8012fde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013050:	b947      	cbnz	r7, 8013064 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8013052:	2801      	cmp	r0, #1
 8013054:	d106      	bne.n	8013064 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8013056:	8814      	ldrh	r4, [r2, #0]
 8013058:	2c30      	cmp	r4, #48	; 0x30
 801305a:	bf02      	ittt	eq
 801305c:	3202      	addeq	r2, #2
 801305e:	4638      	moveq	r0, r7
 8013060:	f8cb 2000 	streq.w	r2, [fp]
 8013064:	45bc      	cmp	ip, r7
 8013066:	da14      	bge.n	8013092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8013068:	b2bf      	uxth	r7, r7
 801306a:	eba7 040c 	sub.w	r4, r7, ip
 801306e:	46bc      	mov	ip, r7
 8013070:	b2a4      	uxth	r4, r4
 8013072:	2600      	movs	r6, #0
 8013074:	e7b3      	b.n	8012fde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013076:	4684      	mov	ip, r0
 8013078:	b16c      	cbz	r4, 8013096 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801307a:	42b8      	cmp	r0, r7
 801307c:	dd00      	ble.n	8013080 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801307e:	b2b8      	uxth	r0, r7
 8013080:	2400      	movs	r4, #0
 8013082:	e003      	b.n	801308c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8013084:	f04f 0c01 	mov.w	ip, #1
 8013088:	2400      	movs	r4, #0
 801308a:	4660      	mov	r0, ip
 801308c:	4626      	mov	r6, r4
 801308e:	46a0      	mov	r8, r4
 8013090:	e7a5      	b.n	8012fde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013092:	2400      	movs	r4, #0
 8013094:	e7ed      	b.n	8013072 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8013096:	4626      	mov	r6, r4
 8013098:	46a0      	mov	r8, r4
 801309a:	e7a0      	b.n	8012fde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801309c:	2900      	cmp	r1, #0
 801309e:	d0b0      	beq.n	8013002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80130a0:	2720      	movs	r7, #32
 80130a2:	682e      	ldr	r6, [r5, #0]
 80130a4:	2900      	cmp	r1, #0
 80130a6:	d0ac      	beq.n	8013002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80130a8:	3901      	subs	r1, #1
 80130aa:	4296      	cmp	r6, r2
 80130ac:	b289      	uxth	r1, r1
 80130ae:	daa7      	bge.n	8013000 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80130b0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80130b4:	682b      	ldr	r3, [r5, #0]
 80130b6:	3301      	adds	r3, #1
 80130b8:	602b      	str	r3, [r5, #0]
 80130ba:	e7f2      	b.n	80130a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80130bc:	b188      	cbz	r0, 80130e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80130be:	682b      	ldr	r3, [r5, #0]
 80130c0:	3801      	subs	r0, #1
 80130c2:	429a      	cmp	r2, r3
 80130c4:	b280      	uxth	r0, r0
 80130c6:	dd0c      	ble.n	80130e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80130c8:	f8db 3000 	ldr.w	r3, [fp]
 80130cc:	1c9c      	adds	r4, r3, #2
 80130ce:	f8cb 4000 	str.w	r4, [fp]
 80130d2:	881c      	ldrh	r4, [r3, #0]
 80130d4:	682b      	ldr	r3, [r5, #0]
 80130d6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80130da:	682b      	ldr	r3, [r5, #0]
 80130dc:	3301      	adds	r3, #1
 80130de:	602b      	str	r3, [r5, #0]
 80130e0:	e7ec      	b.n	80130bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80130e2:	2620      	movs	r6, #32
 80130e4:	b151      	cbz	r1, 80130fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80130e6:	6828      	ldr	r0, [r5, #0]
 80130e8:	3901      	subs	r1, #1
 80130ea:	4282      	cmp	r2, r0
 80130ec:	b289      	uxth	r1, r1
 80130ee:	dd05      	ble.n	80130fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80130f0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80130f4:	682b      	ldr	r3, [r5, #0]
 80130f6:	3301      	adds	r3, #1
 80130f8:	602b      	str	r3, [r5, #0]
 80130fa:	e7f3      	b.n	80130e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80130fc:	b005      	add	sp, #20
 80130fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013102 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8013102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013106:	2400      	movs	r4, #0
 8013108:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801310c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8013110:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8013114:	8014      	strh	r4, [r2, #0]
 8013116:	701c      	strb	r4, [r3, #0]
 8013118:	f888 4000 	strb.w	r4, [r8]
 801311c:	f88c 4000 	strb.w	r4, [ip]
 8013120:	f88e 4000 	strb.w	r4, [lr]
 8013124:	703c      	strb	r4, [r7, #0]
 8013126:	6804      	ldr	r4, [r0, #0]
 8013128:	b1a4      	cbz	r4, 8013154 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801312a:	8824      	ldrh	r4, [r4, #0]
 801312c:	f04f 0901 	mov.w	r9, #1
 8013130:	b314      	cbz	r4, 8013178 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013132:	2c2b      	cmp	r4, #43	; 0x2b
 8013134:	d001      	beq.n	801313a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8013136:	2c20      	cmp	r4, #32
 8013138:	d110      	bne.n	801315c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801313a:	8014      	strh	r4, [r2, #0]
 801313c:	6804      	ldr	r4, [r0, #0]
 801313e:	b10c      	cbz	r4, 8013144 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8013140:	3402      	adds	r4, #2
 8013142:	6004      	str	r4, [r0, #0]
 8013144:	680c      	ldr	r4, [r1, #0]
 8013146:	b10c      	cbz	r4, 801314c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8013148:	3401      	adds	r4, #1
 801314a:	600c      	str	r4, [r1, #0]
 801314c:	6804      	ldr	r4, [r0, #0]
 801314e:	b17c      	cbz	r4, 8013170 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8013150:	8824      	ldrh	r4, [r4, #0]
 8013152:	e7ed      	b.n	8013130 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8013154:	680c      	ldr	r4, [r1, #0]
 8013156:	b17c      	cbz	r4, 8013178 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013158:	7824      	ldrb	r4, [r4, #0]
 801315a:	e7e7      	b.n	801312c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801315c:	2c2d      	cmp	r4, #45	; 0x2d
 801315e:	d102      	bne.n	8013166 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8013160:	f883 9000 	strb.w	r9, [r3]
 8013164:	e7ea      	b.n	801313c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8013166:	2c23      	cmp	r4, #35	; 0x23
 8013168:	d107      	bne.n	801317a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801316a:	f888 9000 	strb.w	r9, [r8]
 801316e:	e7e5      	b.n	801313c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8013170:	680c      	ldr	r4, [r1, #0]
 8013172:	b10c      	cbz	r4, 8013178 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8013174:	7824      	ldrb	r4, [r4, #0]
 8013176:	e7db      	b.n	8013130 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8013178:	2400      	movs	r4, #0
 801317a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801317e:	2b09      	cmp	r3, #9
 8013180:	d901      	bls.n	8013186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8013182:	2c2a      	cmp	r4, #42	; 0x2a
 8013184:	d122      	bne.n	80131cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8013186:	2301      	movs	r3, #1
 8013188:	2c30      	cmp	r4, #48	; 0x30
 801318a:	f88e 3000 	strb.w	r3, [lr]
 801318e:	d10d      	bne.n	80131ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8013190:	f88c 3000 	strb.w	r3, [ip]
 8013194:	6803      	ldr	r3, [r0, #0]
 8013196:	b10b      	cbz	r3, 801319c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8013198:	3302      	adds	r3, #2
 801319a:	6003      	str	r3, [r0, #0]
 801319c:	680b      	ldr	r3, [r1, #0]
 801319e:	b10b      	cbz	r3, 80131a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80131a0:	3301      	adds	r3, #1
 80131a2:	600b      	str	r3, [r1, #0]
 80131a4:	6803      	ldr	r3, [r0, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d02f      	beq.n	801320a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80131aa:	881c      	ldrh	r4, [r3, #0]
 80131ac:	2c2a      	cmp	r4, #42	; 0x2a
 80131ae:	d135      	bne.n	801321c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80131b0:	f04f 33ff 	mov.w	r3, #4294967295
 80131b4:	6033      	str	r3, [r6, #0]
 80131b6:	6803      	ldr	r3, [r0, #0]
 80131b8:	b10b      	cbz	r3, 80131be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80131ba:	3302      	adds	r3, #2
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	680b      	ldr	r3, [r1, #0]
 80131c0:	b10b      	cbz	r3, 80131c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80131c2:	3301      	adds	r3, #1
 80131c4:	600b      	str	r3, [r1, #0]
 80131c6:	6803      	ldr	r3, [r0, #0]
 80131c8:	b31b      	cbz	r3, 8013212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80131ca:	881c      	ldrh	r4, [r3, #0]
 80131cc:	2c2e      	cmp	r4, #46	; 0x2e
 80131ce:	d11a      	bne.n	8013206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80131d0:	2301      	movs	r3, #1
 80131d2:	703b      	strb	r3, [r7, #0]
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	b10b      	cbz	r3, 80131dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80131d8:	3302      	adds	r3, #2
 80131da:	6003      	str	r3, [r0, #0]
 80131dc:	680b      	ldr	r3, [r1, #0]
 80131de:	b10b      	cbz	r3, 80131e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80131e0:	3301      	adds	r3, #1
 80131e2:	600b      	str	r3, [r1, #0]
 80131e4:	6803      	ldr	r3, [r0, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d036      	beq.n	8013258 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	2b2a      	cmp	r3, #42	; 0x2a
 80131ee:	d137      	bne.n	8013260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80131f0:	f04f 33ff 	mov.w	r3, #4294967295
 80131f4:	602b      	str	r3, [r5, #0]
 80131f6:	6803      	ldr	r3, [r0, #0]
 80131f8:	b10b      	cbz	r3, 80131fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80131fa:	3302      	adds	r3, #2
 80131fc:	6003      	str	r3, [r0, #0]
 80131fe:	680b      	ldr	r3, [r1, #0]
 8013200:	b10b      	cbz	r3, 8013206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013202:	3301      	adds	r3, #1
 8013204:	600b      	str	r3, [r1, #0]
 8013206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801320a:	680c      	ldr	r4, [r1, #0]
 801320c:	b134      	cbz	r4, 801321c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801320e:	7824      	ldrb	r4, [r4, #0]
 8013210:	e7cc      	b.n	80131ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8013212:	680b      	ldr	r3, [r1, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0f6      	beq.n	8013206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013218:	781c      	ldrb	r4, [r3, #0]
 801321a:	e7d7      	b.n	80131cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801321c:	2300      	movs	r3, #0
 801321e:	220a      	movs	r2, #10
 8013220:	6033      	str	r3, [r6, #0]
 8013222:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013226:	fa1f f38c 	uxth.w	r3, ip
 801322a:	2b09      	cmp	r3, #9
 801322c:	d8ce      	bhi.n	80131cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801322e:	6833      	ldr	r3, [r6, #0]
 8013230:	fb02 c303 	mla	r3, r2, r3, ip
 8013234:	6033      	str	r3, [r6, #0]
 8013236:	6803      	ldr	r3, [r0, #0]
 8013238:	b10b      	cbz	r3, 801323e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801323a:	3302      	adds	r3, #2
 801323c:	6003      	str	r3, [r0, #0]
 801323e:	680b      	ldr	r3, [r1, #0]
 8013240:	b10b      	cbz	r3, 8013246 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8013242:	3301      	adds	r3, #1
 8013244:	600b      	str	r3, [r1, #0]
 8013246:	6803      	ldr	r3, [r0, #0]
 8013248:	b10b      	cbz	r3, 801324e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801324a:	881c      	ldrh	r4, [r3, #0]
 801324c:	e7e9      	b.n	8013222 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801324e:	680c      	ldr	r4, [r1, #0]
 8013250:	2c00      	cmp	r4, #0
 8013252:	d0e6      	beq.n	8013222 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8013254:	7824      	ldrb	r4, [r4, #0]
 8013256:	e7e4      	b.n	8013222 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8013258:	680b      	ldr	r3, [r1, #0]
 801325a:	b10b      	cbz	r3, 8013260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	e7c5      	b.n	80131ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8013260:	2200      	movs	r2, #0
 8013262:	240a      	movs	r4, #10
 8013264:	602a      	str	r2, [r5, #0]
 8013266:	3b30      	subs	r3, #48	; 0x30
 8013268:	682a      	ldr	r2, [r5, #0]
 801326a:	b29e      	uxth	r6, r3
 801326c:	2e09      	cmp	r6, #9
 801326e:	d813      	bhi.n	8013298 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8013270:	fb04 3302 	mla	r3, r4, r2, r3
 8013274:	602b      	str	r3, [r5, #0]
 8013276:	6803      	ldr	r3, [r0, #0]
 8013278:	b10b      	cbz	r3, 801327e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801327a:	3302      	adds	r3, #2
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	680b      	ldr	r3, [r1, #0]
 8013280:	b10b      	cbz	r3, 8013286 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8013282:	3301      	adds	r3, #1
 8013284:	600b      	str	r3, [r1, #0]
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	b10b      	cbz	r3, 801328e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	e7eb      	b.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801328e:	680b      	ldr	r3, [r1, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d0e8      	beq.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	e7e6      	b.n	8013266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8013298:	2a06      	cmp	r2, #6
 801329a:	bfa8      	it	ge
 801329c:	2206      	movge	r2, #6
 801329e:	602a      	str	r2, [r5, #0]
 80132a0:	e7b1      	b.n	8013206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080132a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80132a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a6:	b0a3      	sub	sp, #140	; 0x8c
 80132a8:	2600      	movs	r6, #0
 80132aa:	4607      	mov	r7, r0
 80132ac:	4688      	mov	r8, r1
 80132ae:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80132b2:	4631      	mov	r1, r6
 80132b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80132b6:	4648      	mov	r0, r9
 80132b8:	960d      	str	r6, [sp, #52]	; 0x34
 80132ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80132be:	2242      	movs	r2, #66	; 0x42
 80132c0:	f009 f898 	bl	801c3f4 <memset>
 80132c4:	b15f      	cbz	r7, 80132de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80132c6:	f108 3aff 	add.w	sl, r8, #4294967295
 80132ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132ce:	b152      	cbz	r2, 80132e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80132d0:	8812      	ldrh	r2, [r2, #0]
 80132d2:	b10a      	cbz	r2, 80132d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80132d4:	459a      	cmp	sl, r3
 80132d6:	dc2e      	bgt.n	8013336 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80132d8:	2200      	movs	r2, #0
 80132da:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80132de:	4638      	mov	r0, r7
 80132e0:	b023      	add	sp, #140	; 0x8c
 80132e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e6:	9a08      	ldr	r2, [sp, #32]
 80132e8:	2a00      	cmp	r2, #0
 80132ea:	d0f5      	beq.n	80132d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80132ec:	7812      	ldrb	r2, [r2, #0]
 80132ee:	e7f0      	b.n	80132d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80132f0:	2d00      	cmp	r5, #0
 80132f2:	d0ea      	beq.n	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80132f4:	782a      	ldrb	r2, [r5, #0]
 80132f6:	b142      	cbz	r2, 801330a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80132f8:	2a25      	cmp	r2, #37	; 0x25
 80132fa:	d001      	beq.n	8013300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80132fc:	459a      	cmp	sl, r3
 80132fe:	dc08      	bgt.n	8013312 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8013300:	f1bb 0f00 	cmp.w	fp, #0
 8013304:	d121      	bne.n	801334a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8013306:	2d00      	cmp	r5, #0
 8013308:	d0df      	beq.n	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801330a:	782a      	ldrb	r2, [r5, #0]
 801330c:	f04f 0b00 	mov.w	fp, #0
 8013310:	e01d      	b.n	801334e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8013312:	f1bb 0f00 	cmp.w	fp, #0
 8013316:	d077      	beq.n	8013408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8013318:	f8bb 2000 	ldrh.w	r2, [fp]
 801331c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013320:	f1bb 0f00 	cmp.w	fp, #0
 8013324:	d002      	beq.n	801332c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8013326:	f10b 0202 	add.w	r2, fp, #2
 801332a:	9209      	str	r2, [sp, #36]	; 0x24
 801332c:	b10d      	cbz	r5, 8013332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801332e:	3501      	adds	r5, #1
 8013330:	9508      	str	r5, [sp, #32]
 8013332:	3301      	adds	r3, #1
 8013334:	930d      	str	r3, [sp, #52]	; 0x34
 8013336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013338:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801333c:	f1bb 0f00 	cmp.w	fp, #0
 8013340:	d0d6      	beq.n	80132f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8013342:	f8bb 2000 	ldrh.w	r2, [fp]
 8013346:	2a00      	cmp	r2, #0
 8013348:	d1d6      	bne.n	80132f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801334a:	f8bb 2000 	ldrh.w	r2, [fp]
 801334e:	2a00      	cmp	r2, #0
 8013350:	d0bb      	beq.n	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013352:	459a      	cmp	sl, r3
 8013354:	ddb9      	ble.n	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013356:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801335a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801335e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8013362:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8013366:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801336a:	960e      	str	r6, [sp, #56]	; 0x38
 801336c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8013370:	960f      	str	r6, [sp, #60]	; 0x3c
 8013372:	f1bb 0f00 	cmp.w	fp, #0
 8013376:	d002      	beq.n	801337e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8013378:	f10b 0302 	add.w	r3, fp, #2
 801337c:	9309      	str	r3, [sp, #36]	; 0x24
 801337e:	b10d      	cbz	r5, 8013384 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8013380:	1c6b      	adds	r3, r5, #1
 8013382:	9308      	str	r3, [sp, #32]
 8013384:	ab0f      	add	r3, sp, #60	; 0x3c
 8013386:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801338a:	a908      	add	r1, sp, #32
 801338c:	a809      	add	r0, sp, #36	; 0x24
 801338e:	9305      	str	r3, [sp, #20]
 8013390:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8013394:	9304      	str	r3, [sp, #16]
 8013396:	ab0e      	add	r3, sp, #56	; 0x38
 8013398:	9303      	str	r3, [sp, #12]
 801339a:	ab0c      	add	r3, sp, #48	; 0x30
 801339c:	9302      	str	r3, [sp, #8]
 801339e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80133a2:	9301      	str	r3, [sp, #4]
 80133a4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80133ae:	f7ff fea8 	bl	8013102 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80133b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bfbf      	itttt	lt
 80133b8:	6823      	ldrlt	r3, [r4, #0]
 80133ba:	3404      	addlt	r4, #4
 80133bc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80133c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80133c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	bfbe      	ittt	lt
 80133c8:	6823      	ldrlt	r3, [r4, #0]
 80133ca:	3404      	addlt	r4, #4
 80133cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80133d0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80133d4:	bfb8      	it	lt
 80133d6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80133d8:	b1d9      	cbz	r1, 8013412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80133da:	880b      	ldrh	r3, [r1, #0]
 80133dc:	2b69      	cmp	r3, #105	; 0x69
 80133de:	d01f      	beq.n	8013420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80133e0:	d82f      	bhi.n	8013442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80133e2:	2b58      	cmp	r3, #88	; 0x58
 80133e4:	d01c      	beq.n	8013420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80133e6:	d818      	bhi.n	801341a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80133e8:	2b25      	cmp	r3, #37	; 0x25
 80133ea:	d034      	beq.n	8013456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80133ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ee:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80133f2:	f1bb 0f00 	cmp.w	fp, #0
 80133f6:	f000 80b7 	beq.w	8013568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80133fa:	f8bb 5000 	ldrh.w	r5, [fp]
 80133fe:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8013402:	3301      	adds	r3, #1
 8013404:	930d      	str	r3, [sp, #52]	; 0x34
 8013406:	e029      	b.n	801345c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8013408:	b10d      	cbz	r5, 801340e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801340a:	782a      	ldrb	r2, [r5, #0]
 801340c:	e786      	b.n	801331c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801340e:	462a      	mov	r2, r5
 8013410:	e784      	b.n	801331c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8013412:	2a00      	cmp	r2, #0
 8013414:	d0ea      	beq.n	80133ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8013416:	7813      	ldrb	r3, [r2, #0]
 8013418:	e7e0      	b.n	80133dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801341a:	3b63      	subs	r3, #99	; 0x63
 801341c:	2b01      	cmp	r3, #1
 801341e:	d8e5      	bhi.n	80133ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8013420:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8013424:	b329      	cbz	r1, 8013472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8013426:	880b      	ldrh	r3, [r1, #0]
 8013428:	2b69      	cmp	r3, #105	; 0x69
 801342a:	d063      	beq.n	80134f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801342c:	d825      	bhi.n	801347a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801342e:	2b63      	cmp	r3, #99	; 0x63
 8013430:	d038      	beq.n	80134a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8013432:	2b64      	cmp	r3, #100	; 0x64
 8013434:	d05e      	beq.n	80134f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8013436:	2b58      	cmp	r3, #88	; 0x58
 8013438:	d07a      	beq.n	8013530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801343a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801343e:	4625      	mov	r5, r4
 8013440:	e036      	b.n	80134b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013442:	2b73      	cmp	r3, #115	; 0x73
 8013444:	d0ec      	beq.n	8013420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013446:	d802      	bhi.n	801344e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8013448:	2b6f      	cmp	r3, #111	; 0x6f
 801344a:	d1cf      	bne.n	80133ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801344c:	e7e8      	b.n	8013420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801344e:	2b75      	cmp	r3, #117	; 0x75
 8013450:	d0e6      	beq.n	8013420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013452:	2b78      	cmp	r3, #120	; 0x78
 8013454:	e7f9      	b.n	801344a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8013456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013458:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801345c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801345e:	b10b      	cbz	r3, 8013464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8013460:	3302      	adds	r3, #2
 8013462:	9309      	str	r3, [sp, #36]	; 0x24
 8013464:	9b08      	ldr	r3, [sp, #32]
 8013466:	2b00      	cmp	r3, #0
 8013468:	f43f af2f 	beq.w	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801346c:	3301      	adds	r3, #1
 801346e:	9308      	str	r3, [sp, #32]
 8013470:	e72b      	b.n	80132ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013472:	2a00      	cmp	r2, #0
 8013474:	d0e1      	beq.n	801343a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013476:	7813      	ldrb	r3, [r2, #0]
 8013478:	e7d6      	b.n	8013428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801347a:	2b73      	cmp	r3, #115	; 0x73
 801347c:	d036      	beq.n	80134ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801347e:	d807      	bhi.n	8013490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8013480:	2b6f      	cmp	r3, #111	; 0x6f
 8013482:	d1da      	bne.n	801343a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013486:	1d25      	adds	r5, r4, #4
 8013488:	2308      	movs	r3, #8
 801348a:	eba8 0202 	sub.w	r2, r8, r2
 801348e:	e049      	b.n	8013524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8013490:	2b75      	cmp	r3, #117	; 0x75
 8013492:	d042      	beq.n	801351a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8013494:	2b78      	cmp	r3, #120	; 0x78
 8013496:	d1d0      	bne.n	801343a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801349a:	1d25      	adds	r5, r4, #4
 801349c:	2310      	movs	r3, #16
 801349e:	eba8 0202 	sub.w	r2, r8, r2
 80134a2:	e03f      	b.n	8013524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80134a4:	7823      	ldrb	r3, [r4, #0]
 80134a6:	1d25      	adds	r5, r4, #4
 80134a8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80134ac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80134b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d051      	beq.n	801355e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80134ba:	881a      	ldrh	r2, [r3, #0]
 80134bc:	a80d      	add	r0, sp, #52	; 0x34
 80134be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80134c2:	462c      	mov	r4, r5
 80134c4:	9005      	str	r0, [sp, #20]
 80134c6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80134ca:	9004      	str	r0, [sp, #16]
 80134cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80134ce:	9003      	str	r0, [sp, #12]
 80134d0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80134d4:	9002      	str	r0, [sp, #8]
 80134d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80134d8:	9001      	str	r0, [sp, #4]
 80134da:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80134de:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80134e2:	9000      	str	r0, [sp, #0]
 80134e4:	a810      	add	r0, sp, #64	; 0x40
 80134e6:	f7ff fd49 	bl	8012f7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80134ea:	e7b7      	b.n	801345c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80134ec:	1d25      	adds	r5, r4, #4
 80134ee:	6823      	ldr	r3, [r4, #0]
 80134f0:	9310      	str	r3, [sp, #64]	; 0x40
 80134f2:	e7dd      	b.n	80134b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80134f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134f6:	230a      	movs	r3, #10
 80134f8:	4649      	mov	r1, r9
 80134fa:	6820      	ldr	r0, [r4, #0]
 80134fc:	eba8 0202 	sub.w	r2, r8, r2
 8013500:	1d25      	adds	r5, r4, #4
 8013502:	b292      	uxth	r2, r2
 8013504:	f7ff fd08 	bl	8012f18 <_ZN8touchgfx7Unicode4itoaElPtti>
 8013508:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801350c:	2b2d      	cmp	r3, #45	; 0x2d
 801350e:	d1cf      	bne.n	80134b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013510:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013516:	3302      	adds	r3, #2
 8013518:	e7ea      	b.n	80134f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801351a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801351c:	1d25      	adds	r5, r4, #4
 801351e:	230a      	movs	r3, #10
 8013520:	eba8 0202 	sub.w	r2, r8, r2
 8013524:	b292      	uxth	r2, r2
 8013526:	4649      	mov	r1, r9
 8013528:	6820      	ldr	r0, [r4, #0]
 801352a:	f7ff fcd7 	bl	8012edc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801352e:	e7bf      	b.n	80134b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013532:	2310      	movs	r3, #16
 8013534:	4649      	mov	r1, r9
 8013536:	6820      	ldr	r0, [r4, #0]
 8013538:	eba8 0202 	sub.w	r2, r8, r2
 801353c:	1d25      	adds	r5, r4, #4
 801353e:	b292      	uxth	r2, r2
 8013540:	f7ff fccc 	bl	8012edc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8013544:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8013548:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801354c:	2b00      	cmp	r3, #0
 801354e:	d0af      	beq.n	80134b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8013550:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8013554:	2919      	cmp	r1, #25
 8013556:	d8f7      	bhi.n	8013548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8013558:	3b20      	subs	r3, #32
 801355a:	8013      	strh	r3, [r2, #0]
 801355c:	e7f4      	b.n	8013548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801355e:	9a08      	ldr	r2, [sp, #32]
 8013560:	2a00      	cmp	r2, #0
 8013562:	d0ab      	beq.n	80134bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8013564:	7812      	ldrb	r2, [r2, #0]
 8013566:	e7a9      	b.n	80134bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8013568:	2d00      	cmp	r5, #0
 801356a:	f43f af48 	beq.w	80133fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801356e:	782d      	ldrb	r5, [r5, #0]
 8013570:	e745      	b.n	80133fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08013572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8013572:	b507      	push	{r0, r1, r2, lr}
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	4613      	mov	r3, r2
 8013578:	2200      	movs	r2, #0
 801357a:	f7ff fe92 	bl	80132a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801357e:	b003      	add	sp, #12
 8013580:	f85d fb04 	ldr.w	pc, [sp], #4

08013584 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8013584:	b40c      	push	{r2, r3}
 8013586:	b507      	push	{r0, r1, r2, lr}
 8013588:	ab04      	add	r3, sp, #16
 801358a:	f853 2b04 	ldr.w	r2, [r3], #4
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	f7ff ffef 	bl	8013572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8013594:	b003      	add	sp, #12
 8013596:	f85d eb04 	ldr.w	lr, [sp], #4
 801359a:	b002      	add	sp, #8
 801359c:	4770      	bx	lr
	...

080135a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 80135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	b0c3      	sub	sp, #268	; 0x10c
 80135a6:	2600      	movs	r6, #0
 80135a8:	4607      	mov	r7, r0
 80135aa:	4689      	mov	r9, r1
 80135ac:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80135b0:	4631      	mov	r1, r6
 80135b2:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 80135b6:	4640      	mov	r0, r8
 80135b8:	960c      	str	r6, [sp, #48]	; 0x30
 80135ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80135be:	22c8      	movs	r2, #200	; 0xc8
 80135c0:	f008 ff18 	bl	801c3f4 <memset>
 80135c4:	b16f      	cbz	r7, 80135e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 80135c6:	f04f 0b0a 	mov.w	fp, #10
 80135ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135ce:	b162      	cbz	r2, 80135ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 80135d0:	8812      	ldrh	r2, [r2, #0]
 80135d2:	b11a      	cbz	r2, 80135dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 80135d4:	f109 31ff 	add.w	r1, r9, #4294967295
 80135d8:	4299      	cmp	r1, r3
 80135da:	dc26      	bgt.n	801362a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 80135dc:	2200      	movs	r2, #0
 80135de:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80135e2:	4638      	mov	r0, r7
 80135e4:	b043      	add	sp, #268	; 0x10c
 80135e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ea:	9a08      	ldr	r2, [sp, #32]
 80135ec:	2a00      	cmp	r2, #0
 80135ee:	d0f5      	beq.n	80135dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 80135f0:	7812      	ldrb	r2, [r2, #0]
 80135f2:	e7ee      	b.n	80135d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 80135f4:	2c00      	cmp	r4, #0
 80135f6:	d0e8      	beq.n	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80135f8:	7822      	ldrb	r2, [r4, #0]
 80135fa:	b132      	cbz	r2, 801360a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 80135fc:	2a25      	cmp	r2, #37	; 0x25
 80135fe:	d001      	beq.n	8013604 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 8013600:	4299      	cmp	r1, r3
 8013602:	dc05      	bgt.n	8013610 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 8013604:	b9cd      	cbnz	r5, 801363a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 8013606:	2c00      	cmp	r4, #0
 8013608:	d0df      	beq.n	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801360a:	7822      	ldrb	r2, [r4, #0]
 801360c:	2500      	movs	r5, #0
 801360e:	e015      	b.n	801363c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 8013610:	2d00      	cmp	r5, #0
 8013612:	d073      	beq.n	80136fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 8013614:	882a      	ldrh	r2, [r5, #0]
 8013616:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801361a:	b10d      	cbz	r5, 8013620 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801361c:	3502      	adds	r5, #2
 801361e:	9509      	str	r5, [sp, #36]	; 0x24
 8013620:	b10c      	cbz	r4, 8013626 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 8013622:	3401      	adds	r4, #1
 8013624:	9408      	str	r4, [sp, #32]
 8013626:	3301      	adds	r3, #1
 8013628:	930c      	str	r3, [sp, #48]	; 0x30
 801362a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801362c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8013630:	2d00      	cmp	r5, #0
 8013632:	d0df      	beq.n	80135f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 8013634:	882a      	ldrh	r2, [r5, #0]
 8013636:	2a00      	cmp	r2, #0
 8013638:	d1e0      	bne.n	80135fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801363a:	882a      	ldrh	r2, [r5, #0]
 801363c:	2a00      	cmp	r2, #0
 801363e:	d0c4      	beq.n	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013640:	4299      	cmp	r1, r3
 8013642:	ddc2      	ble.n	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 8013644:	2300      	movs	r3, #0
 8013646:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801364a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801364e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013652:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8013656:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801365a:	930d      	str	r3, [sp, #52]	; 0x34
 801365c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8013660:	930e      	str	r3, [sp, #56]	; 0x38
 8013662:	b10d      	cbz	r5, 8013668 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 8013664:	1cab      	adds	r3, r5, #2
 8013666:	9309      	str	r3, [sp, #36]	; 0x24
 8013668:	b10c      	cbz	r4, 801366e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801366a:	1c63      	adds	r3, r4, #1
 801366c:	9308      	str	r3, [sp, #32]
 801366e:	ab0e      	add	r3, sp, #56	; 0x38
 8013670:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8013674:	a908      	add	r1, sp, #32
 8013676:	a809      	add	r0, sp, #36	; 0x24
 8013678:	9305      	str	r3, [sp, #20]
 801367a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801367e:	9304      	str	r3, [sp, #16]
 8013680:	ab0d      	add	r3, sp, #52	; 0x34
 8013682:	9303      	str	r3, [sp, #12]
 8013684:	ab0b      	add	r3, sp, #44	; 0x2c
 8013686:	9302      	str	r3, [sp, #8]
 8013688:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8013698:	f7ff fd33 	bl	8013102 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801369c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801369e:	2b00      	cmp	r3, #0
 80136a0:	da0b      	bge.n	80136ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 80136a2:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80136a6:	3601      	adds	r6, #1
 80136a8:	edd3 7a00 	vldr	s15, [r3]
 80136ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136b0:	ee17 3a90 	vmov	r3, s15
 80136b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136b8:	930d      	str	r3, [sp, #52]	; 0x34
 80136ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da0b      	bge.n	80136d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 80136c0:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80136c4:	3601      	adds	r6, #1
 80136c6:	edd3 7a00 	vldr	s15, [r3]
 80136ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136ce:	ee17 3a90 	vmov	r3, s15
 80136d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136d6:	930e      	str	r3, [sp, #56]	; 0x38
 80136d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136da:	b1a3      	cbz	r3, 8013706 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 80136dc:	881a      	ldrh	r2, [r3, #0]
 80136de:	2a25      	cmp	r2, #37	; 0x25
 80136e0:	d016      	beq.n	8013710 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 80136e2:	2a66      	cmp	r2, #102	; 0x66
 80136e4:	d01a      	beq.n	801371c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 80136e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80136ec:	2d00      	cmp	r5, #0
 80136ee:	f000 80fc 	beq.w	80138ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34a>
 80136f2:	882c      	ldrh	r4, [r5, #0]
 80136f4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80136f8:	3301      	adds	r3, #1
 80136fa:	e00d      	b.n	8013718 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 80136fc:	b10c      	cbz	r4, 8013702 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 80136fe:	7822      	ldrb	r2, [r4, #0]
 8013700:	e789      	b.n	8013616 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 8013702:	4622      	mov	r2, r4
 8013704:	e787      	b.n	8013616 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 8013706:	9b08      	ldr	r3, [sp, #32]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d0ec      	beq.n	80136e6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801370c:	781a      	ldrb	r2, [r3, #0]
 801370e:	e7e6      	b.n	80136de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 8013710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013712:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013716:	3302      	adds	r3, #2
 8013718:	930c      	str	r3, [sp, #48]	; 0x30
 801371a:	e049      	b.n	80137b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x210>
 801371c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8013720:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8013724:	3601      	adds	r6, #1
 8013726:	ed93 7a00 	vldr	s14, [r3]
 801372a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801372e:	b923      	cbnz	r3, 801373a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 8013730:	2301      	movs	r3, #1
 8013732:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8013736:	2306      	movs	r3, #6
 8013738:	930e      	str	r3, [sp, #56]	; 0x38
 801373a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801373e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013746:	bf42      	ittt	mi
 8013748:	eeb1 7a47 	vnegmi.f32	s14, s14
 801374c:	232d      	movmi	r3, #45	; 0x2d
 801374e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8013752:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013756:	eef4 6a47 	vcmp.f32	s13, s14
 801375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375e:	d132      	bne.n	80137c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 8013760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013764:	eef4 7a47 	vcmp.f32	s15, s14
 8013768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801376c:	d12b      	bne.n	80137c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x226>
 801376e:	4b61      	ldr	r3, [pc, #388]	; (80138f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x354>)
 8013770:	9310      	str	r3, [sp, #64]	; 0x40
 8013772:	2366      	movs	r3, #102	; 0x66
 8013774:	9311      	str	r3, [sp, #68]	; 0x44
 8013776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013778:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801377c:	2b00      	cmp	r3, #0
 801377e:	f000 80ae 	beq.w	80138de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33e>
 8013782:	881a      	ldrh	r2, [r3, #0]
 8013784:	a80c      	add	r0, sp, #48	; 0x30
 8013786:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801378a:	9005      	str	r0, [sp, #20]
 801378c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 8013790:	9004      	str	r0, [sp, #16]
 8013792:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013794:	9003      	str	r0, [sp, #12]
 8013796:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801379a:	9002      	str	r0, [sp, #8]
 801379c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801379e:	9001      	str	r0, [sp, #4]
 80137a0:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 80137a4:	e9cd 9706 	strd	r9, r7, [sp, #24]
 80137a8:	9000      	str	r0, [sp, #0]
 80137aa:	a80f      	add	r0, sp, #60	; 0x3c
 80137ac:	f7ff fbe6 	bl	8012f7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80137b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137b2:	b10b      	cbz	r3, 80137b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x218>
 80137b4:	3302      	adds	r3, #2
 80137b6:	9309      	str	r3, [sp, #36]	; 0x24
 80137b8:	9b08      	ldr	r3, [sp, #32]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f43f af05 	beq.w	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80137c0:	3301      	adds	r3, #1
 80137c2:	9308      	str	r3, [sp, #32]
 80137c4:	e701      	b.n	80135ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 80137c6:	eeb4 7a47 	vcmp.f32	s14, s14
 80137ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ce:	d10b      	bne.n	80137e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x248>
 80137d0:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80137d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80137d6:	2300      	movs	r3, #0
 80137d8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80138f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>
 80137dc:	4283      	cmp	r3, r0
 80137de:	da07      	bge.n	80137f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x250>
 80137e0:	eec7 7a86 	vdiv.f32	s15, s15, s12
 80137e4:	3301      	adds	r3, #1
 80137e6:	e7f9      	b.n	80137dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23c>
 80137e8:	4b44      	ldr	r3, [pc, #272]	; (80138fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>)
 80137ea:	9310      	str	r3, [sp, #64]	; 0x40
 80137ec:	236e      	movs	r3, #110	; 0x6e
 80137ee:	e7c1      	b.n	8013774 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d4>
 80137f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137f8:	eeb0 7a67 	vmov.f32	s14, s15
 80137fc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013804:	da27      	bge.n	8013856 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b6>
 8013806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013808:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801380c:	2100      	movs	r1, #0
 801380e:	eba9 0202 	sub.w	r2, r9, r2
 8013812:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013816:	b28c      	uxth	r4, r1
 8013818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801381c:	db21      	blt.n	8013862 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 801381e:	1a53      	subs	r3, r2, r1
 8013820:	2b00      	cmp	r3, #0
 8013822:	dd1e      	ble.n	8013862 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c2>
 8013824:	2963      	cmp	r1, #99	; 0x63
 8013826:	d01b      	beq.n	8013860 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>
 8013828:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801382c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013830:	ee17 3a10 	vmov	r3, s14
 8013834:	2b09      	cmp	r3, #9
 8013836:	bfa8      	it	ge
 8013838:	2309      	movge	r3, #9
 801383a:	ee07 3a10 	vmov	s14, r3
 801383e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013846:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801384a:	3101      	adds	r1, #1
 801384c:	eee7 7a66 	vfms.f32	s15, s14, s13
 8013850:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8013854:	e7dd      	b.n	8013812 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x272>
 8013856:	ee66 6a86 	vmul.f32	s13, s13, s12
 801385a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801385e:	e7cd      	b.n	80137fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x25c>
 8013860:	460c      	mov	r4, r1
 8013862:	2a63      	cmp	r2, #99	; 0x63
 8013864:	bfd4      	ite	le
 8013866:	ebc4 0202 	rsble	r2, r4, r2
 801386a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801386e:	2a00      	cmp	r2, #0
 8013870:	dd30      	ble.n	80138d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x334>
 8013872:	4603      	mov	r3, r0
 8013874:	2501      	movs	r5, #1
 8013876:	2b00      	cmp	r3, #0
 8013878:	dd0d      	ble.n	8013896 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2f6>
 801387a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801387e:	3b01      	subs	r3, #1
 8013880:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013884:	ee17 1a10 	vmov	r1, s14
 8013888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801388c:	fb0b 1505 	mla	r5, fp, r5, r1
 8013890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013894:	e7ef      	b.n	8013876 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2d6>
 8013896:	2800      	cmp	r0, #0
 8013898:	f100 33ff 	add.w	r3, r0, #4294967295
 801389c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80138a0:	bfac      	ite	ge
 80138a2:	1a18      	subge	r0, r3, r0
 80138a4:	4618      	movlt	r0, r3
 80138a6:	b292      	uxth	r2, r2
 80138a8:	230a      	movs	r3, #10
 80138aa:	900e      	str	r0, [sp, #56]	; 0x38
 80138ac:	eb08 0104 	add.w	r1, r8, r4
 80138b0:	4628      	mov	r0, r5
 80138b2:	f7ff fb31 	bl	8012f18 <_ZN8touchgfx7Unicode4itoaElPtti>
 80138b6:	2d01      	cmp	r5, #1
 80138b8:	dc0a      	bgt.n	80138d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x330>
 80138ba:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80138be:	2b00      	cmp	r3, #0
 80138c0:	bf0c      	ite	eq
 80138c2:	2300      	moveq	r3, #0
 80138c4:	232e      	movne	r3, #46	; 0x2e
 80138c6:	aa42      	add	r2, sp, #264	; 0x108
 80138c8:	4414      	add	r4, r2
 80138ca:	f824 3cc8 	strh.w	r3, [r4, #-200]
 80138ce:	e752      	b.n	8013776 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d6>
 80138d0:	232e      	movs	r3, #46	; 0x2e
 80138d2:	e7f8      	b.n	80138c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x326>
 80138d4:	ab42      	add	r3, sp, #264	; 0x108
 80138d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80138da:	2300      	movs	r3, #0
 80138dc:	e7f5      	b.n	80138ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32a>
 80138de:	9a08      	ldr	r2, [sp, #32]
 80138e0:	2a00      	cmp	r2, #0
 80138e2:	f43f af4f 	beq.w	8013784 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80138e6:	7812      	ldrb	r2, [r2, #0]
 80138e8:	e74c      	b.n	8013784 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e4>
 80138ea:	2c00      	cmp	r4, #0
 80138ec:	f43f af02 	beq.w	80136f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80138f0:	7824      	ldrb	r4, [r4, #0]
 80138f2:	e6ff      	b.n	80136f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 80138f4:	006e0069 	.word	0x006e0069
 80138f8:	3f000002 	.word	0x3f000002
 80138fc:	0061006e 	.word	0x0061006e

08013900 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8013900:	b507      	push	{r0, r1, r2, lr}
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	4613      	mov	r3, r2
 8013906:	2200      	movs	r2, #0
 8013908:	f7ff fe4a 	bl	80135a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801390c:	b003      	add	sp, #12
 801390e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013914 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013914:	4b01      	ldr	r3, [pc, #4]	; (801391c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013916:	6018      	str	r0, [r3, #0]
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	24006ccc 	.word	0x24006ccc

08013920 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013920:	4b06      	ldr	r3, [pc, #24]	; (801393c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013922:	881a      	ldrh	r2, [r3, #0]
 8013924:	4282      	cmp	r2, r0
 8013926:	d807      	bhi.n	8013938 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013928:	4b05      	ldr	r3, [pc, #20]	; (8013940 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	4413      	add	r3, r2
 801392e:	4298      	cmp	r0, r3
 8013930:	bfac      	ite	ge
 8013932:	2000      	movge	r0, #0
 8013934:	2001      	movlt	r0, #1
 8013936:	4770      	bx	lr
 8013938:	2000      	movs	r0, #0
 801393a:	4770      	bx	lr
 801393c:	24006cec 	.word	0x24006cec
 8013940:	24006cf0 	.word	0x24006cf0

08013944 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013944:	b508      	push	{r3, lr}
 8013946:	4601      	mov	r1, r0
 8013948:	f7ff ffea 	bl	8013920 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801394c:	b118      	cbz	r0, 8013956 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801394e:	4b02      	ldr	r3, [pc, #8]	; (8013958 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013956:	bd08      	pop	{r3, pc}
 8013958:	24006cd0 	.word	0x24006cd0

0801395c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013960:	4d28      	ldr	r5, [pc, #160]	; (8013a04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8013962:	682b      	ldr	r3, [r5, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d04a      	beq.n	80139fe <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8013968:	4a27      	ldr	r2, [pc, #156]	; (8013a08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801396a:	4e28      	ldr	r6, [pc, #160]	; (8013a0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801396c:	8810      	ldrh	r0, [r2, #0]
 801396e:	f8b6 8000 	ldrh.w	r8, [r6]
 8013972:	4c27      	ldr	r4, [pc, #156]	; (8013a10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8013974:	4440      	add	r0, r8
 8013976:	4f27      	ldr	r7, [pc, #156]	; (8013a14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8013978:	1c41      	adds	r1, r0, #1
 801397a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801397e:	f021 0101 	bic.w	r1, r1, #1
 8013982:	eb03 020e 	add.w	r2, r3, lr
 8013986:	0409      	lsls	r1, r1, #16
 8013988:	6022      	str	r2, [r4, #0]
 801398a:	0c09      	lsrs	r1, r1, #16
 801398c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8013990:	eb0e 010c 	add.w	r1, lr, ip
 8013994:	185a      	adds	r2, r3, r1
 8013996:	603a      	str	r2, [r7, #0]
 8013998:	220e      	movs	r2, #14
 801399a:	fb02 f208 	mul.w	r2, r2, r8
 801399e:	3203      	adds	r2, #3
 80139a0:	f022 0203 	bic.w	r2, r2, #3
 80139a4:	4411      	add	r1, r2
 80139a6:	440b      	add	r3, r1
 80139a8:	491b      	ldr	r1, [pc, #108]	; (8013a18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80139aa:	600b      	str	r3, [r1, #0]
 80139ac:	2300      	movs	r3, #0
 80139ae:	491b      	ldr	r1, [pc, #108]	; (8013a1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80139b0:	800b      	strh	r3, [r1, #0]
 80139b2:	491b      	ldr	r1, [pc, #108]	; (8013a20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80139b4:	6809      	ldr	r1, [r1, #0]
 80139b6:	eba1 010e 	sub.w	r1, r1, lr
 80139ba:	eba1 010c 	sub.w	r1, r1, ip
 80139be:	469c      	mov	ip, r3
 80139c0:	1a8a      	subs	r2, r1, r2
 80139c2:	4918      	ldr	r1, [pc, #96]	; (8013a24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80139c4:	600a      	str	r2, [r1, #0]
 80139c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80139ca:	4a17      	ldr	r2, [pc, #92]	; (8013a28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80139cc:	8013      	strh	r3, [r2, #0]
 80139ce:	4283      	cmp	r3, r0
 80139d0:	d10d      	bne.n	80139ee <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80139d2:	8835      	ldrh	r5, [r6, #0]
 80139d4:	2300      	movs	r3, #0
 80139d6:	6838      	ldr	r0, [r7, #0]
 80139d8:	240e      	movs	r4, #14
 80139da:	429d      	cmp	r5, r3
 80139dc:	d90f      	bls.n	80139fe <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80139de:	fb04 0203 	mla	r2, r4, r3, r0
 80139e2:	3301      	adds	r3, #1
 80139e4:	7b11      	ldrb	r1, [r2, #12]
 80139e6:	f36f 1145 	bfc	r1, #5, #1
 80139ea:	7311      	strb	r1, [r2, #12]
 80139ec:	e7f5      	b.n	80139da <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80139ee:	682a      	ldr	r2, [r5, #0]
 80139f0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80139f4:	6822      	ldr	r2, [r4, #0]
 80139f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80139fa:	3301      	adds	r3, #1
 80139fc:	e7e7      	b.n	80139ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80139fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a02:	bf00      	nop
 8013a04:	24006cd0 	.word	0x24006cd0
 8013a08:	24006cec 	.word	0x24006cec
 8013a0c:	24006cf0 	.word	0x24006cf0
 8013a10:	24006ce4 	.word	0x24006ce4
 8013a14:	24006cd4 	.word	0x24006cd4
 8013a18:	24006cdc 	.word	0x24006cdc
 8013a1c:	24006cee 	.word	0x24006cee
 8013a20:	24006cd8 	.word	0x24006cd8
 8013a24:	24006ce8 	.word	0x24006ce8
 8013a28:	24006ce0 	.word	0x24006ce0

08013a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8013a2c:	4b10      	ldr	r3, [pc, #64]	; (8013a70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8013a2e:	b510      	push	{r4, lr}
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	b9db      	cbnz	r3, 8013a6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a34:	b1d1      	cbz	r1, 8013a6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8013a36:	4b0f      	ldr	r3, [pc, #60]	; (8013a74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8013a38:	240e      	movs	r4, #14
 8013a3a:	801a      	strh	r2, [r3, #0]
 8013a3c:	b292      	uxth	r2, r2
 8013a3e:	4b0e      	ldr	r3, [pc, #56]	; (8013a78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8013a40:	881b      	ldrh	r3, [r3, #0]
 8013a42:	4413      	add	r3, r2
 8013a44:	4362      	muls	r2, r4
 8013a46:	2406      	movs	r4, #6
 8013a48:	fb04 2203 	mla	r2, r4, r3, r2
 8013a4c:	428a      	cmp	r2, r1
 8013a4e:	d305      	bcc.n	8013a5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8013a50:	4b0a      	ldr	r3, [pc, #40]	; (8013a7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8013a52:	2135      	movs	r1, #53	; 0x35
 8013a54:	4a0a      	ldr	r2, [pc, #40]	; (8013a80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8013a56:	480b      	ldr	r0, [pc, #44]	; (8013a84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8013a58:	f008 fc40 	bl	801c2dc <__assert_func>
 8013a5c:	4b0a      	ldr	r3, [pc, #40]	; (8013a88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8013a5e:	6019      	str	r1, [r3, #0]
 8013a60:	4b0a      	ldr	r3, [pc, #40]	; (8013a8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8013a62:	6018      	str	r0, [r3, #0]
 8013a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a68:	f7ff bf78 	b.w	801395c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8013a6c:	bd10      	pop	{r4, pc}
 8013a6e:	bf00      	nop
 8013a70:	24006cdc 	.word	0x24006cdc
 8013a74:	24006cf0 	.word	0x24006cf0
 8013a78:	24006cec 	.word	0x24006cec
 8013a7c:	0802014a 	.word	0x0802014a
 8013a80:	080201a3 	.word	0x080201a3
 8013a84:	08020125 	.word	0x08020125
 8013a88:	24006cd8 	.word	0x24006cd8
 8013a8c:	24006cd0 	.word	0x24006cd0

08013a90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8013a90:	b470      	push	{r4, r5, r6}
 8013a92:	4c07      	ldr	r4, [pc, #28]	; (8013ab0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8013a94:	4605      	mov	r5, r0
 8013a96:	4610      	mov	r0, r2
 8013a98:	9a03      	ldr	r2, [sp, #12]
 8013a9a:	6826      	ldr	r6, [r4, #0]
 8013a9c:	b936      	cbnz	r6, 8013aac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8013a9e:	6025      	str	r5, [r4, #0]
 8013aa0:	4c04      	ldr	r4, [pc, #16]	; (8013ab4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8013aa2:	8021      	strh	r1, [r4, #0]
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	bc70      	pop	{r4, r5, r6}
 8013aa8:	f7ff bfc0 	b.w	8013a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8013aac:	bc70      	pop	{r4, r5, r6}
 8013aae:	4770      	bx	lr
 8013ab0:	24006cf4 	.word	0x24006cf4
 8013ab4:	24006cec 	.word	0x24006cec

08013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8013ab8:	b508      	push	{r3, lr}
 8013aba:	4b14      	ldr	r3, [pc, #80]	; (8013b0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8013abc:	6819      	ldr	r1, [r3, #0]
 8013abe:	b931      	cbnz	r1, 8013ace <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8013ac0:	4b13      	ldr	r3, [pc, #76]	; (8013b10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8013ac2:	f240 4185 	movw	r1, #1157	; 0x485
 8013ac6:	4a13      	ldr	r2, [pc, #76]	; (8013b14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013ac8:	4813      	ldr	r0, [pc, #76]	; (8013b18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8013aca:	f008 fc07 	bl	801c2dc <__assert_func>
 8013ace:	4a13      	ldr	r2, [pc, #76]	; (8013b1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8013ad0:	8803      	ldrh	r3, [r0, #0]
 8013ad2:	8812      	ldrh	r2, [r2, #0]
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d204      	bcs.n	8013ae2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8013ad8:	2214      	movs	r2, #20
 8013ada:	fb02 1303 	mla	r3, r2, r3, r1
 8013ade:	8918      	ldrh	r0, [r3, #8]
 8013ae0:	bd08      	pop	{r3, pc}
 8013ae2:	490f      	ldr	r1, [pc, #60]	; (8013b20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8013ae4:	8809      	ldrh	r1, [r1, #0]
 8013ae6:	4411      	add	r1, r2
 8013ae8:	428b      	cmp	r3, r1
 8013aea:	da06      	bge.n	8013afa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8013aec:	1a9b      	subs	r3, r3, r2
 8013aee:	4a0d      	ldr	r2, [pc, #52]	; (8013b24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8013af0:	210e      	movs	r1, #14
 8013af2:	6812      	ldr	r2, [r2, #0]
 8013af4:	fb01 2303 	mla	r3, r1, r3, r2
 8013af8:	e7f1      	b.n	8013ade <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8013afa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013afe:	4293      	cmp	r3, r2
 8013b00:	bf0a      	itet	eq
 8013b02:	4b09      	ldreq	r3, [pc, #36]	; (8013b28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013b04:	2000      	movne	r0, #0
 8013b06:	8818      	ldrheq	r0, [r3, #0]
 8013b08:	e7ea      	b.n	8013ae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8013b0a:	bf00      	nop
 8013b0c:	24006cf4 	.word	0x24006cf4
 8013b10:	0801f196 	.word	0x0801f196
 8013b14:	08020250 	.word	0x08020250
 8013b18:	08020125 	.word	0x08020125
 8013b1c:	24006cec 	.word	0x24006cec
 8013b20:	24006cf0 	.word	0x24006cf0
 8013b24:	24006cd4 	.word	0x24006cd4
 8013b28:	24006c60 	.word	0x24006c60

08013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013b2c:	b508      	push	{r3, lr}
 8013b2e:	4b14      	ldr	r3, [pc, #80]	; (8013b80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8013b30:	6819      	ldr	r1, [r3, #0]
 8013b32:	b931      	cbnz	r1, 8013b42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013b34:	4b13      	ldr	r3, [pc, #76]	; (8013b84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013b36:	f240 4199 	movw	r1, #1177	; 0x499
 8013b3a:	4a13      	ldr	r2, [pc, #76]	; (8013b88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013b3c:	4813      	ldr	r0, [pc, #76]	; (8013b8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8013b3e:	f008 fbcd 	bl	801c2dc <__assert_func>
 8013b42:	4a13      	ldr	r2, [pc, #76]	; (8013b90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013b44:	8803      	ldrh	r3, [r0, #0]
 8013b46:	8812      	ldrh	r2, [r2, #0]
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d204      	bcs.n	8013b56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8013b4c:	2214      	movs	r2, #20
 8013b4e:	fb02 1303 	mla	r3, r2, r3, r1
 8013b52:	8958      	ldrh	r0, [r3, #10]
 8013b54:	bd08      	pop	{r3, pc}
 8013b56:	490f      	ldr	r1, [pc, #60]	; (8013b94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013b58:	8809      	ldrh	r1, [r1, #0]
 8013b5a:	4411      	add	r1, r2
 8013b5c:	428b      	cmp	r3, r1
 8013b5e:	da06      	bge.n	8013b6e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8013b60:	1a9b      	subs	r3, r3, r2
 8013b62:	4a0d      	ldr	r2, [pc, #52]	; (8013b98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8013b64:	210e      	movs	r1, #14
 8013b66:	6812      	ldr	r2, [r2, #0]
 8013b68:	fb01 2303 	mla	r3, r1, r3, r2
 8013b6c:	e7f1      	b.n	8013b52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8013b6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b72:	4293      	cmp	r3, r2
 8013b74:	bf0a      	itet	eq
 8013b76:	4b09      	ldreq	r3, [pc, #36]	; (8013b9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8013b78:	2000      	movne	r0, #0
 8013b7a:	8818      	ldrheq	r0, [r3, #0]
 8013b7c:	e7ea      	b.n	8013b54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8013b7e:	bf00      	nop
 8013b80:	24006cf4 	.word	0x24006cf4
 8013b84:	0801f196 	.word	0x0801f196
 8013b88:	0802027c 	.word	0x0802027c
 8013b8c:	08020125 	.word	0x08020125
 8013b90:	24006cec 	.word	0x24006cec
 8013b94:	24006cf0 	.word	0x24006cf0
 8013b98:	24006cd4 	.word	0x24006cd4
 8013b9c:	24006c62 	.word	0x24006c62

08013ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8013ba0:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8013ba2:	b510      	push	{r4, lr}
 8013ba4:	681c      	ldr	r4, [r3, #0]
 8013ba6:	b934      	cbnz	r4, 8013bb6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8013ba8:	4b22      	ldr	r3, [pc, #136]	; (8013c34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8013baa:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8013bae:	4a22      	ldr	r2, [pc, #136]	; (8013c38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8013bb0:	4822      	ldr	r0, [pc, #136]	; (8013c3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8013bb2:	f008 fb93 	bl	801c2dc <__assert_func>
 8013bb6:	4a22      	ldr	r2, [pc, #136]	; (8013c40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8013bb8:	880b      	ldrh	r3, [r1, #0]
 8013bba:	8812      	ldrh	r2, [r2, #0]
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	d211      	bcs.n	8013be4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8013bc0:	2214      	movs	r2, #20
 8013bc2:	fb02 4303 	mla	r3, r2, r3, r4
 8013bc6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8013bca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013bce:	8a1a      	ldrh	r2, [r3, #16]
 8013bd0:	8a5b      	ldrh	r3, [r3, #18]
 8013bd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013bd6:	8004      	strh	r4, [r0, #0]
 8013bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bdc:	8041      	strh	r1, [r0, #2]
 8013bde:	8082      	strh	r2, [r0, #4]
 8013be0:	80c3      	strh	r3, [r0, #6]
 8013be2:	e00e      	b.n	8013c02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013be4:	4917      	ldr	r1, [pc, #92]	; (8013c44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8013be6:	8809      	ldrh	r1, [r1, #0]
 8013be8:	4411      	add	r1, r2
 8013bea:	428b      	cmp	r3, r1
 8013bec:	da0a      	bge.n	8013c04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8013bee:	1a9b      	subs	r3, r3, r2
 8013bf0:	4a15      	ldr	r2, [pc, #84]	; (8013c48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8013bf2:	210e      	movs	r1, #14
 8013bf4:	6812      	ldr	r2, [r2, #0]
 8013bf6:	fb01 2303 	mla	r3, r1, r3, r2
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	6002      	str	r2, [r0, #0]
 8013bfe:	685a      	ldr	r2, [r3, #4]
 8013c00:	6042      	str	r2, [r0, #4]
 8013c02:	bd10      	pop	{r4, pc}
 8013c04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d10b      	bne.n	8013c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8013c0c:	4b0f      	ldr	r3, [pc, #60]	; (8013c4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8013c0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013c12:	4b0f      	ldr	r3, [pc, #60]	; (8013c50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013c14:	8081      	strh	r1, [r0, #4]
 8013c16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	80c2      	strh	r2, [r0, #6]
 8013c1e:	8003      	strh	r3, [r0, #0]
 8013c20:	8043      	strh	r3, [r0, #2]
 8013c22:	e7ee      	b.n	8013c02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013c24:	2300      	movs	r3, #0
 8013c26:	8003      	strh	r3, [r0, #0]
 8013c28:	8043      	strh	r3, [r0, #2]
 8013c2a:	8083      	strh	r3, [r0, #4]
 8013c2c:	e7d8      	b.n	8013be0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8013c2e:	bf00      	nop
 8013c30:	24006cf4 	.word	0x24006cf4
 8013c34:	0801f196 	.word	0x0801f196
 8013c38:	080201e9 	.word	0x080201e9
 8013c3c:	08020125 	.word	0x08020125
 8013c40:	24006cec 	.word	0x24006cec
 8013c44:	24006cf0 	.word	0x24006cf0
 8013c48:	24006cd4 	.word	0x24006cd4
 8013c4c:	24006c60 	.word	0x24006c60
 8013c50:	24006c62 	.word	0x24006c62

08013c54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8013c54:	4b18      	ldr	r3, [pc, #96]	; (8013cb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	b34b      	cbz	r3, 8013cae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013c5a:	4a18      	ldr	r2, [pc, #96]	; (8013cbc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8013c5c:	8800      	ldrh	r0, [r0, #0]
 8013c5e:	8812      	ldrh	r2, [r2, #0]
 8013c60:	4290      	cmp	r0, r2
 8013c62:	d211      	bcs.n	8013c88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8013c64:	2214      	movs	r2, #20
 8013c66:	fb02 3300 	mla	r3, r2, r0, r3
 8013c6a:	8a1a      	ldrh	r2, [r3, #16]
 8013c6c:	8919      	ldrh	r1, [r3, #8]
 8013c6e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013c72:	428a      	cmp	r2, r1
 8013c74:	db1d      	blt.n	8013cb2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013c76:	8a58      	ldrh	r0, [r3, #18]
 8013c78:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013c7c:	895b      	ldrh	r3, [r3, #10]
 8013c7e:	4298      	cmp	r0, r3
 8013c80:	bfac      	ite	ge
 8013c82:	2000      	movge	r0, #0
 8013c84:	2001      	movlt	r0, #1
 8013c86:	4770      	bx	lr
 8013c88:	4b0d      	ldr	r3, [pc, #52]	; (8013cc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8013c8a:	881b      	ldrh	r3, [r3, #0]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	4298      	cmp	r0, r3
 8013c90:	da0d      	bge.n	8013cae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013c92:	4b0c      	ldr	r3, [pc, #48]	; (8013cc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8013c94:	1a80      	subs	r0, r0, r2
 8013c96:	220e      	movs	r2, #14
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	fb02 3300 	mla	r3, r2, r0, r3
 8013c9e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8013ca2:	891a      	ldrh	r2, [r3, #8]
 8013ca4:	4291      	cmp	r1, r2
 8013ca6:	db04      	blt.n	8013cb2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013ca8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8013cac:	e7e6      	b.n	8013c7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8013cae:	2000      	movs	r0, #0
 8013cb0:	4770      	bx	lr
 8013cb2:	2001      	movs	r0, #1
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop
 8013cb8:	24006cf4 	.word	0x24006cf4
 8013cbc:	24006cec 	.word	0x24006cec
 8013cc0:	24006cf0 	.word	0x24006cf0
 8013cc4:	24006cd4 	.word	0x24006cd4

08013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013cc8:	b508      	push	{r3, lr}
 8013cca:	4b12      	ldr	r3, [pc, #72]	; (8013d14 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013ccc:	6819      	ldr	r1, [r3, #0]
 8013cce:	b931      	cbnz	r1, 8013cde <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013cd0:	4b11      	ldr	r3, [pc, #68]	; (8013d18 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8013cd2:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8013cd6:	4a11      	ldr	r2, [pc, #68]	; (8013d1c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013cd8:	4811      	ldr	r0, [pc, #68]	; (8013d20 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013cda:	f008 faff 	bl	801c2dc <__assert_func>
 8013cde:	8803      	ldrh	r3, [r0, #0]
 8013ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d012      	beq.n	8013d0e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8013ce8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d103      	bne.n	8013cf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8013cf0:	4b0c      	ldr	r3, [pc, #48]	; (8013d24 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8013cf6:	bd08      	pop	{r3, pc}
 8013cf8:	4a0b      	ldr	r2, [pc, #44]	; (8013d28 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8013cfa:	6812      	ldr	r2, [r2, #0]
 8013cfc:	b11a      	cbz	r2, 8013d06 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8013cfe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d1f7      	bne.n	8013cf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d06:	2214      	movs	r2, #20
 8013d08:	4353      	muls	r3, r2
 8013d0a:	58c8      	ldr	r0, [r1, r3]
 8013d0c:	e7f3      	b.n	8013cf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d0e:	2000      	movs	r0, #0
 8013d10:	e7f1      	b.n	8013cf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013d12:	bf00      	nop
 8013d14:	24006cf4 	.word	0x24006cf4
 8013d18:	0801f196 	.word	0x0801f196
 8013d1c:	0802021f 	.word	0x0802021f
 8013d20:	08020125 	.word	0x08020125
 8013d24:	24006c6c 	.word	0x24006c6c
 8013d28:	24006cd0 	.word	0x24006cd0

08013d2c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013d2c:	8802      	ldrh	r2, [r0, #0]
 8013d2e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d845      	bhi.n	8013dc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d36:	4b24      	ldr	r3, [pc, #144]	; (8013dc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013d38:	8818      	ldrh	r0, [r3, #0]
 8013d3a:	4282      	cmp	r2, r0
 8013d3c:	d221      	bcs.n	8013d82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8013d3e:	4b23      	ldr	r3, [pc, #140]	; (8013dcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013d40:	6819      	ldr	r1, [r3, #0]
 8013d42:	2314      	movs	r3, #20
 8013d44:	fb03 1302 	mla	r3, r3, r2, r1
 8013d48:	6858      	ldr	r0, [r3, #4]
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d03a      	beq.n	8013dc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d4e:	4920      	ldr	r1, [pc, #128]	; (8013dd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013d50:	6809      	ldr	r1, [r1, #0]
 8013d52:	2900      	cmp	r1, #0
 8013d54:	d036      	beq.n	8013dc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d5a:	2900      	cmp	r1, #0
 8013d5c:	d032      	beq.n	8013dc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013d5e:	891a      	ldrh	r2, [r3, #8]
 8013d60:	8958      	ldrh	r0, [r3, #10]
 8013d62:	4350      	muls	r0, r2
 8013d64:	7c5a      	ldrb	r2, [r3, #17]
 8013d66:	7cdb      	ldrb	r3, [r3, #19]
 8013d68:	0952      	lsrs	r2, r2, #5
 8013d6a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013d6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013d72:	2b0b      	cmp	r3, #11
 8013d74:	bf18      	it	ne
 8013d76:	0040      	lslne	r0, r0, #1
 8013d78:	3003      	adds	r0, #3
 8013d7a:	f020 0003 	bic.w	r0, r0, #3
 8013d7e:	4408      	add	r0, r1
 8013d80:	4770      	bx	lr
 8013d82:	4b14      	ldr	r3, [pc, #80]	; (8013dd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8013d84:	881b      	ldrh	r3, [r3, #0]
 8013d86:	4403      	add	r3, r0
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	da1a      	bge.n	8013dc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013d8c:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8013d8e:	1a10      	subs	r0, r2, r0
 8013d90:	210e      	movs	r1, #14
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	fb01 3000 	mla	r0, r1, r0, r3
 8013d98:	7b03      	ldrb	r3, [r0, #12]
 8013d9a:	f003 031f 	and.w	r3, r3, #31
 8013d9e:	2b0b      	cmp	r3, #11
 8013da0:	d10b      	bne.n	8013dba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013da2:	8903      	ldrh	r3, [r0, #8]
 8013da4:	8940      	ldrh	r0, [r0, #10]
 8013da6:	4358      	muls	r0, r3
 8013da8:	4b09      	ldr	r3, [pc, #36]	; (8013dd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013daa:	3003      	adds	r0, #3
 8013dac:	6819      	ldr	r1, [r3, #0]
 8013dae:	f020 0303 	bic.w	r3, r0, #3
 8013db2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8013db6:	4418      	add	r0, r3
 8013db8:	4770      	bx	lr
 8013dba:	2b0d      	cmp	r3, #13
 8013dbc:	d101      	bne.n	8013dc2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013dbe:	300d      	adds	r0, #13
 8013dc0:	4770      	bx	lr
 8013dc2:	2000      	movs	r0, #0
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	24006cec 	.word	0x24006cec
 8013dcc:	24006cf4 	.word	0x24006cf4
 8013dd0:	24006cd0 	.word	0x24006cd0
 8013dd4:	24006cf0 	.word	0x24006cf0
 8013dd8:	24006cd4 	.word	0x24006cd4

08013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8013ddc:	4b17      	ldr	r3, [pc, #92]	; (8013e3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8013dde:	b510      	push	{r4, lr}
 8013de0:	6819      	ldr	r1, [r3, #0]
 8013de2:	8803      	ldrh	r3, [r0, #0]
 8013de4:	b1e9      	cbz	r1, 8013e22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013de6:	4a16      	ldr	r2, [pc, #88]	; (8013e40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8013de8:	8812      	ldrh	r2, [r2, #0]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d90a      	bls.n	8013e04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8013dee:	2214      	movs	r2, #20
 8013df0:	fb02 1303 	mla	r3, r2, r3, r1
 8013df4:	7c58      	ldrb	r0, [r3, #17]
 8013df6:	0942      	lsrs	r2, r0, #5
 8013df8:	7cd8      	ldrb	r0, [r3, #19]
 8013dfa:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8013dfe:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8013e02:	bd10      	pop	{r4, pc}
 8013e04:	490f      	ldr	r1, [pc, #60]	; (8013e44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8013e06:	8809      	ldrh	r1, [r1, #0]
 8013e08:	4411      	add	r1, r2
 8013e0a:	428b      	cmp	r3, r1
 8013e0c:	da09      	bge.n	8013e22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8013e0e:	1a9b      	subs	r3, r3, r2
 8013e10:	4a0d      	ldr	r2, [pc, #52]	; (8013e48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8013e12:	210e      	movs	r1, #14
 8013e14:	6812      	ldr	r2, [r2, #0]
 8013e16:	fb01 2303 	mla	r3, r1, r3, r2
 8013e1a:	7b18      	ldrb	r0, [r3, #12]
 8013e1c:	f000 001f 	and.w	r0, r0, #31
 8013e20:	e7ef      	b.n	8013e02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013e22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d106      	bne.n	8013e38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8013e2a:	f7f9 f855 	bl	800ced8 <_ZN8touchgfx3HAL3lcdEv>
 8013e2e:	6803      	ldr	r3, [r0, #0]
 8013e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e36:	4718      	bx	r3
 8013e38:	2000      	movs	r0, #0
 8013e3a:	e7e2      	b.n	8013e02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013e3c:	24006cf4 	.word	0x24006cf4
 8013e40:	24006cec 	.word	0x24006cec
 8013e44:	24006cf0 	.word	0x24006cf0
 8013e48:	24006cd4 	.word	0x24006cd4

08013e4c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8013e4c:	2018      	movs	r0, #24
 8013e4e:	4770      	bx	lr

08013e50 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8013e50:	2001      	movs	r0, #1
 8013e52:	4770      	bx	lr

08013e54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e58:	b085      	sub	sp, #20
 8013e5a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013e5c:	9203      	str	r2, [sp, #12]
 8013e5e:	6870      	ldr	r0, [r6, #4]
 8013e60:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013e64:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013e68:	9101      	str	r1, [sp, #4]
 8013e6a:	fa1f f885 	uxth.w	r8, r5
 8013e6e:	43ed      	mvns	r5, r5
 8013e70:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013e74:	b2ed      	uxtb	r5, r5
 8013e76:	fb00 2404 	mla	r4, r0, r4, r2
 8013e7a:	6832      	ldr	r2, [r6, #0]
 8013e7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013e80:	4414      	add	r4, r2
 8013e82:	f8dc 2000 	ldr.w	r2, [ip]
 8013e86:	9202      	str	r2, [sp, #8]
 8013e88:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013e8c:	f102 0e04 	add.w	lr, r2, #4
 8013e90:	9a01      	ldr	r2, [sp, #4]
 8013e92:	2a00      	cmp	r2, #0
 8013e94:	dc03      	bgt.n	8013e9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8013e96:	9a03      	ldr	r2, [sp, #12]
 8013e98:	2a00      	cmp	r2, #0
 8013e9a:	f340 8116 	ble.w	80140ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ea0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8013ea4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013ea8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013eaa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8013eae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	dd0e      	ble.n	8013ed4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013eb6:	1406      	asrs	r6, r0, #16
 8013eb8:	d405      	bmi.n	8013ec6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013eba:	4556      	cmp	r6, sl
 8013ebc:	da03      	bge.n	8013ec6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013ebe:	1416      	asrs	r6, r2, #16
 8013ec0:	d401      	bmi.n	8013ec6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013ec2:	454e      	cmp	r6, r9
 8013ec4:	db07      	blt.n	8013ed6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8013ec6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	3403      	adds	r4, #3
 8013ecc:	4430      	add	r0, r6
 8013ece:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013ed0:	4432      	add	r2, r6
 8013ed2:	e7ee      	b.n	8013eb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8013ed4:	d063      	beq.n	8013f9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013ed6:	1e5e      	subs	r6, r3, #1
 8013ed8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013eda:	fb07 0706 	mla	r7, r7, r6, r0
 8013ede:	143f      	asrs	r7, r7, #16
 8013ee0:	d454      	bmi.n	8013f8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ee2:	4557      	cmp	r7, sl
 8013ee4:	da52      	bge.n	8013f8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ee6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013ee8:	fb07 2606 	mla	r6, r7, r6, r2
 8013eec:	1436      	asrs	r6, r6, #16
 8013eee:	d44d      	bmi.n	8013f8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ef0:	454e      	cmp	r6, r9
 8013ef2:	da4b      	bge.n	8013f8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013ef4:	1ce6      	adds	r6, r4, #3
 8013ef6:	4699      	mov	r9, r3
 8013ef8:	f1b9 0f00 	cmp.w	r9, #0
 8013efc:	f106 0603 	add.w	r6, r6, #3
 8013f00:	dd48      	ble.n	8013f94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8013f02:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8013f06:	1417      	asrs	r7, r2, #16
 8013f08:	9902      	ldr	r1, [sp, #8]
 8013f0a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013f0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f12:	fb0b 1707 	mla	r7, fp, r7, r1
 8013f16:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013f1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013f1c:	f817 700a 	ldrb.w	r7, [r7, sl]
 8013f20:	fb1b fb05 	smulbb	fp, fp, r5
 8013f24:	4408      	add	r0, r1
 8013f26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013f28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013f2c:	440a      	add	r2, r1
 8013f2e:	eb0e 0a07 	add.w	sl, lr, r7
 8013f32:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8013f36:	fb07 b708 	mla	r7, r7, r8, fp
 8013f3a:	b2bf      	uxth	r7, r7
 8013f3c:	f107 0b01 	add.w	fp, r7, #1
 8013f40:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013f44:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013f48:	fb1b fb05 	smulbb	fp, fp, r5
 8013f4c:	123f      	asrs	r7, r7, #8
 8013f4e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8013f52:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013f56:	fb07 b708 	mla	r7, r7, r8, fp
 8013f5a:	b2bf      	uxth	r7, r7
 8013f5c:	f107 0b01 	add.w	fp, r7, #1
 8013f60:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013f64:	123f      	asrs	r7, r7, #8
 8013f66:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013f6a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013f6e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8013f72:	fb1a fa05 	smulbb	sl, sl, r5
 8013f76:	fb07 a708 	mla	r7, r7, r8, sl
 8013f7a:	b2bf      	uxth	r7, r7
 8013f7c:	f107 0a01 	add.w	sl, r7, #1
 8013f80:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8013f84:	123f      	asrs	r7, r7, #8
 8013f86:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013f8a:	e7b5      	b.n	8013ef8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8013f8c:	2700      	movs	r7, #0
 8013f8e:	1bde      	subs	r6, r3, r7
 8013f90:	2e00      	cmp	r6, #0
 8013f92:	dc42      	bgt.n	801401a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8013f94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f9c:	441c      	add	r4, r3
 8013f9e:	9b01      	ldr	r3, [sp, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f340 8092 	ble.w	80140ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013fb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013fb4:	eef0 6a62 	vmov.f32	s13, s5
 8013fb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013fbc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013fc4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013fc8:	eef0 6a43 	vmov.f32	s13, s6
 8013fcc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013fd0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8013fd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013fd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013fdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013fe0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013fe4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013fe8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013fec:	ee12 2a90 	vmov	r2, s5
 8013ff0:	eef0 2a47 	vmov.f32	s5, s14
 8013ff4:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ff8:	ee13 2a10 	vmov	r2, s6
 8013ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8013ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014000:	eeb0 3a67 	vmov.f32	s6, s15
 8014004:	fb92 f3f3 	sdiv	r3, r2, r3
 8014008:	9312      	str	r3, [sp, #72]	; 0x48
 801400a:	9b01      	ldr	r3, [sp, #4]
 801400c:	9a03      	ldr	r2, [sp, #12]
 801400e:	3b01      	subs	r3, #1
 8014010:	9301      	str	r3, [sp, #4]
 8014012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014014:	bf08      	it	eq
 8014016:	4613      	moveq	r3, r2
 8014018:	e73a      	b.n	8013e90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801401a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801401e:	d44e      	bmi.n	80140be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014020:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014024:	4556      	cmp	r6, sl
 8014026:	dd4a      	ble.n	80140be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014028:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801402c:	d447      	bmi.n	80140be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801402e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014032:	4559      	cmp	r1, fp
 8014034:	dd43      	ble.n	80140be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014036:	fa0f f986 	sxth.w	r9, r6
 801403a:	9902      	ldr	r1, [sp, #8]
 801403c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014040:	fb0b 1909 	mla	r9, fp, r9, r1
 8014044:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014048:	f819 900a 	ldrb.w	r9, [r9, sl]
 801404c:	fb1b fb05 	smulbb	fp, fp, r5
 8014050:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014054:	eb0e 0a09 	add.w	sl, lr, r9
 8014058:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801405c:	fb09 b908 	mla	r9, r9, r8, fp
 8014060:	fa1f f989 	uxth.w	r9, r9
 8014064:	f109 0b01 	add.w	fp, r9, #1
 8014068:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801406c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014070:	f804 9006 	strb.w	r9, [r4, r6]
 8014074:	4426      	add	r6, r4
 8014076:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801407a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801407e:	fb1b fb05 	smulbb	fp, fp, r5
 8014082:	fb09 b908 	mla	r9, r9, r8, fp
 8014086:	fa1f f989 	uxth.w	r9, r9
 801408a:	f109 0b01 	add.w	fp, r9, #1
 801408e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014092:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014096:	f886 9001 	strb.w	r9, [r6, #1]
 801409a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801409e:	f896 a002 	ldrb.w	sl, [r6, #2]
 80140a2:	fb1a fa05 	smulbb	sl, sl, r5
 80140a6:	fb09 a908 	mla	r9, r9, r8, sl
 80140aa:	fa1f f989 	uxth.w	r9, r9
 80140ae:	f109 0a01 	add.w	sl, r9, #1
 80140b2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80140b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80140ba:	f886 9002 	strb.w	r9, [r6, #2]
 80140be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80140c0:	3701      	adds	r7, #1
 80140c2:	4408      	add	r0, r1
 80140c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80140c6:	440a      	add	r2, r1
 80140c8:	e761      	b.n	8013f8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80140ca:	b005      	add	sp, #20
 80140cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80140d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80140d6:	4693      	mov	fp, r2
 80140d8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80140da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140de:	6868      	ldr	r0, [r5, #4]
 80140e0:	6877      	ldr	r7, [r6, #4]
 80140e2:	9100      	str	r1, [sp, #0]
 80140e4:	3704      	adds	r7, #4
 80140e6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80140ea:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80140ee:	fb00 2404 	mla	r4, r0, r4, r2
 80140f2:	682a      	ldr	r2, [r5, #0]
 80140f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80140f8:	4414      	add	r4, r2
 80140fa:	6832      	ldr	r2, [r6, #0]
 80140fc:	9201      	str	r2, [sp, #4]
 80140fe:	9a00      	ldr	r2, [sp, #0]
 8014100:	2a00      	cmp	r2, #0
 8014102:	dc03      	bgt.n	801410c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014104:	f1bb 0f00 	cmp.w	fp, #0
 8014108:	f340 80bc 	ble.w	8014284 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801410c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801410e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8014112:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014118:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801411c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014120:	2b00      	cmp	r3, #0
 8014122:	dd0c      	ble.n	801413e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014124:	1405      	asrs	r5, r0, #16
 8014126:	d405      	bmi.n	8014134 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014128:	4555      	cmp	r5, sl
 801412a:	da03      	bge.n	8014134 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801412c:	1415      	asrs	r5, r2, #16
 801412e:	d401      	bmi.n	8014134 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014130:	454d      	cmp	r5, r9
 8014132:	db05      	blt.n	8014140 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014134:	4440      	add	r0, r8
 8014136:	4472      	add	r2, lr
 8014138:	3b01      	subs	r3, #1
 801413a:	3403      	adds	r4, #3
 801413c:	e7f0      	b.n	8014120 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801413e:	d03f      	beq.n	80141c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8014140:	1e5d      	subs	r5, r3, #1
 8014142:	fb08 0c05 	mla	ip, r8, r5, r0
 8014146:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801414a:	d42e      	bmi.n	80141aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801414c:	45d4      	cmp	ip, sl
 801414e:	da2c      	bge.n	80141aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014150:	fb0e 2505 	mla	r5, lr, r5, r2
 8014154:	142d      	asrs	r5, r5, #16
 8014156:	d428      	bmi.n	80141aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014158:	454d      	cmp	r5, r9
 801415a:	da26      	bge.n	80141aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801415c:	1ce5      	adds	r5, r4, #3
 801415e:	469c      	mov	ip, r3
 8014160:	f1bc 0f00 	cmp.w	ip, #0
 8014164:	f105 0503 	add.w	r5, r5, #3
 8014168:	dd25      	ble.n	80141b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801416a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801416e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8014172:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014176:	4472      	add	r2, lr
 8014178:	468a      	mov	sl, r1
 801417a:	9901      	ldr	r1, [sp, #4]
 801417c:	fb0a 1909 	mla	r9, sl, r9, r1
 8014180:	1401      	asrs	r1, r0, #16
 8014182:	4440      	add	r0, r8
 8014184:	f819 9001 	ldrb.w	r9, [r9, r1]
 8014188:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801418c:	eb07 0a09 	add.w	sl, r7, r9
 8014190:	f817 9009 	ldrb.w	r9, [r7, r9]
 8014194:	f805 9c06 	strb.w	r9, [r5, #-6]
 8014198:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801419c:	f805 9c05 	strb.w	r9, [r5, #-5]
 80141a0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80141a4:	f805 9c04 	strb.w	r9, [r5, #-4]
 80141a8:	e7da      	b.n	8014160 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80141aa:	2500      	movs	r5, #0
 80141ac:	eba3 0c05 	sub.w	ip, r3, r5
 80141b0:	f1bc 0f00 	cmp.w	ip, #0
 80141b4:	dc3b      	bgt.n	801422e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80141b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80141ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80141be:	441c      	add	r4, r3
 80141c0:	9b00      	ldr	r3, [sp, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	dd5e      	ble.n	8014284 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80141c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80141ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141d0:	eeb0 6a62 	vmov.f32	s12, s5
 80141d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80141d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141e0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80141e4:	eeb0 6a43 	vmov.f32	s12, s6
 80141e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141ec:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80141f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80141f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80141f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80141fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014200:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014204:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014208:	ee12 2a90 	vmov	r2, s5
 801420c:	eef0 2a47 	vmov.f32	s5, s14
 8014210:	fb92 f8f3 	sdiv	r8, r2, r3
 8014214:	ee13 2a10 	vmov	r2, s6
 8014218:	eeb0 3a67 	vmov.f32	s6, s15
 801421c:	fb92 fef3 	sdiv	lr, r2, r3
 8014220:	9b00      	ldr	r3, [sp, #0]
 8014222:	3b01      	subs	r3, #1
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014228:	bf08      	it	eq
 801422a:	465b      	moveq	r3, fp
 801422c:	e767      	b.n	80140fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801422e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014232:	d423      	bmi.n	801427c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014234:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8014238:	45cc      	cmp	ip, r9
 801423a:	dd1f      	ble.n	801427c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801423c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014240:	d41c      	bmi.n	801427c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014242:	68f1      	ldr	r1, [r6, #12]
 8014244:	4551      	cmp	r1, sl
 8014246:	dd19      	ble.n	801427c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014248:	fa0f fc8c 	sxth.w	ip, ip
 801424c:	9901      	ldr	r1, [sp, #4]
 801424e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8014252:	f81c c009 	ldrb.w	ip, [ip, r9]
 8014256:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801425a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801425e:	eb07 090c 	add.w	r9, r7, ip
 8014262:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8014266:	f804 a00c 	strb.w	sl, [r4, ip]
 801426a:	44a4      	add	ip, r4
 801426c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8014270:	f88c a001 	strb.w	sl, [ip, #1]
 8014274:	f899 9002 	ldrb.w	r9, [r9, #2]
 8014278:	f88c 9002 	strb.w	r9, [ip, #2]
 801427c:	4440      	add	r0, r8
 801427e:	4472      	add	r2, lr
 8014280:	3501      	adds	r5, #1
 8014282:	e793      	b.n	80141ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014284:	b003      	add	sp, #12
 8014286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801428a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801428a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428e:	b085      	sub	sp, #20
 8014290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014294:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014296:	9202      	str	r2, [sp, #8]
 8014298:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801429c:	6860      	ldr	r0, [r4, #4]
 801429e:	9203      	str	r2, [sp, #12]
 80142a0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80142a4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80142a8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80142ac:	fb00 2505 	mla	r5, r0, r5, r2
 80142b0:	6822      	ldr	r2, [r4, #0]
 80142b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142b6:	4415      	add	r5, r2
 80142b8:	f8dc 2000 	ldr.w	r2, [ip]
 80142bc:	9200      	str	r2, [sp, #0]
 80142be:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80142c2:	3204      	adds	r2, #4
 80142c4:	9201      	str	r2, [sp, #4]
 80142c6:	2900      	cmp	r1, #0
 80142c8:	dc03      	bgt.n	80142d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80142ca:	9a02      	ldr	r2, [sp, #8]
 80142cc:	2a00      	cmp	r2, #0
 80142ce:	f340 8127 	ble.w	8014520 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80142d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142d4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80142d8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80142dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142de:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80142e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	dd0d      	ble.n	8014306 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80142ea:	1422      	asrs	r2, r4, #16
 80142ec:	d405      	bmi.n	80142fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142ee:	4542      	cmp	r2, r8
 80142f0:	da03      	bge.n	80142fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142f2:	1402      	asrs	r2, r0, #16
 80142f4:	d401      	bmi.n	80142fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80142f6:	42ba      	cmp	r2, r7
 80142f8:	db06      	blt.n	8014308 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80142fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142fc:	4474      	add	r4, lr
 80142fe:	3b01      	subs	r3, #1
 8014300:	3503      	adds	r5, #3
 8014302:	4410      	add	r0, r2
 8014304:	e7ef      	b.n	80142e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014306:	d075      	beq.n	80143f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8014308:	1e5a      	subs	r2, r3, #1
 801430a:	fb0e 4602 	mla	r6, lr, r2, r4
 801430e:	1436      	asrs	r6, r6, #16
 8014310:	d465      	bmi.n	80143de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014312:	4546      	cmp	r6, r8
 8014314:	da63      	bge.n	80143de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014316:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014318:	fb06 0202 	mla	r2, r6, r2, r0
 801431c:	1412      	asrs	r2, r2, #16
 801431e:	d45e      	bmi.n	80143de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014320:	42ba      	cmp	r2, r7
 8014322:	da5c      	bge.n	80143de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014324:	1cef      	adds	r7, r5, #3
 8014326:	4699      	mov	r9, r3
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	dd5d      	ble.n	80143ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801432e:	1402      	asrs	r2, r0, #16
 8014330:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014334:	1426      	asrs	r6, r4, #16
 8014336:	4692      	mov	sl, r2
 8014338:	9a00      	ldr	r2, [sp, #0]
 801433a:	fb08 220a 	mla	r2, r8, sl, r2
 801433e:	5d92      	ldrb	r2, [r2, r6]
 8014340:	9e01      	ldr	r6, [sp, #4]
 8014342:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014346:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801434a:	d041      	beq.n	80143d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801434c:	9a03      	ldr	r2, [sp, #12]
 801434e:	fa5f fb86 	uxtb.w	fp, r6
 8014352:	fb02 f808 	mul.w	r8, r2, r8
 8014356:	f108 0201 	add.w	r2, r8, #1
 801435a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801435e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014362:	1212      	asrs	r2, r2, #8
 8014364:	fa1f fa82 	uxth.w	sl, r2
 8014368:	43d2      	mvns	r2, r2
 801436a:	fb1b fb0a 	smulbb	fp, fp, sl
 801436e:	b2d2      	uxtb	r2, r2
 8014370:	fb08 b802 	mla	r8, r8, r2, fp
 8014374:	fa1f f888 	uxth.w	r8, r8
 8014378:	f108 0b01 	add.w	fp, r8, #1
 801437c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014380:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014384:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014388:	fb1b fb0a 	smulbb	fp, fp, sl
 801438c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014390:	fb16 fa0a 	smulbb	sl, r6, sl
 8014394:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014398:	f807 8c03 	strb.w	r8, [r7, #-3]
 801439c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80143a0:	fb06 aa02 	mla	sl, r6, r2, sl
 80143a4:	fb08 b802 	mla	r8, r8, r2, fp
 80143a8:	fa1f fa8a 	uxth.w	sl, sl
 80143ac:	fa1f f888 	uxth.w	r8, r8
 80143b0:	f10a 0601 	add.w	r6, sl, #1
 80143b4:	f108 0b01 	add.w	fp, r8, #1
 80143b8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80143bc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80143c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80143c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80143c8:	f807 ac01 	strb.w	sl, [r7, #-1]
 80143cc:	f807 8c02 	strb.w	r8, [r7, #-2]
 80143d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143d2:	4474      	add	r4, lr
 80143d4:	3703      	adds	r7, #3
 80143d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80143da:	4410      	add	r0, r2
 80143dc:	e7a4      	b.n	8014328 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80143de:	f04f 0800 	mov.w	r8, #0
 80143e2:	eba3 0208 	sub.w	r2, r3, r8
 80143e6:	2a00      	cmp	r2, #0
 80143e8:	dc3b      	bgt.n	8014462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80143ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80143ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80143f2:	441d      	add	r5, r3
 80143f4:	2900      	cmp	r1, #0
 80143f6:	f340 8093 	ble.w	8014520 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80143fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80143fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014400:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014404:	3901      	subs	r1, #1
 8014406:	eeb0 6a62 	vmov.f32	s12, s5
 801440a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801440e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014412:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014416:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801441a:	eeb0 6a43 	vmov.f32	s12, s6
 801441e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014422:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014426:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801442a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801442e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014432:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014436:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801443a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801443e:	ee12 2a90 	vmov	r2, s5
 8014442:	eef0 2a47 	vmov.f32	s5, s14
 8014446:	fb92 fef3 	sdiv	lr, r2, r3
 801444a:	ee13 2a10 	vmov	r2, s6
 801444e:	eeb0 3a67 	vmov.f32	s6, s15
 8014452:	fb92 f3f3 	sdiv	r3, r2, r3
 8014456:	9a02      	ldr	r2, [sp, #8]
 8014458:	9312      	str	r3, [sp, #72]	; 0x48
 801445a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801445c:	bf08      	it	eq
 801445e:	4613      	moveq	r3, r2
 8014460:	e731      	b.n	80142c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014462:	1427      	asrs	r7, r4, #16
 8014464:	d456      	bmi.n	8014514 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014466:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801446a:	42be      	cmp	r6, r7
 801446c:	dd52      	ble.n	8014514 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801446e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014472:	d44f      	bmi.n	8014514 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014474:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014478:	454a      	cmp	r2, r9
 801447a:	dd4b      	ble.n	8014514 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801447c:	9a00      	ldr	r2, [sp, #0]
 801447e:	b236      	sxth	r6, r6
 8014480:	fb09 2606 	mla	r6, r9, r6, r2
 8014484:	5df2      	ldrb	r2, [r6, r7]
 8014486:	9e01      	ldr	r6, [sp, #4]
 8014488:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801448c:	0e3a      	lsrs	r2, r7, #24
 801448e:	d041      	beq.n	8014514 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014490:	9e03      	ldr	r6, [sp, #12]
 8014492:	fa5f fb87 	uxtb.w	fp, r7
 8014496:	4372      	muls	r2, r6
 8014498:	1c56      	adds	r6, r2, #1
 801449a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801449e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80144a2:	1212      	asrs	r2, r2, #8
 80144a4:	f815 9006 	ldrb.w	r9, [r5, r6]
 80144a8:	fa1f fa82 	uxth.w	sl, r2
 80144ac:	43d2      	mvns	r2, r2
 80144ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80144b2:	b2d2      	uxtb	r2, r2
 80144b4:	fb09 b902 	mla	r9, r9, r2, fp
 80144b8:	fa1f f989 	uxth.w	r9, r9
 80144bc:	f109 0b01 	add.w	fp, r9, #1
 80144c0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80144c4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80144c8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80144cc:	fb1b fb0a 	smulbb	fp, fp, sl
 80144d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80144d4:	fb17 fa0a 	smulbb	sl, r7, sl
 80144d8:	f805 9006 	strb.w	r9, [r5, r6]
 80144dc:	442e      	add	r6, r5
 80144de:	78b7      	ldrb	r7, [r6, #2]
 80144e0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80144e4:	fb07 aa02 	mla	sl, r7, r2, sl
 80144e8:	fb09 b902 	mla	r9, r9, r2, fp
 80144ec:	fa1f fa8a 	uxth.w	sl, sl
 80144f0:	fa1f f989 	uxth.w	r9, r9
 80144f4:	f10a 0701 	add.w	r7, sl, #1
 80144f8:	f109 0b01 	add.w	fp, r9, #1
 80144fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014500:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014504:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014508:	ea4f 2929 	mov.w	r9, r9, asr #8
 801450c:	f886 a002 	strb.w	sl, [r6, #2]
 8014510:	f886 9001 	strb.w	r9, [r6, #1]
 8014514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014516:	4474      	add	r4, lr
 8014518:	f108 0801 	add.w	r8, r8, #1
 801451c:	4410      	add	r0, r2
 801451e:	e760      	b.n	80143e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014520:	b005      	add	sp, #20
 8014522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014526 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452a:	b085      	sub	sp, #20
 801452c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014530:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014532:	9203      	str	r2, [sp, #12]
 8014534:	6868      	ldr	r0, [r5, #4]
 8014536:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801453a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801453e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014542:	fb00 2404 	mla	r4, r0, r4, r2
 8014546:	682a      	ldr	r2, [r5, #0]
 8014548:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801454c:	4414      	add	r4, r2
 801454e:	f8dc 2000 	ldr.w	r2, [ip]
 8014552:	9201      	str	r2, [sp, #4]
 8014554:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014558:	3204      	adds	r2, #4
 801455a:	9202      	str	r2, [sp, #8]
 801455c:	2900      	cmp	r1, #0
 801455e:	dc03      	bgt.n	8014568 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014560:	9a03      	ldr	r2, [sp, #12]
 8014562:	2a00      	cmp	r2, #0
 8014564:	f340 8137 	ble.w	80147d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801456a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801456e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014572:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014574:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014578:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801457c:	2b00      	cmp	r3, #0
 801457e:	dd0d      	ble.n	801459c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014580:	1405      	asrs	r5, r0, #16
 8014582:	d405      	bmi.n	8014590 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014584:	4545      	cmp	r5, r8
 8014586:	da03      	bge.n	8014590 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014588:	1415      	asrs	r5, r2, #16
 801458a:	d401      	bmi.n	8014590 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801458c:	42bd      	cmp	r5, r7
 801458e:	db06      	blt.n	801459e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014590:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014592:	4470      	add	r0, lr
 8014594:	3b01      	subs	r3, #1
 8014596:	3403      	adds	r4, #3
 8014598:	442a      	add	r2, r5
 801459a:	e7ef      	b.n	801457c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801459c:	d070      	beq.n	8014680 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801459e:	1e5d      	subs	r5, r3, #1
 80145a0:	fb0e 0605 	mla	r6, lr, r5, r0
 80145a4:	1436      	asrs	r6, r6, #16
 80145a6:	d462      	bmi.n	801466e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80145a8:	4546      	cmp	r6, r8
 80145aa:	da60      	bge.n	801466e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80145ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80145ae:	fb06 2505 	mla	r5, r6, r5, r2
 80145b2:	142d      	asrs	r5, r5, #16
 80145b4:	d45b      	bmi.n	801466e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80145b6:	42bd      	cmp	r5, r7
 80145b8:	da59      	bge.n	801466e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80145ba:	1ce5      	adds	r5, r4, #3
 80145bc:	469a      	mov	sl, r3
 80145be:	f1ba 0f00 	cmp.w	sl, #0
 80145c2:	dd58      	ble.n	8014676 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80145c4:	1416      	asrs	r6, r2, #16
 80145c6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80145ca:	1407      	asrs	r7, r0, #16
 80145cc:	46b1      	mov	r9, r6
 80145ce:	9e01      	ldr	r6, [sp, #4]
 80145d0:	fb08 6609 	mla	r6, r8, r9, r6
 80145d4:	5df6      	ldrb	r6, [r6, r7]
 80145d6:	9f02      	ldr	r7, [sp, #8]
 80145d8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80145dc:	0e37      	lsrs	r7, r6, #24
 80145de:	2fff      	cmp	r7, #255	; 0xff
 80145e0:	f000 80f0 	beq.w	80147c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80145e4:	fa5f f887 	uxtb.w	r8, r7
 80145e8:	b3d7      	cbz	r7, 8014660 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80145ea:	fa1f f788 	uxth.w	r7, r8
 80145ee:	ea6f 0808 	mvn.w	r8, r8
 80145f2:	fa5f fb86 	uxtb.w	fp, r6
 80145f6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80145fa:	fa5f f888 	uxtb.w	r8, r8
 80145fe:	fb1b fb07 	smulbb	fp, fp, r7
 8014602:	fb09 b908 	mla	r9, r9, r8, fp
 8014606:	fa1f f989 	uxth.w	r9, r9
 801460a:	f109 0b01 	add.w	fp, r9, #1
 801460e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014612:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014616:	fb1b fb08 	smulbb	fp, fp, r8
 801461a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801461e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014622:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014626:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801462a:	fb09 b907 	mla	r9, r9, r7, fp
 801462e:	fa1f f989 	uxth.w	r9, r9
 8014632:	f109 0b01 	add.w	fp, r9, #1
 8014636:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801463a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801463e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014642:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014646:	fb19 f808 	smulbb	r8, r9, r8
 801464a:	fb06 8607 	mla	r6, r6, r7, r8
 801464e:	b2b6      	uxth	r6, r6
 8014650:	f106 0801 	add.w	r8, r6, #1
 8014654:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014658:	ea4f 2828 	mov.w	r8, r8, asr #8
 801465c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014660:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014662:	4470      	add	r0, lr
 8014664:	3503      	adds	r5, #3
 8014666:	f10a 3aff 	add.w	sl, sl, #4294967295
 801466a:	4432      	add	r2, r6
 801466c:	e7a7      	b.n	80145be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801466e:	2600      	movs	r6, #0
 8014670:	1b9d      	subs	r5, r3, r6
 8014672:	2d00      	cmp	r5, #0
 8014674:	dc3b      	bgt.n	80146ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801467a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801467e:	441c      	add	r4, r3
 8014680:	2900      	cmp	r1, #0
 8014682:	f340 80a8 	ble.w	80147d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014686:	ee30 0a04 	vadd.f32	s0, s0, s8
 801468a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801468c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014690:	3901      	subs	r1, #1
 8014692:	eeb0 6a62 	vmov.f32	s12, s5
 8014696:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801469a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801469e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146a2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80146a6:	eeb0 6a43 	vmov.f32	s12, s6
 80146aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146ae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80146b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80146b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80146ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80146be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80146c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80146c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80146ca:	ee12 2a90 	vmov	r2, s5
 80146ce:	eef0 2a47 	vmov.f32	s5, s14
 80146d2:	fb92 fef3 	sdiv	lr, r2, r3
 80146d6:	ee13 2a10 	vmov	r2, s6
 80146da:	eeb0 3a67 	vmov.f32	s6, s15
 80146de:	fb92 f3f3 	sdiv	r3, r2, r3
 80146e2:	9a03      	ldr	r2, [sp, #12]
 80146e4:	9312      	str	r3, [sp, #72]	; 0x48
 80146e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146e8:	bf08      	it	eq
 80146ea:	4613      	moveq	r3, r2
 80146ec:	e736      	b.n	801455c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80146ee:	ea5f 4820 	movs.w	r8, r0, asr #16
 80146f2:	d457      	bmi.n	80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146f4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80146f8:	4547      	cmp	r7, r8
 80146fa:	dd53      	ble.n	80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80146fc:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014700:	d450      	bmi.n	80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014702:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014706:	454d      	cmp	r5, r9
 8014708:	dd4c      	ble.n	80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801470a:	9d01      	ldr	r5, [sp, #4]
 801470c:	b23f      	sxth	r7, r7
 801470e:	fb09 5707 	mla	r7, r9, r7, r5
 8014712:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014716:	9f02      	ldr	r7, [sp, #8]
 8014718:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801471c:	0e2f      	lsrs	r7, r5, #24
 801471e:	2fff      	cmp	r7, #255	; 0xff
 8014720:	d045      	beq.n	80147ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014722:	fa5f f987 	uxtb.w	r9, r7
 8014726:	b3ef      	cbz	r7, 80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014728:	fa1f f889 	uxth.w	r8, r9
 801472c:	ea6f 0909 	mvn.w	r9, r9
 8014730:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014734:	fa5f fb85 	uxtb.w	fp, r5
 8014738:	f814 a007 	ldrb.w	sl, [r4, r7]
 801473c:	fa5f f989 	uxtb.w	r9, r9
 8014740:	fb1b fb08 	smulbb	fp, fp, r8
 8014744:	fb0a ba09 	mla	sl, sl, r9, fp
 8014748:	fa1f fa8a 	uxth.w	sl, sl
 801474c:	f10a 0b01 	add.w	fp, sl, #1
 8014750:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014754:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014758:	f804 a007 	strb.w	sl, [r4, r7]
 801475c:	4427      	add	r7, r4
 801475e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014762:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014766:	f897 b001 	ldrb.w	fp, [r7, #1]
 801476a:	fb1b fb09 	smulbb	fp, fp, r9
 801476e:	fb0a ba08 	mla	sl, sl, r8, fp
 8014772:	fa1f fa8a 	uxth.w	sl, sl
 8014776:	f10a 0b01 	add.w	fp, sl, #1
 801477a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801477e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014782:	f887 a001 	strb.w	sl, [r7, #1]
 8014786:	f897 a002 	ldrb.w	sl, [r7, #2]
 801478a:	fb1a f909 	smulbb	r9, sl, r9
 801478e:	fb05 9508 	mla	r5, r5, r8, r9
 8014792:	b2ad      	uxth	r5, r5
 8014794:	f105 0901 	add.w	r9, r5, #1
 8014798:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801479c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80147a0:	f887 9002 	strb.w	r9, [r7, #2]
 80147a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80147a6:	4470      	add	r0, lr
 80147a8:	3601      	adds	r6, #1
 80147aa:	442a      	add	r2, r5
 80147ac:	e760      	b.n	8014670 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80147ae:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80147b2:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80147b6:	55e5      	strb	r5, [r4, r7]
 80147b8:	4427      	add	r7, r4
 80147ba:	0c2d      	lsrs	r5, r5, #16
 80147bc:	f887 8001 	strb.w	r8, [r7, #1]
 80147c0:	70bd      	strb	r5, [r7, #2]
 80147c2:	e7ef      	b.n	80147a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80147c4:	0a37      	lsrs	r7, r6, #8
 80147c6:	f805 6c03 	strb.w	r6, [r5, #-3]
 80147ca:	0c36      	lsrs	r6, r6, #16
 80147cc:	f805 7c02 	strb.w	r7, [r5, #-2]
 80147d0:	f805 6c01 	strb.w	r6, [r5, #-1]
 80147d4:	e744      	b.n	8014660 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80147d6:	b005      	add	sp, #20
 80147d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80147dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80147e2:	9201      	str	r2, [sp, #4]
 80147e4:	6870      	ldr	r0, [r6, #4]
 80147e6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80147ea:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80147ee:	fa1f fe85 	uxth.w	lr, r5
 80147f2:	43ed      	mvns	r5, r5
 80147f4:	f8dc 8000 	ldr.w	r8, [ip]
 80147f8:	b2ed      	uxtb	r5, r5
 80147fa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80147fe:	fb00 2404 	mla	r4, r0, r4, r2
 8014802:	6832      	ldr	r2, [r6, #0]
 8014804:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014808:	4414      	add	r4, r2
 801480a:	2900      	cmp	r1, #0
 801480c:	dc03      	bgt.n	8014816 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801480e:	9a01      	ldr	r2, [sp, #4]
 8014810:	2a00      	cmp	r2, #0
 8014812:	f340 810d 	ble.w	8014a30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014818:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801481c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014822:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014826:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801482a:	2b00      	cmp	r3, #0
 801482c:	dd0e      	ble.n	801484c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801482e:	1406      	asrs	r6, r0, #16
 8014830:	d405      	bmi.n	801483e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014832:	4556      	cmp	r6, sl
 8014834:	da03      	bge.n	801483e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014836:	1416      	asrs	r6, r2, #16
 8014838:	d401      	bmi.n	801483e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801483a:	454e      	cmp	r6, r9
 801483c:	db07      	blt.n	801484e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801483e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014840:	3b01      	subs	r3, #1
 8014842:	3403      	adds	r4, #3
 8014844:	4430      	add	r0, r6
 8014846:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014848:	4432      	add	r2, r6
 801484a:	e7ee      	b.n	801482a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801484c:	d060      	beq.n	8014910 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801484e:	1e5e      	subs	r6, r3, #1
 8014850:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014852:	fb07 0706 	mla	r7, r7, r6, r0
 8014856:	143f      	asrs	r7, r7, #16
 8014858:	d451      	bmi.n	80148fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801485a:	4557      	cmp	r7, sl
 801485c:	da4f      	bge.n	80148fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801485e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014860:	fb07 2606 	mla	r6, r7, r6, r2
 8014864:	1436      	asrs	r6, r6, #16
 8014866:	d44a      	bmi.n	80148fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014868:	454e      	cmp	r6, r9
 801486a:	da48      	bge.n	80148fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801486c:	1ce6      	adds	r6, r4, #3
 801486e:	4699      	mov	r9, r3
 8014870:	f1b9 0f00 	cmp.w	r9, #0
 8014874:	f106 0603 	add.w	r6, r6, #3
 8014878:	dd45      	ble.n	8014906 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801487a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801487e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014882:	1417      	asrs	r7, r2, #16
 8014884:	f109 39ff 	add.w	r9, r9, #4294967295
 8014888:	fb0b a707 	mla	r7, fp, r7, sl
 801488c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014890:	fb1b fb05 	smulbb	fp, fp, r5
 8014894:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014898:	eb08 0a07 	add.w	sl, r8, r7
 801489c:	f818 7007 	ldrb.w	r7, [r8, r7]
 80148a0:	fb07 b70e 	mla	r7, r7, lr, fp
 80148a4:	b2bf      	uxth	r7, r7
 80148a6:	f107 0b01 	add.w	fp, r7, #1
 80148aa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80148ae:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80148b2:	fb1b fb05 	smulbb	fp, fp, r5
 80148b6:	123f      	asrs	r7, r7, #8
 80148b8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80148bc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80148c0:	fb07 b70e 	mla	r7, r7, lr, fp
 80148c4:	b2bf      	uxth	r7, r7
 80148c6:	f107 0b01 	add.w	fp, r7, #1
 80148ca:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80148ce:	123f      	asrs	r7, r7, #8
 80148d0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80148d4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80148d8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80148dc:	fb1a fa05 	smulbb	sl, sl, r5
 80148e0:	fb07 a70e 	mla	r7, r7, lr, sl
 80148e4:	b2bf      	uxth	r7, r7
 80148e6:	f107 0a01 	add.w	sl, r7, #1
 80148ea:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80148ee:	123f      	asrs	r7, r7, #8
 80148f0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80148f4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80148f6:	4438      	add	r0, r7
 80148f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80148fa:	443a      	add	r2, r7
 80148fc:	e7b8      	b.n	8014870 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80148fe:	2700      	movs	r7, #0
 8014900:	1bde      	subs	r6, r3, r7
 8014902:	2e00      	cmp	r6, #0
 8014904:	dc3f      	bgt.n	8014986 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801490a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801490e:	441c      	add	r4, r3
 8014910:	2900      	cmp	r1, #0
 8014912:	f340 808d 	ble.w	8014a30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801491a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801491c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014920:	3901      	subs	r1, #1
 8014922:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014926:	eef0 6a62 	vmov.f32	s13, s5
 801492a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801492e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014932:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014936:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801493a:	eef0 6a43 	vmov.f32	s13, s6
 801493e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014942:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8014946:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801494a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801494e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014952:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014956:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801495a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801495e:	ee12 2a90 	vmov	r2, s5
 8014962:	eef0 2a47 	vmov.f32	s5, s14
 8014966:	fb92 f3f3 	sdiv	r3, r2, r3
 801496a:	ee13 2a10 	vmov	r2, s6
 801496e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014972:	eeb0 3a67 	vmov.f32	s6, s15
 8014976:	fb92 f3f3 	sdiv	r3, r2, r3
 801497a:	9a01      	ldr	r2, [sp, #4]
 801497c:	9310      	str	r3, [sp, #64]	; 0x40
 801497e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014980:	bf08      	it	eq
 8014982:	4613      	moveq	r3, r2
 8014984:	e741      	b.n	801480a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014986:	ea5f 4920 	movs.w	r9, r0, asr #16
 801498a:	d44b      	bmi.n	8014a24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801498c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8014990:	45cb      	cmp	fp, r9
 8014992:	dd47      	ble.n	8014a24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014994:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014998:	d444      	bmi.n	8014a24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801499a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801499e:	4556      	cmp	r6, sl
 80149a0:	dd40      	ble.n	8014a24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80149a2:	fa0f f68b 	sxth.w	r6, fp
 80149a6:	fb0a 9906 	mla	r9, sl, r6, r9
 80149aa:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80149ae:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80149b2:	f814 b006 	ldrb.w	fp, [r4, r6]
 80149b6:	fb1b fb05 	smulbb	fp, fp, r5
 80149ba:	eb08 0a09 	add.w	sl, r8, r9
 80149be:	f818 9009 	ldrb.w	r9, [r8, r9]
 80149c2:	fb09 b90e 	mla	r9, r9, lr, fp
 80149c6:	fa1f f989 	uxth.w	r9, r9
 80149ca:	f109 0b01 	add.w	fp, r9, #1
 80149ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80149d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149d6:	f804 9006 	strb.w	r9, [r4, r6]
 80149da:	4426      	add	r6, r4
 80149dc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80149e0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80149e4:	fb1b fb05 	smulbb	fp, fp, r5
 80149e8:	fb09 b90e 	mla	r9, r9, lr, fp
 80149ec:	fa1f f989 	uxth.w	r9, r9
 80149f0:	f109 0b01 	add.w	fp, r9, #1
 80149f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80149f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149fc:	f886 9001 	strb.w	r9, [r6, #1]
 8014a00:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014a04:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014a08:	fb1a fa05 	smulbb	sl, sl, r5
 8014a0c:	fb09 a90e 	mla	r9, r9, lr, sl
 8014a10:	fa1f f989 	uxth.w	r9, r9
 8014a14:	f109 0a01 	add.w	sl, r9, #1
 8014a18:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014a1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a20:	f886 9002 	strb.w	r9, [r6, #2]
 8014a24:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014a26:	3701      	adds	r7, #1
 8014a28:	4430      	add	r0, r6
 8014a2a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014a2c:	4432      	add	r2, r6
 8014a2e:	e767      	b.n	8014900 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8014a30:	b003      	add	sp, #12
 8014a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014a36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a40:	9201      	str	r2, [sp, #4]
 8014a42:	6868      	ldr	r0, [r5, #4]
 8014a44:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014a46:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014a4a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8014a4e:	fb00 2404 	mla	r4, r0, r4, r2
 8014a52:	682a      	ldr	r2, [r5, #0]
 8014a54:	f8d7 8000 	ldr.w	r8, [r7]
 8014a58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014a5c:	4414      	add	r4, r2
 8014a5e:	2900      	cmp	r1, #0
 8014a60:	dc03      	bgt.n	8014a6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014a62:	9a01      	ldr	r2, [sp, #4]
 8014a64:	2a00      	cmp	r2, #0
 8014a66:	f340 80af 	ble.w	8014bc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a6c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8014a70:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a76:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8014a7a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	dd0c      	ble.n	8014a9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014a82:	1405      	asrs	r5, r0, #16
 8014a84:	d405      	bmi.n	8014a92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a86:	4555      	cmp	r5, sl
 8014a88:	da03      	bge.n	8014a92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a8a:	1415      	asrs	r5, r2, #16
 8014a8c:	d401      	bmi.n	8014a92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014a8e:	454d      	cmp	r5, r9
 8014a90:	db05      	blt.n	8014a9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014a92:	4470      	add	r0, lr
 8014a94:	4462      	add	r2, ip
 8014a96:	3b01      	subs	r3, #1
 8014a98:	3403      	adds	r4, #3
 8014a9a:	e7f0      	b.n	8014a7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014a9c:	d038      	beq.n	8014b10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014a9e:	1e5d      	subs	r5, r3, #1
 8014aa0:	fb0e 0605 	mla	r6, lr, r5, r0
 8014aa4:	1436      	asrs	r6, r6, #16
 8014aa6:	d42a      	bmi.n	8014afe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014aa8:	4556      	cmp	r6, sl
 8014aaa:	da28      	bge.n	8014afe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014aac:	fb0c 2505 	mla	r5, ip, r5, r2
 8014ab0:	142d      	asrs	r5, r5, #16
 8014ab2:	d424      	bmi.n	8014afe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014ab4:	454d      	cmp	r5, r9
 8014ab6:	da22      	bge.n	8014afe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014ab8:	1ce6      	adds	r6, r4, #3
 8014aba:	4699      	mov	r9, r3
 8014abc:	f1b9 0f00 	cmp.w	r9, #0
 8014ac0:	f106 0603 	add.w	r6, r6, #3
 8014ac4:	dd1f      	ble.n	8014b06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8014ac6:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8014aca:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014ace:	1415      	asrs	r5, r2, #16
 8014ad0:	4470      	add	r0, lr
 8014ad2:	4462      	add	r2, ip
 8014ad4:	f109 39ff 	add.w	r9, r9, #4294967295
 8014ad8:	fb0b a505 	mla	r5, fp, r5, sl
 8014adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ae0:	eb08 0a05 	add.w	sl, r8, r5
 8014ae4:	f818 5005 	ldrb.w	r5, [r8, r5]
 8014ae8:	f806 5c06 	strb.w	r5, [r6, #-6]
 8014aec:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8014af0:	f806 5c05 	strb.w	r5, [r6, #-5]
 8014af4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8014af8:	f806 5c04 	strb.w	r5, [r6, #-4]
 8014afc:	e7de      	b.n	8014abc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8014afe:	2600      	movs	r6, #0
 8014b00:	1b9d      	subs	r5, r3, r6
 8014b02:	2d00      	cmp	r5, #0
 8014b04:	dc38      	bgt.n	8014b78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b0e:	441c      	add	r4, r3
 8014b10:	2900      	cmp	r1, #0
 8014b12:	dd59      	ble.n	8014bc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014b14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b1e:	3901      	subs	r1, #1
 8014b20:	eeb0 6a62 	vmov.f32	s12, s5
 8014b24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b30:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014b34:	eeb0 6a43 	vmov.f32	s12, s6
 8014b38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b3c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014b40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b58:	ee12 2a90 	vmov	r2, s5
 8014b5c:	eef0 2a47 	vmov.f32	s5, s14
 8014b60:	fb92 fef3 	sdiv	lr, r2, r3
 8014b64:	ee13 2a10 	vmov	r2, s6
 8014b68:	eeb0 3a67 	vmov.f32	s6, s15
 8014b6c:	fb92 fcf3 	sdiv	ip, r2, r3
 8014b70:	9a01      	ldr	r2, [sp, #4]
 8014b72:	bf08      	it	eq
 8014b74:	4613      	moveq	r3, r2
 8014b76:	e772      	b.n	8014a5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8014b78:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014b7c:	d420      	bmi.n	8014bc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b7e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8014b82:	45cb      	cmp	fp, r9
 8014b84:	dd1c      	ble.n	8014bc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b86:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014b8a:	d419      	bmi.n	8014bc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b8c:	68fd      	ldr	r5, [r7, #12]
 8014b8e:	4555      	cmp	r5, sl
 8014b90:	dd16      	ble.n	8014bc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8014b92:	fa0f f58b 	sxth.w	r5, fp
 8014b96:	fb0a 9505 	mla	r5, sl, r5, r9
 8014b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b9e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8014ba2:	eb08 0b05 	add.w	fp, r8, r5
 8014ba6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8014baa:	f804 9005 	strb.w	r9, [r4, r5]
 8014bae:	4425      	add	r5, r4
 8014bb0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8014bb4:	f885 9001 	strb.w	r9, [r5, #1]
 8014bb8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8014bbc:	f885 9002 	strb.w	r9, [r5, #2]
 8014bc0:	4470      	add	r0, lr
 8014bc2:	4462      	add	r2, ip
 8014bc4:	3601      	adds	r6, #1
 8014bc6:	e79b      	b.n	8014b00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8014bc8:	b003      	add	sp, #12
 8014bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014bd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014bda:	9202      	str	r2, [sp, #8]
 8014bdc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014be0:	6860      	ldr	r0, [r4, #4]
 8014be2:	9203      	str	r2, [sp, #12]
 8014be4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014be8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014bec:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014bf0:	fb00 2505 	mla	r5, r0, r5, r2
 8014bf4:	6822      	ldr	r2, [r4, #0]
 8014bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bfa:	4415      	add	r5, r2
 8014bfc:	f8dc 2000 	ldr.w	r2, [ip]
 8014c00:	9201      	str	r2, [sp, #4]
 8014c02:	2900      	cmp	r1, #0
 8014c04:	dc03      	bgt.n	8014c0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8014c06:	9a02      	ldr	r2, [sp, #8]
 8014c08:	2a00      	cmp	r2, #0
 8014c0a:	f340 8122 	ble.w	8014e52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c10:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c14:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014c18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c1a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014c1e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	dd0d      	ble.n	8014c42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014c26:	1422      	asrs	r2, r4, #16
 8014c28:	d405      	bmi.n	8014c36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c2a:	4542      	cmp	r2, r8
 8014c2c:	da03      	bge.n	8014c36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c2e:	1402      	asrs	r2, r0, #16
 8014c30:	d401      	bmi.n	8014c36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014c32:	42ba      	cmp	r2, r7
 8014c34:	db06      	blt.n	8014c44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c38:	4474      	add	r4, lr
 8014c3a:	3b01      	subs	r3, #1
 8014c3c:	3503      	adds	r5, #3
 8014c3e:	4410      	add	r0, r2
 8014c40:	e7ef      	b.n	8014c22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8014c42:	d072      	beq.n	8014d2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8014c44:	1e5a      	subs	r2, r3, #1
 8014c46:	fb0e 4602 	mla	r6, lr, r2, r4
 8014c4a:	1436      	asrs	r6, r6, #16
 8014c4c:	d462      	bmi.n	8014d14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c4e:	4546      	cmp	r6, r8
 8014c50:	da60      	bge.n	8014d14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c52:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014c54:	fb06 0202 	mla	r2, r6, r2, r0
 8014c58:	1412      	asrs	r2, r2, #16
 8014c5a:	d45b      	bmi.n	8014d14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c5c:	42ba      	cmp	r2, r7
 8014c5e:	da59      	bge.n	8014d14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014c60:	1cef      	adds	r7, r5, #3
 8014c62:	4699      	mov	r9, r3
 8014c64:	f1b9 0f00 	cmp.w	r9, #0
 8014c68:	dd5a      	ble.n	8014d20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014c6a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c6e:	1426      	asrs	r6, r4, #16
 8014c70:	1402      	asrs	r2, r0, #16
 8014c72:	fb08 6202 	mla	r2, r8, r2, r6
 8014c76:	9e01      	ldr	r6, [sp, #4]
 8014c78:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014c7c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014c80:	d041      	beq.n	8014d06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014c82:	9a03      	ldr	r2, [sp, #12]
 8014c84:	fa5f fb86 	uxtb.w	fp, r6
 8014c88:	fb02 f808 	mul.w	r8, r2, r8
 8014c8c:	f108 0201 	add.w	r2, r8, #1
 8014c90:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8014c94:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014c98:	1212      	asrs	r2, r2, #8
 8014c9a:	fa1f fa82 	uxth.w	sl, r2
 8014c9e:	43d2      	mvns	r2, r2
 8014ca0:	fb1b fb0a 	smulbb	fp, fp, sl
 8014ca4:	b2d2      	uxtb	r2, r2
 8014ca6:	fb08 b802 	mla	r8, r8, r2, fp
 8014caa:	fa1f f888 	uxth.w	r8, r8
 8014cae:	f108 0b01 	add.w	fp, r8, #1
 8014cb2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014cb6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014cba:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014cbe:	fb1b fb0a 	smulbb	fp, fp, sl
 8014cc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014cc6:	fb16 fa0a 	smulbb	sl, r6, sl
 8014cca:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014cce:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014cd2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014cd6:	fb06 aa02 	mla	sl, r6, r2, sl
 8014cda:	fb08 b802 	mla	r8, r8, r2, fp
 8014cde:	fa1f fa8a 	uxth.w	sl, sl
 8014ce2:	fa1f f888 	uxth.w	r8, r8
 8014ce6:	f10a 0601 	add.w	r6, sl, #1
 8014cea:	f108 0b01 	add.w	fp, r8, #1
 8014cee:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014cf2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014cf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014cfa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014cfe:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014d02:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014d06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d08:	4474      	add	r4, lr
 8014d0a:	3703      	adds	r7, #3
 8014d0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d10:	4410      	add	r0, r2
 8014d12:	e7a7      	b.n	8014c64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014d14:	f04f 0800 	mov.w	r8, #0
 8014d18:	eba3 0208 	sub.w	r2, r3, r8
 8014d1c:	2a00      	cmp	r2, #0
 8014d1e:	dc3b      	bgt.n	8014d98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d28:	441d      	add	r5, r3
 8014d2a:	2900      	cmp	r1, #0
 8014d2c:	f340 8091 	ble.w	8014e52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8014d30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d3a:	3901      	subs	r1, #1
 8014d3c:	eeb0 6a62 	vmov.f32	s12, s5
 8014d40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014d50:	eeb0 6a43 	vmov.f32	s12, s6
 8014d54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d58:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014d5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d74:	ee12 2a90 	vmov	r2, s5
 8014d78:	eef0 2a47 	vmov.f32	s5, s14
 8014d7c:	fb92 fef3 	sdiv	lr, r2, r3
 8014d80:	ee13 2a10 	vmov	r2, s6
 8014d84:	eeb0 3a67 	vmov.f32	s6, s15
 8014d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d8c:	9a02      	ldr	r2, [sp, #8]
 8014d8e:	9312      	str	r3, [sp, #72]	; 0x48
 8014d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d92:	bf08      	it	eq
 8014d94:	4613      	moveq	r3, r2
 8014d96:	e734      	b.n	8014c02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014d98:	1427      	asrs	r7, r4, #16
 8014d9a:	d454      	bmi.n	8014e46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014d9c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014da0:	42be      	cmp	r6, r7
 8014da2:	dd50      	ble.n	8014e46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014da4:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014da8:	d44d      	bmi.n	8014e46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014daa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014dae:	454a      	cmp	r2, r9
 8014db0:	dd49      	ble.n	8014e46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014db2:	b236      	sxth	r6, r6
 8014db4:	9a01      	ldr	r2, [sp, #4]
 8014db6:	fb09 7606 	mla	r6, r9, r6, r7
 8014dba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8014dbe:	0e3a      	lsrs	r2, r7, #24
 8014dc0:	d041      	beq.n	8014e46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8014dc2:	9e03      	ldr	r6, [sp, #12]
 8014dc4:	fa5f fb87 	uxtb.w	fp, r7
 8014dc8:	4372      	muls	r2, r6
 8014dca:	1c56      	adds	r6, r2, #1
 8014dcc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014dd0:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014dd4:	1212      	asrs	r2, r2, #8
 8014dd6:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014dda:	fa1f fa82 	uxth.w	sl, r2
 8014dde:	43d2      	mvns	r2, r2
 8014de0:	fb1b fb0a 	smulbb	fp, fp, sl
 8014de4:	b2d2      	uxtb	r2, r2
 8014de6:	fb09 b902 	mla	r9, r9, r2, fp
 8014dea:	fa1f f989 	uxth.w	r9, r9
 8014dee:	f109 0b01 	add.w	fp, r9, #1
 8014df2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014df6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014dfa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014dfe:	fb1b fb0a 	smulbb	fp, fp, sl
 8014e02:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e06:	fb17 fa0a 	smulbb	sl, r7, sl
 8014e0a:	f805 9006 	strb.w	r9, [r5, r6]
 8014e0e:	442e      	add	r6, r5
 8014e10:	78b7      	ldrb	r7, [r6, #2]
 8014e12:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014e16:	fb07 aa02 	mla	sl, r7, r2, sl
 8014e1a:	fb09 b902 	mla	r9, r9, r2, fp
 8014e1e:	fa1f fa8a 	uxth.w	sl, sl
 8014e22:	fa1f f989 	uxth.w	r9, r9
 8014e26:	f10a 0701 	add.w	r7, sl, #1
 8014e2a:	f109 0b01 	add.w	fp, r9, #1
 8014e2e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014e32:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014e36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e3a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e3e:	f886 a002 	strb.w	sl, [r6, #2]
 8014e42:	f886 9001 	strb.w	r9, [r6, #1]
 8014e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e48:	4474      	add	r4, lr
 8014e4a:	f108 0801 	add.w	r8, r8, #1
 8014e4e:	4410      	add	r0, r2
 8014e50:	e762      	b.n	8014d18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014e52:	b005      	add	sp, #20
 8014e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e62:	9201      	str	r2, [sp, #4]
 8014e64:	6860      	ldr	r0, [r4, #4]
 8014e66:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014e6a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8014e6e:	fb00 2505 	mla	r5, r0, r5, r2
 8014e72:	6822      	ldr	r2, [r4, #0]
 8014e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e78:	4415      	add	r5, r2
 8014e7a:	f8dc 2000 	ldr.w	r2, [ip]
 8014e7e:	9200      	str	r2, [sp, #0]
 8014e80:	2900      	cmp	r1, #0
 8014e82:	dc03      	bgt.n	8014e8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014e84:	9a01      	ldr	r2, [sp, #4]
 8014e86:	2a00      	cmp	r2, #0
 8014e88:	f340 812b 	ble.w	80150e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e8e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014e92:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e98:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014e9c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	dd0e      	ble.n	8014ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014ea4:	1422      	asrs	r2, r4, #16
 8014ea6:	d405      	bmi.n	8014eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014ea8:	4572      	cmp	r2, lr
 8014eaa:	da03      	bge.n	8014eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014eac:	1402      	asrs	r2, r0, #16
 8014eae:	d401      	bmi.n	8014eb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014eb0:	42ba      	cmp	r2, r7
 8014eb2:	db07      	blt.n	8014ec4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014eb6:	3b01      	subs	r3, #1
 8014eb8:	3503      	adds	r5, #3
 8014eba:	4414      	add	r4, r2
 8014ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ebe:	4410      	add	r0, r2
 8014ec0:	e7ee      	b.n	8014ea0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014ec2:	d06f      	beq.n	8014fa4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014ec4:	1e5a      	subs	r2, r3, #1
 8014ec6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014ec8:	fb06 4602 	mla	r6, r6, r2, r4
 8014ecc:	1436      	asrs	r6, r6, #16
 8014ece:	d45e      	bmi.n	8014f8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ed0:	4576      	cmp	r6, lr
 8014ed2:	da5c      	bge.n	8014f8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ed4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014ed6:	fb06 0202 	mla	r2, r6, r2, r0
 8014eda:	1412      	asrs	r2, r2, #16
 8014edc:	d457      	bmi.n	8014f8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ede:	42ba      	cmp	r2, r7
 8014ee0:	da55      	bge.n	8014f8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8014ee2:	1cee      	adds	r6, r5, #3
 8014ee4:	469a      	mov	sl, r3
 8014ee6:	f1ba 0f00 	cmp.w	sl, #0
 8014eea:	dd56      	ble.n	8014f9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014eec:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014ef0:	1427      	asrs	r7, r4, #16
 8014ef2:	1402      	asrs	r2, r0, #16
 8014ef4:	fb0e 7202 	mla	r2, lr, r2, r7
 8014ef8:	9f00      	ldr	r7, [sp, #0]
 8014efa:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8014efe:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8014f02:	d03c      	beq.n	8014f7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014f04:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014f08:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014f0c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014f10:	fa5f f28e 	uxtb.w	r2, lr
 8014f14:	b2ff      	uxtb	r7, r7
 8014f16:	f000 80dd 	beq.w	80150d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014f1a:	fa1f f882 	uxth.w	r8, r2
 8014f1e:	43d2      	mvns	r2, r2
 8014f20:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8014f24:	fb17 f708 	smulbb	r7, r7, r8
 8014f28:	b2d2      	uxtb	r2, r2
 8014f2a:	fb19 f908 	smulbb	r9, r9, r8
 8014f2e:	fb0e 7702 	mla	r7, lr, r2, r7
 8014f32:	fb1b f808 	smulbb	r8, fp, r8
 8014f36:	b2bf      	uxth	r7, r7
 8014f38:	f107 0e01 	add.w	lr, r7, #1
 8014f3c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014f40:	123f      	asrs	r7, r7, #8
 8014f42:	f806 7c03 	strb.w	r7, [r6, #-3]
 8014f46:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8014f4a:	fb07 9902 	mla	r9, r7, r2, r9
 8014f4e:	fa1f f989 	uxth.w	r9, r9
 8014f52:	f109 0701 	add.w	r7, r9, #1
 8014f56:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8014f5a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8014f5e:	fb07 8802 	mla	r8, r7, r2, r8
 8014f62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014f66:	fa1f f888 	uxth.w	r8, r8
 8014f6a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8014f6e:	f108 0201 	add.w	r2, r8, #1
 8014f72:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014f76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014f7a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8014f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f80:	3603      	adds	r6, #3
 8014f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f86:	4414      	add	r4, r2
 8014f88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f8a:	4410      	add	r0, r2
 8014f8c:	e7ab      	b.n	8014ee6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8014f8e:	f04f 0e00 	mov.w	lr, #0
 8014f92:	eba3 020e 	sub.w	r2, r3, lr
 8014f96:	2a00      	cmp	r2, #0
 8014f98:	dc3d      	bgt.n	8015016 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8014f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014fa2:	441d      	add	r5, r3
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	f340 809c 	ble.w	80150e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014faa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014fb4:	3901      	subs	r1, #1
 8014fb6:	eeb0 6a62 	vmov.f32	s12, s5
 8014fba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014fbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014fc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014fc6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014fca:	eeb0 6a43 	vmov.f32	s12, s6
 8014fce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014fd2:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014fd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014fda:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014fde:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014fe2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014fe6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014fea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014fee:	ee12 2a90 	vmov	r2, s5
 8014ff2:	eef0 2a47 	vmov.f32	s5, s14
 8014ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ffa:	ee13 2a10 	vmov	r2, s6
 8014ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8015000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015002:	eeb0 3a67 	vmov.f32	s6, s15
 8015006:	fb92 f3f3 	sdiv	r3, r2, r3
 801500a:	9a01      	ldr	r2, [sp, #4]
 801500c:	9310      	str	r3, [sp, #64]	; 0x40
 801500e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015010:	bf08      	it	eq
 8015012:	4613      	moveq	r3, r2
 8015014:	e734      	b.n	8014e80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8015016:	1427      	asrs	r7, r4, #16
 8015018:	d44d      	bmi.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801501a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801501e:	42be      	cmp	r6, r7
 8015020:	dd49      	ble.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015022:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015026:	d446      	bmi.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015028:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801502c:	4542      	cmp	r2, r8
 801502e:	dd42      	ble.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015030:	b236      	sxth	r6, r6
 8015032:	9a00      	ldr	r2, [sp, #0]
 8015034:	fb08 7606 	mla	r6, r8, r6, r7
 8015038:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801503c:	0e3a      	lsrs	r2, r7, #24
 801503e:	d03a      	beq.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015040:	2aff      	cmp	r2, #255	; 0xff
 8015042:	b2d6      	uxtb	r6, r2
 8015044:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015048:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801504c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8015050:	b2ff      	uxtb	r7, r7
 8015052:	d037      	beq.n	80150c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8015054:	fa1f f986 	uxth.w	r9, r6
 8015058:	4472      	add	r2, lr
 801505a:	43f6      	mvns	r6, r6
 801505c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8015060:	fb17 f709 	smulbb	r7, r7, r9
 8015064:	fb1a fa09 	smulbb	sl, sl, r9
 8015068:	b2f6      	uxtb	r6, r6
 801506a:	fb1b f909 	smulbb	r9, fp, r9
 801506e:	fb08 7706 	mla	r7, r8, r6, r7
 8015072:	b2bf      	uxth	r7, r7
 8015074:	f107 0801 	add.w	r8, r7, #1
 8015078:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801507c:	123f      	asrs	r7, r7, #8
 801507e:	54af      	strb	r7, [r5, r2]
 8015080:	442a      	add	r2, r5
 8015082:	7857      	ldrb	r7, [r2, #1]
 8015084:	fb07 aa06 	mla	sl, r7, r6, sl
 8015088:	fa1f fa8a 	uxth.w	sl, sl
 801508c:	f10a 0701 	add.w	r7, sl, #1
 8015090:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015094:	7897      	ldrb	r7, [r2, #2]
 8015096:	fb07 9906 	mla	r9, r7, r6, r9
 801509a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801509e:	fa1f f989 	uxth.w	r9, r9
 80150a2:	f882 a001 	strb.w	sl, [r2, #1]
 80150a6:	f109 0601 	add.w	r6, r9, #1
 80150aa:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80150ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80150b2:	f882 9002 	strb.w	r9, [r2, #2]
 80150b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80150b8:	f10e 0e01 	add.w	lr, lr, #1
 80150bc:	4414      	add	r4, r2
 80150be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150c0:	4410      	add	r0, r2
 80150c2:	e766      	b.n	8014f92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80150c4:	4472      	add	r2, lr
 80150c6:	54af      	strb	r7, [r5, r2]
 80150c8:	442a      	add	r2, r5
 80150ca:	f882 a001 	strb.w	sl, [r2, #1]
 80150ce:	f882 b002 	strb.w	fp, [r2, #2]
 80150d2:	e7f0      	b.n	80150b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80150d4:	f806 7c03 	strb.w	r7, [r6, #-3]
 80150d8:	f806 9c02 	strb.w	r9, [r6, #-2]
 80150dc:	f806 bc01 	strb.w	fp, [r6, #-1]
 80150e0:	e74d      	b.n	8014f7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80150e2:	b003      	add	sp, #12
 80150e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	b087      	sub	sp, #28
 80150ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80150f4:	9204      	str	r2, [sp, #16]
 80150f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80150fa:	6860      	ldr	r0, [r4, #4]
 80150fc:	9205      	str	r2, [sp, #20]
 80150fe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8015102:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8015106:	9101      	str	r1, [sp, #4]
 8015108:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801510c:	fb00 2505 	mla	r5, r0, r5, r2
 8015110:	6822      	ldr	r2, [r4, #0]
 8015112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015116:	4415      	add	r5, r2
 8015118:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801511c:	3201      	adds	r2, #1
 801511e:	f022 0201 	bic.w	r2, r2, #1
 8015122:	9202      	str	r2, [sp, #8]
 8015124:	f8dc 2000 	ldr.w	r2, [ip]
 8015128:	9203      	str	r2, [sp, #12]
 801512a:	9a01      	ldr	r2, [sp, #4]
 801512c:	2a00      	cmp	r2, #0
 801512e:	dc03      	bgt.n	8015138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015130:	9a04      	ldr	r2, [sp, #16]
 8015132:	2a00      	cmp	r2, #0
 8015134:	f340 8135 	ble.w	80153a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015138:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801513a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801513e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015144:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015148:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801514c:	2b00      	cmp	r3, #0
 801514e:	dd0d      	ble.n	801516c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015150:	1422      	asrs	r2, r4, #16
 8015152:	d405      	bmi.n	8015160 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015154:	4542      	cmp	r2, r8
 8015156:	da03      	bge.n	8015160 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015158:	1402      	asrs	r2, r0, #16
 801515a:	d401      	bmi.n	8015160 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801515c:	42ba      	cmp	r2, r7
 801515e:	db06      	blt.n	801516e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015162:	4474      	add	r4, lr
 8015164:	3b01      	subs	r3, #1
 8015166:	3503      	adds	r5, #3
 8015168:	4410      	add	r0, r2
 801516a:	e7ef      	b.n	801514c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801516c:	d077      	beq.n	801525e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801516e:	1e5a      	subs	r2, r3, #1
 8015170:	fb0e 4602 	mla	r6, lr, r2, r4
 8015174:	1436      	asrs	r6, r6, #16
 8015176:	d469      	bmi.n	801524c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015178:	4546      	cmp	r6, r8
 801517a:	da67      	bge.n	801524c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801517c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801517e:	fb06 0202 	mla	r2, r6, r2, r0
 8015182:	1412      	asrs	r2, r2, #16
 8015184:	d462      	bmi.n	801524c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015186:	42ba      	cmp	r2, r7
 8015188:	da60      	bge.n	801524c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801518a:	1cee      	adds	r6, r5, #3
 801518c:	4699      	mov	r9, r3
 801518e:	f1b9 0f00 	cmp.w	r9, #0
 8015192:	dd5f      	ble.n	8015254 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015194:	1422      	asrs	r2, r4, #16
 8015196:	9902      	ldr	r1, [sp, #8]
 8015198:	1407      	asrs	r7, r0, #16
 801519a:	fb01 2707 	mla	r7, r1, r7, r2
 801519e:	9903      	ldr	r1, [sp, #12]
 80151a0:	087a      	lsrs	r2, r7, #1
 80151a2:	5c8a      	ldrb	r2, [r1, r2]
 80151a4:	07f9      	lsls	r1, r7, #31
 80151a6:	bf54      	ite	pl
 80151a8:	f002 020f 	andpl.w	r2, r2, #15
 80151ac:	1112      	asrmi	r2, r2, #4
 80151ae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80151b2:	b2d2      	uxtb	r2, r2
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	d042      	beq.n	801523e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80151b8:	497b      	ldr	r1, [pc, #492]	; (80153a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80151ba:	680f      	ldr	r7, [r1, #0]
 80151bc:	9905      	ldr	r1, [sp, #20]
 80151be:	fa5f fb87 	uxtb.w	fp, r7
 80151c2:	434a      	muls	r2, r1
 80151c4:	f102 0801 	add.w	r8, r2, #1
 80151c8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80151cc:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80151d0:	1212      	asrs	r2, r2, #8
 80151d2:	fa1f fa82 	uxth.w	sl, r2
 80151d6:	43d2      	mvns	r2, r2
 80151d8:	fb1b fb0a 	smulbb	fp, fp, sl
 80151dc:	b2d2      	uxtb	r2, r2
 80151de:	fb08 b802 	mla	r8, r8, r2, fp
 80151e2:	fa1f f888 	uxth.w	r8, r8
 80151e6:	f108 0b01 	add.w	fp, r8, #1
 80151ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80151ee:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80151f2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80151f6:	fb1b fb0a 	smulbb	fp, fp, sl
 80151fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80151fe:	fb17 fa0a 	smulbb	sl, r7, sl
 8015202:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8015206:	f806 8c03 	strb.w	r8, [r6, #-3]
 801520a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801520e:	fb07 aa02 	mla	sl, r7, r2, sl
 8015212:	fb08 b802 	mla	r8, r8, r2, fp
 8015216:	fa1f fa8a 	uxth.w	sl, sl
 801521a:	fa1f f888 	uxth.w	r8, r8
 801521e:	f10a 0701 	add.w	r7, sl, #1
 8015222:	f108 0b01 	add.w	fp, r8, #1
 8015226:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801522a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801522e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015232:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015236:	f806 ac01 	strb.w	sl, [r6, #-1]
 801523a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801523e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015240:	4474      	add	r4, lr
 8015242:	3603      	adds	r6, #3
 8015244:	f109 39ff 	add.w	r9, r9, #4294967295
 8015248:	4410      	add	r0, r2
 801524a:	e7a0      	b.n	801518e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801524c:	2700      	movs	r7, #0
 801524e:	1bda      	subs	r2, r3, r7
 8015250:	2a00      	cmp	r2, #0
 8015252:	dc3e      	bgt.n	80152d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801525c:	441d      	add	r5, r3
 801525e:	9b01      	ldr	r3, [sp, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	f340 809e 	ble.w	80153a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015266:	ee30 0a04 	vadd.f32	s0, s0, s8
 801526a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801526c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015270:	eeb0 6a62 	vmov.f32	s12, s5
 8015274:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015278:	ee31 1a05 	vadd.f32	s2, s2, s10
 801527c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015280:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015284:	eeb0 6a43 	vmov.f32	s12, s6
 8015288:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801528c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015290:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015294:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015298:	ee77 2a62 	vsub.f32	s5, s14, s5
 801529c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80152a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80152a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80152a8:	ee12 2a90 	vmov	r2, s5
 80152ac:	eef0 2a47 	vmov.f32	s5, s14
 80152b0:	fb92 fef3 	sdiv	lr, r2, r3
 80152b4:	ee13 2a10 	vmov	r2, s6
 80152b8:	eeb0 3a67 	vmov.f32	s6, s15
 80152bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80152c0:	9314      	str	r3, [sp, #80]	; 0x50
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	9a04      	ldr	r2, [sp, #16]
 80152c6:	3b01      	subs	r3, #1
 80152c8:	9301      	str	r3, [sp, #4]
 80152ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152cc:	bf08      	it	eq
 80152ce:	4613      	moveq	r3, r2
 80152d0:	e72b      	b.n	801512a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80152d2:	1426      	asrs	r6, r4, #16
 80152d4:	d460      	bmi.n	8015398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152d6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80152da:	42b2      	cmp	r2, r6
 80152dc:	dd5c      	ble.n	8015398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152de:	ea5f 4820 	movs.w	r8, r0, asr #16
 80152e2:	d459      	bmi.n	8015398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80152e8:	4542      	cmp	r2, r8
 80152ea:	dd55      	ble.n	8015398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80152ec:	9a02      	ldr	r2, [sp, #8]
 80152ee:	9903      	ldr	r1, [sp, #12]
 80152f0:	fb08 6602 	mla	r6, r8, r2, r6
 80152f4:	0872      	lsrs	r2, r6, #1
 80152f6:	07f6      	lsls	r6, r6, #31
 80152f8:	5c8a      	ldrb	r2, [r1, r2]
 80152fa:	bf54      	ite	pl
 80152fc:	f002 020f 	andpl.w	r2, r2, #15
 8015300:	1112      	asrmi	r2, r2, #4
 8015302:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015306:	b2d2      	uxtb	r2, r2
 8015308:	2a00      	cmp	r2, #0
 801530a:	d045      	beq.n	8015398 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801530c:	4926      	ldr	r1, [pc, #152]	; (80153a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801530e:	f8d1 8000 	ldr.w	r8, [r1]
 8015312:	9905      	ldr	r1, [sp, #20]
 8015314:	fa5f fb88 	uxtb.w	fp, r8
 8015318:	434a      	muls	r2, r1
 801531a:	1c56      	adds	r6, r2, #1
 801531c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015320:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015324:	1212      	asrs	r2, r2, #8
 8015326:	f815 9006 	ldrb.w	r9, [r5, r6]
 801532a:	fa1f fa82 	uxth.w	sl, r2
 801532e:	43d2      	mvns	r2, r2
 8015330:	fb1b fb0a 	smulbb	fp, fp, sl
 8015334:	b2d2      	uxtb	r2, r2
 8015336:	fb09 b902 	mla	r9, r9, r2, fp
 801533a:	fa1f f989 	uxth.w	r9, r9
 801533e:	f109 0b01 	add.w	fp, r9, #1
 8015342:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015346:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801534a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801534e:	fb1b fb0a 	smulbb	fp, fp, sl
 8015352:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015356:	fb18 fa0a 	smulbb	sl, r8, sl
 801535a:	f805 9006 	strb.w	r9, [r5, r6]
 801535e:	442e      	add	r6, r5
 8015360:	f896 8002 	ldrb.w	r8, [r6, #2]
 8015364:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015368:	fb08 aa02 	mla	sl, r8, r2, sl
 801536c:	fb09 b902 	mla	r9, r9, r2, fp
 8015370:	fa1f fa8a 	uxth.w	sl, sl
 8015374:	fa1f f989 	uxth.w	r9, r9
 8015378:	f10a 0801 	add.w	r8, sl, #1
 801537c:	f109 0b01 	add.w	fp, r9, #1
 8015380:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015384:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015388:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801538c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015390:	f886 a002 	strb.w	sl, [r6, #2]
 8015394:	f886 9001 	strb.w	r9, [r6, #1]
 8015398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801539a:	4474      	add	r4, lr
 801539c:	3701      	adds	r7, #1
 801539e:	4410      	add	r0, r2
 80153a0:	e755      	b.n	801524e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80153a2:	b007      	add	sp, #28
 80153a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153a8:	24006c74 	.word	0x24006c74

080153ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80153ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b0:	b085      	sub	sp, #20
 80153b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80153b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80153b8:	9203      	str	r2, [sp, #12]
 80153ba:	6860      	ldr	r0, [r4, #4]
 80153bc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80153c0:	9100      	str	r1, [sp, #0]
 80153c2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80153c6:	fb00 2606 	mla	r6, r0, r6, r2
 80153ca:	6822      	ldr	r2, [r4, #0]
 80153cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80153d0:	4416      	add	r6, r2
 80153d2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80153d6:	3201      	adds	r2, #1
 80153d8:	f022 0201 	bic.w	r2, r2, #1
 80153dc:	9201      	str	r2, [sp, #4]
 80153de:	f8dc 2000 	ldr.w	r2, [ip]
 80153e2:	9202      	str	r2, [sp, #8]
 80153e4:	9a00      	ldr	r2, [sp, #0]
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	dc03      	bgt.n	80153f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80153ea:	9a03      	ldr	r2, [sp, #12]
 80153ec:	2a00      	cmp	r2, #0
 80153ee:	f340 8140 	ble.w	8015672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80153f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153f4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80153f8:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80153fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153fe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015402:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015406:	2b00      	cmp	r3, #0
 8015408:	dd0e      	ble.n	8015428 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801540a:	142a      	asrs	r2, r5, #16
 801540c:	d405      	bmi.n	801541a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801540e:	4572      	cmp	r2, lr
 8015410:	da03      	bge.n	801541a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015412:	1422      	asrs	r2, r4, #16
 8015414:	d401      	bmi.n	801541a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015416:	42ba      	cmp	r2, r7
 8015418:	db07      	blt.n	801542a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801541a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801541c:	3b01      	subs	r3, #1
 801541e:	3603      	adds	r6, #3
 8015420:	4415      	add	r5, r2
 8015422:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015424:	4414      	add	r4, r2
 8015426:	e7ee      	b.n	8015406 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015428:	d072      	beq.n	8015510 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801542a:	1e5a      	subs	r2, r3, #1
 801542c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801542e:	fb00 5002 	mla	r0, r0, r2, r5
 8015432:	1400      	asrs	r0, r0, #16
 8015434:	d463      	bmi.n	80154fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015436:	4570      	cmp	r0, lr
 8015438:	da61      	bge.n	80154fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801543a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801543c:	fb00 4202 	mla	r2, r0, r2, r4
 8015440:	1412      	asrs	r2, r2, #16
 8015442:	d45c      	bmi.n	80154fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015444:	42ba      	cmp	r2, r7
 8015446:	da5a      	bge.n	80154fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015448:	1cf0      	adds	r0, r6, #3
 801544a:	469a      	mov	sl, r3
 801544c:	f1ba 0f00 	cmp.w	sl, #0
 8015450:	dd59      	ble.n	8015506 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015452:	142a      	asrs	r2, r5, #16
 8015454:	9901      	ldr	r1, [sp, #4]
 8015456:	1427      	asrs	r7, r4, #16
 8015458:	fb01 2707 	mla	r7, r1, r7, r2
 801545c:	9902      	ldr	r1, [sp, #8]
 801545e:	087a      	lsrs	r2, r7, #1
 8015460:	5c8a      	ldrb	r2, [r1, r2]
 8015462:	07f9      	lsls	r1, r7, #31
 8015464:	bf54      	ite	pl
 8015466:	f002 020f 	andpl.w	r2, r2, #15
 801546a:	1112      	asrmi	r2, r2, #4
 801546c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015470:	b2d2      	uxtb	r2, r2
 8015472:	2a00      	cmp	r2, #0
 8015474:	d03b      	beq.n	80154ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015476:	4980      	ldr	r1, [pc, #512]	; (8015678 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015478:	2aff      	cmp	r2, #255	; 0xff
 801547a:	680f      	ldr	r7, [r1, #0]
 801547c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015480:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015484:	b2ff      	uxtb	r7, r7
 8015486:	f000 80ed 	beq.w	8015664 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801548a:	fa1f f882 	uxth.w	r8, r2
 801548e:	43d2      	mvns	r2, r2
 8015490:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8015494:	fb17 f708 	smulbb	r7, r7, r8
 8015498:	b2d2      	uxtb	r2, r2
 801549a:	fb19 f908 	smulbb	r9, r9, r8
 801549e:	fb0e 7702 	mla	r7, lr, r2, r7
 80154a2:	fb1b f808 	smulbb	r8, fp, r8
 80154a6:	b2bf      	uxth	r7, r7
 80154a8:	f107 0e01 	add.w	lr, r7, #1
 80154ac:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80154b0:	123f      	asrs	r7, r7, #8
 80154b2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80154b6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80154ba:	fb07 9902 	mla	r9, r7, r2, r9
 80154be:	fa1f f989 	uxth.w	r9, r9
 80154c2:	f109 0701 	add.w	r7, r9, #1
 80154c6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80154ca:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80154ce:	fb07 8802 	mla	r8, r7, r2, r8
 80154d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80154d6:	fa1f f888 	uxth.w	r8, r8
 80154da:	f800 9c02 	strb.w	r9, [r0, #-2]
 80154de:	f108 0201 	add.w	r2, r8, #1
 80154e2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80154e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80154ea:	f800 8c01 	strb.w	r8, [r0, #-1]
 80154ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154f0:	3003      	adds	r0, #3
 80154f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80154f6:	4415      	add	r5, r2
 80154f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154fa:	4414      	add	r4, r2
 80154fc:	e7a6      	b.n	801544c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80154fe:	2700      	movs	r7, #0
 8015500:	1bda      	subs	r2, r3, r7
 8015502:	2a00      	cmp	r2, #0
 8015504:	dc40      	bgt.n	8015588 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801550a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801550e:	441e      	add	r6, r3
 8015510:	9b00      	ldr	r3, [sp, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	f340 80ad 	ble.w	8015672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015518:	ee30 0a04 	vadd.f32	s0, s0, s8
 801551c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801551e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015522:	eeb0 6a62 	vmov.f32	s12, s5
 8015526:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801552a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801552e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015532:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015536:	eeb0 6a43 	vmov.f32	s12, s6
 801553a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801553e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015546:	ee61 7a27 	vmul.f32	s15, s2, s15
 801554a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801554e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801555a:	ee12 2a90 	vmov	r2, s5
 801555e:	eef0 2a47 	vmov.f32	s5, s14
 8015562:	fb92 f3f3 	sdiv	r3, r2, r3
 8015566:	ee13 2a10 	vmov	r2, s6
 801556a:	9311      	str	r3, [sp, #68]	; 0x44
 801556c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801556e:	eeb0 3a67 	vmov.f32	s6, s15
 8015572:	fb92 f3f3 	sdiv	r3, r2, r3
 8015576:	9312      	str	r3, [sp, #72]	; 0x48
 8015578:	9b00      	ldr	r3, [sp, #0]
 801557a:	9a03      	ldr	r2, [sp, #12]
 801557c:	3b01      	subs	r3, #1
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015582:	bf08      	it	eq
 8015584:	4613      	moveq	r3, r2
 8015586:	e72d      	b.n	80153e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015588:	1428      	asrs	r0, r5, #16
 801558a:	d45c      	bmi.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801558c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015590:	4282      	cmp	r2, r0
 8015592:	dd58      	ble.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015594:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015598:	d455      	bmi.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801559a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801559e:	4572      	cmp	r2, lr
 80155a0:	dd51      	ble.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80155a2:	9a01      	ldr	r2, [sp, #4]
 80155a4:	9902      	ldr	r1, [sp, #8]
 80155a6:	fb0e 0002 	mla	r0, lr, r2, r0
 80155aa:	0842      	lsrs	r2, r0, #1
 80155ac:	07c0      	lsls	r0, r0, #31
 80155ae:	5c8a      	ldrb	r2, [r1, r2]
 80155b0:	bf54      	ite	pl
 80155b2:	f002 020f 	andpl.w	r2, r2, #15
 80155b6:	1112      	asrmi	r2, r2, #4
 80155b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80155bc:	b2d2      	uxtb	r2, r2
 80155be:	2a00      	cmp	r2, #0
 80155c0:	d041      	beq.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80155c2:	492d      	ldr	r1, [pc, #180]	; (8015678 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80155c4:	2aff      	cmp	r2, #255	; 0xff
 80155c6:	6808      	ldr	r0, [r1, #0]
 80155c8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80155cc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80155d0:	fa5f fe80 	uxtb.w	lr, r0
 80155d4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80155d8:	d03b      	beq.n	8015652 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80155da:	fa1f f982 	uxth.w	r9, r2
 80155de:	4438      	add	r0, r7
 80155e0:	43d2      	mvns	r2, r2
 80155e2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80155e6:	fb1e fe09 	smulbb	lr, lr, r9
 80155ea:	fb1a fa09 	smulbb	sl, sl, r9
 80155ee:	b2d2      	uxtb	r2, r2
 80155f0:	fb1b f909 	smulbb	r9, fp, r9
 80155f4:	fb08 ee02 	mla	lr, r8, r2, lr
 80155f8:	fa1f fe8e 	uxth.w	lr, lr
 80155fc:	f10e 0801 	add.w	r8, lr, #1
 8015600:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015604:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015608:	f806 e000 	strb.w	lr, [r6, r0]
 801560c:	4430      	add	r0, r6
 801560e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015612:	fb0e aa02 	mla	sl, lr, r2, sl
 8015616:	fa1f fa8a 	uxth.w	sl, sl
 801561a:	f10a 0e01 	add.w	lr, sl, #1
 801561e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015622:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015626:	fb0e 9902 	mla	r9, lr, r2, r9
 801562a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801562e:	fa1f f989 	uxth.w	r9, r9
 8015632:	f880 a001 	strb.w	sl, [r0, #1]
 8015636:	f109 0201 	add.w	r2, r9, #1
 801563a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801563e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015642:	f880 9002 	strb.w	r9, [r0, #2]
 8015646:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015648:	3701      	adds	r7, #1
 801564a:	4415      	add	r5, r2
 801564c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801564e:	4414      	add	r4, r2
 8015650:	e756      	b.n	8015500 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015652:	4438      	add	r0, r7
 8015654:	f806 e000 	strb.w	lr, [r6, r0]
 8015658:	4430      	add	r0, r6
 801565a:	f880 a001 	strb.w	sl, [r0, #1]
 801565e:	f880 b002 	strb.w	fp, [r0, #2]
 8015662:	e7f0      	b.n	8015646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015664:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015668:	f800 9c02 	strb.w	r9, [r0, #-2]
 801566c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015670:	e73d      	b.n	80154ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015672:	b005      	add	sp, #20
 8015674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015678:	24006c74 	.word	0x24006c74

0801567c <_ZN8touchgfx8LCD24bppD1Ev>:
 801567c:	4770      	bx	lr

0801567e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801567e:	4770      	bx	lr

08015680 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015680:	4770      	bx	lr

08015682 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015682:	4770      	bx	lr

08015684 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015684:	4770      	bx	lr

08015686 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015686:	4770      	bx	lr

08015688 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015688:	4770      	bx	lr

0801568a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801568a:	4770      	bx	lr

0801568c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801568c:	4770      	bx	lr

0801568e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801568e:	4770      	bx	lr

08015690 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015690:	4770      	bx	lr

08015692 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015692:	4770      	bx	lr

08015694 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015694:	4770      	bx	lr

08015696 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015696:	4770      	bx	lr

08015698 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015698:	4770      	bx	lr

0801569a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801569a:	4770      	bx	lr

0801569c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801569c:	4770      	bx	lr

0801569e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801569e:	4770      	bx	lr

080156a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80156a0:	4770      	bx	lr

080156a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80156a2:	4770      	bx	lr

080156a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80156a4:	4770      	bx	lr
	...

080156a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80156a8:	2bff      	cmp	r3, #255	; 0xff
 80156aa:	b508      	push	{r3, lr}
 80156ac:	d04f      	beq.n	801574e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80156ae:	2a2c      	cmp	r2, #44	; 0x2c
 80156b0:	d032      	beq.n	8015718 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80156b2:	d80f      	bhi.n	80156d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80156b4:	2a08      	cmp	r2, #8
 80156b6:	d046      	beq.n	8015746 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80156b8:	d805      	bhi.n	80156c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80156ba:	2a04      	cmp	r2, #4
 80156bc:	d041      	beq.n	8015742 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80156be:	2a05      	cmp	r2, #5
 80156c0:	d03d      	beq.n	801573e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80156c2:	2000      	movs	r0, #0
 80156c4:	e027      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156c6:	2a0a      	cmp	r2, #10
 80156c8:	d03d      	beq.n	8015746 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80156ca:	d301      	bcc.n	80156d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80156cc:	2a0b      	cmp	r2, #11
 80156ce:	d1f8      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80156d2:	e020      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156d4:	2a30      	cmp	r2, #48	; 0x30
 80156d6:	d038      	beq.n	801574a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80156d8:	d808      	bhi.n	80156ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80156da:	2a2e      	cmp	r2, #46	; 0x2e
 80156dc:	684b      	ldr	r3, [r1, #4]
 80156de:	d029      	beq.n	8015734 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80156e0:	d90b      	bls.n	80156fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d1ec      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156e8:	6a00      	ldr	r0, [r0, #32]
 80156ea:	e014      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156ec:	2a32      	cmp	r2, #50	; 0x32
 80156ee:	d02c      	beq.n	801574a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80156f0:	d301      	bcc.n	80156f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 80156f2:	2a33      	cmp	r2, #51	; 0x33
 80156f4:	d1e5      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80156f6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80156f8:	e00d      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d009      	beq.n	8015714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015700:	d3f2      	bcc.n	80156e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8015702:	2b02      	cmp	r3, #2
 8015704:	d1dd      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015706:	4b39      	ldr	r3, [pc, #228]	; (80157ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015708:	f240 4109 	movw	r1, #1033	; 0x409
 801570c:	4a38      	ldr	r2, [pc, #224]	; (80157f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801570e:	4839      	ldr	r0, [pc, #228]	; (80157f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8015710:	f006 fde4 	bl	801c2dc <__assert_func>
 8015714:	6900      	ldr	r0, [r0, #16]
 8015716:	bd08      	pop	{r3, pc}
 8015718:	684b      	ldr	r3, [r1, #4]
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	2b01      	cmp	r3, #1
 801571e:	d007      	beq.n	8015730 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8015720:	d30b      	bcc.n	801573a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8015722:	2b02      	cmp	r3, #2
 8015724:	d1cd      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015726:	4b31      	ldr	r3, [pc, #196]	; (80157ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8015728:	f240 4115 	movw	r1, #1045	; 0x415
 801572c:	4a30      	ldr	r2, [pc, #192]	; (80157f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801572e:	e7ee      	b.n	801570e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015730:	6880      	ldr	r0, [r0, #8]
 8015732:	e7f0      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d1c3      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801573a:	6980      	ldr	r0, [r0, #24]
 801573c:	e7eb      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801573e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015740:	e7e9      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015742:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015744:	e7e7      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015746:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015748:	e7e5      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801574a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801574c:	e7e3      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801574e:	2a2c      	cmp	r2, #44	; 0x2c
 8015750:	d030      	beq.n	80157b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8015752:	d80f      	bhi.n	8015774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8015754:	2a08      	cmp	r2, #8
 8015756:	d044      	beq.n	80157e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8015758:	d805      	bhi.n	8015766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801575a:	2a04      	cmp	r2, #4
 801575c:	d03f      	beq.n	80157de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801575e:	2a05      	cmp	r2, #5
 8015760:	d1af      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015762:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015764:	e7d7      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015766:	2a0a      	cmp	r2, #10
 8015768:	d03b      	beq.n	80157e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801576a:	d301      	bcc.n	8015770 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801576c:	2a0b      	cmp	r2, #11
 801576e:	d1a8      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015770:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015772:	e7d0      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8015774:	2a30      	cmp	r2, #48	; 0x30
 8015776:	d036      	beq.n	80157e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015778:	d808      	bhi.n	801578c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801577a:	2a2e      	cmp	r2, #46	; 0x2e
 801577c:	684b      	ldr	r3, [r1, #4]
 801577e:	d028      	beq.n	80157d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8015780:	d90b      	bls.n	801579a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8015782:	781b      	ldrb	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d19c      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015788:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801578a:	e7c4      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801578c:	2a32      	cmp	r2, #50	; 0x32
 801578e:	d02a      	beq.n	80157e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8015790:	d301      	bcc.n	8015796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015792:	2a33      	cmp	r2, #51	; 0x33
 8015794:	d195      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8015796:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015798:	e7bd      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	2b01      	cmp	r3, #1
 801579e:	d007      	beq.n	80157b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80157a0:	d3f2      	bcc.n	8015788 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80157a2:	2b02      	cmp	r3, #2
 80157a4:	d18d      	bne.n	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157a6:	4b11      	ldr	r3, [pc, #68]	; (80157ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80157a8:	f240 4146 	movw	r1, #1094	; 0x446
 80157ac:	4a10      	ldr	r2, [pc, #64]	; (80157f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80157ae:	e7ae      	b.n	801570e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80157b0:	6940      	ldr	r0, [r0, #20]
 80157b2:	e7b0      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157b4:	684b      	ldr	r3, [r1, #4]
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	d008      	beq.n	80157ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80157bc:	d30d      	bcc.n	80157da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80157be:	2b02      	cmp	r3, #2
 80157c0:	f47f af7f 	bne.w	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157c4:	4b09      	ldr	r3, [pc, #36]	; (80157ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80157c6:	f240 4152 	movw	r1, #1106	; 0x452
 80157ca:	4a09      	ldr	r2, [pc, #36]	; (80157f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80157cc:	e79f      	b.n	801570e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80157ce:	68c0      	ldr	r0, [r0, #12]
 80157d0:	e7a1      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f47f af74 	bne.w	80156c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80157da:	69c0      	ldr	r0, [r0, #28]
 80157dc:	e79b      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80157e0:	e799      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80157e4:	e797      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157e6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80157e8:	e795      	b.n	8015716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80157ea:	bf00      	nop
 80157ec:	080203c5 	.word	0x080203c5
 80157f0:	08020b37 	.word	0x08020b37
 80157f4:	08020411 	.word	0x08020411

080157f8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80157f8:	b508      	push	{r3, lr}
 80157fa:	4b06      	ldr	r3, [pc, #24]	; (8015814 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80157fc:	8818      	ldrh	r0, [r3, #0]
 80157fe:	b928      	cbnz	r0, 801580c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8015800:	4b05      	ldr	r3, [pc, #20]	; (8015818 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8015802:	214d      	movs	r1, #77	; 0x4d
 8015804:	4a05      	ldr	r2, [pc, #20]	; (801581c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8015806:	4806      	ldr	r0, [pc, #24]	; (8015820 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8015808:	f006 fd68 	bl	801c2dc <__assert_func>
 801580c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015810:	b280      	uxth	r0, r0
 8015812:	bd08      	pop	{r3, pc}
 8015814:	24006c66 	.word	0x24006c66
 8015818:	0802061d 	.word	0x0802061d
 801581c:	08020afc 	.word	0x08020afc
 8015820:	0802065f 	.word	0x0802065f

08015824 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015828:	b08b      	sub	sp, #44	; 0x2c
 801582a:	460d      	mov	r5, r1
 801582c:	4616      	mov	r6, r2
 801582e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015832:	f1b8 0f00 	cmp.w	r8, #0
 8015836:	d047      	beq.n	80158c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015838:	6810      	ldr	r0, [r2, #0]
 801583a:	ac06      	add	r4, sp, #24
 801583c:	6851      	ldr	r1, [r2, #4]
 801583e:	4f51      	ldr	r7, [pc, #324]	; (8015984 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015840:	c403      	stmia	r4!, {r0, r1}
 8015842:	6818      	ldr	r0, [r3, #0]
 8015844:	ac08      	add	r4, sp, #32
 8015846:	6859      	ldr	r1, [r3, #4]
 8015848:	c403      	stmia	r4!, {r0, r1}
 801584a:	a806      	add	r0, sp, #24
 801584c:	f7fa fd9e 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015850:	4631      	mov	r1, r6
 8015852:	a808      	add	r0, sp, #32
 8015854:	f7fa fdde 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015858:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801585c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015860:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015864:	6838      	ldr	r0, [r7, #0]
 8015866:	fb11 2103 	smlabb	r1, r1, r3, r2
 801586a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801586e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015872:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015876:	440d      	add	r5, r1
 8015878:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801587c:	440a      	add	r2, r1
 801587e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015882:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015886:	4413      	add	r3, r2
 8015888:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801588c:	6803      	ldr	r3, [r0, #0]
 801588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015890:	4798      	blx	r3
 8015892:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015896:	d01a      	beq.n	80158ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8015898:	f010 0f04 	tst.w	r0, #4
 801589c:	6838      	ldr	r0, [r7, #0]
 801589e:	d019      	beq.n	80158d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80158a0:	2100      	movs	r1, #0
 80158a2:	6807      	ldr	r7, [r0, #0]
 80158a4:	b2a4      	uxth	r4, r4
 80158a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80158aa:	b2b6      	uxth	r6, r6
 80158ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80158b0:	9401      	str	r4, [sp, #4]
 80158b2:	9600      	str	r6, [sp, #0]
 80158b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80158b8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80158bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80158c0:	9102      	str	r1, [sp, #8]
 80158c2:	4629      	mov	r1, r5
 80158c4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80158c6:	47a0      	blx	r4
 80158c8:	b00b      	add	sp, #44	; 0x2c
 80158ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158ce:	f010 0f01 	tst.w	r0, #1
 80158d2:	e7e3      	b.n	801589c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80158d4:	6803      	ldr	r3, [r0, #0]
 80158d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158d8:	4798      	blx	r3
 80158da:	4a2b      	ldr	r2, [pc, #172]	; (8015988 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80158dc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80158e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80158e4:	8813      	ldrh	r3, [r2, #0]
 80158e6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80158ea:	fb03 f404 	mul.w	r4, r3, r4
 80158ee:	fb03 c101 	mla	r1, r3, r1, ip
 80158f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80158f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158fa:	4408      	add	r0, r1
 80158fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015900:	4404      	add	r4, r0
 8015902:	d02e      	beq.n	8015962 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015904:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015908:	1b9b      	subs	r3, r3, r6
 801590a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801590e:	1b96      	subs	r6, r2, r6
 8015910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015914:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015918:	42a0      	cmp	r0, r4
 801591a:	d22d      	bcs.n	8015978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801591c:	eb00 0e01 	add.w	lr, r0, r1
 8015920:	4570      	cmp	r0, lr
 8015922:	d210      	bcs.n	8015946 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8015924:	f890 9000 	ldrb.w	r9, [r0]
 8015928:	f815 2b01 	ldrb.w	r2, [r5], #1
 801592c:	fb19 f90c 	smulbb	r9, r9, ip
 8015930:	fb02 9208 	mla	r2, r2, r8, r9
 8015934:	b292      	uxth	r2, r2
 8015936:	f102 0901 	add.w	r9, r2, #1
 801593a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801593e:	1212      	asrs	r2, r2, #8
 8015940:	f800 2b01 	strb.w	r2, [r0], #1
 8015944:	e7ec      	b.n	8015920 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8015946:	4418      	add	r0, r3
 8015948:	4435      	add	r5, r6
 801594a:	e7e5      	b.n	8015918 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801594c:	8813      	ldrh	r3, [r2, #0]
 801594e:	1b9b      	subs	r3, r3, r6
 8015950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015954:	4418      	add	r0, r3
 8015956:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801595a:	1b9b      	subs	r3, r3, r6
 801595c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015960:	441d      	add	r5, r3
 8015962:	42a0      	cmp	r0, r4
 8015964:	d208      	bcs.n	8015978 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015966:	eb00 0c01 	add.w	ip, r0, r1
 801596a:	4560      	cmp	r0, ip
 801596c:	d2ee      	bcs.n	801594c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801596e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015972:	f800 3b01 	strb.w	r3, [r0], #1
 8015976:	e7f8      	b.n	801596a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8015978:	6838      	ldr	r0, [r7, #0]
 801597a:	6803      	ldr	r3, [r0, #0]
 801597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801597e:	4798      	blx	r3
 8015980:	e7a2      	b.n	80158c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015982:	bf00      	nop
 8015984:	24006c6c 	.word	0x24006c6c
 8015988:	24006c66 	.word	0x24006c66

0801598c <_ZN8touchgfx8LCD24bppD0Ev>:
 801598c:	b510      	push	{r4, lr}
 801598e:	4604      	mov	r4, r0
 8015990:	2158      	movs	r1, #88	; 0x58
 8015992:	f006 fb8d 	bl	801c0b0 <_ZdlPvj>
 8015996:	4620      	mov	r0, r4
 8015998:	bd10      	pop	{r4, pc}

0801599a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801599a:	b510      	push	{r4, lr}
 801599c:	4604      	mov	r4, r0
 801599e:	2104      	movs	r1, #4
 80159a0:	f006 fb86 	bl	801c0b0 <_ZdlPvj>
 80159a4:	4620      	mov	r0, r4
 80159a6:	bd10      	pop	{r4, pc}

080159a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80159a8:	b510      	push	{r4, lr}
 80159aa:	4604      	mov	r4, r0
 80159ac:	2104      	movs	r1, #4
 80159ae:	f006 fb7f 	bl	801c0b0 <_ZdlPvj>
 80159b2:	4620      	mov	r0, r4
 80159b4:	bd10      	pop	{r4, pc}

080159b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80159b6:	b510      	push	{r4, lr}
 80159b8:	4604      	mov	r4, r0
 80159ba:	2104      	movs	r1, #4
 80159bc:	f006 fb78 	bl	801c0b0 <_ZdlPvj>
 80159c0:	4620      	mov	r0, r4
 80159c2:	bd10      	pop	{r4, pc}

080159c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80159c4:	b510      	push	{r4, lr}
 80159c6:	4604      	mov	r4, r0
 80159c8:	2104      	movs	r1, #4
 80159ca:	f006 fb71 	bl	801c0b0 <_ZdlPvj>
 80159ce:	4620      	mov	r0, r4
 80159d0:	bd10      	pop	{r4, pc}

080159d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80159d2:	b510      	push	{r4, lr}
 80159d4:	4604      	mov	r4, r0
 80159d6:	2104      	movs	r1, #4
 80159d8:	f006 fb6a 	bl	801c0b0 <_ZdlPvj>
 80159dc:	4620      	mov	r0, r4
 80159de:	bd10      	pop	{r4, pc}

080159e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80159e0:	b510      	push	{r4, lr}
 80159e2:	4604      	mov	r4, r0
 80159e4:	2104      	movs	r1, #4
 80159e6:	f006 fb63 	bl	801c0b0 <_ZdlPvj>
 80159ea:	4620      	mov	r0, r4
 80159ec:	bd10      	pop	{r4, pc}

080159ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80159ee:	b510      	push	{r4, lr}
 80159f0:	4604      	mov	r4, r0
 80159f2:	2104      	movs	r1, #4
 80159f4:	f006 fb5c 	bl	801c0b0 <_ZdlPvj>
 80159f8:	4620      	mov	r0, r4
 80159fa:	bd10      	pop	{r4, pc}

080159fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80159fc:	b510      	push	{r4, lr}
 80159fe:	4604      	mov	r4, r0
 8015a00:	2104      	movs	r1, #4
 8015a02:	f006 fb55 	bl	801c0b0 <_ZdlPvj>
 8015a06:	4620      	mov	r0, r4
 8015a08:	bd10      	pop	{r4, pc}

08015a0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015a0a:	b510      	push	{r4, lr}
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	2104      	movs	r1, #4
 8015a10:	f006 fb4e 	bl	801c0b0 <_ZdlPvj>
 8015a14:	4620      	mov	r0, r4
 8015a16:	bd10      	pop	{r4, pc}

08015a18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015a18:	b510      	push	{r4, lr}
 8015a1a:	4604      	mov	r4, r0
 8015a1c:	2104      	movs	r1, #4
 8015a1e:	f006 fb47 	bl	801c0b0 <_ZdlPvj>
 8015a22:	4620      	mov	r0, r4
 8015a24:	bd10      	pop	{r4, pc}

08015a26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015a26:	b510      	push	{r4, lr}
 8015a28:	4604      	mov	r4, r0
 8015a2a:	2104      	movs	r1, #4
 8015a2c:	f006 fb40 	bl	801c0b0 <_ZdlPvj>
 8015a30:	4620      	mov	r0, r4
 8015a32:	bd10      	pop	{r4, pc}

08015a34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015a34:	b510      	push	{r4, lr}
 8015a36:	4604      	mov	r4, r0
 8015a38:	2104      	movs	r1, #4
 8015a3a:	f006 fb39 	bl	801c0b0 <_ZdlPvj>
 8015a3e:	4620      	mov	r0, r4
 8015a40:	bd10      	pop	{r4, pc}

08015a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015a42:	b510      	push	{r4, lr}
 8015a44:	4604      	mov	r4, r0
 8015a46:	2104      	movs	r1, #4
 8015a48:	f006 fb32 	bl	801c0b0 <_ZdlPvj>
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	bd10      	pop	{r4, pc}

08015a50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015a50:	b510      	push	{r4, lr}
 8015a52:	4604      	mov	r4, r0
 8015a54:	2104      	movs	r1, #4
 8015a56:	f006 fb2b 	bl	801c0b0 <_ZdlPvj>
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	bd10      	pop	{r4, pc}

08015a5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015a5e:	b510      	push	{r4, lr}
 8015a60:	4604      	mov	r4, r0
 8015a62:	2104      	movs	r1, #4
 8015a64:	f006 fb24 	bl	801c0b0 <_ZdlPvj>
 8015a68:	4620      	mov	r0, r4
 8015a6a:	bd10      	pop	{r4, pc}

08015a6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	4604      	mov	r4, r0
 8015a70:	2104      	movs	r1, #4
 8015a72:	f006 fb1d 	bl	801c0b0 <_ZdlPvj>
 8015a76:	4620      	mov	r0, r4
 8015a78:	bd10      	pop	{r4, pc}

08015a7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	2104      	movs	r1, #4
 8015a80:	f006 fb16 	bl	801c0b0 <_ZdlPvj>
 8015a84:	4620      	mov	r0, r4
 8015a86:	bd10      	pop	{r4, pc}

08015a88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015a88:	b510      	push	{r4, lr}
 8015a8a:	4604      	mov	r4, r0
 8015a8c:	2104      	movs	r1, #4
 8015a8e:	f006 fb0f 	bl	801c0b0 <_ZdlPvj>
 8015a92:	4620      	mov	r0, r4
 8015a94:	bd10      	pop	{r4, pc}

08015a96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015a96:	b510      	push	{r4, lr}
 8015a98:	4604      	mov	r4, r0
 8015a9a:	2104      	movs	r1, #4
 8015a9c:	f006 fb08 	bl	801c0b0 <_ZdlPvj>
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	bd10      	pop	{r4, pc}

08015aa4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015aa4:	b510      	push	{r4, lr}
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	2104      	movs	r1, #4
 8015aaa:	f006 fb01 	bl	801c0b0 <_ZdlPvj>
 8015aae:	4620      	mov	r0, r4
 8015ab0:	bd10      	pop	{r4, pc}
	...

08015ab4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8015ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab8:	4db4      	ldr	r5, [pc, #720]	; (8015d8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 8015aba:	4690      	mov	r8, r2
 8015abc:	b08d      	sub	sp, #52	; 0x34
 8015abe:	4604      	mov	r4, r0
 8015ac0:	682a      	ldr	r2, [r5, #0]
 8015ac2:	4689      	mov	r9, r1
 8015ac4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8015ac8:	2a02      	cmp	r2, #2
 8015aca:	d106      	bne.n	8015ada <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015acc:	4bb0      	ldr	r3, [pc, #704]	; (8015d90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8015ace:	f240 11ed 	movw	r1, #493	; 0x1ed
 8015ad2:	4ab0      	ldr	r2, [pc, #704]	; (8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015ad4:	48b0      	ldr	r0, [pc, #704]	; (8015d98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8015ad6:	f006 fc01 	bl	801c2dc <__assert_func>
 8015ada:	ae0c      	add	r6, sp, #48	; 0x30
 8015adc:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f7fe f97b 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	4607      	mov	r7, r0
 8015aea:	4620      	mov	r0, r4
 8015aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aee:	4798      	blx	r3
 8015af0:	4287      	cmp	r7, r0
 8015af2:	d004      	beq.n	8015afe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015af4:	4ba9      	ldr	r3, [pc, #676]	; (8015d9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8015af6:	f240 11ef 	movw	r1, #495	; 0x1ef
 8015afa:	4aa6      	ldr	r2, [pc, #664]	; (8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015afc:	e7ea      	b.n	8015ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015afe:	4630      	mov	r0, r6
 8015b00:	f7fe f8e2 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015b04:	4607      	mov	r7, r0
 8015b06:	b920      	cbnz	r0, 8015b12 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8015b08:	4ba5      	ldr	r3, [pc, #660]	; (8015da0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8015b0a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8015b0e:	4aa1      	ldr	r2, [pc, #644]	; (8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015b10:	e7e0      	b.n	8015ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015b12:	f8d8 0000 	ldr.w	r0, [r8]
 8015b16:	ab06      	add	r3, sp, #24
 8015b18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b1c:	f9b8 a000 	ldrsh.w	sl, [r8]
 8015b20:	c303      	stmia	r3!, {r0, r1}
 8015b22:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015b26:	ab08      	add	r3, sp, #32
 8015b28:	f8d9 0000 	ldr.w	r0, [r9]
 8015b2c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8015b30:	c303      	stmia	r3!, {r0, r1}
 8015b32:	4630      	mov	r0, r6
 8015b34:	f7fd ffc0 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015b38:	4680      	mov	r8, r0
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f7fd fff6 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015b40:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015b44:	f10d 0920 	add.w	r9, sp, #32
 8015b48:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8015b4c:	a806      	add	r0, sp, #24
 8015b4e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015b52:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8015b56:	f7fa fc19 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b5a:	4648      	mov	r0, r9
 8015b5c:	f7fa fc16 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b60:	a80a      	add	r0, sp, #40	; 0x28
 8015b62:	f7fa fc13 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b66:	4b8f      	ldr	r3, [pc, #572]	; (8015da4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015b68:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015b6c:	881e      	ldrh	r6, [r3, #0]
 8015b6e:	4b8e      	ldr	r3, [pc, #568]	; (8015da8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015b70:	fa0f fb86 	sxth.w	fp, r6
 8015b74:	8819      	ldrh	r1, [r3, #0]
 8015b76:	4593      	cmp	fp, r2
 8015b78:	dd75      	ble.n	8015c66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b7a:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8015b7e:	4494      	add	ip, r2
 8015b80:	fa1f fc8c 	uxth.w	ip, ip
 8015b84:	fa0f fa8c 	sxth.w	sl, ip
 8015b88:	f1ba 0f00 	cmp.w	sl, #0
 8015b8c:	dd6b      	ble.n	8015c66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b8e:	fa0f f881 	sxth.w	r8, r1
 8015b92:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015b96:	4598      	cmp	r8, r3
 8015b98:	dd65      	ble.n	8015c66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015b9a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8015b9e:	4418      	add	r0, r3
 8015ba0:	b280      	uxth	r0, r0
 8015ba2:	fa0f fe80 	sxth.w	lr, r0
 8015ba6:	f1be 0f00 	cmp.w	lr, #0
 8015baa:	dd5c      	ble.n	8015c66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8015bac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015bb4:	45d3      	cmp	fp, sl
 8015bb6:	bfc8      	it	gt
 8015bb8:	4666      	movgt	r6, ip
 8015bba:	45f0      	cmp	r8, lr
 8015bbc:	bfc8      	it	gt
 8015bbe:	4601      	movgt	r1, r0
 8015bc0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015bc4:	1ab6      	subs	r6, r6, r2
 8015bc6:	1ac9      	subs	r1, r1, r3
 8015bc8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015bcc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015bd0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8015bd4:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8015bd8:	f1bc 0f00 	cmp.w	ip, #0
 8015bdc:	f340 80aa 	ble.w	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015be0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8015be4:	2e00      	cmp	r6, #0
 8015be6:	f340 80a5 	ble.w	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015bea:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015bee:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8015bf2:	4288      	cmp	r0, r1
 8015bf4:	db3b      	blt.n	8015c6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015bf6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8015bfa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	db35      	blt.n	8015c6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c02:	4460      	add	r0, ip
 8015c04:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8015c08:	4461      	add	r1, ip
 8015c0a:	b200      	sxth	r0, r0
 8015c0c:	b209      	sxth	r1, r1
 8015c0e:	4288      	cmp	r0, r1
 8015c10:	dc2d      	bgt.n	8015c6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c12:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015c16:	4432      	add	r2, r6
 8015c18:	440b      	add	r3, r1
 8015c1a:	b212      	sxth	r2, r2
 8015c1c:	b21b      	sxth	r3, r3
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	dc25      	bgt.n	8015c6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8015c22:	6823      	ldr	r3, [r4, #0]
 8015c24:	4620      	mov	r0, r4
 8015c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c28:	4798      	blx	r3
 8015c2a:	4682      	mov	sl, r0
 8015c2c:	6828      	ldr	r0, [r5, #0]
 8015c2e:	6803      	ldr	r3, [r0, #0]
 8015c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c32:	4798      	blx	r3
 8015c34:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8015c38:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015c3c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015c40:	9303      	str	r3, [sp, #12]
 8015c42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015c46:	1a9b      	subs	r3, r3, r2
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	b21c      	sxth	r4, r3
 8015c4c:	2c00      	cmp	r4, #0
 8015c4e:	dc13      	bgt.n	8015c78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8015c50:	bf18      	it	ne
 8015c52:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8015c56:	463c      	mov	r4, r7
 8015c58:	bf1e      	ittt	ne
 8015c5a:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8015c5e:	189b      	addne	r3, r3, r2
 8015c60:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8015c64:	e00f      	b.n	8015c86 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8015c66:	2300      	movs	r3, #0
 8015c68:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015c6c:	e7b2      	b.n	8015bd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8015c6e:	4b4f      	ldr	r3, [pc, #316]	; (8015dac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8015c70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8015c74:	4a47      	ldr	r2, [pc, #284]	; (8015d94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8015c76:	e72d      	b.n	8015ad4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015c78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015c7c:	ebab 0303 	sub.w	r3, fp, r3
 8015c80:	443c      	add	r4, r7
 8015c82:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8015c86:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8015c8a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015c8e:	1a9b      	subs	r3, r3, r2
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	b219      	sxth	r1, r3
 8015c94:	2900      	cmp	r1, #0
 8015c96:	dd51      	ble.n	8015d3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8015c98:	9a03      	ldr	r2, [sp, #12]
 8015c9a:	fb02 4401 	mla	r4, r2, r1, r4
 8015c9e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015ca2:	1ad3      	subs	r3, r2, r3
 8015ca4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015ca8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	dd41      	ble.n	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015cb0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8015cb4:	2e00      	cmp	r6, #0
 8015cb6:	dd3d      	ble.n	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015cb8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015cbc:	f04f 0803 	mov.w	r8, #3
 8015cc0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015cc4:	fb0a f10c 	mul.w	r1, sl, ip
 8015cc8:	fb12 1808 	smlabb	r8, r2, r8, r1
 8015ccc:	4935      	ldr	r1, [pc, #212]	; (8015da4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8015cce:	4480      	add	r8, r0
 8015cd0:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8015cd4:	8809      	ldrh	r1, [r1, #0]
 8015cd6:	4283      	cmp	r3, r0
 8015cd8:	eba1 0202 	sub.w	r2, r1, r2
 8015cdc:	bfa8      	it	ge
 8015cde:	4603      	movge	r3, r0
 8015ce0:	4293      	cmp	r3, r2
 8015ce2:	bfa8      	it	ge
 8015ce4:	4613      	movge	r3, r2
 8015ce6:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8015cea:	4296      	cmp	r6, r2
 8015cec:	bfa8      	it	ge
 8015cee:	4616      	movge	r6, r2
 8015cf0:	4a2d      	ldr	r2, [pc, #180]	; (8015da8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8015cf2:	8812      	ldrh	r2, [r2, #0]
 8015cf4:	eba2 0c0c 	sub.w	ip, r2, ip
 8015cf8:	4632      	mov	r2, r6
 8015cfa:	4566      	cmp	r6, ip
 8015cfc:	bfa8      	it	ge
 8015cfe:	4662      	movge	r2, ip
 8015d00:	4299      	cmp	r1, r3
 8015d02:	9202      	str	r2, [sp, #8]
 8015d04:	d12d      	bne.n	8015d62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015d06:	4559      	cmp	r1, fp
 8015d08:	d12b      	bne.n	8015d62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8015d0a:	6828      	ldr	r0, [r5, #0]
 8015d0c:	6803      	ldr	r3, [r0, #0]
 8015d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d10:	4798      	blx	r3
 8015d12:	07c3      	lsls	r3, r0, #31
 8015d14:	d51b      	bpl.n	8015d4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8015d16:	6828      	ldr	r0, [r5, #0]
 8015d18:	9b02      	ldr	r3, [sp, #8]
 8015d1a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8015d1e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015d22:	6803      	ldr	r3, [r0, #0]
 8015d24:	f8cd b000 	str.w	fp, [sp]
 8015d28:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8015d2a:	4623      	mov	r3, r4
 8015d2c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015d30:	47a8      	blx	r5
 8015d32:	4607      	mov	r7, r0
 8015d34:	4638      	mov	r0, r7
 8015d36:	b00d      	add	sp, #52	; 0x34
 8015d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3c:	bf1f      	itttt	ne
 8015d3e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8015d42:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8015d46:	189b      	addne	r3, r3, r2
 8015d48:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8015d4c:	e7ac      	b.n	8015ca8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8015d4e:	6828      	ldr	r0, [r5, #0]
 8015d50:	4642      	mov	r2, r8
 8015d52:	4621      	mov	r1, r4
 8015d54:	6803      	ldr	r3, [r0, #0]
 8015d56:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8015d58:	9b02      	ldr	r3, [sp, #8]
 8015d5a:	fb03 f30a 	mul.w	r3, r3, sl
 8015d5e:	47a8      	blx	r5
 8015d60:	e7e8      	b.n	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d62:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8015d66:	f04f 0900 	mov.w	r9, #0
 8015d6a:	9b02      	ldr	r3, [sp, #8]
 8015d6c:	454b      	cmp	r3, r9
 8015d6e:	dde1      	ble.n	8015d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8015d70:	6828      	ldr	r0, [r5, #0]
 8015d72:	4642      	mov	r2, r8
 8015d74:	4621      	mov	r1, r4
 8015d76:	44d0      	add	r8, sl
 8015d78:	6803      	ldr	r3, [r0, #0]
 8015d7a:	f109 0901 	add.w	r9, r9, #1
 8015d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d80:	461e      	mov	r6, r3
 8015d82:	465b      	mov	r3, fp
 8015d84:	47b0      	blx	r6
 8015d86:	9b03      	ldr	r3, [sp, #12]
 8015d88:	441c      	add	r4, r3
 8015d8a:	e7ee      	b.n	8015d6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8015d8c:	24006c6c 	.word	0x24006c6c
 8015d90:	08020443 	.word	0x08020443
 8015d94:	08020be1 	.word	0x08020be1
 8015d98:	08020411 	.word	0x08020411
 8015d9c:	080204f5 	.word	0x080204f5
 8015da0:	0802054a 	.word	0x0802054a
 8015da4:	24006c66 	.word	0x24006c66
 8015da8:	24006c68 	.word	0x24006c68
 8015dac:	08020588 	.word	0x08020588

08015db0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8015db8:	9c06      	ldr	r4, [sp, #24]
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d06e      	beq.n	8015e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015dbe:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8015dc2:	2d00      	cmp	r5, #0
 8015dc4:	dd6a      	ble.n	8015e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015dc6:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8015dca:	f1bc 0f00 	cmp.w	ip, #0
 8015dce:	dd65      	ble.n	8015e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015dd0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8015dd4:	28ff      	cmp	r0, #255	; 0xff
 8015dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dda:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8015dde:	fb02 3306 	mla	r3, r2, r6, r3
 8015de2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8015de6:	b2e4      	uxtb	r4, r4
 8015de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015dec:	4419      	add	r1, r3
 8015dee:	fb02 f30c 	mul.w	r3, r2, ip
 8015df2:	eba2 0205 	sub.w	r2, r2, r5
 8015df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015dfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015e02:	440b      	add	r3, r1
 8015e04:	d03e      	beq.n	8015e84 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8015e06:	fa1f fc80 	uxth.w	ip, r0
 8015e0a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8015e0e:	fb06 f60c 	mul.w	r6, r6, ip
 8015e12:	b280      	uxth	r0, r0
 8015e14:	fb07 f70c 	mul.w	r7, r7, ip
 8015e18:	fb04 f40c 	mul.w	r4, r4, ip
 8015e1c:	4299      	cmp	r1, r3
 8015e1e:	d23d      	bcs.n	8015e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e20:	eb01 0c05 	add.w	ip, r1, r5
 8015e24:	458c      	cmp	ip, r1
 8015e26:	f101 0e03 	add.w	lr, r1, #3
 8015e2a:	d928      	bls.n	8015e7e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8015e2c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8015e30:	fb11 f100 	smulbb	r1, r1, r0
 8015e34:	4421      	add	r1, r4
 8015e36:	b289      	uxth	r1, r1
 8015e38:	f101 0801 	add.w	r8, r1, #1
 8015e3c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e40:	1209      	asrs	r1, r1, #8
 8015e42:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8015e46:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8015e4a:	fb11 f100 	smulbb	r1, r1, r0
 8015e4e:	4439      	add	r1, r7
 8015e50:	b289      	uxth	r1, r1
 8015e52:	f101 0801 	add.w	r8, r1, #1
 8015e56:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e5a:	1209      	asrs	r1, r1, #8
 8015e5c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8015e60:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8015e64:	fb11 f100 	smulbb	r1, r1, r0
 8015e68:	4431      	add	r1, r6
 8015e6a:	b289      	uxth	r1, r1
 8015e6c:	f101 0801 	add.w	r8, r1, #1
 8015e70:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015e74:	1209      	asrs	r1, r1, #8
 8015e76:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8015e7a:	4671      	mov	r1, lr
 8015e7c:	e7d2      	b.n	8015e24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8015e7e:	4411      	add	r1, r2
 8015e80:	e7cc      	b.n	8015e1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8015e82:	4411      	add	r1, r2
 8015e84:	4299      	cmp	r1, r3
 8015e86:	d209      	bcs.n	8015e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015e88:	1948      	adds	r0, r1, r5
 8015e8a:	4281      	cmp	r1, r0
 8015e8c:	d2f9      	bcs.n	8015e82 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8015e8e:	700c      	strb	r4, [r1, #0]
 8015e90:	3103      	adds	r1, #3
 8015e92:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015e96:	f801 6c01 	strb.w	r6, [r1, #-1]
 8015e9a:	e7f6      	b.n	8015e8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8015e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ea0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ea2:	4606      	mov	r6, r0
 8015ea4:	b087      	sub	sp, #28
 8015ea6:	4615      	mov	r5, r2
 8015ea8:	461f      	mov	r7, r3
 8015eaa:	b353      	cbz	r3, 8015f02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015eac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	dd26      	ble.n	8015f02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015eb4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	dd22      	ble.n	8015f02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015ebc:	6808      	ldr	r0, [r1, #0]
 8015ebe:	aa04      	add	r2, sp, #16
 8015ec0:	6849      	ldr	r1, [r1, #4]
 8015ec2:	4c1b      	ldr	r4, [pc, #108]	; (8015f30 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015ec4:	c203      	stmia	r2!, {r0, r1}
 8015ec6:	a804      	add	r0, sp, #16
 8015ec8:	f7fa fa60 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	6803      	ldr	r3, [r0, #0]
 8015ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ed2:	4798      	blx	r3
 8015ed4:	2fff      	cmp	r7, #255	; 0xff
 8015ed6:	d016      	beq.n	8015f06 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015ed8:	f010 0f08 	tst.w	r0, #8
 8015edc:	6820      	ldr	r0, [r4, #0]
 8015ede:	d015      	beq.n	8015f0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015ee0:	2400      	movs	r4, #0
 8015ee2:	6801      	ldr	r1, [r0, #0]
 8015ee4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015ee8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015eec:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015ef0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015ef4:	9401      	str	r4, [sp, #4]
 8015ef6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015efa:	9400      	str	r4, [sp, #0]
 8015efc:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8015efe:	4629      	mov	r1, r5
 8015f00:	47a0      	blx	r4
 8015f02:	b007      	add	sp, #28
 8015f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f06:	f010 0f02 	tst.w	r0, #2
 8015f0a:	e7e7      	b.n	8015edc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015f0c:	6803      	ldr	r3, [r0, #0]
 8015f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f10:	4798      	blx	r3
 8015f12:	4b08      	ldr	r3, [pc, #32]	; (8015f34 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015f14:	4601      	mov	r1, r0
 8015f16:	4630      	mov	r0, r6
 8015f18:	881a      	ldrh	r2, [r3, #0]
 8015f1a:	6833      	ldr	r3, [r6, #0]
 8015f1c:	e9cd 5700 	strd	r5, r7, [sp]
 8015f20:	69dd      	ldr	r5, [r3, #28]
 8015f22:	ab04      	add	r3, sp, #16
 8015f24:	47a8      	blx	r5
 8015f26:	6820      	ldr	r0, [r4, #0]
 8015f28:	6803      	ldr	r3, [r0, #0]
 8015f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f2c:	4798      	blx	r3
 8015f2e:	e7e8      	b.n	8015f02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f30:	24006c6c 	.word	0x24006c6c
 8015f34:	24006c66 	.word	0x24006c66

08015f38 <_ZN8touchgfx8LCD24bppC1Ev>:
 8015f38:	2200      	movs	r2, #0
 8015f3a:	490c      	ldr	r1, [pc, #48]	; (8015f6c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8015f3c:	6042      	str	r2, [r0, #4]
 8015f3e:	6001      	str	r1, [r0, #0]
 8015f40:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8015f44:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8015f48:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015f4c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015f50:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8015f54:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8015f58:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015f5c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8015f60:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8015f64:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8015f68:	4770      	bx	lr
 8015f6a:	bf00      	nop
 8015f6c:	0802082c 	.word	0x0802082c

08015f70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f74:	b091      	sub	sp, #68	; 0x44
 8015f76:	880d      	ldrh	r5, [r1, #0]
 8015f78:	4607      	mov	r7, r0
 8015f7a:	4688      	mov	r8, r1
 8015f7c:	4616      	mov	r6, r2
 8015f7e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8015f82:	b12d      	cbz	r5, 8015f90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015f84:	4b69      	ldr	r3, [pc, #420]	; (801612c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8015f86:	2160      	movs	r1, #96	; 0x60
 8015f88:	4a69      	ldr	r2, [pc, #420]	; (8016130 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8015f8a:	486a      	ldr	r0, [pc, #424]	; (8016134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8015f8c:	f006 f9a6 	bl	801c2dc <__assert_func>
 8015f90:	6810      	ldr	r0, [r2, #0]
 8015f92:	ac0c      	add	r4, sp, #48	; 0x30
 8015f94:	6851      	ldr	r1, [r2, #4]
 8015f96:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8016138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8015f9a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 801613c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8015f9e:	c403      	stmia	r4!, {r0, r1}
 8015fa0:	6818      	ldr	r0, [r3, #0]
 8015fa2:	ac0e      	add	r4, sp, #56	; 0x38
 8015fa4:	6859      	ldr	r1, [r3, #4]
 8015fa6:	c403      	stmia	r4!, {r0, r1}
 8015fa8:	a80c      	add	r0, sp, #48	; 0x30
 8015faa:	f7fa f9ef 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015fae:	4631      	mov	r1, r6
 8015fb0:	a80e      	add	r0, sp, #56	; 0x38
 8015fb2:	f7fa fa2f 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015fb6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015fba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015fbe:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015fc2:	f8da 0000 	ldr.w	r0, [sl]
 8015fc6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015fca:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8015fce:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8015fd2:	440f      	add	r7, r1
 8015fd4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015fd8:	440a      	add	r2, r1
 8015fda:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015fde:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015fe2:	4413      	add	r3, r2
 8015fe4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fec:	4798      	blx	r3
 8015fee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015ff2:	f8da 0000 	ldr.w	r0, [sl]
 8015ff6:	d01e      	beq.n	8016036 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8015ff8:	6801      	ldr	r1, [r0, #0]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	9509      	str	r5, [sp, #36]	; 0x24
 8015ffe:	250b      	movs	r5, #11
 8016000:	b2a4      	uxth	r4, r4
 8016002:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016006:	b2b6      	uxth	r6, r6
 8016008:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801600c:	f8bb 5000 	ldrh.w	r5, [fp]
 8016010:	f8cd 9010 	str.w	r9, [sp, #16]
 8016014:	9602      	str	r6, [sp, #8]
 8016016:	9401      	str	r4, [sp, #4]
 8016018:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801601c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8016020:	9203      	str	r2, [sp, #12]
 8016022:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016026:	9200      	str	r2, [sp, #0]
 8016028:	4642      	mov	r2, r8
 801602a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801602c:	4639      	mov	r1, r7
 801602e:	47a0      	blx	r4
 8016030:	b011      	add	sp, #68	; 0x44
 8016032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801603a:	4798      	blx	r3
 801603c:	f8bb 5000 	ldrh.w	r5, [fp]
 8016040:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016044:	f04f 0e04 	mov.w	lr, #4
 8016048:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801604c:	436e      	muls	r6, r5
 801604e:	fb05 2303 	mla	r3, r5, r3, r2
 8016052:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016056:	1b2d      	subs	r5, r5, r4
 8016058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801605c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016060:	4418      	add	r0, r3
 8016062:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016066:	1982      	adds	r2, r0, r6
 8016068:	1b1b      	subs	r3, r3, r4
 801606a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801606e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016070:	4290      	cmp	r0, r2
 8016072:	d254      	bcs.n	801611e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8016074:	eb00 0a04 	add.w	sl, r0, r4
 8016078:	4550      	cmp	r0, sl
 801607a:	d24c      	bcs.n	8016116 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801607c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016080:	fb1e e101 	smlabb	r1, lr, r1, lr
 8016084:	eb08 0c01 	add.w	ip, r8, r1
 8016088:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801608c:	b173      	cbz	r3, 80160ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801608e:	2bff      	cmp	r3, #255	; 0xff
 8016090:	f818 b001 	ldrb.w	fp, [r8, r1]
 8016094:	d10c      	bne.n	80160b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8016096:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801609a:	d109      	bne.n	80160b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801609c:	f880 b000 	strb.w	fp, [r0]
 80160a0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80160a4:	7043      	strb	r3, [r0, #1]
 80160a6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80160aa:	7083      	strb	r3, [r0, #2]
 80160ac:	3003      	adds	r0, #3
 80160ae:	e7e3      	b.n	8016078 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 80160b0:	fb09 f103 	mul.w	r1, r9, r3
 80160b4:	1c4b      	adds	r3, r1, #1
 80160b6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80160ba:	7801      	ldrb	r1, [r0, #0]
 80160bc:	121b      	asrs	r3, r3, #8
 80160be:	b29e      	uxth	r6, r3
 80160c0:	43db      	mvns	r3, r3
 80160c2:	fb1b fb06 	smulbb	fp, fp, r6
 80160c6:	b2db      	uxtb	r3, r3
 80160c8:	fb01 b103 	mla	r1, r1, r3, fp
 80160cc:	b289      	uxth	r1, r1
 80160ce:	f101 0b01 	add.w	fp, r1, #1
 80160d2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80160d6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80160da:	fb1b fb03 	smulbb	fp, fp, r3
 80160de:	1209      	asrs	r1, r1, #8
 80160e0:	7001      	strb	r1, [r0, #0]
 80160e2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80160e6:	fb01 b106 	mla	r1, r1, r6, fp
 80160ea:	b289      	uxth	r1, r1
 80160ec:	f101 0b01 	add.w	fp, r1, #1
 80160f0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80160f4:	1209      	asrs	r1, r1, #8
 80160f6:	7041      	strb	r1, [r0, #1]
 80160f8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80160fc:	f890 c002 	ldrb.w	ip, [r0, #2]
 8016100:	fb1c f303 	smulbb	r3, ip, r3
 8016104:	fb01 3606 	mla	r6, r1, r6, r3
 8016108:	b2b6      	uxth	r6, r6
 801610a:	1c73      	adds	r3, r6, #1
 801610c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8016110:	1236      	asrs	r6, r6, #8
 8016112:	7086      	strb	r6, [r0, #2]
 8016114:	e7ca      	b.n	80160ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8016116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016118:	4428      	add	r0, r5
 801611a:	441f      	add	r7, r3
 801611c:	e7a8      	b.n	8016070 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801611e:	4b06      	ldr	r3, [pc, #24]	; (8016138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8016120:	6818      	ldr	r0, [r3, #0]
 8016122:	6803      	ldr	r3, [r0, #0]
 8016124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016126:	4798      	blx	r3
 8016128:	e782      	b.n	8016030 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801612a:	bf00      	nop
 801612c:	08020375 	.word	0x08020375
 8016130:	08020a03 	.word	0x08020a03
 8016134:	08020411 	.word	0x08020411
 8016138:	24006c6c 	.word	0x24006c6c
 801613c:	24006c66 	.word	0x24006c66

08016140 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8016140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016144:	f8b1 9000 	ldrh.w	r9, [r1]
 8016148:	b091      	sub	sp, #68	; 0x44
 801614a:	4604      	mov	r4, r0
 801614c:	460e      	mov	r6, r1
 801614e:	f1b9 0f01 	cmp.w	r9, #1
 8016152:	4690      	mov	r8, r2
 8016154:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016158:	d005      	beq.n	8016166 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801615a:	4b69      	ldr	r3, [pc, #420]	; (8016300 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801615c:	21ae      	movs	r1, #174	; 0xae
 801615e:	4a69      	ldr	r2, [pc, #420]	; (8016304 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8016160:	4869      	ldr	r0, [pc, #420]	; (8016308 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8016162:	f006 f8bb 	bl	801c2dc <__assert_func>
 8016166:	6810      	ldr	r0, [r2, #0]
 8016168:	ad0c      	add	r5, sp, #48	; 0x30
 801616a:	6851      	ldr	r1, [r2, #4]
 801616c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 801630c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8016170:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8016310 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8016174:	c503      	stmia	r5!, {r0, r1}
 8016176:	6818      	ldr	r0, [r3, #0]
 8016178:	ad0e      	add	r5, sp, #56	; 0x38
 801617a:	6859      	ldr	r1, [r3, #4]
 801617c:	c503      	stmia	r5!, {r0, r1}
 801617e:	a80c      	add	r0, sp, #48	; 0x30
 8016180:	f7fa f904 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016184:	4641      	mov	r1, r8
 8016186:	a80e      	add	r0, sp, #56	; 0x38
 8016188:	f7fa f944 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801618c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016190:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016194:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016198:	f8da 0000 	ldr.w	r0, [sl]
 801619c:	fb11 2103 	smlabb	r1, r1, r3, r2
 80161a0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80161a4:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80161a8:	440c      	add	r4, r1
 80161aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80161ae:	440a      	add	r2, r1
 80161b0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80161b4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80161b8:	4413      	add	r3, r2
 80161ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80161be:	6803      	ldr	r3, [r0, #0]
 80161c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c2:	4798      	blx	r3
 80161c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80161c8:	f8da 0000 	ldr.w	r0, [sl]
 80161cc:	d020      	beq.n	8016210 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 80161ce:	2200      	movs	r2, #0
 80161d0:	f04f 0c0b 	mov.w	ip, #11
 80161d4:	6801      	ldr	r1, [r0, #0]
 80161d6:	b2ad      	uxth	r5, r5
 80161d8:	f8cd c01c 	str.w	ip, [sp, #28]
 80161dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80161e0:	e9cd 9208 	strd	r9, r2, [sp, #32]
 80161e4:	f8bb c000 	ldrh.w	ip, [fp]
 80161e8:	9704      	str	r7, [sp, #16]
 80161ea:	9502      	str	r5, [sp, #8]
 80161ec:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80161f0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80161f4:	9203      	str	r2, [sp, #12]
 80161f6:	fa1f f288 	uxth.w	r2, r8
 80161fa:	9201      	str	r2, [sp, #4]
 80161fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016200:	9200      	str	r2, [sp, #0]
 8016202:	4632      	mov	r2, r6
 8016204:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8016206:	4621      	mov	r1, r4
 8016208:	47a8      	blx	r5
 801620a:	b011      	add	sp, #68	; 0x44
 801620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016210:	6803      	ldr	r3, [r0, #0]
 8016212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016214:	4798      	blx	r3
 8016216:	f8bb 2000 	ldrh.w	r2, [fp]
 801621a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801621e:	f04f 0e03 	mov.w	lr, #3
 8016222:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8016226:	4355      	muls	r5, r2
 8016228:	fa1f fc87 	uxth.w	ip, r7
 801622c:	fb02 1303 	mla	r3, r2, r3, r1
 8016230:	eba2 0208 	sub.w	r2, r2, r8
 8016234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801623c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016240:	4418      	add	r0, r3
 8016242:	920b      	str	r2, [sp, #44]	; 0x2c
 8016244:	1943      	adds	r3, r0, r5
 8016246:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801624a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801624e:	eba2 0208 	sub.w	r2, r2, r8
 8016252:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016256:	b2ad      	uxth	r5, r5
 8016258:	4298      	cmp	r0, r3
 801625a:	d24a      	bcs.n	80162f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801625c:	eb00 0908 	add.w	r9, r0, r8
 8016260:	4621      	mov	r1, r4
 8016262:	4548      	cmp	r0, r9
 8016264:	460c      	mov	r4, r1
 8016266:	d240      	bcs.n	80162ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8016268:	f04f 0a04 	mov.w	sl, #4
 801626c:	7824      	ldrb	r4, [r4, #0]
 801626e:	2fff      	cmp	r7, #255	; 0xff
 8016270:	f101 0101 	add.w	r1, r1, #1
 8016274:	fb1e a404 	smlabb	r4, lr, r4, sl
 8016278:	eb06 0a04 	add.w	sl, r6, r4
 801627c:	f816 b004 	ldrb.w	fp, [r6, r4]
 8016280:	d02b      	beq.n	80162da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8016282:	7804      	ldrb	r4, [r0, #0]
 8016284:	fb14 f405 	smulbb	r4, r4, r5
 8016288:	fb0b 440c 	mla	r4, fp, ip, r4
 801628c:	b2a4      	uxth	r4, r4
 801628e:	f104 0b01 	add.w	fp, r4, #1
 8016292:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016296:	f890 b001 	ldrb.w	fp, [r0, #1]
 801629a:	fb1b fb05 	smulbb	fp, fp, r5
 801629e:	1224      	asrs	r4, r4, #8
 80162a0:	7004      	strb	r4, [r0, #0]
 80162a2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80162a6:	fb04 b40c 	mla	r4, r4, ip, fp
 80162aa:	b2a4      	uxth	r4, r4
 80162ac:	f104 0b01 	add.w	fp, r4, #1
 80162b0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80162b4:	1224      	asrs	r4, r4, #8
 80162b6:	7044      	strb	r4, [r0, #1]
 80162b8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80162bc:	f890 a002 	ldrb.w	sl, [r0, #2]
 80162c0:	fb1a fa05 	smulbb	sl, sl, r5
 80162c4:	fb04 a40c 	mla	r4, r4, ip, sl
 80162c8:	b2a4      	uxth	r4, r4
 80162ca:	f104 0a01 	add.w	sl, r4, #1
 80162ce:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80162d2:	1224      	asrs	r4, r4, #8
 80162d4:	7084      	strb	r4, [r0, #2]
 80162d6:	3003      	adds	r0, #3
 80162d8:	e7c3      	b.n	8016262 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 80162da:	f880 b000 	strb.w	fp, [r0]
 80162de:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80162e2:	7044      	strb	r4, [r0, #1]
 80162e4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80162e8:	e7f4      	b.n	80162d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 80162ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80162ec:	4420      	add	r0, r4
 80162ee:	188c      	adds	r4, r1, r2
 80162f0:	e7b2      	b.n	8016258 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80162f2:	4b06      	ldr	r3, [pc, #24]	; (801630c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80162f4:	6818      	ldr	r0, [r3, #0]
 80162f6:	6803      	ldr	r3, [r0, #0]
 80162f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162fa:	4798      	blx	r3
 80162fc:	e785      	b.n	801620a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 80162fe:	bf00      	nop
 8016300:	080202f4 	.word	0x080202f4
 8016304:	080208f6 	.word	0x080208f6
 8016308:	08020411 	.word	0x08020411
 801630c:	24006c6c 	.word	0x24006c6c
 8016310:	24006c66 	.word	0x24006c66

08016314 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	780d      	ldrb	r5, [r1, #0]
 8016318:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801631c:	2d01      	cmp	r5, #1
 801631e:	d00d      	beq.n	801633c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8016320:	d307      	bcc.n	8016332 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8016322:	2d02      	cmp	r5, #2
 8016324:	d10f      	bne.n	8016346 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8016326:	4b08      	ldr	r3, [pc, #32]	; (8016348 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8016328:	2153      	movs	r1, #83	; 0x53
 801632a:	4a08      	ldr	r2, [pc, #32]	; (801634c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801632c:	4808      	ldr	r0, [pc, #32]	; (8016350 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801632e:	f005 ffd5 	bl	801c2dc <__assert_func>
 8016332:	9404      	str	r4, [sp, #16]
 8016334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016338:	f7ff be1a 	b.w	8015f70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801633c:	9404      	str	r4, [sp, #16]
 801633e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016342:	f7ff befd 	b.w	8016140 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8016346:	bd70      	pop	{r4, r5, r6, pc}
 8016348:	080202a9 	.word	0x080202a9
 801634c:	08020874 	.word	0x08020874
 8016350:	08020411 	.word	0x08020411

08016354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8016354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016358:	4605      	mov	r5, r0
 801635a:	b08f      	sub	sp, #60	; 0x3c
 801635c:	460c      	mov	r4, r1
 801635e:	461f      	mov	r7, r3
 8016360:	2b00      	cmp	r3, #0
 8016362:	d052      	beq.n	801640a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016364:	6808      	ldr	r0, [r1, #0]
 8016366:	ab0a      	add	r3, sp, #40	; 0x28
 8016368:	6849      	ldr	r1, [r1, #4]
 801636a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8016534 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801636e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8016538 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8016372:	c303      	stmia	r3!, {r0, r1}
 8016374:	6810      	ldr	r0, [r2, #0]
 8016376:	ab0c      	add	r3, sp, #48	; 0x30
 8016378:	6851      	ldr	r1, [r2, #4]
 801637a:	c303      	stmia	r3!, {r0, r1}
 801637c:	a80a      	add	r0, sp, #40	; 0x28
 801637e:	f7fa f805 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016382:	4621      	mov	r1, r4
 8016384:	a80c      	add	r0, sp, #48	; 0x30
 8016386:	f7fa f845 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801638a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801638e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016392:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016396:	f8d8 0000 	ldr.w	r0, [r8]
 801639a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801639e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80163a2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 80163a6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80163aa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80163ae:	440a      	add	r2, r1
 80163b0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80163b4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80163b8:	4413      	add	r3, r2
 80163ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80163be:	6803      	ldr	r3, [r0, #0]
 80163c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163c2:	4798      	blx	r3
 80163c4:	2fff      	cmp	r7, #255	; 0xff
 80163c6:	d023      	beq.n	8016410 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80163c8:	f010 0f04 	tst.w	r0, #4
 80163cc:	f8d8 0000 	ldr.w	r0, [r8]
 80163d0:	d021      	beq.n	8016416 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80163d2:	2100      	movs	r1, #0
 80163d4:	f04f 0e01 	mov.w	lr, #1
 80163d8:	f8d0 c000 	ldr.w	ip, [r0]
 80163dc:	b2a4      	uxth	r4, r4
 80163de:	9106      	str	r1, [sp, #24]
 80163e0:	b2b6      	uxth	r6, r6
 80163e2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80163e6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80163ea:	e9cd e107 	strd	lr, r1, [sp, #28]
 80163ee:	f8b9 e000 	ldrh.w	lr, [r9]
 80163f2:	9703      	str	r7, [sp, #12]
 80163f4:	9401      	str	r4, [sp, #4]
 80163f6:	9600      	str	r6, [sp, #0]
 80163f8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80163fc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016400:	9102      	str	r1, [sp, #8]
 8016402:	4629      	mov	r1, r5
 8016404:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8016408:	47a0      	blx	r4
 801640a:	b00f      	add	sp, #60	; 0x3c
 801640c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016410:	f010 0f01 	tst.w	r0, #1
 8016414:	e7da      	b.n	80163cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8016416:	6803      	ldr	r3, [r0, #0]
 8016418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801641a:	4798      	blx	r3
 801641c:	f8b9 1000 	ldrh.w	r1, [r9]
 8016420:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016424:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8016428:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801642c:	434c      	muls	r4, r1
 801642e:	2fff      	cmp	r7, #255	; 0xff
 8016430:	fb01 2303 	mla	r3, r1, r3, r2
 8016434:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016438:	eba1 0106 	sub.w	r1, r1, r6
 801643c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016440:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016444:	4418      	add	r0, r3
 8016446:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801644a:	eba3 0606 	sub.w	r6, r3, r6
 801644e:	4404      	add	r4, r0
 8016450:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8016454:	d04a      	beq.n	80164ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8016456:	43fa      	mvns	r2, r7
 8016458:	b2bb      	uxth	r3, r7
 801645a:	b2d7      	uxtb	r7, r2
 801645c:	42a0      	cmp	r0, r4
 801645e:	d263      	bcs.n	8016528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016460:	eb00 0e0c 	add.w	lr, r0, ip
 8016464:	4586      	cmp	lr, r0
 8016466:	f100 0803 	add.w	r8, r0, #3
 801646a:	d93a      	bls.n	80164e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801646c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8016470:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8016474:	00d0      	lsls	r0, r2, #3
 8016476:	fb19 f907 	smulbb	r9, r9, r7
 801647a:	b2c0      	uxtb	r0, r0
 801647c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8016480:	fb00 9003 	mla	r0, r0, r3, r9
 8016484:	b280      	uxth	r0, r0
 8016486:	f100 0901 	add.w	r9, r0, #1
 801648a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801648e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8016492:	fb19 f907 	smulbb	r9, r9, r7
 8016496:	1200      	asrs	r0, r0, #8
 8016498:	f808 0c03 	strb.w	r0, [r8, #-3]
 801649c:	10d0      	asrs	r0, r2, #3
 801649e:	1212      	asrs	r2, r2, #8
 80164a0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80164a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80164a8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80164ac:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80164b0:	fb00 9003 	mla	r0, r0, r3, r9
 80164b4:	b280      	uxth	r0, r0
 80164b6:	f100 0901 	add.w	r9, r0, #1
 80164ba:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80164be:	1200      	asrs	r0, r0, #8
 80164c0:	f808 0c02 	strb.w	r0, [r8, #-2]
 80164c4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80164c8:	fb10 f007 	smulbb	r0, r0, r7
 80164cc:	fb02 0203 	mla	r2, r2, r3, r0
 80164d0:	b292      	uxth	r2, r2
 80164d2:	1c50      	adds	r0, r2, #1
 80164d4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80164d8:	4640      	mov	r0, r8
 80164da:	1212      	asrs	r2, r2, #8
 80164dc:	f808 2c01 	strb.w	r2, [r8, #-1]
 80164e0:	e7c0      	b.n	8016464 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80164e2:	4408      	add	r0, r1
 80164e4:	4435      	add	r5, r6
 80164e6:	e7b9      	b.n	801645c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80164e8:	4408      	add	r0, r1
 80164ea:	4435      	add	r5, r6
 80164ec:	42a0      	cmp	r0, r4
 80164ee:	d21b      	bcs.n	8016528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80164f0:	eb00 070c 	add.w	r7, r0, ip
 80164f4:	42b8      	cmp	r0, r7
 80164f6:	d2f7      	bcs.n	80164e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80164f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80164fc:	3003      	adds	r0, #3
 80164fe:	00da      	lsls	r2, r3, #3
 8016500:	b2d2      	uxtb	r2, r2
 8016502:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016506:	f800 2c03 	strb.w	r2, [r0, #-3]
 801650a:	10da      	asrs	r2, r3, #3
 801650c:	121b      	asrs	r3, r3, #8
 801650e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016512:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016516:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801651a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801651e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8016522:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016526:	e7e5      	b.n	80164f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8016528:	4b02      	ldr	r3, [pc, #8]	; (8016534 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801652a:	6818      	ldr	r0, [r3, #0]
 801652c:	6803      	ldr	r3, [r0, #0]
 801652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016530:	4798      	blx	r3
 8016532:	e76a      	b.n	801640a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016534:	24006c6c 	.word	0x24006c6c
 8016538:	24006c66 	.word	0x24006c66

0801653c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016540:	b08a      	sub	sp, #40	; 0x28
 8016542:	460d      	mov	r5, r1
 8016544:	4604      	mov	r4, r0
 8016546:	461e      	mov	r6, r3
 8016548:	6808      	ldr	r0, [r1, #0]
 801654a:	ab06      	add	r3, sp, #24
 801654c:	6849      	ldr	r1, [r1, #4]
 801654e:	4f5d      	ldr	r7, [pc, #372]	; (80166c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8016550:	c303      	stmia	r3!, {r0, r1}
 8016552:	6810      	ldr	r0, [r2, #0]
 8016554:	ab08      	add	r3, sp, #32
 8016556:	6851      	ldr	r1, [r2, #4]
 8016558:	c303      	stmia	r3!, {r0, r1}
 801655a:	a806      	add	r0, sp, #24
 801655c:	f7f9 ff16 	bl	801038c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016560:	4629      	mov	r1, r5
 8016562:	a808      	add	r0, sp, #32
 8016564:	f7f9 ff56 	bl	8010414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016568:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801656c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016570:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016574:	6838      	ldr	r0, [r7, #0]
 8016576:	fb11 2103 	smlabb	r1, r1, r3, r2
 801657a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801657e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8016582:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016586:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801658a:	440a      	add	r2, r1
 801658c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016590:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016594:	4413      	add	r3, r2
 8016596:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801659a:	6803      	ldr	r3, [r0, #0]
 801659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801659e:	4798      	blx	r3
 80165a0:	2eff      	cmp	r6, #255	; 0xff
 80165a2:	d119      	bne.n	80165d8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80165a4:	f010 0f20 	tst.w	r0, #32
 80165a8:	6838      	ldr	r0, [r7, #0]
 80165aa:	d018      	beq.n	80165de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80165ac:	b2ad      	uxth	r5, r5
 80165ae:	2700      	movs	r7, #0
 80165b0:	6801      	ldr	r1, [r0, #0]
 80165b2:	9501      	str	r5, [sp, #4]
 80165b4:	fa1f f588 	uxth.w	r5, r8
 80165b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80165bc:	9500      	str	r5, [sp, #0]
 80165be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80165c2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80165c6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80165ca:	9602      	str	r6, [sp, #8]
 80165cc:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80165ce:	4621      	mov	r1, r4
 80165d0:	47a8      	blx	r5
 80165d2:	b00a      	add	sp, #40	; 0x28
 80165d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80165dc:	e7e4      	b.n	80165a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80165de:	6803      	ldr	r3, [r0, #0]
 80165e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165e2:	4798      	blx	r3
 80165e4:	4b38      	ldr	r3, [pc, #224]	; (80166c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80165e6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80165ea:	f8b3 c000 	ldrh.w	ip, [r3]
 80165ee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80165f2:	fb0c f505 	mul.w	r5, ip, r5
 80165f6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80165fa:	fb0c 2303 	mla	r3, ip, r3, r2
 80165fe:	ebac 0c08 	sub.w	ip, ip, r8
 8016602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016606:	ebae 0e08 	sub.w	lr, lr, r8
 801660a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801660e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016612:	4418      	add	r0, r3
 8016614:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016618:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801661c:	4405      	add	r5, r0
 801661e:	42a8      	cmp	r0, r5
 8016620:	d24a      	bcs.n	80166b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016622:	eb00 0803 	add.w	r8, r0, r3
 8016626:	4540      	cmp	r0, r8
 8016628:	d243      	bcs.n	80166b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801662a:	78e2      	ldrb	r2, [r4, #3]
 801662c:	b15a      	cbz	r2, 8016646 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801662e:	2aff      	cmp	r2, #255	; 0xff
 8016630:	f894 9000 	ldrb.w	r9, [r4]
 8016634:	d10a      	bne.n	801664c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016636:	2eff      	cmp	r6, #255	; 0xff
 8016638:	d108      	bne.n	801664c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801663a:	f880 9000 	strb.w	r9, [r0]
 801663e:	7862      	ldrb	r2, [r4, #1]
 8016640:	7042      	strb	r2, [r0, #1]
 8016642:	78a2      	ldrb	r2, [r4, #2]
 8016644:	7082      	strb	r2, [r0, #2]
 8016646:	3003      	adds	r0, #3
 8016648:	3404      	adds	r4, #4
 801664a:	e7ec      	b.n	8016626 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801664c:	4372      	muls	r2, r6
 801664e:	1c51      	adds	r1, r2, #1
 8016650:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016654:	1209      	asrs	r1, r1, #8
 8016656:	fa1f fa81 	uxth.w	sl, r1
 801665a:	43c9      	mvns	r1, r1
 801665c:	fb19 f90a 	smulbb	r9, r9, sl
 8016660:	b2ca      	uxtb	r2, r1
 8016662:	7801      	ldrb	r1, [r0, #0]
 8016664:	fb01 9902 	mla	r9, r1, r2, r9
 8016668:	fa1f f989 	uxth.w	r9, r9
 801666c:	f109 0101 	add.w	r1, r9, #1
 8016670:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016674:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016678:	f880 9000 	strb.w	r9, [r0]
 801667c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8016680:	7861      	ldrb	r1, [r4, #1]
 8016682:	fb19 f902 	smulbb	r9, r9, r2
 8016686:	fb01 910a 	mla	r1, r1, sl, r9
 801668a:	b289      	uxth	r1, r1
 801668c:	f101 0901 	add.w	r9, r1, #1
 8016690:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8016694:	1209      	asrs	r1, r1, #8
 8016696:	7041      	strb	r1, [r0, #1]
 8016698:	7881      	ldrb	r1, [r0, #2]
 801669a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801669e:	fb11 f202 	smulbb	r2, r1, r2
 80166a2:	fb09 220a 	mla	r2, r9, sl, r2
 80166a6:	b292      	uxth	r2, r2
 80166a8:	1c51      	adds	r1, r2, #1
 80166aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80166ae:	1212      	asrs	r2, r2, #8
 80166b0:	e7c8      	b.n	8016644 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80166b2:	4460      	add	r0, ip
 80166b4:	4474      	add	r4, lr
 80166b6:	e7b2      	b.n	801661e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80166b8:	6838      	ldr	r0, [r7, #0]
 80166ba:	6803      	ldr	r3, [r0, #0]
 80166bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166be:	4798      	blx	r3
 80166c0:	e787      	b.n	80165d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80166c2:	bf00      	nop
 80166c4:	24006c6c 	.word	0x24006c6c
 80166c8:	24006c66 	.word	0x24006c66

080166cc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80166cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166d0:	b085      	sub	sp, #20
 80166d2:	4606      	mov	r6, r0
 80166d4:	460c      	mov	r4, r1
 80166d6:	4691      	mov	r9, r2
 80166d8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80166dc:	4698      	mov	r8, r3
 80166de:	b31d      	cbz	r5, 8016728 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80166e0:	4608      	mov	r0, r1
 80166e2:	f7fd f9e9 	bl	8013ab8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80166e6:	4607      	mov	r7, r0
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7fd fa1f 	bl	8013b2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80166ee:	f8ad 000e 	strh.w	r0, [sp, #14]
 80166f2:	4620      	mov	r0, r4
 80166f4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80166f8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80166fc:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016700:	f7fd fb6c 	bl	8013ddc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016704:	280b      	cmp	r0, #11
 8016706:	d838      	bhi.n	801677a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8016708:	e8df f000 	tbb	[pc, r0]
 801670c:	37062920 	.word	0x37062920
 8016710:	37373737 	.word	0x37373737
 8016714:	11373737 	.word	0x11373737
 8016718:	4620      	mov	r0, r4
 801671a:	f7fd fad5 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801671e:	462b      	mov	r3, r5
 8016720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016722:	a902      	add	r1, sp, #8
 8016724:	f7ff ff0a 	bl	801653c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016728:	b005      	add	sp, #20
 801672a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801672e:	4620      	mov	r0, r4
 8016730:	f7fd faca 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016734:	4606      	mov	r6, r0
 8016736:	4620      	mov	r0, r4
 8016738:	f7fd faf8 	bl	8013d2c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801673c:	9500      	str	r5, [sp, #0]
 801673e:	4601      	mov	r1, r0
 8016740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016742:	aa02      	add	r2, sp, #8
 8016744:	4630      	mov	r0, r6
 8016746:	f7ff fde5 	bl	8016314 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801674a:	e7ed      	b.n	8016728 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801674c:	4620      	mov	r0, r4
 801674e:	f7fd fabb 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016752:	462b      	mov	r3, r5
 8016754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016756:	a902      	add	r1, sp, #8
 8016758:	f7ff fdfc 	bl	8016354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801675c:	e7e4      	b.n	8016728 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801675e:	6833      	ldr	r3, [r6, #0]
 8016760:	4620      	mov	r0, r4
 8016762:	68df      	ldr	r7, [r3, #12]
 8016764:	f7fd fab0 	bl	8013cc8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016768:	2300      	movs	r3, #0
 801676a:	4601      	mov	r1, r0
 801676c:	aa02      	add	r2, sp, #8
 801676e:	4630      	mov	r0, r6
 8016770:	e9cd 5300 	strd	r5, r3, [sp]
 8016774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016776:	47b8      	blx	r7
 8016778:	e7d6      	b.n	8016728 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801677a:	4b03      	ldr	r3, [pc, #12]	; (8016788 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801677c:	2147      	movs	r1, #71	; 0x47
 801677e:	4a03      	ldr	r2, [pc, #12]	; (801678c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8016780:	4803      	ldr	r0, [pc, #12]	; (8016790 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8016782:	f005 fdab 	bl	801c2dc <__assert_func>
 8016786:	bf00      	nop
 8016788:	08020342 	.word	0x08020342
 801678c:	0802097f 	.word	0x0802097f
 8016790:	08020411 	.word	0x08020411

08016794 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016794:	b570      	push	{r4, r5, r6, lr}
 8016796:	9c04      	ldr	r4, [sp, #16]
 8016798:	4605      	mov	r5, r0
 801679a:	4608      	mov	r0, r1
 801679c:	4619      	mov	r1, r3
 801679e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80167a2:	2a0d      	cmp	r2, #13
 80167a4:	d826      	bhi.n	80167f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 80167a6:	e8df f002 	tbb	[pc, r2]
 80167aa:	1107      	.short	0x1107
 80167ac:	1e1e1e0c 	.word	0x1e1e1e0c
 80167b0:	1e1e1e1e 	.word	0x1e1e1e1e
 80167b4:	1e1e1e1e 	.word	0x1e1e1e1e
 80167b8:	4622      	mov	r2, r4
 80167ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167be:	f7ff bdc9 	b.w	8016354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80167c2:	4622      	mov	r2, r4
 80167c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167c8:	f7ff beb8 	b.w	801653c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80167cc:	682a      	ldr	r2, [r5, #0]
 80167ce:	2600      	movs	r6, #0
 80167d0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80167d4:	68d6      	ldr	r6, [r2, #12]
 80167d6:	4623      	mov	r3, r4
 80167d8:	460a      	mov	r2, r1
 80167da:	4601      	mov	r1, r0
 80167dc:	46b4      	mov	ip, r6
 80167de:	4628      	mov	r0, r5
 80167e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167e4:	4760      	bx	ip
 80167e6:	4b04      	ldr	r3, [pc, #16]	; (80167f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80167e8:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80167ec:	4a03      	ldr	r2, [pc, #12]	; (80167fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80167ee:	4804      	ldr	r0, [pc, #16]	; (8016800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80167f0:	f005 fd74 	bl	801c2dc <__assert_func>
 80167f4:	bd70      	pop	{r4, r5, r6, pc}
 80167f6:	bf00      	nop
 80167f8:	080205e8 	.word	0x080205e8
 80167fc:	08020c67 	.word	0x08020c67
 8016800:	08020411 	.word	0x08020411

08016804 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016804:	b158      	cbz	r0, 801681e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8016806:	2902      	cmp	r1, #2
 8016808:	d00f      	beq.n	801682a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801680a:	2903      	cmp	r1, #3
 801680c:	d010      	beq.n	8016830 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801680e:	2901      	cmp	r1, #1
 8016810:	d101      	bne.n	8016816 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016812:	2001      	movs	r0, #1
 8016814:	4770      	bx	lr
 8016816:	4b08      	ldr	r3, [pc, #32]	; (8016838 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8016818:	8819      	ldrh	r1, [r3, #0]
 801681a:	4248      	negs	r0, r1
 801681c:	4770      	bx	lr
 801681e:	2902      	cmp	r1, #2
 8016820:	d006      	beq.n	8016830 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8016822:	2903      	cmp	r1, #3
 8016824:	d0f7      	beq.n	8016816 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016826:	2901      	cmp	r1, #1
 8016828:	d1f3      	bne.n	8016812 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801682a:	4b03      	ldr	r3, [pc, #12]	; (8016838 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801682c:	8818      	ldrh	r0, [r3, #0]
 801682e:	4770      	bx	lr
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	4770      	bx	lr
 8016836:	bf00      	nop
 8016838:	24006c66 	.word	0x24006c66

0801683c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801683c:	b170      	cbz	r0, 801685c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801683e:	2902      	cmp	r1, #2
 8016840:	d012      	beq.n	8016868 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8016842:	2903      	cmp	r1, #3
 8016844:	d006      	beq.n	8016854 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016846:	2901      	cmp	r1, #1
 8016848:	d001      	beq.n	801684e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801684a:	2001      	movs	r0, #1
 801684c:	4770      	bx	lr
 801684e:	4b08      	ldr	r3, [pc, #32]	; (8016870 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016850:	8818      	ldrh	r0, [r3, #0]
 8016852:	4770      	bx	lr
 8016854:	4b06      	ldr	r3, [pc, #24]	; (8016870 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8016856:	8818      	ldrh	r0, [r3, #0]
 8016858:	4240      	negs	r0, r0
 801685a:	4770      	bx	lr
 801685c:	2902      	cmp	r1, #2
 801685e:	d0f9      	beq.n	8016854 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8016860:	2903      	cmp	r1, #3
 8016862:	d0f2      	beq.n	801684a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8016864:	2901      	cmp	r1, #1
 8016866:	d1f2      	bne.n	801684e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8016868:	f04f 30ff 	mov.w	r0, #4294967295
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop
 8016870:	24006c66 	.word	0x24006c66

08016874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016878:	b097      	sub	sp, #92	; 0x5c
 801687a:	910b      	str	r1, [sp, #44]	; 0x2c
 801687c:	a912      	add	r1, sp, #72	; 0x48
 801687e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8016882:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8016886:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801688a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801688e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8016892:	e881 000c 	stmia.w	r1, {r2, r3}
 8016896:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801689a:	930a      	str	r3, [sp, #40]	; 0x28
 801689c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80168a0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80168a4:	9311      	str	r3, [sp, #68]	; 0x44
 80168a6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80168aa:	798d      	ldrb	r5, [r1, #6]
 80168ac:	930c      	str	r3, [sp, #48]	; 0x30
 80168ae:	7b4b      	ldrb	r3, [r1, #13]
 80168b0:	0158      	lsls	r0, r3, #5
 80168b2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80168b6:	4328      	orrs	r0, r5
 80168b8:	9009      	str	r0, [sp, #36]	; 0x24
 80168ba:	f000 817d 	beq.w	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80168be:	011b      	lsls	r3, r3, #4
 80168c0:	79c8      	ldrb	r0, [r1, #7]
 80168c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168c6:	4303      	orrs	r3, r0
 80168c8:	930e      	str	r3, [sp, #56]	; 0x38
 80168ca:	f000 8175 	beq.w	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80168ce:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	2f00      	cmp	r7, #0
 80168d6:	f000 8117 	beq.w	8016b08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 80168da:	1aff      	subs	r7, r7, r3
 80168dc:	b2bf      	uxth	r7, r7
 80168de:	043b      	lsls	r3, r7, #16
 80168e0:	d502      	bpl.n	80168e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80168e2:	1bf6      	subs	r6, r6, r7
 80168e4:	2700      	movs	r7, #0
 80168e6:	b236      	sxth	r6, r6
 80168e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80168ec:	a812      	add	r0, sp, #72	; 0x48
 80168ee:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80168f2:	428e      	cmp	r6, r1
 80168f4:	b28b      	uxth	r3, r1
 80168f6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80168fa:	bfbf      	itttt	lt
 80168fc:	18ff      	addlt	r7, r7, r3
 80168fe:	1bbe      	sublt	r6, r7, r6
 8016900:	b2b7      	uxthlt	r7, r6
 8016902:	460e      	movlt	r6, r1
 8016904:	8891      	ldrh	r1, [r2, #4]
 8016906:	440b      	add	r3, r1
 8016908:	4631      	mov	r1, r6
 801690a:	b21b      	sxth	r3, r3
 801690c:	9310      	str	r3, [sp, #64]	; 0x40
 801690e:	88d3      	ldrh	r3, [r2, #6]
 8016910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016912:	449a      	add	sl, r3
 8016914:	fa0f f38a 	sxth.w	r3, sl
 8016918:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801691c:	930f      	str	r3, [sp, #60]	; 0x3c
 801691e:	4bb6      	ldr	r3, [pc, #728]	; (8016bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016920:	f893 b000 	ldrb.w	fp, [r3]
 8016924:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016928:	f1dc 0300 	rsbs	r3, ip, #0
 801692c:	eb43 030c 	adc.w	r3, r3, ip
 8016930:	930d      	str	r3, [sp, #52]	; 0x34
 8016932:	464b      	mov	r3, r9
 8016934:	f7f9 fbae 	bl	8010094 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016938:	4631      	mov	r1, r6
 801693a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801693e:	464b      	mov	r3, r9
 8016940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016942:	a812      	add	r0, sp, #72	; 0x48
 8016944:	f7f9 fbbe 	bl	80100c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016948:	a916      	add	r1, sp, #88	; 0x58
 801694a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801694e:	a815      	add	r0, sp, #84	; 0x54
 8016950:	f7f9 fcda 	bl	8010308 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016954:	f1b9 0f00 	cmp.w	r9, #0
 8016958:	f040 80d9 	bne.w	8016b0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801695c:	f1bb 0f01 	cmp.w	fp, #1
 8016960:	f040 80dd 	bne.w	8016b1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8016964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016966:	b153      	cbz	r3, 801697e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016968:	2508      	movs	r5, #8
 801696a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801696c:	fb95 f3f8 	sdiv	r3, r5, r8
 8016970:	1e5d      	subs	r5, r3, #1
 8016972:	4415      	add	r5, r2
 8016974:	fb95 f5f3 	sdiv	r5, r5, r3
 8016978:	fb15 f503 	smulbb	r5, r5, r3
 801697c:	b2ad      	uxth	r5, r5
 801697e:	b907      	cbnz	r7, 8016982 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8016980:	b16c      	cbz	r4, 801699e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8016982:	fb04 7305 	mla	r3, r4, r5, r7
 8016986:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016988:	ebaa 0a04 	sub.w	sl, sl, r4
 801698c:	fb08 f303 	mul.w	r3, r8, r3
 8016990:	fa1f fa8a 	uxth.w	sl, sl
 8016994:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016998:	f003 0407 	and.w	r4, r3, #7
 801699c:	9226      	str	r2, [sp, #152]	; 0x98
 801699e:	4649      	mov	r1, r9
 80169a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80169a2:	f7ff ff2f 	bl	8016804 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80169a6:	4649      	mov	r1, r9
 80169a8:	4683      	mov	fp, r0
 80169aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80169ac:	f7ff ff46 	bl	801683c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80169b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169b4:	4681      	mov	r9, r0
 80169b6:	1a9b      	subs	r3, r3, r2
 80169b8:	459a      	cmp	sl, r3
 80169ba:	bfa8      	it	ge
 80169bc:	469a      	movge	sl, r3
 80169be:	f1ba 0f00 	cmp.w	sl, #0
 80169c2:	f340 80f9 	ble.w	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80169c6:	1bf6      	subs	r6, r6, r7
 80169c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169ca:	1b9e      	subs	r6, r3, r6
 80169cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ce:	429e      	cmp	r6, r3
 80169d0:	bfd4      	ite	le
 80169d2:	ebc7 0706 	rsble	r7, r7, r6
 80169d6:	ebc7 0703 	rsbgt	r7, r7, r3
 80169da:	2f00      	cmp	r7, #0
 80169dc:	f340 80ec 	ble.w	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80169e0:	1bed      	subs	r5, r5, r7
 80169e2:	fb08 f305 	mul.w	r3, r8, r5
 80169e6:	930d      	str	r3, [sp, #52]	; 0x34
 80169e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169ea:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80169ee:	930e      	str	r3, [sp, #56]	; 0x38
 80169f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80169f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80169f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	9310      	str	r3, [sp, #64]	; 0x40
 80169fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	f040 80de 	bne.w	8016bc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8016a06:	4b7d      	ldr	r3, [pc, #500]	; (8016bfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8016a08:	6818      	ldr	r0, [r3, #0]
 8016a0a:	6803      	ldr	r3, [r0, #0]
 8016a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a0e:	4798      	blx	r3
 8016a10:	2301      	movs	r3, #1
 8016a12:	4a7b      	ldr	r2, [pc, #492]	; (8016c00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8016a14:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016a18:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016a1c:	fa03 f308 	lsl.w	r3, r3, r8
 8016a20:	8811      	ldrh	r1, [r2, #0]
 8016a22:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016a26:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016a2a:	3b01      	subs	r3, #1
 8016a2c:	fb06 bb07 	mla	fp, r6, r7, fp
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	930a      	str	r3, [sp, #40]	; 0x28
 8016a34:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016a38:	fb01 2303 	mla	r3, r1, r3, r2
 8016a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a40:	18c3      	adds	r3, r0, r3
 8016a42:	9309      	str	r3, [sp, #36]	; 0x24
 8016a44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016a46:	781a      	ldrb	r2, [r3, #0]
 8016a48:	4122      	asrs	r2, r4
 8016a4a:	b2d2      	uxtb	r2, r2
 8016a4c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016a50:	f0c0 80d8 	bcc.w	8016c04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8016a54:	46be      	mov	lr, r7
 8016a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a58:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016a5c:	f0c0 80ba 	bcc.w	8016bd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8016a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a62:	4013      	ands	r3, r2
 8016a64:	d041      	beq.n	8016aea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016a66:	20ff      	movs	r0, #255	; 0xff
 8016a68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016a6a:	fb90 f5f5 	sdiv	r5, r0, r5
 8016a6e:	436b      	muls	r3, r5
 8016a70:	2bfe      	cmp	r3, #254	; 0xfe
 8016a72:	dd03      	ble.n	8016a7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8016a74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a76:	4285      	cmp	r5, r0
 8016a78:	f000 80a5 	beq.w	8016bc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8016a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016a80:	fb15 f303 	smulbb	r3, r5, r3
 8016a84:	b29b      	uxth	r3, r3
 8016a86:	1c5d      	adds	r5, r3, #1
 8016a88:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016a8c:	780d      	ldrb	r5, [r1, #0]
 8016a8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016a92:	fa1f fc83 	uxth.w	ip, r3
 8016a96:	43db      	mvns	r3, r3
 8016a98:	fb10 f90c 	smulbb	r9, r0, ip
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016aa0:	fb05 9503 	mla	r5, r5, r3, r9
 8016aa4:	b2ad      	uxth	r5, r5
 8016aa6:	f105 0901 	add.w	r9, r5, #1
 8016aaa:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016aae:	fb10 f90c 	smulbb	r9, r0, ip
 8016ab2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016ab4:	122d      	asrs	r5, r5, #8
 8016ab6:	fb10 fc0c 	smulbb	ip, r0, ip
 8016aba:	700d      	strb	r5, [r1, #0]
 8016abc:	784d      	ldrb	r5, [r1, #1]
 8016abe:	fb05 9503 	mla	r5, r5, r3, r9
 8016ac2:	b2ad      	uxth	r5, r5
 8016ac4:	f105 0901 	add.w	r9, r5, #1
 8016ac8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016acc:	122d      	asrs	r5, r5, #8
 8016ace:	704d      	strb	r5, [r1, #1]
 8016ad0:	788d      	ldrb	r5, [r1, #2]
 8016ad2:	fb05 cc03 	mla	ip, r5, r3, ip
 8016ad6:	fa1f fc8c 	uxth.w	ip, ip
 8016ada:	f10c 0301 	add.w	r3, ip, #1
 8016ade:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016ae2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016ae6:	f881 c002 	strb.w	ip, [r1, #2]
 8016aea:	4444      	add	r4, r8
 8016aec:	4431      	add	r1, r6
 8016aee:	b2a4      	uxth	r4, r4
 8016af0:	2c07      	cmp	r4, #7
 8016af2:	bf89      	itett	hi
 8016af4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8016af6:	fa42 f208 	asrls.w	r2, r2, r8
 8016afa:	2400      	movhi	r4, #0
 8016afc:	785a      	ldrbhi	r2, [r3, #1]
 8016afe:	bf8a      	itet	hi
 8016b00:	3301      	addhi	r3, #1
 8016b02:	b2d2      	uxtbls	r2, r2
 8016b04:	9326      	strhi	r3, [sp, #152]	; 0x98
 8016b06:	e7a7      	b.n	8016a58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8016b08:	441e      	add	r6, r3
 8016b0a:	b236      	sxth	r6, r6
 8016b0c:	e6ec      	b.n	80168e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016b0e:	f1b9 0f01 	cmp.w	r9, #1
 8016b12:	f47f af27 	bne.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b16:	f1bb 0f01 	cmp.w	fp, #1
 8016b1a:	f47f af23 	bne.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b1e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8016bfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8016b22:	f8db 0000 	ldr.w	r0, [fp]
 8016b26:	6803      	ldr	r3, [r0, #0]
 8016b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b2a:	4798      	blx	r3
 8016b2c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8016b30:	465a      	mov	r2, fp
 8016b32:	d006      	beq.n	8016b42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016b34:	f1b8 0f04 	cmp.w	r8, #4
 8016b38:	d141      	bne.n	8016bbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8016b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b3c:	3300      	adds	r3, #0
 8016b3e:	bf18      	it	ne
 8016b40:	2301      	movne	r3, #1
 8016b42:	0580      	lsls	r0, r0, #22
 8016b44:	d567      	bpl.n	8016c16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016b46:	f1b8 0f08 	cmp.w	r8, #8
 8016b4a:	d164      	bne.n	8016c16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	bf0c      	ite	eq
 8016b50:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8016b54:	f44f 7180 	movne.w	r1, #256	; 0x100
 8016b58:	2f00      	cmp	r7, #0
 8016b5a:	f47f af03 	bne.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b5e:	2c00      	cmp	r4, #0
 8016b60:	f47f af00 	bne.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b66:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b68:	18f3      	adds	r3, r6, r3
 8016b6a:	4283      	cmp	r3, r0
 8016b6c:	f73f aefa 	bgt.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b74:	4403      	add	r3, r0
 8016b76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016b78:	4283      	cmp	r3, r0
 8016b7a:	f73f aef3 	bgt.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016b7e:	f1b8 0f08 	cmp.w	r8, #8
 8016b82:	6810      	ldr	r0, [r2, #0]
 8016b84:	f04f 0600 	mov.w	r6, #0
 8016b88:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016b8c:	bf18      	it	ne
 8016b8e:	3501      	addne	r5, #1
 8016b90:	6804      	ldr	r4, [r0, #0]
 8016b92:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016b96:	bf18      	it	ne
 8016b98:	f025 0501 	bicne.w	r5, r5, #1
 8016b9c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8016ba0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016ba2:	bf18      	it	ne
 8016ba4:	b2ad      	uxthne	r5, r5
 8016ba6:	9104      	str	r1, [sp, #16]
 8016ba8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016baa:	e9cd 5a00 	strd	r5, sl, [sp]
 8016bae:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8016bb2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016bb4:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8016bb6:	47a0      	blx	r4
 8016bb8:	b017      	add	sp, #92	; 0x5c
 8016bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	e7bf      	b.n	8016b42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8016bc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016bc4:	e724      	b.n	8016a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8016bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bc8:	700b      	strb	r3, [r1, #0]
 8016bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bcc:	704b      	strb	r3, [r1, #1]
 8016bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd0:	708b      	strb	r3, [r1, #2]
 8016bd2:	e78a      	b.n	8016aea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8016bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bd6:	b153      	cbz	r3, 8016bee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8016bd8:	441c      	add	r4, r3
 8016bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bdc:	b2a4      	uxth	r4, r4
 8016bde:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8016be2:	f004 0407 	and.w	r4, r4, #7
 8016be6:	781a      	ldrb	r2, [r3, #0]
 8016be8:	9326      	str	r3, [sp, #152]	; 0x98
 8016bea:	4122      	asrs	r2, r4
 8016bec:	b2d2      	uxtb	r2, r2
 8016bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bf0:	445b      	add	r3, fp
 8016bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8016bf4:	e72a      	b.n	8016a4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8016bf6:	bf00      	nop
 8016bf8:	24006c64 	.word	0x24006c64
 8016bfc:	24006c6c 	.word	0x24006c6c
 8016c00:	24006c66 	.word	0x24006c66
 8016c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d1d6      	bne.n	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016c0a:	4b06      	ldr	r3, [pc, #24]	; (8016c24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8016c0c:	6818      	ldr	r0, [r3, #0]
 8016c0e:	6803      	ldr	r3, [r0, #0]
 8016c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c12:	4798      	blx	r3
 8016c14:	e7d0      	b.n	8016bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	f43f aea4 	beq.w	8016964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016c20:	e79a      	b.n	8016b58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8016c22:	bf00      	nop
 8016c24:	24006c6c 	.word	0x24006c6c

08016c28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016c28:	b538      	push	{r3, r4, r5, lr}
 8016c2a:	4c15      	ldr	r4, [pc, #84]	; (8016c80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	7823      	ldrb	r3, [r4, #0]
 8016c30:	f3bf 8f5b 	dmb	ish
 8016c34:	07da      	lsls	r2, r3, #31
 8016c36:	d40b      	bmi.n	8016c50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f005 fa3b 	bl	801c0b4 <__cxa_guard_acquire>
 8016c3e:	b138      	cbz	r0, 8016c50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016c40:	4620      	mov	r0, r4
 8016c42:	f005 fa43 	bl	801c0cc <__cxa_guard_release>
 8016c46:	4a0f      	ldr	r2, [pc, #60]	; (8016c84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016c48:	490f      	ldr	r1, [pc, #60]	; (8016c88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016c4a:	4810      	ldr	r0, [pc, #64]	; (8016c8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016c4c:	f005 fa2b 	bl	801c0a6 <__aeabi_atexit>
 8016c50:	4c0f      	ldr	r4, [pc, #60]	; (8016c90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016c52:	7823      	ldrb	r3, [r4, #0]
 8016c54:	f3bf 8f5b 	dmb	ish
 8016c58:	07db      	lsls	r3, r3, #31
 8016c5a:	d40b      	bmi.n	8016c74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f005 fa29 	bl	801c0b4 <__cxa_guard_acquire>
 8016c62:	b138      	cbz	r0, 8016c74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016c64:	4620      	mov	r0, r4
 8016c66:	f005 fa31 	bl	801c0cc <__cxa_guard_release>
 8016c6a:	4a06      	ldr	r2, [pc, #24]	; (8016c84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016c6c:	4909      	ldr	r1, [pc, #36]	; (8016c94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016c6e:	480a      	ldr	r0, [pc, #40]	; (8016c98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016c70:	f005 fa19 	bl	801c0a6 <__aeabi_atexit>
 8016c74:	4b05      	ldr	r3, [pc, #20]	; (8016c8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016c76:	612b      	str	r3, [r5, #16]
 8016c78:	4b07      	ldr	r3, [pc, #28]	; (8016c98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016c7a:	616b      	str	r3, [r5, #20]
 8016c7c:	bd38      	pop	{r3, r4, r5, pc}
 8016c7e:	bf00      	nop
 8016c80:	24006d38 	.word	0x24006d38
 8016c84:	24000000 	.word	0x24000000
 8016c88:	080156a1 	.word	0x080156a1
 8016c8c:	240000cc 	.word	0x240000cc
 8016c90:	24006d3c 	.word	0x24006d3c
 8016c94:	0801569f 	.word	0x0801569f
 8016c98:	240000d0 	.word	0x240000d0

08016c9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016c9c:	b538      	push	{r3, r4, r5, lr}
 8016c9e:	4c15      	ldr	r4, [pc, #84]	; (8016cf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016ca0:	4605      	mov	r5, r0
 8016ca2:	7823      	ldrb	r3, [r4, #0]
 8016ca4:	f3bf 8f5b 	dmb	ish
 8016ca8:	07da      	lsls	r2, r3, #31
 8016caa:	d40b      	bmi.n	8016cc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016cac:	4620      	mov	r0, r4
 8016cae:	f005 fa01 	bl	801c0b4 <__cxa_guard_acquire>
 8016cb2:	b138      	cbz	r0, 8016cc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f005 fa09 	bl	801c0cc <__cxa_guard_release>
 8016cba:	4a0f      	ldr	r2, [pc, #60]	; (8016cf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016cbc:	490f      	ldr	r1, [pc, #60]	; (8016cfc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016cbe:	4810      	ldr	r0, [pc, #64]	; (8016d00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016cc0:	f005 f9f1 	bl	801c0a6 <__aeabi_atexit>
 8016cc4:	4c0f      	ldr	r4, [pc, #60]	; (8016d04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8016cc6:	7823      	ldrb	r3, [r4, #0]
 8016cc8:	f3bf 8f5b 	dmb	ish
 8016ccc:	07db      	lsls	r3, r3, #31
 8016cce:	d40b      	bmi.n	8016ce8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	f005 f9ef 	bl	801c0b4 <__cxa_guard_acquire>
 8016cd6:	b138      	cbz	r0, 8016ce8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016cd8:	4620      	mov	r0, r4
 8016cda:	f005 f9f7 	bl	801c0cc <__cxa_guard_release>
 8016cde:	4a06      	ldr	r2, [pc, #24]	; (8016cf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016ce0:	4909      	ldr	r1, [pc, #36]	; (8016d08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016ce2:	480a      	ldr	r0, [pc, #40]	; (8016d0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016ce4:	f005 f9df 	bl	801c0a6 <__aeabi_atexit>
 8016ce8:	4b05      	ldr	r3, [pc, #20]	; (8016d00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016cea:	60ab      	str	r3, [r5, #8]
 8016cec:	4b07      	ldr	r3, [pc, #28]	; (8016d0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016cee:	60eb      	str	r3, [r5, #12]
 8016cf0:	bd38      	pop	{r3, r4, r5, pc}
 8016cf2:	bf00      	nop
 8016cf4:	24006d18 	.word	0x24006d18
 8016cf8:	24000000 	.word	0x24000000
 8016cfc:	080156a5 	.word	0x080156a5
 8016d00:	240000ac 	.word	0x240000ac
 8016d04:	24006d1c 	.word	0x24006d1c
 8016d08:	080156a3 	.word	0x080156a3
 8016d0c:	240000b0 	.word	0x240000b0

08016d10 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	f7ff ff88 	bl	8016c28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016d18:	4620      	mov	r0, r4
 8016d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d1e:	f7ff bfbd 	b.w	8016c9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016d24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016d24:	b538      	push	{r3, r4, r5, lr}
 8016d26:	4c15      	ldr	r4, [pc, #84]	; (8016d7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016d28:	4605      	mov	r5, r0
 8016d2a:	7823      	ldrb	r3, [r4, #0]
 8016d2c:	f3bf 8f5b 	dmb	ish
 8016d30:	07da      	lsls	r2, r3, #31
 8016d32:	d40b      	bmi.n	8016d4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d34:	4620      	mov	r0, r4
 8016d36:	f005 f9bd 	bl	801c0b4 <__cxa_guard_acquire>
 8016d3a:	b138      	cbz	r0, 8016d4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f005 f9c5 	bl	801c0cc <__cxa_guard_release>
 8016d42:	4a0f      	ldr	r2, [pc, #60]	; (8016d80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016d44:	490f      	ldr	r1, [pc, #60]	; (8016d84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016d46:	4810      	ldr	r0, [pc, #64]	; (8016d88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016d48:	f005 f9ad 	bl	801c0a6 <__aeabi_atexit>
 8016d4c:	4c0f      	ldr	r4, [pc, #60]	; (8016d8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016d4e:	7823      	ldrb	r3, [r4, #0]
 8016d50:	f3bf 8f5b 	dmb	ish
 8016d54:	07db      	lsls	r3, r3, #31
 8016d56:	d40b      	bmi.n	8016d70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f005 f9ab 	bl	801c0b4 <__cxa_guard_acquire>
 8016d5e:	b138      	cbz	r0, 8016d70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016d60:	4620      	mov	r0, r4
 8016d62:	f005 f9b3 	bl	801c0cc <__cxa_guard_release>
 8016d66:	4a06      	ldr	r2, [pc, #24]	; (8016d80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016d68:	4909      	ldr	r1, [pc, #36]	; (8016d90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016d6a:	480a      	ldr	r0, [pc, #40]	; (8016d94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016d6c:	f005 f99b 	bl	801c0a6 <__aeabi_atexit>
 8016d70:	4b05      	ldr	r3, [pc, #20]	; (8016d88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016d72:	622b      	str	r3, [r5, #32]
 8016d74:	4b07      	ldr	r3, [pc, #28]	; (8016d94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016d76:	626b      	str	r3, [r5, #36]	; 0x24
 8016d78:	bd38      	pop	{r3, r4, r5, pc}
 8016d7a:	bf00      	nop
 8016d7c:	24006d40 	.word	0x24006d40
 8016d80:	24000000 	.word	0x24000000
 8016d84:	08015699 	.word	0x08015699
 8016d88:	240000d4 	.word	0x240000d4
 8016d8c:	24006d44 	.word	0x24006d44
 8016d90:	08015697 	.word	0x08015697
 8016d94:	240000d8 	.word	0x240000d8

08016d98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016d98:	b538      	push	{r3, r4, r5, lr}
 8016d9a:	4c15      	ldr	r4, [pc, #84]	; (8016df0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016d9c:	4605      	mov	r5, r0
 8016d9e:	7823      	ldrb	r3, [r4, #0]
 8016da0:	f3bf 8f5b 	dmb	ish
 8016da4:	07da      	lsls	r2, r3, #31
 8016da6:	d40b      	bmi.n	8016dc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016da8:	4620      	mov	r0, r4
 8016daa:	f005 f983 	bl	801c0b4 <__cxa_guard_acquire>
 8016dae:	b138      	cbz	r0, 8016dc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016db0:	4620      	mov	r0, r4
 8016db2:	f005 f98b 	bl	801c0cc <__cxa_guard_release>
 8016db6:	4a0f      	ldr	r2, [pc, #60]	; (8016df4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016db8:	490f      	ldr	r1, [pc, #60]	; (8016df8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016dba:	4810      	ldr	r0, [pc, #64]	; (8016dfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016dbc:	f005 f973 	bl	801c0a6 <__aeabi_atexit>
 8016dc0:	4c0f      	ldr	r4, [pc, #60]	; (8016e00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016dc2:	7823      	ldrb	r3, [r4, #0]
 8016dc4:	f3bf 8f5b 	dmb	ish
 8016dc8:	07db      	lsls	r3, r3, #31
 8016dca:	d40b      	bmi.n	8016de4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016dcc:	4620      	mov	r0, r4
 8016dce:	f005 f971 	bl	801c0b4 <__cxa_guard_acquire>
 8016dd2:	b138      	cbz	r0, 8016de4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f005 f979 	bl	801c0cc <__cxa_guard_release>
 8016dda:	4a06      	ldr	r2, [pc, #24]	; (8016df4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016ddc:	4909      	ldr	r1, [pc, #36]	; (8016e04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016dde:	480a      	ldr	r0, [pc, #40]	; (8016e08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016de0:	f005 f961 	bl	801c0a6 <__aeabi_atexit>
 8016de4:	4b05      	ldr	r3, [pc, #20]	; (8016dfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016de6:	61ab      	str	r3, [r5, #24]
 8016de8:	4b07      	ldr	r3, [pc, #28]	; (8016e08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016dea:	61eb      	str	r3, [r5, #28]
 8016dec:	bd38      	pop	{r3, r4, r5, pc}
 8016dee:	bf00      	nop
 8016df0:	24006d20 	.word	0x24006d20
 8016df4:	24000000 	.word	0x24000000
 8016df8:	0801569d 	.word	0x0801569d
 8016dfc:	240000b4 	.word	0x240000b4
 8016e00:	24006d24 	.word	0x24006d24
 8016e04:	0801569b 	.word	0x0801569b
 8016e08:	240000b8 	.word	0x240000b8

08016e0c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016e0c:	b510      	push	{r4, lr}
 8016e0e:	4604      	mov	r4, r0
 8016e10:	f7ff ff88 	bl	8016d24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016e14:	4620      	mov	r0, r4
 8016e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e1a:	f7ff bfbd 	b.w	8016d98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016e20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4c15      	ldr	r4, [pc, #84]	; (8016e78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8016e24:	4605      	mov	r5, r0
 8016e26:	7823      	ldrb	r3, [r4, #0]
 8016e28:	f3bf 8f5b 	dmb	ish
 8016e2c:	07da      	lsls	r2, r3, #31
 8016e2e:	d40b      	bmi.n	8016e48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e30:	4620      	mov	r0, r4
 8016e32:	f005 f93f 	bl	801c0b4 <__cxa_guard_acquire>
 8016e36:	b138      	cbz	r0, 8016e48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f005 f947 	bl	801c0cc <__cxa_guard_release>
 8016e3e:	4a0f      	ldr	r2, [pc, #60]	; (8016e7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016e40:	490f      	ldr	r1, [pc, #60]	; (8016e80 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016e42:	4810      	ldr	r0, [pc, #64]	; (8016e84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016e44:	f005 f92f 	bl	801c0a6 <__aeabi_atexit>
 8016e48:	4c0f      	ldr	r4, [pc, #60]	; (8016e88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8016e4a:	7823      	ldrb	r3, [r4, #0]
 8016e4c:	f3bf 8f5b 	dmb	ish
 8016e50:	07db      	lsls	r3, r3, #31
 8016e52:	d40b      	bmi.n	8016e6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016e54:	4620      	mov	r0, r4
 8016e56:	f005 f92d 	bl	801c0b4 <__cxa_guard_acquire>
 8016e5a:	b138      	cbz	r0, 8016e6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f005 f935 	bl	801c0cc <__cxa_guard_release>
 8016e62:	4a06      	ldr	r2, [pc, #24]	; (8016e7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016e64:	4909      	ldr	r1, [pc, #36]	; (8016e8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8016e66:	480a      	ldr	r0, [pc, #40]	; (8016e90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016e68:	f005 f91d 	bl	801c0a6 <__aeabi_atexit>
 8016e6c:	4b05      	ldr	r3, [pc, #20]	; (8016e84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016e6e:	632b      	str	r3, [r5, #48]	; 0x30
 8016e70:	4b07      	ldr	r3, [pc, #28]	; (8016e90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016e72:	636b      	str	r3, [r5, #52]	; 0x34
 8016e74:	bd38      	pop	{r3, r4, r5, pc}
 8016e76:	bf00      	nop
 8016e78:	24006d28 	.word	0x24006d28
 8016e7c:	24000000 	.word	0x24000000
 8016e80:	08015691 	.word	0x08015691
 8016e84:	240000bc 	.word	0x240000bc
 8016e88:	24006d2c 	.word	0x24006d2c
 8016e8c:	0801568f 	.word	0x0801568f
 8016e90:	240000c0 	.word	0x240000c0

08016e94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016e94:	b538      	push	{r3, r4, r5, lr}
 8016e96:	4c15      	ldr	r4, [pc, #84]	; (8016eec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8016e98:	4605      	mov	r5, r0
 8016e9a:	7823      	ldrb	r3, [r4, #0]
 8016e9c:	f3bf 8f5b 	dmb	ish
 8016ea0:	07da      	lsls	r2, r3, #31
 8016ea2:	d40b      	bmi.n	8016ebc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f005 f905 	bl	801c0b4 <__cxa_guard_acquire>
 8016eaa:	b138      	cbz	r0, 8016ebc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016eac:	4620      	mov	r0, r4
 8016eae:	f005 f90d 	bl	801c0cc <__cxa_guard_release>
 8016eb2:	4a0f      	ldr	r2, [pc, #60]	; (8016ef0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016eb4:	490f      	ldr	r1, [pc, #60]	; (8016ef4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8016eb6:	4810      	ldr	r0, [pc, #64]	; (8016ef8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016eb8:	f005 f8f5 	bl	801c0a6 <__aeabi_atexit>
 8016ebc:	4c0f      	ldr	r4, [pc, #60]	; (8016efc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016ebe:	7823      	ldrb	r3, [r4, #0]
 8016ec0:	f3bf 8f5b 	dmb	ish
 8016ec4:	07db      	lsls	r3, r3, #31
 8016ec6:	d40b      	bmi.n	8016ee0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f005 f8f3 	bl	801c0b4 <__cxa_guard_acquire>
 8016ece:	b138      	cbz	r0, 8016ee0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	f005 f8fb 	bl	801c0cc <__cxa_guard_release>
 8016ed6:	4a06      	ldr	r2, [pc, #24]	; (8016ef0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016ed8:	4909      	ldr	r1, [pc, #36]	; (8016f00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8016eda:	480a      	ldr	r0, [pc, #40]	; (8016f04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016edc:	f005 f8e3 	bl	801c0a6 <__aeabi_atexit>
 8016ee0:	4b05      	ldr	r3, [pc, #20]	; (8016ef8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8016ee2:	62ab      	str	r3, [r5, #40]	; 0x28
 8016ee4:	4b07      	ldr	r3, [pc, #28]	; (8016f04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8016ee6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016ee8:	bd38      	pop	{r3, r4, r5, pc}
 8016eea:	bf00      	nop
 8016eec:	24006d00 	.word	0x24006d00
 8016ef0:	24000000 	.word	0x24000000
 8016ef4:	08015695 	.word	0x08015695
 8016ef8:	24000094 	.word	0x24000094
 8016efc:	24006d04 	.word	0x24006d04
 8016f00:	08015693 	.word	0x08015693
 8016f04:	24000098 	.word	0x24000098

08016f08 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8016f08:	b510      	push	{r4, lr}
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	f7ff ff88 	bl	8016e20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8016f10:	4620      	mov	r0, r4
 8016f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f16:	f7ff bfbd 	b.w	8016e94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08016f1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8016f1c:	b538      	push	{r3, r4, r5, lr}
 8016f1e:	4c15      	ldr	r4, [pc, #84]	; (8016f74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016f20:	4605      	mov	r5, r0
 8016f22:	7823      	ldrb	r3, [r4, #0]
 8016f24:	f3bf 8f5b 	dmb	ish
 8016f28:	07da      	lsls	r2, r3, #31
 8016f2a:	d40b      	bmi.n	8016f44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	f005 f8c1 	bl	801c0b4 <__cxa_guard_acquire>
 8016f32:	b138      	cbz	r0, 8016f44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016f34:	4620      	mov	r0, r4
 8016f36:	f005 f8c9 	bl	801c0cc <__cxa_guard_release>
 8016f3a:	4a0f      	ldr	r2, [pc, #60]	; (8016f78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016f3c:	490f      	ldr	r1, [pc, #60]	; (8016f7c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016f3e:	4810      	ldr	r0, [pc, #64]	; (8016f80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016f40:	f005 f8b1 	bl	801c0a6 <__aeabi_atexit>
 8016f44:	4c0f      	ldr	r4, [pc, #60]	; (8016f84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016f46:	7823      	ldrb	r3, [r4, #0]
 8016f48:	f3bf 8f5b 	dmb	ish
 8016f4c:	07db      	lsls	r3, r3, #31
 8016f4e:	d40b      	bmi.n	8016f68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016f50:	4620      	mov	r0, r4
 8016f52:	f005 f8af 	bl	801c0b4 <__cxa_guard_acquire>
 8016f56:	b138      	cbz	r0, 8016f68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016f58:	4620      	mov	r0, r4
 8016f5a:	f005 f8b7 	bl	801c0cc <__cxa_guard_release>
 8016f5e:	4a06      	ldr	r2, [pc, #24]	; (8016f78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016f60:	4909      	ldr	r1, [pc, #36]	; (8016f88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016f62:	480a      	ldr	r0, [pc, #40]	; (8016f8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016f64:	f005 f89f 	bl	801c0a6 <__aeabi_atexit>
 8016f68:	4b05      	ldr	r3, [pc, #20]	; (8016f80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016f6a:	642b      	str	r3, [r5, #64]	; 0x40
 8016f6c:	4b07      	ldr	r3, [pc, #28]	; (8016f8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016f6e:	646b      	str	r3, [r5, #68]	; 0x44
 8016f70:	bd38      	pop	{r3, r4, r5, pc}
 8016f72:	bf00      	nop
 8016f74:	24006d30 	.word	0x24006d30
 8016f78:	24000000 	.word	0x24000000
 8016f7c:	08015689 	.word	0x08015689
 8016f80:	240000c4 	.word	0x240000c4
 8016f84:	24006d34 	.word	0x24006d34
 8016f88:	08015687 	.word	0x08015687
 8016f8c:	240000c8 	.word	0x240000c8

08016f90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016f90:	b538      	push	{r3, r4, r5, lr}
 8016f92:	4c15      	ldr	r4, [pc, #84]	; (8016fe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016f94:	4605      	mov	r5, r0
 8016f96:	7823      	ldrb	r3, [r4, #0]
 8016f98:	f3bf 8f5b 	dmb	ish
 8016f9c:	07da      	lsls	r2, r3, #31
 8016f9e:	d40b      	bmi.n	8016fb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f005 f887 	bl	801c0b4 <__cxa_guard_acquire>
 8016fa6:	b138      	cbz	r0, 8016fb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016fa8:	4620      	mov	r0, r4
 8016faa:	f005 f88f 	bl	801c0cc <__cxa_guard_release>
 8016fae:	4a0f      	ldr	r2, [pc, #60]	; (8016fec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016fb0:	490f      	ldr	r1, [pc, #60]	; (8016ff0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8016fb2:	4810      	ldr	r0, [pc, #64]	; (8016ff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016fb4:	f005 f877 	bl	801c0a6 <__aeabi_atexit>
 8016fb8:	4c0f      	ldr	r4, [pc, #60]	; (8016ff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8016fba:	7823      	ldrb	r3, [r4, #0]
 8016fbc:	f3bf 8f5b 	dmb	ish
 8016fc0:	07db      	lsls	r3, r3, #31
 8016fc2:	d40b      	bmi.n	8016fdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	f005 f875 	bl	801c0b4 <__cxa_guard_acquire>
 8016fca:	b138      	cbz	r0, 8016fdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016fcc:	4620      	mov	r0, r4
 8016fce:	f005 f87d 	bl	801c0cc <__cxa_guard_release>
 8016fd2:	4a06      	ldr	r2, [pc, #24]	; (8016fec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016fd4:	4909      	ldr	r1, [pc, #36]	; (8016ffc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8016fd6:	480a      	ldr	r0, [pc, #40]	; (8017000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016fd8:	f005 f865 	bl	801c0a6 <__aeabi_atexit>
 8016fdc:	4b05      	ldr	r3, [pc, #20]	; (8016ff4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016fde:	63ab      	str	r3, [r5, #56]	; 0x38
 8016fe0:	4b07      	ldr	r3, [pc, #28]	; (8017000 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016fe2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016fe4:	bd38      	pop	{r3, r4, r5, pc}
 8016fe6:	bf00      	nop
 8016fe8:	24006d10 	.word	0x24006d10
 8016fec:	24000000 	.word	0x24000000
 8016ff0:	0801568d 	.word	0x0801568d
 8016ff4:	240000a4 	.word	0x240000a4
 8016ff8:	24006d14 	.word	0x24006d14
 8016ffc:	0801568b 	.word	0x0801568b
 8017000:	240000a8 	.word	0x240000a8

08017004 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8017004:	b510      	push	{r4, lr}
 8017006:	4604      	mov	r4, r0
 8017008:	f7ff ff88 	bl	8016f1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801700c:	4620      	mov	r0, r4
 801700e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017012:	f7ff bfbd 	b.w	8016f90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08017018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4c15      	ldr	r4, [pc, #84]	; (8017070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801701c:	4605      	mov	r5, r0
 801701e:	7823      	ldrb	r3, [r4, #0]
 8017020:	f3bf 8f5b 	dmb	ish
 8017024:	07da      	lsls	r2, r3, #31
 8017026:	d40b      	bmi.n	8017040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017028:	4620      	mov	r0, r4
 801702a:	f005 f843 	bl	801c0b4 <__cxa_guard_acquire>
 801702e:	b138      	cbz	r0, 8017040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017030:	4620      	mov	r0, r4
 8017032:	f005 f84b 	bl	801c0cc <__cxa_guard_release>
 8017036:	4a0f      	ldr	r2, [pc, #60]	; (8017074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017038:	490f      	ldr	r1, [pc, #60]	; (8017078 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801703a:	4810      	ldr	r0, [pc, #64]	; (801707c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801703c:	f005 f833 	bl	801c0a6 <__aeabi_atexit>
 8017040:	4c0f      	ldr	r4, [pc, #60]	; (8017080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8017042:	7823      	ldrb	r3, [r4, #0]
 8017044:	f3bf 8f5b 	dmb	ish
 8017048:	07db      	lsls	r3, r3, #31
 801704a:	d40b      	bmi.n	8017064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801704c:	4620      	mov	r0, r4
 801704e:	f005 f831 	bl	801c0b4 <__cxa_guard_acquire>
 8017052:	b138      	cbz	r0, 8017064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017054:	4620      	mov	r0, r4
 8017056:	f005 f839 	bl	801c0cc <__cxa_guard_release>
 801705a:	4a06      	ldr	r2, [pc, #24]	; (8017074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801705c:	4909      	ldr	r1, [pc, #36]	; (8017084 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801705e:	480a      	ldr	r0, [pc, #40]	; (8017088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017060:	f005 f821 	bl	801c0a6 <__aeabi_atexit>
 8017064:	4b05      	ldr	r3, [pc, #20]	; (801707c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017066:	652b      	str	r3, [r5, #80]	; 0x50
 8017068:	4b07      	ldr	r3, [pc, #28]	; (8017088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801706a:	656b      	str	r3, [r5, #84]	; 0x54
 801706c:	bd38      	pop	{r3, r4, r5, pc}
 801706e:	bf00      	nop
 8017070:	24006d08 	.word	0x24006d08
 8017074:	24000000 	.word	0x24000000
 8017078:	08015681 	.word	0x08015681
 801707c:	2400009c 	.word	0x2400009c
 8017080:	24006d0c 	.word	0x24006d0c
 8017084:	0801567f 	.word	0x0801567f
 8017088:	240000a0 	.word	0x240000a0

0801708c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801708c:	b538      	push	{r3, r4, r5, lr}
 801708e:	4c15      	ldr	r4, [pc, #84]	; (80170e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8017090:	4605      	mov	r5, r0
 8017092:	7823      	ldrb	r3, [r4, #0]
 8017094:	f3bf 8f5b 	dmb	ish
 8017098:	07da      	lsls	r2, r3, #31
 801709a:	d40b      	bmi.n	80170b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801709c:	4620      	mov	r0, r4
 801709e:	f005 f809 	bl	801c0b4 <__cxa_guard_acquire>
 80170a2:	b138      	cbz	r0, 80170b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80170a4:	4620      	mov	r0, r4
 80170a6:	f005 f811 	bl	801c0cc <__cxa_guard_release>
 80170aa:	4a0f      	ldr	r2, [pc, #60]	; (80170e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80170ac:	490f      	ldr	r1, [pc, #60]	; (80170ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80170ae:	4810      	ldr	r0, [pc, #64]	; (80170f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80170b0:	f004 fff9 	bl	801c0a6 <__aeabi_atexit>
 80170b4:	4c0f      	ldr	r4, [pc, #60]	; (80170f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80170b6:	7823      	ldrb	r3, [r4, #0]
 80170b8:	f3bf 8f5b 	dmb	ish
 80170bc:	07db      	lsls	r3, r3, #31
 80170be:	d40b      	bmi.n	80170d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80170c0:	4620      	mov	r0, r4
 80170c2:	f004 fff7 	bl	801c0b4 <__cxa_guard_acquire>
 80170c6:	b138      	cbz	r0, 80170d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80170c8:	4620      	mov	r0, r4
 80170ca:	f004 ffff 	bl	801c0cc <__cxa_guard_release>
 80170ce:	4a06      	ldr	r2, [pc, #24]	; (80170e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80170d0:	4909      	ldr	r1, [pc, #36]	; (80170f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80170d2:	480a      	ldr	r0, [pc, #40]	; (80170fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80170d4:	f004 ffe7 	bl	801c0a6 <__aeabi_atexit>
 80170d8:	4b05      	ldr	r3, [pc, #20]	; (80170f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80170da:	64ab      	str	r3, [r5, #72]	; 0x48
 80170dc:	4b07      	ldr	r3, [pc, #28]	; (80170fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80170de:	64eb      	str	r3, [r5, #76]	; 0x4c
 80170e0:	bd38      	pop	{r3, r4, r5, pc}
 80170e2:	bf00      	nop
 80170e4:	24006cf8 	.word	0x24006cf8
 80170e8:	24000000 	.word	0x24000000
 80170ec:	08015685 	.word	0x08015685
 80170f0:	2400008c 	.word	0x2400008c
 80170f4:	24006cfc 	.word	0x24006cfc
 80170f8:	08015683 	.word	0x08015683
 80170fc:	24000090 	.word	0x24000090

08017100 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8017100:	b510      	push	{r4, lr}
 8017102:	4604      	mov	r4, r0
 8017104:	f7ff ff88 	bl	8017018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8017108:	4620      	mov	r0, r4
 801710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801710e:	f7ff bfbd 	b.w	801708c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08017112 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8017112:	b510      	push	{r4, lr}
 8017114:	4604      	mov	r4, r0
 8017116:	f7ff fff3 	bl	8017100 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801711a:	4620      	mov	r0, r4
 801711c:	f7ff ff72 	bl	8017004 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8017120:	4620      	mov	r0, r4
 8017122:	f7ff fe73 	bl	8016e0c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8017126:	4620      	mov	r0, r4
 8017128:	f7ff fdf2 	bl	8016d10 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801712c:	4620      	mov	r0, r4
 801712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017132:	f7ff bee9 	b.w	8016f08 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08017138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	b087      	sub	sp, #28
 801713e:	7888      	ldrb	r0, [r1, #2]
 8017140:	4616      	mov	r6, r2
 8017142:	9001      	str	r0, [sp, #4]
 8017144:	7848      	ldrb	r0, [r1, #1]
 8017146:	9100      	str	r1, [sp, #0]
 8017148:	9002      	str	r0, [sp, #8]
 801714a:	7808      	ldrb	r0, [r1, #0]
 801714c:	9901      	ldr	r1, [sp, #4]
 801714e:	9003      	str	r0, [sp, #12]
 8017150:	9802      	ldr	r0, [sp, #8]
 8017152:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8017156:	0200      	lsls	r0, r0, #8
 8017158:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801715c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8017160:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8017164:	9903      	ldr	r1, [sp, #12]
 8017166:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801716a:	4308      	orrs	r0, r1
 801716c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017170:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8017174:	9005      	str	r0, [sp, #20]
 8017176:	fb05 ca0e 	mla	sl, r5, lr, ip
 801717a:	2d00      	cmp	r5, #0
 801717c:	eb06 080a 	add.w	r8, r6, sl
 8017180:	db4a      	blt.n	8017218 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8017182:	45a9      	cmp	r9, r5
 8017184:	dd48      	ble.n	8017218 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8017186:	f1bc 0f00 	cmp.w	ip, #0
 801718a:	db43      	blt.n	8017214 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801718c:	45e6      	cmp	lr, ip
 801718e:	dd41      	ble.n	8017214 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8017190:	f816 600a 	ldrb.w	r6, [r6, sl]
 8017194:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017198:	441e      	add	r6, r3
 801719a:	f11c 0001 	adds.w	r0, ip, #1
 801719e:	d43e      	bmi.n	801721e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80171a0:	4586      	cmp	lr, r0
 80171a2:	dd3c      	ble.n	801721e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80171a4:	2a00      	cmp	r2, #0
 80171a6:	d03a      	beq.n	801721e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80171a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80171ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80171b0:	4418      	add	r0, r3
 80171b2:	3501      	adds	r5, #1
 80171b4:	d437      	bmi.n	8017226 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80171b6:	45a9      	cmp	r9, r5
 80171b8:	dd35      	ble.n	8017226 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80171ba:	b3a4      	cbz	r4, 8017226 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80171bc:	f1bc 0f00 	cmp.w	ip, #0
 80171c0:	db2f      	blt.n	8017222 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80171c2:	45e6      	cmp	lr, ip
 80171c4:	dd2d      	ble.n	8017222 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80171c6:	f818 500e 	ldrb.w	r5, [r8, lr]
 80171ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171ce:	441d      	add	r5, r3
 80171d0:	f11c 0c01 	adds.w	ip, ip, #1
 80171d4:	d42a      	bmi.n	801722c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171d6:	45e6      	cmp	lr, ip
 80171d8:	dd28      	ble.n	801722c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171da:	b33a      	cbz	r2, 801722c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80171dc:	44c6      	add	lr, r8
 80171de:	f89e c001 	ldrb.w	ip, [lr, #1]
 80171e2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80171e6:	4463      	add	r3, ip
 80171e8:	ea6f 0c07 	mvn.w	ip, r7
 80171ec:	2a0f      	cmp	r2, #15
 80171ee:	f896 a000 	ldrb.w	sl, [r6]
 80171f2:	fa5f fc8c 	uxtb.w	ip, ip
 80171f6:	f890 b000 	ldrb.w	fp, [r0]
 80171fa:	f895 9000 	ldrb.w	r9, [r5]
 80171fe:	7819      	ldrb	r1, [r3, #0]
 8017200:	d801      	bhi.n	8017206 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8017202:	2c0f      	cmp	r4, #15
 8017204:	d914      	bls.n	8017230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8017206:	4b40      	ldr	r3, [pc, #256]	; (8017308 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8017208:	f240 1157 	movw	r1, #343	; 0x157
 801720c:	4a3f      	ldr	r2, [pc, #252]	; (801730c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801720e:	4840      	ldr	r0, [pc, #256]	; (8017310 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8017210:	f005 f864 	bl	801c2dc <__assert_func>
 8017214:	ae05      	add	r6, sp, #20
 8017216:	e7c0      	b.n	801719a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8017218:	a805      	add	r0, sp, #20
 801721a:	4606      	mov	r6, r0
 801721c:	e7c9      	b.n	80171b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801721e:	a805      	add	r0, sp, #20
 8017220:	e7c7      	b.n	80171b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8017222:	ad05      	add	r5, sp, #20
 8017224:	e7d4      	b.n	80171d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8017226:	ab05      	add	r3, sp, #20
 8017228:	461d      	mov	r5, r3
 801722a:	e7dd      	b.n	80171e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801722c:	ab05      	add	r3, sp, #20
 801722e:	e7db      	b.n	80171e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8017230:	b292      	uxth	r2, r2
 8017232:	b2a4      	uxth	r4, r4
 8017234:	fa1f fc8c 	uxth.w	ip, ip
 8017238:	fb02 f804 	mul.w	r8, r2, r4
 801723c:	0112      	lsls	r2, r2, #4
 801723e:	b2bf      	uxth	r7, r7
 8017240:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8017244:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8017248:	eba2 0208 	sub.w	r2, r2, r8
 801724c:	b2a4      	uxth	r4, r4
 801724e:	b292      	uxth	r2, r2
 8017250:	ebae 0e04 	sub.w	lr, lr, r4
 8017254:	fb02 fb0b 	mul.w	fp, r2, fp
 8017258:	fa1f fe8e 	uxth.w	lr, lr
 801725c:	fb0e ba0a 	mla	sl, lr, sl, fp
 8017260:	fb04 aa09 	mla	sl, r4, r9, sl
 8017264:	fb08 aa01 	mla	sl, r8, r1, sl
 8017268:	9903      	ldr	r1, [sp, #12]
 801726a:	fb11 f90c 	smulbb	r9, r1, ip
 801726e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8017272:	9900      	ldr	r1, [sp, #0]
 8017274:	fb0a 9a07 	mla	sl, sl, r7, r9
 8017278:	fa1f fa8a 	uxth.w	sl, sl
 801727c:	f10a 0901 	add.w	r9, sl, #1
 8017280:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8017284:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017288:	f881 a000 	strb.w	sl, [r1]
 801728c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017290:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017294:	fb02 fa0a 	mul.w	sl, r2, sl
 8017298:	9902      	ldr	r1, [sp, #8]
 801729a:	fb0e aa09 	mla	sl, lr, r9, sl
 801729e:	f895 9001 	ldrb.w	r9, [r5, #1]
 80172a2:	fb04 aa09 	mla	sl, r4, r9, sl
 80172a6:	f893 9001 	ldrb.w	r9, [r3, #1]
 80172aa:	fb08 a909 	mla	r9, r8, r9, sl
 80172ae:	fb11 fa0c 	smulbb	sl, r1, ip
 80172b2:	9900      	ldr	r1, [sp, #0]
 80172b4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80172b8:	fb09 a907 	mla	r9, r9, r7, sl
 80172bc:	fa1f f989 	uxth.w	r9, r9
 80172c0:	f109 0a01 	add.w	sl, r9, #1
 80172c4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80172c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80172cc:	f881 9001 	strb.w	r9, [r1, #1]
 80172d0:	7880      	ldrb	r0, [r0, #2]
 80172d2:	78b6      	ldrb	r6, [r6, #2]
 80172d4:	4342      	muls	r2, r0
 80172d6:	78a8      	ldrb	r0, [r5, #2]
 80172d8:	789b      	ldrb	r3, [r3, #2]
 80172da:	fb0e 2206 	mla	r2, lr, r6, r2
 80172de:	fb04 2400 	mla	r4, r4, r0, r2
 80172e2:	fb08 4803 	mla	r8, r8, r3, r4
 80172e6:	9b01      	ldr	r3, [sp, #4]
 80172e8:	fb13 fc0c 	smulbb	ip, r3, ip
 80172ec:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80172f0:	fb08 c707 	mla	r7, r8, r7, ip
 80172f4:	b2bf      	uxth	r7, r7
 80172f6:	f107 0c01 	add.w	ip, r7, #1
 80172fa:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80172fe:	123f      	asrs	r7, r7, #8
 8017300:	708f      	strb	r7, [r1, #2]
 8017302:	b007      	add	sp, #28
 8017304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017308:	080205d7 	.word	0x080205d7
 801730c:	08020a8e 	.word	0x08020a8e
 8017310:	0802065f 	.word	0x0802065f

08017314 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017318:	ed2d 8b08 	vpush	{d8-d11}
 801731c:	b093      	sub	sp, #76	; 0x4c
 801731e:	eeb0 aa40 	vmov.f32	s20, s0
 8017322:	eef0 9a60 	vmov.f32	s19, s1
 8017326:	9210      	str	r2, [sp, #64]	; 0x40
 8017328:	eeb0 9a41 	vmov.f32	s18, s2
 801732c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801732e:	eeb0 8a62 	vmov.f32	s16, s5
 8017332:	9309      	str	r3, [sp, #36]	; 0x24
 8017334:	eef0 8a43 	vmov.f32	s17, s6
 8017338:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801733c:	eef0 ba44 	vmov.f32	s23, s8
 8017340:	9011      	str	r0, [sp, #68]	; 0x44
 8017342:	eeb0 ba64 	vmov.f32	s22, s9
 8017346:	930e      	str	r3, [sp, #56]	; 0x38
 8017348:	eef0 aa45 	vmov.f32	s21, s10
 801734c:	6850      	ldr	r0, [r2, #4]
 801734e:	910d      	str	r1, [sp, #52]	; 0x34
 8017350:	6812      	ldr	r2, [r2, #0]
 8017352:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8017356:	fb00 1303 	mla	r3, r0, r3, r1
 801735a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801735e:	18d3      	adds	r3, r2, r3
 8017360:	930a      	str	r3, [sp, #40]	; 0x28
 8017362:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	930c      	str	r3, [sp, #48]	; 0x30
 8017368:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801736a:	685c      	ldr	r4, [r3, #4]
 801736c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801736e:	3404      	adds	r4, #4
 8017370:	43db      	mvns	r3, r3
 8017372:	b2db      	uxtb	r3, r3
 8017374:	930b      	str	r3, [sp, #44]	; 0x2c
 8017376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017378:	2b00      	cmp	r3, #0
 801737a:	dc03      	bgt.n	8017384 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801737c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801737e:	2b00      	cmp	r3, #0
 8017380:	f340 8250 	ble.w	8017824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8017384:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017386:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801738a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801738e:	1e48      	subs	r0, r1, #1
 8017390:	1e55      	subs	r5, r2, #1
 8017392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017394:	2b00      	cmp	r3, #0
 8017396:	f340 80ee 	ble.w	8017576 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801739a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801739c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801739e:	1436      	asrs	r6, r6, #16
 80173a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80173a4:	d406      	bmi.n	80173b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80173a6:	4286      	cmp	r6, r0
 80173a8:	da04      	bge.n	80173b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	db02      	blt.n	80173b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80173ae:	42ab      	cmp	r3, r5
 80173b0:	f2c0 80e2 	blt.w	8017578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80173b4:	3601      	adds	r6, #1
 80173b6:	f100 80cf 	bmi.w	8017558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80173ba:	42b1      	cmp	r1, r6
 80173bc:	f2c0 80cc 	blt.w	8017558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80173c0:	3301      	adds	r3, #1
 80173c2:	f100 80c9 	bmi.w	8017558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80173c6:	429a      	cmp	r2, r3
 80173c8:	f2c0 80c6 	blt.w	8017558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80173cc:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80173d0:	f1bb 0f00 	cmp.w	fp, #0
 80173d4:	f340 80f1 	ble.w	80175ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80173d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80173da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80173dc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80173de:	141d      	asrs	r5, r3, #16
 80173e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80173e2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80173e6:	68c7      	ldr	r7, [r0, #12]
 80173e8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80173ea:	1418      	asrs	r0, r3, #16
 80173ec:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80173f0:	6892      	ldr	r2, [r2, #8]
 80173f2:	f100 8137 	bmi.w	8017664 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80173f6:	f102 3cff 	add.w	ip, r2, #4294967295
 80173fa:	4560      	cmp	r0, ip
 80173fc:	f280 8132 	bge.w	8017664 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017400:	2d00      	cmp	r5, #0
 8017402:	f2c0 812f 	blt.w	8017664 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017406:	f107 3cff 	add.w	ip, r7, #4294967295
 801740a:	4565      	cmp	r5, ip
 801740c:	f280 812a 	bge.w	8017664 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8017410:	b212      	sxth	r2, r2
 8017412:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017414:	fb05 0002 	mla	r0, r5, r2, r0
 8017418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801741a:	f817 c000 	ldrb.w	ip, [r7, r0]
 801741e:	4405      	add	r5, r0
 8017420:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017424:	eb04 0e0c 	add.w	lr, r4, ip
 8017428:	f1b8 0f00 	cmp.w	r8, #0
 801742c:	f000 810c 	beq.w	8017648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8017430:	786f      	ldrb	r7, [r5, #1]
 8017432:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017436:	4427      	add	r7, r4
 8017438:	2900      	cmp	r1, #0
 801743a:	f000 810d 	beq.w	8017658 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801743e:	18a8      	adds	r0, r5, r2
 8017440:	5caa      	ldrb	r2, [r5, r2]
 8017442:	7840      	ldrb	r0, [r0, #1]
 8017444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801744c:	4422      	add	r2, r4
 801744e:	4420      	add	r0, r4
 8017450:	fa1f f388 	uxth.w	r3, r8
 8017454:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8017458:	b289      	uxth	r1, r1
 801745a:	f897 c000 	ldrb.w	ip, [r7]
 801745e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017462:	fb03 f901 	mul.w	r9, r3, r1
 8017466:	011b      	lsls	r3, r3, #4
 8017468:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801746c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8017470:	eba3 0309 	sub.w	r3, r3, r9
 8017474:	b289      	uxth	r1, r1
 8017476:	b29b      	uxth	r3, r3
 8017478:	eba8 0801 	sub.w	r8, r8, r1
 801747c:	fb03 fc0c 	mul.w	ip, r3, ip
 8017480:	fa1f f888 	uxth.w	r8, r8
 8017484:	930f      	str	r3, [sp, #60]	; 0x3c
 8017486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017488:	fb08 cc0a 	mla	ip, r8, sl, ip
 801748c:	f892 a000 	ldrb.w	sl, [r2]
 8017490:	fb01 cc0a 	mla	ip, r1, sl, ip
 8017494:	f890 a000 	ldrb.w	sl, [r0]
 8017498:	fb09 cc0a 	mla	ip, r9, sl, ip
 801749c:	f896 a000 	ldrb.w	sl, [r6]
 80174a0:	fb1a fa03 	smulbb	sl, sl, r3
 80174a4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80174a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174aa:	fb0c ac05 	mla	ip, ip, r5, sl
 80174ae:	fa1f fc8c 	uxth.w	ip, ip
 80174b2:	f10c 0a01 	add.w	sl, ip, #1
 80174b6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80174ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80174be:	f886 a000 	strb.w	sl, [r6]
 80174c2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80174c6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80174ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80174ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174d0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80174d4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80174d8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80174dc:	f890 a001 	ldrb.w	sl, [r0, #1]
 80174e0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80174e4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80174e8:	fb1a fa03 	smulbb	sl, sl, r3
 80174ec:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80174f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174f2:	fb0c ac05 	mla	ip, ip, r5, sl
 80174f6:	fa1f fc8c 	uxth.w	ip, ip
 80174fa:	f10c 0a01 	add.w	sl, ip, #1
 80174fe:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8017502:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017506:	f886 c001 	strb.w	ip, [r6, #1]
 801750a:	78bf      	ldrb	r7, [r7, #2]
 801750c:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017510:	437b      	muls	r3, r7
 8017512:	fb08 330c 	mla	r3, r8, ip, r3
 8017516:	f892 c002 	ldrb.w	ip, [r2, #2]
 801751a:	7882      	ldrb	r2, [r0, #2]
 801751c:	fb01 310c 	mla	r1, r1, ip, r3
 8017520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017522:	fb09 1902 	mla	r9, r9, r2, r1
 8017526:	78b1      	ldrb	r1, [r6, #2]
 8017528:	fb11 f103 	smulbb	r1, r1, r3
 801752c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017530:	fb09 1505 	mla	r5, r9, r5, r1
 8017534:	b2ad      	uxth	r5, r5
 8017536:	1c6b      	adds	r3, r5, #1
 8017538:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801753c:	122d      	asrs	r5, r5, #8
 801753e:	70b5      	strb	r5, [r6, #2]
 8017540:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017542:	3603      	adds	r6, #3
 8017544:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017546:	f10b 3bff 	add.w	fp, fp, #4294967295
 801754a:	4413      	add	r3, r2
 801754c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801754e:	9325      	str	r3, [sp, #148]	; 0x94
 8017550:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017552:	4413      	add	r3, r2
 8017554:	9326      	str	r3, [sp, #152]	; 0x98
 8017556:	e73b      	b.n	80173d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8017558:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801755a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801755c:	4433      	add	r3, r6
 801755e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8017560:	9325      	str	r3, [sp, #148]	; 0x94
 8017562:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017564:	4433      	add	r3, r6
 8017566:	9326      	str	r3, [sp, #152]	; 0x98
 8017568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801756a:	3b01      	subs	r3, #1
 801756c:	9309      	str	r3, [sp, #36]	; 0x24
 801756e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017570:	3303      	adds	r3, #3
 8017572:	930a      	str	r3, [sp, #40]	; 0x28
 8017574:	e70d      	b.n	8017392 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017576:	d028      	beq.n	80175ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801757a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801757c:	3b01      	subs	r3, #1
 801757e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8017580:	fb00 5003 	mla	r0, r0, r3, r5
 8017584:	1400      	asrs	r0, r0, #16
 8017586:	f53f af21 	bmi.w	80173cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801758a:	3901      	subs	r1, #1
 801758c:	4288      	cmp	r0, r1
 801758e:	f6bf af1d 	bge.w	80173cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8017592:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017594:	9826      	ldr	r0, [sp, #152]	; 0x98
 8017596:	fb01 0303 	mla	r3, r1, r3, r0
 801759a:	141b      	asrs	r3, r3, #16
 801759c:	f53f af16 	bmi.w	80173cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80175a0:	3a01      	subs	r2, #1
 80175a2:	4293      	cmp	r3, r2
 80175a4:	f6bf af12 	bge.w	80173cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80175a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80175ae:	1cdf      	adds	r7, r3, #3
 80175b0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80175b4:	f1b9 0f00 	cmp.w	r9, #0
 80175b8:	dc73      	bgt.n	80176a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80175ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175c6:	441a      	add	r2, r3
 80175c8:	920a      	str	r2, [sp, #40]	; 0x28
 80175ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f340 8129 	ble.w	8017824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80175d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80175d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80175dc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80175e0:	eef0 6a48 	vmov.f32	s13, s16
 80175e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80175e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80175ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80175f0:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80175f4:	eef0 6a68 	vmov.f32	s13, s17
 80175f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80175fc:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8017600:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017604:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017608:	ee37 8a48 	vsub.f32	s16, s14, s16
 801760c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017610:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017614:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017618:	ee18 2a10 	vmov	r2, s16
 801761c:	eeb0 8a47 	vmov.f32	s16, s14
 8017620:	fb92 f3f3 	sdiv	r3, r2, r3
 8017624:	ee18 2a90 	vmov	r2, s17
 8017628:	9327      	str	r3, [sp, #156]	; 0x9c
 801762a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801762c:	eef0 8a67 	vmov.f32	s17, s15
 8017630:	fb92 f3f3 	sdiv	r3, r2, r3
 8017634:	9328      	str	r3, [sp, #160]	; 0xa0
 8017636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017638:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801763a:	3b01      	subs	r3, #1
 801763c:	930d      	str	r3, [sp, #52]	; 0x34
 801763e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017640:	bf08      	it	eq
 8017642:	4613      	moveq	r3, r2
 8017644:	9309      	str	r3, [sp, #36]	; 0x24
 8017646:	e696      	b.n	8017376 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017648:	b149      	cbz	r1, 801765e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801764a:	5caa      	ldrb	r2, [r5, r2]
 801764c:	4670      	mov	r0, lr
 801764e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017652:	4422      	add	r2, r4
 8017654:	4677      	mov	r7, lr
 8017656:	e6fb      	b.n	8017450 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8017658:	4670      	mov	r0, lr
 801765a:	4672      	mov	r2, lr
 801765c:	e6f8      	b.n	8017450 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801765e:	4670      	mov	r0, lr
 8017660:	4672      	mov	r2, lr
 8017662:	e7f7      	b.n	8017654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8017664:	f110 0c01 	adds.w	ip, r0, #1
 8017668:	f53f af6a 	bmi.w	8017540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801766c:	4562      	cmp	r2, ip
 801766e:	f6ff af67 	blt.w	8017540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017672:	f115 0c01 	adds.w	ip, r5, #1
 8017676:	f53f af63 	bmi.w	8017540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801767a:	4567      	cmp	r7, ip
 801767c:	f6ff af60 	blt.w	8017540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8017680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017682:	b23f      	sxth	r7, r7
 8017684:	b212      	sxth	r2, r2
 8017686:	9002      	str	r0, [sp, #8]
 8017688:	9701      	str	r7, [sp, #4]
 801768a:	9200      	str	r2, [sp, #0]
 801768c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801768e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017690:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8017694:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8017698:	4623      	mov	r3, r4
 801769a:	4631      	mov	r1, r6
 801769c:	f7ff fd4c 	bl	8017138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80176a0:	e74e      	b.n	8017540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80176a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80176a4:	9826      	ldr	r0, [sp, #152]	; 0x98
 80176a6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80176aa:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80176ac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80176ae:	1400      	asrs	r0, r0, #16
 80176b0:	142d      	asrs	r5, r5, #16
 80176b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80176b4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80176b8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80176bc:	fb02 5000 	mla	r0, r2, r0, r5
 80176c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80176c2:	f815 e000 	ldrb.w	lr, [r5, r0]
 80176c6:	eb05 0c00 	add.w	ip, r5, r0
 80176ca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80176ce:	eb04 060e 	add.w	r6, r4, lr
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	f000 8097 	beq.w	8017806 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80176d8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80176dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176e0:	4425      	add	r5, r4
 80176e2:	2900      	cmp	r1, #0
 80176e4:	f000 8098 	beq.w	8017818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80176e8:	eb0c 0002 	add.w	r0, ip, r2
 80176ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80176f0:	7840      	ldrb	r0, [r0, #1]
 80176f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80176fa:	4422      	add	r2, r4
 80176fc:	4420      	add	r0, r4
 80176fe:	b29b      	uxth	r3, r3
 8017700:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8017704:	b289      	uxth	r1, r1
 8017706:	f895 e000 	ldrb.w	lr, [r5]
 801770a:	3703      	adds	r7, #3
 801770c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017710:	fb03 f801 	mul.w	r8, r3, r1
 8017714:	011b      	lsls	r3, r3, #4
 8017716:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801771a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801771e:	eba3 0308 	sub.w	r3, r3, r8
 8017722:	b289      	uxth	r1, r1
 8017724:	b29b      	uxth	r3, r3
 8017726:	ebac 0c01 	sub.w	ip, ip, r1
 801772a:	fb03 fe0e 	mul.w	lr, r3, lr
 801772e:	fa1f fc8c 	uxth.w	ip, ip
 8017732:	930f      	str	r3, [sp, #60]	; 0x3c
 8017734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017736:	fb0c ee0b 	mla	lr, ip, fp, lr
 801773a:	f892 b000 	ldrb.w	fp, [r2]
 801773e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017742:	f890 b000 	ldrb.w	fp, [r0]
 8017746:	fb08 ee0b 	mla	lr, r8, fp, lr
 801774a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801774e:	fb1b fb03 	smulbb	fp, fp, r3
 8017752:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017758:	fb0e be0a 	mla	lr, lr, sl, fp
 801775c:	fa1f fe8e 	uxth.w	lr, lr
 8017760:	f10e 0b01 	add.w	fp, lr, #1
 8017764:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017768:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801776c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017770:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017774:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017778:	fb03 fe0e 	mul.w	lr, r3, lr
 801777c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801777e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017782:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017786:	fb01 ee0b 	mla	lr, r1, fp, lr
 801778a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801778e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017792:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8017796:	fb1b fb03 	smulbb	fp, fp, r3
 801779a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801779e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177a0:	fb0e be0a 	mla	lr, lr, sl, fp
 80177a4:	fa1f fe8e 	uxth.w	lr, lr
 80177a8:	f10e 0b01 	add.w	fp, lr, #1
 80177ac:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80177b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80177b4:	f807 ec05 	strb.w	lr, [r7, #-5]
 80177b8:	78ad      	ldrb	r5, [r5, #2]
 80177ba:	78b6      	ldrb	r6, [r6, #2]
 80177bc:	436b      	muls	r3, r5
 80177be:	7895      	ldrb	r5, [r2, #2]
 80177c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80177c2:	fb0c 3306 	mla	r3, ip, r6, r3
 80177c6:	fb01 3305 	mla	r3, r1, r5, r3
 80177ca:	7885      	ldrb	r5, [r0, #2]
 80177cc:	fb08 3805 	mla	r8, r8, r5, r3
 80177d0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80177d4:	fb13 f302 	smulbb	r3, r3, r2
 80177d8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80177dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80177de:	fb08 380a 	mla	r8, r8, sl, r3
 80177e2:	fa1f f888 	uxth.w	r8, r8
 80177e6:	f108 0301 	add.w	r3, r8, #1
 80177ea:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80177ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80177f0:	4413      	add	r3, r2
 80177f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80177f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80177f8:	9325      	str	r3, [sp, #148]	; 0x94
 80177fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80177fc:	f807 8c04 	strb.w	r8, [r7, #-4]
 8017800:	4413      	add	r3, r2
 8017802:	9326      	str	r3, [sp, #152]	; 0x98
 8017804:	e6d6      	b.n	80175b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8017806:	b151      	cbz	r1, 801781e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8017808:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801780c:	4630      	mov	r0, r6
 801780e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017812:	4422      	add	r2, r4
 8017814:	4635      	mov	r5, r6
 8017816:	e772      	b.n	80176fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8017818:	4630      	mov	r0, r6
 801781a:	4632      	mov	r2, r6
 801781c:	e76f      	b.n	80176fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801781e:	4630      	mov	r0, r6
 8017820:	4632      	mov	r2, r6
 8017822:	e7f7      	b.n	8017814 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017824:	b013      	add	sp, #76	; 0x4c
 8017826:	ecbd 8b08 	vpop	{d8-d11}
 801782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017830 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	784d      	ldrb	r5, [r1, #1]
 8017836:	f891 9002 	ldrb.w	r9, [r1, #2]
 801783a:	022d      	lsls	r5, r5, #8
 801783c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8017840:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8017844:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8017848:	f891 9000 	ldrb.w	r9, [r1]
 801784c:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8017850:	ea45 0509 	orr.w	r5, r5, r9
 8017854:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017858:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801785c:	9501      	str	r5, [sp, #4]
 801785e:	fb06 470c 	mla	r7, r6, ip, r4
 8017862:	2e00      	cmp	r6, #0
 8017864:	eb02 0e07 	add.w	lr, r2, r7
 8017868:	db46      	blt.n	80178f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801786a:	45b0      	cmp	r8, r6
 801786c:	dd44      	ble.n	80178f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801786e:	2c00      	cmp	r4, #0
 8017870:	db40      	blt.n	80178f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8017872:	45a4      	cmp	ip, r4
 8017874:	dd3e      	ble.n	80178f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8017876:	5dd7      	ldrb	r7, [r2, r7]
 8017878:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801787c:	441f      	add	r7, r3
 801787e:	1c62      	adds	r2, r4, #1
 8017880:	d43d      	bmi.n	80178fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017882:	4594      	cmp	ip, r2
 8017884:	dd3b      	ble.n	80178fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8017886:	f1ba 0f00 	cmp.w	sl, #0
 801788a:	d038      	beq.n	80178fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801788c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8017890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017894:	441d      	add	r5, r3
 8017896:	3601      	adds	r6, #1
 8017898:	d435      	bmi.n	8017906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801789a:	45b0      	cmp	r8, r6
 801789c:	dd33      	ble.n	8017906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801789e:	b390      	cbz	r0, 8017906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80178a0:	2c00      	cmp	r4, #0
 80178a2:	db2e      	blt.n	8017902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80178a4:	45a4      	cmp	ip, r4
 80178a6:	dd2c      	ble.n	8017902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80178a8:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80178ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80178b0:	441e      	add	r6, r3
 80178b2:	1c62      	adds	r2, r4, #1
 80178b4:	d42a      	bmi.n	801790c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80178b6:	4594      	cmp	ip, r2
 80178b8:	dd28      	ble.n	801790c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80178ba:	f1ba 0f00 	cmp.w	sl, #0
 80178be:	d025      	beq.n	801790c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80178c0:	44f4      	add	ip, lr
 80178c2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80178c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80178ca:	4413      	add	r3, r2
 80178cc:	f1ba 0f0f 	cmp.w	sl, #15
 80178d0:	f897 8000 	ldrb.w	r8, [r7]
 80178d4:	f895 9000 	ldrb.w	r9, [r5]
 80178d8:	f896 e000 	ldrb.w	lr, [r6]
 80178dc:	f893 c000 	ldrb.w	ip, [r3]
 80178e0:	d801      	bhi.n	80178e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80178e2:	280f      	cmp	r0, #15
 80178e4:	d914      	bls.n	8017910 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 80178e6:	4b29      	ldr	r3, [pc, #164]	; (801798c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 80178e8:	f240 1157 	movw	r1, #343	; 0x157
 80178ec:	4a28      	ldr	r2, [pc, #160]	; (8017990 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80178ee:	4829      	ldr	r0, [pc, #164]	; (8017994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80178f0:	f004 fcf4 	bl	801c2dc <__assert_func>
 80178f4:	af01      	add	r7, sp, #4
 80178f6:	e7c2      	b.n	801787e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80178f8:	ad01      	add	r5, sp, #4
 80178fa:	462f      	mov	r7, r5
 80178fc:	e7cb      	b.n	8017896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80178fe:	ad01      	add	r5, sp, #4
 8017900:	e7c9      	b.n	8017896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8017902:	ae01      	add	r6, sp, #4
 8017904:	e7d5      	b.n	80178b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8017906:	ab01      	add	r3, sp, #4
 8017908:	461e      	mov	r6, r3
 801790a:	e7df      	b.n	80178cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801790c:	ab01      	add	r3, sp, #4
 801790e:	e7dd      	b.n	80178cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8017910:	fa1f f48a 	uxth.w	r4, sl
 8017914:	b280      	uxth	r0, r0
 8017916:	fb04 fa00 	mul.w	sl, r4, r0
 801791a:	0124      	lsls	r4, r4, #4
 801791c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017920:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8017924:	b282      	uxth	r2, r0
 8017926:	eba4 000a 	sub.w	r0, r4, sl
 801792a:	ebab 0b02 	sub.w	fp, fp, r2
 801792e:	b280      	uxth	r0, r0
 8017930:	fa1f fb8b 	uxth.w	fp, fp
 8017934:	fb00 f909 	mul.w	r9, r0, r9
 8017938:	fb0b 9808 	mla	r8, fp, r8, r9
 801793c:	fb02 8e0e 	mla	lr, r2, lr, r8
 8017940:	fb0a ec0c 	mla	ip, sl, ip, lr
 8017944:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017948:	f881 c000 	strb.w	ip, [r1]
 801794c:	786c      	ldrb	r4, [r5, #1]
 801794e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8017952:	4344      	muls	r4, r0
 8017954:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8017958:	7874      	ldrb	r4, [r6, #1]
 801795a:	fb02 cc04 	mla	ip, r2, r4, ip
 801795e:	785c      	ldrb	r4, [r3, #1]
 8017960:	fb0a c404 	mla	r4, sl, r4, ip
 8017964:	1224      	asrs	r4, r4, #8
 8017966:	704c      	strb	r4, [r1, #1]
 8017968:	78ad      	ldrb	r5, [r5, #2]
 801796a:	78bc      	ldrb	r4, [r7, #2]
 801796c:	4368      	muls	r0, r5
 801796e:	fb0b 0b04 	mla	fp, fp, r4, r0
 8017972:	78b0      	ldrb	r0, [r6, #2]
 8017974:	fb02 b000 	mla	r0, r2, r0, fp
 8017978:	789a      	ldrb	r2, [r3, #2]
 801797a:	fb0a 0a02 	mla	sl, sl, r2, r0
 801797e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017982:	f881 a002 	strb.w	sl, [r1, #2]
 8017986:	b003      	add	sp, #12
 8017988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798c:	080205d7 	.word	0x080205d7
 8017990:	08020a8e 	.word	0x08020a8e
 8017994:	0802065f 	.word	0x0802065f

08017998 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799c:	ed2d 8b0a 	vpush	{d8-d12}
 80179a0:	b08d      	sub	sp, #52	; 0x34
 80179a2:	eeb0 aa40 	vmov.f32	s20, s0
 80179a6:	eef0 9a60 	vmov.f32	s19, s1
 80179aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80179ac:	eeb0 9a41 	vmov.f32	s18, s2
 80179b0:	9306      	str	r3, [sp, #24]
 80179b2:	eeb0 8a62 	vmov.f32	s16, s5
 80179b6:	eef0 8a43 	vmov.f32	s17, s6
 80179ba:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80179bc:	eeb0 ca44 	vmov.f32	s24, s8
 80179c0:	eef0 ba64 	vmov.f32	s23, s9
 80179c4:	eeb0 ba45 	vmov.f32	s22, s10
 80179c8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80179cc:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80179d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80179d2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80179d6:	6850      	ldr	r0, [r2, #4]
 80179d8:	6812      	ldr	r2, [r2, #0]
 80179da:	fb00 1303 	mla	r3, r0, r3, r1
 80179de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80179e2:	18d3      	adds	r3, r2, r3
 80179e4:	9307      	str	r3, [sp, #28]
 80179e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	9308      	str	r3, [sp, #32]
 80179ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80179ee:	685d      	ldr	r5, [r3, #4]
 80179f0:	3504      	adds	r5, #4
 80179f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	dc03      	bgt.n	8017a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80179f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	f340 81e6 	ble.w	8017dcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8017a00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017a02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017a06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017a0a:	1e48      	subs	r0, r1, #1
 8017a0c:	1e56      	subs	r6, r2, #1
 8017a0e:	9b06      	ldr	r3, [sp, #24]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f340 80bd 	ble.w	8017b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8017a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017a18:	1427      	asrs	r7, r4, #16
 8017a1a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017a1e:	d406      	bmi.n	8017a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a20:	4287      	cmp	r7, r0
 8017a22:	da04      	bge.n	8017a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	db02      	blt.n	8017a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a28:	42b3      	cmp	r3, r6
 8017a2a:	f2c0 80b2 	blt.w	8017b92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017a2e:	3701      	adds	r7, #1
 8017a30:	f100 80a1 	bmi.w	8017b76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a34:	42b9      	cmp	r1, r7
 8017a36:	f2c0 809e 	blt.w	8017b76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a3a:	3301      	adds	r3, #1
 8017a3c:	f100 809b 	bmi.w	8017b76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a40:	429a      	cmp	r2, r3
 8017a42:	f2c0 8098 	blt.w	8017b76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8017a46:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017a4a:	f1bb 0f00 	cmp.w	fp, #0
 8017a4e:	f340 80bf 	ble.w	8017bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8017a52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017a54:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017a56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017a58:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017a5c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017a60:	1420      	asrs	r0, r4, #16
 8017a62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017a64:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017a68:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017a6c:	6892      	ldr	r2, [r2, #8]
 8017a6e:	f100 8103 	bmi.w	8017c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a72:	f102 3eff 	add.w	lr, r2, #4294967295
 8017a76:	4570      	cmp	r0, lr
 8017a78:	f280 80fe 	bge.w	8017c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a7c:	2f00      	cmp	r7, #0
 8017a7e:	f2c0 80fb 	blt.w	8017c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a82:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017a86:	4577      	cmp	r7, lr
 8017a88:	f280 80f6 	bge.w	8017c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8017a8c:	b212      	sxth	r2, r2
 8017a8e:	fb07 0002 	mla	r0, r7, r2, r0
 8017a92:	9f08      	ldr	r7, [sp, #32]
 8017a94:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017a98:	eb07 0e00 	add.w	lr, r7, r0
 8017a9c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017aa0:	eb05 0c08 	add.w	ip, r5, r8
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f000 80d8 	beq.w	8017c5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8017aaa:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8017aae:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017ab2:	442f      	add	r7, r5
 8017ab4:	2900      	cmp	r1, #0
 8017ab6:	f000 80d9 	beq.w	8017c6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8017aba:	eb0e 0002 	add.w	r0, lr, r2
 8017abe:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017ac2:	7840      	ldrb	r0, [r0, #1]
 8017ac4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ac8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017acc:	442a      	add	r2, r5
 8017ace:	4428      	add	r0, r5
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	f815 a008 	ldrb.w	sl, [r5, r8]
 8017ad6:	b289      	uxth	r1, r1
 8017ad8:	f897 8000 	ldrb.w	r8, [r7]
 8017adc:	fb03 f901 	mul.w	r9, r3, r1
 8017ae0:	011b      	lsls	r3, r3, #4
 8017ae2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017ae6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017aea:	eba3 0309 	sub.w	r3, r3, r9
 8017aee:	b289      	uxth	r1, r1
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	ebae 0e01 	sub.w	lr, lr, r1
 8017af6:	fb03 f808 	mul.w	r8, r3, r8
 8017afa:	fa1f fe8e 	uxth.w	lr, lr
 8017afe:	fb0e 880a 	mla	r8, lr, sl, r8
 8017b02:	f892 a000 	ldrb.w	sl, [r2]
 8017b06:	fb01 880a 	mla	r8, r1, sl, r8
 8017b0a:	f890 a000 	ldrb.w	sl, [r0]
 8017b0e:	fb09 880a 	mla	r8, r9, sl, r8
 8017b12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b16:	f886 8000 	strb.w	r8, [r6]
 8017b1a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017b1e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017b22:	fb03 f808 	mul.w	r8, r3, r8
 8017b26:	fb0e 880a 	mla	r8, lr, sl, r8
 8017b2a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017b2e:	fb01 880a 	mla	r8, r1, sl, r8
 8017b32:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017b36:	fb09 880a 	mla	r8, r9, sl, r8
 8017b3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017b3e:	f886 8001 	strb.w	r8, [r6, #1]
 8017b42:	78bf      	ldrb	r7, [r7, #2]
 8017b44:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017b48:	437b      	muls	r3, r7
 8017b4a:	7892      	ldrb	r2, [r2, #2]
 8017b4c:	fb0e 330c 	mla	r3, lr, ip, r3
 8017b50:	fb01 3102 	mla	r1, r1, r2, r3
 8017b54:	7882      	ldrb	r2, [r0, #2]
 8017b56:	fb09 1902 	mla	r9, r9, r2, r1
 8017b5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b5e:	f886 9002 	strb.w	r9, [r6, #2]
 8017b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017b64:	3603      	adds	r6, #3
 8017b66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017b68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b6c:	441c      	add	r4, r3
 8017b6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b70:	4413      	add	r3, r2
 8017b72:	9322      	str	r3, [sp, #136]	; 0x88
 8017b74:	e769      	b.n	8017a4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017b76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017b78:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8017b7a:	441c      	add	r4, r3
 8017b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b7e:	443b      	add	r3, r7
 8017b80:	9322      	str	r3, [sp, #136]	; 0x88
 8017b82:	9b06      	ldr	r3, [sp, #24]
 8017b84:	3b01      	subs	r3, #1
 8017b86:	9306      	str	r3, [sp, #24]
 8017b88:	9b07      	ldr	r3, [sp, #28]
 8017b8a:	3303      	adds	r3, #3
 8017b8c:	9307      	str	r3, [sp, #28]
 8017b8e:	e73e      	b.n	8017a0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b90:	d026      	beq.n	8017be0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017b92:	9b06      	ldr	r3, [sp, #24]
 8017b94:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017b96:	3b01      	subs	r3, #1
 8017b98:	fb00 4003 	mla	r0, r0, r3, r4
 8017b9c:	1400      	asrs	r0, r0, #16
 8017b9e:	f53f af52 	bmi.w	8017a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017ba2:	3901      	subs	r1, #1
 8017ba4:	4288      	cmp	r0, r1
 8017ba6:	f6bf af4e 	bge.w	8017a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017baa:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017bac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017bae:	fb01 0303 	mla	r3, r1, r3, r0
 8017bb2:	141b      	asrs	r3, r3, #16
 8017bb4:	f53f af47 	bmi.w	8017a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017bb8:	3a01      	subs	r2, #1
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	f6bf af43 	bge.w	8017a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017bc0:	9b07      	ldr	r3, [sp, #28]
 8017bc2:	f8dd a018 	ldr.w	sl, [sp, #24]
 8017bc6:	f103 0803 	add.w	r8, r3, #3
 8017bca:	f1ba 0f00 	cmp.w	sl, #0
 8017bce:	dc71      	bgt.n	8017cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017bd0:	9b06      	ldr	r3, [sp, #24]
 8017bd2:	9a07      	ldr	r2, [sp, #28]
 8017bd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017bd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017bdc:	441a      	add	r2, r3
 8017bde:	9207      	str	r2, [sp, #28]
 8017be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	f340 80f2 	ble.w	8017dcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8017be8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017bee:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017bf2:	eef0 6a48 	vmov.f32	s13, s16
 8017bf6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017bfa:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017bfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c02:	ee16 4a90 	vmov	r4, s13
 8017c06:	eef0 6a68 	vmov.f32	s13, s17
 8017c0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c0e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8017c12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017c16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017c1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017c1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017c22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017c26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017c2a:	ee18 2a10 	vmov	r2, s16
 8017c2e:	eeb0 8a47 	vmov.f32	s16, s14
 8017c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c36:	ee18 2a90 	vmov	r2, s17
 8017c3a:	9323      	str	r3, [sp, #140]	; 0x8c
 8017c3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c3e:	eef0 8a67 	vmov.f32	s17, s15
 8017c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8017c46:	9324      	str	r3, [sp, #144]	; 0x90
 8017c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c52:	bf08      	it	eq
 8017c54:	4613      	moveq	r3, r2
 8017c56:	9306      	str	r3, [sp, #24]
 8017c58:	e6cb      	b.n	80179f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017c5a:	b151      	cbz	r1, 8017c72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8017c5c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017c60:	4660      	mov	r0, ip
 8017c62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c66:	442a      	add	r2, r5
 8017c68:	4667      	mov	r7, ip
 8017c6a:	e731      	b.n	8017ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017c6c:	4660      	mov	r0, ip
 8017c6e:	4662      	mov	r2, ip
 8017c70:	e72e      	b.n	8017ad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017c72:	4660      	mov	r0, ip
 8017c74:	4662      	mov	r2, ip
 8017c76:	e7f7      	b.n	8017c68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8017c78:	f110 0e01 	adds.w	lr, r0, #1
 8017c7c:	f53f af71 	bmi.w	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c80:	4572      	cmp	r2, lr
 8017c82:	f6ff af6e 	blt.w	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c86:	f117 0e01 	adds.w	lr, r7, #1
 8017c8a:	f53f af6a 	bmi.w	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c8e:	45f4      	cmp	ip, lr
 8017c90:	f6ff af67 	blt.w	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017c94:	b212      	sxth	r2, r2
 8017c96:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017c9a:	fa0f f38c 	sxth.w	r3, ip
 8017c9e:	9200      	str	r2, [sp, #0]
 8017ca0:	4631      	mov	r1, r6
 8017ca2:	9a08      	ldr	r2, [sp, #32]
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	462b      	mov	r3, r5
 8017ca8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8017cac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017cae:	f7ff fdbf 	bl	8017830 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8017cb2:	e756      	b.n	8017b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017cb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017cb6:	1426      	asrs	r6, r4, #16
 8017cb8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017cba:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017cbe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017cc2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017cc4:	1400      	asrs	r0, r0, #16
 8017cc6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017cca:	fb02 6000 	mla	r0, r2, r0, r6
 8017cce:	9e08      	ldr	r6, [sp, #32]
 8017cd0:	f816 e000 	ldrb.w	lr, [r6, r0]
 8017cd4:	eb06 0c00 	add.w	ip, r6, r0
 8017cd8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017cdc:	eb05 070e 	add.w	r7, r5, lr
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d064      	beq.n	8017dae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8017ce4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8017ce8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017cec:	442e      	add	r6, r5
 8017cee:	2900      	cmp	r1, #0
 8017cf0:	d066      	beq.n	8017dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8017cf2:	eb0c 0002 	add.w	r0, ip, r2
 8017cf6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017cfa:	7840      	ldrb	r0, [r0, #1]
 8017cfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017d04:	442a      	add	r2, r5
 8017d06:	4428      	add	r0, r5
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8017d0e:	b289      	uxth	r1, r1
 8017d10:	f896 e000 	ldrb.w	lr, [r6]
 8017d14:	f108 0803 	add.w	r8, r8, #3
 8017d18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d1c:	fb03 f901 	mul.w	r9, r3, r1
 8017d20:	011b      	lsls	r3, r3, #4
 8017d22:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017d26:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017d2a:	eba3 0309 	sub.w	r3, r3, r9
 8017d2e:	b289      	uxth	r1, r1
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	ebac 0c01 	sub.w	ip, ip, r1
 8017d36:	fb03 fe0e 	mul.w	lr, r3, lr
 8017d3a:	fa1f fc8c 	uxth.w	ip, ip
 8017d3e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017d42:	f892 b000 	ldrb.w	fp, [r2]
 8017d46:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017d4a:	f890 b000 	ldrb.w	fp, [r0]
 8017d4e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017d52:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017d56:	f808 ec06 	strb.w	lr, [r8, #-6]
 8017d5a:	f896 e001 	ldrb.w	lr, [r6, #1]
 8017d5e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017d62:	fb03 fe0e 	mul.w	lr, r3, lr
 8017d66:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017d6a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017d6e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017d72:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017d76:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017d7a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017d7e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017d82:	78b6      	ldrb	r6, [r6, #2]
 8017d84:	78bf      	ldrb	r7, [r7, #2]
 8017d86:	4373      	muls	r3, r6
 8017d88:	7896      	ldrb	r6, [r2, #2]
 8017d8a:	7882      	ldrb	r2, [r0, #2]
 8017d8c:	fb0c 3307 	mla	r3, ip, r7, r3
 8017d90:	fb01 3306 	mla	r3, r1, r6, r3
 8017d94:	fb09 3902 	mla	r9, r9, r2, r3
 8017d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017d9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017d9c:	441c      	add	r4, r3
 8017d9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017da0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017da4:	4413      	add	r3, r2
 8017da6:	f808 9c04 	strb.w	r9, [r8, #-4]
 8017daa:	9322      	str	r3, [sp, #136]	; 0x88
 8017dac:	e70d      	b.n	8017bca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8017dae:	b151      	cbz	r1, 8017dc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8017db0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017db4:	4638      	mov	r0, r7
 8017db6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017dba:	442a      	add	r2, r5
 8017dbc:	463e      	mov	r6, r7
 8017dbe:	e7a3      	b.n	8017d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017dc0:	4638      	mov	r0, r7
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	e7a0      	b.n	8017d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8017dc6:	4638      	mov	r0, r7
 8017dc8:	463a      	mov	r2, r7
 8017dca:	e7f7      	b.n	8017dbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8017dcc:	b00d      	add	sp, #52	; 0x34
 8017dce:	ecbd 8b0a 	vpop	{d8-d12}
 8017dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017dd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8017dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ddc:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8017de0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8017de4:	2d00      	cmp	r5, #0
 8017de6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8017dea:	fb05 040e 	mla	r4, r5, lr, r0
 8017dee:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017df2:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8017df6:	eb02 0804 	add.w	r8, r2, r4
 8017dfa:	db40      	blt.n	8017e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017dfc:	45a9      	cmp	r9, r5
 8017dfe:	dd3e      	ble.n	8017e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8017e00:	2800      	cmp	r0, #0
 8017e02:	db3a      	blt.n	8017e7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017e04:	4586      	cmp	lr, r0
 8017e06:	dd38      	ble.n	8017e7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8017e08:	5d12      	ldrb	r2, [r2, r4]
 8017e0a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017e0e:	1c42      	adds	r2, r0, #1
 8017e10:	d438      	bmi.n	8017e84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017e12:	4596      	cmp	lr, r2
 8017e14:	dd36      	ble.n	8017e84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8017e16:	b3bf      	cbz	r7, 8017e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8017e18:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017e1c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017e20:	3501      	adds	r5, #1
 8017e22:	d435      	bmi.n	8017e90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017e24:	45a9      	cmp	r9, r5
 8017e26:	dd33      	ble.n	8017e90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8017e28:	f1bc 0f00 	cmp.w	ip, #0
 8017e2c:	d033      	beq.n	8017e96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8017e2e:	2800      	cmp	r0, #0
 8017e30:	db2c      	blt.n	8017e8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e32:	4586      	cmp	lr, r0
 8017e34:	dd2a      	ble.n	8017e8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8017e36:	f818 200e 	ldrb.w	r2, [r8, lr]
 8017e3a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017e3e:	3001      	adds	r0, #1
 8017e40:	d42c      	bmi.n	8017e9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017e42:	4586      	cmp	lr, r0
 8017e44:	dd2a      	ble.n	8017e9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8017e46:	b35f      	cbz	r7, 8017ea0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8017e48:	44c6      	add	lr, r8
 8017e4a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017e4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017e52:	2f0f      	cmp	r7, #15
 8017e54:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017e58:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8017e5c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017e60:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8017e64:	d802      	bhi.n	8017e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8017e66:	f1bc 0f0f 	cmp.w	ip, #15
 8017e6a:	d91b      	bls.n	8017ea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8017e6c:	4b77      	ldr	r3, [pc, #476]	; (801804c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8017e6e:	f240 1157 	movw	r1, #343	; 0x157
 8017e72:	4a77      	ldr	r2, [pc, #476]	; (8018050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8017e74:	4877      	ldr	r0, [pc, #476]	; (8018054 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8017e76:	f004 fa31 	bl	801c2dc <__assert_func>
 8017e7a:	2600      	movs	r6, #0
 8017e7c:	e7c7      	b.n	8017e0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8017e7e:	2400      	movs	r4, #0
 8017e80:	4626      	mov	r6, r4
 8017e82:	e7cd      	b.n	8017e20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e84:	2400      	movs	r4, #0
 8017e86:	e7cb      	b.n	8017e20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e88:	463c      	mov	r4, r7
 8017e8a:	e7c9      	b.n	8017e20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8017e8c:	2500      	movs	r5, #0
 8017e8e:	e7d6      	b.n	8017e3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8017e90:	2200      	movs	r2, #0
 8017e92:	4615      	mov	r5, r2
 8017e94:	e7dd      	b.n	8017e52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e96:	4662      	mov	r2, ip
 8017e98:	4665      	mov	r5, ip
 8017e9a:	e7da      	b.n	8017e52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	e7d8      	b.n	8017e52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017ea0:	463a      	mov	r2, r7
 8017ea2:	e7d6      	b.n	8017e52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8017ea4:	b2bf      	uxth	r7, r7
 8017ea6:	fa1f f08c 	uxth.w	r0, ip
 8017eaa:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8017eae:	fb00 fe07 	mul.w	lr, r0, r7
 8017eb2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8017eb6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8017eba:	ebac 070e 	sub.w	r7, ip, lr
 8017ebe:	b280      	uxth	r0, r0
 8017ec0:	b2bf      	uxth	r7, r7
 8017ec2:	1a1b      	subs	r3, r3, r0
 8017ec4:	fb07 fc0a 	mul.w	ip, r7, sl
 8017ec8:	b29b      	uxth	r3, r3
 8017eca:	fb03 cc0b 	mla	ip, r3, fp, ip
 8017ece:	9300      	str	r3, [sp, #0]
 8017ed0:	fb00 cc09 	mla	ip, r0, r9, ip
 8017ed4:	fb0e cc08 	mla	ip, lr, r8, ip
 8017ed8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	f000 80b0 	beq.w	8018044 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8017ee4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8017ee8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017eec:	fb0b fc0c 	mul.w	ip, fp, ip
 8017ef0:	fb0b f606 	mul.w	r6, fp, r6
 8017ef4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8017ef8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017efc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8017f00:	44dc      	add	ip, fp
 8017f02:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017f06:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017f0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f0e:	fb0a fb0b 	mul.w	fp, sl, fp
 8017f12:	fb0a fa04 	mul.w	sl, sl, r4
 8017f16:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8017f1a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8017f1e:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8017f22:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017f26:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017f2a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017f2e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8017f32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f36:	0a36      	lsrs	r6, r6, #8
 8017f38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017f3c:	44dc      	add	ip, fp
 8017f3e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8017f42:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017f46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017f4a:	fb09 fb0b 	mul.w	fp, r9, fp
 8017f4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f52:	fb09 f905 	mul.w	r9, r9, r5
 8017f56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017f5a:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8017f5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017f62:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8017f66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017f6a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017f6e:	fb0c fc07 	mul.w	ip, ip, r7
 8017f72:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8017f76:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8017f7a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017f7e:	445c      	add	r4, fp
 8017f80:	fb08 f505 	mul.w	r5, r8, r5
 8017f84:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017f88:	fb08 f802 	mul.w	r8, r8, r2
 8017f8c:	0a24      	lsrs	r4, r4, #8
 8017f8e:	0a2a      	lsrs	r2, r5, #8
 8017f90:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8017f94:	fb07 f70a 	mul.w	r7, r7, sl
 8017f98:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017f9c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017fa0:	4415      	add	r5, r2
 8017fa2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8017fa6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017faa:	9a00      	ldr	r2, [sp, #0]
 8017fac:	0a2d      	lsrs	r5, r5, #8
 8017fae:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017fb2:	fb03 cc02 	mla	ip, r3, r2, ip
 8017fb6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017fba:	fb02 7306 	mla	r3, r2, r6, r7
 8017fbe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017fc2:	9a01      	ldr	r2, [sp, #4]
 8017fc4:	fb05 c50e 	mla	r5, r5, lr, ip
 8017fc8:	fb0e 3e08 	mla	lr, lr, r8, r3
 8017fcc:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8017fd0:	fb04 5400 	mla	r4, r4, r0, r5
 8017fd4:	fb00 e303 	mla	r3, r0, r3, lr
 8017fd8:	0a24      	lsrs	r4, r4, #8
 8017fda:	0a1b      	lsrs	r3, r3, #8
 8017fdc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017fe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fe4:	431c      	orrs	r4, r3
 8017fe6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	b2e0      	uxtb	r0, r4
 8017fee:	435a      	muls	r2, r3
 8017ff0:	fb10 f003 	smulbb	r0, r0, r3
 8017ff4:	1c55      	adds	r5, r2, #1
 8017ff6:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8017ffa:	780a      	ldrb	r2, [r1, #0]
 8017ffc:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8018000:	b2ed      	uxtb	r5, r5
 8018002:	fb02 0205 	mla	r2, r2, r5, r0
 8018006:	b292      	uxth	r2, r2
 8018008:	1c50      	adds	r0, r2, #1
 801800a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801800e:	7848      	ldrb	r0, [r1, #1]
 8018010:	fb10 f005 	smulbb	r0, r0, r5
 8018014:	1212      	asrs	r2, r2, #8
 8018016:	700a      	strb	r2, [r1, #0]
 8018018:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801801c:	0c24      	lsrs	r4, r4, #16
 801801e:	fb02 0203 	mla	r2, r2, r3, r0
 8018022:	b292      	uxth	r2, r2
 8018024:	1c50      	adds	r0, r2, #1
 8018026:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801802a:	1212      	asrs	r2, r2, #8
 801802c:	704a      	strb	r2, [r1, #1]
 801802e:	788a      	ldrb	r2, [r1, #2]
 8018030:	fb12 f505 	smulbb	r5, r2, r5
 8018034:	fb04 5303 	mla	r3, r4, r3, r5
 8018038:	b29b      	uxth	r3, r3
 801803a:	1c5a      	adds	r2, r3, #1
 801803c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018040:	121b      	asrs	r3, r3, #8
 8018042:	708b      	strb	r3, [r1, #2]
 8018044:	b003      	add	sp, #12
 8018046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801804a:	bf00      	nop
 801804c:	080205d7 	.word	0x080205d7
 8018050:	08020a8e 	.word	0x08020a8e
 8018054:	0802065f 	.word	0x0802065f

08018058 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	ed2d 8b08 	vpush	{d8-d11}
 8018060:	b09f      	sub	sp, #124	; 0x7c
 8018062:	eeb0 aa40 	vmov.f32	s20, s0
 8018066:	eef0 9a60 	vmov.f32	s19, s1
 801806a:	921b      	str	r2, [sp, #108]	; 0x6c
 801806c:	eeb0 9a41 	vmov.f32	s18, s2
 8018070:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8018072:	eeb0 8a62 	vmov.f32	s16, s5
 8018076:	9309      	str	r3, [sp, #36]	; 0x24
 8018078:	eef0 8a43 	vmov.f32	s17, s6
 801807c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8018080:	eef0 ba44 	vmov.f32	s23, s8
 8018084:	901d      	str	r0, [sp, #116]	; 0x74
 8018086:	eeb0 ba64 	vmov.f32	s22, s9
 801808a:	931c      	str	r3, [sp, #112]	; 0x70
 801808c:	eef0 aa45 	vmov.f32	s21, s10
 8018090:	6850      	ldr	r0, [r2, #4]
 8018092:	9119      	str	r1, [sp, #100]	; 0x64
 8018094:	6812      	ldr	r2, [r2, #0]
 8018096:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8018098:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801809c:	fb00 1303 	mla	r3, r0, r3, r1
 80180a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180a4:	18d3      	adds	r3, r2, r3
 80180a6:	930c      	str	r3, [sp, #48]	; 0x30
 80180a8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	9312      	str	r3, [sp, #72]	; 0x48
 80180ae:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80180b0:	685e      	ldr	r6, [r3, #4]
 80180b2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80180b6:	3604      	adds	r6, #4
 80180b8:	930d      	str	r3, [sp, #52]	; 0x34
 80180ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80180bc:	2b00      	cmp	r3, #0
 80180be:	dc03      	bgt.n	80180c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80180c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	f340 8378 	ble.w	80187b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80180c8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80180ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80180ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80180d2:	1e48      	subs	r0, r1, #1
 80180d4:	1e57      	subs	r7, r2, #1
 80180d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180d8:	2b00      	cmp	r3, #0
 80180da:	f340 818c 	ble.w	80183f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80180de:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80180e0:	142b      	asrs	r3, r5, #16
 80180e2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80180e6:	d406      	bmi.n	80180f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180e8:	4584      	cmp	ip, r0
 80180ea:	da04      	bge.n	80180f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	db02      	blt.n	80180f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180f0:	42bb      	cmp	r3, r7
 80180f2:	f2c0 8181 	blt.w	80183f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80180f6:	f11c 0c01 	adds.w	ip, ip, #1
 80180fa:	f100 816f 	bmi.w	80183dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80180fe:	4561      	cmp	r1, ip
 8018100:	f2c0 816c 	blt.w	80183dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018104:	3301      	adds	r3, #1
 8018106:	f100 8169 	bmi.w	80183dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801810a:	429a      	cmp	r2, r3
 801810c:	f2c0 8166 	blt.w	80183dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018112:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018114:	931a      	str	r3, [sp, #104]	; 0x68
 8018116:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018118:	2b00      	cmp	r3, #0
 801811a:	f340 818c 	ble.w	8018436 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801811e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018120:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018124:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018128:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801812c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801812e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8018132:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018134:	141b      	asrs	r3, r3, #16
 8018136:	f100 81d0 	bmi.w	80184da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801813a:	f100 38ff 	add.w	r8, r0, #4294967295
 801813e:	4543      	cmp	r3, r8
 8018140:	f280 81cb 	bge.w	80184da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018144:	f1bc 0f00 	cmp.w	ip, #0
 8018148:	f2c0 81c7 	blt.w	80184da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801814c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018150:	45c4      	cmp	ip, r8
 8018152:	f280 81c2 	bge.w	80184da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018156:	b200      	sxth	r0, r0
 8018158:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801815a:	fb0c 3300 	mla	r3, ip, r0, r3
 801815e:	eb04 0803 	add.w	r8, r4, r3
 8018162:	5ce3      	ldrb	r3, [r4, r3]
 8018164:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018168:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801816c:	2a00      	cmp	r2, #0
 801816e:	f000 81a9 	beq.w	80184c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8018172:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018176:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801817a:	940e      	str	r4, [sp, #56]	; 0x38
 801817c:	0e24      	lsrs	r4, r4, #24
 801817e:	9415      	str	r4, [sp, #84]	; 0x54
 8018180:	b179      	cbz	r1, 80181a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018182:	eb08 0c00 	add.w	ip, r8, r0
 8018186:	f818 0000 	ldrb.w	r0, [r8, r0]
 801818a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801818e:	900a      	str	r0, [sp, #40]	; 0x28
 8018190:	0e00      	lsrs	r0, r0, #24
 8018192:	9013      	str	r0, [sp, #76]	; 0x4c
 8018194:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018198:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801819c:	900f      	str	r0, [sp, #60]	; 0x3c
 801819e:	0e00      	lsrs	r0, r0, #24
 80181a0:	9016      	str	r0, [sp, #88]	; 0x58
 80181a2:	b292      	uxth	r2, r2
 80181a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80181a6:	b289      	uxth	r1, r1
 80181a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80181aa:	fb02 f901 	mul.w	r9, r2, r1
 80181ae:	0112      	lsls	r2, r2, #4
 80181b0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80181b4:	eba2 0809 	sub.w	r8, r2, r9
 80181b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80181bc:	b289      	uxth	r1, r1
 80181be:	fa1f f888 	uxth.w	r8, r8
 80181c2:	1a52      	subs	r2, r2, r1
 80181c4:	fb08 f000 	mul.w	r0, r8, r0
 80181c8:	b292      	uxth	r2, r2
 80181ca:	fb02 000e 	mla	r0, r2, lr, r0
 80181ce:	fb01 0004 	mla	r0, r1, r4, r0
 80181d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80181d4:	fb09 0004 	mla	r0, r9, r4, r0
 80181d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80181dc:	2800      	cmp	r0, #0
 80181de:	f000 80f2 	beq.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80181e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80181e6:	d01b      	beq.n	8018220 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80181e8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80181ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80181f0:	fb0e fa0a 	mul.w	sl, lr, sl
 80181f4:	fb0e fe03 	mul.w	lr, lr, r3
 80181f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80181fc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018200:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018204:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018208:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801820c:	4453      	add	r3, sl
 801820e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018212:	0a1b      	lsrs	r3, r3, #8
 8018214:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018218:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801821c:	ea43 030c 	orr.w	r3, r3, ip
 8018220:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018222:	2cff      	cmp	r4, #255	; 0xff
 8018224:	d021      	beq.n	801826a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8018226:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018228:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801822c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801822e:	fb04 fb0b 	mul.w	fp, r4, fp
 8018232:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018234:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018238:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801823a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801823e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018242:	fb04 fa0a 	mul.w	sl, r4, sl
 8018246:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801824a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801824e:	44de      	add	lr, fp
 8018250:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018254:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018258:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801825c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018264:	ea4e 040a 	orr.w	r4, lr, sl
 8018268:	940e      	str	r4, [sp, #56]	; 0x38
 801826a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801826c:	2cff      	cmp	r4, #255	; 0xff
 801826e:	d021      	beq.n	80182b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8018270:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018272:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018276:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018278:	fb04 fb0b 	mul.w	fp, r4, fp
 801827c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801827e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018282:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018284:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018288:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801828c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018294:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018298:	44de      	add	lr, fp
 801829a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801829e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80182ae:	ea4e 040a 	orr.w	r4, lr, sl
 80182b2:	940a      	str	r4, [sp, #40]	; 0x28
 80182b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80182b6:	2cff      	cmp	r4, #255	; 0xff
 80182b8:	d021      	beq.n	80182fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80182ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80182bc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80182c0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80182c2:	fb04 fb0b 	mul.w	fp, r4, fp
 80182c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80182c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80182cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80182ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80182d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80182da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80182e2:	44de      	add	lr, fp
 80182e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80182e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80182ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80182f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80182f8:	ea4e 040a 	orr.w	r4, lr, sl
 80182fc:	940f      	str	r4, [sp, #60]	; 0x3c
 80182fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018300:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018308:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801830c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801830e:	fb08 fc0c 	mul.w	ip, r8, ip
 8018312:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018316:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801831a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801831c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018320:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018326:	fb09 cc0e 	mla	ip, r9, lr, ip
 801832a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801832e:	fb08 f80e 	mul.w	r8, r8, lr
 8018332:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018336:	fb02 8303 	mla	r3, r2, r3, r8
 801833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801833c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018340:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018346:	fb01 330a 	mla	r3, r1, sl, r3
 801834a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801834e:	fb09 3901 	mla	r9, r9, r1, r3
 8018352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018354:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018356:	4343      	muls	r3, r0
 8018358:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801835c:	1c58      	adds	r0, r3, #1
 801835e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018362:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018366:	ea4c 0c09 	orr.w	ip, ip, r9
 801836a:	783b      	ldrb	r3, [r7, #0]
 801836c:	fa5f f28c 	uxtb.w	r2, ip
 8018370:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018374:	fb12 f201 	smulbb	r2, r2, r1
 8018378:	b2c0      	uxtb	r0, r0
 801837a:	fb03 2300 	mla	r3, r3, r0, r2
 801837e:	b29b      	uxth	r3, r3
 8018380:	1c5a      	adds	r2, r3, #1
 8018382:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018386:	787a      	ldrb	r2, [r7, #1]
 8018388:	fb12 f200 	smulbb	r2, r2, r0
 801838c:	121b      	asrs	r3, r3, #8
 801838e:	703b      	strb	r3, [r7, #0]
 8018390:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018394:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018398:	fb03 2301 	mla	r3, r3, r1, r2
 801839c:	b29b      	uxth	r3, r3
 801839e:	1c5a      	adds	r2, r3, #1
 80183a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80183a4:	121b      	asrs	r3, r3, #8
 80183a6:	707b      	strb	r3, [r7, #1]
 80183a8:	78bb      	ldrb	r3, [r7, #2]
 80183aa:	fb13 f000 	smulbb	r0, r3, r0
 80183ae:	fb0c 0c01 	mla	ip, ip, r1, r0
 80183b2:	fa1f fc8c 	uxth.w	ip, ip
 80183b6:	f10c 0301 	add.w	r3, ip, #1
 80183ba:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80183be:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80183c2:	f887 c002 	strb.w	ip, [r7, #2]
 80183c6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80183c8:	3703      	adds	r7, #3
 80183ca:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80183cc:	441a      	add	r2, r3
 80183ce:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80183d0:	441d      	add	r5, r3
 80183d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80183d4:	9231      	str	r2, [sp, #196]	; 0xc4
 80183d6:	3b01      	subs	r3, #1
 80183d8:	931a      	str	r3, [sp, #104]	; 0x68
 80183da:	e69c      	b.n	8018116 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80183dc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80183de:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80183e0:	441c      	add	r4, r3
 80183e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80183e4:	441d      	add	r5, r3
 80183e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183e8:	9431      	str	r4, [sp, #196]	; 0xc4
 80183ea:	3b01      	subs	r3, #1
 80183ec:	9309      	str	r3, [sp, #36]	; 0x24
 80183ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183f0:	3303      	adds	r3, #3
 80183f2:	930c      	str	r3, [sp, #48]	; 0x30
 80183f4:	e66f      	b.n	80180d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80183f6:	d026      	beq.n	8018446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80183f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183fa:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80183fc:	3b01      	subs	r3, #1
 80183fe:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018400:	fb00 4003 	mla	r0, r0, r3, r4
 8018404:	1400      	asrs	r0, r0, #16
 8018406:	f53f ae83 	bmi.w	8018110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801840a:	3901      	subs	r1, #1
 801840c:	4288      	cmp	r0, r1
 801840e:	f6bf ae7f 	bge.w	8018110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018412:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8018414:	fb01 5303 	mla	r3, r1, r3, r5
 8018418:	141b      	asrs	r3, r3, #16
 801841a:	f53f ae79 	bmi.w	8018110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801841e:	3a01      	subs	r2, #1
 8018420:	4293      	cmp	r3, r2
 8018422:	f6bf ae75 	bge.w	8018110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018428:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801842c:	f103 0e03 	add.w	lr, r3, #3
 8018430:	f1bb 0f00 	cmp.w	fp, #0
 8018434:	dc71      	bgt.n	801851a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018438:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801843c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801843e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018442:	4423      	add	r3, r4
 8018444:	930c      	str	r3, [sp, #48]	; 0x30
 8018446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018448:	2b00      	cmp	r3, #0
 801844a:	f340 81b5 	ble.w	80187b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801844e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018452:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018454:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018458:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801845c:	eef0 6a48 	vmov.f32	s13, s16
 8018460:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018464:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018468:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801846c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8018470:	eef0 6a68 	vmov.f32	s13, s17
 8018474:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018478:	ee16 5a90 	vmov	r5, s13
 801847c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018480:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018484:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018488:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801848c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018490:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018494:	ee18 2a10 	vmov	r2, s16
 8018498:	eeb0 8a47 	vmov.f32	s16, s14
 801849c:	fb92 f3f3 	sdiv	r3, r2, r3
 80184a0:	ee18 2a90 	vmov	r2, s17
 80184a4:	9333      	str	r3, [sp, #204]	; 0xcc
 80184a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80184a8:	eef0 8a67 	vmov.f32	s17, s15
 80184ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80184b0:	9334      	str	r3, [sp, #208]	; 0xd0
 80184b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80184b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80184b6:	3b01      	subs	r3, #1
 80184b8:	9319      	str	r3, [sp, #100]	; 0x64
 80184ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80184bc:	bf08      	it	eq
 80184be:	4613      	moveq	r3, r2
 80184c0:	9309      	str	r3, [sp, #36]	; 0x24
 80184c2:	e5fa      	b.n	80180ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80184c4:	2900      	cmp	r1, #0
 80184c6:	f43f ae6c 	beq.w	80181a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80184ca:	f818 0000 	ldrb.w	r0, [r8, r0]
 80184ce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80184d2:	900a      	str	r0, [sp, #40]	; 0x28
 80184d4:	0e00      	lsrs	r0, r0, #24
 80184d6:	9013      	str	r0, [sp, #76]	; 0x4c
 80184d8:	e663      	b.n	80181a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80184da:	f113 0801 	adds.w	r8, r3, #1
 80184de:	f53f af72 	bmi.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184e2:	4540      	cmp	r0, r8
 80184e4:	f6ff af6f 	blt.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184e8:	f11c 0801 	adds.w	r8, ip, #1
 80184ec:	f53f af6b 	bmi.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184f0:	45c6      	cmp	lr, r8
 80184f2:	f6ff af68 	blt.w	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80184f6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80184f8:	b200      	sxth	r0, r0
 80184fa:	9302      	str	r3, [sp, #8]
 80184fc:	fa0f f38e 	sxth.w	r3, lr
 8018500:	9000      	str	r0, [sp, #0]
 8018502:	9301      	str	r3, [sp, #4]
 8018504:	4633      	mov	r3, r6
 8018506:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018508:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801850c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8018510:	4639      	mov	r1, r7
 8018512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018514:	f7ff fc60 	bl	8017dd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8018518:	e755      	b.n	80183c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801851a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801851c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018520:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8018522:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018526:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018528:	1427      	asrs	r7, r4, #16
 801852a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801852c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018530:	142b      	asrs	r3, r5, #16
 8018532:	fb01 7303 	mla	r3, r1, r3, r7
 8018536:	18e7      	adds	r7, r4, r3
 8018538:	5ce3      	ldrb	r3, [r4, r3]
 801853a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801853e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018542:	2a00      	cmp	r2, #0
 8018544:	f000 812e 	beq.w	80187a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8018548:	f897 8001 	ldrb.w	r8, [r7, #1]
 801854c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018550:	9410      	str	r4, [sp, #64]	; 0x40
 8018552:	0e24      	lsrs	r4, r4, #24
 8018554:	9417      	str	r4, [sp, #92]	; 0x5c
 8018556:	b170      	cbz	r0, 8018576 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8018558:	eb07 0801 	add.w	r8, r7, r1
 801855c:	5c79      	ldrb	r1, [r7, r1]
 801855e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018562:	910b      	str	r1, [sp, #44]	; 0x2c
 8018564:	0e09      	lsrs	r1, r1, #24
 8018566:	9114      	str	r1, [sp, #80]	; 0x50
 8018568:	f898 1001 	ldrb.w	r1, [r8, #1]
 801856c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018570:	9111      	str	r1, [sp, #68]	; 0x44
 8018572:	0e09      	lsrs	r1, r1, #24
 8018574:	9118      	str	r1, [sp, #96]	; 0x60
 8018576:	b292      	uxth	r2, r2
 8018578:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801857a:	b280      	uxth	r0, r0
 801857c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801857e:	fb02 f900 	mul.w	r9, r2, r0
 8018582:	0112      	lsls	r2, r2, #4
 8018584:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018588:	eba2 0809 	sub.w	r8, r2, r9
 801858c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018590:	b280      	uxth	r0, r0
 8018592:	fa1f f888 	uxth.w	r8, r8
 8018596:	1a12      	subs	r2, r2, r0
 8018598:	fb08 f101 	mul.w	r1, r8, r1
 801859c:	b292      	uxth	r2, r2
 801859e:	fb02 110c 	mla	r1, r2, ip, r1
 80185a2:	fb00 1104 	mla	r1, r0, r4, r1
 80185a6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80185a8:	fb09 1104 	mla	r1, r9, r4, r1
 80185ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80185b0:	2900      	cmp	r1, #0
 80185b2:	f000 80ec 	beq.w	801878e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80185b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80185ba:	d019      	beq.n	80185f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80185bc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80185c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80185c4:	fb0c fa0a 	mul.w	sl, ip, sl
 80185c8:	fb0c fc03 	mul.w	ip, ip, r3
 80185cc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80185d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80185d4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80185d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185dc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80185e0:	4453      	add	r3, sl
 80185e2:	0a3f      	lsrs	r7, r7, #8
 80185e4:	0a1b      	lsrs	r3, r3, #8
 80185e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80185ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80185ee:	433b      	orrs	r3, r7
 80185f0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80185f2:	2cff      	cmp	r4, #255	; 0xff
 80185f4:	d020      	beq.n	8018638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80185f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185f8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80185fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80185fe:	4367      	muls	r7, r4
 8018600:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018602:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018606:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801860a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801860c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018610:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018614:	fb04 fa0a 	mul.w	sl, r4, sl
 8018618:	44bc      	add	ip, r7
 801861a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801861e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018622:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018626:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801862a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801862e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018632:	ea4c 040a 	orr.w	r4, ip, sl
 8018636:	9410      	str	r4, [sp, #64]	; 0x40
 8018638:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801863a:	2cff      	cmp	r4, #255	; 0xff
 801863c:	d020      	beq.n	8018680 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801863e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018640:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018644:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018646:	4367      	muls	r7, r4
 8018648:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801864a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801864e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018652:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018654:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018658:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801865c:	fb04 fa0a 	mul.w	sl, r4, sl
 8018660:	44bc      	add	ip, r7
 8018662:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018666:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801866a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801866e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018672:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018676:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801867a:	ea4c 040a 	orr.w	r4, ip, sl
 801867e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018680:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018682:	2cff      	cmp	r4, #255	; 0xff
 8018684:	d020      	beq.n	80186c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8018686:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018688:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801868c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801868e:	4367      	muls	r7, r4
 8018690:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018692:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018696:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801869a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801869c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80186a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80186a8:	44bc      	add	ip, r7
 80186aa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80186ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80186b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80186c2:	ea4c 040a 	orr.w	r4, ip, sl
 80186c6:	9411      	str	r4, [sp, #68]	; 0x44
 80186c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80186ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80186ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80186d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80186d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80186d8:	fb08 f707 	mul.w	r7, r8, r7
 80186dc:	fb02 770c 	mla	r7, r2, ip, r7
 80186e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80186e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80186e6:	fb00 770c 	mla	r7, r0, ip, r7
 80186ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80186ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80186f0:	fb09 770c 	mla	r7, r9, ip, r7
 80186f4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80186f8:	fb08 f80c 	mul.w	r8, r8, ip
 80186fc:	0a3f      	lsrs	r7, r7, #8
 80186fe:	fb02 8303 	mla	r3, r2, r3, r8
 8018702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018704:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018708:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801870c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801870e:	fb00 330a 	mla	r3, r0, sl, r3
 8018712:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018716:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018718:	fb09 3c0c 	mla	ip, r9, ip, r3
 801871c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801871e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018722:	434b      	muls	r3, r1
 8018724:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018728:	1c59      	adds	r1, r3, #1
 801872a:	ea47 070c 	orr.w	r7, r7, ip
 801872e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018732:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018736:	b2fa      	uxtb	r2, r7
 8018738:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801873c:	fb12 f200 	smulbb	r2, r2, r0
 8018740:	b2c9      	uxtb	r1, r1
 8018742:	fb03 2301 	mla	r3, r3, r1, r2
 8018746:	b29b      	uxth	r3, r3
 8018748:	1c5a      	adds	r2, r3, #1
 801874a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801874e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018752:	fb12 f201 	smulbb	r2, r2, r1
 8018756:	121b      	asrs	r3, r3, #8
 8018758:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801875c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018760:	0c3f      	lsrs	r7, r7, #16
 8018762:	fb03 2300 	mla	r3, r3, r0, r2
 8018766:	b29b      	uxth	r3, r3
 8018768:	1c5a      	adds	r2, r3, #1
 801876a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801876e:	121b      	asrs	r3, r3, #8
 8018770:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018774:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018778:	fb13 f101 	smulbb	r1, r3, r1
 801877c:	fb07 1700 	mla	r7, r7, r0, r1
 8018780:	b2bf      	uxth	r7, r7
 8018782:	1c7b      	adds	r3, r7, #1
 8018784:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018788:	123f      	asrs	r7, r7, #8
 801878a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801878e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018790:	f10e 0e03 	add.w	lr, lr, #3
 8018794:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018796:	f10b 3bff 	add.w	fp, fp, #4294967295
 801879a:	441a      	add	r2, r3
 801879c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801879e:	9231      	str	r2, [sp, #196]	; 0xc4
 80187a0:	441d      	add	r5, r3
 80187a2:	e645      	b.n	8018430 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80187a4:	2800      	cmp	r0, #0
 80187a6:	f43f aee6 	beq.w	8018576 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80187aa:	5c79      	ldrb	r1, [r7, r1]
 80187ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80187b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80187b2:	0e09      	lsrs	r1, r1, #24
 80187b4:	9114      	str	r1, [sp, #80]	; 0x50
 80187b6:	e6de      	b.n	8018576 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80187b8:	b01f      	add	sp, #124	; 0x7c
 80187ba:	ecbd 8b08 	vpop	{d8-d11}
 80187be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080187c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80187c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c8:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80187cc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80187d0:	2c00      	cmp	r4, #0
 80187d2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80187d6:	fb04 060c 	mla	r6, r4, ip, r0
 80187da:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80187de:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80187e2:	eb02 0e06 	add.w	lr, r2, r6
 80187e6:	db3d      	blt.n	8018864 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80187e8:	45a0      	cmp	r8, r4
 80187ea:	dd3b      	ble.n	8018864 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80187ec:	2800      	cmp	r0, #0
 80187ee:	db37      	blt.n	8018860 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187f0:	4584      	cmp	ip, r0
 80187f2:	dd35      	ble.n	8018860 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80187f4:	5d92      	ldrb	r2, [r2, r6]
 80187f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80187fa:	1c46      	adds	r6, r0, #1
 80187fc:	d435      	bmi.n	801886a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80187fe:	45b4      	cmp	ip, r6
 8018800:	dd33      	ble.n	801886a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8018802:	b3a5      	cbz	r5, 801886e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8018804:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8018808:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801880c:	3401      	adds	r4, #1
 801880e:	d432      	bmi.n	8018876 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018810:	45a0      	cmp	r8, r4
 8018812:	dd30      	ble.n	8018876 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8018814:	b397      	cbz	r7, 801887c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8018816:	2800      	cmp	r0, #0
 8018818:	db2b      	blt.n	8018872 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801881a:	4584      	cmp	ip, r0
 801881c:	dd29      	ble.n	8018872 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801881e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8018822:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8018826:	3001      	adds	r0, #1
 8018828:	d42b      	bmi.n	8018882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801882a:	4584      	cmp	ip, r0
 801882c:	dd29      	ble.n	8018882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801882e:	b355      	cbz	r5, 8018886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8018830:	44f4      	add	ip, lr
 8018832:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018836:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801883a:	2d0f      	cmp	r5, #15
 801883c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018840:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018844:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018848:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801884c:	d801      	bhi.n	8018852 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801884e:	2f0f      	cmp	r7, #15
 8018850:	d91b      	bls.n	801888a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8018852:	4b7f      	ldr	r3, [pc, #508]	; (8018a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8018854:	f240 1157 	movw	r1, #343	; 0x157
 8018858:	4a7e      	ldr	r2, [pc, #504]	; (8018a54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801885a:	487f      	ldr	r0, [pc, #508]	; (8018a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801885c:	f003 fd3e 	bl	801c2dc <__assert_func>
 8018860:	2200      	movs	r2, #0
 8018862:	e7ca      	b.n	80187fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8018864:	2600      	movs	r6, #0
 8018866:	4632      	mov	r2, r6
 8018868:	e7d0      	b.n	801880c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801886a:	2600      	movs	r6, #0
 801886c:	e7ce      	b.n	801880c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801886e:	462e      	mov	r6, r5
 8018870:	e7cc      	b.n	801880c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8018872:	2400      	movs	r4, #0
 8018874:	e7d7      	b.n	8018826 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8018876:	2300      	movs	r3, #0
 8018878:	461c      	mov	r4, r3
 801887a:	e7de      	b.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801887c:	463b      	mov	r3, r7
 801887e:	463c      	mov	r4, r7
 8018880:	e7db      	b.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018882:	2300      	movs	r3, #0
 8018884:	e7d9      	b.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8018886:	462b      	mov	r3, r5
 8018888:	e7d7      	b.n	801883a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801888a:	b2a8      	uxth	r0, r5
 801888c:	b2bf      	uxth	r7, r7
 801888e:	fb07 fe00 	mul.w	lr, r7, r0
 8018892:	0100      	lsls	r0, r0, #4
 8018894:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018898:	eba0 0c0e 	sub.w	ip, r0, lr
 801889c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80188a0:	b2bf      	uxth	r7, r7
 80188a2:	fa1f fc8c 	uxth.w	ip, ip
 80188a6:	1bc5      	subs	r5, r0, r7
 80188a8:	fb0c f00a 	mul.w	r0, ip, sl
 80188ac:	b2ad      	uxth	r5, r5
 80188ae:	fb05 000b 	mla	r0, r5, fp, r0
 80188b2:	fb07 0009 	mla	r0, r7, r9, r0
 80188b6:	fb0e 0008 	mla	r0, lr, r8, r0
 80188ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80188be:	9001      	str	r0, [sp, #4]
 80188c0:	2800      	cmp	r0, #0
 80188c2:	f000 80c2 	beq.w	8018a4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 80188c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80188ca:	d018      	beq.n	80188fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 80188cc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80188d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80188d4:	fb0b f000 	mul.w	r0, fp, r0
 80188d8:	fb0b fb02 	mul.w	fp, fp, r2
 80188dc:	0a02      	lsrs	r2, r0, #8
 80188de:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80188e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80188e6:	4402      	add	r2, r0
 80188e8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80188ec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80188f0:	0a12      	lsrs	r2, r2, #8
 80188f2:	0a00      	lsrs	r0, r0, #8
 80188f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80188f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80188fc:	4302      	orrs	r2, r0
 80188fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018902:	d01a      	beq.n	801893a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8018904:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8018908:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801890c:	fb0a f000 	mul.w	r0, sl, r0
 8018910:	fb0a fa06 	mul.w	sl, sl, r6
 8018914:	0a06      	lsrs	r6, r0, #8
 8018916:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801891a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801891e:	4406      	add	r6, r0
 8018920:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018924:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018928:	0a36      	lsrs	r6, r6, #8
 801892a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801892e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018932:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018936:	ea46 060a 	orr.w	r6, r6, sl
 801893a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801893e:	d01b      	beq.n	8018978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8018940:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018944:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018948:	fb09 fa0a 	mul.w	sl, r9, sl
 801894c:	fb09 f004 	mul.w	r0, r9, r4
 8018950:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018954:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018958:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801895c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018960:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8018964:	4454      	add	r4, sl
 8018966:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801896a:	0a24      	lsrs	r4, r4, #8
 801896c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018970:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018974:	ea44 0409 	orr.w	r4, r4, r9
 8018978:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801897c:	d01b      	beq.n	80189b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801897e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8018982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018986:	fb08 f909 	mul.w	r9, r8, r9
 801898a:	fb08 f003 	mul.w	r0, r8, r3
 801898e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018992:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018996:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801899a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801899e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80189a2:	444b      	add	r3, r9
 80189a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80189a8:	0a1b      	lsrs	r3, r3, #8
 80189aa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80189ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80189b2:	ea43 0308 	orr.w	r3, r3, r8
 80189b6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80189ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80189be:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80189c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80189c6:	fb0c f000 	mul.w	r0, ip, r0
 80189ca:	fb0c f606 	mul.w	r6, ip, r6
 80189ce:	fb05 0808 	mla	r8, r5, r8, r0
 80189d2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80189d6:	fb05 6502 	mla	r5, r5, r2, r6
 80189da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80189de:	fb07 8800 	mla	r8, r7, r0, r8
 80189e2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80189e6:	fb07 5704 	mla	r7, r7, r4, r5
 80189ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80189ee:	fb0e 8000 	mla	r0, lr, r0, r8
 80189f2:	780a      	ldrb	r2, [r1, #0]
 80189f4:	fb0e 7e03 	mla	lr, lr, r3, r7
 80189f8:	9b01      	ldr	r3, [sp, #4]
 80189fa:	0a00      	lsrs	r0, r0, #8
 80189fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018a00:	43db      	mvns	r3, r3
 8018a02:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018a0c:	ea40 0e0e 	orr.w	lr, r0, lr
 8018a10:	fb02 f003 	mul.w	r0, r2, r3
 8018a14:	1c42      	adds	r2, r0, #1
 8018a16:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8018a1a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8018a1e:	700a      	strb	r2, [r1, #0]
 8018a20:	784a      	ldrb	r2, [r1, #1]
 8018a22:	435a      	muls	r2, r3
 8018a24:	1c50      	adds	r0, r2, #1
 8018a26:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018a2a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8018a2e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8018a32:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8018a36:	704a      	strb	r2, [r1, #1]
 8018a38:	788a      	ldrb	r2, [r1, #2]
 8018a3a:	4353      	muls	r3, r2
 8018a3c:	1c5a      	adds	r2, r3, #1
 8018a3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018a42:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8018a46:	f881 e002 	strb.w	lr, [r1, #2]
 8018a4a:	b003      	add	sp, #12
 8018a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a50:	080205d7 	.word	0x080205d7
 8018a54:	08020a8e 	.word	0x08020a8e
 8018a58:	0802065f 	.word	0x0802065f

08018a5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a60:	ed2d 8b0a 	vpush	{d8-d12}
 8018a64:	b09b      	sub	sp, #108	; 0x6c
 8018a66:	eeb0 aa40 	vmov.f32	s20, s0
 8018a6a:	eef0 9a60 	vmov.f32	s19, s1
 8018a6e:	9218      	str	r2, [sp, #96]	; 0x60
 8018a70:	eeb0 9a41 	vmov.f32	s18, s2
 8018a74:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018a76:	eeb0 8a62 	vmov.f32	s16, s5
 8018a7a:	9019      	str	r0, [sp, #100]	; 0x64
 8018a7c:	eef0 8a43 	vmov.f32	s17, s6
 8018a80:	6850      	ldr	r0, [r2, #4]
 8018a82:	eeb0 ca44 	vmov.f32	s24, s8
 8018a86:	9116      	str	r1, [sp, #88]	; 0x58
 8018a88:	eef0 ba64 	vmov.f32	s23, s9
 8018a8c:	9307      	str	r3, [sp, #28]
 8018a8e:	eeb0 ba45 	vmov.f32	s22, s10
 8018a92:	6812      	ldr	r2, [r2, #0]
 8018a94:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8018a98:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8018a9a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8018a9e:	fb00 1303 	mla	r3, r0, r3, r1
 8018aa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018aa6:	18d3      	adds	r3, r2, r3
 8018aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8018aaa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ab0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018ab2:	685e      	ldr	r6, [r3, #4]
 8018ab4:	3604      	adds	r6, #4
 8018ab6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	dc03      	bgt.n	8018ac4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018abc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f340 834f 	ble.w	8019162 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018ac4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018ac6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018aca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018ace:	1e48      	subs	r0, r1, #1
 8018ad0:	1e57      	subs	r7, r2, #1
 8018ad2:	9b07      	ldr	r3, [sp, #28]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	f340 8178 	ble.w	8018dca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8018ada:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018adc:	142b      	asrs	r3, r5, #16
 8018ade:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018ae2:	d406      	bmi.n	8018af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ae4:	4584      	cmp	ip, r0
 8018ae6:	da04      	bge.n	8018af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	db02      	blt.n	8018af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018aec:	42bb      	cmp	r3, r7
 8018aee:	f2c0 816d 	blt.w	8018dcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018af2:	f11c 0c01 	adds.w	ip, ip, #1
 8018af6:	f100 815b 	bmi.w	8018db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018afa:	4561      	cmp	r1, ip
 8018afc:	f2c0 8158 	blt.w	8018db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b00:	3301      	adds	r3, #1
 8018b02:	f100 8155 	bmi.w	8018db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b06:	429a      	cmp	r2, r3
 8018b08:	f2c0 8152 	blt.w	8018db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8018b0c:	9b07      	ldr	r3, [sp, #28]
 8018b0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018b10:	9317      	str	r3, [sp, #92]	; 0x5c
 8018b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	f340 8178 	ble.w	8018e0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018b1a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018b1c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018b20:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018b24:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018b28:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018b2a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018b2e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018b30:	141b      	asrs	r3, r3, #16
 8018b32:	f100 81ba 	bmi.w	8018eaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b36:	f101 38ff 	add.w	r8, r1, #4294967295
 8018b3a:	4543      	cmp	r3, r8
 8018b3c:	f280 81b5 	bge.w	8018eaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b40:	f1bc 0f00 	cmp.w	ip, #0
 8018b44:	f2c0 81b1 	blt.w	8018eaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b48:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018b4c:	45c4      	cmp	ip, r8
 8018b4e:	f280 81ac 	bge.w	8018eaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8018b52:	b209      	sxth	r1, r1
 8018b54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018b56:	fb0c 3301 	mla	r3, ip, r1, r3
 8018b5a:	eb04 0803 	add.w	r8, r4, r3
 8018b5e:	5ce3      	ldrb	r3, [r4, r3]
 8018b60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018b64:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018b68:	2a00      	cmp	r2, #0
 8018b6a:	f000 8193 	beq.w	8018e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8018b6e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018b72:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018b76:	940b      	str	r4, [sp, #44]	; 0x2c
 8018b78:	0e24      	lsrs	r4, r4, #24
 8018b7a:	9412      	str	r4, [sp, #72]	; 0x48
 8018b7c:	b178      	cbz	r0, 8018b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018b7e:	eb08 0c01 	add.w	ip, r8, r1
 8018b82:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018b86:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018b8a:	9108      	str	r1, [sp, #32]
 8018b8c:	0e09      	lsrs	r1, r1, #24
 8018b8e:	9110      	str	r1, [sp, #64]	; 0x40
 8018b90:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018b94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018b98:	910c      	str	r1, [sp, #48]	; 0x30
 8018b9a:	0e09      	lsrs	r1, r1, #24
 8018b9c:	9113      	str	r1, [sp, #76]	; 0x4c
 8018b9e:	b292      	uxth	r2, r2
 8018ba0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018ba2:	b280      	uxth	r0, r0
 8018ba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018ba6:	fb02 f900 	mul.w	r9, r2, r0
 8018baa:	0112      	lsls	r2, r2, #4
 8018bac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018bb0:	eba2 0809 	sub.w	r8, r2, r9
 8018bb4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018bb8:	b280      	uxth	r0, r0
 8018bba:	fa1f f888 	uxth.w	r8, r8
 8018bbe:	1a12      	subs	r2, r2, r0
 8018bc0:	fb08 f101 	mul.w	r1, r8, r1
 8018bc4:	b292      	uxth	r2, r2
 8018bc6:	fb02 110e 	mla	r1, r2, lr, r1
 8018bca:	fb00 1104 	mla	r1, r0, r4, r1
 8018bce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018bd0:	fb09 1104 	mla	r1, r9, r4, r1
 8018bd4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018bd8:	2900      	cmp	r1, #0
 8018bda:	f000 80de 	beq.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018bde:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018be2:	d01b      	beq.n	8018c1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8018be4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018be8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018bec:	fb0e fa0a 	mul.w	sl, lr, sl
 8018bf0:	fb0e fe03 	mul.w	lr, lr, r3
 8018bf4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018bf8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018bfc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018c00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018c04:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018c08:	4453      	add	r3, sl
 8018c0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018c0e:	0a1b      	lsrs	r3, r3, #8
 8018c10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018c14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018c18:	ea43 030c 	orr.w	r3, r3, ip
 8018c1c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c1e:	2cff      	cmp	r4, #255	; 0xff
 8018c20:	d021      	beq.n	8018c66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018c22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018c24:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018c28:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c2a:	fb04 fb0b 	mul.w	fp, r4, fp
 8018c2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018c30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c34:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018c36:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018c42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018c4a:	44de      	add	lr, fp
 8018c4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018c50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018c54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018c58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018c60:	ea4e 040a 	orr.w	r4, lr, sl
 8018c64:	940b      	str	r4, [sp, #44]	; 0x2c
 8018c66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c68:	2cff      	cmp	r4, #255	; 0xff
 8018c6a:	d021      	beq.n	8018cb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018c6c:	9c08      	ldr	r4, [sp, #32]
 8018c6e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018c72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c74:	fb04 fb0b 	mul.w	fp, r4, fp
 8018c78:	9c08      	ldr	r4, [sp, #32]
 8018c7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018c7e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018c80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018c84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c88:	fb04 fa0a 	mul.w	sl, r4, sl
 8018c8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018c90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018c94:	44de      	add	lr, fp
 8018c96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018c9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018c9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018ca2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018ca6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018caa:	ea4e 040a 	orr.w	r4, lr, sl
 8018cae:	9408      	str	r4, [sp, #32]
 8018cb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018cb2:	2cff      	cmp	r4, #255	; 0xff
 8018cb4:	d021      	beq.n	8018cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018cb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018cb8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018cbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018cbe:	fb04 fb0b 	mul.w	fp, r4, fp
 8018cc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018cc4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018cc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018cca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018cce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018cd2:	fb04 fa0a 	mul.w	sl, r4, sl
 8018cd6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018cda:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018cde:	44de      	add	lr, fp
 8018ce0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018ce4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018ce8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018cec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018cf0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018cf4:	ea4e 040a 	orr.w	r4, lr, sl
 8018cf8:	940c      	str	r4, [sp, #48]	; 0x30
 8018cfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018cfc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d04:	43c9      	mvns	r1, r1
 8018d06:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018d0a:	9c08      	ldr	r4, [sp, #32]
 8018d0c:	b2c9      	uxtb	r1, r1
 8018d0e:	fb08 fc0c 	mul.w	ip, r8, ip
 8018d12:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018d16:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018d1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018d1c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018d20:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018d24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018d26:	fb09 cc0e 	mla	ip, r9, lr, ip
 8018d2a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8018d2e:	fb08 f80e 	mul.w	r8, r8, lr
 8018d32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d36:	fb02 8303 	mla	r3, r2, r3, r8
 8018d3a:	9a08      	ldr	r2, [sp, #32]
 8018d3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018d40:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018d46:	fb00 330a 	mla	r3, r0, sl, r3
 8018d4a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018d4e:	fb09 3900 	mla	r9, r9, r0, r3
 8018d52:	783b      	ldrb	r3, [r7, #0]
 8018d54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018d58:	fb03 f201 	mul.w	r2, r3, r1
 8018d5c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018d60:	1c53      	adds	r3, r2, #1
 8018d62:	ea4c 0c09 	orr.w	ip, ip, r9
 8018d66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018d6a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8018d6e:	703b      	strb	r3, [r7, #0]
 8018d70:	787b      	ldrb	r3, [r7, #1]
 8018d72:	434b      	muls	r3, r1
 8018d74:	1c5a      	adds	r2, r3, #1
 8018d76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018d7a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018d7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8018d82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018d86:	707b      	strb	r3, [r7, #1]
 8018d88:	78bb      	ldrb	r3, [r7, #2]
 8018d8a:	4359      	muls	r1, r3
 8018d8c:	1c4b      	adds	r3, r1, #1
 8018d8e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018d92:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8018d96:	f887 c002 	strb.w	ip, [r7, #2]
 8018d9a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018d9c:	3703      	adds	r7, #3
 8018d9e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018da0:	441a      	add	r2, r3
 8018da2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018da4:	441d      	add	r5, r3
 8018da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018da8:	922f      	str	r2, [sp, #188]	; 0xbc
 8018daa:	3b01      	subs	r3, #1
 8018dac:	9317      	str	r3, [sp, #92]	; 0x5c
 8018dae:	e6b0      	b.n	8018b12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018db0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018db2:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018db4:	441c      	add	r4, r3
 8018db6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018db8:	441d      	add	r5, r3
 8018dba:	9b07      	ldr	r3, [sp, #28]
 8018dbc:	942f      	str	r4, [sp, #188]	; 0xbc
 8018dbe:	3b01      	subs	r3, #1
 8018dc0:	9307      	str	r3, [sp, #28]
 8018dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dc4:	3303      	adds	r3, #3
 8018dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8018dc8:	e683      	b.n	8018ad2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018dca:	d026      	beq.n	8018e1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8018dcc:	9b07      	ldr	r3, [sp, #28]
 8018dce:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018dd0:	3b01      	subs	r3, #1
 8018dd2:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018dd4:	fb00 4003 	mla	r0, r0, r3, r4
 8018dd8:	1400      	asrs	r0, r0, #16
 8018dda:	f53f ae97 	bmi.w	8018b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018dde:	3901      	subs	r1, #1
 8018de0:	4288      	cmp	r0, r1
 8018de2:	f6bf ae93 	bge.w	8018b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018de6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8018de8:	fb01 5303 	mla	r3, r1, r3, r5
 8018dec:	141b      	asrs	r3, r3, #16
 8018dee:	f53f ae8d 	bmi.w	8018b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018df2:	3a01      	subs	r2, #1
 8018df4:	4293      	cmp	r3, r2
 8018df6:	f6bf ae89 	bge.w	8018b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018e00:	f103 0e03 	add.w	lr, r3, #3
 8018e04:	f1bb 0f00 	cmp.w	fp, #0
 8018e08:	dc6d      	bgt.n	8018ee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8018e0a:	9b07      	ldr	r3, [sp, #28]
 8018e0c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e16:	4423      	add	r3, r4
 8018e18:	930a      	str	r3, [sp, #40]	; 0x28
 8018e1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	f340 81a0 	ble.w	8019162 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8018e22:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8018e26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e28:	ee79 9aab 	vadd.f32	s19, s19, s23
 8018e2c:	eef0 6a48 	vmov.f32	s13, s16
 8018e30:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8018e34:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8018e38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e3c:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8018e40:	eef0 6a68 	vmov.f32	s13, s17
 8018e44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e48:	ee16 5a90 	vmov	r5, s13
 8018e4c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018e50:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018e54:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018e58:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018e5c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018e60:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018e64:	ee18 2a10 	vmov	r2, s16
 8018e68:	eeb0 8a47 	vmov.f32	s16, s14
 8018e6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e70:	ee18 2a90 	vmov	r2, s17
 8018e74:	9331      	str	r3, [sp, #196]	; 0xc4
 8018e76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e78:	eef0 8a67 	vmov.f32	s17, s15
 8018e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e80:	9332      	str	r3, [sp, #200]	; 0xc8
 8018e82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018e86:	3b01      	subs	r3, #1
 8018e88:	9316      	str	r3, [sp, #88]	; 0x58
 8018e8a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e8c:	bf08      	it	eq
 8018e8e:	4613      	moveq	r3, r2
 8018e90:	9307      	str	r3, [sp, #28]
 8018e92:	e610      	b.n	8018ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018e94:	2800      	cmp	r0, #0
 8018e96:	f43f ae82 	beq.w	8018b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018e9a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018e9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018ea2:	9108      	str	r1, [sp, #32]
 8018ea4:	0e09      	lsrs	r1, r1, #24
 8018ea6:	9110      	str	r1, [sp, #64]	; 0x40
 8018ea8:	e679      	b.n	8018b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018eaa:	f113 0801 	adds.w	r8, r3, #1
 8018eae:	f53f af74 	bmi.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018eb2:	4541      	cmp	r1, r8
 8018eb4:	f6ff af71 	blt.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018eb8:	f11c 0801 	adds.w	r8, ip, #1
 8018ebc:	f53f af6d 	bmi.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018ec0:	45c6      	cmp	lr, r8
 8018ec2:	f6ff af6a 	blt.w	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018ec6:	b209      	sxth	r1, r1
 8018ec8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018ecc:	fa0f f38e 	sxth.w	r3, lr
 8018ed0:	9100      	str	r1, [sp, #0]
 8018ed2:	4639      	mov	r1, r7
 8018ed4:	9301      	str	r3, [sp, #4]
 8018ed6:	4633      	mov	r3, r6
 8018ed8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018edc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ede:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018ee0:	f7ff fc70 	bl	80187c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8018ee4:	e759      	b.n	8018d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018ee6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018ee8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018eec:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8018eee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018ef2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8018ef4:	1427      	asrs	r7, r4, #16
 8018ef6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018ef8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018efc:	142b      	asrs	r3, r5, #16
 8018efe:	fb01 7303 	mla	r3, r1, r3, r7
 8018f02:	18e7      	adds	r7, r4, r3
 8018f04:	5ce3      	ldrb	r3, [r4, r3]
 8018f06:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018f0a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018f0e:	2a00      	cmp	r2, #0
 8018f10:	f000 811d 	beq.w	801914e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8018f14:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018f18:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018f1c:	940d      	str	r4, [sp, #52]	; 0x34
 8018f1e:	0e24      	lsrs	r4, r4, #24
 8018f20:	9414      	str	r4, [sp, #80]	; 0x50
 8018f22:	b170      	cbz	r0, 8018f42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018f24:	eb07 0801 	add.w	r8, r7, r1
 8018f28:	5c79      	ldrb	r1, [r7, r1]
 8018f2a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f2e:	9109      	str	r1, [sp, #36]	; 0x24
 8018f30:	0e09      	lsrs	r1, r1, #24
 8018f32:	9111      	str	r1, [sp, #68]	; 0x44
 8018f34:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018f38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f3c:	910e      	str	r1, [sp, #56]	; 0x38
 8018f3e:	0e09      	lsrs	r1, r1, #24
 8018f40:	9115      	str	r1, [sp, #84]	; 0x54
 8018f42:	b292      	uxth	r2, r2
 8018f44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018f46:	b280      	uxth	r0, r0
 8018f48:	fb02 f900 	mul.w	r9, r2, r0
 8018f4c:	0112      	lsls	r2, r2, #4
 8018f4e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018f52:	eba2 0809 	sub.w	r8, r2, r9
 8018f56:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018f5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f5c:	b280      	uxth	r0, r0
 8018f5e:	fa1f f888 	uxth.w	r8, r8
 8018f62:	1a09      	subs	r1, r1, r0
 8018f64:	fb08 f202 	mul.w	r2, r8, r2
 8018f68:	b289      	uxth	r1, r1
 8018f6a:	fb01 220c 	mla	r2, r1, ip, r2
 8018f6e:	fb00 2204 	mla	r2, r0, r4, r2
 8018f72:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018f74:	fb09 2204 	mla	r2, r9, r4, r2
 8018f78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018f7c:	2a00      	cmp	r2, #0
 8018f7e:	f000 80db 	beq.w	8019138 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8018f82:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018f86:	d019      	beq.n	8018fbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8018f88:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018f90:	fb0c fa0a 	mul.w	sl, ip, sl
 8018f94:	fb0c fc03 	mul.w	ip, ip, r3
 8018f98:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018f9c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018fa0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018fa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018fa8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018fac:	4453      	add	r3, sl
 8018fae:	0a3f      	lsrs	r7, r7, #8
 8018fb0:	0a1b      	lsrs	r3, r3, #8
 8018fb2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018fb6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018fba:	433b      	orrs	r3, r7
 8018fbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018fbe:	2cff      	cmp	r4, #255	; 0xff
 8018fc0:	d020      	beq.n	8019004 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8018fc2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018fc4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018fc8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018fca:	4367      	muls	r7, r4
 8018fcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018fce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018fd2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018fd6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018fd8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018fdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fe0:	fb04 fa0a 	mul.w	sl, r4, sl
 8018fe4:	44bc      	add	ip, r7
 8018fe6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018fea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018fee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ff6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018ffa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018ffe:	ea4c 040a 	orr.w	r4, ip, sl
 8019002:	940d      	str	r4, [sp, #52]	; 0x34
 8019004:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019006:	2cff      	cmp	r4, #255	; 0xff
 8019008:	d020      	beq.n	801904c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801900a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801900c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019010:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019012:	4367      	muls	r7, r4
 8019014:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019016:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801901a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801901e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019020:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019024:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019028:	fb04 fa0a 	mul.w	sl, r4, sl
 801902c:	44bc      	add	ip, r7
 801902e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019036:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801903a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801903e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019042:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019046:	ea4c 040a 	orr.w	r4, ip, sl
 801904a:	9409      	str	r4, [sp, #36]	; 0x24
 801904c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801904e:	2cff      	cmp	r4, #255	; 0xff
 8019050:	d020      	beq.n	8019094 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8019052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019054:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019058:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801905a:	4367      	muls	r7, r4
 801905c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801905e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019062:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019066:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019068:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801906c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019070:	fb04 fa0a 	mul.w	sl, r4, sl
 8019074:	44bc      	add	ip, r7
 8019076:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801907a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801907e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019086:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801908a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801908e:	ea4c 040a 	orr.w	r4, ip, sl
 8019092:	940e      	str	r4, [sp, #56]	; 0x38
 8019094:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019096:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801909a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801909e:	43d2      	mvns	r2, r2
 80190a0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80190a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80190a6:	b2d2      	uxtb	r2, r2
 80190a8:	fb08 f707 	mul.w	r7, r8, r7
 80190ac:	fb01 770c 	mla	r7, r1, ip, r7
 80190b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80190b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80190b6:	fb00 770c 	mla	r7, r0, ip, r7
 80190ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80190be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80190c0:	fb09 770c 	mla	r7, r9, ip, r7
 80190c4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80190c8:	fb08 f80c 	mul.w	r8, r8, ip
 80190cc:	0a3f      	lsrs	r7, r7, #8
 80190ce:	fb01 8303 	mla	r3, r1, r3, r8
 80190d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80190d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80190d8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80190dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80190de:	fb00 330a 	mla	r3, r0, sl, r3
 80190e2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80190e6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80190ea:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80190ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80190f2:	fb03 f102 	mul.w	r1, r3, r2
 80190f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80190fa:	1c4b      	adds	r3, r1, #1
 80190fc:	ea47 070c 	orr.w	r7, r7, ip
 8019100:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019104:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019108:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801910c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8019110:	4353      	muls	r3, r2
 8019112:	1c59      	adds	r1, r3, #1
 8019114:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019118:	0a3b      	lsrs	r3, r7, #8
 801911a:	0c3f      	lsrs	r7, r7, #16
 801911c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019120:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019124:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019128:	435a      	muls	r2, r3
 801912a:	1c53      	adds	r3, r2, #1
 801912c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019130:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8019134:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019138:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801913a:	f10e 0e03 	add.w	lr, lr, #3
 801913e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019144:	441a      	add	r2, r3
 8019146:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8019148:	922f      	str	r2, [sp, #188]	; 0xbc
 801914a:	441d      	add	r5, r3
 801914c:	e65a      	b.n	8018e04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801914e:	2800      	cmp	r0, #0
 8019150:	f43f aef7 	beq.w	8018f42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8019154:	5c79      	ldrb	r1, [r7, r1]
 8019156:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801915a:	9109      	str	r1, [sp, #36]	; 0x24
 801915c:	0e09      	lsrs	r1, r1, #24
 801915e:	9111      	str	r1, [sp, #68]	; 0x44
 8019160:	e6ef      	b.n	8018f42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8019162:	b01b      	add	sp, #108	; 0x6c
 8019164:	ecbd 8b0a 	vpop	{d8-d12}
 8019168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801916c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019170:	b08d      	sub	sp, #52	; 0x34
 8019172:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8019176:	9103      	str	r1, [sp, #12]
 8019178:	fb07 5803 	mla	r8, r7, r3, r5
 801917c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8019180:	9803      	ldr	r0, [sp, #12]
 8019182:	2f00      	cmp	r7, #0
 8019184:	910b      	str	r1, [sp, #44]	; 0x2c
 8019186:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801918a:	9903      	ldr	r1, [sp, #12]
 801918c:	9c03      	ldr	r4, [sp, #12]
 801918e:	eb02 0608 	add.w	r6, r2, r8
 8019192:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019196:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801919a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801919e:	7809      	ldrb	r1, [r1, #0]
 80191a0:	7840      	ldrb	r0, [r0, #1]
 80191a2:	78a4      	ldrb	r4, [r4, #2]
 80191a4:	db51      	blt.n	801924a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80191a6:	45be      	cmp	lr, r7
 80191a8:	dd4f      	ble.n	801924a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80191aa:	2d00      	cmp	r5, #0
 80191ac:	db49      	blt.n	8019242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80191ae:	42ab      	cmp	r3, r5
 80191b0:	dd47      	ble.n	8019242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80191b2:	f812 2008 	ldrb.w	r2, [r2, r8]
 80191b6:	9204      	str	r2, [sp, #16]
 80191b8:	7872      	ldrb	r2, [r6, #1]
 80191ba:	9205      	str	r2, [sp, #20]
 80191bc:	78b2      	ldrb	r2, [r6, #2]
 80191be:	9206      	str	r2, [sp, #24]
 80191c0:	1c6a      	adds	r2, r5, #1
 80191c2:	d449      	bmi.n	8019258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80191c4:	4293      	cmp	r3, r2
 80191c6:	dd47      	ble.n	8019258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80191c8:	f1bc 0f00 	cmp.w	ip, #0
 80191cc:	d044      	beq.n	8019258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80191ce:	7972      	ldrb	r2, [r6, #5]
 80191d0:	f896 b003 	ldrb.w	fp, [r6, #3]
 80191d4:	f896 a004 	ldrb.w	sl, [r6, #4]
 80191d8:	9201      	str	r2, [sp, #4]
 80191da:	3701      	adds	r7, #1
 80191dc:	d444      	bmi.n	8019268 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80191de:	45be      	cmp	lr, r7
 80191e0:	dd42      	ble.n	8019268 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80191e2:	f1b9 0f00 	cmp.w	r9, #0
 80191e6:	f000 80c1 	beq.w	801936c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80191ea:	2d00      	cmp	r5, #0
 80191ec:	db38      	blt.n	8019260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80191ee:	42ab      	cmp	r3, r5
 80191f0:	dd36      	ble.n	8019260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80191f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80191f6:	f816 8002 	ldrb.w	r8, [r6, r2]
 80191fa:	2203      	movs	r2, #3
 80191fc:	fb03 6702 	mla	r7, r3, r2, r6
 8019200:	fb03 6202 	mla	r2, r3, r2, r6
 8019204:	787f      	ldrb	r7, [r7, #1]
 8019206:	f892 e002 	ldrb.w	lr, [r2, #2]
 801920a:	9702      	str	r7, [sp, #8]
 801920c:	3501      	adds	r5, #1
 801920e:	d432      	bmi.n	8019276 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8019210:	42ab      	cmp	r3, r5
 8019212:	dd30      	ble.n	8019276 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8019214:	f1bc 0f00 	cmp.w	ip, #0
 8019218:	d031      	beq.n	801927e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801921a:	2703      	movs	r7, #3
 801921c:	fb13 7207 	smlabb	r2, r3, r7, r7
 8019220:	5cb5      	ldrb	r5, [r6, r2]
 8019222:	fb03 6207 	mla	r2, r3, r7, r6
 8019226:	fb03 6307 	mla	r3, r3, r7, r6
 801922a:	7912      	ldrb	r2, [r2, #4]
 801922c:	795e      	ldrb	r6, [r3, #5]
 801922e:	f1bc 0f0f 	cmp.w	ip, #15
 8019232:	d927      	bls.n	8019284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8019234:	4b53      	ldr	r3, [pc, #332]	; (8019384 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8019236:	f240 1157 	movw	r1, #343	; 0x157
 801923a:	4a53      	ldr	r2, [pc, #332]	; (8019388 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801923c:	4853      	ldr	r0, [pc, #332]	; (801938c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801923e:	f003 f84d 	bl	801c2dc <__assert_func>
 8019242:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8019246:	9104      	str	r1, [sp, #16]
 8019248:	e7ba      	b.n	80191c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801924a:	9401      	str	r4, [sp, #4]
 801924c:	4682      	mov	sl, r0
 801924e:	468b      	mov	fp, r1
 8019250:	9104      	str	r1, [sp, #16]
 8019252:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8019256:	e7c0      	b.n	80191da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8019258:	9401      	str	r4, [sp, #4]
 801925a:	4682      	mov	sl, r0
 801925c:	468b      	mov	fp, r1
 801925e:	e7bc      	b.n	80191da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8019260:	46a6      	mov	lr, r4
 8019262:	9002      	str	r0, [sp, #8]
 8019264:	4688      	mov	r8, r1
 8019266:	e7d1      	b.n	801920c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8019268:	4626      	mov	r6, r4
 801926a:	4602      	mov	r2, r0
 801926c:	460d      	mov	r5, r1
 801926e:	46a6      	mov	lr, r4
 8019270:	9002      	str	r0, [sp, #8]
 8019272:	4688      	mov	r8, r1
 8019274:	e7db      	b.n	801922e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8019276:	4626      	mov	r6, r4
 8019278:	4602      	mov	r2, r0
 801927a:	460d      	mov	r5, r1
 801927c:	e7d7      	b.n	801922e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801927e:	4626      	mov	r6, r4
 8019280:	4602      	mov	r2, r0
 8019282:	460d      	mov	r5, r1
 8019284:	f1b9 0f0f 	cmp.w	r9, #15
 8019288:	d8d4      	bhi.n	8019234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801928a:	fa1f f38c 	uxth.w	r3, ip
 801928e:	fa1f fc89 	uxth.w	ip, r9
 8019292:	fb03 f70c 	mul.w	r7, r3, ip
 8019296:	011b      	lsls	r3, r3, #4
 8019298:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801929c:	9707      	str	r7, [sp, #28]
 801929e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80192a2:	fa1f fc8c 	uxth.w	ip, ip
 80192a6:	eba7 070c 	sub.w	r7, r7, ip
 80192aa:	b2bf      	uxth	r7, r7
 80192ac:	9709      	str	r7, [sp, #36]	; 0x24
 80192ae:	9f07      	ldr	r7, [sp, #28]
 80192b0:	1bdb      	subs	r3, r3, r7
 80192b2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	9708      	str	r7, [sp, #32]
 80192ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80192bc:	930a      	str	r3, [sp, #40]	; 0x28
 80192be:	ea6f 0907 	mvn.w	r9, r7
 80192c2:	fb03 fb0b 	mul.w	fp, r3, fp
 80192c6:	9f04      	ldr	r7, [sp, #16]
 80192c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192ca:	fa5f f989 	uxtb.w	r9, r9
 80192ce:	fb03 bb07 	mla	fp, r3, r7, fp
 80192d2:	9f07      	ldr	r7, [sp, #28]
 80192d4:	fb11 f109 	smulbb	r1, r1, r9
 80192d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80192da:	fb0c b808 	mla	r8, ip, r8, fp
 80192de:	fb10 f009 	smulbb	r0, r0, r9
 80192e2:	fb14 f409 	smulbb	r4, r4, r9
 80192e6:	fb07 8805 	mla	r8, r7, r5, r8
 80192ea:	9d08      	ldr	r5, [sp, #32]
 80192ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80192ee:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80192f2:	fb08 1805 	mla	r8, r8, r5, r1
 80192f6:	9d05      	ldr	r5, [sp, #20]
 80192f8:	fa1f f888 	uxth.w	r8, r8
 80192fc:	f108 0101 	add.w	r1, r8, #1
 8019300:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019304:	9903      	ldr	r1, [sp, #12]
 8019306:	ea4f 2828 	mov.w	r8, r8, asr #8
 801930a:	f881 8000 	strb.w	r8, [r1]
 801930e:	fb03 f10a 	mul.w	r1, r3, sl
 8019312:	fb07 1105 	mla	r1, r7, r5, r1
 8019316:	9d02      	ldr	r5, [sp, #8]
 8019318:	fb0c 1105 	mla	r1, ip, r5, r1
 801931c:	9d07      	ldr	r5, [sp, #28]
 801931e:	fb05 1102 	mla	r1, r5, r2, r1
 8019322:	9a08      	ldr	r2, [sp, #32]
 8019324:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019328:	fb01 0102 	mla	r1, r1, r2, r0
 801932c:	9a03      	ldr	r2, [sp, #12]
 801932e:	b289      	uxth	r1, r1
 8019330:	1c48      	adds	r0, r1, #1
 8019332:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8019336:	1209      	asrs	r1, r1, #8
 8019338:	7051      	strb	r1, [r2, #1]
 801933a:	9a01      	ldr	r2, [sp, #4]
 801933c:	4353      	muls	r3, r2
 801933e:	9a06      	ldr	r2, [sp, #24]
 8019340:	fb07 3702 	mla	r7, r7, r2, r3
 8019344:	9b08      	ldr	r3, [sp, #32]
 8019346:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801934a:	fb05 c606 	mla	r6, r5, r6, ip
 801934e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019352:	fb06 4603 	mla	r6, r6, r3, r4
 8019356:	9b03      	ldr	r3, [sp, #12]
 8019358:	b2b6      	uxth	r6, r6
 801935a:	f106 0e01 	add.w	lr, r6, #1
 801935e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019362:	1236      	asrs	r6, r6, #8
 8019364:	709e      	strb	r6, [r3, #2]
 8019366:	b00d      	add	sp, #52	; 0x34
 8019368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801936c:	f1bc 0f0f 	cmp.w	ip, #15
 8019370:	f63f af60 	bhi.w	8019234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8019374:	4626      	mov	r6, r4
 8019376:	4602      	mov	r2, r0
 8019378:	460d      	mov	r5, r1
 801937a:	46a6      	mov	lr, r4
 801937c:	9002      	str	r0, [sp, #8]
 801937e:	4688      	mov	r8, r1
 8019380:	e783      	b.n	801928a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8019382:	bf00      	nop
 8019384:	080205d7 	.word	0x080205d7
 8019388:	08020a8e 	.word	0x08020a8e
 801938c:	0802065f 	.word	0x0802065f

08019390 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019394:	ed2d 8b08 	vpush	{d8-d11}
 8019398:	b09f      	sub	sp, #124	; 0x7c
 801939a:	eeb0 aa40 	vmov.f32	s20, s0
 801939e:	eef0 9a60 	vmov.f32	s19, s1
 80193a2:	920e      	str	r2, [sp, #56]	; 0x38
 80193a4:	eeb0 9a41 	vmov.f32	s18, s2
 80193a8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80193aa:	eeb0 8a62 	vmov.f32	s16, s5
 80193ae:	9307      	str	r3, [sp, #28]
 80193b0:	eef0 8a43 	vmov.f32	s17, s6
 80193b4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80193b8:	eef0 ba44 	vmov.f32	s23, s8
 80193bc:	901d      	str	r0, [sp, #116]	; 0x74
 80193be:	eeb0 ba64 	vmov.f32	s22, s9
 80193c2:	930c      	str	r3, [sp, #48]	; 0x30
 80193c4:	eef0 aa45 	vmov.f32	s21, s10
 80193c8:	6850      	ldr	r0, [r2, #4]
 80193ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80193cc:	6812      	ldr	r2, [r2, #0]
 80193ce:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80193d2:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80193d6:	fb00 1303 	mla	r3, r0, r3, r1
 80193da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80193de:	18d3      	adds	r3, r2, r3
 80193e0:	9308      	str	r3, [sp, #32]
 80193e2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	930a      	str	r3, [sp, #40]	; 0x28
 80193e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193ea:	43db      	mvns	r3, r3
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	9309      	str	r3, [sp, #36]	; 0x24
 80193f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	dc03      	bgt.n	80193fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80193f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	f340 81f5 	ble.w	80197e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80193fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019400:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019404:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019408:	1e48      	subs	r0, r1, #1
 801940a:	1e54      	subs	r4, r2, #1
 801940c:	9b07      	ldr	r3, [sp, #28]
 801940e:	2b00      	cmp	r3, #0
 8019410:	f340 80d5 	ble.w	80195be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8019414:	ea5f 452a 	movs.w	r5, sl, asr #16
 8019418:	ea4f 4328 	mov.w	r3, r8, asr #16
 801941c:	d406      	bmi.n	801942c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801941e:	4285      	cmp	r5, r0
 8019420:	da04      	bge.n	801942c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019422:	2b00      	cmp	r3, #0
 8019424:	db02      	blt.n	801942c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019426:	42a3      	cmp	r3, r4
 8019428:	f2c0 80ca 	blt.w	80195c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801942c:	3501      	adds	r5, #1
 801942e:	f100 80bb 	bmi.w	80195a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019432:	42a9      	cmp	r1, r5
 8019434:	f2c0 80b8 	blt.w	80195a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019438:	3301      	adds	r3, #1
 801943a:	f100 80b5 	bmi.w	80195a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801943e:	429a      	cmp	r2, r3
 8019440:	f2c0 80b2 	blt.w	80195a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019444:	9b07      	ldr	r3, [sp, #28]
 8019446:	9d08      	ldr	r5, [sp, #32]
 8019448:	930d      	str	r3, [sp, #52]	; 0x34
 801944a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801944c:	2b00      	cmp	r3, #0
 801944e:	f340 80d6 	ble.w	80195fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8019452:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8019454:	ea4f 4428 	mov.w	r4, r8, asr #16
 8019458:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801945a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801945e:	68c6      	ldr	r6, [r0, #12]
 8019460:	ea5f 402a 	movs.w	r0, sl, asr #16
 8019464:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8019468:	689b      	ldr	r3, [r3, #8]
 801946a:	f100 810f 	bmi.w	801968c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801946e:	1e5f      	subs	r7, r3, #1
 8019470:	42b8      	cmp	r0, r7
 8019472:	f280 810b 	bge.w	801968c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8019476:	2c00      	cmp	r4, #0
 8019478:	f2c0 8108 	blt.w	801968c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801947c:	1e77      	subs	r7, r6, #1
 801947e:	42bc      	cmp	r4, r7
 8019480:	f280 8104 	bge.w	801968c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8019484:	b21b      	sxth	r3, r3
 8019486:	fb04 0003 	mla	r0, r4, r3, r0
 801948a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801948c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019490:	1826      	adds	r6, r4, r0
 8019492:	5c24      	ldrb	r4, [r4, r0]
 8019494:	78b7      	ldrb	r7, [r6, #2]
 8019496:	7870      	ldrb	r0, [r6, #1]
 8019498:	970f      	str	r7, [sp, #60]	; 0x3c
 801949a:	7977      	ldrb	r7, [r6, #5]
 801949c:	f896 e003 	ldrb.w	lr, [r6, #3]
 80194a0:	f896 c004 	ldrb.w	ip, [r6, #4]
 80194a4:	9710      	str	r7, [sp, #64]	; 0x40
 80194a6:	b1c9      	cbz	r1, 80194dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80194a8:	f04f 0b03 	mov.w	fp, #3
 80194ac:	f06f 0904 	mvn.w	r9, #4
 80194b0:	3605      	adds	r6, #5
 80194b2:	fb13 930b 	smlabb	r3, r3, fp, r9
 80194b6:	eb06 0b03 	add.w	fp, r6, r3
 80194ba:	5cf3      	ldrb	r3, [r6, r3]
 80194bc:	9311      	str	r3, [sp, #68]	; 0x44
 80194be:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80194c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80194c4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80194c8:	9315      	str	r3, [sp, #84]	; 0x54
 80194ca:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80194ce:	9312      	str	r3, [sp, #72]	; 0x48
 80194d0:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80194d4:	9314      	str	r3, [sp, #80]	; 0x50
 80194d6:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80194da:	9316      	str	r3, [sp, #88]	; 0x58
 80194dc:	b292      	uxth	r2, r2
 80194de:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80194e0:	b289      	uxth	r1, r1
 80194e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80194e6:	fb02 f601 	mul.w	r6, r2, r1
 80194ea:	0112      	lsls	r2, r2, #4
 80194ec:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80194f0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80194f4:	1b92      	subs	r2, r2, r6
 80194f6:	b289      	uxth	r1, r1
 80194f8:	b292      	uxth	r2, r2
 80194fa:	eba9 0901 	sub.w	r9, r9, r1
 80194fe:	fb02 fe0e 	mul.w	lr, r2, lr
 8019502:	fa1f f989 	uxth.w	r9, r9
 8019506:	fb02 fc0c 	mul.w	ip, r2, ip
 801950a:	fb09 e404 	mla	r4, r9, r4, lr
 801950e:	f895 e000 	ldrb.w	lr, [r5]
 8019512:	fb09 c000 	mla	r0, r9, r0, ip
 8019516:	fb01 4407 	mla	r4, r1, r7, r4
 801951a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801951c:	fb06 4407 	mla	r4, r6, r7, r4
 8019520:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019522:	fb1e fe07 	smulbb	lr, lr, r7
 8019526:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801952a:	fb04 e403 	mla	r4, r4, r3, lr
 801952e:	b2a4      	uxth	r4, r4
 8019530:	f104 0e01 	add.w	lr, r4, #1
 8019534:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8019538:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801953a:	fb01 0004 	mla	r0, r1, r4, r0
 801953e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019540:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019544:	fb06 0004 	mla	r0, r6, r4, r0
 8019548:	786c      	ldrb	r4, [r5, #1]
 801954a:	f885 e000 	strb.w	lr, [r5]
 801954e:	fb14 f407 	smulbb	r4, r4, r7
 8019552:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019556:	fb00 4003 	mla	r0, r0, r3, r4
 801955a:	b280      	uxth	r0, r0
 801955c:	1c44      	adds	r4, r0, #1
 801955e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019562:	1200      	asrs	r0, r0, #8
 8019564:	7068      	strb	r0, [r5, #1]
 8019566:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019568:	4342      	muls	r2, r0
 801956a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801956c:	fb09 2200 	mla	r2, r9, r0, r2
 8019570:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019572:	fb01 2100 	mla	r1, r1, r0, r2
 8019576:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019578:	fb06 1602 	mla	r6, r6, r2, r1
 801957c:	78a9      	ldrb	r1, [r5, #2]
 801957e:	fb11 f107 	smulbb	r1, r1, r7
 8019582:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019586:	fb06 1303 	mla	r3, r6, r3, r1
 801958a:	b29b      	uxth	r3, r3
 801958c:	1c5e      	adds	r6, r3, #1
 801958e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8019592:	121b      	asrs	r3, r3, #8
 8019594:	70ab      	strb	r3, [r5, #2]
 8019596:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019598:	3503      	adds	r5, #3
 801959a:	449a      	add	sl, r3
 801959c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801959e:	4498      	add	r8, r3
 80195a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195a2:	3b01      	subs	r3, #1
 80195a4:	930d      	str	r3, [sp, #52]	; 0x34
 80195a6:	e750      	b.n	801944a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80195a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80195aa:	449a      	add	sl, r3
 80195ac:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80195ae:	4498      	add	r8, r3
 80195b0:	9b07      	ldr	r3, [sp, #28]
 80195b2:	3b01      	subs	r3, #1
 80195b4:	9307      	str	r3, [sp, #28]
 80195b6:	9b08      	ldr	r3, [sp, #32]
 80195b8:	3303      	adds	r3, #3
 80195ba:	9308      	str	r3, [sp, #32]
 80195bc:	e726      	b.n	801940c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80195be:	d026      	beq.n	801960e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80195c0:	9b07      	ldr	r3, [sp, #28]
 80195c2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80195c4:	3b01      	subs	r3, #1
 80195c6:	fb00 a003 	mla	r0, r0, r3, sl
 80195ca:	1400      	asrs	r0, r0, #16
 80195cc:	f53f af3a 	bmi.w	8019444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195d0:	3901      	subs	r1, #1
 80195d2:	4288      	cmp	r0, r1
 80195d4:	f6bf af36 	bge.w	8019444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195d8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80195da:	fb01 8303 	mla	r3, r1, r3, r8
 80195de:	141b      	asrs	r3, r3, #16
 80195e0:	f53f af30 	bmi.w	8019444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195e4:	3a01      	subs	r2, #1
 80195e6:	4293      	cmp	r3, r2
 80195e8:	f6bf af2c 	bge.w	8019444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80195ec:	9b08      	ldr	r3, [sp, #32]
 80195ee:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80195f2:	1cdd      	adds	r5, r3, #3
 80195f4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80195f8:	f1bc 0f00 	cmp.w	ip, #0
 80195fc:	dc5f      	bgt.n	80196be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80195fe:	9b07      	ldr	r3, [sp, #28]
 8019600:	9a08      	ldr	r2, [sp, #32]
 8019602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801960a:	441a      	add	r2, r3
 801960c:	9208      	str	r2, [sp, #32]
 801960e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019610:	2b00      	cmp	r3, #0
 8019612:	f340 80e9 	ble.w	80197e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8019616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801961a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801961c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019620:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019624:	eef0 6a48 	vmov.f32	s13, s16
 8019628:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801962c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019634:	ee16 aa90 	vmov	sl, s13
 8019638:	eef0 6a68 	vmov.f32	s13, s17
 801963c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019640:	ee16 8a90 	vmov	r8, s13
 8019644:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019648:	ee69 7a27 	vmul.f32	s15, s18, s15
 801964c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019650:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019654:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019658:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801965c:	ee18 2a10 	vmov	r2, s16
 8019660:	eeb0 8a47 	vmov.f32	s16, s14
 8019664:	fb92 f3f3 	sdiv	r3, r2, r3
 8019668:	ee18 2a90 	vmov	r2, s17
 801966c:	9333      	str	r3, [sp, #204]	; 0xcc
 801966e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019670:	eef0 8a67 	vmov.f32	s17, s15
 8019674:	fb92 f3f3 	sdiv	r3, r2, r3
 8019678:	9334      	str	r3, [sp, #208]	; 0xd0
 801967a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801967c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801967e:	3b01      	subs	r3, #1
 8019680:	930b      	str	r3, [sp, #44]	; 0x2c
 8019682:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019684:	bf08      	it	eq
 8019686:	4613      	moveq	r3, r2
 8019688:	9307      	str	r3, [sp, #28]
 801968a:	e6b1      	b.n	80193f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801968c:	1c47      	adds	r7, r0, #1
 801968e:	d482      	bmi.n	8019596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019690:	42bb      	cmp	r3, r7
 8019692:	db80      	blt.n	8019596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8019694:	1c67      	adds	r7, r4, #1
 8019696:	f53f af7e 	bmi.w	8019596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801969a:	42be      	cmp	r6, r7
 801969c:	f6ff af7b 	blt.w	8019596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80196a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80196a2:	b236      	sxth	r6, r6
 80196a4:	9001      	str	r0, [sp, #4]
 80196a6:	b21b      	sxth	r3, r3
 80196a8:	9600      	str	r6, [sp, #0]
 80196aa:	981d      	ldr	r0, [sp, #116]	; 0x74
 80196ac:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80196b0:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80196b4:	4629      	mov	r1, r5
 80196b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196b8:	f7ff fd58 	bl	801916c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80196bc:	e76b      	b.n	8019596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80196be:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80196c0:	ea4f 402a 	mov.w	r0, sl, asr #16
 80196c4:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80196c8:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80196cc:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80196d0:	ea4f 4128 	mov.w	r1, r8, asr #16
 80196d4:	fb07 0101 	mla	r1, r7, r1, r0
 80196d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80196da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80196de:	1844      	adds	r4, r0, r1
 80196e0:	5c40      	ldrb	r0, [r0, r1]
 80196e2:	78a6      	ldrb	r6, [r4, #2]
 80196e4:	7861      	ldrb	r1, [r4, #1]
 80196e6:	960f      	str	r6, [sp, #60]	; 0x3c
 80196e8:	78e6      	ldrb	r6, [r4, #3]
 80196ea:	910d      	str	r1, [sp, #52]	; 0x34
 80196ec:	9610      	str	r6, [sp, #64]	; 0x40
 80196ee:	f894 9004 	ldrb.w	r9, [r4, #4]
 80196f2:	f894 b005 	ldrb.w	fp, [r4, #5]
 80196f6:	b192      	cbz	r2, 801971e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80196f8:	f06f 0604 	mvn.w	r6, #4
 80196fc:	2103      	movs	r1, #3
 80196fe:	3405      	adds	r4, #5
 8019700:	fb17 6701 	smlabb	r7, r7, r1, r6
 8019704:	19e6      	adds	r6, r4, r7
 8019706:	5de4      	ldrb	r4, [r4, r7]
 8019708:	9417      	str	r4, [sp, #92]	; 0x5c
 801970a:	7874      	ldrb	r4, [r6, #1]
 801970c:	9419      	str	r4, [sp, #100]	; 0x64
 801970e:	78b4      	ldrb	r4, [r6, #2]
 8019710:	941b      	str	r4, [sp, #108]	; 0x6c
 8019712:	78f4      	ldrb	r4, [r6, #3]
 8019714:	9418      	str	r4, [sp, #96]	; 0x60
 8019716:	7934      	ldrb	r4, [r6, #4]
 8019718:	941a      	str	r4, [sp, #104]	; 0x68
 801971a:	7974      	ldrb	r4, [r6, #5]
 801971c:	941c      	str	r4, [sp, #112]	; 0x70
 801971e:	b29b      	uxth	r3, r3
 8019720:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019722:	b292      	uxth	r2, r2
 8019724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019726:	3503      	adds	r5, #3
 8019728:	f10c 3cff 	add.w	ip, ip, #4294967295
 801972c:	fb03 f402 	mul.w	r4, r3, r2
 8019730:	011b      	lsls	r3, r3, #4
 8019732:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019736:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801973a:	1b1b      	subs	r3, r3, r4
 801973c:	b292      	uxth	r2, r2
 801973e:	b29b      	uxth	r3, r3
 8019740:	1ab6      	subs	r6, r6, r2
 8019742:	435f      	muls	r7, r3
 8019744:	b2b6      	uxth	r6, r6
 8019746:	fb03 f909 	mul.w	r9, r3, r9
 801974a:	fb03 fb0b 	mul.w	fp, r3, fp
 801974e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019750:	fb06 7000 	mla	r0, r6, r0, r7
 8019754:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019756:	fb06 bb03 	mla	fp, r6, r3, fp
 801975a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801975c:	fb02 0007 	mla	r0, r2, r7, r0
 8019760:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019762:	fb02 bb03 	mla	fp, r2, r3, fp
 8019766:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019768:	fb04 0007 	mla	r0, r4, r7, r0
 801976c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8019770:	fb17 f701 	smulbb	r7, r7, r1
 8019774:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019778:	990d      	ldr	r1, [sp, #52]	; 0x34
 801977a:	fb00 700e 	mla	r0, r0, lr, r7
 801977e:	fb06 9101 	mla	r1, r6, r1, r9
 8019782:	b280      	uxth	r0, r0
 8019784:	1c47      	adds	r7, r0, #1
 8019786:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801978a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801978c:	1200      	asrs	r0, r0, #8
 801978e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8019792:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019794:	fb02 1100 	mla	r1, r2, r0, r1
 8019798:	981a      	ldr	r0, [sp, #104]	; 0x68
 801979a:	fb04 1100 	mla	r1, r4, r0, r1
 801979e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80197a2:	fb04 b403 	mla	r4, r4, r3, fp
 80197a6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80197aa:	fb10 f007 	smulbb	r0, r0, r7
 80197ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80197b2:	fb13 f307 	smulbb	r3, r3, r7
 80197b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80197ba:	fb01 010e 	mla	r1, r1, lr, r0
 80197be:	fb04 340e 	mla	r4, r4, lr, r3
 80197c2:	b289      	uxth	r1, r1
 80197c4:	b2a4      	uxth	r4, r4
 80197c6:	1c48      	adds	r0, r1, #1
 80197c8:	1c63      	adds	r3, r4, #1
 80197ca:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80197ce:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80197d2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80197d4:	1209      	asrs	r1, r1, #8
 80197d6:	1224      	asrs	r4, r4, #8
 80197d8:	449a      	add	sl, r3
 80197da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80197dc:	f805 1c05 	strb.w	r1, [r5, #-5]
 80197e0:	f805 4c04 	strb.w	r4, [r5, #-4]
 80197e4:	4498      	add	r8, r3
 80197e6:	e707      	b.n	80195f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80197e8:	b01f      	add	sp, #124	; 0x7c
 80197ea:	ecbd 8b08 	vpop	{d8-d11}
 80197ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080197f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80197f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197f8:	b085      	sub	sp, #20
 80197fa:	784d      	ldrb	r5, [r1, #1]
 80197fc:	788e      	ldrb	r6, [r1, #2]
 80197fe:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8019802:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8019806:	9403      	str	r4, [sp, #12]
 8019808:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801980c:	780c      	ldrb	r4, [r1, #0]
 801980e:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8019812:	fb07 ce03 	mla	lr, r7, r3, ip
 8019816:	2f00      	cmp	r7, #0
 8019818:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801981c:	eb02 0b0e 	add.w	fp, r2, lr
 8019820:	db56      	blt.n	80198d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8019822:	45b9      	cmp	r9, r7
 8019824:	dd54      	ble.n	80198d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8019826:	f1bc 0f00 	cmp.w	ip, #0
 801982a:	db4d      	blt.n	80198c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801982c:	4563      	cmp	r3, ip
 801982e:	dd4b      	ble.n	80198c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8019830:	f812 200e 	ldrb.w	r2, [r2, lr]
 8019834:	9200      	str	r2, [sp, #0]
 8019836:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801983a:	9201      	str	r2, [sp, #4]
 801983c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8019840:	9202      	str	r2, [sp, #8]
 8019842:	f11c 0201 	adds.w	r2, ip, #1
 8019846:	d44a      	bmi.n	80198de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019848:	4293      	cmp	r3, r2
 801984a:	dd48      	ble.n	80198de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801984c:	2800      	cmp	r0, #0
 801984e:	d046      	beq.n	80198de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8019850:	f89b e003 	ldrb.w	lr, [fp, #3]
 8019854:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8019858:	f89b a005 	ldrb.w	sl, [fp, #5]
 801985c:	3701      	adds	r7, #1
 801985e:	d446      	bmi.n	80198ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019860:	45b9      	cmp	r9, r7
 8019862:	dd44      	ble.n	80198ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8019864:	9a03      	ldr	r2, [sp, #12]
 8019866:	2a00      	cmp	r2, #0
 8019868:	d045      	beq.n	80198f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801986a:	f1bc 0f00 	cmp.w	ip, #0
 801986e:	db3a      	blt.n	80198e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019870:	4563      	cmp	r3, ip
 8019872:	dd38      	ble.n	80198e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8019874:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019878:	f04f 0903 	mov.w	r9, #3
 801987c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8019880:	fb03 b209 	mla	r2, r3, r9, fp
 8019884:	fb03 b909 	mla	r9, r3, r9, fp
 8019888:	7852      	ldrb	r2, [r2, #1]
 801988a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801988e:	f11c 0c01 	adds.w	ip, ip, #1
 8019892:	d40d      	bmi.n	80198b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019894:	4563      	cmp	r3, ip
 8019896:	dd0b      	ble.n	80198b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8019898:	b160      	cbz	r0, 80198b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801989a:	2603      	movs	r6, #3
 801989c:	fb13 6406 	smlabb	r4, r3, r6, r6
 80198a0:	fb03 b506 	mla	r5, r3, r6, fp
 80198a4:	fb03 b306 	mla	r3, r3, r6, fp
 80198a8:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80198ac:	792d      	ldrb	r5, [r5, #4]
 80198ae:	795e      	ldrb	r6, [r3, #5]
 80198b0:	280f      	cmp	r0, #15
 80198b2:	d802      	bhi.n	80198ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80198b4:	9b03      	ldr	r3, [sp, #12]
 80198b6:	2b0f      	cmp	r3, #15
 80198b8:	d922      	bls.n	8019900 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80198ba:	4b2f      	ldr	r3, [pc, #188]	; (8019978 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80198bc:	f240 1157 	movw	r1, #343	; 0x157
 80198c0:	4a2e      	ldr	r2, [pc, #184]	; (801997c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80198c2:	482f      	ldr	r0, [pc, #188]	; (8019980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80198c4:	f002 fd0a 	bl	801c2dc <__assert_func>
 80198c8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80198cc:	9400      	str	r4, [sp, #0]
 80198ce:	e7b8      	b.n	8019842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80198d0:	46b2      	mov	sl, r6
 80198d2:	46a8      	mov	r8, r5
 80198d4:	46a6      	mov	lr, r4
 80198d6:	9400      	str	r4, [sp, #0]
 80198d8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80198dc:	e7be      	b.n	801985c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80198de:	46b2      	mov	sl, r6
 80198e0:	46a8      	mov	r8, r5
 80198e2:	46a6      	mov	lr, r4
 80198e4:	e7ba      	b.n	801985c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80198e6:	46b1      	mov	r9, r6
 80198e8:	462a      	mov	r2, r5
 80198ea:	4627      	mov	r7, r4
 80198ec:	e7cf      	b.n	801988e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80198ee:	46b1      	mov	r9, r6
 80198f0:	462a      	mov	r2, r5
 80198f2:	4627      	mov	r7, r4
 80198f4:	e7dc      	b.n	80198b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80198f6:	280f      	cmp	r0, #15
 80198f8:	d8df      	bhi.n	80198ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80198fa:	46b1      	mov	r9, r6
 80198fc:	462a      	mov	r2, r5
 80198fe:	4627      	mov	r7, r4
 8019900:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8019904:	b280      	uxth	r0, r0
 8019906:	fb00 f30b 	mul.w	r3, r0, fp
 801990a:	0100      	lsls	r0, r0, #4
 801990c:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8019910:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8019914:	1ac0      	subs	r0, r0, r3
 8019916:	fa1f fb8b 	uxth.w	fp, fp
 801991a:	b280      	uxth	r0, r0
 801991c:	ebac 0c0b 	sub.w	ip, ip, fp
 8019920:	9003      	str	r0, [sp, #12]
 8019922:	fa1f fc8c 	uxth.w	ip, ip
 8019926:	fb00 fe0e 	mul.w	lr, r0, lr
 801992a:	9800      	ldr	r0, [sp, #0]
 801992c:	fb0c ee00 	mla	lr, ip, r0, lr
 8019930:	9803      	ldr	r0, [sp, #12]
 8019932:	fb00 f808 	mul.w	r8, r0, r8
 8019936:	9801      	ldr	r0, [sp, #4]
 8019938:	fb0b ee07 	mla	lr, fp, r7, lr
 801993c:	fb0c 8800 	mla	r8, ip, r0, r8
 8019940:	fb03 ee04 	mla	lr, r3, r4, lr
 8019944:	fb0b 8202 	mla	r2, fp, r2, r8
 8019948:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801994c:	fb03 2505 	mla	r5, r3, r5, r2
 8019950:	9a03      	ldr	r2, [sp, #12]
 8019952:	f881 e000 	strb.w	lr, [r1]
 8019956:	fb02 f00a 	mul.w	r0, r2, sl
 801995a:	9a02      	ldr	r2, [sp, #8]
 801995c:	122d      	asrs	r5, r5, #8
 801995e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019962:	704d      	strb	r5, [r1, #1]
 8019964:	fb0b c909 	mla	r9, fp, r9, ip
 8019968:	fb03 9606 	mla	r6, r3, r6, r9
 801996c:	1236      	asrs	r6, r6, #8
 801996e:	708e      	strb	r6, [r1, #2]
 8019970:	b005      	add	sp, #20
 8019972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019976:	bf00      	nop
 8019978:	080205d7 	.word	0x080205d7
 801997c:	08020a8e 	.word	0x08020a8e
 8019980:	0802065f 	.word	0x0802065f

08019984 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	ed2d 8b08 	vpush	{d8-d11}
 801998c:	b09b      	sub	sp, #108	; 0x6c
 801998e:	eeb0 aa40 	vmov.f32	s20, s0
 8019992:	eef0 9a60 	vmov.f32	s19, s1
 8019996:	920b      	str	r2, [sp, #44]	; 0x2c
 8019998:	eeb0 9a41 	vmov.f32	s18, s2
 801999c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801999e:	eeb0 8a62 	vmov.f32	s16, s5
 80199a2:	9019      	str	r0, [sp, #100]	; 0x64
 80199a4:	eef0 8a43 	vmov.f32	s17, s6
 80199a8:	6850      	ldr	r0, [r2, #4]
 80199aa:	eef0 ba44 	vmov.f32	s23, s8
 80199ae:	9109      	str	r1, [sp, #36]	; 0x24
 80199b0:	eeb0 ba64 	vmov.f32	s22, s9
 80199b4:	9306      	str	r3, [sp, #24]
 80199b6:	eef0 aa45 	vmov.f32	s21, s10
 80199ba:	6812      	ldr	r2, [r2, #0]
 80199bc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80199c0:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 80199c4:	fb00 1303 	mla	r3, r0, r3, r1
 80199c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199cc:	18d3      	adds	r3, r2, r3
 80199ce:	9307      	str	r3, [sp, #28]
 80199d0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	9308      	str	r3, [sp, #32]
 80199d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d8:	2b00      	cmp	r3, #0
 80199da:	dc03      	bgt.n	80199e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80199dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199de:	2b00      	cmp	r3, #0
 80199e0:	f340 81ab 	ble.w	8019d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80199e4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80199e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80199ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80199ee:	1e48      	subs	r0, r1, #1
 80199f0:	1e55      	subs	r5, r2, #1
 80199f2:	9b06      	ldr	r3, [sp, #24]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	f340 80b1 	ble.w	8019b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80199fa:	ea5f 462b 	movs.w	r6, fp, asr #16
 80199fe:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019a02:	d406      	bmi.n	8019a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a04:	4286      	cmp	r6, r0
 8019a06:	da04      	bge.n	8019a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	db02      	blt.n	8019a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019a0c:	42ab      	cmp	r3, r5
 8019a0e:	f2c0 80a6 	blt.w	8019b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8019a12:	3601      	adds	r6, #1
 8019a14:	f100 8097 	bmi.w	8019b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a18:	42b1      	cmp	r1, r6
 8019a1a:	f2c0 8094 	blt.w	8019b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a1e:	3301      	adds	r3, #1
 8019a20:	f100 8091 	bmi.w	8019b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a24:	429a      	cmp	r2, r3
 8019a26:	f2c0 808e 	blt.w	8019b46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8019a2a:	9b06      	ldr	r3, [sp, #24]
 8019a2c:	9e07      	ldr	r6, [sp, #28]
 8019a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	f340 80b0 	ble.w	8019b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019a38:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8019a3a:	1425      	asrs	r5, r4, #16
 8019a3c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019a3e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019a42:	68c7      	ldr	r7, [r0, #12]
 8019a44:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019a48:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019a4c:	689b      	ldr	r3, [r3, #8]
 8019a4e:	f100 80ea 	bmi.w	8019c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a52:	f103 3cff 	add.w	ip, r3, #4294967295
 8019a56:	4560      	cmp	r0, ip
 8019a58:	f280 80e5 	bge.w	8019c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a5c:	2d00      	cmp	r5, #0
 8019a5e:	f2c0 80e2 	blt.w	8019c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a62:	f107 3cff 	add.w	ip, r7, #4294967295
 8019a66:	4565      	cmp	r5, ip
 8019a68:	f280 80dd 	bge.w	8019c26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019a6c:	b21b      	sxth	r3, r3
 8019a6e:	fb05 0003 	mla	r0, r5, r3, r0
 8019a72:	9d08      	ldr	r5, [sp, #32]
 8019a74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019a78:	182f      	adds	r7, r5, r0
 8019a7a:	5c2d      	ldrb	r5, [r5, r0]
 8019a7c:	7878      	ldrb	r0, [r7, #1]
 8019a7e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019a82:	900c      	str	r0, [sp, #48]	; 0x30
 8019a84:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019a88:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019a8c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019a90:	b1c9      	cbz	r1, 8019ac6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019a92:	f04f 0c03 	mov.w	ip, #3
 8019a96:	f06f 0004 	mvn.w	r0, #4
 8019a9a:	3705      	adds	r7, #5
 8019a9c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019aa0:	eb07 0c03 	add.w	ip, r7, r3
 8019aa4:	5cfb      	ldrb	r3, [r7, r3]
 8019aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8019aa8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8019aae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8019ab4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019ab8:	930e      	str	r3, [sp, #56]	; 0x38
 8019aba:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019abe:	9310      	str	r3, [sp, #64]	; 0x40
 8019ac0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019ac4:	9312      	str	r3, [sp, #72]	; 0x48
 8019ac6:	b292      	uxth	r2, r2
 8019ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019aca:	b289      	uxth	r1, r1
 8019acc:	fb02 f301 	mul.w	r3, r2, r1
 8019ad0:	0112      	lsls	r2, r2, #4
 8019ad2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019ad6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019ada:	1ad2      	subs	r2, r2, r3
 8019adc:	b289      	uxth	r1, r1
 8019ade:	b292      	uxth	r2, r2
 8019ae0:	1a7f      	subs	r7, r7, r1
 8019ae2:	fb02 f909 	mul.w	r9, r2, r9
 8019ae6:	b2bf      	uxth	r7, r7
 8019ae8:	fb02 f808 	mul.w	r8, r2, r8
 8019aec:	fb02 fa0a 	mul.w	sl, r2, sl
 8019af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019af2:	fb07 9905 	mla	r9, r7, r5, r9
 8019af6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019af8:	fb07 8800 	mla	r8, r7, r0, r8
 8019afc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019afe:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019b02:	fb01 9905 	mla	r9, r1, r5, r9
 8019b06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019b08:	fb01 8800 	mla	r8, r1, r0, r8
 8019b0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019b0e:	fb01 a102 	mla	r1, r1, r2, sl
 8019b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b14:	fb03 9905 	mla	r9, r3, r5, r9
 8019b18:	fb03 8800 	mla	r8, r3, r0, r8
 8019b1c:	fb03 1302 	mla	r3, r3, r2, r1
 8019b20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b24:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019b28:	121b      	asrs	r3, r3, #8
 8019b2a:	f886 9000 	strb.w	r9, [r6]
 8019b2e:	f886 8001 	strb.w	r8, [r6, #1]
 8019b32:	70b3      	strb	r3, [r6, #2]
 8019b34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019b36:	3603      	adds	r6, #3
 8019b38:	449b      	add	fp, r3
 8019b3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b3c:	441c      	add	r4, r3
 8019b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b40:	3b01      	subs	r3, #1
 8019b42:	930a      	str	r3, [sp, #40]	; 0x28
 8019b44:	e774      	b.n	8019a30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8019b46:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019b48:	449b      	add	fp, r3
 8019b4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b4c:	441c      	add	r4, r3
 8019b4e:	9b06      	ldr	r3, [sp, #24]
 8019b50:	3b01      	subs	r3, #1
 8019b52:	9306      	str	r3, [sp, #24]
 8019b54:	9b07      	ldr	r3, [sp, #28]
 8019b56:	3303      	adds	r3, #3
 8019b58:	9307      	str	r3, [sp, #28]
 8019b5a:	e74a      	b.n	80199f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019b5c:	d024      	beq.n	8019ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8019b5e:	9b06      	ldr	r3, [sp, #24]
 8019b60:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8019b62:	3b01      	subs	r3, #1
 8019b64:	fb00 b003 	mla	r0, r0, r3, fp
 8019b68:	1400      	asrs	r0, r0, #16
 8019b6a:	f53f af5e 	bmi.w	8019a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b6e:	3901      	subs	r1, #1
 8019b70:	4288      	cmp	r0, r1
 8019b72:	f6bf af5a 	bge.w	8019a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b76:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019b78:	fb01 4303 	mla	r3, r1, r3, r4
 8019b7c:	141b      	asrs	r3, r3, #16
 8019b7e:	f53f af54 	bmi.w	8019a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b82:	3a01      	subs	r2, #1
 8019b84:	4293      	cmp	r3, r2
 8019b86:	f6bf af50 	bge.w	8019a2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019b8a:	9b07      	ldr	r3, [sp, #28]
 8019b8c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019b90:	1cde      	adds	r6, r3, #3
 8019b92:	f1be 0f00 	cmp.w	lr, #0
 8019b96:	dc5f      	bgt.n	8019c58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8019b98:	9b06      	ldr	r3, [sp, #24]
 8019b9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019b9e:	9b07      	ldr	r3, [sp, #28]
 8019ba0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ba4:	4423      	add	r3, r4
 8019ba6:	9307      	str	r3, [sp, #28]
 8019ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	f340 80c5 	ble.w	8019d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8019bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019bb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bb6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019bba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019bbe:	eef0 6a48 	vmov.f32	s13, s16
 8019bc2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019bc6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019bca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019bce:	ee16 ba90 	vmov	fp, s13
 8019bd2:	eef0 6a68 	vmov.f32	s13, s17
 8019bd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019bda:	ee16 4a90 	vmov	r4, s13
 8019bde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019be2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019be6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019bea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019bee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019bf2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019bf6:	ee18 2a10 	vmov	r2, s16
 8019bfa:	eeb0 8a47 	vmov.f32	s16, s14
 8019bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c02:	ee18 2a90 	vmov	r2, s17
 8019c06:	932f      	str	r3, [sp, #188]	; 0xbc
 8019c08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c0a:	eef0 8a67 	vmov.f32	s17, s15
 8019c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c12:	9330      	str	r3, [sp, #192]	; 0xc0
 8019c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c18:	3b01      	subs	r3, #1
 8019c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c1e:	bf08      	it	eq
 8019c20:	4613      	moveq	r3, r2
 8019c22:	9306      	str	r3, [sp, #24]
 8019c24:	e6d7      	b.n	80199d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019c26:	f110 0c01 	adds.w	ip, r0, #1
 8019c2a:	d483      	bmi.n	8019b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c2c:	4563      	cmp	r3, ip
 8019c2e:	db81      	blt.n	8019b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c30:	f115 0c01 	adds.w	ip, r5, #1
 8019c34:	f53f af7e 	bmi.w	8019b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c38:	4567      	cmp	r7, ip
 8019c3a:	f6ff af7b 	blt.w	8019b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c3e:	b23f      	sxth	r7, r7
 8019c40:	b21b      	sxth	r3, r3
 8019c42:	9700      	str	r7, [sp, #0]
 8019c44:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8019c48:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019c4c:	9a08      	ldr	r2, [sp, #32]
 8019c4e:	4631      	mov	r1, r6
 8019c50:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019c52:	f7ff fdcf 	bl	80197f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8019c56:	e76d      	b.n	8019b34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8019c58:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8019c5a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019c5e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019c62:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019c66:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8019c6a:	1421      	asrs	r1, r4, #16
 8019c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8019c6e:	fb0c 0101 	mla	r1, ip, r1, r0
 8019c72:	9808      	ldr	r0, [sp, #32]
 8019c74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c78:	1845      	adds	r5, r0, r1
 8019c7a:	5c40      	ldrb	r0, [r0, r1]
 8019c7c:	796f      	ldrb	r7, [r5, #5]
 8019c7e:	7869      	ldrb	r1, [r5, #1]
 8019c80:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019c84:	f895 a003 	ldrb.w	sl, [r5, #3]
 8019c88:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019c8c:	970c      	str	r7, [sp, #48]	; 0x30
 8019c8e:	b1a2      	cbz	r2, 8019cba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8019c90:	2703      	movs	r7, #3
 8019c92:	f06f 0304 	mvn.w	r3, #4
 8019c96:	3505      	adds	r5, #5
 8019c98:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019c9c:	eb05 070c 	add.w	r7, r5, ip
 8019ca0:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019ca4:	9513      	str	r5, [sp, #76]	; 0x4c
 8019ca6:	787d      	ldrb	r5, [r7, #1]
 8019ca8:	9515      	str	r5, [sp, #84]	; 0x54
 8019caa:	78bd      	ldrb	r5, [r7, #2]
 8019cac:	9517      	str	r5, [sp, #92]	; 0x5c
 8019cae:	78fd      	ldrb	r5, [r7, #3]
 8019cb0:	9514      	str	r5, [sp, #80]	; 0x50
 8019cb2:	793d      	ldrb	r5, [r7, #4]
 8019cb4:	9516      	str	r5, [sp, #88]	; 0x58
 8019cb6:	797d      	ldrb	r5, [r7, #5]
 8019cb8:	9518      	str	r5, [sp, #96]	; 0x60
 8019cba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019cbe:	b292      	uxth	r2, r2
 8019cc0:	3603      	adds	r6, #3
 8019cc2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019cc6:	fb03 f502 	mul.w	r5, r3, r2
 8019cca:	011b      	lsls	r3, r3, #4
 8019ccc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019cd0:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019cd4:	1b5b      	subs	r3, r3, r5
 8019cd6:	b292      	uxth	r2, r2
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	1abf      	subs	r7, r7, r2
 8019cdc:	fb03 f909 	mul.w	r9, r3, r9
 8019ce0:	b2bf      	uxth	r7, r7
 8019ce2:	fb03 fa0a 	mul.w	sl, r3, sl
 8019ce6:	fb07 9901 	mla	r9, r7, r1, r9
 8019cea:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019cec:	fb07 aa00 	mla	sl, r7, r0, sl
 8019cf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019cf2:	fb02 9901 	mla	r9, r2, r1, r9
 8019cf6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019cf8:	fb02 aa00 	mla	sl, r2, r0, sl
 8019cfc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019cfe:	fb05 9901 	mla	r9, r5, r1, r9
 8019d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d04:	fb05 aa00 	mla	sl, r5, r0, sl
 8019d08:	434b      	muls	r3, r1
 8019d0a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019d0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019d10:	fb07 3308 	mla	r3, r7, r8, r3
 8019d14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d18:	f806 ac06 	strb.w	sl, [r6, #-6]
 8019d1c:	fb02 3201 	mla	r2, r2, r1, r3
 8019d20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019d22:	f806 9c05 	strb.w	r9, [r6, #-5]
 8019d26:	fb05 2503 	mla	r5, r5, r3, r2
 8019d2a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019d2c:	122d      	asrs	r5, r5, #8
 8019d2e:	449b      	add	fp, r3
 8019d30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d32:	f806 5c04 	strb.w	r5, [r6, #-4]
 8019d36:	441c      	add	r4, r3
 8019d38:	e72b      	b.n	8019b92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019d3a:	b01b      	add	sp, #108	; 0x6c
 8019d3c:	ecbd 8b08 	vpop	{d8-d11}
 8019d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8019d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8019d4c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019d50:	fb04 5603 	mla	r6, r4, r3, r5
 8019d54:	2c00      	cmp	r4, #0
 8019d56:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8019d5a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019d5e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8019d62:	db36      	blt.n	8019dd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019d64:	45a6      	cmp	lr, r4
 8019d66:	dd34      	ble.n	8019dd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8019d68:	2d00      	cmp	r5, #0
 8019d6a:	db30      	blt.n	8019dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019d6c:	42ab      	cmp	r3, r5
 8019d6e:	dd2e      	ble.n	8019dce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8019d70:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8019d74:	1c6e      	adds	r6, r5, #1
 8019d76:	d42f      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019d78:	42b3      	cmp	r3, r6
 8019d7a:	dd2d      	ble.n	8019dd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8019d7c:	b370      	cbz	r0, 8019ddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8019d7e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8019d82:	3401      	adds	r4, #1
 8019d84:	d42e      	bmi.n	8019de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019d86:	45a6      	cmp	lr, r4
 8019d88:	dd2c      	ble.n	8019de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8019d8a:	b377      	cbz	r7, 8019dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8019d8c:	2d00      	cmp	r5, #0
 8019d8e:	db27      	blt.n	8019de0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019d90:	42ab      	cmp	r3, r5
 8019d92:	dd25      	ble.n	8019de0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8019d94:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8019d98:	3501      	adds	r5, #1
 8019d9a:	d429      	bmi.n	8019df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019d9c:	42ab      	cmp	r3, r5
 8019d9e:	dd27      	ble.n	8019df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8019da0:	b340      	cbz	r0, 8019df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8019da2:	3301      	adds	r3, #1
 8019da4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8019da8:	280f      	cmp	r0, #15
 8019daa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019dae:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019db2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019db6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019dba:	d801      	bhi.n	8019dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8019dbc:	2f0f      	cmp	r7, #15
 8019dbe:	d91b      	bls.n	8019df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8019dc0:	4b89      	ldr	r3, [pc, #548]	; (8019fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8019dc2:	f240 1157 	movw	r1, #343	; 0x157
 8019dc6:	4a89      	ldr	r2, [pc, #548]	; (8019fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8019dc8:	4889      	ldr	r0, [pc, #548]	; (8019ff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8019dca:	f002 fa87 	bl	801c2dc <__assert_func>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	e7d0      	b.n	8019d74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8019dd2:	2600      	movs	r6, #0
 8019dd4:	4632      	mov	r2, r6
 8019dd6:	e7d4      	b.n	8019d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019dd8:	2600      	movs	r6, #0
 8019dda:	e7d2      	b.n	8019d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019ddc:	4606      	mov	r6, r0
 8019dde:	e7d0      	b.n	8019d82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8019de0:	2400      	movs	r4, #0
 8019de2:	e7d9      	b.n	8019d98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8019de4:	2300      	movs	r3, #0
 8019de6:	461c      	mov	r4, r3
 8019de8:	e7de      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019dea:	463b      	mov	r3, r7
 8019dec:	463c      	mov	r4, r7
 8019dee:	e7db      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019df0:	2300      	movs	r3, #0
 8019df2:	e7d9      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019df4:	4603      	mov	r3, r0
 8019df6:	e7d7      	b.n	8019da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8019df8:	b280      	uxth	r0, r0
 8019dfa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019dfe:	b2bf      	uxth	r7, r7
 8019e00:	fb00 fe07 	mul.w	lr, r0, r7
 8019e04:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019e08:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8019e0c:	eba0 0c0e 	sub.w	ip, r0, lr
 8019e10:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8019e14:	b2bf      	uxth	r7, r7
 8019e16:	fa1f fc8c 	uxth.w	ip, ip
 8019e1a:	eba5 0507 	sub.w	r5, r5, r7
 8019e1e:	fb0c f00a 	mul.w	r0, ip, sl
 8019e22:	b2ad      	uxth	r5, r5
 8019e24:	fb05 000b 	mla	r0, r5, fp, r0
 8019e28:	fb07 0009 	mla	r0, r7, r9, r0
 8019e2c:	fb0e 0008 	mla	r0, lr, r8, r0
 8019e30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019e34:	9001      	str	r0, [sp, #4]
 8019e36:	d018      	beq.n	8019e6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8019e38:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8019e3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019e40:	fb0b f000 	mul.w	r0, fp, r0
 8019e44:	fb0b fb02 	mul.w	fp, fp, r2
 8019e48:	0a02      	lsrs	r2, r0, #8
 8019e4a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019e4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e52:	4402      	add	r2, r0
 8019e54:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019e58:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019e5c:	0a12      	lsrs	r2, r2, #8
 8019e5e:	0a00      	lsrs	r0, r0, #8
 8019e60:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019e68:	4302      	orrs	r2, r0
 8019e6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019e6e:	d01a      	beq.n	8019ea6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8019e70:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019e74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019e78:	fb0a f000 	mul.w	r0, sl, r0
 8019e7c:	fb0a fa06 	mul.w	sl, sl, r6
 8019e80:	0a06      	lsrs	r6, r0, #8
 8019e82:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019e86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e8a:	4406      	add	r6, r0
 8019e8c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019e90:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019e94:	0a36      	lsrs	r6, r6, #8
 8019e96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019e9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019ea2:	ea46 060a 	orr.w	r6, r6, sl
 8019ea6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019eaa:	d01b      	beq.n	8019ee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8019eac:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019eb0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019eb4:	fb09 fa0a 	mul.w	sl, r9, sl
 8019eb8:	fb09 f004 	mul.w	r0, r9, r4
 8019ebc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019ec0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019ec4:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019ec8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019ecc:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019ed0:	4454      	add	r4, sl
 8019ed2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019ed6:	0a24      	lsrs	r4, r4, #8
 8019ed8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019edc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019ee0:	ea44 0409 	orr.w	r4, r4, r9
 8019ee4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019ee8:	d01b      	beq.n	8019f22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8019eea:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8019eee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ef2:	fb08 f909 	mul.w	r9, r8, r9
 8019ef6:	fb08 f003 	mul.w	r0, r8, r3
 8019efa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019efe:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8019f02:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8019f06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f0a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8019f0e:	444b      	add	r3, r9
 8019f10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019f14:	0a1b      	lsrs	r3, r3, #8
 8019f16:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019f1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f1e:	ea43 0308 	orr.w	r3, r3, r8
 8019f22:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8019f26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019f2a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8019f2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019f32:	fb0c f000 	mul.w	r0, ip, r0
 8019f36:	fb0c f606 	mul.w	r6, ip, r6
 8019f3a:	fb05 0808 	mla	r8, r5, r8, r0
 8019f3e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8019f42:	fb05 6502 	mla	r5, r5, r2, r6
 8019f46:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019f4a:	fb07 8800 	mla	r8, r7, r0, r8
 8019f4e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8019f52:	fb07 5704 	mla	r7, r7, r4, r5
 8019f56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f5a:	fb0e 8000 	mla	r0, lr, r0, r8
 8019f5e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019f62:	9b01      	ldr	r3, [sp, #4]
 8019f64:	0a00      	lsrs	r0, r0, #8
 8019f66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f6a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019f6e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019f72:	ea40 0e0e 	orr.w	lr, r0, lr
 8019f76:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019f7a:	b280      	uxth	r0, r0
 8019f7c:	fa5f f48e 	uxtb.w	r4, lr
 8019f80:	4343      	muls	r3, r0
 8019f82:	fb14 f400 	smulbb	r4, r4, r0
 8019f86:	1c5a      	adds	r2, r3, #1
 8019f88:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019f8c:	780b      	ldrb	r3, [r1, #0]
 8019f8e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019f92:	b2d2      	uxtb	r2, r2
 8019f94:	fb03 4302 	mla	r3, r3, r2, r4
 8019f98:	b29b      	uxth	r3, r3
 8019f9a:	1c5c      	adds	r4, r3, #1
 8019f9c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019fa0:	784c      	ldrb	r4, [r1, #1]
 8019fa2:	fb14 f402 	smulbb	r4, r4, r2
 8019fa6:	121b      	asrs	r3, r3, #8
 8019fa8:	700b      	strb	r3, [r1, #0]
 8019faa:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8019fae:	fb03 4300 	mla	r3, r3, r0, r4
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	1c5c      	adds	r4, r3, #1
 8019fb6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019fba:	121b      	asrs	r3, r3, #8
 8019fbc:	704b      	strb	r3, [r1, #1]
 8019fbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8019fc2:	f891 e002 	ldrb.w	lr, [r1, #2]
 8019fc6:	fb1e fe02 	smulbb	lr, lr, r2
 8019fca:	fb03 ee00 	mla	lr, r3, r0, lr
 8019fce:	fa1f fe8e 	uxth.w	lr, lr
 8019fd2:	f10e 0301 	add.w	r3, lr, #1
 8019fd6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8019fda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019fde:	f881 e002 	strb.w	lr, [r1, #2]
 8019fe2:	b003      	add	sp, #12
 8019fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fe8:	080205d7 	.word	0x080205d7
 8019fec:	08020a8e 	.word	0x08020a8e
 8019ff0:	0802065f 	.word	0x0802065f

08019ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff8:	ed2d 8b08 	vpush	{d8-d11}
 8019ffc:	b09d      	sub	sp, #116	; 0x74
 8019ffe:	eeb0 aa40 	vmov.f32	s20, s0
 801a002:	eef0 9a60 	vmov.f32	s19, s1
 801a006:	9219      	str	r2, [sp, #100]	; 0x64
 801a008:	eeb0 9a41 	vmov.f32	s18, s2
 801a00c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801a00e:	eeb0 8a62 	vmov.f32	s16, s5
 801a012:	9307      	str	r3, [sp, #28]
 801a014:	eef0 8a43 	vmov.f32	s17, s6
 801a018:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801a01c:	eef0 ba44 	vmov.f32	s23, s8
 801a020:	901b      	str	r0, [sp, #108]	; 0x6c
 801a022:	eeb0 ba64 	vmov.f32	s22, s9
 801a026:	931a      	str	r3, [sp, #104]	; 0x68
 801a028:	eef0 aa45 	vmov.f32	s21, s10
 801a02c:	6850      	ldr	r0, [r2, #4]
 801a02e:	9117      	str	r1, [sp, #92]	; 0x5c
 801a030:	6812      	ldr	r2, [r2, #0]
 801a032:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a036:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801a03a:	fb00 1303 	mla	r3, r0, r3, r1
 801a03e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a042:	18d3      	adds	r3, r2, r3
 801a044:	930a      	str	r3, [sp, #40]	; 0x28
 801a046:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	9310      	str	r3, [sp, #64]	; 0x40
 801a04c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a050:	930b      	str	r3, [sp, #44]	; 0x2c
 801a052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a054:	2b00      	cmp	r3, #0
 801a056:	dc03      	bgt.n	801a060 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	f340 8368 	ble.w	801a730 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a060:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a062:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a066:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a06a:	1e48      	subs	r0, r1, #1
 801a06c:	1e57      	subs	r7, r2, #1
 801a06e:	9b07      	ldr	r3, [sp, #28]
 801a070:	2b00      	cmp	r3, #0
 801a072:	f340 8187 	ble.w	801a384 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801a076:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a07a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a07e:	d406      	bmi.n	801a08e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a080:	4584      	cmp	ip, r0
 801a082:	da04      	bge.n	801a08e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a084:	2b00      	cmp	r3, #0
 801a086:	db02      	blt.n	801a08e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a088:	42bb      	cmp	r3, r7
 801a08a:	f2c0 817c 	blt.w	801a386 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801a08e:	f11c 0c01 	adds.w	ip, ip, #1
 801a092:	f100 816c 	bmi.w	801a36e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a096:	4561      	cmp	r1, ip
 801a098:	f2c0 8169 	blt.w	801a36e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a09c:	3301      	adds	r3, #1
 801a09e:	f100 8166 	bmi.w	801a36e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	f2c0 8163 	blt.w	801a36e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a0a8:	9b07      	ldr	r3, [sp, #28]
 801a0aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a0ac:	9318      	str	r3, [sp, #96]	; 0x60
 801a0ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	f340 8186 	ble.w	801a3c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801a0b6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a0b8:	142a      	asrs	r2, r5, #16
 801a0ba:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a0be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a0c2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a0c6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a0ca:	f100 81cb 	bmi.w	801a464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0ce:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a0d2:	4542      	cmp	r2, r8
 801a0d4:	f280 81c6 	bge.w	801a464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0d8:	2800      	cmp	r0, #0
 801a0da:	f2c0 81c3 	blt.w	801a464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0de:	f103 38ff 	add.w	r8, r3, #4294967295
 801a0e2:	4540      	cmp	r0, r8
 801a0e4:	f280 81be 	bge.w	801a464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801a0e8:	fa0f f38e 	sxth.w	r3, lr
 801a0ec:	fb00 2203 	mla	r2, r0, r3, r2
 801a0f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a0f2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801a0f6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801a0fa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a0fe:	2900      	cmp	r1, #0
 801a100:	f000 81a6 	beq.w	801a450 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801a104:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a108:	900c      	str	r0, [sp, #48]	; 0x30
 801a10a:	0e00      	lsrs	r0, r0, #24
 801a10c:	9013      	str	r0, [sp, #76]	; 0x4c
 801a10e:	f1bc 0f00 	cmp.w	ip, #0
 801a112:	d00f      	beq.n	801a134 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a118:	3b01      	subs	r3, #1
 801a11a:	009b      	lsls	r3, r3, #2
 801a11c:	3304      	adds	r3, #4
 801a11e:	eb08 0003 	add.w	r0, r8, r3
 801a122:	f858 3003 	ldr.w	r3, [r8, r3]
 801a126:	9308      	str	r3, [sp, #32]
 801a128:	0e1b      	lsrs	r3, r3, #24
 801a12a:	9311      	str	r3, [sp, #68]	; 0x44
 801a12c:	6843      	ldr	r3, [r0, #4]
 801a12e:	930d      	str	r3, [sp, #52]	; 0x34
 801a130:	0e1b      	lsrs	r3, r3, #24
 801a132:	9314      	str	r3, [sp, #80]	; 0x50
 801a134:	b289      	uxth	r1, r1
 801a136:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a138:	fa1f fc8c 	uxth.w	ip, ip
 801a13c:	0108      	lsls	r0, r1, #4
 801a13e:	fb01 f90c 	mul.w	r9, r1, ip
 801a142:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a146:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801a14a:	eba0 0809 	sub.w	r8, r0, r9
 801a14e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a150:	fa1f f18c 	uxth.w	r1, ip
 801a154:	fa1f f888 	uxth.w	r8, r8
 801a158:	1a5b      	subs	r3, r3, r1
 801a15a:	fb08 f000 	mul.w	r0, r8, r0
 801a15e:	b29b      	uxth	r3, r3
 801a160:	fb03 000e 	mla	r0, r3, lr, r0
 801a164:	fb01 0004 	mla	r0, r1, r4, r0
 801a168:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a16a:	fb09 0004 	mla	r0, r9, r4, r0
 801a16e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a172:	2800      	cmp	r0, #0
 801a174:	f000 80f2 	beq.w	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a178:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a17c:	d01b      	beq.n	801a1b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801a17e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a186:	fb0e fa0a 	mul.w	sl, lr, sl
 801a18a:	fb0e fe02 	mul.w	lr, lr, r2
 801a18e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a192:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a196:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a19a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a19e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a1a2:	4452      	add	r2, sl
 801a1a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1a8:	0a12      	lsrs	r2, r2, #8
 801a1aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a1ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a1b2:	ea42 020c 	orr.w	r2, r2, ip
 801a1b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1b8:	2cff      	cmp	r4, #255	; 0xff
 801a1ba:	d021      	beq.n	801a200 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a1bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a1be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a1c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1c4:	fb04 fb0b 	mul.w	fp, r4, fp
 801a1c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a1ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a1ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a1d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1d8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a1e4:	44de      	add	lr, fp
 801a1e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a1ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a1ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a1f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a1fa:	ea4e 040a 	orr.w	r4, lr, sl
 801a1fe:	940c      	str	r4, [sp, #48]	; 0x30
 801a200:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a202:	2cff      	cmp	r4, #255	; 0xff
 801a204:	d021      	beq.n	801a24a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801a206:	9c08      	ldr	r4, [sp, #32]
 801a208:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a20c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a20e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a212:	9c08      	ldr	r4, [sp, #32]
 801a214:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a218:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a21a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a21e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a222:	fb04 fa0a 	mul.w	sl, r4, sl
 801a226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a22a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a22e:	44de      	add	lr, fp
 801a230:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a234:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a23c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a244:	ea4e 040a 	orr.w	r4, lr, sl
 801a248:	9408      	str	r4, [sp, #32]
 801a24a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a24c:	2cff      	cmp	r4, #255	; 0xff
 801a24e:	d021      	beq.n	801a294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801a250:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a252:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a256:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a258:	fb04 fb0b 	mul.w	fp, r4, fp
 801a25c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a25e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a262:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a264:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a268:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a26c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a270:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a274:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a278:	44de      	add	lr, fp
 801a27a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a27e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a28a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a28e:	ea4e 040a 	orr.w	r4, lr, sl
 801a292:	940d      	str	r4, [sp, #52]	; 0x34
 801a294:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a296:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a29a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a29e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a2a2:	9c08      	ldr	r4, [sp, #32]
 801a2a4:	fb08 fc0c 	mul.w	ip, r8, ip
 801a2a8:	fb03 cc0e 	mla	ip, r3, lr, ip
 801a2ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a2b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a2b2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a2b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a2ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a2bc:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a2c0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a2c4:	fb08 f80e 	mul.w	r8, r8, lr
 801a2c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a2cc:	fb03 8202 	mla	r2, r3, r2, r8
 801a2d0:	9b08      	ldr	r3, [sp, #32]
 801a2d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2d6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801a2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2dc:	fb01 220a 	mla	r2, r1, sl, r2
 801a2e0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801a2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2e6:	fb09 2901 	mla	r9, r9, r1, r2
 801a2ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a2ec:	4343      	muls	r3, r0
 801a2ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a2f2:	1c58      	adds	r0, r3, #1
 801a2f4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a2f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a2fc:	783b      	ldrb	r3, [r7, #0]
 801a2fe:	ea4c 0c09 	orr.w	ip, ip, r9
 801a302:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a306:	fa5f f28c 	uxtb.w	r2, ip
 801a30a:	b2c0      	uxtb	r0, r0
 801a30c:	fb12 f201 	smulbb	r2, r2, r1
 801a310:	fb03 2300 	mla	r3, r3, r0, r2
 801a314:	b29b      	uxth	r3, r3
 801a316:	1c5a      	adds	r2, r3, #1
 801a318:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a31c:	787a      	ldrb	r2, [r7, #1]
 801a31e:	fb12 f200 	smulbb	r2, r2, r0
 801a322:	121b      	asrs	r3, r3, #8
 801a324:	703b      	strb	r3, [r7, #0]
 801a326:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a32a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a32e:	fb03 2301 	mla	r3, r3, r1, r2
 801a332:	b29b      	uxth	r3, r3
 801a334:	1c5a      	adds	r2, r3, #1
 801a336:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a33a:	121b      	asrs	r3, r3, #8
 801a33c:	707b      	strb	r3, [r7, #1]
 801a33e:	78bb      	ldrb	r3, [r7, #2]
 801a340:	fb13 f000 	smulbb	r0, r3, r0
 801a344:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a348:	fa1f fc8c 	uxth.w	ip, ip
 801a34c:	f10c 0301 	add.w	r3, ip, #1
 801a350:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a354:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a358:	f887 c002 	strb.w	ip, [r7, #2]
 801a35c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a35e:	3703      	adds	r7, #3
 801a360:	441d      	add	r5, r3
 801a362:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a364:	441e      	add	r6, r3
 801a366:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a368:	3b01      	subs	r3, #1
 801a36a:	9318      	str	r3, [sp, #96]	; 0x60
 801a36c:	e69f      	b.n	801a0ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801a36e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a370:	441d      	add	r5, r3
 801a372:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a374:	441e      	add	r6, r3
 801a376:	9b07      	ldr	r3, [sp, #28]
 801a378:	3b01      	subs	r3, #1
 801a37a:	9307      	str	r3, [sp, #28]
 801a37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a37e:	3303      	adds	r3, #3
 801a380:	930a      	str	r3, [sp, #40]	; 0x28
 801a382:	e674      	b.n	801a06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a384:	d025      	beq.n	801a3d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801a386:	9b07      	ldr	r3, [sp, #28]
 801a388:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801a38a:	3b01      	subs	r3, #1
 801a38c:	fb00 5003 	mla	r0, r0, r3, r5
 801a390:	1400      	asrs	r0, r0, #16
 801a392:	f53f ae89 	bmi.w	801a0a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a396:	3901      	subs	r1, #1
 801a398:	4288      	cmp	r0, r1
 801a39a:	f6bf ae85 	bge.w	801a0a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a39e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801a3a0:	fb01 6303 	mla	r3, r1, r3, r6
 801a3a4:	141b      	asrs	r3, r3, #16
 801a3a6:	f53f ae7f 	bmi.w	801a0a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a3aa:	3a01      	subs	r2, #1
 801a3ac:	4293      	cmp	r3, r2
 801a3ae:	f6bf ae7b 	bge.w	801a0a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801a3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a3b8:	f103 0e03 	add.w	lr, r3, #3
 801a3bc:	f1bb 0f00 	cmp.w	fp, #0
 801a3c0:	dc6e      	bgt.n	801a4a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801a3c2:	9b07      	ldr	r3, [sp, #28]
 801a3c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a3ce:	4423      	add	r3, r4
 801a3d0:	930a      	str	r3, [sp, #40]	; 0x28
 801a3d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	f340 81ab 	ble.w	801a730 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a3de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a3e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a3e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a3e8:	eef0 6a48 	vmov.f32	s13, s16
 801a3ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a3f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a3f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3f8:	ee16 5a90 	vmov	r5, s13
 801a3fc:	eef0 6a68 	vmov.f32	s13, s17
 801a400:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a404:	ee16 6a90 	vmov	r6, s13
 801a408:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a40c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a410:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a414:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a418:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a41c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a420:	ee18 2a10 	vmov	r2, s16
 801a424:	eeb0 8a47 	vmov.f32	s16, s14
 801a428:	fb92 f3f3 	sdiv	r3, r2, r3
 801a42c:	ee18 2a90 	vmov	r2, s17
 801a430:	9331      	str	r3, [sp, #196]	; 0xc4
 801a432:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a434:	eef0 8a67 	vmov.f32	s17, s15
 801a438:	fb92 f3f3 	sdiv	r3, r2, r3
 801a43c:	9332      	str	r3, [sp, #200]	; 0xc8
 801a43e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a440:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a442:	3b01      	subs	r3, #1
 801a444:	9317      	str	r3, [sp, #92]	; 0x5c
 801a446:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a448:	bf08      	it	eq
 801a44a:	4613      	moveq	r3, r2
 801a44c:	9307      	str	r3, [sp, #28]
 801a44e:	e600      	b.n	801a052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a450:	f1bc 0f00 	cmp.w	ip, #0
 801a454:	f43f ae6e 	beq.w	801a134 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a458:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a45c:	9308      	str	r3, [sp, #32]
 801a45e:	0e1b      	lsrs	r3, r3, #24
 801a460:	9311      	str	r3, [sp, #68]	; 0x44
 801a462:	e667      	b.n	801a134 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a464:	f112 0801 	adds.w	r8, r2, #1
 801a468:	f53f af78 	bmi.w	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a46c:	45c6      	cmp	lr, r8
 801a46e:	f6ff af75 	blt.w	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a472:	f110 0801 	adds.w	r8, r0, #1
 801a476:	f53f af71 	bmi.w	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a47a:	4543      	cmp	r3, r8
 801a47c:	f6ff af6e 	blt.w	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a480:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a482:	b21b      	sxth	r3, r3
 801a484:	9201      	str	r2, [sp, #4]
 801a486:	9300      	str	r3, [sp, #0]
 801a488:	fa0f f38e 	sxth.w	r3, lr
 801a48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a48e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a492:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a496:	4639      	mov	r1, r7
 801a498:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a49a:	f7ff fc53 	bl	8019d44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a49e:	e75d      	b.n	801a35c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801a4a0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a4a2:	142f      	asrs	r7, r5, #16
 801a4a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a4a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a4aa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a4ae:	1433      	asrs	r3, r6, #16
 801a4b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a4b4:	fb02 7303 	mla	r3, r2, r3, r7
 801a4b8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a4bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a4c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a4c4:	2900      	cmp	r1, #0
 801a4c6:	f000 812a 	beq.w	801a71e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801a4ca:	687c      	ldr	r4, [r7, #4]
 801a4cc:	940e      	str	r4, [sp, #56]	; 0x38
 801a4ce:	0e24      	lsrs	r4, r4, #24
 801a4d0:	9415      	str	r4, [sp, #84]	; 0x54
 801a4d2:	b178      	cbz	r0, 801a4f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a4d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801a4d8:	3a01      	subs	r2, #1
 801a4da:	0092      	lsls	r2, r2, #2
 801a4dc:	3204      	adds	r2, #4
 801a4de:	eb07 0802 	add.w	r8, r7, r2
 801a4e2:	58ba      	ldr	r2, [r7, r2]
 801a4e4:	9209      	str	r2, [sp, #36]	; 0x24
 801a4e6:	0e12      	lsrs	r2, r2, #24
 801a4e8:	9212      	str	r2, [sp, #72]	; 0x48
 801a4ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a4ee:	920f      	str	r2, [sp, #60]	; 0x3c
 801a4f0:	0e12      	lsrs	r2, r2, #24
 801a4f2:	9216      	str	r2, [sp, #88]	; 0x58
 801a4f4:	b289      	uxth	r1, r1
 801a4f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4f8:	b280      	uxth	r0, r0
 801a4fa:	fb01 f900 	mul.w	r9, r1, r0
 801a4fe:	0109      	lsls	r1, r1, #4
 801a500:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a504:	eba1 0809 	sub.w	r8, r1, r9
 801a508:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a50c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a50e:	b280      	uxth	r0, r0
 801a510:	fa1f f888 	uxth.w	r8, r8
 801a514:	1a12      	subs	r2, r2, r0
 801a516:	fb08 f101 	mul.w	r1, r8, r1
 801a51a:	b292      	uxth	r2, r2
 801a51c:	fb02 110c 	mla	r1, r2, ip, r1
 801a520:	fb00 1104 	mla	r1, r0, r4, r1
 801a524:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a526:	fb09 1104 	mla	r1, r9, r4, r1
 801a52a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a52e:	2900      	cmp	r1, #0
 801a530:	f000 80ec 	beq.w	801a70c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a534:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a538:	d019      	beq.n	801a56e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801a53a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a542:	fb0c fa0a 	mul.w	sl, ip, sl
 801a546:	fb0c fc03 	mul.w	ip, ip, r3
 801a54a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a54e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a552:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a556:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a55a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a55e:	4453      	add	r3, sl
 801a560:	0a3f      	lsrs	r7, r7, #8
 801a562:	0a1b      	lsrs	r3, r3, #8
 801a564:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a568:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a56c:	433b      	orrs	r3, r7
 801a56e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a570:	2cff      	cmp	r4, #255	; 0xff
 801a572:	d020      	beq.n	801a5b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801a574:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a576:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a57a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a57c:	4367      	muls	r7, r4
 801a57e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a580:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a584:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a588:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a58a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a58e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a592:	fb04 fa0a 	mul.w	sl, r4, sl
 801a596:	44bc      	add	ip, r7
 801a598:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a59c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5b0:	ea4c 040a 	orr.w	r4, ip, sl
 801a5b4:	940e      	str	r4, [sp, #56]	; 0x38
 801a5b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a5b8:	2cff      	cmp	r4, #255	; 0xff
 801a5ba:	d020      	beq.n	801a5fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801a5bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a5be:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a5c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a5c4:	4367      	muls	r7, r4
 801a5c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a5c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a5cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a5d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a5d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5da:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5de:	44bc      	add	ip, r7
 801a5e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a5e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5f8:	ea4c 040a 	orr.w	r4, ip, sl
 801a5fc:	9409      	str	r4, [sp, #36]	; 0x24
 801a5fe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a600:	2cff      	cmp	r4, #255	; 0xff
 801a602:	d020      	beq.n	801a646 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801a604:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a606:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a60a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a60c:	4367      	muls	r7, r4
 801a60e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a610:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a614:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a618:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a61a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a61e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a622:	fb04 fa0a 	mul.w	sl, r4, sl
 801a626:	44bc      	add	ip, r7
 801a628:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a62c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a630:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a634:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a638:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a63c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a640:	ea4c 040a 	orr.w	r4, ip, sl
 801a644:	940f      	str	r4, [sp, #60]	; 0x3c
 801a646:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a648:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a64c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a650:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a654:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a656:	fb08 f707 	mul.w	r7, r8, r7
 801a65a:	fb02 770c 	mla	r7, r2, ip, r7
 801a65e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a662:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a664:	fb00 770c 	mla	r7, r0, ip, r7
 801a668:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a66c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a66e:	fb09 770c 	mla	r7, r9, ip, r7
 801a672:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a676:	fb08 f80c 	mul.w	r8, r8, ip
 801a67a:	0a3f      	lsrs	r7, r7, #8
 801a67c:	fb02 8303 	mla	r3, r2, r3, r8
 801a680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a682:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a686:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a68a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a68c:	fb00 330a 	mla	r3, r0, sl, r3
 801a690:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a694:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a696:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a69c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a6a0:	434b      	muls	r3, r1
 801a6a2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a6a6:	1c59      	adds	r1, r3, #1
 801a6a8:	ea47 070c 	orr.w	r7, r7, ip
 801a6ac:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a6b0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a6b4:	b2fa      	uxtb	r2, r7
 801a6b6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a6ba:	fb12 f200 	smulbb	r2, r2, r0
 801a6be:	b2c9      	uxtb	r1, r1
 801a6c0:	fb03 2301 	mla	r3, r3, r1, r2
 801a6c4:	b29b      	uxth	r3, r3
 801a6c6:	1c5a      	adds	r2, r3, #1
 801a6c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6cc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a6d0:	fb12 f201 	smulbb	r2, r2, r1
 801a6d4:	121b      	asrs	r3, r3, #8
 801a6d6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a6da:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a6de:	0c3f      	lsrs	r7, r7, #16
 801a6e0:	fb03 2300 	mla	r3, r3, r0, r2
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	1c5a      	adds	r2, r3, #1
 801a6e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6ec:	121b      	asrs	r3, r3, #8
 801a6ee:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a6f2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a6f6:	fb13 f101 	smulbb	r1, r3, r1
 801a6fa:	fb07 1700 	mla	r7, r7, r0, r1
 801a6fe:	b2bf      	uxth	r7, r7
 801a700:	1c79      	adds	r1, r7, #1
 801a702:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801a706:	123f      	asrs	r7, r7, #8
 801a708:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a70c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a70e:	f10e 0e03 	add.w	lr, lr, #3
 801a712:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a716:	441d      	add	r5, r3
 801a718:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a71a:	441e      	add	r6, r3
 801a71c:	e64e      	b.n	801a3bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801a71e:	2800      	cmp	r0, #0
 801a720:	f43f aee8 	beq.w	801a4f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a724:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a728:	9209      	str	r2, [sp, #36]	; 0x24
 801a72a:	0e12      	lsrs	r2, r2, #24
 801a72c:	9212      	str	r2, [sp, #72]	; 0x48
 801a72e:	e6e1      	b.n	801a4f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801a730:	b01d      	add	sp, #116	; 0x74
 801a732:	ecbd 8b08 	vpop	{d8-d11}
 801a736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a73c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801a73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a740:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801a744:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a748:	fb04 5603 	mla	r6, r4, r3, r5
 801a74c:	2c00      	cmp	r4, #0
 801a74e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801a752:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801a756:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801a75a:	db36      	blt.n	801a7ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a75c:	45a6      	cmp	lr, r4
 801a75e:	dd34      	ble.n	801a7ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801a760:	2d00      	cmp	r5, #0
 801a762:	db30      	blt.n	801a7c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a764:	42ab      	cmp	r3, r5
 801a766:	dd2e      	ble.n	801a7c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801a768:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801a76c:	1c6e      	adds	r6, r5, #1
 801a76e:	d42f      	bmi.n	801a7d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a770:	42b3      	cmp	r3, r6
 801a772:	dd2d      	ble.n	801a7d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801a774:	b370      	cbz	r0, 801a7d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801a776:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801a77a:	3401      	adds	r4, #1
 801a77c:	d42e      	bmi.n	801a7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a77e:	45a6      	cmp	lr, r4
 801a780:	dd2c      	ble.n	801a7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801a782:	b377      	cbz	r7, 801a7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801a784:	2d00      	cmp	r5, #0
 801a786:	db27      	blt.n	801a7d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a788:	42ab      	cmp	r3, r5
 801a78a:	dd25      	ble.n	801a7d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801a78c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801a790:	3501      	adds	r5, #1
 801a792:	d429      	bmi.n	801a7e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a794:	42ab      	cmp	r3, r5
 801a796:	dd27      	ble.n	801a7e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801a798:	b340      	cbz	r0, 801a7ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801a79a:	3301      	adds	r3, #1
 801a79c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a7a0:	280f      	cmp	r0, #15
 801a7a2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a7a6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a7aa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a7ae:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a7b2:	d801      	bhi.n	801a7b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801a7b4:	2f0f      	cmp	r7, #15
 801a7b6:	d91b      	bls.n	801a7f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801a7b8:	4b7e      	ldr	r3, [pc, #504]	; (801a9b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801a7ba:	f240 1157 	movw	r1, #343	; 0x157
 801a7be:	4a7e      	ldr	r2, [pc, #504]	; (801a9b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801a7c0:	487e      	ldr	r0, [pc, #504]	; (801a9bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801a7c2:	f001 fd8b 	bl	801c2dc <__assert_func>
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	e7d0      	b.n	801a76c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801a7ca:	2600      	movs	r6, #0
 801a7cc:	4632      	mov	r2, r6
 801a7ce:	e7d4      	b.n	801a77a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7d0:	2600      	movs	r6, #0
 801a7d2:	e7d2      	b.n	801a77a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7d4:	4606      	mov	r6, r0
 801a7d6:	e7d0      	b.n	801a77a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801a7d8:	2400      	movs	r4, #0
 801a7da:	e7d9      	b.n	801a790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801a7dc:	2300      	movs	r3, #0
 801a7de:	461c      	mov	r4, r3
 801a7e0:	e7de      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7e2:	463b      	mov	r3, r7
 801a7e4:	463c      	mov	r4, r7
 801a7e6:	e7db      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	e7d9      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	e7d7      	b.n	801a7a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801a7f0:	b280      	uxth	r0, r0
 801a7f2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a7f6:	b2bf      	uxth	r7, r7
 801a7f8:	fb00 fe07 	mul.w	lr, r0, r7
 801a7fc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a800:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a804:	eba0 0c0e 	sub.w	ip, r0, lr
 801a808:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a80c:	b2bf      	uxth	r7, r7
 801a80e:	fa1f fc8c 	uxth.w	ip, ip
 801a812:	eba0 0507 	sub.w	r5, r0, r7
 801a816:	fb0c f00a 	mul.w	r0, ip, sl
 801a81a:	b2ad      	uxth	r5, r5
 801a81c:	fb05 000b 	mla	r0, r5, fp, r0
 801a820:	fb07 0009 	mla	r0, r7, r9, r0
 801a824:	fb0e 0008 	mla	r0, lr, r8, r0
 801a828:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a82c:	9001      	str	r0, [sp, #4]
 801a82e:	d018      	beq.n	801a862 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801a830:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a834:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a838:	fb0b f000 	mul.w	r0, fp, r0
 801a83c:	fb0b fb02 	mul.w	fp, fp, r2
 801a840:	0a02      	lsrs	r2, r0, #8
 801a842:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a846:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a84a:	4402      	add	r2, r0
 801a84c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a850:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a854:	0a12      	lsrs	r2, r2, #8
 801a856:	0a00      	lsrs	r0, r0, #8
 801a858:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a85c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a860:	4302      	orrs	r2, r0
 801a862:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a866:	d01a      	beq.n	801a89e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801a868:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a86c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a870:	fb0a f000 	mul.w	r0, sl, r0
 801a874:	fb0a fa06 	mul.w	sl, sl, r6
 801a878:	0a06      	lsrs	r6, r0, #8
 801a87a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a87e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a882:	4406      	add	r6, r0
 801a884:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a888:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a88c:	0a36      	lsrs	r6, r6, #8
 801a88e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a892:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a896:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a89a:	ea46 060a 	orr.w	r6, r6, sl
 801a89e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a8a2:	d01b      	beq.n	801a8dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801a8a4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a8a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a8ac:	fb09 fa0a 	mul.w	sl, r9, sl
 801a8b0:	fb09 f004 	mul.w	r0, r9, r4
 801a8b4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a8b8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a8bc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a8c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a8c4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a8c8:	4454      	add	r4, sl
 801a8ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a8ce:	0a24      	lsrs	r4, r4, #8
 801a8d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a8d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a8d8:	ea44 0409 	orr.w	r4, r4, r9
 801a8dc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a8e0:	d01b      	beq.n	801a91a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801a8e2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a8e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8ea:	fb08 f909 	mul.w	r9, r8, r9
 801a8ee:	fb08 f003 	mul.w	r0, r8, r3
 801a8f2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a8f6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a8fa:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a8fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a902:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a906:	444b      	add	r3, r9
 801a908:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a90c:	0a1b      	lsrs	r3, r3, #8
 801a90e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a912:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a916:	ea43 0308 	orr.w	r3, r3, r8
 801a91a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a91e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a922:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a926:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a92a:	fb0c f000 	mul.w	r0, ip, r0
 801a92e:	fb0c f606 	mul.w	r6, ip, r6
 801a932:	fb05 0808 	mla	r8, r5, r8, r0
 801a936:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a93a:	fb05 6502 	mla	r5, r5, r2, r6
 801a93e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a942:	fb07 8800 	mla	r8, r7, r0, r8
 801a946:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a94a:	fb07 5704 	mla	r7, r7, r4, r5
 801a94e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a952:	fb0e 8000 	mla	r0, lr, r0, r8
 801a956:	780a      	ldrb	r2, [r1, #0]
 801a958:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a95c:	9b01      	ldr	r3, [sp, #4]
 801a95e:	0a00      	lsrs	r0, r0, #8
 801a960:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a964:	43db      	mvns	r3, r3
 801a966:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a96a:	b2db      	uxtb	r3, r3
 801a96c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a970:	ea40 0e0e 	orr.w	lr, r0, lr
 801a974:	fb02 f003 	mul.w	r0, r2, r3
 801a978:	1c42      	adds	r2, r0, #1
 801a97a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a97e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a982:	700a      	strb	r2, [r1, #0]
 801a984:	784a      	ldrb	r2, [r1, #1]
 801a986:	435a      	muls	r2, r3
 801a988:	1c50      	adds	r0, r2, #1
 801a98a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a98e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a992:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a996:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a99a:	704a      	strb	r2, [r1, #1]
 801a99c:	788a      	ldrb	r2, [r1, #2]
 801a99e:	4353      	muls	r3, r2
 801a9a0:	1c5a      	adds	r2, r3, #1
 801a9a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a9a6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a9aa:	f881 e002 	strb.w	lr, [r1, #2]
 801a9ae:	b003      	add	sp, #12
 801a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b4:	080205d7 	.word	0x080205d7
 801a9b8:	08020a8e 	.word	0x08020a8e
 801a9bc:	0802065f 	.word	0x0802065f

0801a9c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	ed2d 8b08 	vpush	{d8-d11}
 801a9c8:	b099      	sub	sp, #100	; 0x64
 801a9ca:	eeb0 aa40 	vmov.f32	s20, s0
 801a9ce:	eef0 9a60 	vmov.f32	s19, s1
 801a9d2:	9017      	str	r0, [sp, #92]	; 0x5c
 801a9d4:	eeb0 9a41 	vmov.f32	s18, s2
 801a9d8:	9306      	str	r3, [sp, #24]
 801a9da:	eeb0 8a62 	vmov.f32	s16, s5
 801a9de:	eef0 8a43 	vmov.f32	s17, s6
 801a9e2:	eef0 ba44 	vmov.f32	s23, s8
 801a9e6:	eeb0 ba64 	vmov.f32	s22, s9
 801a9ea:	eef0 aa45 	vmov.f32	s21, s10
 801a9ee:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801a9f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a9f4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801a9f8:	6850      	ldr	r0, [r2, #4]
 801a9fa:	6812      	ldr	r2, [r2, #0]
 801a9fc:	fb00 1303 	mla	r3, r0, r3, r1
 801aa00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa04:	18d3      	adds	r3, r2, r3
 801aa06:	9309      	str	r3, [sp, #36]	; 0x24
 801aa08:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa0a:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	930e      	str	r3, [sp, #56]	; 0x38
 801aa12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	dc03      	bgt.n	801aa20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801aa18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	f340 8360 	ble.w	801b0e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801aa20:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aa26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aa2a:	1e48      	subs	r0, r1, #1
 801aa2c:	1e57      	subs	r7, r2, #1
 801aa2e:	9b06      	ldr	r3, [sp, #24]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	f340 817b 	ble.w	801ad2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801aa36:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801aa3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801aa3e:	d406      	bmi.n	801aa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa40:	4584      	cmp	ip, r0
 801aa42:	da04      	bge.n	801aa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	db02      	blt.n	801aa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801aa48:	42bb      	cmp	r3, r7
 801aa4a:	f2c0 8170 	blt.w	801ad2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801aa4e:	f11c 0c01 	adds.w	ip, ip, #1
 801aa52:	f100 8160 	bmi.w	801ad16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa56:	4561      	cmp	r1, ip
 801aa58:	f2c0 815d 	blt.w	801ad16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa5c:	3301      	adds	r3, #1
 801aa5e:	f100 815a 	bmi.w	801ad16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa62:	429a      	cmp	r2, r3
 801aa64:	f2c0 8157 	blt.w	801ad16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801aa68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801aa6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aa6e:	f1b8 0f00 	cmp.w	r8, #0
 801aa72:	f340 8179 	ble.w	801ad68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801aa76:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801aa78:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801aa7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801aa82:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801aa86:	142a      	asrs	r2, r5, #16
 801aa88:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801aa8c:	689b      	ldr	r3, [r3, #8]
 801aa8e:	f100 81be 	bmi.w	801ae0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa92:	f103 39ff 	add.w	r9, r3, #4294967295
 801aa96:	454a      	cmp	r2, r9
 801aa98:	f280 81b9 	bge.w	801ae0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aa9c:	f1bc 0f00 	cmp.w	ip, #0
 801aaa0:	f2c0 81b5 	blt.w	801ae0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aaa4:	f10e 39ff 	add.w	r9, lr, #4294967295
 801aaa8:	45cc      	cmp	ip, r9
 801aaaa:	f280 81b0 	bge.w	801ae0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801aaae:	b21b      	sxth	r3, r3
 801aab0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aab2:	fb0c 2203 	mla	r2, ip, r3, r2
 801aab6:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801aaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aabe:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801aac2:	2900      	cmp	r1, #0
 801aac4:	f000 8197 	beq.w	801adf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801aac8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801aacc:	940a      	str	r4, [sp, #40]	; 0x28
 801aace:	0e24      	lsrs	r4, r4, #24
 801aad0:	9411      	str	r4, [sp, #68]	; 0x44
 801aad2:	b180      	cbz	r0, 801aaf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801aad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801aad8:	3b01      	subs	r3, #1
 801aada:	009b      	lsls	r3, r3, #2
 801aadc:	3304      	adds	r3, #4
 801aade:	eb09 0c03 	add.w	ip, r9, r3
 801aae2:	f859 3003 	ldr.w	r3, [r9, r3]
 801aae6:	9307      	str	r3, [sp, #28]
 801aae8:	0e1b      	lsrs	r3, r3, #24
 801aaea:	930f      	str	r3, [sp, #60]	; 0x3c
 801aaec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801aaf0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aaf2:	0e1b      	lsrs	r3, r3, #24
 801aaf4:	9312      	str	r3, [sp, #72]	; 0x48
 801aaf6:	b289      	uxth	r1, r1
 801aaf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aafa:	b280      	uxth	r0, r0
 801aafc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aafe:	fb01 fa00 	mul.w	sl, r1, r0
 801ab02:	0109      	lsls	r1, r1, #4
 801ab04:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ab08:	eba1 090a 	sub.w	r9, r1, sl
 801ab0c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ab10:	b280      	uxth	r0, r0
 801ab12:	fa1f f989 	uxth.w	r9, r9
 801ab16:	1a09      	subs	r1, r1, r0
 801ab18:	fb09 f303 	mul.w	r3, r9, r3
 801ab1c:	b289      	uxth	r1, r1
 801ab1e:	fb01 330e 	mla	r3, r1, lr, r3
 801ab22:	fb00 3304 	mla	r3, r0, r4, r3
 801ab26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab28:	fb0a 3304 	mla	r3, sl, r4, r3
 801ab2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	f000 80e8 	beq.w	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ab36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ab3a:	d01b      	beq.n	801ab74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ab3c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801ab40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ab44:	fb0e fb0b 	mul.w	fp, lr, fp
 801ab48:	fb0e fe02 	mul.w	lr, lr, r2
 801ab4c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ab50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab54:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ab58:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ab5c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ab60:	445a      	add	r2, fp
 801ab62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab66:	0a12      	lsrs	r2, r2, #8
 801ab68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ab6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ab70:	ea42 020c 	orr.w	r2, r2, ip
 801ab74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab76:	2cff      	cmp	r4, #255	; 0xff
 801ab78:	d021      	beq.n	801abbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ab7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ab7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab82:	fb04 fc0c 	mul.w	ip, r4, ip
 801ab86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ab88:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ab8c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ab90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ab96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab9a:	fb04 fb0b 	mul.w	fp, r4, fp
 801ab9e:	44e6      	add	lr, ip
 801aba0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801aba4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aba8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801abac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abb0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801abb4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801abb8:	ea4e 040b 	orr.w	r4, lr, fp
 801abbc:	940a      	str	r4, [sp, #40]	; 0x28
 801abbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abc0:	2cff      	cmp	r4, #255	; 0xff
 801abc2:	d021      	beq.n	801ac08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801abc4:	9c07      	ldr	r4, [sp, #28]
 801abc6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801abca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abcc:	fb04 fc0c 	mul.w	ip, r4, ip
 801abd0:	9c07      	ldr	r4, [sp, #28]
 801abd2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801abd6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801abda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abdc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801abe0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abe4:	fb04 fb0b 	mul.w	fp, r4, fp
 801abe8:	44e6      	add	lr, ip
 801abea:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801abee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abf2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801abf6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abfa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801abfe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ac02:	ea4e 040b 	orr.w	r4, lr, fp
 801ac06:	9407      	str	r4, [sp, #28]
 801ac08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac0a:	2cff      	cmp	r4, #255	; 0xff
 801ac0c:	d021      	beq.n	801ac52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ac0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac16:	fb04 fc0c 	mul.w	ip, r4, ip
 801ac1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac1c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ac20:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ac24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac26:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ac2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac2e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ac32:	44e6      	add	lr, ip
 801ac34:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ac38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac3c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ac40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac44:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ac48:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ac4c:	ea4e 040b 	orr.w	r4, lr, fp
 801ac50:	940b      	str	r4, [sp, #44]	; 0x2c
 801ac52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ac54:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801ac58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ac5c:	2bff      	cmp	r3, #255	; 0xff
 801ac5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac62:	9c07      	ldr	r4, [sp, #28]
 801ac64:	fb09 fc0c 	mul.w	ip, r9, ip
 801ac68:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ac6c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac72:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ac76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ac7c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ac80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ac84:	fb09 f90e 	mul.w	r9, r9, lr
 801ac88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac8c:	fb01 9202 	mla	r2, r1, r2, r9
 801ac90:	9907      	ldr	r1, [sp, #28]
 801ac92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac96:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801ac9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac9c:	fb00 220b 	mla	r2, r0, fp, r2
 801aca0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801aca4:	fb0a 2a00 	mla	sl, sl, r0, r2
 801aca8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801acac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801acb0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801acb4:	fa5f f08c 	uxtb.w	r0, ip
 801acb8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801acbc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801acc0:	f000 80a2 	beq.w	801ae08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801acc4:	43db      	mvns	r3, r3
 801acc6:	783a      	ldrb	r2, [r7, #0]
 801acc8:	f897 a002 	ldrb.w	sl, [r7, #2]
 801accc:	b2db      	uxtb	r3, r3
 801acce:	fb02 fe03 	mul.w	lr, r2, r3
 801acd2:	fb0a fa03 	mul.w	sl, sl, r3
 801acd6:	f10e 0201 	add.w	r2, lr, #1
 801acda:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801acde:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ace2:	703a      	strb	r2, [r7, #0]
 801ace4:	787a      	ldrb	r2, [r7, #1]
 801ace6:	fb02 f003 	mul.w	r0, r2, r3
 801acea:	f10a 0301 	add.w	r3, sl, #1
 801acee:	1c42      	adds	r2, r0, #1
 801acf0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801acf4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801acf8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801acfc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ad00:	707a      	strb	r2, [r7, #1]
 801ad02:	f887 c002 	strb.w	ip, [r7, #2]
 801ad06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad08:	3703      	adds	r7, #3
 801ad0a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad0e:	441d      	add	r5, r3
 801ad10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad12:	441e      	add	r6, r3
 801ad14:	e6ab      	b.n	801aa6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ad16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad18:	441d      	add	r5, r3
 801ad1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad1c:	441e      	add	r6, r3
 801ad1e:	9b06      	ldr	r3, [sp, #24]
 801ad20:	3b01      	subs	r3, #1
 801ad22:	9306      	str	r3, [sp, #24]
 801ad24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad26:	3303      	adds	r3, #3
 801ad28:	9309      	str	r3, [sp, #36]	; 0x24
 801ad2a:	e680      	b.n	801aa2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad2c:	d024      	beq.n	801ad78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801ad2e:	9b06      	ldr	r3, [sp, #24]
 801ad30:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ad32:	3b01      	subs	r3, #1
 801ad34:	fb00 5003 	mla	r0, r0, r3, r5
 801ad38:	1400      	asrs	r0, r0, #16
 801ad3a:	f53f ae95 	bmi.w	801aa68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad3e:	3901      	subs	r1, #1
 801ad40:	4288      	cmp	r0, r1
 801ad42:	f6bf ae91 	bge.w	801aa68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad46:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ad48:	fb01 6303 	mla	r3, r1, r3, r6
 801ad4c:	141b      	asrs	r3, r3, #16
 801ad4e:	f53f ae8b 	bmi.w	801aa68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad52:	3a01      	subs	r2, #1
 801ad54:	4293      	cmp	r3, r2
 801ad56:	f6bf ae87 	bge.w	801aa68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ad5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad5c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ad60:	1cdf      	adds	r7, r3, #3
 801ad62:	f1bb 0f00 	cmp.w	fp, #0
 801ad66:	dc6e      	bgt.n	801ae46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ad68:	9b06      	ldr	r3, [sp, #24]
 801ad6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad74:	4423      	add	r3, r4
 801ad76:	9309      	str	r3, [sp, #36]	; 0x24
 801ad78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f340 81b0 	ble.w	801b0e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801ad80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad86:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ad8a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ad8e:	eef0 6a48 	vmov.f32	s13, s16
 801ad92:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ad96:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ad9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad9e:	ee16 5a90 	vmov	r5, s13
 801ada2:	eef0 6a68 	vmov.f32	s13, s17
 801ada6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801adaa:	ee16 6a90 	vmov	r6, s13
 801adae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801adb2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801adb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801adba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801adbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801adc2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801adc6:	ee18 2a10 	vmov	r2, s16
 801adca:	eeb0 8a47 	vmov.f32	s16, s14
 801adce:	fb92 f3f3 	sdiv	r3, r2, r3
 801add2:	ee18 2a90 	vmov	r2, s17
 801add6:	932d      	str	r3, [sp, #180]	; 0xb4
 801add8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801adda:	eef0 8a67 	vmov.f32	s17, s15
 801adde:	fb92 f3f3 	sdiv	r3, r2, r3
 801ade2:	932e      	str	r3, [sp, #184]	; 0xb8
 801ade4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ade6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ade8:	3b01      	subs	r3, #1
 801adea:	9315      	str	r3, [sp, #84]	; 0x54
 801adec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801adee:	bf08      	it	eq
 801adf0:	4613      	moveq	r3, r2
 801adf2:	9306      	str	r3, [sp, #24]
 801adf4:	e60d      	b.n	801aa12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801adf6:	2800      	cmp	r0, #0
 801adf8:	f43f ae7d 	beq.w	801aaf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801adfc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ae00:	9307      	str	r3, [sp, #28]
 801ae02:	0e1b      	lsrs	r3, r3, #24
 801ae04:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae06:	e676      	b.n	801aaf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ae08:	7038      	strb	r0, [r7, #0]
 801ae0a:	7079      	strb	r1, [r7, #1]
 801ae0c:	e779      	b.n	801ad02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae0e:	f112 0901 	adds.w	r9, r2, #1
 801ae12:	f53f af78 	bmi.w	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae16:	454b      	cmp	r3, r9
 801ae18:	f6ff af75 	blt.w	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae1c:	f11c 0901 	adds.w	r9, ip, #1
 801ae20:	f53f af71 	bmi.w	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae24:	45ce      	cmp	lr, r9
 801ae26:	f6ff af6e 	blt.w	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae2a:	b21b      	sxth	r3, r3
 801ae2c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801ae30:	fa0f f28e 	sxth.w	r2, lr
 801ae34:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801ae38:	9200      	str	r2, [sp, #0]
 801ae3a:	4639      	mov	r1, r7
 801ae3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ae40:	f7ff fc7c 	bl	801a73c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801ae44:	e75f      	b.n	801ad06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ae46:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ae48:	1429      	asrs	r1, r5, #16
 801ae4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ae4c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ae50:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801ae54:	1433      	asrs	r3, r6, #16
 801ae56:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ae5a:	fb0c 1303 	mla	r3, ip, r3, r1
 801ae5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ae60:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ae64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ae68:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ae6c:	2a00      	cmp	r2, #0
 801ae6e:	f000 8129 	beq.w	801b0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801ae72:	684c      	ldr	r4, [r1, #4]
 801ae74:	940c      	str	r4, [sp, #48]	; 0x30
 801ae76:	0e24      	lsrs	r4, r4, #24
 801ae78:	9413      	str	r4, [sp, #76]	; 0x4c
 801ae7a:	b198      	cbz	r0, 801aea4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ae7c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801ae80:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ae84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801ae88:	f10c 0c04 	add.w	ip, ip, #4
 801ae8c:	eb01 080c 	add.w	r8, r1, ip
 801ae90:	f851 100c 	ldr.w	r1, [r1, ip]
 801ae94:	9108      	str	r1, [sp, #32]
 801ae96:	0e09      	lsrs	r1, r1, #24
 801ae98:	9110      	str	r1, [sp, #64]	; 0x40
 801ae9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ae9e:	910d      	str	r1, [sp, #52]	; 0x34
 801aea0:	0e09      	lsrs	r1, r1, #24
 801aea2:	9114      	str	r1, [sp, #80]	; 0x50
 801aea4:	b292      	uxth	r2, r2
 801aea6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aea8:	b280      	uxth	r0, r0
 801aeaa:	fb02 f900 	mul.w	r9, r2, r0
 801aeae:	0112      	lsls	r2, r2, #4
 801aeb0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801aeb4:	eba2 0809 	sub.w	r8, r2, r9
 801aeb8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801aebc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aebe:	b280      	uxth	r0, r0
 801aec0:	fa1f f888 	uxth.w	r8, r8
 801aec4:	1a09      	subs	r1, r1, r0
 801aec6:	fb08 f202 	mul.w	r2, r8, r2
 801aeca:	b289      	uxth	r1, r1
 801aecc:	fb01 220e 	mla	r2, r1, lr, r2
 801aed0:	fb00 2204 	mla	r2, r0, r4, r2
 801aed4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aed6:	fb09 2204 	mla	r2, r9, r4, r2
 801aeda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aede:	2a00      	cmp	r2, #0
 801aee0:	f000 80e8 	beq.w	801b0b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801aee4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801aee8:	d01b      	beq.n	801af22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801aeea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801aeee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aef2:	fb0e fa0a 	mul.w	sl, lr, sl
 801aef6:	fb0e fe03 	mul.w	lr, lr, r3
 801aefa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aefe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801af02:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801af06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af0a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801af0e:	4453      	add	r3, sl
 801af10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af14:	0a1b      	lsrs	r3, r3, #8
 801af16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801af1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af1e:	ea43 030c 	orr.w	r3, r3, ip
 801af22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af24:	2cff      	cmp	r4, #255	; 0xff
 801af26:	d021      	beq.n	801af6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801af28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af2a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af30:	fb04 fc0c 	mul.w	ip, r4, ip
 801af34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801af36:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801af3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af40:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af48:	fb04 fa0a 	mul.w	sl, r4, sl
 801af4c:	44e6      	add	lr, ip
 801af4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801af52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801af5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af66:	ea4e 040a 	orr.w	r4, lr, sl
 801af6a:	940c      	str	r4, [sp, #48]	; 0x30
 801af6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af6e:	2cff      	cmp	r4, #255	; 0xff
 801af70:	d021      	beq.n	801afb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801af72:	9c08      	ldr	r4, [sp, #32]
 801af74:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af7a:	fb04 fc0c 	mul.w	ip, r4, ip
 801af7e:	9c08      	ldr	r4, [sp, #32]
 801af80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801af84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801af86:	fb04 fa0e 	mul.w	sl, r4, lr
 801af8a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801af8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801af96:	44e6      	add	lr, ip
 801af98:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801af9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801afa0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801afa4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afa8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801afb0:	ea4e 040a 	orr.w	r4, lr, sl
 801afb4:	9408      	str	r4, [sp, #32]
 801afb6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afb8:	2cff      	cmp	r4, #255	; 0xff
 801afba:	d021      	beq.n	801b000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801afbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801afbe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801afc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afc4:	fb04 fc0c 	mul.w	ip, r4, ip
 801afc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801afca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801afce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801afd2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afd4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801afd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801afdc:	fb04 fa0a 	mul.w	sl, r4, sl
 801afe0:	44e6      	add	lr, ip
 801afe2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801afe6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801afea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801afee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aff2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aff6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801affa:	ea4e 040a 	orr.w	r4, lr, sl
 801affe:	940d      	str	r4, [sp, #52]	; 0x34
 801b000:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b002:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b00a:	2aff      	cmp	r2, #255	; 0xff
 801b00c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b010:	9c08      	ldr	r4, [sp, #32]
 801b012:	fb08 fc0c 	mul.w	ip, r8, ip
 801b016:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b01a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b01e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b020:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b024:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b028:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b02a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b02e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b032:	fb08 f80e 	mul.w	r8, r8, lr
 801b036:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b03a:	fb01 8303 	mla	r3, r1, r3, r8
 801b03e:	9908      	ldr	r1, [sp, #32]
 801b040:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b044:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b048:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b04a:	fb00 330a 	mla	r3, r0, sl, r3
 801b04e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801b052:	fb09 3e0e 	mla	lr, r9, lr, r3
 801b056:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b05a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b05e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b062:	fa5f f08c 	uxtb.w	r0, ip
 801b066:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801b06a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b06e:	d032      	beq.n	801b0d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801b070:	43d2      	mvns	r2, r2
 801b072:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801b076:	b2d2      	uxtb	r2, r2
 801b078:	fb0e fe02 	mul.w	lr, lr, r2
 801b07c:	f10e 0301 	add.w	r3, lr, #1
 801b080:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801b084:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b088:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801b08c:	4350      	muls	r0, r2
 801b08e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801b092:	1c43      	adds	r3, r0, #1
 801b094:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b098:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b09c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801b0a0:	4353      	muls	r3, r2
 801b0a2:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b0a6:	1c5a      	adds	r2, r3, #1
 801b0a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b0ac:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801b0b0:	f807 cc01 	strb.w	ip, [r7, #-1]
 801b0b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b0b6:	3703      	adds	r7, #3
 801b0b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b0bc:	441d      	add	r5, r3
 801b0be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b0c0:	441e      	add	r6, r3
 801b0c2:	e64e      	b.n	801ad62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801b0c4:	2800      	cmp	r0, #0
 801b0c6:	f43f aeed 	beq.w	801aea4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b0ca:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b0ce:	9108      	str	r1, [sp, #32]
 801b0d0:	0e09      	lsrs	r1, r1, #24
 801b0d2:	9110      	str	r1, [sp, #64]	; 0x40
 801b0d4:	e6e6      	b.n	801aea4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b0d6:	f807 0c03 	strb.w	r0, [r7, #-3]
 801b0da:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b0de:	e7e7      	b.n	801b0b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801b0e0:	b019      	add	sp, #100	; 0x64
 801b0e2:	ecbd 8b08 	vpop	{d8-d11}
 801b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b0ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801b0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b0f4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b0fe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b102:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b106:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b10a:	db6b      	blt.n	801b1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b10c:	4580      	cmp	r8, r0
 801b10e:	dd69      	ble.n	801b1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b110:	f1bc 0f00 	cmp.w	ip, #0
 801b114:	db66      	blt.n	801b1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b116:	45e1      	cmp	r9, ip
 801b118:	dd64      	ble.n	801b1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801b11a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b11e:	f01e 0f01 	tst.w	lr, #1
 801b122:	5d16      	ldrb	r6, [r2, r4]
 801b124:	bf0c      	ite	eq
 801b126:	f006 060f 	andeq.w	r6, r6, #15
 801b12a:	1136      	asrne	r6, r6, #4
 801b12c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b130:	b2f6      	uxtb	r6, r6
 801b132:	f110 0a01 	adds.w	sl, r0, #1
 801b136:	d457      	bmi.n	801b1e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b138:	45d0      	cmp	r8, sl
 801b13a:	dd55      	ble.n	801b1e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b13c:	f1bc 0f00 	cmp.w	ip, #0
 801b140:	db52      	blt.n	801b1e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b142:	45e1      	cmp	r9, ip
 801b144:	dd50      	ble.n	801b1e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801b146:	2f00      	cmp	r7, #0
 801b148:	f000 80ac 	beq.w	801b2a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801b14c:	f10e 0b01 	add.w	fp, lr, #1
 801b150:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b154:	f01b 0f01 	tst.w	fp, #1
 801b158:	5d14      	ldrb	r4, [r2, r4]
 801b15a:	bf0c      	ite	eq
 801b15c:	f004 040f 	andeq.w	r4, r4, #15
 801b160:	1124      	asrne	r4, r4, #4
 801b162:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b166:	b2e4      	uxtb	r4, r4
 801b168:	2d00      	cmp	r5, #0
 801b16a:	f000 8096 	beq.w	801b29a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801b16e:	2800      	cmp	r0, #0
 801b170:	f10c 0c01 	add.w	ip, ip, #1
 801b174:	db3c      	blt.n	801b1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b176:	4580      	cmp	r8, r0
 801b178:	dd3a      	ble.n	801b1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b17a:	f1bc 0f00 	cmp.w	ip, #0
 801b17e:	db37      	blt.n	801b1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b180:	45e1      	cmp	r9, ip
 801b182:	dd35      	ble.n	801b1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801b184:	eb03 0b0e 	add.w	fp, r3, lr
 801b188:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b18c:	f01b 0f01 	tst.w	fp, #1
 801b190:	5c10      	ldrb	r0, [r2, r0]
 801b192:	bf0c      	ite	eq
 801b194:	f000 000f 	andeq.w	r0, r0, #15
 801b198:	1100      	asrne	r0, r0, #4
 801b19a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b19e:	b2c0      	uxtb	r0, r0
 801b1a0:	f1ba 0f00 	cmp.w	sl, #0
 801b1a4:	db26      	blt.n	801b1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b1a6:	45d0      	cmp	r8, sl
 801b1a8:	dd24      	ble.n	801b1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b1aa:	f1bc 0f00 	cmp.w	ip, #0
 801b1ae:	db21      	blt.n	801b1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b1b0:	45e1      	cmp	r9, ip
 801b1b2:	dd1f      	ble.n	801b1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801b1b4:	b307      	cbz	r7, 801b1f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801b1b6:	3301      	adds	r3, #1
 801b1b8:	449e      	add	lr, r3
 801b1ba:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b1be:	f01e 0f01 	tst.w	lr, #1
 801b1c2:	5cd3      	ldrb	r3, [r2, r3]
 801b1c4:	bf0c      	ite	eq
 801b1c6:	f003 030f 	andeq.w	r3, r3, #15
 801b1ca:	111b      	asrne	r3, r3, #4
 801b1cc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b1d0:	b2db      	uxtb	r3, r3
 801b1d2:	2f0f      	cmp	r7, #15
 801b1d4:	d911      	bls.n	801b1fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801b1d6:	4b35      	ldr	r3, [pc, #212]	; (801b2ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801b1d8:	f240 1157 	movw	r1, #343	; 0x157
 801b1dc:	4a34      	ldr	r2, [pc, #208]	; (801b2b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801b1de:	4835      	ldr	r0, [pc, #212]	; (801b2b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801b1e0:	f001 f87c 	bl	801c2dc <__assert_func>
 801b1e4:	2600      	movs	r6, #0
 801b1e6:	e7a4      	b.n	801b132 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801b1e8:	2400      	movs	r4, #0
 801b1ea:	e7bd      	b.n	801b168 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801b1ec:	463c      	mov	r4, r7
 801b1ee:	e7be      	b.n	801b16e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801b1f0:	2000      	movs	r0, #0
 801b1f2:	e7d5      	b.n	801b1a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	e7ec      	b.n	801b1d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801b1f8:	463b      	mov	r3, r7
 801b1fa:	2d0f      	cmp	r5, #15
 801b1fc:	d8eb      	bhi.n	801b1d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b1fe:	b2bf      	uxth	r7, r7
 801b200:	b2ad      	uxth	r5, r5
 801b202:	fb07 f205 	mul.w	r2, r7, r5
 801b206:	013f      	lsls	r7, r7, #4
 801b208:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b20c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b210:	1abf      	subs	r7, r7, r2
 801b212:	b2ad      	uxth	r5, r5
 801b214:	b2bf      	uxth	r7, r7
 801b216:	ebac 0c05 	sub.w	ip, ip, r5
 801b21a:	437c      	muls	r4, r7
 801b21c:	fa1f fc8c 	uxth.w	ip, ip
 801b220:	fb06 440c 	mla	r4, r6, ip, r4
 801b224:	fb05 4400 	mla	r4, r5, r0, r4
 801b228:	fb02 4203 	mla	r2, r2, r3, r4
 801b22c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b230:	b38a      	cbz	r2, 801b296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801b232:	4b21      	ldr	r3, [pc, #132]	; (801b2b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801b234:	681c      	ldr	r4, [r3, #0]
 801b236:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801b23a:	b2e5      	uxtb	r5, r4
 801b23c:	4353      	muls	r3, r2
 801b23e:	1c5a      	adds	r2, r3, #1
 801b240:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b244:	1212      	asrs	r2, r2, #8
 801b246:	b290      	uxth	r0, r2
 801b248:	43d2      	mvns	r2, r2
 801b24a:	fb15 f500 	smulbb	r5, r5, r0
 801b24e:	b2d3      	uxtb	r3, r2
 801b250:	780a      	ldrb	r2, [r1, #0]
 801b252:	fb02 5203 	mla	r2, r2, r3, r5
 801b256:	b292      	uxth	r2, r2
 801b258:	1c55      	adds	r5, r2, #1
 801b25a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b25e:	784d      	ldrb	r5, [r1, #1]
 801b260:	fb15 f503 	smulbb	r5, r5, r3
 801b264:	1212      	asrs	r2, r2, #8
 801b266:	700a      	strb	r2, [r1, #0]
 801b268:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801b26c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b270:	fb02 5200 	mla	r2, r2, r0, r5
 801b274:	b292      	uxth	r2, r2
 801b276:	1c55      	adds	r5, r2, #1
 801b278:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b27c:	1212      	asrs	r2, r2, #8
 801b27e:	704a      	strb	r2, [r1, #1]
 801b280:	788a      	ldrb	r2, [r1, #2]
 801b282:	fb12 f303 	smulbb	r3, r2, r3
 801b286:	fb04 3300 	mla	r3, r4, r0, r3
 801b28a:	b29b      	uxth	r3, r3
 801b28c:	1c5a      	adds	r2, r3, #1
 801b28e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b292:	121b      	asrs	r3, r3, #8
 801b294:	708b      	strb	r3, [r1, #2]
 801b296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b29a:	2f0f      	cmp	r7, #15
 801b29c:	d89b      	bhi.n	801b1d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801b29e:	462b      	mov	r3, r5
 801b2a0:	4628      	mov	r0, r5
 801b2a2:	e7ac      	b.n	801b1fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801b2a4:	2d00      	cmp	r5, #0
 801b2a6:	d1a1      	bne.n	801b1ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801b2a8:	462c      	mov	r4, r5
 801b2aa:	e7f8      	b.n	801b29e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801b2ac:	080205d7 	.word	0x080205d7
 801b2b0:	08020a8e 	.word	0x08020a8e
 801b2b4:	0802065f 	.word	0x0802065f
 801b2b8:	24006c74 	.word	0x24006c74

0801b2bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c0:	ed2d 8b08 	vpush	{d8-d11}
 801b2c4:	b097      	sub	sp, #92	; 0x5c
 801b2c6:	eeb0 aa40 	vmov.f32	s20, s0
 801b2ca:	eef0 9a60 	vmov.f32	s19, s1
 801b2ce:	9214      	str	r2, [sp, #80]	; 0x50
 801b2d0:	eeb0 9a41 	vmov.f32	s18, s2
 801b2d4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b2d6:	eeb0 8a62 	vmov.f32	s16, s5
 801b2da:	9309      	str	r3, [sp, #36]	; 0x24
 801b2dc:	eef0 8a43 	vmov.f32	s17, s6
 801b2e0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b2e4:	eef0 ba44 	vmov.f32	s23, s8
 801b2e8:	9015      	str	r0, [sp, #84]	; 0x54
 801b2ea:	eeb0 ba64 	vmov.f32	s22, s9
 801b2ee:	6850      	ldr	r0, [r2, #4]
 801b2f0:	eef0 aa45 	vmov.f32	s21, s10
 801b2f4:	910c      	str	r1, [sp, #48]	; 0x30
 801b2f6:	930e      	str	r3, [sp, #56]	; 0x38
 801b2f8:	6812      	ldr	r2, [r2, #0]
 801b2fa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b2fe:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801b302:	fb00 1303 	mla	r3, r0, r3, r1
 801b306:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b30a:	eb02 0a03 	add.w	sl, r2, r3
 801b30e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b310:	689b      	ldr	r3, [r3, #8]
 801b312:	3301      	adds	r3, #1
 801b314:	f023 0301 	bic.w	r3, r3, #1
 801b318:	930f      	str	r3, [sp, #60]	; 0x3c
 801b31a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b31c:	681f      	ldr	r7, [r3, #0]
 801b31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b320:	2b00      	cmp	r3, #0
 801b322:	dc03      	bgt.n	801b32c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b326:	2b00      	cmp	r3, #0
 801b328:	f340 8247 	ble.w	801b7ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b32c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b32e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b332:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b336:	1e48      	subs	r0, r1, #1
 801b338:	f102 3cff 	add.w	ip, r2, #4294967295
 801b33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b33e:	2b00      	cmp	r3, #0
 801b340:	f340 80e5 	ble.w	801b50e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b344:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801b348:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b34c:	d406      	bmi.n	801b35c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b34e:	4586      	cmp	lr, r0
 801b350:	da04      	bge.n	801b35c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b352:	2b00      	cmp	r3, #0
 801b354:	db02      	blt.n	801b35c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b356:	4563      	cmp	r3, ip
 801b358:	f2c0 80da 	blt.w	801b510 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b35c:	f11e 0e01 	adds.w	lr, lr, #1
 801b360:	f100 80cb 	bmi.w	801b4fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b364:	4571      	cmp	r1, lr
 801b366:	f2c0 80c8 	blt.w	801b4fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b36a:	3301      	adds	r3, #1
 801b36c:	f100 80c5 	bmi.w	801b4fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b370:	429a      	cmp	r2, r3
 801b372:	f2c0 80c2 	blt.w	801b4fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b378:	46d0      	mov	r8, sl
 801b37a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b37e:	930d      	str	r3, [sp, #52]	; 0x34
 801b380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b382:	2b00      	cmp	r3, #0
 801b384:	f340 80e3 	ble.w	801b54e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b388:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b38a:	1430      	asrs	r0, r6, #16
 801b38c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b390:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b394:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b398:	142b      	asrs	r3, r5, #16
 801b39a:	f100 812e 	bmi.w	801b5fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b39e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801b3a2:	455b      	cmp	r3, fp
 801b3a4:	f280 8129 	bge.w	801b5fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b3a8:	2800      	cmp	r0, #0
 801b3aa:	f2c0 8126 	blt.w	801b5fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b3ae:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b3b2:	4558      	cmp	r0, fp
 801b3b4:	f280 8121 	bge.w	801b5fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801b3b8:	fb00 3309 	mla	r3, r0, r9, r3
 801b3bc:	0858      	lsrs	r0, r3, #1
 801b3be:	07dc      	lsls	r4, r3, #31
 801b3c0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b3c4:	bf54      	ite	pl
 801b3c6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b3ca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b3ce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b3d2:	fa5f fc8c 	uxtb.w	ip, ip
 801b3d6:	2a00      	cmp	r2, #0
 801b3d8:	f000 80fe 	beq.w	801b5d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b3dc:	1c58      	adds	r0, r3, #1
 801b3de:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b3e2:	07c0      	lsls	r0, r0, #31
 801b3e4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b3e8:	bf54      	ite	pl
 801b3ea:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b3ee:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b3f2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b3f6:	fa5f f08e 	uxtb.w	r0, lr
 801b3fa:	9010      	str	r0, [sp, #64]	; 0x40
 801b3fc:	b1d9      	cbz	r1, 801b436 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b3fe:	444b      	add	r3, r9
 801b400:	0858      	lsrs	r0, r3, #1
 801b402:	07dc      	lsls	r4, r3, #31
 801b404:	f103 0301 	add.w	r3, r3, #1
 801b408:	5c38      	ldrb	r0, [r7, r0]
 801b40a:	bf54      	ite	pl
 801b40c:	f000 000f 	andpl.w	r0, r0, #15
 801b410:	1100      	asrmi	r0, r0, #4
 801b412:	07dc      	lsls	r4, r3, #31
 801b414:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b418:	b2c0      	uxtb	r0, r0
 801b41a:	900a      	str	r0, [sp, #40]	; 0x28
 801b41c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801b420:	f817 e000 	ldrb.w	lr, [r7, r0]
 801b424:	bf54      	ite	pl
 801b426:	f00e 030f 	andpl.w	r3, lr, #15
 801b42a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801b42e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b432:	b2db      	uxtb	r3, r3
 801b434:	9311      	str	r3, [sp, #68]	; 0x44
 801b436:	b292      	uxth	r2, r2
 801b438:	b289      	uxth	r1, r1
 801b43a:	0113      	lsls	r3, r2, #4
 801b43c:	fb02 f001 	mul.w	r0, r2, r1
 801b440:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b442:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b446:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801b44a:	1a1b      	subs	r3, r3, r0
 801b44c:	b289      	uxth	r1, r1
 801b44e:	b29b      	uxth	r3, r3
 801b450:	ebae 0e01 	sub.w	lr, lr, r1
 801b454:	4353      	muls	r3, r2
 801b456:	fa1f fe8e 	uxth.w	lr, lr
 801b45a:	fb0c 320e 	mla	r2, ip, lr, r3
 801b45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b460:	fb01 2203 	mla	r2, r1, r3, r2
 801b464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b466:	fb00 2203 	mla	r2, r0, r3, r2
 801b46a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b46e:	2a00      	cmp	r2, #0
 801b470:	d039      	beq.n	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b472:	4bc7      	ldr	r3, [pc, #796]	; (801b790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b474:	6819      	ldr	r1, [r3, #0]
 801b476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b478:	fa5f fc81 	uxtb.w	ip, r1
 801b47c:	435a      	muls	r2, r3
 801b47e:	1c53      	adds	r3, r2, #1
 801b480:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b484:	1212      	asrs	r2, r2, #8
 801b486:	b290      	uxth	r0, r2
 801b488:	43d2      	mvns	r2, r2
 801b48a:	fb1c fc00 	smulbb	ip, ip, r0
 801b48e:	b2d3      	uxtb	r3, r2
 801b490:	f898 2000 	ldrb.w	r2, [r8]
 801b494:	fb02 c203 	mla	r2, r2, r3, ip
 801b498:	b292      	uxth	r2, r2
 801b49a:	f102 0c01 	add.w	ip, r2, #1
 801b49e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b4a2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b4a6:	fb1c fc03 	smulbb	ip, ip, r3
 801b4aa:	1212      	asrs	r2, r2, #8
 801b4ac:	f888 2000 	strb.w	r2, [r8]
 801b4b0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b4b4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b4b8:	fb02 c200 	mla	r2, r2, r0, ip
 801b4bc:	b292      	uxth	r2, r2
 801b4be:	f102 0c01 	add.w	ip, r2, #1
 801b4c2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b4c6:	1212      	asrs	r2, r2, #8
 801b4c8:	f888 2001 	strb.w	r2, [r8, #1]
 801b4cc:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b4d0:	fb12 f303 	smulbb	r3, r2, r3
 801b4d4:	fb01 3300 	mla	r3, r1, r0, r3
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	1c5a      	adds	r2, r3, #1
 801b4dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b4e0:	121b      	asrs	r3, r3, #8
 801b4e2:	f888 3002 	strb.w	r3, [r8, #2]
 801b4e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b4e8:	f108 0803 	add.w	r8, r8, #3
 801b4ec:	441d      	add	r5, r3
 801b4ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b4f0:	441e      	add	r6, r3
 801b4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4f4:	3b01      	subs	r3, #1
 801b4f6:	930d      	str	r3, [sp, #52]	; 0x34
 801b4f8:	e742      	b.n	801b380 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801b4fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b4fc:	f10a 0a03 	add.w	sl, sl, #3
 801b500:	441d      	add	r5, r3
 801b502:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b504:	441e      	add	r6, r3
 801b506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b508:	3b01      	subs	r3, #1
 801b50a:	9309      	str	r3, [sp, #36]	; 0x24
 801b50c:	e716      	b.n	801b33c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b50e:	d024      	beq.n	801b55a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b512:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b514:	3b01      	subs	r3, #1
 801b516:	fb00 5003 	mla	r0, r0, r3, r5
 801b51a:	1400      	asrs	r0, r0, #16
 801b51c:	f53f af2b 	bmi.w	801b376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b520:	3901      	subs	r1, #1
 801b522:	4288      	cmp	r0, r1
 801b524:	f6bf af27 	bge.w	801b376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b528:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b52a:	fb01 6303 	mla	r3, r1, r3, r6
 801b52e:	141b      	asrs	r3, r3, #16
 801b530:	f53f af21 	bmi.w	801b376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b534:	3a01      	subs	r2, #1
 801b536:	4293      	cmp	r3, r2
 801b538:	f6bf af1d 	bge.w	801b376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b53c:	f10a 0e03 	add.w	lr, sl, #3
 801b540:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b544:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b548:	f1b8 0f00 	cmp.w	r8, #0
 801b54c:	dc76      	bgt.n	801b63c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801b54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b550:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b558:	44a2      	add	sl, r4
 801b55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	f340 812c 	ble.w	801b7ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801b562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b566:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b568:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b56c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b570:	eef0 6a48 	vmov.f32	s13, s16
 801b574:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b578:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b57c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b580:	ee16 5a90 	vmov	r5, s13
 801b584:	eef0 6a68 	vmov.f32	s13, s17
 801b588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b58c:	ee16 6a90 	vmov	r6, s13
 801b590:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b594:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b598:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b59c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b5a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b5a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b5a8:	ee18 2a10 	vmov	r2, s16
 801b5ac:	eeb0 8a47 	vmov.f32	s16, s14
 801b5b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5b4:	ee18 2a90 	vmov	r2, s17
 801b5b8:	932b      	str	r3, [sp, #172]	; 0xac
 801b5ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5bc:	eef0 8a67 	vmov.f32	s17, s15
 801b5c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5c4:	932c      	str	r3, [sp, #176]	; 0xb0
 801b5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5ca:	3b01      	subs	r3, #1
 801b5cc:	930c      	str	r3, [sp, #48]	; 0x30
 801b5ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5d0:	bf08      	it	eq
 801b5d2:	4613      	moveq	r3, r2
 801b5d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b5d6:	e6a2      	b.n	801b31e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b5d8:	2900      	cmp	r1, #0
 801b5da:	f43f af2c 	beq.w	801b436 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b5de:	eb09 0003 	add.w	r0, r9, r3
 801b5e2:	0843      	lsrs	r3, r0, #1
 801b5e4:	07c0      	lsls	r0, r0, #31
 801b5e6:	5cfb      	ldrb	r3, [r7, r3]
 801b5e8:	bf54      	ite	pl
 801b5ea:	f003 030f 	andpl.w	r3, r3, #15
 801b5ee:	111b      	asrmi	r3, r3, #4
 801b5f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b5f4:	b2db      	uxtb	r3, r3
 801b5f6:	930a      	str	r3, [sp, #40]	; 0x28
 801b5f8:	e71d      	b.n	801b436 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801b5fa:	f113 0b01 	adds.w	fp, r3, #1
 801b5fe:	f53f af72 	bmi.w	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b602:	45dc      	cmp	ip, fp
 801b604:	f6ff af6f 	blt.w	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b608:	f110 0b01 	adds.w	fp, r0, #1
 801b60c:	f53f af6b 	bmi.w	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b610:	45de      	cmp	lr, fp
 801b612:	f6ff af68 	blt.w	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b616:	9302      	str	r3, [sp, #8]
 801b618:	fa0f f38e 	sxth.w	r3, lr
 801b61c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b61e:	9301      	str	r3, [sp, #4]
 801b620:	fa0f f38c 	sxth.w	r3, ip
 801b624:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b628:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b62c:	9300      	str	r3, [sp, #0]
 801b62e:	463a      	mov	r2, r7
 801b630:	464b      	mov	r3, r9
 801b632:	4641      	mov	r1, r8
 801b634:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b636:	f7ff fd59 	bl	801b0ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b63a:	e754      	b.n	801b4e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b63c:	142a      	asrs	r2, r5, #16
 801b63e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b642:	1433      	asrs	r3, r6, #16
 801b644:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b648:	fb09 2303 	mla	r3, r9, r3, r2
 801b64c:	085a      	lsrs	r2, r3, #1
 801b64e:	07dc      	lsls	r4, r3, #31
 801b650:	5cba      	ldrb	r2, [r7, r2]
 801b652:	bf54      	ite	pl
 801b654:	f002 020f 	andpl.w	r2, r2, #15
 801b658:	1112      	asrmi	r2, r2, #4
 801b65a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b65e:	b2d2      	uxtb	r2, r2
 801b660:	2900      	cmp	r1, #0
 801b662:	f000 8097 	beq.w	801b794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801b666:	f103 0b01 	add.w	fp, r3, #1
 801b66a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b66e:	f01b 0f01 	tst.w	fp, #1
 801b672:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b676:	bf0c      	ite	eq
 801b678:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b67c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b680:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b684:	fa5f f48c 	uxtb.w	r4, ip
 801b688:	9412      	str	r4, [sp, #72]	; 0x48
 801b68a:	b300      	cbz	r0, 801b6ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b68c:	444b      	add	r3, r9
 801b68e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b692:	07dc      	lsls	r4, r3, #31
 801b694:	f103 0301 	add.w	r3, r3, #1
 801b698:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b69c:	bf54      	ite	pl
 801b69e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b6a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b6a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b6aa:	fa5f f48c 	uxtb.w	r4, ip
 801b6ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b6b2:	940b      	str	r4, [sp, #44]	; 0x2c
 801b6b4:	07dc      	lsls	r4, r3, #31
 801b6b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b6ba:	bf54      	ite	pl
 801b6bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b6c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b6c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b6c8:	fa5f f38c 	uxtb.w	r3, ip
 801b6cc:	9313      	str	r3, [sp, #76]	; 0x4c
 801b6ce:	b289      	uxth	r1, r1
 801b6d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6d2:	b280      	uxth	r0, r0
 801b6d4:	fb01 f300 	mul.w	r3, r1, r0
 801b6d8:	0109      	lsls	r1, r1, #4
 801b6da:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b6de:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801b6e2:	1ac9      	subs	r1, r1, r3
 801b6e4:	b280      	uxth	r0, r0
 801b6e6:	b289      	uxth	r1, r1
 801b6e8:	ebac 0c00 	sub.w	ip, ip, r0
 801b6ec:	4361      	muls	r1, r4
 801b6ee:	fa1f fc8c 	uxth.w	ip, ip
 801b6f2:	fb02 120c 	mla	r2, r2, ip, r1
 801b6f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b6f8:	fb00 2001 	mla	r0, r0, r1, r2
 801b6fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b6fe:	fb03 0302 	mla	r3, r3, r2, r0
 801b702:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b706:	2b00      	cmp	r3, #0
 801b708:	d039      	beq.n	801b77e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b70a:	4a21      	ldr	r2, [pc, #132]	; (801b790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801b70c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b710:	6810      	ldr	r0, [r2, #0]
 801b712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b714:	fa5f fc80 	uxtb.w	ip, r0
 801b718:	4353      	muls	r3, r2
 801b71a:	1c5a      	adds	r2, r3, #1
 801b71c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b720:	121b      	asrs	r3, r3, #8
 801b722:	b29a      	uxth	r2, r3
 801b724:	43db      	mvns	r3, r3
 801b726:	fb1c fc02 	smulbb	ip, ip, r2
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	fb01 c103 	mla	r1, r1, r3, ip
 801b730:	b289      	uxth	r1, r1
 801b732:	f101 0c01 	add.w	ip, r1, #1
 801b736:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b73a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b73e:	fb1c fc03 	smulbb	ip, ip, r3
 801b742:	1209      	asrs	r1, r1, #8
 801b744:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b748:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b74c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b750:	fb01 c102 	mla	r1, r1, r2, ip
 801b754:	b289      	uxth	r1, r1
 801b756:	f101 0c01 	add.w	ip, r1, #1
 801b75a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b75e:	1209      	asrs	r1, r1, #8
 801b760:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b764:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b768:	fb11 f303 	smulbb	r3, r1, r3
 801b76c:	fb00 3002 	mla	r0, r0, r2, r3
 801b770:	b280      	uxth	r0, r0
 801b772:	1c42      	adds	r2, r0, #1
 801b774:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b778:	1200      	asrs	r0, r0, #8
 801b77a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b77e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b780:	f10e 0e03 	add.w	lr, lr, #3
 801b784:	f108 38ff 	add.w	r8, r8, #4294967295
 801b788:	441d      	add	r5, r3
 801b78a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b78c:	441e      	add	r6, r3
 801b78e:	e6db      	b.n	801b548 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b790:	24006c74 	.word	0x24006c74
 801b794:	2800      	cmp	r0, #0
 801b796:	d09a      	beq.n	801b6ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b798:	444b      	add	r3, r9
 801b79a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b79e:	07db      	lsls	r3, r3, #31
 801b7a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b7a4:	bf54      	ite	pl
 801b7a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b7aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b7ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b7b2:	fa5f f38c 	uxtb.w	r3, ip
 801b7b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801b7b8:	e789      	b.n	801b6ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b7ba:	b017      	add	sp, #92	; 0x5c
 801b7bc:	ecbd 8b08 	vpop	{d8-d11}
 801b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801b7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801b7cc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801b7d6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b7da:	fb0c 0e03 	mla	lr, ip, r3, r0
 801b7de:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801b7e2:	db6b      	blt.n	801b8bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7e4:	4580      	cmp	r8, r0
 801b7e6:	dd69      	ble.n	801b8bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7e8:	f1bc 0f00 	cmp.w	ip, #0
 801b7ec:	db66      	blt.n	801b8bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7ee:	45e1      	cmp	r9, ip
 801b7f0:	dd64      	ble.n	801b8bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801b7f2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b7f6:	f01e 0f01 	tst.w	lr, #1
 801b7fa:	5d16      	ldrb	r6, [r2, r4]
 801b7fc:	bf0c      	ite	eq
 801b7fe:	f006 060f 	andeq.w	r6, r6, #15
 801b802:	1136      	asrne	r6, r6, #4
 801b804:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b808:	b2f6      	uxtb	r6, r6
 801b80a:	f110 0a01 	adds.w	sl, r0, #1
 801b80e:	d457      	bmi.n	801b8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b810:	45d0      	cmp	r8, sl
 801b812:	dd55      	ble.n	801b8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b814:	f1bc 0f00 	cmp.w	ip, #0
 801b818:	db52      	blt.n	801b8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b81a:	45e1      	cmp	r9, ip
 801b81c:	dd50      	ble.n	801b8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801b81e:	2f00      	cmp	r7, #0
 801b820:	f000 80a5 	beq.w	801b96e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801b824:	f10e 0b01 	add.w	fp, lr, #1
 801b828:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b82c:	f01b 0f01 	tst.w	fp, #1
 801b830:	5d14      	ldrb	r4, [r2, r4]
 801b832:	bf0c      	ite	eq
 801b834:	f004 040f 	andeq.w	r4, r4, #15
 801b838:	1124      	asrne	r4, r4, #4
 801b83a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b83e:	b2e4      	uxtb	r4, r4
 801b840:	2d00      	cmp	r5, #0
 801b842:	f000 808f 	beq.w	801b964 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801b846:	2800      	cmp	r0, #0
 801b848:	f10c 0c01 	add.w	ip, ip, #1
 801b84c:	db3c      	blt.n	801b8c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b84e:	4580      	cmp	r8, r0
 801b850:	dd3a      	ble.n	801b8c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b852:	f1bc 0f00 	cmp.w	ip, #0
 801b856:	db37      	blt.n	801b8c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b858:	45e1      	cmp	r9, ip
 801b85a:	dd35      	ble.n	801b8c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801b85c:	eb03 0b0e 	add.w	fp, r3, lr
 801b860:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801b864:	f01b 0f01 	tst.w	fp, #1
 801b868:	5c10      	ldrb	r0, [r2, r0]
 801b86a:	bf0c      	ite	eq
 801b86c:	f000 000f 	andeq.w	r0, r0, #15
 801b870:	1100      	asrne	r0, r0, #4
 801b872:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b876:	b2c0      	uxtb	r0, r0
 801b878:	f1ba 0f00 	cmp.w	sl, #0
 801b87c:	db26      	blt.n	801b8cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b87e:	45d0      	cmp	r8, sl
 801b880:	dd24      	ble.n	801b8cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b882:	f1bc 0f00 	cmp.w	ip, #0
 801b886:	db21      	blt.n	801b8cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b888:	45e1      	cmp	r9, ip
 801b88a:	dd1f      	ble.n	801b8cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801b88c:	b307      	cbz	r7, 801b8d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801b88e:	3301      	adds	r3, #1
 801b890:	449e      	add	lr, r3
 801b892:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b896:	f01e 0f01 	tst.w	lr, #1
 801b89a:	5cd3      	ldrb	r3, [r2, r3]
 801b89c:	bf0c      	ite	eq
 801b89e:	f003 030f 	andeq.w	r3, r3, #15
 801b8a2:	111b      	asrne	r3, r3, #4
 801b8a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	2f0f      	cmp	r7, #15
 801b8ac:	d911      	bls.n	801b8d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801b8ae:	4b32      	ldr	r3, [pc, #200]	; (801b978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801b8b0:	f240 1157 	movw	r1, #343	; 0x157
 801b8b4:	4a31      	ldr	r2, [pc, #196]	; (801b97c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801b8b6:	4832      	ldr	r0, [pc, #200]	; (801b980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801b8b8:	f000 fd10 	bl	801c2dc <__assert_func>
 801b8bc:	2600      	movs	r6, #0
 801b8be:	e7a4      	b.n	801b80a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801b8c0:	2400      	movs	r4, #0
 801b8c2:	e7bd      	b.n	801b840 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801b8c4:	463c      	mov	r4, r7
 801b8c6:	e7be      	b.n	801b846 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801b8c8:	2000      	movs	r0, #0
 801b8ca:	e7d5      	b.n	801b878 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	e7ec      	b.n	801b8aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801b8d0:	463b      	mov	r3, r7
 801b8d2:	2d0f      	cmp	r5, #15
 801b8d4:	d8eb      	bhi.n	801b8ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b8d6:	b2bf      	uxth	r7, r7
 801b8d8:	b2ad      	uxth	r5, r5
 801b8da:	fb07 f205 	mul.w	r2, r7, r5
 801b8de:	013f      	lsls	r7, r7, #4
 801b8e0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801b8e4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801b8e8:	1abf      	subs	r7, r7, r2
 801b8ea:	b2ad      	uxth	r5, r5
 801b8ec:	b2bf      	uxth	r7, r7
 801b8ee:	ebac 0c05 	sub.w	ip, ip, r5
 801b8f2:	437c      	muls	r4, r7
 801b8f4:	fa1f fc8c 	uxth.w	ip, ip
 801b8f8:	fb06 440c 	mla	r4, r6, ip, r4
 801b8fc:	fb05 4400 	mla	r4, r5, r0, r4
 801b900:	fb02 4303 	mla	r3, r2, r3, r4
 801b904:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b908:	b353      	cbz	r3, 801b960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801b90a:	4a1e      	ldr	r2, [pc, #120]	; (801b984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801b90c:	7808      	ldrb	r0, [r1, #0]
 801b90e:	6814      	ldr	r4, [r2, #0]
 801b910:	b29a      	uxth	r2, r3
 801b912:	43db      	mvns	r3, r3
 801b914:	b2e5      	uxtb	r5, r4
 801b916:	b2db      	uxtb	r3, r3
 801b918:	fb15 f502 	smulbb	r5, r5, r2
 801b91c:	fb00 5003 	mla	r0, r0, r3, r5
 801b920:	b280      	uxth	r0, r0
 801b922:	1c45      	adds	r5, r0, #1
 801b924:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b928:	784d      	ldrb	r5, [r1, #1]
 801b92a:	fb15 f503 	smulbb	r5, r5, r3
 801b92e:	1200      	asrs	r0, r0, #8
 801b930:	7008      	strb	r0, [r1, #0]
 801b932:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b936:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b93a:	fb00 5002 	mla	r0, r0, r2, r5
 801b93e:	b280      	uxth	r0, r0
 801b940:	1c45      	adds	r5, r0, #1
 801b942:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b946:	1200      	asrs	r0, r0, #8
 801b948:	7048      	strb	r0, [r1, #1]
 801b94a:	7888      	ldrb	r0, [r1, #2]
 801b94c:	fb10 f303 	smulbb	r3, r0, r3
 801b950:	fb04 3202 	mla	r2, r4, r2, r3
 801b954:	b292      	uxth	r2, r2
 801b956:	1c53      	adds	r3, r2, #1
 801b958:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b95c:	1212      	asrs	r2, r2, #8
 801b95e:	708a      	strb	r2, [r1, #2]
 801b960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b964:	2f0f      	cmp	r7, #15
 801b966:	d8a2      	bhi.n	801b8ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801b968:	462b      	mov	r3, r5
 801b96a:	4628      	mov	r0, r5
 801b96c:	e7b3      	b.n	801b8d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801b96e:	2d00      	cmp	r5, #0
 801b970:	d1a8      	bne.n	801b8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801b972:	462c      	mov	r4, r5
 801b974:	e7f8      	b.n	801b968 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801b976:	bf00      	nop
 801b978:	080205d7 	.word	0x080205d7
 801b97c:	08020a8e 	.word	0x08020a8e
 801b980:	0802065f 	.word	0x0802065f
 801b984:	24006c74 	.word	0x24006c74

0801b988 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98c:	ed2d 8b08 	vpush	{d8-d11}
 801b990:	b093      	sub	sp, #76	; 0x4c
 801b992:	461c      	mov	r4, r3
 801b994:	eeb0 aa40 	vmov.f32	s20, s0
 801b998:	920c      	str	r2, [sp, #48]	; 0x30
 801b99a:	eef0 9a60 	vmov.f32	s19, s1
 801b99e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b9a0:	eeb0 9a41 	vmov.f32	s18, s2
 801b9a4:	9011      	str	r0, [sp, #68]	; 0x44
 801b9a6:	eeb0 8a62 	vmov.f32	s16, s5
 801b9aa:	6850      	ldr	r0, [r2, #4]
 801b9ac:	eef0 8a43 	vmov.f32	s17, s6
 801b9b0:	9107      	str	r1, [sp, #28]
 801b9b2:	eef0 ba44 	vmov.f32	s23, s8
 801b9b6:	6812      	ldr	r2, [r2, #0]
 801b9b8:	eeb0 ba64 	vmov.f32	s22, s9
 801b9bc:	eef0 aa45 	vmov.f32	s21, s10
 801b9c0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b9c4:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801b9c8:	fb00 1303 	mla	r3, r0, r3, r1
 801b9cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9d0:	eb02 0b03 	add.w	fp, r2, r3
 801b9d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9d6:	689b      	ldr	r3, [r3, #8]
 801b9d8:	3301      	adds	r3, #1
 801b9da:	f023 0301 	bic.w	r3, r3, #1
 801b9de:	9309      	str	r3, [sp, #36]	; 0x24
 801b9e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9e2:	f8d3 8000 	ldr.w	r8, [r3]
 801b9e6:	9b07      	ldr	r3, [sp, #28]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	dc03      	bgt.n	801b9f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	f340 822b 	ble.w	801be4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b9f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9fe:	1e48      	subs	r0, r1, #1
 801ba00:	1e57      	subs	r7, r2, #1
 801ba02:	2c00      	cmp	r4, #0
 801ba04:	f340 80d7 	ble.w	801bbb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ba08:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ba0c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ba10:	d406      	bmi.n	801ba20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba12:	4584      	cmp	ip, r0
 801ba14:	da04      	bge.n	801ba20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	db02      	blt.n	801ba20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ba1a:	42bb      	cmp	r3, r7
 801ba1c:	f2c0 80cc 	blt.w	801bbb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ba20:	f11c 0c01 	adds.w	ip, ip, #1
 801ba24:	f100 80bf 	bmi.w	801bba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba28:	4561      	cmp	r1, ip
 801ba2a:	f2c0 80bc 	blt.w	801bba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba2e:	3301      	adds	r3, #1
 801ba30:	f100 80b9 	bmi.w	801bba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba34:	429a      	cmp	r2, r3
 801ba36:	f2c0 80b6 	blt.w	801bba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801ba3a:	46a2      	mov	sl, r4
 801ba3c:	465f      	mov	r7, fp
 801ba3e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ba42:	f1ba 0f00 	cmp.w	sl, #0
 801ba46:	f340 80d4 	ble.w	801bbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ba4a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801ba4e:	1430      	asrs	r0, r6, #16
 801ba50:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ba54:	9308      	str	r3, [sp, #32]
 801ba56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba58:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ba5c:	142b      	asrs	r3, r5, #16
 801ba5e:	f100 8124 	bmi.w	801bcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba62:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ba66:	4293      	cmp	r3, r2
 801ba68:	f280 811f 	bge.w	801bcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	f2c0 811c 	blt.w	801bcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba72:	f10e 32ff 	add.w	r2, lr, #4294967295
 801ba76:	4290      	cmp	r0, r2
 801ba78:	f280 8117 	bge.w	801bcaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ba7c:	fb00 3309 	mla	r3, r0, r9, r3
 801ba80:	0858      	lsrs	r0, r3, #1
 801ba82:	07da      	lsls	r2, r3, #31
 801ba84:	9a08      	ldr	r2, [sp, #32]
 801ba86:	f818 c000 	ldrb.w	ip, [r8, r0]
 801ba8a:	bf54      	ite	pl
 801ba8c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ba90:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ba94:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ba98:	fa5f fc8c 	uxtb.w	ip, ip
 801ba9c:	2a00      	cmp	r2, #0
 801ba9e:	f000 80ed 	beq.w	801bc7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801baa2:	1c58      	adds	r0, r3, #1
 801baa4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801baa8:	07c0      	lsls	r0, r0, #31
 801baaa:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801baae:	bf54      	ite	pl
 801bab0:	f00e 0e0f 	andpl.w	lr, lr, #15
 801bab4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801bab8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801babc:	fa5f fe8e 	uxtb.w	lr, lr
 801bac0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801bac4:	b1c9      	cbz	r1, 801bafa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bac6:	444b      	add	r3, r9
 801bac8:	0858      	lsrs	r0, r3, #1
 801baca:	07da      	lsls	r2, r3, #31
 801bacc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bad0:	bf54      	ite	pl
 801bad2:	f000 000f 	andpl.w	r0, r0, #15
 801bad6:	1100      	asrmi	r0, r0, #4
 801bad8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801badc:	b2c0      	uxtb	r0, r0
 801bade:	900a      	str	r0, [sp, #40]	; 0x28
 801bae0:	1c58      	adds	r0, r3, #1
 801bae2:	0843      	lsrs	r3, r0, #1
 801bae4:	07c2      	lsls	r2, r0, #31
 801bae6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801baea:	bf54      	ite	pl
 801baec:	f003 030f 	andpl.w	r3, r3, #15
 801baf0:	111b      	asrmi	r3, r3, #4
 801baf2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801baf6:	b2db      	uxtb	r3, r3
 801baf8:	930e      	str	r3, [sp, #56]	; 0x38
 801bafa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bafe:	b289      	uxth	r1, r1
 801bb00:	fb02 f301 	mul.w	r3, r2, r1
 801bb04:	0112      	lsls	r2, r2, #4
 801bb06:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bb0a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bb0e:	1ad2      	subs	r2, r2, r3
 801bb10:	b289      	uxth	r1, r1
 801bb12:	b292      	uxth	r2, r2
 801bb14:	1a40      	subs	r0, r0, r1
 801bb16:	fa1f fe80 	uxth.w	lr, r0
 801bb1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bb1c:	4342      	muls	r2, r0
 801bb1e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801bb22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb24:	fb01 c102 	mla	r1, r1, r2, ip
 801bb28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb2a:	fb03 1302 	mla	r3, r3, r2, r1
 801bb2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb32:	b383      	cbz	r3, 801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bb34:	4ac7      	ldr	r2, [pc, #796]	; (801be54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801bb36:	2bff      	cmp	r3, #255	; 0xff
 801bb38:	6812      	ldr	r2, [r2, #0]
 801bb3a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801bb3e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801bb42:	b2d2      	uxtb	r2, r2
 801bb44:	f000 80ac 	beq.w	801bca0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801bb48:	b299      	uxth	r1, r3
 801bb4a:	43db      	mvns	r3, r3
 801bb4c:	f897 c000 	ldrb.w	ip, [r7]
 801bb50:	fb12 f201 	smulbb	r2, r2, r1
 801bb54:	b2db      	uxtb	r3, r3
 801bb56:	fb10 f001 	smulbb	r0, r0, r1
 801bb5a:	fb0c 2203 	mla	r2, ip, r3, r2
 801bb5e:	fb1e f101 	smulbb	r1, lr, r1
 801bb62:	b292      	uxth	r2, r2
 801bb64:	f102 0c01 	add.w	ip, r2, #1
 801bb68:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bb6c:	1212      	asrs	r2, r2, #8
 801bb6e:	703a      	strb	r2, [r7, #0]
 801bb70:	787a      	ldrb	r2, [r7, #1]
 801bb72:	fb02 0003 	mla	r0, r2, r3, r0
 801bb76:	b280      	uxth	r0, r0
 801bb78:	1c42      	adds	r2, r0, #1
 801bb7a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bb7e:	78ba      	ldrb	r2, [r7, #2]
 801bb80:	fb02 1303 	mla	r3, r2, r3, r1
 801bb84:	1200      	asrs	r0, r0, #8
 801bb86:	b29b      	uxth	r3, r3
 801bb88:	7078      	strb	r0, [r7, #1]
 801bb8a:	f103 0e01 	add.w	lr, r3, #1
 801bb8e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bb92:	121b      	asrs	r3, r3, #8
 801bb94:	70bb      	strb	r3, [r7, #2]
 801bb96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bb98:	3703      	adds	r7, #3
 801bb9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb9e:	441d      	add	r5, r3
 801bba0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bba2:	441e      	add	r6, r3
 801bba4:	e74d      	b.n	801ba42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801bba6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bba8:	3c01      	subs	r4, #1
 801bbaa:	f10b 0b03 	add.w	fp, fp, #3
 801bbae:	441d      	add	r5, r3
 801bbb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbb2:	441e      	add	r6, r3
 801bbb4:	e725      	b.n	801ba02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bbb6:	d021      	beq.n	801bbfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801bbb8:	1e63      	subs	r3, r4, #1
 801bbba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bbbc:	fb00 5003 	mla	r0, r0, r3, r5
 801bbc0:	1400      	asrs	r0, r0, #16
 801bbc2:	f53f af3a 	bmi.w	801ba3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbc6:	3901      	subs	r1, #1
 801bbc8:	4288      	cmp	r0, r1
 801bbca:	f6bf af36 	bge.w	801ba3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bbd0:	fb01 6303 	mla	r3, r1, r3, r6
 801bbd4:	141b      	asrs	r3, r3, #16
 801bbd6:	f53f af30 	bmi.w	801ba3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbda:	3a01      	subs	r2, #1
 801bbdc:	4293      	cmp	r3, r2
 801bbde:	f6bf af2c 	bge.w	801ba3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbe2:	f10b 0c03 	add.w	ip, fp, #3
 801bbe6:	46a6      	mov	lr, r4
 801bbe8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bbec:	f1be 0f00 	cmp.w	lr, #0
 801bbf0:	dc79      	bgt.n	801bce6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801bbf2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801bbf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bbfa:	44a3      	add	fp, r4
 801bbfc:	9b07      	ldr	r3, [sp, #28]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	f340 8123 	ble.w	801be4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bc04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc0a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bc0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bc12:	eef0 6a48 	vmov.f32	s13, s16
 801bc16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bc1a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bc1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc22:	ee16 5a90 	vmov	r5, s13
 801bc26:	eef0 6a68 	vmov.f32	s13, s17
 801bc2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc2e:	ee16 6a90 	vmov	r6, s13
 801bc32:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bc36:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bc3a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bc3e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bc42:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bc46:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bc4a:	ee18 2a10 	vmov	r2, s16
 801bc4e:	eeb0 8a47 	vmov.f32	s16, s14
 801bc52:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc56:	ee18 2a90 	vmov	r2, s17
 801bc5a:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc5e:	eef0 8a67 	vmov.f32	s17, s15
 801bc62:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc66:	9328      	str	r3, [sp, #160]	; 0xa0
 801bc68:	9b07      	ldr	r3, [sp, #28]
 801bc6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	9307      	str	r3, [sp, #28]
 801bc70:	bf08      	it	eq
 801bc72:	4614      	moveq	r4, r2
 801bc74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc76:	bf18      	it	ne
 801bc78:	461c      	movne	r4, r3
 801bc7a:	e6b4      	b.n	801b9e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bc7c:	2900      	cmp	r1, #0
 801bc7e:	f43f af3c 	beq.w	801bafa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bc82:	eb09 0003 	add.w	r0, r9, r3
 801bc86:	0843      	lsrs	r3, r0, #1
 801bc88:	07c0      	lsls	r0, r0, #31
 801bc8a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bc8e:	bf54      	ite	pl
 801bc90:	f003 030f 	andpl.w	r3, r3, #15
 801bc94:	111b      	asrmi	r3, r3, #4
 801bc96:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bc9a:	b2db      	uxtb	r3, r3
 801bc9c:	930a      	str	r3, [sp, #40]	; 0x28
 801bc9e:	e72c      	b.n	801bafa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801bca0:	703a      	strb	r2, [r7, #0]
 801bca2:	7078      	strb	r0, [r7, #1]
 801bca4:	f887 e002 	strb.w	lr, [r7, #2]
 801bca8:	e775      	b.n	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcaa:	1c5a      	adds	r2, r3, #1
 801bcac:	f53f af73 	bmi.w	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcb0:	4594      	cmp	ip, r2
 801bcb2:	f6ff af70 	blt.w	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcb6:	1c42      	adds	r2, r0, #1
 801bcb8:	f53f af6d 	bmi.w	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcbc:	4596      	cmp	lr, r2
 801bcbe:	f6ff af6a 	blt.w	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bcc2:	9302      	str	r3, [sp, #8]
 801bcc4:	fa0f f38e 	sxth.w	r3, lr
 801bcc8:	9a08      	ldr	r2, [sp, #32]
 801bcca:	9301      	str	r3, [sp, #4]
 801bccc:	fa0f f38c 	sxth.w	r3, ip
 801bcd0:	9105      	str	r1, [sp, #20]
 801bcd2:	4639      	mov	r1, r7
 801bcd4:	9300      	str	r3, [sp, #0]
 801bcd6:	464b      	mov	r3, r9
 801bcd8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bcdc:	4642      	mov	r2, r8
 801bcde:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bce0:	f7ff fd70 	bl	801b7c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801bce4:	e757      	b.n	801bb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bce6:	142a      	asrs	r2, r5, #16
 801bce8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bcec:	1433      	asrs	r3, r6, #16
 801bcee:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801bcf2:	fb09 2303 	mla	r3, r9, r3, r2
 801bcf6:	085a      	lsrs	r2, r3, #1
 801bcf8:	07d9      	lsls	r1, r3, #31
 801bcfa:	f818 2002 	ldrb.w	r2, [r8, r2]
 801bcfe:	bf54      	ite	pl
 801bd00:	f002 020f 	andpl.w	r2, r2, #15
 801bd04:	1112      	asrmi	r2, r2, #4
 801bd06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd0a:	b2d2      	uxtb	r2, r2
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	f000 8085 	beq.w	801be1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bd12:	f103 0a01 	add.w	sl, r3, #1
 801bd16:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801bd1a:	f01a 0f01 	tst.w	sl, #1
 801bd1e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd22:	bf0c      	ite	eq
 801bd24:	f001 010f 	andeq.w	r1, r1, #15
 801bd28:	1109      	asrne	r1, r1, #4
 801bd2a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd2e:	b2c9      	uxtb	r1, r1
 801bd30:	910f      	str	r1, [sp, #60]	; 0x3c
 801bd32:	b1df      	cbz	r7, 801bd6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801bd34:	444b      	add	r3, r9
 801bd36:	0859      	lsrs	r1, r3, #1
 801bd38:	f013 0f01 	tst.w	r3, #1
 801bd3c:	f103 0301 	add.w	r3, r3, #1
 801bd40:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd44:	bf0c      	ite	eq
 801bd46:	f001 010f 	andeq.w	r1, r1, #15
 801bd4a:	1109      	asrne	r1, r1, #4
 801bd4c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd50:	b2c9      	uxtb	r1, r1
 801bd52:	910b      	str	r1, [sp, #44]	; 0x2c
 801bd54:	0859      	lsrs	r1, r3, #1
 801bd56:	07db      	lsls	r3, r3, #31
 801bd58:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bd5c:	bf54      	ite	pl
 801bd5e:	f001 010f 	andpl.w	r1, r1, #15
 801bd62:	1109      	asrmi	r1, r1, #4
 801bd64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bd68:	b2c9      	uxtb	r1, r1
 801bd6a:	9110      	str	r1, [sp, #64]	; 0x40
 801bd6c:	b280      	uxth	r0, r0
 801bd6e:	b2bf      	uxth	r7, r7
 801bd70:	fb00 f307 	mul.w	r3, r0, r7
 801bd74:	0100      	lsls	r0, r0, #4
 801bd76:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801bd7a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801bd7e:	1ac0      	subs	r0, r0, r3
 801bd80:	b2bf      	uxth	r7, r7
 801bd82:	b280      	uxth	r0, r0
 801bd84:	1bc9      	subs	r1, r1, r7
 801bd86:	fa1f fa81 	uxth.w	sl, r1
 801bd8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bd8c:	4348      	muls	r0, r1
 801bd8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd90:	fb02 020a 	mla	r2, r2, sl, r0
 801bd94:	fb07 2701 	mla	r7, r7, r1, r2
 801bd98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd9a:	fb03 7302 	mla	r3, r3, r2, r7
 801bd9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bda2:	b393      	cbz	r3, 801be0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801bda4:	4a2b      	ldr	r2, [pc, #172]	; (801be54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801bda6:	2bff      	cmp	r3, #255	; 0xff
 801bda8:	6811      	ldr	r1, [r2, #0]
 801bdaa:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801bdae:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801bdb2:	b2c9      	uxtb	r1, r1
 801bdb4:	d042      	beq.n	801be3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801bdb6:	b298      	uxth	r0, r3
 801bdb8:	43db      	mvns	r3, r3
 801bdba:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801bdbe:	fb11 f100 	smulbb	r1, r1, r0
 801bdc2:	b2db      	uxtb	r3, r3
 801bdc4:	fb17 f700 	smulbb	r7, r7, r0
 801bdc8:	fb02 1103 	mla	r1, r2, r3, r1
 801bdcc:	fb1a f000 	smulbb	r0, sl, r0
 801bdd0:	b289      	uxth	r1, r1
 801bdd2:	1c4a      	adds	r2, r1, #1
 801bdd4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bdd8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801bddc:	fb02 7703 	mla	r7, r2, r3, r7
 801bde0:	1209      	asrs	r1, r1, #8
 801bde2:	b2bf      	uxth	r7, r7
 801bde4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801bde8:	1c7a      	adds	r2, r7, #1
 801bdea:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bdee:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801bdf2:	fb02 0303 	mla	r3, r2, r3, r0
 801bdf6:	123f      	asrs	r7, r7, #8
 801bdf8:	b29b      	uxth	r3, r3
 801bdfa:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801bdfe:	1c5a      	adds	r2, r3, #1
 801be00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801be04:	121b      	asrs	r3, r3, #8
 801be06:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801be0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801be0c:	f10c 0c03 	add.w	ip, ip, #3
 801be10:	f10e 3eff 	add.w	lr, lr, #4294967295
 801be14:	441d      	add	r5, r3
 801be16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801be18:	441e      	add	r6, r3
 801be1a:	e6e7      	b.n	801bbec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801be1c:	2f00      	cmp	r7, #0
 801be1e:	d0a5      	beq.n	801bd6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801be20:	444b      	add	r3, r9
 801be22:	0859      	lsrs	r1, r3, #1
 801be24:	07db      	lsls	r3, r3, #31
 801be26:	f818 1001 	ldrb.w	r1, [r8, r1]
 801be2a:	bf54      	ite	pl
 801be2c:	f001 010f 	andpl.w	r1, r1, #15
 801be30:	1109      	asrmi	r1, r1, #4
 801be32:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801be36:	b2c9      	uxtb	r1, r1
 801be38:	910b      	str	r1, [sp, #44]	; 0x2c
 801be3a:	e797      	b.n	801bd6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801be3c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801be40:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801be44:	f80c ac01 	strb.w	sl, [ip, #-1]
 801be48:	e7df      	b.n	801be0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801be4a:	b013      	add	sp, #76	; 0x4c
 801be4c:	ecbd 8b08 	vpop	{d8-d11}
 801be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be54:	24006c74 	.word	0x24006c74

0801be58 <CRC_Lock>:
 801be58:	4a20      	ldr	r2, [pc, #128]	; (801bedc <CRC_Lock+0x84>)
 801be5a:	b530      	push	{r4, r5, lr}
 801be5c:	6813      	ldr	r3, [r2, #0]
 801be5e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801be62:	f24c 2540 	movw	r5, #49728	; 0xc240
 801be66:	f023 0301 	bic.w	r3, r3, #1
 801be6a:	6013      	str	r3, [r2, #0]
 801be6c:	4b1c      	ldr	r3, [pc, #112]	; (801bee0 <CRC_Lock+0x88>)
 801be6e:	681a      	ldr	r2, [r3, #0]
 801be70:	4022      	ands	r2, r4
 801be72:	42aa      	cmp	r2, r5
 801be74:	d005      	beq.n	801be82 <CRC_Lock+0x2a>
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	f24c 2270 	movw	r2, #49776	; 0xc270
 801be7c:	4023      	ands	r3, r4
 801be7e:	4293      	cmp	r3, r2
 801be80:	d124      	bne.n	801becc <CRC_Lock+0x74>
 801be82:	4b18      	ldr	r3, [pc, #96]	; (801bee4 <CRC_Lock+0x8c>)
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	bb0b      	cbnz	r3, 801becc <CRC_Lock+0x74>
 801be88:	4b17      	ldr	r3, [pc, #92]	; (801bee8 <CRC_Lock+0x90>)
 801be8a:	681a      	ldr	r2, [r3, #0]
 801be8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801be90:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801be94:	d00d      	beq.n	801beb2 <CRC_Lock+0x5a>
 801be96:	681a      	ldr	r2, [r3, #0]
 801be98:	f240 4483 	movw	r4, #1155	; 0x483
 801be9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801bea0:	42a2      	cmp	r2, r4
 801bea2:	d006      	beq.n	801beb2 <CRC_Lock+0x5a>
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	f240 4285 	movw	r2, #1157	; 0x485
 801beaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801beae:	4293      	cmp	r3, r2
 801beb0:	d10c      	bne.n	801becc <CRC_Lock+0x74>
 801beb2:	4b0e      	ldr	r3, [pc, #56]	; (801beec <CRC_Lock+0x94>)
 801beb4:	2201      	movs	r2, #1
 801beb6:	601a      	str	r2, [r3, #0]
 801beb8:	681a      	ldr	r2, [r3, #0]
 801beba:	2a00      	cmp	r2, #0
 801bebc:	d1fc      	bne.n	801beb8 <CRC_Lock+0x60>
 801bebe:	4b0c      	ldr	r3, [pc, #48]	; (801bef0 <CRC_Lock+0x98>)
 801bec0:	6018      	str	r0, [r3, #0]
 801bec2:	6818      	ldr	r0, [r3, #0]
 801bec4:	1a43      	subs	r3, r0, r1
 801bec6:	4258      	negs	r0, r3
 801bec8:	4158      	adcs	r0, r3
 801beca:	bd30      	pop	{r4, r5, pc}
 801becc:	4b09      	ldr	r3, [pc, #36]	; (801bef4 <CRC_Lock+0x9c>)
 801bece:	2201      	movs	r2, #1
 801bed0:	601a      	str	r2, [r3, #0]
 801bed2:	681a      	ldr	r2, [r3, #0]
 801bed4:	2a00      	cmp	r2, #0
 801bed6:	d1fc      	bne.n	801bed2 <CRC_Lock+0x7a>
 801bed8:	4b07      	ldr	r3, [pc, #28]	; (801bef8 <CRC_Lock+0xa0>)
 801beda:	e7f1      	b.n	801bec0 <CRC_Lock+0x68>
 801bedc:	e0002000 	.word	0xe0002000
 801bee0:	e000ed00 	.word	0xe000ed00
 801bee4:	e0042000 	.word	0xe0042000
 801bee8:	5c001000 	.word	0x5c001000
 801beec:	58024c08 	.word	0x58024c08
 801bef0:	58024c00 	.word	0x58024c00
 801bef4:	40023008 	.word	0x40023008
 801bef8:	40023000 	.word	0x40023000

0801befc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801befc:	6101      	str	r1, [r0, #16]
 801befe:	4770      	bx	lr

0801bf00 <_ZN8touchgfx8Gestures4tickEv>:
 801bf00:	7b83      	ldrb	r3, [r0, #14]
 801bf02:	b14b      	cbz	r3, 801bf18 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801bf04:	8903      	ldrh	r3, [r0, #8]
 801bf06:	3301      	adds	r3, #1
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	2b07      	cmp	r3, #7
 801bf0c:	8103      	strh	r3, [r0, #8]
 801bf0e:	bf81      	itttt	hi
 801bf10:	2300      	movhi	r3, #0
 801bf12:	8143      	strhhi	r3, [r0, #10]
 801bf14:	8183      	strhhi	r3, [r0, #12]
 801bf16:	7383      	strbhi	r3, [r0, #14]
 801bf18:	4770      	bx	lr
	...

0801bf1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801bf1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bf20:	4604      	mov	r4, r0
 801bf22:	4698      	mov	r8, r3
 801bf24:	8880      	ldrh	r0, [r0, #4]
 801bf26:	4617      	mov	r7, r2
 801bf28:	4b1d      	ldr	r3, [pc, #116]	; (801bfa0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801bf2a:	460e      	mov	r6, r1
 801bf2c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801bf30:	eba8 0000 	sub.w	r0, r8, r0
 801bf34:	9300      	str	r3, [sp, #0]
 801bf36:	2300      	movs	r3, #0
 801bf38:	b280      	uxth	r0, r0
 801bf3a:	8aa2      	ldrh	r2, [r4, #20]
 801bf3c:	f88d 3004 	strb.w	r3, [sp, #4]
 801bf40:	b203      	sxth	r3, r0
 801bf42:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801bf46:	88e1      	ldrh	r1, [r4, #6]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bf4e:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bf52:	bfb8      	it	lt
 801bf54:	4240      	neglt	r0, r0
 801bf56:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bf5a:	bfb8      	it	lt
 801bf5c:	b203      	sxthlt	r3, r0
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	dc08      	bgt.n	801bf74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801bf62:	1a69      	subs	r1, r5, r1
 801bf64:	b289      	uxth	r1, r1
 801bf66:	b20b      	sxth	r3, r1
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	bfbc      	itt	lt
 801bf6c:	4249      	neglt	r1, r1
 801bf6e:	b20b      	sxthlt	r3, r1
 801bf70:	429a      	cmp	r2, r3
 801bf72:	da13      	bge.n	801bf9c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801bf74:	6920      	ldr	r0, [r4, #16]
 801bf76:	4669      	mov	r1, sp
 801bf78:	eba8 0606 	sub.w	r6, r8, r6
 801bf7c:	1bef      	subs	r7, r5, r7
 801bf7e:	6803      	ldr	r3, [r0, #0]
 801bf80:	685b      	ldr	r3, [r3, #4]
 801bf82:	4798      	blx	r3
 801bf84:	2300      	movs	r3, #0
 801bf86:	2001      	movs	r0, #1
 801bf88:	8166      	strh	r6, [r4, #10]
 801bf8a:	8123      	strh	r3, [r4, #8]
 801bf8c:	81a7      	strh	r7, [r4, #12]
 801bf8e:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bf92:	80e5      	strh	r5, [r4, #6]
 801bf94:	73a0      	strb	r0, [r4, #14]
 801bf96:	b004      	add	sp, #16
 801bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf9c:	2000      	movs	r0, #0
 801bf9e:	e7fa      	b.n	801bf96 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801bfa0:	0801fa90 	.word	0x0801fa90

0801bfa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfa6:	461e      	mov	r6, r3
 801bfa8:	1e4b      	subs	r3, r1, #1
 801bfaa:	b085      	sub	sp, #20
 801bfac:	4604      	mov	r4, r0
 801bfae:	2b01      	cmp	r3, #1
 801bfb0:	460d      	mov	r5, r1
 801bfb2:	4617      	mov	r7, r2
 801bfb4:	d84b      	bhi.n	801c04e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801bfb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bfba:	1cd3      	adds	r3, r2, #3
 801bfbc:	b29b      	uxth	r3, r3
 801bfbe:	2b06      	cmp	r3, #6
 801bfc0:	d916      	bls.n	801bff0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801bfc2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c064 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bfc6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bfca:	f8cd c004 	str.w	ip, [sp, #4]
 801bfce:	f04f 0c00 	mov.w	ip, #0
 801bfd2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bfd6:	6900      	ldr	r0, [r0, #16]
 801bfd8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bfdc:	a901      	add	r1, sp, #4
 801bfde:	f88d c008 	strb.w	ip, [sp, #8]
 801bfe2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bfe6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bfea:	6803      	ldr	r3, [r0, #0]
 801bfec:	689b      	ldr	r3, [r3, #8]
 801bfee:	4798      	blx	r3
 801bff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bff4:	1cd3      	adds	r3, r2, #3
 801bff6:	b29b      	uxth	r3, r3
 801bff8:	2b06      	cmp	r3, #6
 801bffa:	d916      	bls.n	801c02a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bffc:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c064 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c000:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c004:	f8cd c004 	str.w	ip, [sp, #4]
 801c008:	f04f 0c01 	mov.w	ip, #1
 801c00c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c010:	6920      	ldr	r0, [r4, #16]
 801c012:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c016:	a901      	add	r1, sp, #4
 801c018:	f88d c008 	strb.w	ip, [sp, #8]
 801c01c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c020:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c024:	6803      	ldr	r3, [r0, #0]
 801c026:	689b      	ldr	r3, [r3, #8]
 801c028:	4798      	blx	r3
 801c02a:	4b0d      	ldr	r3, [pc, #52]	; (801c060 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c02c:	a901      	add	r1, sp, #4
 801c02e:	6920      	ldr	r0, [r4, #16]
 801c030:	9301      	str	r3, [sp, #4]
 801c032:	2300      	movs	r3, #0
 801c034:	f88d 5008 	strb.w	r5, [sp, #8]
 801c038:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c03c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c040:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c044:	6803      	ldr	r3, [r0, #0]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	4798      	blx	r3
 801c04a:	b005      	add	sp, #20
 801c04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c04e:	2900      	cmp	r1, #0
 801c050:	d1eb      	bne.n	801c02a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c052:	80a2      	strh	r2, [r4, #4]
 801c054:	80c6      	strh	r6, [r0, #6]
 801c056:	60a1      	str	r1, [r4, #8]
 801c058:	81a1      	strh	r1, [r4, #12]
 801c05a:	73a1      	strb	r1, [r4, #14]
 801c05c:	e7e5      	b.n	801c02a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c05e:	bf00      	nop
 801c060:	0801fa7c 	.word	0x0801fa7c
 801c064:	0801faa4 	.word	0x0801faa4

0801c068 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801c068:	790b      	ldrb	r3, [r1, #4]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	bf0c      	ite	eq
 801c06e:	2301      	moveq	r3, #1
 801c070:	2300      	movne	r3, #0
 801c072:	b570      	push	{r4, r5, r6, lr}
 801c074:	4604      	mov	r4, r0
 801c076:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c07a:	460e      	mov	r6, r1
 801c07c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801c080:	d109      	bne.n	801c096 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801c082:	b14d      	cbz	r5, 801c098 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801c084:	7933      	ldrb	r3, [r6, #4]
 801c086:	2b01      	cmp	r3, #1
 801c088:	d10c      	bne.n	801c0a4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c08a:	6823      	ldr	r3, [r4, #0]
 801c08c:	4620      	mov	r0, r4
 801c08e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c094:	4718      	bx	r3
 801c096:	b12d      	cbz	r5, 801c0a4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	4620      	mov	r0, r4
 801c09c:	695b      	ldr	r3, [r3, #20]
 801c09e:	4798      	blx	r3
 801c0a0:	2d00      	cmp	r5, #0
 801c0a2:	d1ef      	bne.n	801c084 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801c0a4:	bd70      	pop	{r4, r5, r6, pc}

0801c0a6 <__aeabi_atexit>:
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4601      	mov	r1, r0
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f000 b93a 	b.w	801c324 <__cxa_atexit>

0801c0b0 <_ZdlPvj>:
 801c0b0:	f000 b812 	b.w	801c0d8 <_ZdlPv>

0801c0b4 <__cxa_guard_acquire>:
 801c0b4:	6803      	ldr	r3, [r0, #0]
 801c0b6:	07db      	lsls	r3, r3, #31
 801c0b8:	d406      	bmi.n	801c0c8 <__cxa_guard_acquire+0x14>
 801c0ba:	7843      	ldrb	r3, [r0, #1]
 801c0bc:	b103      	cbz	r3, 801c0c0 <__cxa_guard_acquire+0xc>
 801c0be:	deff      	udf	#255	; 0xff
 801c0c0:	2301      	movs	r3, #1
 801c0c2:	7043      	strb	r3, [r0, #1]
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	4770      	bx	lr
 801c0c8:	2000      	movs	r0, #0
 801c0ca:	4770      	bx	lr

0801c0cc <__cxa_guard_release>:
 801c0cc:	2301      	movs	r3, #1
 801c0ce:	6003      	str	r3, [r0, #0]
 801c0d0:	4770      	bx	lr

0801c0d2 <__cxa_pure_virtual>:
 801c0d2:	b508      	push	{r3, lr}
 801c0d4:	f000 f80e 	bl	801c0f4 <_ZSt9terminatev>

0801c0d8 <_ZdlPv>:
 801c0d8:	f000 b976 	b.w	801c3c8 <free>

0801c0dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c0dc:	b508      	push	{r3, lr}
 801c0de:	4780      	blx	r0
 801c0e0:	f000 f8f4 	bl	801c2cc <abort>

0801c0e4 <_ZSt13get_terminatev>:
 801c0e4:	4b02      	ldr	r3, [pc, #8]	; (801c0f0 <_ZSt13get_terminatev+0xc>)
 801c0e6:	6818      	ldr	r0, [r3, #0]
 801c0e8:	f3bf 8f5b 	dmb	ish
 801c0ec:	4770      	bx	lr
 801c0ee:	bf00      	nop
 801c0f0:	240000dc 	.word	0x240000dc

0801c0f4 <_ZSt9terminatev>:
 801c0f4:	b508      	push	{r3, lr}
 801c0f6:	f7ff fff5 	bl	801c0e4 <_ZSt13get_terminatev>
 801c0fa:	f7ff ffef 	bl	801c0dc <_ZN10__cxxabiv111__terminateEPFvvE>

0801c0fe <sinf_poly>:
 801c0fe:	07cb      	lsls	r3, r1, #31
 801c100:	d412      	bmi.n	801c128 <sinf_poly+0x2a>
 801c102:	ee21 6b00 	vmul.f64	d6, d1, d0
 801c106:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801c10a:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801c10e:	eea5 7b01 	vfma.f64	d7, d5, d1
 801c112:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801c116:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c11a:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c11e:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c122:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c126:	4770      	bx	lr
 801c128:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801c12c:	ee21 6b01 	vmul.f64	d6, d1, d1
 801c130:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801c134:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801c138:	eea1 7b05 	vfma.f64	d7, d1, d5
 801c13c:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801c140:	eea1 0b05 	vfma.f64	d0, d1, d5
 801c144:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801c148:	ee21 1b06 	vmul.f64	d1, d1, d6
 801c14c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c150:	e7e5      	b.n	801c11e <sinf_poly+0x20>
 801c152:	0000      	movs	r0, r0
 801c154:	0000      	movs	r0, r0
	...

0801c158 <sinf>:
 801c158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c15a:	ee10 4a10 	vmov	r4, s0
 801c15e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c162:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801c166:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c16a:	eef0 7a40 	vmov.f32	s15, s0
 801c16e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c172:	d218      	bcs.n	801c1a6 <sinf+0x4e>
 801c174:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c178:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801c17c:	d20a      	bcs.n	801c194 <sinf+0x3c>
 801c17e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801c182:	d103      	bne.n	801c18c <sinf+0x34>
 801c184:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c188:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c18c:	eeb0 0a67 	vmov.f32	s0, s15
 801c190:	b003      	add	sp, #12
 801c192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c194:	483e      	ldr	r0, [pc, #248]	; (801c290 <sinf+0x138>)
 801c196:	eeb0 0b46 	vmov.f64	d0, d6
 801c19a:	2100      	movs	r1, #0
 801c19c:	b003      	add	sp, #12
 801c19e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c1a2:	f7ff bfac 	b.w	801c0fe <sinf_poly>
 801c1a6:	f240 422e 	movw	r2, #1070	; 0x42e
 801c1aa:	4293      	cmp	r3, r2
 801c1ac:	d824      	bhi.n	801c1f8 <sinf+0xa0>
 801c1ae:	4b38      	ldr	r3, [pc, #224]	; (801c290 <sinf+0x138>)
 801c1b0:	ed93 7b08 	vldr	d7, [r3, #32]
 801c1b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c1b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c1bc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801c1c0:	ee17 1a90 	vmov	r1, s15
 801c1c4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801c1c8:	1609      	asrs	r1, r1, #24
 801c1ca:	ee07 1a90 	vmov	s15, r1
 801c1ce:	f001 0203 	and.w	r2, r1, #3
 801c1d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c1d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c1da:	ed92 0b00 	vldr	d0, [r2]
 801c1de:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801c1e2:	f011 0f02 	tst.w	r1, #2
 801c1e6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c1ea:	bf08      	it	eq
 801c1ec:	4618      	moveq	r0, r3
 801c1ee:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c1f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c1f6:	e7d1      	b.n	801c19c <sinf+0x44>
 801c1f8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801c1fc:	d23d      	bcs.n	801c27a <sinf+0x122>
 801c1fe:	4b25      	ldr	r3, [pc, #148]	; (801c294 <sinf+0x13c>)
 801c200:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801c204:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801c208:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801c20c:	6a06      	ldr	r6, [r0, #32]
 801c20e:	6900      	ldr	r0, [r0, #16]
 801c210:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c214:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801c218:	40a9      	lsls	r1, r5
 801c21a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c21e:	fba1 6706 	umull	r6, r7, r1, r6
 801c222:	fb05 f301 	mul.w	r3, r5, r1
 801c226:	463a      	mov	r2, r7
 801c228:	fbe0 2301 	umlal	r2, r3, r0, r1
 801c22c:	1c11      	adds	r1, r2, #0
 801c22e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801c232:	2000      	movs	r0, #0
 801c234:	1a10      	subs	r0, r2, r0
 801c236:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801c23a:	eb63 0101 	sbc.w	r1, r3, r1
 801c23e:	f7e4 fa45 	bl	80006cc <__aeabi_l2d>
 801c242:	0fb5      	lsrs	r5, r6, #30
 801c244:	4a12      	ldr	r2, [pc, #72]	; (801c290 <sinf+0x138>)
 801c246:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801c24a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801c288 <sinf+0x130>
 801c24e:	ec41 0b17 	vmov	d7, r0, r1
 801c252:	f003 0103 	and.w	r1, r3, #3
 801c256:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c25a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c25e:	ed91 7b00 	vldr	d7, [r1]
 801c262:	ee20 1b00 	vmul.f64	d1, d0, d0
 801c266:	f013 0f02 	tst.w	r3, #2
 801c26a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801c26e:	4629      	mov	r1, r5
 801c270:	bf08      	it	eq
 801c272:	4610      	moveq	r0, r2
 801c274:	ee27 0b00 	vmul.f64	d0, d7, d0
 801c278:	e790      	b.n	801c19c <sinf+0x44>
 801c27a:	b003      	add	sp, #12
 801c27c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c280:	f000 b815 	b.w	801c2ae <__math_invalidf>
 801c284:	f3af 8000 	nop.w
 801c288:	54442d18 	.word	0x54442d18
 801c28c:	3c1921fb 	.word	0x3c1921fb
 801c290:	08020d60 	.word	0x08020d60
 801c294:	08020d00 	.word	0x08020d00

0801c298 <with_errnof>:
 801c298:	b513      	push	{r0, r1, r4, lr}
 801c29a:	4604      	mov	r4, r0
 801c29c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801c2a0:	f000 f84e 	bl	801c340 <__errno>
 801c2a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c2a8:	6004      	str	r4, [r0, #0]
 801c2aa:	b002      	add	sp, #8
 801c2ac:	bd10      	pop	{r4, pc}

0801c2ae <__math_invalidf>:
 801c2ae:	eef0 7a40 	vmov.f32	s15, s0
 801c2b2:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c2b6:	eef4 7a67 	vcmp.f32	s15, s15
 801c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2be:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c2c2:	d602      	bvs.n	801c2ca <__math_invalidf+0x1c>
 801c2c4:	2021      	movs	r0, #33	; 0x21
 801c2c6:	f7ff bfe7 	b.w	801c298 <with_errnof>
 801c2ca:	4770      	bx	lr

0801c2cc <abort>:
 801c2cc:	b508      	push	{r3, lr}
 801c2ce:	2006      	movs	r0, #6
 801c2d0:	f000 fc68 	bl	801cba4 <raise>
 801c2d4:	2001      	movs	r0, #1
 801c2d6:	f7e5 fcf9 	bl	8001ccc <_exit>
	...

0801c2dc <__assert_func>:
 801c2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2de:	4614      	mov	r4, r2
 801c2e0:	461a      	mov	r2, r3
 801c2e2:	4b09      	ldr	r3, [pc, #36]	; (801c308 <__assert_func+0x2c>)
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	4605      	mov	r5, r0
 801c2e8:	68d8      	ldr	r0, [r3, #12]
 801c2ea:	b14c      	cbz	r4, 801c300 <__assert_func+0x24>
 801c2ec:	4b07      	ldr	r3, [pc, #28]	; (801c30c <__assert_func+0x30>)
 801c2ee:	9100      	str	r1, [sp, #0]
 801c2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2f4:	4906      	ldr	r1, [pc, #24]	; (801c310 <__assert_func+0x34>)
 801c2f6:	462b      	mov	r3, r5
 801c2f8:	f000 f828 	bl	801c34c <fiprintf>
 801c2fc:	f7ff ffe6 	bl	801c2cc <abort>
 801c300:	4b04      	ldr	r3, [pc, #16]	; (801c314 <__assert_func+0x38>)
 801c302:	461c      	mov	r4, r3
 801c304:	e7f3      	b.n	801c2ee <__assert_func+0x12>
 801c306:	bf00      	nop
 801c308:	240000e0 	.word	0x240000e0
 801c30c:	08020e40 	.word	0x08020e40
 801c310:	08020e4d 	.word	0x08020e4d
 801c314:	08020e7b 	.word	0x08020e7b

0801c318 <atexit>:
 801c318:	2300      	movs	r3, #0
 801c31a:	4601      	mov	r1, r0
 801c31c:	461a      	mov	r2, r3
 801c31e:	4618      	mov	r0, r3
 801c320:	f000 bd1c 	b.w	801cd5c <__register_exitproc>

0801c324 <__cxa_atexit>:
 801c324:	b510      	push	{r4, lr}
 801c326:	4c05      	ldr	r4, [pc, #20]	; (801c33c <__cxa_atexit+0x18>)
 801c328:	4613      	mov	r3, r2
 801c32a:	b12c      	cbz	r4, 801c338 <__cxa_atexit+0x14>
 801c32c:	460a      	mov	r2, r1
 801c32e:	4601      	mov	r1, r0
 801c330:	2002      	movs	r0, #2
 801c332:	f000 fd13 	bl	801cd5c <__register_exitproc>
 801c336:	bd10      	pop	{r4, pc}
 801c338:	4620      	mov	r0, r4
 801c33a:	e7fc      	b.n	801c336 <__cxa_atexit+0x12>
 801c33c:	0801cd5d 	.word	0x0801cd5d

0801c340 <__errno>:
 801c340:	4b01      	ldr	r3, [pc, #4]	; (801c348 <__errno+0x8>)
 801c342:	6818      	ldr	r0, [r3, #0]
 801c344:	4770      	bx	lr
 801c346:	bf00      	nop
 801c348:	240000e0 	.word	0x240000e0

0801c34c <fiprintf>:
 801c34c:	b40e      	push	{r1, r2, r3}
 801c34e:	b503      	push	{r0, r1, lr}
 801c350:	4601      	mov	r1, r0
 801c352:	ab03      	add	r3, sp, #12
 801c354:	4805      	ldr	r0, [pc, #20]	; (801c36c <fiprintf+0x20>)
 801c356:	f853 2b04 	ldr.w	r2, [r3], #4
 801c35a:	6800      	ldr	r0, [r0, #0]
 801c35c:	9301      	str	r3, [sp, #4]
 801c35e:	f000 f925 	bl	801c5ac <_vfiprintf_r>
 801c362:	b002      	add	sp, #8
 801c364:	f85d eb04 	ldr.w	lr, [sp], #4
 801c368:	b003      	add	sp, #12
 801c36a:	4770      	bx	lr
 801c36c:	240000e0 	.word	0x240000e0

0801c370 <__libc_init_array>:
 801c370:	b570      	push	{r4, r5, r6, lr}
 801c372:	4d0d      	ldr	r5, [pc, #52]	; (801c3a8 <__libc_init_array+0x38>)
 801c374:	4c0d      	ldr	r4, [pc, #52]	; (801c3ac <__libc_init_array+0x3c>)
 801c376:	1b64      	subs	r4, r4, r5
 801c378:	10a4      	asrs	r4, r4, #2
 801c37a:	2600      	movs	r6, #0
 801c37c:	42a6      	cmp	r6, r4
 801c37e:	d109      	bne.n	801c394 <__libc_init_array+0x24>
 801c380:	4d0b      	ldr	r5, [pc, #44]	; (801c3b0 <__libc_init_array+0x40>)
 801c382:	4c0c      	ldr	r4, [pc, #48]	; (801c3b4 <__libc_init_array+0x44>)
 801c384:	f001 f824 	bl	801d3d0 <_init>
 801c388:	1b64      	subs	r4, r4, r5
 801c38a:	10a4      	asrs	r4, r4, #2
 801c38c:	2600      	movs	r6, #0
 801c38e:	42a6      	cmp	r6, r4
 801c390:	d105      	bne.n	801c39e <__libc_init_array+0x2e>
 801c392:	bd70      	pop	{r4, r5, r6, pc}
 801c394:	f855 3b04 	ldr.w	r3, [r5], #4
 801c398:	4798      	blx	r3
 801c39a:	3601      	adds	r6, #1
 801c39c:	e7ee      	b.n	801c37c <__libc_init_array+0xc>
 801c39e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c3a2:	4798      	blx	r3
 801c3a4:	3601      	adds	r6, #1
 801c3a6:	e7f2      	b.n	801c38e <__libc_init_array+0x1e>
 801c3a8:	08022238 	.word	0x08022238
 801c3ac:	08022238 	.word	0x08022238
 801c3b0:	08022238 	.word	0x08022238
 801c3b4:	0802224c 	.word	0x0802224c

0801c3b8 <malloc>:
 801c3b8:	4b02      	ldr	r3, [pc, #8]	; (801c3c4 <malloc+0xc>)
 801c3ba:	4601      	mov	r1, r0
 801c3bc:	6818      	ldr	r0, [r3, #0]
 801c3be:	f000 b871 	b.w	801c4a4 <_malloc_r>
 801c3c2:	bf00      	nop
 801c3c4:	240000e0 	.word	0x240000e0

0801c3c8 <free>:
 801c3c8:	4b02      	ldr	r3, [pc, #8]	; (801c3d4 <free+0xc>)
 801c3ca:	4601      	mov	r1, r0
 801c3cc:	6818      	ldr	r0, [r3, #0]
 801c3ce:	f000 b819 	b.w	801c404 <_free_r>
 801c3d2:	bf00      	nop
 801c3d4:	240000e0 	.word	0x240000e0

0801c3d8 <memcpy>:
 801c3d8:	440a      	add	r2, r1
 801c3da:	4291      	cmp	r1, r2
 801c3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801c3e0:	d100      	bne.n	801c3e4 <memcpy+0xc>
 801c3e2:	4770      	bx	lr
 801c3e4:	b510      	push	{r4, lr}
 801c3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c3ee:	4291      	cmp	r1, r2
 801c3f0:	d1f9      	bne.n	801c3e6 <memcpy+0xe>
 801c3f2:	bd10      	pop	{r4, pc}

0801c3f4 <memset>:
 801c3f4:	4402      	add	r2, r0
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	4293      	cmp	r3, r2
 801c3fa:	d100      	bne.n	801c3fe <memset+0xa>
 801c3fc:	4770      	bx	lr
 801c3fe:	f803 1b01 	strb.w	r1, [r3], #1
 801c402:	e7f9      	b.n	801c3f8 <memset+0x4>

0801c404 <_free_r>:
 801c404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c406:	2900      	cmp	r1, #0
 801c408:	d048      	beq.n	801c49c <_free_r+0x98>
 801c40a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c40e:	9001      	str	r0, [sp, #4]
 801c410:	2b00      	cmp	r3, #0
 801c412:	f1a1 0404 	sub.w	r4, r1, #4
 801c416:	bfb8      	it	lt
 801c418:	18e4      	addlt	r4, r4, r3
 801c41a:	f000 ff21 	bl	801d260 <__malloc_lock>
 801c41e:	4a20      	ldr	r2, [pc, #128]	; (801c4a0 <_free_r+0x9c>)
 801c420:	9801      	ldr	r0, [sp, #4]
 801c422:	6813      	ldr	r3, [r2, #0]
 801c424:	4615      	mov	r5, r2
 801c426:	b933      	cbnz	r3, 801c436 <_free_r+0x32>
 801c428:	6063      	str	r3, [r4, #4]
 801c42a:	6014      	str	r4, [r2, #0]
 801c42c:	b003      	add	sp, #12
 801c42e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c432:	f000 bf1b 	b.w	801d26c <__malloc_unlock>
 801c436:	42a3      	cmp	r3, r4
 801c438:	d90b      	bls.n	801c452 <_free_r+0x4e>
 801c43a:	6821      	ldr	r1, [r4, #0]
 801c43c:	1862      	adds	r2, r4, r1
 801c43e:	4293      	cmp	r3, r2
 801c440:	bf04      	itt	eq
 801c442:	681a      	ldreq	r2, [r3, #0]
 801c444:	685b      	ldreq	r3, [r3, #4]
 801c446:	6063      	str	r3, [r4, #4]
 801c448:	bf04      	itt	eq
 801c44a:	1852      	addeq	r2, r2, r1
 801c44c:	6022      	streq	r2, [r4, #0]
 801c44e:	602c      	str	r4, [r5, #0]
 801c450:	e7ec      	b.n	801c42c <_free_r+0x28>
 801c452:	461a      	mov	r2, r3
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	b10b      	cbz	r3, 801c45c <_free_r+0x58>
 801c458:	42a3      	cmp	r3, r4
 801c45a:	d9fa      	bls.n	801c452 <_free_r+0x4e>
 801c45c:	6811      	ldr	r1, [r2, #0]
 801c45e:	1855      	adds	r5, r2, r1
 801c460:	42a5      	cmp	r5, r4
 801c462:	d10b      	bne.n	801c47c <_free_r+0x78>
 801c464:	6824      	ldr	r4, [r4, #0]
 801c466:	4421      	add	r1, r4
 801c468:	1854      	adds	r4, r2, r1
 801c46a:	42a3      	cmp	r3, r4
 801c46c:	6011      	str	r1, [r2, #0]
 801c46e:	d1dd      	bne.n	801c42c <_free_r+0x28>
 801c470:	681c      	ldr	r4, [r3, #0]
 801c472:	685b      	ldr	r3, [r3, #4]
 801c474:	6053      	str	r3, [r2, #4]
 801c476:	4421      	add	r1, r4
 801c478:	6011      	str	r1, [r2, #0]
 801c47a:	e7d7      	b.n	801c42c <_free_r+0x28>
 801c47c:	d902      	bls.n	801c484 <_free_r+0x80>
 801c47e:	230c      	movs	r3, #12
 801c480:	6003      	str	r3, [r0, #0]
 801c482:	e7d3      	b.n	801c42c <_free_r+0x28>
 801c484:	6825      	ldr	r5, [r4, #0]
 801c486:	1961      	adds	r1, r4, r5
 801c488:	428b      	cmp	r3, r1
 801c48a:	bf04      	itt	eq
 801c48c:	6819      	ldreq	r1, [r3, #0]
 801c48e:	685b      	ldreq	r3, [r3, #4]
 801c490:	6063      	str	r3, [r4, #4]
 801c492:	bf04      	itt	eq
 801c494:	1949      	addeq	r1, r1, r5
 801c496:	6021      	streq	r1, [r4, #0]
 801c498:	6054      	str	r4, [r2, #4]
 801c49a:	e7c7      	b.n	801c42c <_free_r+0x28>
 801c49c:	b003      	add	sp, #12
 801c49e:	bd30      	pop	{r4, r5, pc}
 801c4a0:	24006d48 	.word	0x24006d48

0801c4a4 <_malloc_r>:
 801c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4a6:	1ccd      	adds	r5, r1, #3
 801c4a8:	f025 0503 	bic.w	r5, r5, #3
 801c4ac:	3508      	adds	r5, #8
 801c4ae:	2d0c      	cmp	r5, #12
 801c4b0:	bf38      	it	cc
 801c4b2:	250c      	movcc	r5, #12
 801c4b4:	2d00      	cmp	r5, #0
 801c4b6:	4606      	mov	r6, r0
 801c4b8:	db01      	blt.n	801c4be <_malloc_r+0x1a>
 801c4ba:	42a9      	cmp	r1, r5
 801c4bc:	d903      	bls.n	801c4c6 <_malloc_r+0x22>
 801c4be:	230c      	movs	r3, #12
 801c4c0:	6033      	str	r3, [r6, #0]
 801c4c2:	2000      	movs	r0, #0
 801c4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4c6:	f000 fecb 	bl	801d260 <__malloc_lock>
 801c4ca:	4921      	ldr	r1, [pc, #132]	; (801c550 <_malloc_r+0xac>)
 801c4cc:	680a      	ldr	r2, [r1, #0]
 801c4ce:	4614      	mov	r4, r2
 801c4d0:	b99c      	cbnz	r4, 801c4fa <_malloc_r+0x56>
 801c4d2:	4f20      	ldr	r7, [pc, #128]	; (801c554 <_malloc_r+0xb0>)
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	b923      	cbnz	r3, 801c4e2 <_malloc_r+0x3e>
 801c4d8:	4621      	mov	r1, r4
 801c4da:	4630      	mov	r0, r6
 801c4dc:	f000 fb2a 	bl	801cb34 <_sbrk_r>
 801c4e0:	6038      	str	r0, [r7, #0]
 801c4e2:	4629      	mov	r1, r5
 801c4e4:	4630      	mov	r0, r6
 801c4e6:	f000 fb25 	bl	801cb34 <_sbrk_r>
 801c4ea:	1c43      	adds	r3, r0, #1
 801c4ec:	d123      	bne.n	801c536 <_malloc_r+0x92>
 801c4ee:	230c      	movs	r3, #12
 801c4f0:	6033      	str	r3, [r6, #0]
 801c4f2:	4630      	mov	r0, r6
 801c4f4:	f000 feba 	bl	801d26c <__malloc_unlock>
 801c4f8:	e7e3      	b.n	801c4c2 <_malloc_r+0x1e>
 801c4fa:	6823      	ldr	r3, [r4, #0]
 801c4fc:	1b5b      	subs	r3, r3, r5
 801c4fe:	d417      	bmi.n	801c530 <_malloc_r+0x8c>
 801c500:	2b0b      	cmp	r3, #11
 801c502:	d903      	bls.n	801c50c <_malloc_r+0x68>
 801c504:	6023      	str	r3, [r4, #0]
 801c506:	441c      	add	r4, r3
 801c508:	6025      	str	r5, [r4, #0]
 801c50a:	e004      	b.n	801c516 <_malloc_r+0x72>
 801c50c:	6863      	ldr	r3, [r4, #4]
 801c50e:	42a2      	cmp	r2, r4
 801c510:	bf0c      	ite	eq
 801c512:	600b      	streq	r3, [r1, #0]
 801c514:	6053      	strne	r3, [r2, #4]
 801c516:	4630      	mov	r0, r6
 801c518:	f000 fea8 	bl	801d26c <__malloc_unlock>
 801c51c:	f104 000b 	add.w	r0, r4, #11
 801c520:	1d23      	adds	r3, r4, #4
 801c522:	f020 0007 	bic.w	r0, r0, #7
 801c526:	1ac2      	subs	r2, r0, r3
 801c528:	d0cc      	beq.n	801c4c4 <_malloc_r+0x20>
 801c52a:	1a1b      	subs	r3, r3, r0
 801c52c:	50a3      	str	r3, [r4, r2]
 801c52e:	e7c9      	b.n	801c4c4 <_malloc_r+0x20>
 801c530:	4622      	mov	r2, r4
 801c532:	6864      	ldr	r4, [r4, #4]
 801c534:	e7cc      	b.n	801c4d0 <_malloc_r+0x2c>
 801c536:	1cc4      	adds	r4, r0, #3
 801c538:	f024 0403 	bic.w	r4, r4, #3
 801c53c:	42a0      	cmp	r0, r4
 801c53e:	d0e3      	beq.n	801c508 <_malloc_r+0x64>
 801c540:	1a21      	subs	r1, r4, r0
 801c542:	4630      	mov	r0, r6
 801c544:	f000 faf6 	bl	801cb34 <_sbrk_r>
 801c548:	3001      	adds	r0, #1
 801c54a:	d1dd      	bne.n	801c508 <_malloc_r+0x64>
 801c54c:	e7cf      	b.n	801c4ee <_malloc_r+0x4a>
 801c54e:	bf00      	nop
 801c550:	24006d48 	.word	0x24006d48
 801c554:	24006d4c 	.word	0x24006d4c

0801c558 <__sfputc_r>:
 801c558:	6893      	ldr	r3, [r2, #8]
 801c55a:	3b01      	subs	r3, #1
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	b410      	push	{r4}
 801c560:	6093      	str	r3, [r2, #8]
 801c562:	da08      	bge.n	801c576 <__sfputc_r+0x1e>
 801c564:	6994      	ldr	r4, [r2, #24]
 801c566:	42a3      	cmp	r3, r4
 801c568:	db01      	blt.n	801c56e <__sfputc_r+0x16>
 801c56a:	290a      	cmp	r1, #10
 801c56c:	d103      	bne.n	801c576 <__sfputc_r+0x1e>
 801c56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c572:	f000 bb33 	b.w	801cbdc <__swbuf_r>
 801c576:	6813      	ldr	r3, [r2, #0]
 801c578:	1c58      	adds	r0, r3, #1
 801c57a:	6010      	str	r0, [r2, #0]
 801c57c:	7019      	strb	r1, [r3, #0]
 801c57e:	4608      	mov	r0, r1
 801c580:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c584:	4770      	bx	lr

0801c586 <__sfputs_r>:
 801c586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c588:	4606      	mov	r6, r0
 801c58a:	460f      	mov	r7, r1
 801c58c:	4614      	mov	r4, r2
 801c58e:	18d5      	adds	r5, r2, r3
 801c590:	42ac      	cmp	r4, r5
 801c592:	d101      	bne.n	801c598 <__sfputs_r+0x12>
 801c594:	2000      	movs	r0, #0
 801c596:	e007      	b.n	801c5a8 <__sfputs_r+0x22>
 801c598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c59c:	463a      	mov	r2, r7
 801c59e:	4630      	mov	r0, r6
 801c5a0:	f7ff ffda 	bl	801c558 <__sfputc_r>
 801c5a4:	1c43      	adds	r3, r0, #1
 801c5a6:	d1f3      	bne.n	801c590 <__sfputs_r+0xa>
 801c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c5ac <_vfiprintf_r>:
 801c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b0:	460d      	mov	r5, r1
 801c5b2:	b09d      	sub	sp, #116	; 0x74
 801c5b4:	4614      	mov	r4, r2
 801c5b6:	4698      	mov	r8, r3
 801c5b8:	4606      	mov	r6, r0
 801c5ba:	b118      	cbz	r0, 801c5c4 <_vfiprintf_r+0x18>
 801c5bc:	6983      	ldr	r3, [r0, #24]
 801c5be:	b90b      	cbnz	r3, 801c5c4 <_vfiprintf_r+0x18>
 801c5c0:	f000 fd48 	bl	801d054 <__sinit>
 801c5c4:	4b89      	ldr	r3, [pc, #548]	; (801c7ec <_vfiprintf_r+0x240>)
 801c5c6:	429d      	cmp	r5, r3
 801c5c8:	d11b      	bne.n	801c602 <_vfiprintf_r+0x56>
 801c5ca:	6875      	ldr	r5, [r6, #4]
 801c5cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5ce:	07d9      	lsls	r1, r3, #31
 801c5d0:	d405      	bmi.n	801c5de <_vfiprintf_r+0x32>
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	059a      	lsls	r2, r3, #22
 801c5d6:	d402      	bmi.n	801c5de <_vfiprintf_r+0x32>
 801c5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5da:	f000 fdd9 	bl	801d190 <__retarget_lock_acquire_recursive>
 801c5de:	89ab      	ldrh	r3, [r5, #12]
 801c5e0:	071b      	lsls	r3, r3, #28
 801c5e2:	d501      	bpl.n	801c5e8 <_vfiprintf_r+0x3c>
 801c5e4:	692b      	ldr	r3, [r5, #16]
 801c5e6:	b9eb      	cbnz	r3, 801c624 <_vfiprintf_r+0x78>
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	4630      	mov	r0, r6
 801c5ec:	f000 fb48 	bl	801cc80 <__swsetup_r>
 801c5f0:	b1c0      	cbz	r0, 801c624 <_vfiprintf_r+0x78>
 801c5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5f4:	07dc      	lsls	r4, r3, #31
 801c5f6:	d50e      	bpl.n	801c616 <_vfiprintf_r+0x6a>
 801c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5fc:	b01d      	add	sp, #116	; 0x74
 801c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c602:	4b7b      	ldr	r3, [pc, #492]	; (801c7f0 <_vfiprintf_r+0x244>)
 801c604:	429d      	cmp	r5, r3
 801c606:	d101      	bne.n	801c60c <_vfiprintf_r+0x60>
 801c608:	68b5      	ldr	r5, [r6, #8]
 801c60a:	e7df      	b.n	801c5cc <_vfiprintf_r+0x20>
 801c60c:	4b79      	ldr	r3, [pc, #484]	; (801c7f4 <_vfiprintf_r+0x248>)
 801c60e:	429d      	cmp	r5, r3
 801c610:	bf08      	it	eq
 801c612:	68f5      	ldreq	r5, [r6, #12]
 801c614:	e7da      	b.n	801c5cc <_vfiprintf_r+0x20>
 801c616:	89ab      	ldrh	r3, [r5, #12]
 801c618:	0598      	lsls	r0, r3, #22
 801c61a:	d4ed      	bmi.n	801c5f8 <_vfiprintf_r+0x4c>
 801c61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c61e:	f000 fdb9 	bl	801d194 <__retarget_lock_release_recursive>
 801c622:	e7e9      	b.n	801c5f8 <_vfiprintf_r+0x4c>
 801c624:	2300      	movs	r3, #0
 801c626:	9309      	str	r3, [sp, #36]	; 0x24
 801c628:	2320      	movs	r3, #32
 801c62a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c62e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c632:	2330      	movs	r3, #48	; 0x30
 801c634:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c7f8 <_vfiprintf_r+0x24c>
 801c638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c63c:	f04f 0901 	mov.w	r9, #1
 801c640:	4623      	mov	r3, r4
 801c642:	469a      	mov	sl, r3
 801c644:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c648:	b10a      	cbz	r2, 801c64e <_vfiprintf_r+0xa2>
 801c64a:	2a25      	cmp	r2, #37	; 0x25
 801c64c:	d1f9      	bne.n	801c642 <_vfiprintf_r+0x96>
 801c64e:	ebba 0b04 	subs.w	fp, sl, r4
 801c652:	d00b      	beq.n	801c66c <_vfiprintf_r+0xc0>
 801c654:	465b      	mov	r3, fp
 801c656:	4622      	mov	r2, r4
 801c658:	4629      	mov	r1, r5
 801c65a:	4630      	mov	r0, r6
 801c65c:	f7ff ff93 	bl	801c586 <__sfputs_r>
 801c660:	3001      	adds	r0, #1
 801c662:	f000 80aa 	beq.w	801c7ba <_vfiprintf_r+0x20e>
 801c666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c668:	445a      	add	r2, fp
 801c66a:	9209      	str	r2, [sp, #36]	; 0x24
 801c66c:	f89a 3000 	ldrb.w	r3, [sl]
 801c670:	2b00      	cmp	r3, #0
 801c672:	f000 80a2 	beq.w	801c7ba <_vfiprintf_r+0x20e>
 801c676:	2300      	movs	r3, #0
 801c678:	f04f 32ff 	mov.w	r2, #4294967295
 801c67c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c680:	f10a 0a01 	add.w	sl, sl, #1
 801c684:	9304      	str	r3, [sp, #16]
 801c686:	9307      	str	r3, [sp, #28]
 801c688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c68c:	931a      	str	r3, [sp, #104]	; 0x68
 801c68e:	4654      	mov	r4, sl
 801c690:	2205      	movs	r2, #5
 801c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c696:	4858      	ldr	r0, [pc, #352]	; (801c7f8 <_vfiprintf_r+0x24c>)
 801c698:	f7e3 fe3a 	bl	8000310 <memchr>
 801c69c:	9a04      	ldr	r2, [sp, #16]
 801c69e:	b9d8      	cbnz	r0, 801c6d8 <_vfiprintf_r+0x12c>
 801c6a0:	06d1      	lsls	r1, r2, #27
 801c6a2:	bf44      	itt	mi
 801c6a4:	2320      	movmi	r3, #32
 801c6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6aa:	0713      	lsls	r3, r2, #28
 801c6ac:	bf44      	itt	mi
 801c6ae:	232b      	movmi	r3, #43	; 0x2b
 801c6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 801c6b8:	2b2a      	cmp	r3, #42	; 0x2a
 801c6ba:	d015      	beq.n	801c6e8 <_vfiprintf_r+0x13c>
 801c6bc:	9a07      	ldr	r2, [sp, #28]
 801c6be:	4654      	mov	r4, sl
 801c6c0:	2000      	movs	r0, #0
 801c6c2:	f04f 0c0a 	mov.w	ip, #10
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6cc:	3b30      	subs	r3, #48	; 0x30
 801c6ce:	2b09      	cmp	r3, #9
 801c6d0:	d94e      	bls.n	801c770 <_vfiprintf_r+0x1c4>
 801c6d2:	b1b0      	cbz	r0, 801c702 <_vfiprintf_r+0x156>
 801c6d4:	9207      	str	r2, [sp, #28]
 801c6d6:	e014      	b.n	801c702 <_vfiprintf_r+0x156>
 801c6d8:	eba0 0308 	sub.w	r3, r0, r8
 801c6dc:	fa09 f303 	lsl.w	r3, r9, r3
 801c6e0:	4313      	orrs	r3, r2
 801c6e2:	9304      	str	r3, [sp, #16]
 801c6e4:	46a2      	mov	sl, r4
 801c6e6:	e7d2      	b.n	801c68e <_vfiprintf_r+0xe2>
 801c6e8:	9b03      	ldr	r3, [sp, #12]
 801c6ea:	1d19      	adds	r1, r3, #4
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	9103      	str	r1, [sp, #12]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	bfbb      	ittet	lt
 801c6f4:	425b      	neglt	r3, r3
 801c6f6:	f042 0202 	orrlt.w	r2, r2, #2
 801c6fa:	9307      	strge	r3, [sp, #28]
 801c6fc:	9307      	strlt	r3, [sp, #28]
 801c6fe:	bfb8      	it	lt
 801c700:	9204      	strlt	r2, [sp, #16]
 801c702:	7823      	ldrb	r3, [r4, #0]
 801c704:	2b2e      	cmp	r3, #46	; 0x2e
 801c706:	d10c      	bne.n	801c722 <_vfiprintf_r+0x176>
 801c708:	7863      	ldrb	r3, [r4, #1]
 801c70a:	2b2a      	cmp	r3, #42	; 0x2a
 801c70c:	d135      	bne.n	801c77a <_vfiprintf_r+0x1ce>
 801c70e:	9b03      	ldr	r3, [sp, #12]
 801c710:	1d1a      	adds	r2, r3, #4
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	9203      	str	r2, [sp, #12]
 801c716:	2b00      	cmp	r3, #0
 801c718:	bfb8      	it	lt
 801c71a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c71e:	3402      	adds	r4, #2
 801c720:	9305      	str	r3, [sp, #20]
 801c722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c808 <_vfiprintf_r+0x25c>
 801c726:	7821      	ldrb	r1, [r4, #0]
 801c728:	2203      	movs	r2, #3
 801c72a:	4650      	mov	r0, sl
 801c72c:	f7e3 fdf0 	bl	8000310 <memchr>
 801c730:	b140      	cbz	r0, 801c744 <_vfiprintf_r+0x198>
 801c732:	2340      	movs	r3, #64	; 0x40
 801c734:	eba0 000a 	sub.w	r0, r0, sl
 801c738:	fa03 f000 	lsl.w	r0, r3, r0
 801c73c:	9b04      	ldr	r3, [sp, #16]
 801c73e:	4303      	orrs	r3, r0
 801c740:	3401      	adds	r4, #1
 801c742:	9304      	str	r3, [sp, #16]
 801c744:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c748:	482c      	ldr	r0, [pc, #176]	; (801c7fc <_vfiprintf_r+0x250>)
 801c74a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c74e:	2206      	movs	r2, #6
 801c750:	f7e3 fdde 	bl	8000310 <memchr>
 801c754:	2800      	cmp	r0, #0
 801c756:	d03f      	beq.n	801c7d8 <_vfiprintf_r+0x22c>
 801c758:	4b29      	ldr	r3, [pc, #164]	; (801c800 <_vfiprintf_r+0x254>)
 801c75a:	bb1b      	cbnz	r3, 801c7a4 <_vfiprintf_r+0x1f8>
 801c75c:	9b03      	ldr	r3, [sp, #12]
 801c75e:	3307      	adds	r3, #7
 801c760:	f023 0307 	bic.w	r3, r3, #7
 801c764:	3308      	adds	r3, #8
 801c766:	9303      	str	r3, [sp, #12]
 801c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c76a:	443b      	add	r3, r7
 801c76c:	9309      	str	r3, [sp, #36]	; 0x24
 801c76e:	e767      	b.n	801c640 <_vfiprintf_r+0x94>
 801c770:	fb0c 3202 	mla	r2, ip, r2, r3
 801c774:	460c      	mov	r4, r1
 801c776:	2001      	movs	r0, #1
 801c778:	e7a5      	b.n	801c6c6 <_vfiprintf_r+0x11a>
 801c77a:	2300      	movs	r3, #0
 801c77c:	3401      	adds	r4, #1
 801c77e:	9305      	str	r3, [sp, #20]
 801c780:	4619      	mov	r1, r3
 801c782:	f04f 0c0a 	mov.w	ip, #10
 801c786:	4620      	mov	r0, r4
 801c788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c78c:	3a30      	subs	r2, #48	; 0x30
 801c78e:	2a09      	cmp	r2, #9
 801c790:	d903      	bls.n	801c79a <_vfiprintf_r+0x1ee>
 801c792:	2b00      	cmp	r3, #0
 801c794:	d0c5      	beq.n	801c722 <_vfiprintf_r+0x176>
 801c796:	9105      	str	r1, [sp, #20]
 801c798:	e7c3      	b.n	801c722 <_vfiprintf_r+0x176>
 801c79a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c79e:	4604      	mov	r4, r0
 801c7a0:	2301      	movs	r3, #1
 801c7a2:	e7f0      	b.n	801c786 <_vfiprintf_r+0x1da>
 801c7a4:	ab03      	add	r3, sp, #12
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	462a      	mov	r2, r5
 801c7aa:	4b16      	ldr	r3, [pc, #88]	; (801c804 <_vfiprintf_r+0x258>)
 801c7ac:	a904      	add	r1, sp, #16
 801c7ae:	4630      	mov	r0, r6
 801c7b0:	f3af 8000 	nop.w
 801c7b4:	4607      	mov	r7, r0
 801c7b6:	1c78      	adds	r0, r7, #1
 801c7b8:	d1d6      	bne.n	801c768 <_vfiprintf_r+0x1bc>
 801c7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c7bc:	07d9      	lsls	r1, r3, #31
 801c7be:	d405      	bmi.n	801c7cc <_vfiprintf_r+0x220>
 801c7c0:	89ab      	ldrh	r3, [r5, #12]
 801c7c2:	059a      	lsls	r2, r3, #22
 801c7c4:	d402      	bmi.n	801c7cc <_vfiprintf_r+0x220>
 801c7c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7c8:	f000 fce4 	bl	801d194 <__retarget_lock_release_recursive>
 801c7cc:	89ab      	ldrh	r3, [r5, #12]
 801c7ce:	065b      	lsls	r3, r3, #25
 801c7d0:	f53f af12 	bmi.w	801c5f8 <_vfiprintf_r+0x4c>
 801c7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7d6:	e711      	b.n	801c5fc <_vfiprintf_r+0x50>
 801c7d8:	ab03      	add	r3, sp, #12
 801c7da:	9300      	str	r3, [sp, #0]
 801c7dc:	462a      	mov	r2, r5
 801c7de:	4b09      	ldr	r3, [pc, #36]	; (801c804 <_vfiprintf_r+0x258>)
 801c7e0:	a904      	add	r1, sp, #16
 801c7e2:	4630      	mov	r0, r6
 801c7e4:	f000 f880 	bl	801c8e8 <_printf_i>
 801c7e8:	e7e4      	b.n	801c7b4 <_vfiprintf_r+0x208>
 801c7ea:	bf00      	nop
 801c7ec:	08020ed8 	.word	0x08020ed8
 801c7f0:	08020ef8 	.word	0x08020ef8
 801c7f4:	08020eb8 	.word	0x08020eb8
 801c7f8:	08020e80 	.word	0x08020e80
 801c7fc:	08020e8a 	.word	0x08020e8a
 801c800:	00000000 	.word	0x00000000
 801c804:	0801c587 	.word	0x0801c587
 801c808:	08020e86 	.word	0x08020e86

0801c80c <_printf_common>:
 801c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c810:	4616      	mov	r6, r2
 801c812:	4699      	mov	r9, r3
 801c814:	688a      	ldr	r2, [r1, #8]
 801c816:	690b      	ldr	r3, [r1, #16]
 801c818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c81c:	4293      	cmp	r3, r2
 801c81e:	bfb8      	it	lt
 801c820:	4613      	movlt	r3, r2
 801c822:	6033      	str	r3, [r6, #0]
 801c824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c828:	4607      	mov	r7, r0
 801c82a:	460c      	mov	r4, r1
 801c82c:	b10a      	cbz	r2, 801c832 <_printf_common+0x26>
 801c82e:	3301      	adds	r3, #1
 801c830:	6033      	str	r3, [r6, #0]
 801c832:	6823      	ldr	r3, [r4, #0]
 801c834:	0699      	lsls	r1, r3, #26
 801c836:	bf42      	ittt	mi
 801c838:	6833      	ldrmi	r3, [r6, #0]
 801c83a:	3302      	addmi	r3, #2
 801c83c:	6033      	strmi	r3, [r6, #0]
 801c83e:	6825      	ldr	r5, [r4, #0]
 801c840:	f015 0506 	ands.w	r5, r5, #6
 801c844:	d106      	bne.n	801c854 <_printf_common+0x48>
 801c846:	f104 0a19 	add.w	sl, r4, #25
 801c84a:	68e3      	ldr	r3, [r4, #12]
 801c84c:	6832      	ldr	r2, [r6, #0]
 801c84e:	1a9b      	subs	r3, r3, r2
 801c850:	42ab      	cmp	r3, r5
 801c852:	dc26      	bgt.n	801c8a2 <_printf_common+0x96>
 801c854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c858:	1e13      	subs	r3, r2, #0
 801c85a:	6822      	ldr	r2, [r4, #0]
 801c85c:	bf18      	it	ne
 801c85e:	2301      	movne	r3, #1
 801c860:	0692      	lsls	r2, r2, #26
 801c862:	d42b      	bmi.n	801c8bc <_printf_common+0xb0>
 801c864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c868:	4649      	mov	r1, r9
 801c86a:	4638      	mov	r0, r7
 801c86c:	47c0      	blx	r8
 801c86e:	3001      	adds	r0, #1
 801c870:	d01e      	beq.n	801c8b0 <_printf_common+0xa4>
 801c872:	6823      	ldr	r3, [r4, #0]
 801c874:	68e5      	ldr	r5, [r4, #12]
 801c876:	6832      	ldr	r2, [r6, #0]
 801c878:	f003 0306 	and.w	r3, r3, #6
 801c87c:	2b04      	cmp	r3, #4
 801c87e:	bf08      	it	eq
 801c880:	1aad      	subeq	r5, r5, r2
 801c882:	68a3      	ldr	r3, [r4, #8]
 801c884:	6922      	ldr	r2, [r4, #16]
 801c886:	bf0c      	ite	eq
 801c888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c88c:	2500      	movne	r5, #0
 801c88e:	4293      	cmp	r3, r2
 801c890:	bfc4      	itt	gt
 801c892:	1a9b      	subgt	r3, r3, r2
 801c894:	18ed      	addgt	r5, r5, r3
 801c896:	2600      	movs	r6, #0
 801c898:	341a      	adds	r4, #26
 801c89a:	42b5      	cmp	r5, r6
 801c89c:	d11a      	bne.n	801c8d4 <_printf_common+0xc8>
 801c89e:	2000      	movs	r0, #0
 801c8a0:	e008      	b.n	801c8b4 <_printf_common+0xa8>
 801c8a2:	2301      	movs	r3, #1
 801c8a4:	4652      	mov	r2, sl
 801c8a6:	4649      	mov	r1, r9
 801c8a8:	4638      	mov	r0, r7
 801c8aa:	47c0      	blx	r8
 801c8ac:	3001      	adds	r0, #1
 801c8ae:	d103      	bne.n	801c8b8 <_printf_common+0xac>
 801c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8b8:	3501      	adds	r5, #1
 801c8ba:	e7c6      	b.n	801c84a <_printf_common+0x3e>
 801c8bc:	18e1      	adds	r1, r4, r3
 801c8be:	1c5a      	adds	r2, r3, #1
 801c8c0:	2030      	movs	r0, #48	; 0x30
 801c8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c8c6:	4422      	add	r2, r4
 801c8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c8d0:	3302      	adds	r3, #2
 801c8d2:	e7c7      	b.n	801c864 <_printf_common+0x58>
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	4622      	mov	r2, r4
 801c8d8:	4649      	mov	r1, r9
 801c8da:	4638      	mov	r0, r7
 801c8dc:	47c0      	blx	r8
 801c8de:	3001      	adds	r0, #1
 801c8e0:	d0e6      	beq.n	801c8b0 <_printf_common+0xa4>
 801c8e2:	3601      	adds	r6, #1
 801c8e4:	e7d9      	b.n	801c89a <_printf_common+0x8e>
	...

0801c8e8 <_printf_i>:
 801c8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8ec:	460c      	mov	r4, r1
 801c8ee:	4691      	mov	r9, r2
 801c8f0:	7e27      	ldrb	r7, [r4, #24]
 801c8f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c8f4:	2f78      	cmp	r7, #120	; 0x78
 801c8f6:	4680      	mov	r8, r0
 801c8f8:	469a      	mov	sl, r3
 801c8fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c8fe:	d807      	bhi.n	801c910 <_printf_i+0x28>
 801c900:	2f62      	cmp	r7, #98	; 0x62
 801c902:	d80a      	bhi.n	801c91a <_printf_i+0x32>
 801c904:	2f00      	cmp	r7, #0
 801c906:	f000 80d8 	beq.w	801caba <_printf_i+0x1d2>
 801c90a:	2f58      	cmp	r7, #88	; 0x58
 801c90c:	f000 80a3 	beq.w	801ca56 <_printf_i+0x16e>
 801c910:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c918:	e03a      	b.n	801c990 <_printf_i+0xa8>
 801c91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c91e:	2b15      	cmp	r3, #21
 801c920:	d8f6      	bhi.n	801c910 <_printf_i+0x28>
 801c922:	a001      	add	r0, pc, #4	; (adr r0, 801c928 <_printf_i+0x40>)
 801c924:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c928:	0801c981 	.word	0x0801c981
 801c92c:	0801c995 	.word	0x0801c995
 801c930:	0801c911 	.word	0x0801c911
 801c934:	0801c911 	.word	0x0801c911
 801c938:	0801c911 	.word	0x0801c911
 801c93c:	0801c911 	.word	0x0801c911
 801c940:	0801c995 	.word	0x0801c995
 801c944:	0801c911 	.word	0x0801c911
 801c948:	0801c911 	.word	0x0801c911
 801c94c:	0801c911 	.word	0x0801c911
 801c950:	0801c911 	.word	0x0801c911
 801c954:	0801caa1 	.word	0x0801caa1
 801c958:	0801c9c5 	.word	0x0801c9c5
 801c95c:	0801ca83 	.word	0x0801ca83
 801c960:	0801c911 	.word	0x0801c911
 801c964:	0801c911 	.word	0x0801c911
 801c968:	0801cac3 	.word	0x0801cac3
 801c96c:	0801c911 	.word	0x0801c911
 801c970:	0801c9c5 	.word	0x0801c9c5
 801c974:	0801c911 	.word	0x0801c911
 801c978:	0801c911 	.word	0x0801c911
 801c97c:	0801ca8b 	.word	0x0801ca8b
 801c980:	680b      	ldr	r3, [r1, #0]
 801c982:	1d1a      	adds	r2, r3, #4
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	600a      	str	r2, [r1, #0]
 801c988:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c990:	2301      	movs	r3, #1
 801c992:	e0a3      	b.n	801cadc <_printf_i+0x1f4>
 801c994:	6825      	ldr	r5, [r4, #0]
 801c996:	6808      	ldr	r0, [r1, #0]
 801c998:	062e      	lsls	r6, r5, #24
 801c99a:	f100 0304 	add.w	r3, r0, #4
 801c99e:	d50a      	bpl.n	801c9b6 <_printf_i+0xce>
 801c9a0:	6805      	ldr	r5, [r0, #0]
 801c9a2:	600b      	str	r3, [r1, #0]
 801c9a4:	2d00      	cmp	r5, #0
 801c9a6:	da03      	bge.n	801c9b0 <_printf_i+0xc8>
 801c9a8:	232d      	movs	r3, #45	; 0x2d
 801c9aa:	426d      	negs	r5, r5
 801c9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c9b0:	485e      	ldr	r0, [pc, #376]	; (801cb2c <_printf_i+0x244>)
 801c9b2:	230a      	movs	r3, #10
 801c9b4:	e019      	b.n	801c9ea <_printf_i+0x102>
 801c9b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c9ba:	6805      	ldr	r5, [r0, #0]
 801c9bc:	600b      	str	r3, [r1, #0]
 801c9be:	bf18      	it	ne
 801c9c0:	b22d      	sxthne	r5, r5
 801c9c2:	e7ef      	b.n	801c9a4 <_printf_i+0xbc>
 801c9c4:	680b      	ldr	r3, [r1, #0]
 801c9c6:	6825      	ldr	r5, [r4, #0]
 801c9c8:	1d18      	adds	r0, r3, #4
 801c9ca:	6008      	str	r0, [r1, #0]
 801c9cc:	0628      	lsls	r0, r5, #24
 801c9ce:	d501      	bpl.n	801c9d4 <_printf_i+0xec>
 801c9d0:	681d      	ldr	r5, [r3, #0]
 801c9d2:	e002      	b.n	801c9da <_printf_i+0xf2>
 801c9d4:	0669      	lsls	r1, r5, #25
 801c9d6:	d5fb      	bpl.n	801c9d0 <_printf_i+0xe8>
 801c9d8:	881d      	ldrh	r5, [r3, #0]
 801c9da:	4854      	ldr	r0, [pc, #336]	; (801cb2c <_printf_i+0x244>)
 801c9dc:	2f6f      	cmp	r7, #111	; 0x6f
 801c9de:	bf0c      	ite	eq
 801c9e0:	2308      	moveq	r3, #8
 801c9e2:	230a      	movne	r3, #10
 801c9e4:	2100      	movs	r1, #0
 801c9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c9ea:	6866      	ldr	r6, [r4, #4]
 801c9ec:	60a6      	str	r6, [r4, #8]
 801c9ee:	2e00      	cmp	r6, #0
 801c9f0:	bfa2      	ittt	ge
 801c9f2:	6821      	ldrge	r1, [r4, #0]
 801c9f4:	f021 0104 	bicge.w	r1, r1, #4
 801c9f8:	6021      	strge	r1, [r4, #0]
 801c9fa:	b90d      	cbnz	r5, 801ca00 <_printf_i+0x118>
 801c9fc:	2e00      	cmp	r6, #0
 801c9fe:	d04d      	beq.n	801ca9c <_printf_i+0x1b4>
 801ca00:	4616      	mov	r6, r2
 801ca02:	fbb5 f1f3 	udiv	r1, r5, r3
 801ca06:	fb03 5711 	mls	r7, r3, r1, r5
 801ca0a:	5dc7      	ldrb	r7, [r0, r7]
 801ca0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ca10:	462f      	mov	r7, r5
 801ca12:	42bb      	cmp	r3, r7
 801ca14:	460d      	mov	r5, r1
 801ca16:	d9f4      	bls.n	801ca02 <_printf_i+0x11a>
 801ca18:	2b08      	cmp	r3, #8
 801ca1a:	d10b      	bne.n	801ca34 <_printf_i+0x14c>
 801ca1c:	6823      	ldr	r3, [r4, #0]
 801ca1e:	07df      	lsls	r7, r3, #31
 801ca20:	d508      	bpl.n	801ca34 <_printf_i+0x14c>
 801ca22:	6923      	ldr	r3, [r4, #16]
 801ca24:	6861      	ldr	r1, [r4, #4]
 801ca26:	4299      	cmp	r1, r3
 801ca28:	bfde      	ittt	le
 801ca2a:	2330      	movle	r3, #48	; 0x30
 801ca2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ca30:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ca34:	1b92      	subs	r2, r2, r6
 801ca36:	6122      	str	r2, [r4, #16]
 801ca38:	f8cd a000 	str.w	sl, [sp]
 801ca3c:	464b      	mov	r3, r9
 801ca3e:	aa03      	add	r2, sp, #12
 801ca40:	4621      	mov	r1, r4
 801ca42:	4640      	mov	r0, r8
 801ca44:	f7ff fee2 	bl	801c80c <_printf_common>
 801ca48:	3001      	adds	r0, #1
 801ca4a:	d14c      	bne.n	801cae6 <_printf_i+0x1fe>
 801ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 801ca50:	b004      	add	sp, #16
 801ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca56:	4835      	ldr	r0, [pc, #212]	; (801cb2c <_printf_i+0x244>)
 801ca58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ca5c:	6823      	ldr	r3, [r4, #0]
 801ca5e:	680e      	ldr	r6, [r1, #0]
 801ca60:	061f      	lsls	r7, r3, #24
 801ca62:	f856 5b04 	ldr.w	r5, [r6], #4
 801ca66:	600e      	str	r6, [r1, #0]
 801ca68:	d514      	bpl.n	801ca94 <_printf_i+0x1ac>
 801ca6a:	07d9      	lsls	r1, r3, #31
 801ca6c:	bf44      	itt	mi
 801ca6e:	f043 0320 	orrmi.w	r3, r3, #32
 801ca72:	6023      	strmi	r3, [r4, #0]
 801ca74:	b91d      	cbnz	r5, 801ca7e <_printf_i+0x196>
 801ca76:	6823      	ldr	r3, [r4, #0]
 801ca78:	f023 0320 	bic.w	r3, r3, #32
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	2310      	movs	r3, #16
 801ca80:	e7b0      	b.n	801c9e4 <_printf_i+0xfc>
 801ca82:	6823      	ldr	r3, [r4, #0]
 801ca84:	f043 0320 	orr.w	r3, r3, #32
 801ca88:	6023      	str	r3, [r4, #0]
 801ca8a:	2378      	movs	r3, #120	; 0x78
 801ca8c:	4828      	ldr	r0, [pc, #160]	; (801cb30 <_printf_i+0x248>)
 801ca8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ca92:	e7e3      	b.n	801ca5c <_printf_i+0x174>
 801ca94:	065e      	lsls	r6, r3, #25
 801ca96:	bf48      	it	mi
 801ca98:	b2ad      	uxthmi	r5, r5
 801ca9a:	e7e6      	b.n	801ca6a <_printf_i+0x182>
 801ca9c:	4616      	mov	r6, r2
 801ca9e:	e7bb      	b.n	801ca18 <_printf_i+0x130>
 801caa0:	680b      	ldr	r3, [r1, #0]
 801caa2:	6826      	ldr	r6, [r4, #0]
 801caa4:	6960      	ldr	r0, [r4, #20]
 801caa6:	1d1d      	adds	r5, r3, #4
 801caa8:	600d      	str	r5, [r1, #0]
 801caaa:	0635      	lsls	r5, r6, #24
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	d501      	bpl.n	801cab4 <_printf_i+0x1cc>
 801cab0:	6018      	str	r0, [r3, #0]
 801cab2:	e002      	b.n	801caba <_printf_i+0x1d2>
 801cab4:	0671      	lsls	r1, r6, #25
 801cab6:	d5fb      	bpl.n	801cab0 <_printf_i+0x1c8>
 801cab8:	8018      	strh	r0, [r3, #0]
 801caba:	2300      	movs	r3, #0
 801cabc:	6123      	str	r3, [r4, #16]
 801cabe:	4616      	mov	r6, r2
 801cac0:	e7ba      	b.n	801ca38 <_printf_i+0x150>
 801cac2:	680b      	ldr	r3, [r1, #0]
 801cac4:	1d1a      	adds	r2, r3, #4
 801cac6:	600a      	str	r2, [r1, #0]
 801cac8:	681e      	ldr	r6, [r3, #0]
 801caca:	6862      	ldr	r2, [r4, #4]
 801cacc:	2100      	movs	r1, #0
 801cace:	4630      	mov	r0, r6
 801cad0:	f7e3 fc1e 	bl	8000310 <memchr>
 801cad4:	b108      	cbz	r0, 801cada <_printf_i+0x1f2>
 801cad6:	1b80      	subs	r0, r0, r6
 801cad8:	6060      	str	r0, [r4, #4]
 801cada:	6863      	ldr	r3, [r4, #4]
 801cadc:	6123      	str	r3, [r4, #16]
 801cade:	2300      	movs	r3, #0
 801cae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cae4:	e7a8      	b.n	801ca38 <_printf_i+0x150>
 801cae6:	6923      	ldr	r3, [r4, #16]
 801cae8:	4632      	mov	r2, r6
 801caea:	4649      	mov	r1, r9
 801caec:	4640      	mov	r0, r8
 801caee:	47d0      	blx	sl
 801caf0:	3001      	adds	r0, #1
 801caf2:	d0ab      	beq.n	801ca4c <_printf_i+0x164>
 801caf4:	6823      	ldr	r3, [r4, #0]
 801caf6:	079b      	lsls	r3, r3, #30
 801caf8:	d413      	bmi.n	801cb22 <_printf_i+0x23a>
 801cafa:	68e0      	ldr	r0, [r4, #12]
 801cafc:	9b03      	ldr	r3, [sp, #12]
 801cafe:	4298      	cmp	r0, r3
 801cb00:	bfb8      	it	lt
 801cb02:	4618      	movlt	r0, r3
 801cb04:	e7a4      	b.n	801ca50 <_printf_i+0x168>
 801cb06:	2301      	movs	r3, #1
 801cb08:	4632      	mov	r2, r6
 801cb0a:	4649      	mov	r1, r9
 801cb0c:	4640      	mov	r0, r8
 801cb0e:	47d0      	blx	sl
 801cb10:	3001      	adds	r0, #1
 801cb12:	d09b      	beq.n	801ca4c <_printf_i+0x164>
 801cb14:	3501      	adds	r5, #1
 801cb16:	68e3      	ldr	r3, [r4, #12]
 801cb18:	9903      	ldr	r1, [sp, #12]
 801cb1a:	1a5b      	subs	r3, r3, r1
 801cb1c:	42ab      	cmp	r3, r5
 801cb1e:	dcf2      	bgt.n	801cb06 <_printf_i+0x21e>
 801cb20:	e7eb      	b.n	801cafa <_printf_i+0x212>
 801cb22:	2500      	movs	r5, #0
 801cb24:	f104 0619 	add.w	r6, r4, #25
 801cb28:	e7f5      	b.n	801cb16 <_printf_i+0x22e>
 801cb2a:	bf00      	nop
 801cb2c:	08020e91 	.word	0x08020e91
 801cb30:	08020ea2 	.word	0x08020ea2

0801cb34 <_sbrk_r>:
 801cb34:	b538      	push	{r3, r4, r5, lr}
 801cb36:	4d06      	ldr	r5, [pc, #24]	; (801cb50 <_sbrk_r+0x1c>)
 801cb38:	2300      	movs	r3, #0
 801cb3a:	4604      	mov	r4, r0
 801cb3c:	4608      	mov	r0, r1
 801cb3e:	602b      	str	r3, [r5, #0]
 801cb40:	f7e5 f8f0 	bl	8001d24 <_sbrk>
 801cb44:	1c43      	adds	r3, r0, #1
 801cb46:	d102      	bne.n	801cb4e <_sbrk_r+0x1a>
 801cb48:	682b      	ldr	r3, [r5, #0]
 801cb4a:	b103      	cbz	r3, 801cb4e <_sbrk_r+0x1a>
 801cb4c:	6023      	str	r3, [r4, #0]
 801cb4e:	bd38      	pop	{r3, r4, r5, pc}
 801cb50:	24007348 	.word	0x24007348

0801cb54 <_raise_r>:
 801cb54:	291f      	cmp	r1, #31
 801cb56:	b538      	push	{r3, r4, r5, lr}
 801cb58:	4604      	mov	r4, r0
 801cb5a:	460d      	mov	r5, r1
 801cb5c:	d904      	bls.n	801cb68 <_raise_r+0x14>
 801cb5e:	2316      	movs	r3, #22
 801cb60:	6003      	str	r3, [r0, #0]
 801cb62:	f04f 30ff 	mov.w	r0, #4294967295
 801cb66:	bd38      	pop	{r3, r4, r5, pc}
 801cb68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cb6a:	b112      	cbz	r2, 801cb72 <_raise_r+0x1e>
 801cb6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb70:	b94b      	cbnz	r3, 801cb86 <_raise_r+0x32>
 801cb72:	4620      	mov	r0, r4
 801cb74:	f000 f830 	bl	801cbd8 <_getpid_r>
 801cb78:	462a      	mov	r2, r5
 801cb7a:	4601      	mov	r1, r0
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb82:	f000 b817 	b.w	801cbb4 <_kill_r>
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d00a      	beq.n	801cba0 <_raise_r+0x4c>
 801cb8a:	1c59      	adds	r1, r3, #1
 801cb8c:	d103      	bne.n	801cb96 <_raise_r+0x42>
 801cb8e:	2316      	movs	r3, #22
 801cb90:	6003      	str	r3, [r0, #0]
 801cb92:	2001      	movs	r0, #1
 801cb94:	e7e7      	b.n	801cb66 <_raise_r+0x12>
 801cb96:	2400      	movs	r4, #0
 801cb98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cb9c:	4628      	mov	r0, r5
 801cb9e:	4798      	blx	r3
 801cba0:	2000      	movs	r0, #0
 801cba2:	e7e0      	b.n	801cb66 <_raise_r+0x12>

0801cba4 <raise>:
 801cba4:	4b02      	ldr	r3, [pc, #8]	; (801cbb0 <raise+0xc>)
 801cba6:	4601      	mov	r1, r0
 801cba8:	6818      	ldr	r0, [r3, #0]
 801cbaa:	f7ff bfd3 	b.w	801cb54 <_raise_r>
 801cbae:	bf00      	nop
 801cbb0:	240000e0 	.word	0x240000e0

0801cbb4 <_kill_r>:
 801cbb4:	b538      	push	{r3, r4, r5, lr}
 801cbb6:	4d07      	ldr	r5, [pc, #28]	; (801cbd4 <_kill_r+0x20>)
 801cbb8:	2300      	movs	r3, #0
 801cbba:	4604      	mov	r4, r0
 801cbbc:	4608      	mov	r0, r1
 801cbbe:	4611      	mov	r1, r2
 801cbc0:	602b      	str	r3, [r5, #0]
 801cbc2:	f7e5 f87b 	bl	8001cbc <_kill>
 801cbc6:	1c43      	adds	r3, r0, #1
 801cbc8:	d102      	bne.n	801cbd0 <_kill_r+0x1c>
 801cbca:	682b      	ldr	r3, [r5, #0]
 801cbcc:	b103      	cbz	r3, 801cbd0 <_kill_r+0x1c>
 801cbce:	6023      	str	r3, [r4, #0]
 801cbd0:	bd38      	pop	{r3, r4, r5, pc}
 801cbd2:	bf00      	nop
 801cbd4:	24007348 	.word	0x24007348

0801cbd8 <_getpid_r>:
 801cbd8:	f7e5 b86e 	b.w	8001cb8 <_getpid>

0801cbdc <__swbuf_r>:
 801cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbde:	460e      	mov	r6, r1
 801cbe0:	4614      	mov	r4, r2
 801cbe2:	4605      	mov	r5, r0
 801cbe4:	b118      	cbz	r0, 801cbee <__swbuf_r+0x12>
 801cbe6:	6983      	ldr	r3, [r0, #24]
 801cbe8:	b90b      	cbnz	r3, 801cbee <__swbuf_r+0x12>
 801cbea:	f000 fa33 	bl	801d054 <__sinit>
 801cbee:	4b21      	ldr	r3, [pc, #132]	; (801cc74 <__swbuf_r+0x98>)
 801cbf0:	429c      	cmp	r4, r3
 801cbf2:	d12b      	bne.n	801cc4c <__swbuf_r+0x70>
 801cbf4:	686c      	ldr	r4, [r5, #4]
 801cbf6:	69a3      	ldr	r3, [r4, #24]
 801cbf8:	60a3      	str	r3, [r4, #8]
 801cbfa:	89a3      	ldrh	r3, [r4, #12]
 801cbfc:	071a      	lsls	r2, r3, #28
 801cbfe:	d52f      	bpl.n	801cc60 <__swbuf_r+0x84>
 801cc00:	6923      	ldr	r3, [r4, #16]
 801cc02:	b36b      	cbz	r3, 801cc60 <__swbuf_r+0x84>
 801cc04:	6923      	ldr	r3, [r4, #16]
 801cc06:	6820      	ldr	r0, [r4, #0]
 801cc08:	1ac0      	subs	r0, r0, r3
 801cc0a:	6963      	ldr	r3, [r4, #20]
 801cc0c:	b2f6      	uxtb	r6, r6
 801cc0e:	4283      	cmp	r3, r0
 801cc10:	4637      	mov	r7, r6
 801cc12:	dc04      	bgt.n	801cc1e <__swbuf_r+0x42>
 801cc14:	4621      	mov	r1, r4
 801cc16:	4628      	mov	r0, r5
 801cc18:	f000 f988 	bl	801cf2c <_fflush_r>
 801cc1c:	bb30      	cbnz	r0, 801cc6c <__swbuf_r+0x90>
 801cc1e:	68a3      	ldr	r3, [r4, #8]
 801cc20:	3b01      	subs	r3, #1
 801cc22:	60a3      	str	r3, [r4, #8]
 801cc24:	6823      	ldr	r3, [r4, #0]
 801cc26:	1c5a      	adds	r2, r3, #1
 801cc28:	6022      	str	r2, [r4, #0]
 801cc2a:	701e      	strb	r6, [r3, #0]
 801cc2c:	6963      	ldr	r3, [r4, #20]
 801cc2e:	3001      	adds	r0, #1
 801cc30:	4283      	cmp	r3, r0
 801cc32:	d004      	beq.n	801cc3e <__swbuf_r+0x62>
 801cc34:	89a3      	ldrh	r3, [r4, #12]
 801cc36:	07db      	lsls	r3, r3, #31
 801cc38:	d506      	bpl.n	801cc48 <__swbuf_r+0x6c>
 801cc3a:	2e0a      	cmp	r6, #10
 801cc3c:	d104      	bne.n	801cc48 <__swbuf_r+0x6c>
 801cc3e:	4621      	mov	r1, r4
 801cc40:	4628      	mov	r0, r5
 801cc42:	f000 f973 	bl	801cf2c <_fflush_r>
 801cc46:	b988      	cbnz	r0, 801cc6c <__swbuf_r+0x90>
 801cc48:	4638      	mov	r0, r7
 801cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc4c:	4b0a      	ldr	r3, [pc, #40]	; (801cc78 <__swbuf_r+0x9c>)
 801cc4e:	429c      	cmp	r4, r3
 801cc50:	d101      	bne.n	801cc56 <__swbuf_r+0x7a>
 801cc52:	68ac      	ldr	r4, [r5, #8]
 801cc54:	e7cf      	b.n	801cbf6 <__swbuf_r+0x1a>
 801cc56:	4b09      	ldr	r3, [pc, #36]	; (801cc7c <__swbuf_r+0xa0>)
 801cc58:	429c      	cmp	r4, r3
 801cc5a:	bf08      	it	eq
 801cc5c:	68ec      	ldreq	r4, [r5, #12]
 801cc5e:	e7ca      	b.n	801cbf6 <__swbuf_r+0x1a>
 801cc60:	4621      	mov	r1, r4
 801cc62:	4628      	mov	r0, r5
 801cc64:	f000 f80c 	bl	801cc80 <__swsetup_r>
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	d0cb      	beq.n	801cc04 <__swbuf_r+0x28>
 801cc6c:	f04f 37ff 	mov.w	r7, #4294967295
 801cc70:	e7ea      	b.n	801cc48 <__swbuf_r+0x6c>
 801cc72:	bf00      	nop
 801cc74:	08020ed8 	.word	0x08020ed8
 801cc78:	08020ef8 	.word	0x08020ef8
 801cc7c:	08020eb8 	.word	0x08020eb8

0801cc80 <__swsetup_r>:
 801cc80:	4b32      	ldr	r3, [pc, #200]	; (801cd4c <__swsetup_r+0xcc>)
 801cc82:	b570      	push	{r4, r5, r6, lr}
 801cc84:	681d      	ldr	r5, [r3, #0]
 801cc86:	4606      	mov	r6, r0
 801cc88:	460c      	mov	r4, r1
 801cc8a:	b125      	cbz	r5, 801cc96 <__swsetup_r+0x16>
 801cc8c:	69ab      	ldr	r3, [r5, #24]
 801cc8e:	b913      	cbnz	r3, 801cc96 <__swsetup_r+0x16>
 801cc90:	4628      	mov	r0, r5
 801cc92:	f000 f9df 	bl	801d054 <__sinit>
 801cc96:	4b2e      	ldr	r3, [pc, #184]	; (801cd50 <__swsetup_r+0xd0>)
 801cc98:	429c      	cmp	r4, r3
 801cc9a:	d10f      	bne.n	801ccbc <__swsetup_r+0x3c>
 801cc9c:	686c      	ldr	r4, [r5, #4]
 801cc9e:	89a3      	ldrh	r3, [r4, #12]
 801cca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cca4:	0719      	lsls	r1, r3, #28
 801cca6:	d42c      	bmi.n	801cd02 <__swsetup_r+0x82>
 801cca8:	06dd      	lsls	r5, r3, #27
 801ccaa:	d411      	bmi.n	801ccd0 <__swsetup_r+0x50>
 801ccac:	2309      	movs	r3, #9
 801ccae:	6033      	str	r3, [r6, #0]
 801ccb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ccb4:	81a3      	strh	r3, [r4, #12]
 801ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 801ccba:	e03e      	b.n	801cd3a <__swsetup_r+0xba>
 801ccbc:	4b25      	ldr	r3, [pc, #148]	; (801cd54 <__swsetup_r+0xd4>)
 801ccbe:	429c      	cmp	r4, r3
 801ccc0:	d101      	bne.n	801ccc6 <__swsetup_r+0x46>
 801ccc2:	68ac      	ldr	r4, [r5, #8]
 801ccc4:	e7eb      	b.n	801cc9e <__swsetup_r+0x1e>
 801ccc6:	4b24      	ldr	r3, [pc, #144]	; (801cd58 <__swsetup_r+0xd8>)
 801ccc8:	429c      	cmp	r4, r3
 801ccca:	bf08      	it	eq
 801cccc:	68ec      	ldreq	r4, [r5, #12]
 801ccce:	e7e6      	b.n	801cc9e <__swsetup_r+0x1e>
 801ccd0:	0758      	lsls	r0, r3, #29
 801ccd2:	d512      	bpl.n	801ccfa <__swsetup_r+0x7a>
 801ccd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccd6:	b141      	cbz	r1, 801ccea <__swsetup_r+0x6a>
 801ccd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccdc:	4299      	cmp	r1, r3
 801ccde:	d002      	beq.n	801cce6 <__swsetup_r+0x66>
 801cce0:	4630      	mov	r0, r6
 801cce2:	f7ff fb8f 	bl	801c404 <_free_r>
 801cce6:	2300      	movs	r3, #0
 801cce8:	6363      	str	r3, [r4, #52]	; 0x34
 801ccea:	89a3      	ldrh	r3, [r4, #12]
 801ccec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ccf0:	81a3      	strh	r3, [r4, #12]
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	6063      	str	r3, [r4, #4]
 801ccf6:	6923      	ldr	r3, [r4, #16]
 801ccf8:	6023      	str	r3, [r4, #0]
 801ccfa:	89a3      	ldrh	r3, [r4, #12]
 801ccfc:	f043 0308 	orr.w	r3, r3, #8
 801cd00:	81a3      	strh	r3, [r4, #12]
 801cd02:	6923      	ldr	r3, [r4, #16]
 801cd04:	b94b      	cbnz	r3, 801cd1a <__swsetup_r+0x9a>
 801cd06:	89a3      	ldrh	r3, [r4, #12]
 801cd08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd10:	d003      	beq.n	801cd1a <__swsetup_r+0x9a>
 801cd12:	4621      	mov	r1, r4
 801cd14:	4630      	mov	r0, r6
 801cd16:	f000 fa63 	bl	801d1e0 <__smakebuf_r>
 801cd1a:	89a0      	ldrh	r0, [r4, #12]
 801cd1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cd20:	f010 0301 	ands.w	r3, r0, #1
 801cd24:	d00a      	beq.n	801cd3c <__swsetup_r+0xbc>
 801cd26:	2300      	movs	r3, #0
 801cd28:	60a3      	str	r3, [r4, #8]
 801cd2a:	6963      	ldr	r3, [r4, #20]
 801cd2c:	425b      	negs	r3, r3
 801cd2e:	61a3      	str	r3, [r4, #24]
 801cd30:	6923      	ldr	r3, [r4, #16]
 801cd32:	b943      	cbnz	r3, 801cd46 <__swsetup_r+0xc6>
 801cd34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cd38:	d1ba      	bne.n	801ccb0 <__swsetup_r+0x30>
 801cd3a:	bd70      	pop	{r4, r5, r6, pc}
 801cd3c:	0781      	lsls	r1, r0, #30
 801cd3e:	bf58      	it	pl
 801cd40:	6963      	ldrpl	r3, [r4, #20]
 801cd42:	60a3      	str	r3, [r4, #8]
 801cd44:	e7f4      	b.n	801cd30 <__swsetup_r+0xb0>
 801cd46:	2000      	movs	r0, #0
 801cd48:	e7f7      	b.n	801cd3a <__swsetup_r+0xba>
 801cd4a:	bf00      	nop
 801cd4c:	240000e0 	.word	0x240000e0
 801cd50:	08020ed8 	.word	0x08020ed8
 801cd54:	08020ef8 	.word	0x08020ef8
 801cd58:	08020eb8 	.word	0x08020eb8

0801cd5c <__register_exitproc>:
 801cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ce1c <__register_exitproc+0xc0>
 801cd64:	4606      	mov	r6, r0
 801cd66:	f8d8 0000 	ldr.w	r0, [r8]
 801cd6a:	461f      	mov	r7, r3
 801cd6c:	460d      	mov	r5, r1
 801cd6e:	4691      	mov	r9, r2
 801cd70:	f000 fa0e 	bl	801d190 <__retarget_lock_acquire_recursive>
 801cd74:	4b25      	ldr	r3, [pc, #148]	; (801ce0c <__register_exitproc+0xb0>)
 801cd76:	681c      	ldr	r4, [r3, #0]
 801cd78:	b934      	cbnz	r4, 801cd88 <__register_exitproc+0x2c>
 801cd7a:	4c25      	ldr	r4, [pc, #148]	; (801ce10 <__register_exitproc+0xb4>)
 801cd7c:	601c      	str	r4, [r3, #0]
 801cd7e:	4b25      	ldr	r3, [pc, #148]	; (801ce14 <__register_exitproc+0xb8>)
 801cd80:	b113      	cbz	r3, 801cd88 <__register_exitproc+0x2c>
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cd88:	6863      	ldr	r3, [r4, #4]
 801cd8a:	2b1f      	cmp	r3, #31
 801cd8c:	dd07      	ble.n	801cd9e <__register_exitproc+0x42>
 801cd8e:	f8d8 0000 	ldr.w	r0, [r8]
 801cd92:	f000 f9ff 	bl	801d194 <__retarget_lock_release_recursive>
 801cd96:	f04f 30ff 	mov.w	r0, #4294967295
 801cd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd9e:	b34e      	cbz	r6, 801cdf4 <__register_exitproc+0x98>
 801cda0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801cda4:	b988      	cbnz	r0, 801cdca <__register_exitproc+0x6e>
 801cda6:	4b1c      	ldr	r3, [pc, #112]	; (801ce18 <__register_exitproc+0xbc>)
 801cda8:	b923      	cbnz	r3, 801cdb4 <__register_exitproc+0x58>
 801cdaa:	f8d8 0000 	ldr.w	r0, [r8]
 801cdae:	f000 f9f0 	bl	801d192 <__retarget_lock_release>
 801cdb2:	e7f0      	b.n	801cd96 <__register_exitproc+0x3a>
 801cdb4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801cdb8:	f7ff fafe 	bl	801c3b8 <malloc>
 801cdbc:	2800      	cmp	r0, #0
 801cdbe:	d0f4      	beq.n	801cdaa <__register_exitproc+0x4e>
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801cdc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801cdca:	6863      	ldr	r3, [r4, #4]
 801cdcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801cdd0:	2201      	movs	r2, #1
 801cdd2:	409a      	lsls	r2, r3
 801cdd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801cdd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801cddc:	4313      	orrs	r3, r2
 801cdde:	2e02      	cmp	r6, #2
 801cde0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801cde4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801cde8:	bf02      	ittt	eq
 801cdea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801cdee:	431a      	orreq	r2, r3
 801cdf0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801cdf4:	6863      	ldr	r3, [r4, #4]
 801cdf6:	f8d8 0000 	ldr.w	r0, [r8]
 801cdfa:	1c5a      	adds	r2, r3, #1
 801cdfc:	3302      	adds	r3, #2
 801cdfe:	6062      	str	r2, [r4, #4]
 801ce00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ce04:	f000 f9c6 	bl	801d194 <__retarget_lock_release_recursive>
 801ce08:	2000      	movs	r0, #0
 801ce0a:	e7c6      	b.n	801cd9a <__register_exitproc+0x3e>
 801ce0c:	24006ee4 	.word	0x24006ee4
 801ce10:	24006e58 	.word	0x24006e58
 801ce14:	08020eb4 	.word	0x08020eb4
 801ce18:	0801c3b9 	.word	0x0801c3b9
 801ce1c:	24000144 	.word	0x24000144

0801ce20 <__sflush_r>:
 801ce20:	898a      	ldrh	r2, [r1, #12]
 801ce22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce26:	4605      	mov	r5, r0
 801ce28:	0710      	lsls	r0, r2, #28
 801ce2a:	460c      	mov	r4, r1
 801ce2c:	d458      	bmi.n	801cee0 <__sflush_r+0xc0>
 801ce2e:	684b      	ldr	r3, [r1, #4]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	dc05      	bgt.n	801ce40 <__sflush_r+0x20>
 801ce34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	dc02      	bgt.n	801ce40 <__sflush_r+0x20>
 801ce3a:	2000      	movs	r0, #0
 801ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce42:	2e00      	cmp	r6, #0
 801ce44:	d0f9      	beq.n	801ce3a <__sflush_r+0x1a>
 801ce46:	2300      	movs	r3, #0
 801ce48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce4c:	682f      	ldr	r7, [r5, #0]
 801ce4e:	602b      	str	r3, [r5, #0]
 801ce50:	d032      	beq.n	801ceb8 <__sflush_r+0x98>
 801ce52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ce54:	89a3      	ldrh	r3, [r4, #12]
 801ce56:	075a      	lsls	r2, r3, #29
 801ce58:	d505      	bpl.n	801ce66 <__sflush_r+0x46>
 801ce5a:	6863      	ldr	r3, [r4, #4]
 801ce5c:	1ac0      	subs	r0, r0, r3
 801ce5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce60:	b10b      	cbz	r3, 801ce66 <__sflush_r+0x46>
 801ce62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce64:	1ac0      	subs	r0, r0, r3
 801ce66:	2300      	movs	r3, #0
 801ce68:	4602      	mov	r2, r0
 801ce6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce6c:	6a21      	ldr	r1, [r4, #32]
 801ce6e:	4628      	mov	r0, r5
 801ce70:	47b0      	blx	r6
 801ce72:	1c43      	adds	r3, r0, #1
 801ce74:	89a3      	ldrh	r3, [r4, #12]
 801ce76:	d106      	bne.n	801ce86 <__sflush_r+0x66>
 801ce78:	6829      	ldr	r1, [r5, #0]
 801ce7a:	291d      	cmp	r1, #29
 801ce7c:	d82c      	bhi.n	801ced8 <__sflush_r+0xb8>
 801ce7e:	4a2a      	ldr	r2, [pc, #168]	; (801cf28 <__sflush_r+0x108>)
 801ce80:	40ca      	lsrs	r2, r1
 801ce82:	07d6      	lsls	r6, r2, #31
 801ce84:	d528      	bpl.n	801ced8 <__sflush_r+0xb8>
 801ce86:	2200      	movs	r2, #0
 801ce88:	6062      	str	r2, [r4, #4]
 801ce8a:	04d9      	lsls	r1, r3, #19
 801ce8c:	6922      	ldr	r2, [r4, #16]
 801ce8e:	6022      	str	r2, [r4, #0]
 801ce90:	d504      	bpl.n	801ce9c <__sflush_r+0x7c>
 801ce92:	1c42      	adds	r2, r0, #1
 801ce94:	d101      	bne.n	801ce9a <__sflush_r+0x7a>
 801ce96:	682b      	ldr	r3, [r5, #0]
 801ce98:	b903      	cbnz	r3, 801ce9c <__sflush_r+0x7c>
 801ce9a:	6560      	str	r0, [r4, #84]	; 0x54
 801ce9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce9e:	602f      	str	r7, [r5, #0]
 801cea0:	2900      	cmp	r1, #0
 801cea2:	d0ca      	beq.n	801ce3a <__sflush_r+0x1a>
 801cea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cea8:	4299      	cmp	r1, r3
 801ceaa:	d002      	beq.n	801ceb2 <__sflush_r+0x92>
 801ceac:	4628      	mov	r0, r5
 801ceae:	f7ff faa9 	bl	801c404 <_free_r>
 801ceb2:	2000      	movs	r0, #0
 801ceb4:	6360      	str	r0, [r4, #52]	; 0x34
 801ceb6:	e7c1      	b.n	801ce3c <__sflush_r+0x1c>
 801ceb8:	6a21      	ldr	r1, [r4, #32]
 801ceba:	2301      	movs	r3, #1
 801cebc:	4628      	mov	r0, r5
 801cebe:	47b0      	blx	r6
 801cec0:	1c41      	adds	r1, r0, #1
 801cec2:	d1c7      	bne.n	801ce54 <__sflush_r+0x34>
 801cec4:	682b      	ldr	r3, [r5, #0]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d0c4      	beq.n	801ce54 <__sflush_r+0x34>
 801ceca:	2b1d      	cmp	r3, #29
 801cecc:	d001      	beq.n	801ced2 <__sflush_r+0xb2>
 801cece:	2b16      	cmp	r3, #22
 801ced0:	d101      	bne.n	801ced6 <__sflush_r+0xb6>
 801ced2:	602f      	str	r7, [r5, #0]
 801ced4:	e7b1      	b.n	801ce3a <__sflush_r+0x1a>
 801ced6:	89a3      	ldrh	r3, [r4, #12]
 801ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cedc:	81a3      	strh	r3, [r4, #12]
 801cede:	e7ad      	b.n	801ce3c <__sflush_r+0x1c>
 801cee0:	690f      	ldr	r7, [r1, #16]
 801cee2:	2f00      	cmp	r7, #0
 801cee4:	d0a9      	beq.n	801ce3a <__sflush_r+0x1a>
 801cee6:	0793      	lsls	r3, r2, #30
 801cee8:	680e      	ldr	r6, [r1, #0]
 801ceea:	bf08      	it	eq
 801ceec:	694b      	ldreq	r3, [r1, #20]
 801ceee:	600f      	str	r7, [r1, #0]
 801cef0:	bf18      	it	ne
 801cef2:	2300      	movne	r3, #0
 801cef4:	eba6 0807 	sub.w	r8, r6, r7
 801cef8:	608b      	str	r3, [r1, #8]
 801cefa:	f1b8 0f00 	cmp.w	r8, #0
 801cefe:	dd9c      	ble.n	801ce3a <__sflush_r+0x1a>
 801cf00:	6a21      	ldr	r1, [r4, #32]
 801cf02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cf04:	4643      	mov	r3, r8
 801cf06:	463a      	mov	r2, r7
 801cf08:	4628      	mov	r0, r5
 801cf0a:	47b0      	blx	r6
 801cf0c:	2800      	cmp	r0, #0
 801cf0e:	dc06      	bgt.n	801cf1e <__sflush_r+0xfe>
 801cf10:	89a3      	ldrh	r3, [r4, #12]
 801cf12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf16:	81a3      	strh	r3, [r4, #12]
 801cf18:	f04f 30ff 	mov.w	r0, #4294967295
 801cf1c:	e78e      	b.n	801ce3c <__sflush_r+0x1c>
 801cf1e:	4407      	add	r7, r0
 801cf20:	eba8 0800 	sub.w	r8, r8, r0
 801cf24:	e7e9      	b.n	801cefa <__sflush_r+0xda>
 801cf26:	bf00      	nop
 801cf28:	20400001 	.word	0x20400001

0801cf2c <_fflush_r>:
 801cf2c:	b538      	push	{r3, r4, r5, lr}
 801cf2e:	690b      	ldr	r3, [r1, #16]
 801cf30:	4605      	mov	r5, r0
 801cf32:	460c      	mov	r4, r1
 801cf34:	b913      	cbnz	r3, 801cf3c <_fflush_r+0x10>
 801cf36:	2500      	movs	r5, #0
 801cf38:	4628      	mov	r0, r5
 801cf3a:	bd38      	pop	{r3, r4, r5, pc}
 801cf3c:	b118      	cbz	r0, 801cf46 <_fflush_r+0x1a>
 801cf3e:	6983      	ldr	r3, [r0, #24]
 801cf40:	b90b      	cbnz	r3, 801cf46 <_fflush_r+0x1a>
 801cf42:	f000 f887 	bl	801d054 <__sinit>
 801cf46:	4b14      	ldr	r3, [pc, #80]	; (801cf98 <_fflush_r+0x6c>)
 801cf48:	429c      	cmp	r4, r3
 801cf4a:	d11b      	bne.n	801cf84 <_fflush_r+0x58>
 801cf4c:	686c      	ldr	r4, [r5, #4]
 801cf4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d0ef      	beq.n	801cf36 <_fflush_r+0xa>
 801cf56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cf58:	07d0      	lsls	r0, r2, #31
 801cf5a:	d404      	bmi.n	801cf66 <_fflush_r+0x3a>
 801cf5c:	0599      	lsls	r1, r3, #22
 801cf5e:	d402      	bmi.n	801cf66 <_fflush_r+0x3a>
 801cf60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf62:	f000 f915 	bl	801d190 <__retarget_lock_acquire_recursive>
 801cf66:	4628      	mov	r0, r5
 801cf68:	4621      	mov	r1, r4
 801cf6a:	f7ff ff59 	bl	801ce20 <__sflush_r>
 801cf6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf70:	07da      	lsls	r2, r3, #31
 801cf72:	4605      	mov	r5, r0
 801cf74:	d4e0      	bmi.n	801cf38 <_fflush_r+0xc>
 801cf76:	89a3      	ldrh	r3, [r4, #12]
 801cf78:	059b      	lsls	r3, r3, #22
 801cf7a:	d4dd      	bmi.n	801cf38 <_fflush_r+0xc>
 801cf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf7e:	f000 f909 	bl	801d194 <__retarget_lock_release_recursive>
 801cf82:	e7d9      	b.n	801cf38 <_fflush_r+0xc>
 801cf84:	4b05      	ldr	r3, [pc, #20]	; (801cf9c <_fflush_r+0x70>)
 801cf86:	429c      	cmp	r4, r3
 801cf88:	d101      	bne.n	801cf8e <_fflush_r+0x62>
 801cf8a:	68ac      	ldr	r4, [r5, #8]
 801cf8c:	e7df      	b.n	801cf4e <_fflush_r+0x22>
 801cf8e:	4b04      	ldr	r3, [pc, #16]	; (801cfa0 <_fflush_r+0x74>)
 801cf90:	429c      	cmp	r4, r3
 801cf92:	bf08      	it	eq
 801cf94:	68ec      	ldreq	r4, [r5, #12]
 801cf96:	e7da      	b.n	801cf4e <_fflush_r+0x22>
 801cf98:	08020ed8 	.word	0x08020ed8
 801cf9c:	08020ef8 	.word	0x08020ef8
 801cfa0:	08020eb8 	.word	0x08020eb8

0801cfa4 <std>:
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	b510      	push	{r4, lr}
 801cfa8:	4604      	mov	r4, r0
 801cfaa:	e9c0 3300 	strd	r3, r3, [r0]
 801cfae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cfb2:	6083      	str	r3, [r0, #8]
 801cfb4:	8181      	strh	r1, [r0, #12]
 801cfb6:	6643      	str	r3, [r0, #100]	; 0x64
 801cfb8:	81c2      	strh	r2, [r0, #14]
 801cfba:	6183      	str	r3, [r0, #24]
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	2208      	movs	r2, #8
 801cfc0:	305c      	adds	r0, #92	; 0x5c
 801cfc2:	f7ff fa17 	bl	801c3f4 <memset>
 801cfc6:	4b05      	ldr	r3, [pc, #20]	; (801cfdc <std+0x38>)
 801cfc8:	6263      	str	r3, [r4, #36]	; 0x24
 801cfca:	4b05      	ldr	r3, [pc, #20]	; (801cfe0 <std+0x3c>)
 801cfcc:	62a3      	str	r3, [r4, #40]	; 0x28
 801cfce:	4b05      	ldr	r3, [pc, #20]	; (801cfe4 <std+0x40>)
 801cfd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cfd2:	4b05      	ldr	r3, [pc, #20]	; (801cfe8 <std+0x44>)
 801cfd4:	6224      	str	r4, [r4, #32]
 801cfd6:	6323      	str	r3, [r4, #48]	; 0x30
 801cfd8:	bd10      	pop	{r4, pc}
 801cfda:	bf00      	nop
 801cfdc:	0801d279 	.word	0x0801d279
 801cfe0:	0801d29b 	.word	0x0801d29b
 801cfe4:	0801d2d3 	.word	0x0801d2d3
 801cfe8:	0801d2f7 	.word	0x0801d2f7

0801cfec <_cleanup_r>:
 801cfec:	4901      	ldr	r1, [pc, #4]	; (801cff4 <_cleanup_r+0x8>)
 801cfee:	f000 b8af 	b.w	801d150 <_fwalk_reent>
 801cff2:	bf00      	nop
 801cff4:	0801cf2d 	.word	0x0801cf2d

0801cff8 <__sfmoreglue>:
 801cff8:	b570      	push	{r4, r5, r6, lr}
 801cffa:	1e4a      	subs	r2, r1, #1
 801cffc:	2568      	movs	r5, #104	; 0x68
 801cffe:	4355      	muls	r5, r2
 801d000:	460e      	mov	r6, r1
 801d002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d006:	f7ff fa4d 	bl	801c4a4 <_malloc_r>
 801d00a:	4604      	mov	r4, r0
 801d00c:	b140      	cbz	r0, 801d020 <__sfmoreglue+0x28>
 801d00e:	2100      	movs	r1, #0
 801d010:	e9c0 1600 	strd	r1, r6, [r0]
 801d014:	300c      	adds	r0, #12
 801d016:	60a0      	str	r0, [r4, #8]
 801d018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d01c:	f7ff f9ea 	bl	801c3f4 <memset>
 801d020:	4620      	mov	r0, r4
 801d022:	bd70      	pop	{r4, r5, r6, pc}

0801d024 <__sfp_lock_acquire>:
 801d024:	4801      	ldr	r0, [pc, #4]	; (801d02c <__sfp_lock_acquire+0x8>)
 801d026:	f000 b8b3 	b.w	801d190 <__retarget_lock_acquire_recursive>
 801d02a:	bf00      	nop
 801d02c:	24007344 	.word	0x24007344

0801d030 <__sfp_lock_release>:
 801d030:	4801      	ldr	r0, [pc, #4]	; (801d038 <__sfp_lock_release+0x8>)
 801d032:	f000 b8af 	b.w	801d194 <__retarget_lock_release_recursive>
 801d036:	bf00      	nop
 801d038:	24007344 	.word	0x24007344

0801d03c <__sinit_lock_acquire>:
 801d03c:	4801      	ldr	r0, [pc, #4]	; (801d044 <__sinit_lock_acquire+0x8>)
 801d03e:	f000 b8a7 	b.w	801d190 <__retarget_lock_acquire_recursive>
 801d042:	bf00      	nop
 801d044:	2400733f 	.word	0x2400733f

0801d048 <__sinit_lock_release>:
 801d048:	4801      	ldr	r0, [pc, #4]	; (801d050 <__sinit_lock_release+0x8>)
 801d04a:	f000 b8a3 	b.w	801d194 <__retarget_lock_release_recursive>
 801d04e:	bf00      	nop
 801d050:	2400733f 	.word	0x2400733f

0801d054 <__sinit>:
 801d054:	b510      	push	{r4, lr}
 801d056:	4604      	mov	r4, r0
 801d058:	f7ff fff0 	bl	801d03c <__sinit_lock_acquire>
 801d05c:	69a3      	ldr	r3, [r4, #24]
 801d05e:	b11b      	cbz	r3, 801d068 <__sinit+0x14>
 801d060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d064:	f7ff bff0 	b.w	801d048 <__sinit_lock_release>
 801d068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d06c:	6523      	str	r3, [r4, #80]	; 0x50
 801d06e:	4b13      	ldr	r3, [pc, #76]	; (801d0bc <__sinit+0x68>)
 801d070:	4a13      	ldr	r2, [pc, #76]	; (801d0c0 <__sinit+0x6c>)
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	62a2      	str	r2, [r4, #40]	; 0x28
 801d076:	42a3      	cmp	r3, r4
 801d078:	bf04      	itt	eq
 801d07a:	2301      	moveq	r3, #1
 801d07c:	61a3      	streq	r3, [r4, #24]
 801d07e:	4620      	mov	r0, r4
 801d080:	f000 f820 	bl	801d0c4 <__sfp>
 801d084:	6060      	str	r0, [r4, #4]
 801d086:	4620      	mov	r0, r4
 801d088:	f000 f81c 	bl	801d0c4 <__sfp>
 801d08c:	60a0      	str	r0, [r4, #8]
 801d08e:	4620      	mov	r0, r4
 801d090:	f000 f818 	bl	801d0c4 <__sfp>
 801d094:	2200      	movs	r2, #0
 801d096:	60e0      	str	r0, [r4, #12]
 801d098:	2104      	movs	r1, #4
 801d09a:	6860      	ldr	r0, [r4, #4]
 801d09c:	f7ff ff82 	bl	801cfa4 <std>
 801d0a0:	68a0      	ldr	r0, [r4, #8]
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	2109      	movs	r1, #9
 801d0a6:	f7ff ff7d 	bl	801cfa4 <std>
 801d0aa:	68e0      	ldr	r0, [r4, #12]
 801d0ac:	2202      	movs	r2, #2
 801d0ae:	2112      	movs	r1, #18
 801d0b0:	f7ff ff78 	bl	801cfa4 <std>
 801d0b4:	2301      	movs	r3, #1
 801d0b6:	61a3      	str	r3, [r4, #24]
 801d0b8:	e7d2      	b.n	801d060 <__sinit+0xc>
 801d0ba:	bf00      	nop
 801d0bc:	08020e7c 	.word	0x08020e7c
 801d0c0:	0801cfed 	.word	0x0801cfed

0801d0c4 <__sfp>:
 801d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0c6:	4607      	mov	r7, r0
 801d0c8:	f7ff ffac 	bl	801d024 <__sfp_lock_acquire>
 801d0cc:	4b1e      	ldr	r3, [pc, #120]	; (801d148 <__sfp+0x84>)
 801d0ce:	681e      	ldr	r6, [r3, #0]
 801d0d0:	69b3      	ldr	r3, [r6, #24]
 801d0d2:	b913      	cbnz	r3, 801d0da <__sfp+0x16>
 801d0d4:	4630      	mov	r0, r6
 801d0d6:	f7ff ffbd 	bl	801d054 <__sinit>
 801d0da:	3648      	adds	r6, #72	; 0x48
 801d0dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d0e0:	3b01      	subs	r3, #1
 801d0e2:	d503      	bpl.n	801d0ec <__sfp+0x28>
 801d0e4:	6833      	ldr	r3, [r6, #0]
 801d0e6:	b30b      	cbz	r3, 801d12c <__sfp+0x68>
 801d0e8:	6836      	ldr	r6, [r6, #0]
 801d0ea:	e7f7      	b.n	801d0dc <__sfp+0x18>
 801d0ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d0f0:	b9d5      	cbnz	r5, 801d128 <__sfp+0x64>
 801d0f2:	4b16      	ldr	r3, [pc, #88]	; (801d14c <__sfp+0x88>)
 801d0f4:	60e3      	str	r3, [r4, #12]
 801d0f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d0fa:	6665      	str	r5, [r4, #100]	; 0x64
 801d0fc:	f000 f847 	bl	801d18e <__retarget_lock_init_recursive>
 801d100:	f7ff ff96 	bl	801d030 <__sfp_lock_release>
 801d104:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d108:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d10c:	6025      	str	r5, [r4, #0]
 801d10e:	61a5      	str	r5, [r4, #24]
 801d110:	2208      	movs	r2, #8
 801d112:	4629      	mov	r1, r5
 801d114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d118:	f7ff f96c 	bl	801c3f4 <memset>
 801d11c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d124:	4620      	mov	r0, r4
 801d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d128:	3468      	adds	r4, #104	; 0x68
 801d12a:	e7d9      	b.n	801d0e0 <__sfp+0x1c>
 801d12c:	2104      	movs	r1, #4
 801d12e:	4638      	mov	r0, r7
 801d130:	f7ff ff62 	bl	801cff8 <__sfmoreglue>
 801d134:	4604      	mov	r4, r0
 801d136:	6030      	str	r0, [r6, #0]
 801d138:	2800      	cmp	r0, #0
 801d13a:	d1d5      	bne.n	801d0e8 <__sfp+0x24>
 801d13c:	f7ff ff78 	bl	801d030 <__sfp_lock_release>
 801d140:	230c      	movs	r3, #12
 801d142:	603b      	str	r3, [r7, #0]
 801d144:	e7ee      	b.n	801d124 <__sfp+0x60>
 801d146:	bf00      	nop
 801d148:	08020e7c 	.word	0x08020e7c
 801d14c:	ffff0001 	.word	0xffff0001

0801d150 <_fwalk_reent>:
 801d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d154:	4606      	mov	r6, r0
 801d156:	4688      	mov	r8, r1
 801d158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d15c:	2700      	movs	r7, #0
 801d15e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d162:	f1b9 0901 	subs.w	r9, r9, #1
 801d166:	d505      	bpl.n	801d174 <_fwalk_reent+0x24>
 801d168:	6824      	ldr	r4, [r4, #0]
 801d16a:	2c00      	cmp	r4, #0
 801d16c:	d1f7      	bne.n	801d15e <_fwalk_reent+0xe>
 801d16e:	4638      	mov	r0, r7
 801d170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d174:	89ab      	ldrh	r3, [r5, #12]
 801d176:	2b01      	cmp	r3, #1
 801d178:	d907      	bls.n	801d18a <_fwalk_reent+0x3a>
 801d17a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d17e:	3301      	adds	r3, #1
 801d180:	d003      	beq.n	801d18a <_fwalk_reent+0x3a>
 801d182:	4629      	mov	r1, r5
 801d184:	4630      	mov	r0, r6
 801d186:	47c0      	blx	r8
 801d188:	4307      	orrs	r7, r0
 801d18a:	3568      	adds	r5, #104	; 0x68
 801d18c:	e7e9      	b.n	801d162 <_fwalk_reent+0x12>

0801d18e <__retarget_lock_init_recursive>:
 801d18e:	4770      	bx	lr

0801d190 <__retarget_lock_acquire_recursive>:
 801d190:	4770      	bx	lr

0801d192 <__retarget_lock_release>:
 801d192:	4770      	bx	lr

0801d194 <__retarget_lock_release_recursive>:
 801d194:	4770      	bx	lr

0801d196 <__swhatbuf_r>:
 801d196:	b570      	push	{r4, r5, r6, lr}
 801d198:	460e      	mov	r6, r1
 801d19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d19e:	2900      	cmp	r1, #0
 801d1a0:	b096      	sub	sp, #88	; 0x58
 801d1a2:	4614      	mov	r4, r2
 801d1a4:	461d      	mov	r5, r3
 801d1a6:	da07      	bge.n	801d1b8 <__swhatbuf_r+0x22>
 801d1a8:	2300      	movs	r3, #0
 801d1aa:	602b      	str	r3, [r5, #0]
 801d1ac:	89b3      	ldrh	r3, [r6, #12]
 801d1ae:	061a      	lsls	r2, r3, #24
 801d1b0:	d410      	bmi.n	801d1d4 <__swhatbuf_r+0x3e>
 801d1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d1b6:	e00e      	b.n	801d1d6 <__swhatbuf_r+0x40>
 801d1b8:	466a      	mov	r2, sp
 801d1ba:	f000 f8c3 	bl	801d344 <_fstat_r>
 801d1be:	2800      	cmp	r0, #0
 801d1c0:	dbf2      	blt.n	801d1a8 <__swhatbuf_r+0x12>
 801d1c2:	9a01      	ldr	r2, [sp, #4]
 801d1c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d1c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d1cc:	425a      	negs	r2, r3
 801d1ce:	415a      	adcs	r2, r3
 801d1d0:	602a      	str	r2, [r5, #0]
 801d1d2:	e7ee      	b.n	801d1b2 <__swhatbuf_r+0x1c>
 801d1d4:	2340      	movs	r3, #64	; 0x40
 801d1d6:	2000      	movs	r0, #0
 801d1d8:	6023      	str	r3, [r4, #0]
 801d1da:	b016      	add	sp, #88	; 0x58
 801d1dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d1e0 <__smakebuf_r>:
 801d1e0:	898b      	ldrh	r3, [r1, #12]
 801d1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1e4:	079d      	lsls	r5, r3, #30
 801d1e6:	4606      	mov	r6, r0
 801d1e8:	460c      	mov	r4, r1
 801d1ea:	d507      	bpl.n	801d1fc <__smakebuf_r+0x1c>
 801d1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1f0:	6023      	str	r3, [r4, #0]
 801d1f2:	6123      	str	r3, [r4, #16]
 801d1f4:	2301      	movs	r3, #1
 801d1f6:	6163      	str	r3, [r4, #20]
 801d1f8:	b002      	add	sp, #8
 801d1fa:	bd70      	pop	{r4, r5, r6, pc}
 801d1fc:	ab01      	add	r3, sp, #4
 801d1fe:	466a      	mov	r2, sp
 801d200:	f7ff ffc9 	bl	801d196 <__swhatbuf_r>
 801d204:	9900      	ldr	r1, [sp, #0]
 801d206:	4605      	mov	r5, r0
 801d208:	4630      	mov	r0, r6
 801d20a:	f7ff f94b 	bl	801c4a4 <_malloc_r>
 801d20e:	b948      	cbnz	r0, 801d224 <__smakebuf_r+0x44>
 801d210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d214:	059a      	lsls	r2, r3, #22
 801d216:	d4ef      	bmi.n	801d1f8 <__smakebuf_r+0x18>
 801d218:	f023 0303 	bic.w	r3, r3, #3
 801d21c:	f043 0302 	orr.w	r3, r3, #2
 801d220:	81a3      	strh	r3, [r4, #12]
 801d222:	e7e3      	b.n	801d1ec <__smakebuf_r+0xc>
 801d224:	4b0d      	ldr	r3, [pc, #52]	; (801d25c <__smakebuf_r+0x7c>)
 801d226:	62b3      	str	r3, [r6, #40]	; 0x28
 801d228:	89a3      	ldrh	r3, [r4, #12]
 801d22a:	6020      	str	r0, [r4, #0]
 801d22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d230:	81a3      	strh	r3, [r4, #12]
 801d232:	9b00      	ldr	r3, [sp, #0]
 801d234:	6163      	str	r3, [r4, #20]
 801d236:	9b01      	ldr	r3, [sp, #4]
 801d238:	6120      	str	r0, [r4, #16]
 801d23a:	b15b      	cbz	r3, 801d254 <__smakebuf_r+0x74>
 801d23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d240:	4630      	mov	r0, r6
 801d242:	f000 f891 	bl	801d368 <_isatty_r>
 801d246:	b128      	cbz	r0, 801d254 <__smakebuf_r+0x74>
 801d248:	89a3      	ldrh	r3, [r4, #12]
 801d24a:	f023 0303 	bic.w	r3, r3, #3
 801d24e:	f043 0301 	orr.w	r3, r3, #1
 801d252:	81a3      	strh	r3, [r4, #12]
 801d254:	89a0      	ldrh	r0, [r4, #12]
 801d256:	4305      	orrs	r5, r0
 801d258:	81a5      	strh	r5, [r4, #12]
 801d25a:	e7cd      	b.n	801d1f8 <__smakebuf_r+0x18>
 801d25c:	0801cfed 	.word	0x0801cfed

0801d260 <__malloc_lock>:
 801d260:	4801      	ldr	r0, [pc, #4]	; (801d268 <__malloc_lock+0x8>)
 801d262:	f7ff bf95 	b.w	801d190 <__retarget_lock_acquire_recursive>
 801d266:	bf00      	nop
 801d268:	24007340 	.word	0x24007340

0801d26c <__malloc_unlock>:
 801d26c:	4801      	ldr	r0, [pc, #4]	; (801d274 <__malloc_unlock+0x8>)
 801d26e:	f7ff bf91 	b.w	801d194 <__retarget_lock_release_recursive>
 801d272:	bf00      	nop
 801d274:	24007340 	.word	0x24007340

0801d278 <__sread>:
 801d278:	b510      	push	{r4, lr}
 801d27a:	460c      	mov	r4, r1
 801d27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d280:	f000 f894 	bl	801d3ac <_read_r>
 801d284:	2800      	cmp	r0, #0
 801d286:	bfab      	itete	ge
 801d288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d28a:	89a3      	ldrhlt	r3, [r4, #12]
 801d28c:	181b      	addge	r3, r3, r0
 801d28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d292:	bfac      	ite	ge
 801d294:	6563      	strge	r3, [r4, #84]	; 0x54
 801d296:	81a3      	strhlt	r3, [r4, #12]
 801d298:	bd10      	pop	{r4, pc}

0801d29a <__swrite>:
 801d29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d29e:	461f      	mov	r7, r3
 801d2a0:	898b      	ldrh	r3, [r1, #12]
 801d2a2:	05db      	lsls	r3, r3, #23
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	460c      	mov	r4, r1
 801d2a8:	4616      	mov	r6, r2
 801d2aa:	d505      	bpl.n	801d2b8 <__swrite+0x1e>
 801d2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2b0:	2302      	movs	r3, #2
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	f000 f868 	bl	801d388 <_lseek_r>
 801d2b8:	89a3      	ldrh	r3, [r4, #12]
 801d2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d2c2:	81a3      	strh	r3, [r4, #12]
 801d2c4:	4632      	mov	r2, r6
 801d2c6:	463b      	mov	r3, r7
 801d2c8:	4628      	mov	r0, r5
 801d2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d2ce:	f000 b817 	b.w	801d300 <_write_r>

0801d2d2 <__sseek>:
 801d2d2:	b510      	push	{r4, lr}
 801d2d4:	460c      	mov	r4, r1
 801d2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2da:	f000 f855 	bl	801d388 <_lseek_r>
 801d2de:	1c43      	adds	r3, r0, #1
 801d2e0:	89a3      	ldrh	r3, [r4, #12]
 801d2e2:	bf15      	itete	ne
 801d2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d2ee:	81a3      	strheq	r3, [r4, #12]
 801d2f0:	bf18      	it	ne
 801d2f2:	81a3      	strhne	r3, [r4, #12]
 801d2f4:	bd10      	pop	{r4, pc}

0801d2f6 <__sclose>:
 801d2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2fa:	f000 b813 	b.w	801d324 <_close_r>
	...

0801d300 <_write_r>:
 801d300:	b538      	push	{r3, r4, r5, lr}
 801d302:	4d07      	ldr	r5, [pc, #28]	; (801d320 <_write_r+0x20>)
 801d304:	4604      	mov	r4, r0
 801d306:	4608      	mov	r0, r1
 801d308:	4611      	mov	r1, r2
 801d30a:	2200      	movs	r2, #0
 801d30c:	602a      	str	r2, [r5, #0]
 801d30e:	461a      	mov	r2, r3
 801d310:	f7e4 fcef 	bl	8001cf2 <_write>
 801d314:	1c43      	adds	r3, r0, #1
 801d316:	d102      	bne.n	801d31e <_write_r+0x1e>
 801d318:	682b      	ldr	r3, [r5, #0]
 801d31a:	b103      	cbz	r3, 801d31e <_write_r+0x1e>
 801d31c:	6023      	str	r3, [r4, #0]
 801d31e:	bd38      	pop	{r3, r4, r5, pc}
 801d320:	24007348 	.word	0x24007348

0801d324 <_close_r>:
 801d324:	b538      	push	{r3, r4, r5, lr}
 801d326:	4d06      	ldr	r5, [pc, #24]	; (801d340 <_close_r+0x1c>)
 801d328:	2300      	movs	r3, #0
 801d32a:	4604      	mov	r4, r0
 801d32c:	4608      	mov	r0, r1
 801d32e:	602b      	str	r3, [r5, #0]
 801d330:	f7e4 fcec 	bl	8001d0c <_close>
 801d334:	1c43      	adds	r3, r0, #1
 801d336:	d102      	bne.n	801d33e <_close_r+0x1a>
 801d338:	682b      	ldr	r3, [r5, #0]
 801d33a:	b103      	cbz	r3, 801d33e <_close_r+0x1a>
 801d33c:	6023      	str	r3, [r4, #0]
 801d33e:	bd38      	pop	{r3, r4, r5, pc}
 801d340:	24007348 	.word	0x24007348

0801d344 <_fstat_r>:
 801d344:	b538      	push	{r3, r4, r5, lr}
 801d346:	4d07      	ldr	r5, [pc, #28]	; (801d364 <_fstat_r+0x20>)
 801d348:	2300      	movs	r3, #0
 801d34a:	4604      	mov	r4, r0
 801d34c:	4608      	mov	r0, r1
 801d34e:	4611      	mov	r1, r2
 801d350:	602b      	str	r3, [r5, #0]
 801d352:	f7e4 fcde 	bl	8001d12 <_fstat>
 801d356:	1c43      	adds	r3, r0, #1
 801d358:	d102      	bne.n	801d360 <_fstat_r+0x1c>
 801d35a:	682b      	ldr	r3, [r5, #0]
 801d35c:	b103      	cbz	r3, 801d360 <_fstat_r+0x1c>
 801d35e:	6023      	str	r3, [r4, #0]
 801d360:	bd38      	pop	{r3, r4, r5, pc}
 801d362:	bf00      	nop
 801d364:	24007348 	.word	0x24007348

0801d368 <_isatty_r>:
 801d368:	b538      	push	{r3, r4, r5, lr}
 801d36a:	4d06      	ldr	r5, [pc, #24]	; (801d384 <_isatty_r+0x1c>)
 801d36c:	2300      	movs	r3, #0
 801d36e:	4604      	mov	r4, r0
 801d370:	4608      	mov	r0, r1
 801d372:	602b      	str	r3, [r5, #0]
 801d374:	f7e4 fcd2 	bl	8001d1c <_isatty>
 801d378:	1c43      	adds	r3, r0, #1
 801d37a:	d102      	bne.n	801d382 <_isatty_r+0x1a>
 801d37c:	682b      	ldr	r3, [r5, #0]
 801d37e:	b103      	cbz	r3, 801d382 <_isatty_r+0x1a>
 801d380:	6023      	str	r3, [r4, #0]
 801d382:	bd38      	pop	{r3, r4, r5, pc}
 801d384:	24007348 	.word	0x24007348

0801d388 <_lseek_r>:
 801d388:	b538      	push	{r3, r4, r5, lr}
 801d38a:	4d07      	ldr	r5, [pc, #28]	; (801d3a8 <_lseek_r+0x20>)
 801d38c:	4604      	mov	r4, r0
 801d38e:	4608      	mov	r0, r1
 801d390:	4611      	mov	r1, r2
 801d392:	2200      	movs	r2, #0
 801d394:	602a      	str	r2, [r5, #0]
 801d396:	461a      	mov	r2, r3
 801d398:	f7e4 fcc2 	bl	8001d20 <_lseek>
 801d39c:	1c43      	adds	r3, r0, #1
 801d39e:	d102      	bne.n	801d3a6 <_lseek_r+0x1e>
 801d3a0:	682b      	ldr	r3, [r5, #0]
 801d3a2:	b103      	cbz	r3, 801d3a6 <_lseek_r+0x1e>
 801d3a4:	6023      	str	r3, [r4, #0]
 801d3a6:	bd38      	pop	{r3, r4, r5, pc}
 801d3a8:	24007348 	.word	0x24007348

0801d3ac <_read_r>:
 801d3ac:	b538      	push	{r3, r4, r5, lr}
 801d3ae:	4d07      	ldr	r5, [pc, #28]	; (801d3cc <_read_r+0x20>)
 801d3b0:	4604      	mov	r4, r0
 801d3b2:	4608      	mov	r0, r1
 801d3b4:	4611      	mov	r1, r2
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	602a      	str	r2, [r5, #0]
 801d3ba:	461a      	mov	r2, r3
 801d3bc:	f7e4 fc8c 	bl	8001cd8 <_read>
 801d3c0:	1c43      	adds	r3, r0, #1
 801d3c2:	d102      	bne.n	801d3ca <_read_r+0x1e>
 801d3c4:	682b      	ldr	r3, [r5, #0]
 801d3c6:	b103      	cbz	r3, 801d3ca <_read_r+0x1e>
 801d3c8:	6023      	str	r3, [r4, #0]
 801d3ca:	bd38      	pop	{r3, r4, r5, pc}
 801d3cc:	24007348 	.word	0x24007348

0801d3d0 <_init>:
 801d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3d2:	bf00      	nop
 801d3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3d6:	bc08      	pop	{r3}
 801d3d8:	469e      	mov	lr, r3
 801d3da:	4770      	bx	lr

0801d3dc <_fini>:
 801d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3de:	bf00      	nop
 801d3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3e2:	bc08      	pop	{r3}
 801d3e4:	469e      	mov	lr, r3
 801d3e6:	4770      	bx	lr
